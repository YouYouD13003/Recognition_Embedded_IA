
EMBEDDED_AI_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012db4  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003cb8  08012ef8  08012ef8  00013ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016bb0  08016bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016bb8  08016bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08016bbc  08016bbc  00017bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000234  20000008  08016bc0  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000023c  08016df4  0001823c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000274  08016e29  00018274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003078  20000288  08016e3a  00018288  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003300  08016e3a  00018300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001a000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001a000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08016e3a  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003a0fa  00000000  00000000  00019a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007c43  00000000  00000000  00053b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003550  00000000  00000000  0005b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000292d  00000000  00000000  0005ed28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000312d3  00000000  00000000  00061655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000401f8  00000000  00000000  00092928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010b6d0  00000000  00000000  000d2b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000087  00000000  00000000  001de1f0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000f418  00000000  00000000  001de278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000be  00000000  00000000  001ed690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000288 	.word	0x20000288
 800015c:	00000000 	.word	0x00000000
 8000160:	08012edc 	.word	0x08012edc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000028c 	.word	0x2000028c
 800017c:	08012edc 	.word	0x08012edc

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000e84:	b5b0      	push	{r4, r5, r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <APPD_EnableCPU2+0x34>)
 8000e8c:	1d3c      	adds	r4, r7, #4
 8000e8e:	461d      	mov	r5, r3
 8000e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e94:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e98:	c403      	stmia	r4!, {r0, r1}
 8000e9a:	8022      	strh	r2, [r4, #0]
 8000e9c:	3402      	adds	r4, #2
 8000e9e:	0c13      	lsrs	r3, r2, #16
 8000ea0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000ea2:	f00a fc3d 	bl	800b720 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f009 fece 	bl	800ac4a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000eae:	bf00      	nop
}
 8000eb0:	3720      	adds	r7, #32
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08012ef8 	.word	0x08012ef8

08000ebc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000eca:	f023 0207 	bic.w	r2, r3, #7
 8000ece:	4905      	ldr	r1, [pc, #20]	@ (8000ee4 <LL_C2_PWR_SetPowerMode+0x28>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000ed8:	bf00      	nop
 8000eda:	370c      	adds	r7, #12
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	58000400 	.word	0x58000400

08000ee8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8000ef6:	4905      	ldr	r1, [pc, #20]	@ (8000f0c <LL_EXTI_EnableIT_32_63+0x24>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	58000800 	.word	0x58000800

08000f10 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000f1e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f2a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f36:	4313      	orrs	r3, r2
 8000f38:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	cafecafe 	.word	0xcafecafe

08000f4c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000fcc:	d101      	bne.n	8000fd2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000ff2:	d101      	bne.n	8000ff8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800100c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001010:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001012:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800101c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4013      	ands	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001028:	68fb      	ldr	r3, [r7, #12]
}
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <LL_DBGMCU_GetDeviceID+0x18>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e0042000 	.word	0xe0042000

08001054 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001058:	4b04      	ldr	r3, [pc, #16]	@ (800106c <LL_DBGMCU_GetRevisionID+0x18>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	0c1b      	lsrs	r3, r3, #16
 800105e:	b29b      	uxth	r3, r3
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e0042000 	.word	0xe0042000

08001070 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	605a      	str	r2, [r3, #4]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695a      	ldr	r2, [r3, #20]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	431a      	orrs	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	615a      	str	r2, [r3, #20]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	431a      	orrs	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	615a      	str	r2, [r3, #20]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	609a      	str	r2, [r3, #8]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <LL_LPM_EnableSleep+0x1c>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <LL_LPM_EnableSleep+0x1c>)
 800113e:	f023 0304 	bic.w	r3, r3, #4
 8001142:	6113      	str	r3, [r2, #16]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	22ff      	movs	r2, #255	@ 0xff
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	22ca      	movs	r2, #202	@ 0xca
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2253      	movs	r2, #83	@ 0x53
 8001180:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f023 0207 	bic.w	r2, r3, #7
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	609a      	str	r2, [r3, #8]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <MX_APPE_Config+0x18>)
 80011ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011be:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80011c0:	f000 f824 	bl	800120c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80011c4:	f000 f864 	bl	8001290 <Config_HSE>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	58004000 	.word	0x58004000

080011d0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80011d4:	f000 f870 	bl	80012b8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80011d8:	f000 f888 	bl	80012ec <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80011dc:	4903      	ldr	r1, [pc, #12]	@ (80011ec <MX_APPE_Init+0x1c>)
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 ff30 	bl	8002044 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80011e4:	f000 f890 	bl	8001308 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80011e8:	bf00      	nop
}
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000055c 	.word	0x2000055c

080011f0 <Init_Smps>:

void Init_Smps(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80011f4:	bf00      	nop
}
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <Init_Exti>:

void Init_Exti(void)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001202:	2050      	movs	r0, #80	@ 0x50
 8001204:	f7ff fe70 	bl	8000ee8 <LL_EXTI_EnableIT_32_63>

  return;
 8001208:	bf00      	nop
}
 800120a:	bd80      	pop	{r7, pc}

0800120c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001210:	f000 f804 	bl	800121c <Reset_BackupDomain>

  Reset_IPCC();
 8001214:	f000 f81a 	bl	800124c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001218:	bf00      	nop
}
 800121a:	bd80      	pop	{r7, pc}

0800121c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001220:	f7ff feca 	bl	8000fb8 <LL_RCC_IsActiveFlag_PINRST>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00d      	beq.n	8001246 <Reset_BackupDomain+0x2a>
 800122a:	f7ff fed8 	bl	8000fde <LL_RCC_IsActiveFlag_SFTRST>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d108      	bne.n	8001246 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001234:	f003 ffaa 	bl	800518c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001238:	f003 ffa8 	bl	800518c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800123c:	f7ff fe9a 	bl	8000f74 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001240:	f7ff fea9 	bl	8000f96 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001244:	bf00      	nop
 8001246:	bf00      	nop
}
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001250:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001254:	f7ff fed6 	bl	8001004 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001258:	213f      	movs	r1, #63	@ 0x3f
 800125a:	480c      	ldr	r0, [pc, #48]	@ (800128c <Reset_IPCC+0x40>)
 800125c:	f7ff ff4e 	bl	80010fc <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001260:	213f      	movs	r1, #63	@ 0x3f
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <Reset_IPCC+0x40>)
 8001264:	f7ff ff58 	bl	8001118 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001268:	213f      	movs	r1, #63	@ 0x3f
 800126a:	4808      	ldr	r0, [pc, #32]	@ (800128c <Reset_IPCC+0x40>)
 800126c:	f7ff ff00 	bl	8001070 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001270:	213f      	movs	r1, #63	@ 0x3f
 8001272:	4806      	ldr	r0, [pc, #24]	@ (800128c <Reset_IPCC+0x40>)
 8001274:	f7ff ff1f 	bl	80010b6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001278:	213f      	movs	r1, #63	@ 0x3f
 800127a:	4804      	ldr	r0, [pc, #16]	@ (800128c <Reset_IPCC+0x40>)
 800127c:	f7ff ff0a 	bl	8001094 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001280:	213f      	movs	r1, #63	@ 0x3f
 8001282:	4802      	ldr	r0, [pc, #8]	@ (800128c <Reset_IPCC+0x40>)
 8001284:	f7ff ff29 	bl	80010da <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001288:	bf00      	nop
}
 800128a:	bd80      	pop	{r7, pc}
 800128c:	58000c00 	.word	0x58000c00

08001290 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001296:	2000      	movs	r0, #0
 8001298:	f00a faf6 	bl	800b888 <OTP_Read>
 800129c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	799b      	ldrb	r3, [r3, #6]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe31 	bl	8000f10 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012ae:	bf00      	nop
 80012b0:	bf00      	nop
}
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <System_Init>:

static void System_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  Init_Smps();
 80012bc:	f7ff ff98 	bl	80011f0 <Init_Smps>

  Init_Exti();
 80012c0:	f7ff ff9d 	bl	80011fe <Init_Exti>

  Init_Rtc();
 80012c4:	f000 f802 	bl	80012cc <Init_Rtc>

  return;
 80012c8:	bf00      	nop
}
 80012ca:	bd80      	pop	{r7, pc}

080012cc <Init_Rtc>:

static void Init_Rtc(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80012d0:	4805      	ldr	r0, [pc, #20]	@ (80012e8 <Init_Rtc+0x1c>)
 80012d2:	f7ff ff4c 	bl	800116e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80012d6:	2100      	movs	r1, #0
 80012d8:	4803      	ldr	r0, [pc, #12]	@ (80012e8 <Init_Rtc+0x1c>)
 80012da:	f7ff ff58 	bl	800118e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80012de:	4802      	ldr	r0, [pc, #8]	@ (80012e8 <Init_Rtc+0x1c>)
 80012e0:	f7ff ff38 	bl	8001154 <LL_RTC_EnableWriteProtection>

  return;
 80012e4:	bf00      	nop
}
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40002800 	.word	0x40002800

080012ec <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80012f0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80012f4:	f7ff fe2a 	bl	8000f4c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80012f8:	f00d fb68 	bl	800e9cc <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80012fc:	2004      	movs	r0, #4
 80012fe:	f7ff fddd 	bl	8000ebc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001302:	bf00      	nop
}
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800130e:	f00a f851 	bl	800b3b4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001312:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <appe_Tl_Init+0x50>)
 8001314:	2100      	movs	r1, #0
 8001316:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800131a:	f00d fc95 	bl	800ec48 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <appe_Tl_Init+0x54>)
 8001320:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <appe_Tl_Init+0x58>)
 8001324:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	480e      	ldr	r0, [pc, #56]	@ (8001364 <appe_Tl_Init+0x5c>)
 800132c:	f009 ff04 	bl	800b138 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <appe_Tl_Init+0x60>)
 8001332:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001334:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <appe_Tl_Init+0x64>)
 8001336:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <appe_Tl_Init+0x68>)
 800133a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800133c:	f240 533c 	movw	r3, #1340	@ 0x53c
 8001340:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	4618      	mov	r0, r3
 8001348:	f00a f976 	bl	800b638 <TL_MM_Init>

  TL_Enable();
 800134c:	f00a f82c 	bl	800b3a8 <TL_Enable>

  return;
 8001350:	bf00      	nop
}
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	0800b171 	.word	0x0800b171
 800135c:	20030734 	.word	0x20030734
 8001360:	08001375 	.word	0x08001375
 8001364:	0800138d 	.word	0x0800138d
 8001368:	2003094c 	.word	0x2003094c
 800136c:	20030840 	.word	0x20030840
 8001370:	200301f8 	.word	0x200301f8

08001374 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800137e:	bf00      	nop
}
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	330b      	adds	r3, #11
 800139a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80013a6:	2b07      	cmp	r3, #7
 80013a8:	f200 80d0 	bhi.w	800154c <APPE_SysUserEvtRx+0x1c0>
 80013ac:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <APPE_SysUserEvtRx+0x28>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	080013d5 	.word	0x080013d5
 80013b8:	08001467 	.word	0x08001467
 80013bc:	08001489 	.word	0x08001489
 80013c0:	0800154d 	.word	0x0800154d
 80013c4:	080014cd 	.word	0x080014cd
 80013c8:	080014f1 	.word	0x080014f1
 80013cc:	0800150d 	.word	0x0800150d
 80013d0:	08001531 	.word	0x08001531
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	4618      	mov	r0, r3
 80013da:	f009 fc63 	bl	800aca4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80013de:	485e      	ldr	r0, [pc, #376]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 80013e0:	f00a fa2a 	bl	800b838 <DbgTraceGetFileName>
 80013e4:	4601      	mov	r1, r0
 80013e6:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80013ea:	4a5c      	ldr	r2, [pc, #368]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 80013ec:	485c      	ldr	r0, [pc, #368]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 80013ee:	f00f fb3b 	bl	8010a68 <iprintf>
 80013f2:	7b3b      	ldrb	r3, [r7, #12]
 80013f4:	4619      	mov	r1, r3
 80013f6:	7b7b      	ldrb	r3, [r7, #13]
 80013f8:	461a      	mov	r2, r3
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	4859      	ldr	r0, [pc, #356]	@ (8001564 <APPE_SysUserEvtRx+0x1d8>)
 80013fe:	f00f fb33 	bl	8010a68 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001402:	4855      	ldr	r0, [pc, #340]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 8001404:	f00a fa18 	bl	800b838 <DbgTraceGetFileName>
 8001408:	4601      	mov	r1, r0
 800140a:	f240 136b 	movw	r3, #363	@ 0x16b
 800140e:	4a53      	ldr	r2, [pc, #332]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 8001410:	4853      	ldr	r0, [pc, #332]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001412:	f00f fb29 	bl	8010a68 <iprintf>
 8001416:	7c3b      	ldrb	r3, [r7, #16]
 8001418:	4619      	mov	r1, r3
 800141a:	4853      	ldr	r0, [pc, #332]	@ (8001568 <APPE_SysUserEvtRx+0x1dc>)
 800141c:	f00f fb24 	bl	8010a68 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001420:	484d      	ldr	r0, [pc, #308]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 8001422:	f00a fa09 	bl	800b838 <DbgTraceGetFileName>
 8001426:	4601      	mov	r1, r0
 8001428:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800142c:	4a4b      	ldr	r2, [pc, #300]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 800142e:	484c      	ldr	r0, [pc, #304]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001430:	f00f fb1a 	bl	8010a68 <iprintf>
 8001434:	7dbb      	ldrb	r3, [r7, #22]
 8001436:	4619      	mov	r1, r3
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	461a      	mov	r2, r3
 800143c:	7e3b      	ldrb	r3, [r7, #24]
 800143e:	484b      	ldr	r0, [pc, #300]	@ (800156c <APPE_SysUserEvtRx+0x1e0>)
 8001440:	f00f fb12 	bl	8010a68 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001444:	4844      	ldr	r0, [pc, #272]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 8001446:	f00a f9f7 	bl	800b838 <DbgTraceGetFileName>
 800144a:	4601      	mov	r1, r0
 800144c:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8001450:	4a42      	ldr	r2, [pc, #264]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 8001452:	4843      	ldr	r0, [pc, #268]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001454:	f00f fb08 	bl	8010a68 <iprintf>
 8001458:	4845      	ldr	r0, [pc, #276]	@ (8001570 <APPE_SysUserEvtRx+0x1e4>)
 800145a:	f00f fb05 	bl	8010a68 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 f8e0 	bl	8001624 <APPE_SysEvtReadyProcessing>
    break;
 8001464:	e073      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001466:	483c      	ldr	r0, [pc, #240]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 8001468:	f00a f9e6 	bl	800b838 <DbgTraceGetFileName>
 800146c:	4601      	mov	r1, r0
 800146e:	f240 1373 	movw	r3, #371	@ 0x173
 8001472:	4a3a      	ldr	r2, [pc, #232]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 8001474:	483a      	ldr	r0, [pc, #232]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001476:	f00f faf7 	bl	8010a68 <iprintf>
 800147a:	483e      	ldr	r0, [pc, #248]	@ (8001574 <APPE_SysUserEvtRx+0x1e8>)
 800147c:	f00f faf4 	bl	8010a68 <iprintf>
    APPE_SysEvtError(pPayload);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 f885 	bl	8001590 <APPE_SysEvtError>
    break;
 8001486:	e062      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001488:	4833      	ldr	r0, [pc, #204]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 800148a:	f00a f9d5 	bl	800b838 <DbgTraceGetFileName>
 800148e:	4601      	mov	r1, r0
 8001490:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001494:	4a31      	ldr	r2, [pc, #196]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 8001496:	4832      	ldr	r0, [pc, #200]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001498:	f00f fae6 	bl	8010a68 <iprintf>
 800149c:	4836      	ldr	r0, [pc, #216]	@ (8001578 <APPE_SysUserEvtRx+0x1ec>)
 800149e:	f00f fb53 	bl	8010b48 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80014a2:	482d      	ldr	r0, [pc, #180]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 80014a4:	f00a f9c8 	bl	800b838 <DbgTraceGetFileName>
 80014a8:	4601      	mov	r1, r0
 80014aa:	f240 1379 	movw	r3, #377	@ 0x179
 80014ae:	4a2b      	ldr	r2, [pc, #172]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 80014b0:	482b      	ldr	r0, [pc, #172]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 80014b2:	f00f fad9 	bl	8010a68 <iprintf>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3302      	adds	r3, #2
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3302      	adds	r3, #2
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	461a      	mov	r2, r3
 80014c4:	482d      	ldr	r0, [pc, #180]	@ (800157c <APPE_SysUserEvtRx+0x1f0>)
 80014c6:	f00f facf 	bl	8010a68 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80014ca:	e040      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80014cc:	4822      	ldr	r0, [pc, #136]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 80014ce:	f00a f9b3 	bl	800b838 <DbgTraceGetFileName>
 80014d2:	4601      	mov	r1, r0
 80014d4:	f240 137f 	movw	r3, #383	@ 0x17f
 80014d8:	4a20      	ldr	r2, [pc, #128]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 80014da:	4821      	ldr	r0, [pc, #132]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 80014dc:	f00f fac4 	bl	8010a68 <iprintf>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	3302      	adds	r3, #2
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	4825      	ldr	r0, [pc, #148]	@ (8001580 <APPE_SysUserEvtRx+0x1f4>)
 80014ea:	f00f fabd 	bl	8010a68 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80014ee:	e02e      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80014f0:	4819      	ldr	r0, [pc, #100]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 80014f2:	f00a f9a1 	bl	800b838 <DbgTraceGetFileName>
 80014f6:	4601      	mov	r1, r0
 80014f8:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 80014fe:	4818      	ldr	r0, [pc, #96]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001500:	f00f fab2 	bl	8010a68 <iprintf>
 8001504:	481f      	ldr	r0, [pc, #124]	@ (8001584 <APPE_SysUserEvtRx+0x1f8>)
 8001506:	f00f faaf 	bl	8010a68 <iprintf>
    break;
 800150a:	e020      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800150c:	4812      	ldr	r0, [pc, #72]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 800150e:	f00a f993 	bl	800b838 <DbgTraceGetFileName>
 8001512:	4601      	mov	r1, r0
 8001514:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001518:	4a10      	ldr	r2, [pc, #64]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 800151a:	4811      	ldr	r0, [pc, #68]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 800151c:	f00f faa4 	bl	8010a68 <iprintf>
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3302      	adds	r3, #2
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4619      	mov	r1, r3
 8001528:	4817      	ldr	r0, [pc, #92]	@ (8001588 <APPE_SysUserEvtRx+0x1fc>)
 800152a:	f00f fa9d 	bl	8010a68 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800152e:	e00e      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001530:	4809      	ldr	r0, [pc, #36]	@ (8001558 <APPE_SysUserEvtRx+0x1cc>)
 8001532:	f00a f981 	bl	800b838 <DbgTraceGetFileName>
 8001536:	4601      	mov	r1, r0
 8001538:	f240 138d 	movw	r3, #397	@ 0x18d
 800153c:	4a07      	ldr	r2, [pc, #28]	@ (800155c <APPE_SysUserEvtRx+0x1d0>)
 800153e:	4808      	ldr	r0, [pc, #32]	@ (8001560 <APPE_SysUserEvtRx+0x1d4>)
 8001540:	f00f fa92 	bl	8010a68 <iprintf>
 8001544:	4811      	ldr	r0, [pc, #68]	@ (800158c <APPE_SysUserEvtRx+0x200>)
 8001546:	f00f fa8f 	bl	8010a68 <iprintf>
    break;
 800154a:	e000      	b.n	800154e <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 800154c:	bf00      	nop
  }

  return;
 800154e:	bf00      	nop
}
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08012f14 	.word	0x08012f14
 800155c:	0801585c 	.word	0x0801585c
 8001560:	08012f2c 	.word	0x08012f2c
 8001564:	08012f40 	.word	0x08012f40
 8001568:	08012f64 	.word	0x08012f64
 800156c:	08012f80 	.word	0x08012f80
 8001570:	08012f98 	.word	0x08012f98
 8001574:	08012fb8 	.word	0x08012fb8
 8001578:	08012fdc 	.word	0x08012fdc
 800157c:	0801302c 	.word	0x0801302c
 8001580:	08013054 	.word	0x08013054
 8001584:	08013090 	.word	0x08013090
 8001588:	080130b4 	.word	0x080130b4
 800158c:	080130f0 	.word	0x080130f0

08001590 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	330b      	adds	r3, #11
 800159e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	3302      	adds	r3, #2
 80015a4:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80015a6:	4819      	ldr	r0, [pc, #100]	@ (800160c <APPE_SysEvtError+0x7c>)
 80015a8:	f00a f946 	bl	800b838 <DbgTraceGetFileName>
 80015ac:	4601      	mov	r1, r0
 80015ae:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80015b2:	4a17      	ldr	r2, [pc, #92]	@ (8001610 <APPE_SysEvtError+0x80>)
 80015b4:	4817      	ldr	r0, [pc, #92]	@ (8001614 <APPE_SysEvtError+0x84>)
 80015b6:	f00f fa57 	bl	8010a68 <iprintf>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	4619      	mov	r1, r3
 80015c0:	4815      	ldr	r0, [pc, #84]	@ (8001618 <APPE_SysEvtError+0x88>)
 80015c2:	f00f fa51 	bl	8010a68 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10d      	bne.n	80015ea <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80015ce:	480f      	ldr	r0, [pc, #60]	@ (800160c <APPE_SysEvtError+0x7c>)
 80015d0:	f00a f932 	bl	800b838 <DbgTraceGetFileName>
 80015d4:	4601      	mov	r1, r0
 80015d6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80015da:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <APPE_SysEvtError+0x80>)
 80015dc:	480d      	ldr	r0, [pc, #52]	@ (8001614 <APPE_SysEvtError+0x84>)
 80015de:	f00f fa43 	bl	8010a68 <iprintf>
 80015e2:	480e      	ldr	r0, [pc, #56]	@ (800161c <APPE_SysEvtError+0x8c>)
 80015e4:	f00f fab0 	bl	8010b48 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80015e8:	e00d      	b.n	8001606 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80015ea:	4808      	ldr	r0, [pc, #32]	@ (800160c <APPE_SysEvtError+0x7c>)
 80015ec:	f00a f924 	bl	800b838 <DbgTraceGetFileName>
 80015f0:	4601      	mov	r1, r0
 80015f2:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80015f6:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <APPE_SysEvtError+0x80>)
 80015f8:	4806      	ldr	r0, [pc, #24]	@ (8001614 <APPE_SysEvtError+0x84>)
 80015fa:	f00f fa35 	bl	8010a68 <iprintf>
 80015fe:	4808      	ldr	r0, [pc, #32]	@ (8001620 <APPE_SysEvtError+0x90>)
 8001600:	f00f faa2 	bl	8010b48 <puts>
  return;
 8001604:	bf00      	nop
}
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08012f14 	.word	0x08012f14
 8001610:	08015870 	.word	0x08015870
 8001614:	08012f2c 	.word	0x08012f2c
 8001618:	08013114 	.word	0x08013114
 800161c:	08013144 	.word	0x08013144
 8001620:	08013180 	.word	0x08013180

08001624 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	330b      	adds	r3, #11
 8001648:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3302      	adds	r3, #2
 800164e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d146      	bne.n	80016e6 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001658:	4836      	ldr	r0, [pc, #216]	@ (8001734 <APPE_SysEvtReadyProcessing+0x110>)
 800165a:	f00a f8ed 	bl	800b838 <DbgTraceGetFileName>
 800165e:	4601      	mov	r1, r0
 8001660:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001664:	4a34      	ldr	r2, [pc, #208]	@ (8001738 <APPE_SysEvtReadyProcessing+0x114>)
 8001666:	4835      	ldr	r0, [pc, #212]	@ (800173c <APPE_SysEvtReadyProcessing+0x118>)
 8001668:	f00f f9fe 	bl	8010a68 <iprintf>
 800166c:	4834      	ldr	r0, [pc, #208]	@ (8001740 <APPE_SysEvtReadyProcessing+0x11c>)
 800166e:	f00f fa6b 	bl	8010b48 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001672:	f7ff fc07 	bl	8000e84 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001676:	230f      	movs	r3, #15
 8001678:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800167a:	237f      	movs	r3, #127	@ 0x7f
 800167c:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800167e:	f7ff fce9 	bl	8001054 <LL_DBGMCU_GetRevisionID>
 8001682:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001684:	482b      	ldr	r0, [pc, #172]	@ (8001734 <APPE_SysEvtReadyProcessing+0x110>)
 8001686:	f00a f8d7 	bl	800b838 <DbgTraceGetFileName>
 800168a:	4601      	mov	r1, r0
 800168c:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001690:	4a29      	ldr	r2, [pc, #164]	@ (8001738 <APPE_SysEvtReadyProcessing+0x114>)
 8001692:	482a      	ldr	r0, [pc, #168]	@ (800173c <APPE_SysEvtReadyProcessing+0x118>)
 8001694:	f00f f9e8 	bl	8010a68 <iprintf>
 8001698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800169a:	482a      	ldr	r0, [pc, #168]	@ (8001744 <APPE_SysEvtReadyProcessing+0x120>)
 800169c:	f00f f9e4 	bl	8010a68 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016a6:	f7ff fcc7 	bl	8001038 <LL_DBGMCU_GetDeviceID>
 80016aa:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80016ac:	4821      	ldr	r0, [pc, #132]	@ (8001734 <APPE_SysEvtReadyProcessing+0x110>)
 80016ae:	f00a f8c3 	bl	800b838 <DbgTraceGetFileName>
 80016b2:	4601      	mov	r1, r0
 80016b4:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80016b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <APPE_SysEvtReadyProcessing+0x114>)
 80016ba:	4820      	ldr	r0, [pc, #128]	@ (800173c <APPE_SysEvtReadyProcessing+0x118>)
 80016bc:	f00f f9d4 	bl	8010a68 <iprintf>
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	4821      	ldr	r0, [pc, #132]	@ (8001748 <APPE_SysEvtReadyProcessing+0x124>)
 80016c4:	f00f f9d0 	bl	8010a68 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	4618      	mov	r0, r3
 80016d4:	f009 fad0 	bl	800ac78 <SHCI_C2_Config>

    APP_BLE_Init();
 80016d8:	f00a fa3c 	bl	800bb54 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80016dc:	2100      	movs	r1, #0
 80016de:	2001      	movs	r0, #1
 80016e0:	f00d f986 	bl	800e9f0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80016e4:	e022      	b.n	800172c <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d110      	bne.n	8001710 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80016ee:	4811      	ldr	r0, [pc, #68]	@ (8001734 <APPE_SysEvtReadyProcessing+0x110>)
 80016f0:	f00a f8a2 	bl	800b838 <DbgTraceGetFileName>
 80016f4:	4601      	mov	r1, r0
 80016f6:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <APPE_SysEvtReadyProcessing+0x114>)
 80016fc:	480f      	ldr	r0, [pc, #60]	@ (800173c <APPE_SysEvtReadyProcessing+0x118>)
 80016fe:	f00f f9b3 	bl	8010a68 <iprintf>
 8001702:	4812      	ldr	r0, [pc, #72]	@ (800174c <APPE_SysEvtReadyProcessing+0x128>)
 8001704:	f00f f9b0 	bl	8010a68 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
  return;
 800170e:	e00d      	b.n	800172c <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001710:	4808      	ldr	r0, [pc, #32]	@ (8001734 <APPE_SysEvtReadyProcessing+0x110>)
 8001712:	f00a f891 	bl	800b838 <DbgTraceGetFileName>
 8001716:	4601      	mov	r1, r0
 8001718:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800171c:	4a06      	ldr	r2, [pc, #24]	@ (8001738 <APPE_SysEvtReadyProcessing+0x114>)
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <APPE_SysEvtReadyProcessing+0x118>)
 8001720:	f00f f9a2 	bl	8010a68 <iprintf>
 8001724:	480a      	ldr	r0, [pc, #40]	@ (8001750 <APPE_SysEvtReadyProcessing+0x12c>)
 8001726:	f00f f99f 	bl	8010a68 <iprintf>
  return;
 800172a:	bf00      	nop
}
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	08012f14 	.word	0x08012f14
 8001738:	08015884 	.word	0x08015884
 800173c:	08012f2c 	.word	0x08012f2c
 8001740:	080131b8 	.word	0x080131b8
 8001744:	080131d4 	.word	0x080131d4
 8001748:	080131f8 	.word	0x080131f8
 800174c:	08013218 	.word	0x08013218
 8001750:	0801324c 	.word	0x0801324c

08001754 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f002 f8aa 	bl	80038b4 <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d00a      	beq.n	8001784 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800176e:	f002 f8b9 	bl	80038e4 <HAL_GetTickFreq>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4413      	add	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177c:	e002      	b.n	8001784 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800177e:	f7ff fcd9 	bl	8001134 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001782:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001784:	f002 f896 	bl	80038b4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	429a      	cmp	r2, r3
 8001792:	d8f4      	bhi.n	800177e <HAL_Delay+0x2a>
  }
}
 8001794:	bf00      	nop
 8001796:	bf00      	nop
 8001798:	3710      	adds	r7, #16
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a2:	f04f 30ff 	mov.w	r0, #4294967295
 80017a6:	f00d f953 	bl	800ea50 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}

080017ae <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80017b2:	bf00      	nop
}
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	f00d f941 	bl	800ea50 <UTIL_SEQ_Run>
  return;
 80017ce:	bf00      	nop
}
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017de:	2100      	movs	r1, #0
 80017e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017e4:	f00d fa52 	bl	800ec8c <UTIL_SEQ_SetTask>
  return;
 80017e8:	bf00      	nop
}
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017f8:	2002      	movs	r0, #2
 80017fa:	f00d fab3 	bl	800ed64 <UTIL_SEQ_SetEvt>
  return;
 80017fe:	bf00      	nop
}
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800180e:	2002      	movs	r0, #2
 8001810:	f00d fac8 	bl	800eda4 <UTIL_SEQ_WaitEvt>
  return;
 8001814:	bf00      	nop
}
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <LL_EXTI_EnableIT_0_31>:
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <LL_EXTI_EnableIT_0_31+0x24>)
 8001826:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800182a:	4905      	ldr	r1, [pc, #20]	@ (8001840 <LL_EXTI_EnableIT_0_31+0x24>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4313      	orrs	r3, r2
 8001830:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58000800 	.word	0x58000800

08001844 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800184c:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4904      	ldr	r1, [pc, #16]	@ (8001864 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	58000800 	.word	0x58000800

08001868 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800186e:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <ReadRtcSsrValue+0x3c>)
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001872:	b29b      	uxth	r3, r3
 8001874:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001876:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <ReadRtcSsrValue+0x3c>)
 8001878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187a:	b29b      	uxth	r3, r3
 800187c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800187e:	e005      	b.n	800188c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001884:	4b07      	ldr	r3, [pc, #28]	@ (80018a4 <ReadRtcSsrValue+0x3c>)
 8001886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001888:	b29b      	uxth	r3, r3
 800188a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d1f5      	bne.n	8001880 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001894:	683b      	ldr	r3, [r7, #0]
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40002800 	.word	0x40002800

080018a8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80018b8:	79ba      	ldrb	r2, [r7, #6]
 80018ba:	491d      	ldr	r1, [pc, #116]	@ (8001930 <LinkTimerAfter+0x88>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3315      	adds	r3, #21
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b06      	cmp	r3, #6
 80018d0:	d009      	beq.n	80018e6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	4916      	ldr	r1, [pc, #88]	@ (8001930 <LinkTimerAfter+0x88>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	440b      	add	r3, r1
 80018e0:	3314      	adds	r3, #20
 80018e2:	79fa      	ldrb	r2, [r7, #7]
 80018e4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018e6:	79fa      	ldrb	r2, [r7, #7]
 80018e8:	4911      	ldr	r1, [pc, #68]	@ (8001930 <LinkTimerAfter+0x88>)
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	440b      	add	r3, r1
 80018f4:	3315      	adds	r3, #21
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <LinkTimerAfter+0x88>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	3314      	adds	r3, #20
 800190a:	79ba      	ldrb	r2, [r7, #6]
 800190c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800190e:	79ba      	ldrb	r2, [r7, #6]
 8001910:	4907      	ldr	r1, [pc, #28]	@ (8001930 <LinkTimerAfter+0x88>)
 8001912:	4613      	mov	r3, r2
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	4413      	add	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	440b      	add	r3, r1
 800191c:	3315      	adds	r3, #21
 800191e:	79fa      	ldrb	r2, [r7, #7]
 8001920:	701a      	strb	r2, [r3, #0]

  return;
 8001922:	bf00      	nop
}
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200002a4 	.word	0x200002a4

08001934 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	460a      	mov	r2, r1
 800193e:	71fb      	strb	r3, [r7, #7]
 8001940:	4613      	mov	r3, r2
 8001942:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001944:	4b29      	ldr	r3, [pc, #164]	@ (80019ec <LinkTimerBefore+0xb8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	429a      	cmp	r2, r3
 800194e:	d032      	beq.n	80019b6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001950:	79ba      	ldrb	r2, [r7, #6]
 8001952:	4927      	ldr	r1, [pc, #156]	@ (80019f0 <LinkTimerBefore+0xbc>)
 8001954:	4613      	mov	r3, r2
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3314      	adds	r3, #20
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	4922      	ldr	r1, [pc, #136]	@ (80019f0 <LinkTimerBefore+0xbc>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3315      	adds	r3, #21
 8001974:	79fa      	ldrb	r2, [r7, #7]
 8001976:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001978:	79fa      	ldrb	r2, [r7, #7]
 800197a:	491d      	ldr	r1, [pc, #116]	@ (80019f0 <LinkTimerBefore+0xbc>)
 800197c:	4613      	mov	r3, r2
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3315      	adds	r3, #21
 8001988:	79ba      	ldrb	r2, [r7, #6]
 800198a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	4918      	ldr	r1, [pc, #96]	@ (80019f0 <LinkTimerBefore+0xbc>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3314      	adds	r3, #20
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019a0:	79ba      	ldrb	r2, [r7, #6]
 80019a2:	4913      	ldr	r1, [pc, #76]	@ (80019f0 <LinkTimerBefore+0xbc>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3314      	adds	r3, #20
 80019b0:	79fa      	ldrb	r2, [r7, #7]
 80019b2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80019b4:	e014      	b.n	80019e0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	490d      	ldr	r1, [pc, #52]	@ (80019f0 <LinkTimerBefore+0xbc>)
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	3315      	adds	r3, #21
 80019c6:	79ba      	ldrb	r2, [r7, #6]
 80019c8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019ca:	79ba      	ldrb	r2, [r7, #6]
 80019cc:	4908      	ldr	r1, [pc, #32]	@ (80019f0 <LinkTimerBefore+0xbc>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	440b      	add	r3, r1
 80019d8:	3314      	adds	r3, #20
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	701a      	strb	r2, [r3, #0]
  return;
 80019de:	bf00      	nop
}
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000334 	.word	0x20000334
 80019f0:	200002a4 	.word	0x200002a4

080019f4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001b38 <linkTimer+0x144>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b06      	cmp	r3, #6
 8001a06:	d118      	bne.n	8001a3a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a08:	4b4b      	ldr	r3, [pc, #300]	@ (8001b38 <linkTimer+0x144>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001b3c <linkTimer+0x148>)
 8001a10:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001a12:	4a49      	ldr	r2, [pc, #292]	@ (8001b38 <linkTimer+0x144>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001a18:	79fa      	ldrb	r2, [r7, #7]
 8001a1a:	4949      	ldr	r1, [pc, #292]	@ (8001b40 <linkTimer+0x14c>)
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3315      	adds	r3, #21
 8001a28:	2206      	movs	r2, #6
 8001a2a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a2c:	4b45      	ldr	r3, [pc, #276]	@ (8001b44 <linkTimer+0x150>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	81fb      	strh	r3, [r7, #14]
 8001a38:	e078      	b.n	8001b2c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a3a:	f000 f909 	bl	8001c50 <ReturnTimeElapsed>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	493e      	ldr	r1, [pc, #248]	@ (8001b40 <linkTimer+0x14c>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	3308      	adds	r3, #8
 8001a52:	6819      	ldr	r1, [r3, #0]
 8001a54:	89fb      	ldrh	r3, [r7, #14]
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	4419      	add	r1, r3
 8001a5a:	4839      	ldr	r0, [pc, #228]	@ (8001b40 <linkTimer+0x14c>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4403      	add	r3, r0
 8001a66:	3308      	adds	r3, #8
 8001a68:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	4934      	ldr	r1, [pc, #208]	@ (8001b40 <linkTimer+0x14c>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3308      	adds	r3, #8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b38 <linkTimer+0x144>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4619      	mov	r1, r3
 8001a86:	4a2e      	ldr	r2, [pc, #184]	@ (8001b40 <linkTimer+0x14c>)
 8001a88:	460b      	mov	r3, r1
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	440b      	add	r3, r1
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	3308      	adds	r3, #8
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d337      	bcc.n	8001b0c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a9c:	4b26      	ldr	r3, [pc, #152]	@ (8001b38 <linkTimer+0x144>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001aa2:	7b7a      	ldrb	r2, [r7, #13]
 8001aa4:	4926      	ldr	r1, [pc, #152]	@ (8001b40 <linkTimer+0x14c>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	440b      	add	r3, r1
 8001ab0:	3315      	adds	r3, #21
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ab6:	e013      	b.n	8001ae0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001ab8:	7b7a      	ldrb	r2, [r7, #13]
 8001aba:	4921      	ldr	r1, [pc, #132]	@ (8001b40 <linkTimer+0x14c>)
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3315      	adds	r3, #21
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001acc:	7b7a      	ldrb	r2, [r7, #13]
 8001ace:	491c      	ldr	r1, [pc, #112]	@ (8001b40 <linkTimer+0x14c>)
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	440b      	add	r3, r1
 8001ada:	3315      	adds	r3, #21
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ae0:	7b3b      	ldrb	r3, [r7, #12]
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d00b      	beq.n	8001afe <linkTimer+0x10a>
 8001ae6:	7b3a      	ldrb	r2, [r7, #12]
 8001ae8:	4915      	ldr	r1, [pc, #84]	@ (8001b40 <linkTimer+0x14c>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	3308      	adds	r3, #8
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d2dc      	bcs.n	8001ab8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001afe:	7b7a      	ldrb	r2, [r7, #13]
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fecf 	bl	80018a8 <LinkTimerAfter>
 8001b0a:	e00f      	b.n	8001b2c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b38 <linkTimer+0x144>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff0c 	bl	8001934 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <linkTimer+0x144>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <linkTimer+0x148>)
 8001b24:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b26:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <linkTimer+0x144>)
 8001b28:	79fb      	ldrb	r3, [r7, #7]
 8001b2a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b2c:	89fb      	ldrh	r3, [r7, #14]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000334 	.word	0x20000334
 8001b3c:	20000335 	.word	0x20000335
 8001b40:	200002a4 	.word	0x200002a4
 8001b44:	20000338 	.word	0x20000338

08001b48 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	460a      	mov	r2, r1
 8001b52:	71fb      	strb	r3, [r7, #7]
 8001b54:	4613      	mov	r3, r2
 8001b56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b58:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <UnlinkTimer+0xf8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d111      	bne.n	8001b88 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b64:	4b36      	ldr	r3, [pc, #216]	@ (8001c40 <UnlinkTimer+0xf8>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <UnlinkTimer+0xfc>)
 8001b6c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b6e:	79fa      	ldrb	r2, [r7, #7]
 8001b70:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <UnlinkTimer+0x100>)
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3315      	adds	r3, #21
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b2f      	ldr	r3, [pc, #188]	@ (8001c40 <UnlinkTimer+0xf8>)
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e03e      	b.n	8001c06 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b88:	79fa      	ldrb	r2, [r7, #7]
 8001b8a:	492f      	ldr	r1, [pc, #188]	@ (8001c48 <UnlinkTimer+0x100>)
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	440b      	add	r3, r1
 8001b96:	3314      	adds	r3, #20
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b9c:	79fa      	ldrb	r2, [r7, #7]
 8001b9e:	492a      	ldr	r1, [pc, #168]	@ (8001c48 <UnlinkTimer+0x100>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	3315      	adds	r3, #21
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001bb0:	79f9      	ldrb	r1, [r7, #7]
 8001bb2:	7bfa      	ldrb	r2, [r7, #15]
 8001bb4:	4824      	ldr	r0, [pc, #144]	@ (8001c48 <UnlinkTimer+0x100>)
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	440b      	add	r3, r1
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4403      	add	r3, r0
 8001bc0:	3315      	adds	r3, #21
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4920      	ldr	r1, [pc, #128]	@ (8001c48 <UnlinkTimer+0x100>)
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3315      	adds	r3, #21
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bd8:	7bbb      	ldrb	r3, [r7, #14]
 8001bda:	2b06      	cmp	r3, #6
 8001bdc:	d013      	beq.n	8001c06 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bde:	79f9      	ldrb	r1, [r7, #7]
 8001be0:	7bba      	ldrb	r2, [r7, #14]
 8001be2:	4819      	ldr	r0, [pc, #100]	@ (8001c48 <UnlinkTimer+0x100>)
 8001be4:	460b      	mov	r3, r1
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	440b      	add	r3, r1
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4403      	add	r3, r0
 8001bee:	3314      	adds	r3, #20
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2d8      	uxtb	r0, r3
 8001bf4:	4914      	ldr	r1, [pc, #80]	@ (8001c48 <UnlinkTimer+0x100>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3314      	adds	r3, #20
 8001c02:	4602      	mov	r2, r0
 8001c04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001c06:	79fa      	ldrb	r2, [r7, #7]
 8001c08:	490f      	ldr	r1, [pc, #60]	@ (8001c48 <UnlinkTimer+0x100>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	330c      	adds	r3, #12
 8001c16:	2201      	movs	r2, #1
 8001c18:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <UnlinkTimer+0xf8>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b06      	cmp	r3, #6
 8001c22:	d107      	bne.n	8001c34 <UnlinkTimer+0xec>
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d104      	bne.n	8001c34 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <UnlinkTimer+0x104>)
 8001c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c30:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
}
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000334 	.word	0x20000334
 8001c44:	20000335 	.word	0x20000335
 8001c48:	200002a4 	.word	0x200002a4
 8001c4c:	20000338 	.word	0x20000338

08001c50 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <ReturnTimeElapsed+0x70>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5e:	d026      	beq.n	8001cae <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c60:	f7ff fe02 	bl	8001868 <ReadRtcSsrValue>
 8001c64:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <ReturnTimeElapsed+0x70>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d805      	bhi.n	8001c7c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <ReturnTimeElapsed+0x70>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e00a      	b.n	8001c92 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <ReturnTimeElapsed+0x74>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <ReturnTimeElapsed+0x70>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <ReturnTimeElapsed+0x78>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <ReturnTimeElapsed+0x7c>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	40d3      	lsrs	r3, r2
 8001caa:	607b      	str	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	b29b      	uxth	r3, r3
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000338 	.word	0x20000338
 8001cc4:	20000340 	.word	0x20000340
 8001cc8:	2000033e 	.word	0x2000033e
 8001ccc:	2000033d 	.word	0x2000033d

08001cd0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d108      	bne.n	8001cf2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001ce0:	f7ff fdc2 	bl	8001868 <ReadRtcSsrValue>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <RestartWakeupCounter+0x9c>)
 8001ce8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f001 ff83 	bl	8003bf6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001cf0:	e039      	b.n	8001d66 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d803      	bhi.n	8001d00 <RestartWakeupCounter+0x30>
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d70 <RestartWakeupCounter+0xa0>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d002      	beq.n	8001d06 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	3b01      	subs	r3, #1
 8001d04:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001d06:	bf00      	nop
 8001d08:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <RestartWakeupCounter+0xa4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f8      	beq.n	8001d08 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d16:	4b17      	ldr	r3, [pc, #92]	@ (8001d74 <RestartWakeupCounter+0xa4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b15      	ldr	r3, [pc, #84]	@ (8001d74 <RestartWakeupCounter+0xa4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001d26:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <RestartWakeupCounter+0xa8>)
 8001d2a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d2e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 ff6e 	bl	8003c12 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <RestartWakeupCounter+0xac>)
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	041b      	lsls	r3, r3, #16
 8001d3e:	88fa      	ldrh	r2, [r7, #6]
 8001d40:	490e      	ldr	r1, [pc, #56]	@ (8001d7c <RestartWakeupCounter+0xac>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d46:	f7ff fd8f 	bl	8001868 <ReadRtcSsrValue>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a07      	ldr	r2, [pc, #28]	@ (8001d6c <RestartWakeupCounter+0x9c>)
 8001d4e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <RestartWakeupCounter+0xa4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <RestartWakeupCounter+0xa4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d5e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d60:	f3af 8000 	nop.w
  return ;
 8001d64:	bf00      	nop
}
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000338 	.word	0x20000338
 8001d70:	2000033d 	.word	0x2000033d
 8001d74:	2000055c 	.word	0x2000055c
 8001d78:	58000800 	.word	0x58000800
 8001d7c:	40002800 	.word	0x40002800

08001d80 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d86:	4b45      	ldr	r3, [pc, #276]	@ (8001e9c <RescheduleTimerList+0x11c>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d92:	d107      	bne.n	8001da4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d94:	bf00      	nop
 8001d96:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <RescheduleTimerList+0x120>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f8      	bne.n	8001d96 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001da4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea0 <RescheduleTimerList+0x120>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <RescheduleTimerList+0x120>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001db2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001db4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea4 <RescheduleTimerList+0x124>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	493a      	ldr	r1, [pc, #232]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3308      	adds	r3, #8
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001dce:	f7ff ff3f 	bl	8001c50 <ReturnTimeElapsed>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d205      	bcs.n	8001dea <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001de2:	4b32      	ldr	r3, [pc, #200]	@ (8001eac <RescheduleTimerList+0x12c>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e04d      	b.n	8001e86 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	4a30      	ldr	r2, [pc, #192]	@ (8001eb0 <RescheduleTimerList+0x130>)
 8001dee:	8812      	ldrh	r2, [r2, #0]
 8001df0:	b292      	uxth	r2, r2
 8001df2:	4413      	add	r3, r2
 8001df4:	461a      	mov	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d906      	bls.n	8001e0a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8001eb0 <RescheduleTimerList+0x130>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	@ (8001eac <RescheduleTimerList+0x12c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e03d      	b.n	8001e86 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e14:	4b25      	ldr	r3, [pc, #148]	@ (8001eac <RescheduleTimerList+0x12c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e1a:	e034      	b.n	8001e86 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e1c:	7bfa      	ldrb	r2, [r7, #15]
 8001e1e:	4922      	ldr	r1, [pc, #136]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	3308      	adds	r3, #8
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d20a      	bcs.n	8001e4a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	491c      	ldr	r1, [pc, #112]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3308      	adds	r3, #8
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e013      	b.n	8001e72 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	4916      	ldr	r1, [pc, #88]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3308      	adds	r3, #8
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	1ac9      	subs	r1, r1, r3
 8001e62:	4811      	ldr	r0, [pc, #68]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4403      	add	r3, r0
 8001e6e:	3308      	adds	r3, #8
 8001e70:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	490c      	ldr	r1, [pc, #48]	@ (8001ea8 <RescheduleTimerList+0x128>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3315      	adds	r3, #21
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	2b06      	cmp	r3, #6
 8001e8a:	d1c7      	bne.n	8001e1c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e8c:	89bb      	ldrh	r3, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff1e 	bl	8001cd0 <RestartWakeupCounter>

  return ;
 8001e94:	bf00      	nop
}
 8001e96:	3710      	adds	r7, #16
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40002800 	.word	0x40002800
 8001ea0:	2000055c 	.word	0x2000055c
 8001ea4:	20000334 	.word	0x20000334
 8001ea8:	200002a4 	.word	0x200002a4
 8001eac:	2000033c 	.word	0x2000033c
 8001eb0:	20000342 	.word	0x20000342

08001eb4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eba:	f3ef 8310 	mrs	r3, PRIMASK
 8001ebe:	617b      	str	r3, [r7, #20]
  return(result);
 8001ec0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ec4:	b672      	cpsid	i
}
 8001ec6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ec8:	4b59      	ldr	r3, [pc, #356]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	22ca      	movs	r2, #202	@ 0xca
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ed0:	4b57      	ldr	r3, [pc, #348]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2253      	movs	r2, #83	@ 0x53
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ed8:	4b55      	ldr	r3, [pc, #340]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	4b54      	ldr	r3, [pc, #336]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ee6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ee8:	4b52      	ldr	r3, [pc, #328]	@ (8002034 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ef0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ef4:	4950      	ldr	r1, [pc, #320]	@ (8002038 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	330c      	adds	r3, #12
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d16e      	bne.n	8001fe8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001f0a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f0e:	494a      	ldr	r1, [pc, #296]	@ (8002038 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f1e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f22:	4945      	ldr	r1, [pc, #276]	@ (8002038 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3310      	adds	r3, #16
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f34:	4b41      	ldr	r3, [pc, #260]	@ (800203c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d04c      	beq.n	8001fd8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f42:	493d      	ldr	r1, [pc, #244]	@ (8002038 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	330d      	adds	r3, #13
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d124      	bne.n	8001fa2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fdf2 	bl	8001b48 <UnlinkTimer>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f383 8810 	msr	PRIMASK, r3
}
 8001f6e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f70:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001f74:	4930      	ldr	r1, [pc, #192]	@ (8002038 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3304      	adds	r3, #4
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 f9b8 	bl	8002300 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f90:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	22ca      	movs	r2, #202	@ 0xca
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f98:	4b25      	ldr	r3, [pc, #148]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2253      	movs	r2, #83	@ 0x53
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fa0:	e012      	b.n	8001fc8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f383 8810 	msr	PRIMASK, r3
}
 8001fac:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001fae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f920 	bl	80021f8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	22ca      	movs	r2, #202	@ 0xca
 8001fbe:	625a      	str	r2, [r3, #36]	@ 0x24
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2253      	movs	r2, #83	@ 0x53
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	69b8      	ldr	r0, [r7, #24]
 8001fd2:	f000 fa1b 	bl	800240c <HW_TS_RTC_Int_AppNot>
 8001fd6:	e022      	b.n	800201e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fd8:	f7ff fed2 	bl	8001d80 <RescheduleTimerList>
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f383 8810 	msr	PRIMASK, r3
}
 8001fe6:	e01a      	b.n	800201e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fe8:	bf00      	nop
 8001fea:	4b11      	ldr	r3, [pc, #68]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0f8      	beq.n	8001fea <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002008:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800200c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f383 8810 	msr	PRIMASK, r3
}
 800201c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800201e:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	22ff      	movs	r2, #255	@ 0xff
 8002024:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002026:	bf00      	nop
}
 8002028:	3728      	adds	r7, #40	@ 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000055c 	.word	0x2000055c
 8002034:	20000334 	.word	0x20000334
 8002038:	200002a4 	.word	0x200002a4
 800203c:	2000033c 	.word	0x2000033c
 8002040:	58000800 	.word	0x58000800

08002044 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002050:	4b5e      	ldr	r3, [pc, #376]	@ (80021cc <HW_TS_Init+0x188>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	22ca      	movs	r2, #202	@ 0xca
 8002056:	625a      	str	r2, [r3, #36]	@ 0x24
 8002058:	4b5c      	ldr	r3, [pc, #368]	@ (80021cc <HW_TS_Init+0x188>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2253      	movs	r2, #83	@ 0x53
 800205e:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002060:	4b5b      	ldr	r3, [pc, #364]	@ (80021d0 <HW_TS_Init+0x18c>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a5a      	ldr	r2, [pc, #360]	@ (80021d0 <HW_TS_Init+0x18c>)
 8002066:	f043 0320 	orr.w	r3, r3, #32
 800206a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800206c:	4b58      	ldr	r3, [pc, #352]	@ (80021d0 <HW_TS_Init+0x18c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	b2db      	uxtb	r3, r3
 8002078:	f1c3 0304 	rsb	r3, r3, #4
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b55      	ldr	r3, [pc, #340]	@ (80021d4 <HW_TS_Init+0x190>)
 8002080:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002082:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HW_TS_Init+0x18c>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800208a:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800208e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	fa92 f2a2 	rbit	r2, r2
 8002096:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d101      	bne.n	80020a6 <HW_TS_Init+0x62>
  {
    return 32U;
 80020a2:	2220      	movs	r2, #32
 80020a4:	e003      	b.n	80020ae <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	40d3      	lsrs	r3, r2
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b48      	ldr	r3, [pc, #288]	@ (80021d8 <HW_TS_Init+0x194>)
 80020b8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80020ba:	4b45      	ldr	r3, [pc, #276]	@ (80021d0 <HW_TS_Init+0x18c>)
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <HW_TS_Init+0x198>)
 80020cc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HW_TS_Init+0x198>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	4a40      	ldr	r2, [pc, #256]	@ (80021d8 <HW_TS_Init+0x194>)
 80020d6:	7812      	ldrb	r2, [r2, #0]
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80020e0:	4a3c      	ldr	r2, [pc, #240]	@ (80021d4 <HW_TS_Init+0x190>)
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	40d3      	lsrs	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d904      	bls.n	80020fc <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020f2:	4b3b      	ldr	r3, [pc, #236]	@ (80021e0 <HW_TS_Init+0x19c>)
 80020f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	e003      	b.n	8002104 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	b29a      	uxth	r2, r3
 8002100:	4b37      	ldr	r3, [pc, #220]	@ (80021e0 <HW_TS_Init+0x19c>)
 8002102:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002104:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002108:	f7ff fb9c 	bl	8001844 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800210c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002110:	f7ff fb84 	bl	800181c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d13d      	bne.n	8002196 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <HW_TS_Init+0x1a0>)
 800211c:	2201      	movs	r2, #1
 800211e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002120:	4b31      	ldr	r3, [pc, #196]	@ (80021e8 <HW_TS_Init+0x1a4>)
 8002122:	f04f 32ff 	mov.w	r2, #4294967295
 8002126:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002128:	2300      	movs	r3, #0
 800212a:	77fb      	strb	r3, [r7, #31]
 800212c:	e00c      	b.n	8002148 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800212e:	7ffa      	ldrb	r2, [r7, #31]
 8002130:	492e      	ldr	r1, [pc, #184]	@ (80021ec <HW_TS_Init+0x1a8>)
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	440b      	add	r3, r1
 800213c:	330c      	adds	r3, #12
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002142:	7ffb      	ldrb	r3, [r7, #31]
 8002144:	3301      	adds	r3, #1
 8002146:	77fb      	strb	r3, [r7, #31]
 8002148:	7ffb      	ldrb	r3, [r7, #31]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d9ef      	bls.n	800212e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800214e:	4b28      	ldr	r3, [pc, #160]	@ (80021f0 <HW_TS_Init+0x1ac>)
 8002150:	2206      	movs	r2, #6
 8002152:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002154:	4b1d      	ldr	r3, [pc, #116]	@ (80021cc <HW_TS_Init+0x188>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HW_TS_Init+0x188>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002162:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002164:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HW_TS_Init+0x188>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b17      	ldr	r3, [pc, #92]	@ (80021cc <HW_TS_Init+0x188>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002174:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002176:	4b1f      	ldr	r3, [pc, #124]	@ (80021f4 <HW_TS_Init+0x1b0>)
 8002178:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800217c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800217e:	2003      	movs	r0, #3
 8002180:	f001 fd47 	bl	8003c12 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002184:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HW_TS_Init+0x188>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	4b10      	ldr	r3, [pc, #64]	@ (80021cc <HW_TS_Init+0x188>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e009      	b.n	80021aa <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002196:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <HW_TS_Init+0x188>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f001 fd26 	bl	8003bf6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80021aa:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HW_TS_Init+0x188>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22ff      	movs	r2, #255	@ 0xff
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80021b2:	2200      	movs	r2, #0
 80021b4:	2103      	movs	r1, #3
 80021b6:	2003      	movs	r0, #3
 80021b8:	f001 fcdb 	bl	8003b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021bc:	2003      	movs	r0, #3
 80021be:	f001 fcf2 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

  return;
 80021c2:	bf00      	nop
}
 80021c4:	3720      	adds	r7, #32
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000055c 	.word	0x2000055c
 80021d0:	40002800 	.word	0x40002800
 80021d4:	2000033d 	.word	0x2000033d
 80021d8:	2000033e 	.word	0x2000033e
 80021dc:	20000340 	.word	0x20000340
 80021e0:	20000342 	.word	0x20000342
 80021e4:	2000033c 	.word	0x2000033c
 80021e8:	20000338 	.word	0x20000338
 80021ec:	200002a4 	.word	0x200002a4
 80021f0:	20000334 	.word	0x20000334
 80021f4:	58000800 	.word	0x58000800

080021f8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002202:	f3ef 8310 	mrs	r3, PRIMASK
 8002206:	60fb      	str	r3, [r7, #12]
  return(result);
 8002208:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800220a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002210:	2003      	movs	r0, #3
 8002212:	f001 fcd6 	bl	8003bc2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002216:	4b34      	ldr	r3, [pc, #208]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	22ca      	movs	r2, #202	@ 0xca
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
 800221e:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2253      	movs	r2, #83	@ 0x53
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	4930      	ldr	r1, [pc, #192]	@ (80022ec <HW_TS_Stop+0xf4>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	330c      	adds	r3, #12
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d142      	bne.n	80022c4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fc80 	bl	8001b48 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HW_TS_Stop+0xf8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800224e:	7cfb      	ldrb	r3, [r7, #19]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d12f      	bne.n	80022b4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <HW_TS_Stop+0xfc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002260:	d107      	bne.n	8002272 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002262:	bf00      	nop
 8002264:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f8      	bne.n	8002264 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002272:	4b1d      	ldr	r3, [pc, #116]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <HW_TS_Stop+0xf0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002280:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002282:	bf00      	nop
 8002284:	4b18      	ldr	r3, [pc, #96]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f8      	beq.n	8002284 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002292:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HW_TS_Stop+0xf0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b13      	ldr	r3, [pc, #76]	@ (80022e8 <HW_TS_Stop+0xf0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022a2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022a4:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HW_TS_Stop+0x100>)
 80022a6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022aa:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80022ac:	2003      	movs	r0, #3
 80022ae:	f001 fcb0 	bl	8003c12 <HAL_NVIC_ClearPendingIRQ>
 80022b2:	e007      	b.n	80022c4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <HW_TS_Stop+0x104>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	7cfa      	ldrb	r2, [r7, #19]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80022c0:	f7ff fd5e 	bl	8001d80 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022c4:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <HW_TS_Stop+0xf0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	22ff      	movs	r2, #255	@ 0xff
 80022ca:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022cc:	2003      	movs	r0, #3
 80022ce:	f001 fc6a 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f383 8810 	msr	PRIMASK, r3
}
 80022dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022de:	bf00      	nop
}
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000055c 	.word	0x2000055c
 80022ec:	200002a4 	.word	0x200002a4
 80022f0:	20000334 	.word	0x20000334
 80022f4:	40002800 	.word	0x40002800
 80022f8:	58000800 	.word	0x58000800
 80022fc:	20000335 	.word	0x20000335

08002300 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	493b      	ldr	r1, [pc, #236]	@ (80023fc <HW_TS_Start+0xfc>)
 8002310:	4613      	mov	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	440b      	add	r3, r1
 800231a:	330c      	adds	r3, #12
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d103      	bne.n	800232c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff66 	bl	80021f8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232c:	f3ef 8310 	mrs	r3, PRIMASK
 8002330:	60fb      	str	r3, [r7, #12]
  return(result);
 8002332:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002334:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002336:	b672      	cpsid	i
}
 8002338:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800233a:	2003      	movs	r0, #3
 800233c:	f001 fc41 	bl	8003bc2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002340:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HW_TS_Start+0x100>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ca      	movs	r2, #202	@ 0xca
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
 8002348:	4b2d      	ldr	r3, [pc, #180]	@ (8002400 <HW_TS_Start+0x100>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2253      	movs	r2, #83	@ 0x53
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	492a      	ldr	r1, [pc, #168]	@ (80023fc <HW_TS_Start+0xfc>)
 8002354:	4613      	mov	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	330c      	adds	r3, #12
 8002360:	2202      	movs	r2, #2
 8002362:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	4925      	ldr	r1, [pc, #148]	@ (80023fc <HW_TS_Start+0xfc>)
 8002368:	4613      	mov	r3, r2
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	4413      	add	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	440b      	add	r3, r1
 8002372:	3308      	adds	r3, #8
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	4920      	ldr	r1, [pc, #128]	@ (80023fc <HW_TS_Start+0xfc>)
 800237c:	4613      	mov	r3, r2
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	3304      	adds	r3, #4
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fb30 	bl	80019f4 <linkTimer>
 8002394:	4603      	mov	r3, r0
 8002396:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HW_TS_Start+0x104>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <HW_TS_Start+0x108>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	7c7a      	ldrb	r2, [r7, #17]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d002      	beq.n	80023b0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80023aa:	f7ff fce9 	bl	8001d80 <RescheduleTimerList>
 80023ae:	e013      	b.n	80023d8 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4912      	ldr	r1, [pc, #72]	@ (80023fc <HW_TS_Start+0xfc>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	440b      	add	r3, r1
 80023be:	3308      	adds	r3, #8
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	8a7b      	ldrh	r3, [r7, #18]
 80023c4:	79fa      	ldrb	r2, [r7, #7]
 80023c6:	1ac9      	subs	r1, r1, r3
 80023c8:	480c      	ldr	r0, [pc, #48]	@ (80023fc <HW_TS_Start+0xfc>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4403      	add	r3, r0
 80023d4:	3308      	adds	r3, #8
 80023d6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023d8:	4b09      	ldr	r3, [pc, #36]	@ (8002400 <HW_TS_Start+0x100>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	22ff      	movs	r2, #255	@ 0xff
 80023de:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023e0:	2003      	movs	r0, #3
 80023e2:	f001 fbe0 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	f383 8810 	msr	PRIMASK, r3
}
 80023f0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023f2:	bf00      	nop
}
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200002a4 	.word	0x200002a4
 8002400:	2000055c 	.word	0x2000055c
 8002404:	20000334 	.word	0x20000334
 8002408:	20000335 	.word	0x20000335

0800240c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	460b      	mov	r3, r1
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4798      	blx	r3

  return;
 800241e:	bf00      	nop
}
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800242e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002432:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800243e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002442:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002446:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800244e:	e000      	b.n	8002452 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002450:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002452:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f9      	beq.n	8002450 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800245c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <LL_AHB1_GRP1_EnableClock>:
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800247c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002480:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4313      	orrs	r3, r2
 800248a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002490:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002498:	68fb      	ldr	r3, [r7, #12]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <LL_AHB2_GRP1_EnableClock>:
{
 80024a6:	b480      	push	{r7}
 80024a8:	b085      	sub	sp, #20
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4013      	ands	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024ca:	68fb      	ldr	r3, [r7, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	e009      	b.n	80024fe <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	60ba      	str	r2, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff ff97 	bl	8002426 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	429a      	cmp	r2, r3
 8002504:	dbf1      	blt.n	80024ea <_write+0x12>
	}
	return len;
 8002506:	687b      	ldr	r3, [r7, #4]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b09a      	sub	sp, #104	@ 0x68
 8002514:	af00      	add	r7, sp, #0
int main(void)
 8002516:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800251c:	f001 f95c 	bl	80037d8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002520:	f7fe fe48 	bl	80011b4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002524:	f000 f854 	bl	80025d0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002528:	f000 f8aa 	bl	8002680 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800252c:	f000 f908 	bl	8002740 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002530:	f000 fa8e 	bl	8002a50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002534:	f000 fa7a 	bl	8002a2c <MX_DMA_Init>
  MX_I2C1_Init();
 8002538:	f000 f8c2 	bl	80026c0 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800253c:	f000 f914 	bl	8002768 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8002540:	f000 f9e8 	bl	8002914 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8002544:	f006 fbbe 	bl	8008cc4 <MX_FATFS_Init>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <main+0x42>
    Error_Handler();
 800254e:	f000 fac3 	bl	8002ad8 <Error_Handler>
  }
  MX_TIM2_Init();
 8002552:	f000 fa1d 	bl	8002990 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8002556:	f000 f953 	bl	8002800 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800255a:	f000 f9a7 	bl	80028ac <MX_RTC_Init>
  MX_RF_Init();
 800255e:	f000 f99d 	bl	800289c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

//SET SA0 = "1"
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800256c:	f001 fe8c 	bl	8004288 <HAL_GPIO_WritePin>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1,
 8002570:	2364      	movs	r3, #100	@ 0x64
 8002572:	2203      	movs	r2, #3
 8002574:	21d6      	movs	r1, #214	@ 0xd6
 8002576:	4813      	ldr	r0, [pc, #76]	@ (80025c4 <main+0xb4>)
 8002578:	f002 f990 	bl	800489c <HAL_I2C_IsDeviceReady>
 800257c:	4603      	mov	r3, r0
 800257e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	ISM330DHCX_I2C_ADDRESS, 3, 100);

	if (status == HAL_OK) {
 8002582:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <main+0x82>
		// Device is ready
		printf("ISM330DHCX is ready for communication.\n");
 800258a:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <main+0xb8>)
 800258c:	f00e fadc 	bl	8010b48 <puts>
 8002590:	e005      	b.n	800259e <main+0x8e>
	} else {
		// Device not ready or communication failed
		printf("ISM330DHCX is not ready. HAL_StatusTypeDef: %d\n", status);
 8002592:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002596:	4619      	mov	r1, r3
 8002598:	480c      	ldr	r0, [pc, #48]	@ (80025cc <main+0xbc>)
 800259a:	f00e fa65 	bl	8010a68 <iprintf>
	}

	InitializeISM330DHCX2();
 800259e:	f000 ff07 	bl	80033b0 <InitializeISM330DHCX2>
	InitializeNanoEdgeAI();
 80025a2:	f000 fe49 	bl	8003238 <InitializeNanoEdgeAI>
	//TMP1826_Init();
	TMP1826_Init();
 80025a6:	f006 fb79 	bl	8008c9c <TMP1826_Init>
//	}
	//printf("ok avant init ble");
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80025aa:	f7fe fe11 	bl	80011d0 <MX_APPE_Init>

		//TestConfigLoop(&accel,&gyro);


    /* USER CODE END WHILE */
    MX_APPE_Process();
 80025ae:	f7ff f8f6 	bl	800179e <MX_APPE_Process>
//
//		        		    HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_SET);
//		        		    printf("Pin HIGH\n");
//		        		    HAL_Delay(1000);
//JMO
	ReadIMUData(&accel, &gyro);
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f001 f814 	bl	80035e8 <ReadIMUData>
    MX_APPE_Process();
 80025c0:	bf00      	nop
 80025c2:	e7f4      	b.n	80025ae <main+0x9e>
 80025c4:	20000344 	.word	0x20000344
 80025c8:	08013280 	.word	0x08013280
 80025cc:	080132a8 	.word	0x080132a8

080025d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b09a      	sub	sp, #104	@ 0x68
 80025d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025d6:	f107 0320 	add.w	r3, r7, #32
 80025da:	2248      	movs	r2, #72	@ 0x48
 80025dc:	2100      	movs	r1, #0
 80025de:	4618      	mov	r0, r3
 80025e0:	f00e fb92 	bl	8010d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2200      	movs	r2, #0
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
 80025ec:	609a      	str	r2, [r3, #8]
 80025ee:	60da      	str	r2, [r3, #12]
 80025f0:	611a      	str	r2, [r3, #16]
 80025f2:	615a      	str	r2, [r3, #20]
 80025f4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025f6:	4b21      	ldr	r3, [pc, #132]	@ (800267c <SystemClock_Config+0xac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025fe:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <SystemClock_Config+0xac>)
 8002600:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <SystemClock_Config+0xac>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002612:	230b      	movs	r3, #11
 8002614:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002616:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800261c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002622:	2340      	movs	r3, #64	@ 0x40
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002626:	2305      	movs	r3, #5
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800262a:	2300      	movs	r3, #0
 800262c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800262e:	f107 0320 	add.w	r3, r7, #32
 8002632:	4618      	mov	r0, r3
 8002634:	f003 f93e 	bl	80058b4 <HAL_RCC_OscConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800263e:	f000 fa4b 	bl	8002ad8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002642:	236f      	movs	r3, #111	@ 0x6f
 8002644:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002646:	2302      	movs	r3, #2
 8002648:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800265e:	1d3b      	adds	r3, r7, #4
 8002660:	2101      	movs	r1, #1
 8002662:	4618      	mov	r0, r3
 8002664:	f003 fc9a 	bl	8005f9c <HAL_RCC_ClockConfig>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800266e:	f000 fa33 	bl	8002ad8 <Error_Handler>
  }
}
 8002672:	bf00      	nop
 8002674:	3768      	adds	r7, #104	@ 0x68
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	58000400 	.word	0x58000400

08002680 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b094      	sub	sp, #80	@ 0x50
 8002684:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002686:	463b      	mov	r3, r7
 8002688:	2250      	movs	r2, #80	@ 0x50
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f00e fb3b 	bl	8010d08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002692:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002696:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002698:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800269c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800269e:	2300      	movs	r3, #0
 80026a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80026a2:	2310      	movs	r3, #16
 80026a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a6:	463b      	mov	r3, r7
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 f8b4 	bl	8006816 <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80026b4:	f000 fa10 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80026b8:	bf00      	nop
 80026ba:	3750      	adds	r7, #80	@ 0x50
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002738 <MX_I2C1_Init+0x78>)
 80026c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80026ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026cc:	4a1b      	ldr	r2, [pc, #108]	@ (800273c <MX_I2C1_Init+0x7c>)
 80026ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026d0:	4b18      	ldr	r3, [pc, #96]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026d6:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026d8:	2201      	movs	r2, #1
 80026da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026dc:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026de:	2200      	movs	r2, #0
 80026e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026e2:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026e8:	4b12      	ldr	r3, [pc, #72]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026ee:	4b11      	ldr	r3, [pc, #68]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026fa:	480e      	ldr	r0, [pc, #56]	@ (8002734 <MX_I2C1_Init+0x74>)
 80026fc:	f001 fe00 	bl	8004300 <HAL_I2C_Init>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d001      	beq.n	800270a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002706:	f000 f9e7 	bl	8002ad8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800270a:	2100      	movs	r1, #0
 800270c:	4809      	ldr	r0, [pc, #36]	@ (8002734 <MX_I2C1_Init+0x74>)
 800270e:	f002 fc1f 	bl	8004f50 <HAL_I2CEx_ConfigAnalogFilter>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002718:	f000 f9de 	bl	8002ad8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800271c:	2100      	movs	r1, #0
 800271e:	4805      	ldr	r0, [pc, #20]	@ (8002734 <MX_I2C1_Init+0x74>)
 8002720:	f002 fc61 	bl	8004fe6 <HAL_I2CEx_ConfigDigitalFilter>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800272a:	f000 f9d5 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000344 	.word	0x20000344
 8002738:	40005400 	.word	0x40005400
 800273c:	00b07cb4 	.word	0x00b07cb4

08002740 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002744:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <MX_IPCC_Init+0x20>)
 8002746:	4a07      	ldr	r2, [pc, #28]	@ (8002764 <MX_IPCC_Init+0x24>)
 8002748:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <MX_IPCC_Init+0x20>)
 800274c:	f002 fc98 	bl	8005080 <HAL_IPCC_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002756:	f000 f9bf 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000398 	.word	0x20000398
 8002764:	58000c00 	.word	0x58000c00

08002768 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800276c:	4b22      	ldr	r3, [pc, #136]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 800276e:	4a23      	ldr	r2, [pc, #140]	@ (80027fc <MX_LPUART1_UART_Init+0x94>)
 8002770:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002772:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 8002774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002778:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800277a:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 8002782:	2200      	movs	r2, #0
 8002784:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002786:	4b1c      	ldr	r3, [pc, #112]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800278c:	4b1a      	ldr	r3, [pc, #104]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 800278e:	220c      	movs	r2, #12
 8002790:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002792:	4b19      	ldr	r3, [pc, #100]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002798:	4b17      	ldr	r3, [pc, #92]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 800279a:	2200      	movs	r2, #0
 800279c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80027aa:	4b13      	ldr	r3, [pc, #76]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80027b0:	4811      	ldr	r0, [pc, #68]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027b2:	f005 fcbd 	bl	8008130 <HAL_UART_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80027bc:	f000 f98c 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027c0:	2100      	movs	r1, #0
 80027c2:	480d      	ldr	r0, [pc, #52]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027c4:	f006 f984 	bl	8008ad0 <HAL_UARTEx_SetTxFifoThreshold>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027ce:	f000 f983 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027d2:	2100      	movs	r1, #0
 80027d4:	4808      	ldr	r0, [pc, #32]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027d6:	f006 f9b9 	bl	8008b4c <HAL_UARTEx_SetRxFifoThreshold>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80027e0:	f000 f97a 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80027e4:	4804      	ldr	r0, [pc, #16]	@ (80027f8 <MX_LPUART1_UART_Init+0x90>)
 80027e6:	f006 f93a 	bl	8008a5e <HAL_UARTEx_DisableFifoMode>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80027f0:	f000 f972 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	200003d4 	.word	0x200003d4
 80027fc:	40008000 	.word	0x40008000

08002800 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002804:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002806:	4a24      	ldr	r2, [pc, #144]	@ (8002898 <MX_USART1_UART_Init+0x98>)
 8002808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800280a:	4b22      	ldr	r3, [pc, #136]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800280c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002818:	4b1e      	ldr	r3, [pc, #120]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800281a:	2200      	movs	r2, #0
 800281c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800281e:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002826:	220c      	movs	r2, #12
 8002828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282a:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002832:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002836:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002838:	4b16      	ldr	r3, [pc, #88]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800283a:	2200      	movs	r2, #0
 800283c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800283e:	4b15      	ldr	r3, [pc, #84]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002844:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002846:	2200      	movs	r2, #0
 8002848:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800284a:	4812      	ldr	r0, [pc, #72]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800284c:	f005 fc70 	bl	8008130 <HAL_UART_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002856:	f000 f93f 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800285a:	2100      	movs	r1, #0
 800285c:	480d      	ldr	r0, [pc, #52]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 800285e:	f006 f937 	bl	8008ad0 <HAL_UARTEx_SetTxFifoThreshold>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002868:	f000 f936 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286c:	2100      	movs	r1, #0
 800286e:	4809      	ldr	r0, [pc, #36]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002870:	f006 f96c 	bl	8008b4c <HAL_UARTEx_SetRxFifoThreshold>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800287a:	f000 f92d 	bl	8002ad8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800287e:	4805      	ldr	r0, [pc, #20]	@ (8002894 <MX_USART1_UART_Init+0x94>)
 8002880:	f006 f8ed 	bl	8008a5e <HAL_UARTEx_DisableFifoMode>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800288a:	f000 f925 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000468 	.word	0x20000468
 8002898:	40013800 	.word	0x40013800

0800289c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b0:	4b16      	ldr	r3, [pc, #88]	@ (800290c <MX_RTC_Init+0x60>)
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <MX_RTC_Init+0x64>)
 80028b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <MX_RTC_Init+0x60>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80028bc:	4b13      	ldr	r3, [pc, #76]	@ (800290c <MX_RTC_Init+0x60>)
 80028be:	220f      	movs	r2, #15
 80028c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80028c2:	4b12      	ldr	r3, [pc, #72]	@ (800290c <MX_RTC_Init+0x60>)
 80028c4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80028c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <MX_RTC_Init+0x60>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <MX_RTC_Init+0x60>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	@ (800290c <MX_RTC_Init+0x60>)
 80028d8:	2200      	movs	r2, #0
 80028da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028dc:	4b0b      	ldr	r3, [pc, #44]	@ (800290c <MX_RTC_Init+0x60>)
 80028de:	2200      	movs	r2, #0
 80028e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028e2:	480a      	ldr	r0, [pc, #40]	@ (800290c <MX_RTC_Init+0x60>)
 80028e4:	f004 fa1e 	bl	8006d24 <HAL_RTC_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80028ee:	f000 f8f3 	bl	8002ad8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	4805      	ldr	r0, [pc, #20]	@ (800290c <MX_RTC_Init+0x60>)
 80028f8:	f004 fb14 	bl	8006f24 <HAL_RTCEx_SetWakeUpTimer_IT>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002902:	f000 f8e9 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000055c 	.word	0x2000055c
 8002910:	40002800 	.word	0x40002800

08002914 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <MX_SPI1_Init+0x74>)
 800291a:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <MX_SPI1_Init+0x78>)
 800291c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800291e:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002920:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002924:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <MX_SPI1_Init+0x74>)
 800292e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002932:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <MX_SPI1_Init+0x74>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002946:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002948:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <MX_SPI1_Init+0x74>)
 800294a:	2230      	movs	r2, #48	@ 0x30
 800294c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800294e:	4b0e      	ldr	r3, [pc, #56]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002956:	2200      	movs	r2, #0
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295a:	4b0b      	ldr	r3, [pc, #44]	@ (8002988 <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002960:	4b09      	ldr	r3, [pc, #36]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002962:	2207      	movs	r2, #7
 8002964:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002966:	4b08      	ldr	r3, [pc, #32]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002968:	2200      	movs	r2, #0
 800296a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800296c:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <MX_SPI1_Init+0x74>)
 800296e:	2208      	movs	r2, #8
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002972:	4805      	ldr	r0, [pc, #20]	@ (8002988 <MX_SPI1_Init+0x74>)
 8002974:	f004 fb92 	bl	800709c <HAL_SPI_Init>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800297e:	f000 f8ab 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002982:	bf00      	nop
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	20000580 	.word	0x20000580
 800298c:	40013000 	.word	0x40013000

08002990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002996:	f107 0310 	add.w	r3, r7, #16
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	2200      	movs	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80029b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029b8:	221f      	movs	r2, #31
 80029ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029c2:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029c4:	f04f 32ff 	mov.w	r2, #4294967295
 80029c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ca:	4b17      	ldr	r3, [pc, #92]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029d6:	4814      	ldr	r0, [pc, #80]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029d8:	f005 f8fe 	bl	8007bd8 <HAL_TIM_Base_Init>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80029e2:	f000 f879 	bl	8002ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029ec:	f107 0310 	add.w	r3, r7, #16
 80029f0:	4619      	mov	r1, r3
 80029f2:	480d      	ldr	r0, [pc, #52]	@ (8002a28 <MX_TIM2_Init+0x98>)
 80029f4:	f005 f947 	bl	8007c86 <HAL_TIM_ConfigClockSource>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80029fe:	f000 f86b 	bl	8002ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a0a:	1d3b      	adds	r3, r7, #4
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4806      	ldr	r0, [pc, #24]	@ (8002a28 <MX_TIM2_Init+0x98>)
 8002a10:	f005 fb0e 	bl	8008030 <HAL_TIMEx_MasterConfigSynchronization>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002a1a:	f000 f85d 	bl	8002ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a1e:	bf00      	nop
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200005e4 	.word	0x200005e4

08002a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a30:	2004      	movs	r0, #4
 8002a32:	f7ff fd1f 	bl	8002474 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a36:	2002      	movs	r0, #2
 8002a38:	f7ff fd1c 	bl	8002474 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	2100      	movs	r1, #0
 8002a40:	203a      	movs	r0, #58	@ 0x3a
 8002a42:	f001 f896 	bl	8003b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002a46:	203a      	movs	r0, #58	@ 0x3a
 8002a48:	f001 f8ad 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7ff fd1e 	bl	80024a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	f7ff fd1b 	bl	80024a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a70:	2004      	movs	r0, #4
 8002a72:	f7ff fd18 	bl	80024a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|SA0_Pin, GPIO_PIN_RESET);
 8002a76:	2200      	movs	r2, #0
 8002a78:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8002a7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a80:	f001 fc02 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_io_GPIO_Port, temp_io_Pin, GPIO_PIN_RESET);
 8002a84:	2200      	movs	r2, #0
 8002a86:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a8a:	4812      	ldr	r0, [pc, #72]	@ (8002ad4 <MX_GPIO_Init+0x84>)
 8002a8c:	f001 fbfc 	bl	8004288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SA0_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SA0_Pin;
 8002a90:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8002a94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a96:	2301      	movs	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aaa:	f001 fa7d 	bl	8003fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_io_Pin */
  GPIO_InitStruct.Pin = temp_io_Pin;
 8002aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ab2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002ab4:	2311      	movs	r3, #17
 8002ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(temp_io_GPIO_Port, &GPIO_InitStruct);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4803      	ldr	r0, [pc, #12]	@ (8002ad4 <MX_GPIO_Init+0x84>)
 8002ac6:	f001 fa6f 	bl	8003fa8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	48000800 	.word	0x48000800

08002ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002adc:	b672      	cpsid	i
}
 8002ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ae0:	bf00      	nop
 8002ae2:	e7fd      	b.n	8002ae0 <Error_Handler+0x8>

08002ae4 <LL_RCC_EnableRTC>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <LL_AHB2_GRP1_EnableClock>:
{
 8002b06:	b480      	push	{r7}
 8002b08:	b085      	sub	sp, #20
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	bf00      	nop
 8002b2e:	3714      	adds	r7, #20
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_AHB3_GRP1_EnableClock>:
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b085      	sub	sp, #20
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b085      	sub	sp, #20
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002c04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002c08:	f7ff ff96 	bl	8002b38 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	202e      	movs	r0, #46	@ 0x2e
 8002c12:	f000 ffae 	bl	8003b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002c16:	202e      	movs	r0, #46	@ 0x2e
 8002c18:	f000 ffc5 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b09c      	sub	sp, #112	@ 0x70
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	2250      	movs	r2, #80	@ 0x50
 8002c3e:	2100      	movs	r1, #0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f00e f861 	bl	8010d08 <memset>
  if(hi2c->Instance==I2C1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ca4 <HAL_I2C_MspInit+0x84>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d125      	bne.n	8002c9c <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002c50:	2304      	movs	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <HAL_I2C_MspInit+0x88>)
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c58:	f107 030c 	add.w	r3, r7, #12
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f003 fdda 	bl	8006816 <HAL_RCCEx_PeriphCLKConfig>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002c68:	f7ff ff36 	bl	8002ad8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f7ff ff4a 	bl	8002b06 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002c72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c78:	2312      	movs	r3, #18
 8002c7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c80:	2303      	movs	r3, #3
 8002c82:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c84:	2304      	movs	r3, #4
 8002c86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	4807      	ldr	r0, [pc, #28]	@ (8002cac <HAL_I2C_MspInit+0x8c>)
 8002c90:	f001 f98a 	bl	8003fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002c94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002c98:	f7ff ff67 	bl	8002b6a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c9c:	bf00      	nop
 8002c9e:	3770      	adds	r7, #112	@ 0x70
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40005400 	.word	0x40005400
 8002ca8:	00030100 	.word	0x00030100
 8002cac:	48000400 	.word	0x48000400

08002cb0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf4 <HAL_IPCC_MspInit+0x44>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d113      	bne.n	8002cea <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002cc2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002cc6:	f7ff ff37 	bl	8002b38 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	202c      	movs	r0, #44	@ 0x2c
 8002cd0:	f000 ff4f 	bl	8003b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002cd4:	202c      	movs	r0, #44	@ 0x2c
 8002cd6:	f000 ff66 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	202d      	movs	r0, #45	@ 0x2d
 8002ce0:	f000 ff47 	bl	8003b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ce4:	202d      	movs	r0, #45	@ 0x2d
 8002ce6:	f000 ff5e 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	58000c00 	.word	0x58000c00

08002cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b09c      	sub	sp, #112	@ 0x70
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d10:	f107 030c 	add.w	r3, r7, #12
 8002d14:	2250      	movs	r2, #80	@ 0x50
 8002d16:	2100      	movs	r1, #0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f00d fff5 	bl	8010d08 <memset>
  if(huart->Instance==LPUART1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a41      	ldr	r2, [pc, #260]	@ (8002e28 <HAL_UART_MspInit+0x130>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fd6e 	bl	8006816 <HAL_RCCEx_PeriphCLKConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d40:	f7ff feca 	bl	8002ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff ff29 	bl	8002b9c <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d4a:	2002      	movs	r0, #2
 8002d4c:	f7ff fedb 	bl	8002b06 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d50:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002d62:	2308      	movs	r3, #8
 8002d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d66:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	482f      	ldr	r0, [pc, #188]	@ (8002e2c <HAL_UART_MspInit+0x134>)
 8002d6e:	f001 f91b 	bl	8003fa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d72:	e054      	b.n	8002e1e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a2d      	ldr	r2, [pc, #180]	@ (8002e30 <HAL_UART_MspInit+0x138>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d14f      	bne.n	8002e1e <HAL_UART_MspInit+0x126>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f003 fd43 	bl	8006816 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8002d96:	f7ff fe9f 	bl	8002ad8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d9a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002d9e:	f7ff ff16 	bl	8002bce <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7ff feaf 	bl	8002b06 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002da8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dba:	2307      	movs	r3, #7
 8002dbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc8:	f001 f8ee 	bl	8003fa8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <HAL_UART_MspInit+0x140>)
 8002dd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002dda:	2210      	movs	r2, #16
 8002ddc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dde:	4b15      	ldr	r3, [pc, #84]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002de4:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002de6:	2280      	movs	r2, #128	@ 0x80
 8002de8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dea:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df0:	4b10      	ldr	r3, [pc, #64]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e02:	480c      	ldr	r0, [pc, #48]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002e04:	f000 ff14 	bl	8003c30 <HAL_DMA_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8002e0e:	f7ff fe63 	bl	8002ad8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a07      	ldr	r2, [pc, #28]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002e16:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002e18:	4a06      	ldr	r2, [pc, #24]	@ (8002e34 <HAL_UART_MspInit+0x13c>)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8002e1e:	bf00      	nop
 8002e20:	3770      	adds	r7, #112	@ 0x70
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40008000 	.word	0x40008000
 8002e2c:	48000400 	.word	0x48000400
 8002e30:	40013800 	.word	0x40013800
 8002e34:	200004fc 	.word	0x200004fc
 8002e38:	40020444 	.word	0x40020444

08002e3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b096      	sub	sp, #88	@ 0x58
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	2250      	movs	r2, #80	@ 0x50
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00d ff5b 	bl	8010d08 <memset>
  if(hrtc->Instance==RTC)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a13      	ldr	r2, [pc, #76]	@ (8002ea4 <HAL_RTC_MspInit+0x68>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d11f      	bne.n	8002e9c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002e5c:	f002 f996 	bl	800518c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002e60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e64:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002e66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fcd0 	bl	8006816 <HAL_RCCEx_PeriphCLKConfig>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002e7c:	f7ff fe2c 	bl	8002ad8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002e80:	f7ff fe30 	bl	8002ae4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002e84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e88:	f7ff fe6f 	bl	8002b6a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2003      	movs	r0, #3
 8002e92:	f000 fe6e 	bl	8003b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002e96:	2003      	movs	r0, #3
 8002e98:	f000 fe85 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8002e9c:	bf00      	nop
 8002e9e:	3758      	adds	r7, #88	@ 0x58
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40002800 	.word	0x40002800

08002ea8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f04 <HAL_SPI_MspInit+0x5c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d117      	bne.n	8002efa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002eca:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ece:	f7ff fe7e 	bl	8002bce <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	2001      	movs	r0, #1
 8002ed4:	f7ff fe17 	bl	8002b06 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002ed8:	23c2      	movs	r3, #194	@ 0xc2
 8002eda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ee8:	2305      	movs	r3, #5
 8002eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef6:	f001 f857 	bl	8003fa8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002efa:	bf00      	nop
 8002efc:	3720      	adds	r7, #32
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40013000 	.word	0x40013000

08002f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f18:	d102      	bne.n	8002f20 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	f7ff fe25 	bl	8002b6a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <NMI_Handler+0x4>

08002f30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f34:	bf00      	nop
 8002f36:	e7fd      	b.n	8002f34 <HardFault_Handler+0x4>

08002f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <MemManage_Handler+0x4>

08002f40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f44:	bf00      	nop
 8002f46:	e7fd      	b.n	8002f44 <BusFault_Handler+0x4>

08002f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f4c:	bf00      	nop
 8002f4e:	e7fd      	b.n	8002f4c <UsageFault_Handler+0x4>

08002f50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f70:	bf00      	nop
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f7e:	f000 fc85 	bl	800388c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002f8a:	f7fe ff93 	bl	8001eb4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002f96:	f00b fbdb 	bl	800e750 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002fa2:	f00b fc0b 	bl	800e7bc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002fae:	f001 f983 	bl	80042b8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002fbc:	4802      	ldr	r0, [pc, #8]	@ (8002fc8 <DMA2_Channel4_IRQHandler+0x10>)
 8002fbe:	f000 fedf 	bl	8003d80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	200004fc 	.word	0x200004fc

08002fcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return 1;
 8002fd0:	2301      	movs	r3, #1
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <_kill>:

int _kill(int pid, int sig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fe6:	f00d ff07 	bl	8010df8 <__errno>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2216      	movs	r2, #22
 8002fee:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <_exit>:

void _exit (int status)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ffe7 	bl	8002fdc <_kill>
  while (1) {}    /* Make sure we hang here */
 800300e:	bf00      	nop
 8003010:	e7fd      	b.n	800300e <_exit+0x12>

08003012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e00a      	b.n	800303a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003024:	f3af 8000 	nop.w
 8003028:	4601      	mov	r1, r0
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	60ba      	str	r2, [r7, #8]
 8003030:	b2ca      	uxtb	r2, r1
 8003032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	3301      	adds	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	429a      	cmp	r2, r3
 8003040:	dbf0      	blt.n	8003024 <_read+0x12>
  }

  return len;
 8003042:	687b      	ldr	r3, [r7, #4]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <_close>:
  }
  return len;
}

int _close(int file)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003074:	605a      	str	r2, [r3, #4]
  return 0;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_isatty>:

int _isatty(int file)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800309a:	b480      	push	{r7}
 800309c:	b085      	sub	sp, #20
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030bc:	4a14      	ldr	r2, [pc, #80]	@ (8003110 <_sbrk+0x5c>)
 80030be:	4b15      	ldr	r3, [pc, #84]	@ (8003114 <_sbrk+0x60>)
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030c8:	4b13      	ldr	r3, [pc, #76]	@ (8003118 <_sbrk+0x64>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d102      	bne.n	80030d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <_sbrk+0x64>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <_sbrk+0x68>)
 80030d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <_sbrk+0x64>)
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4413      	add	r3, r2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d207      	bcs.n	80030f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030e4:	f00d fe88 	bl	8010df8 <__errno>
 80030e8:	4603      	mov	r3, r0
 80030ea:	220c      	movs	r2, #12
 80030ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	e009      	b.n	8003108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030f4:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <_sbrk+0x64>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <_sbrk+0x64>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4413      	add	r3, r2
 8003102:	4a05      	ldr	r2, [pc, #20]	@ (8003118 <_sbrk+0x64>)
 8003104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003106:	68fb      	ldr	r3, [r7, #12]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20030000 	.word	0x20030000
 8003114:	00000400 	.word	0x00000400
 8003118:	20000630 	.word	0x20000630
 800311c:	20003300 	.word	0x20003300

08003120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003124:	4b24      	ldr	r3, [pc, #144]	@ (80031b8 <SystemInit+0x98>)
 8003126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312a:	4a23      	ldr	r2, [pc, #140]	@ (80031b8 <SystemInit+0x98>)
 800312c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003148:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800314c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800314e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003158:	4b18      	ldr	r3, [pc, #96]	@ (80031bc <SystemInit+0x9c>)
 800315a:	4013      	ands	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800316a:	f023 0305 	bic.w	r3, r3, #5
 800316e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003176:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800317e:	f023 0301 	bic.w	r3, r3, #1
 8003182:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800318a:	4a0d      	ldr	r2, [pc, #52]	@ (80031c0 <SystemInit+0xa0>)
 800318c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800318e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003192:	4a0b      	ldr	r2, [pc, #44]	@ (80031c0 <SystemInit+0xa0>)
 8003194:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80031a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	e000ed00 	.word	0xe000ed00
 80031bc:	faf6fefb 	.word	0xfaf6fefb
 80031c0:	22041000 	.word	0x22041000

080031c4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80031c4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031c6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031c8:	3304      	adds	r3, #4

080031ca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031ca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031cc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80031ce:	d3f9      	bcc.n	80031c4 <CopyDataInit>
  bx lr
 80031d0:	4770      	bx	lr

080031d2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80031d2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80031d4:	3004      	adds	r0, #4

080031d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80031d6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80031d8:	d3fb      	bcc.n	80031d2 <FillZerobss>
  bx lr
 80031da:	4770      	bx	lr

080031dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031dc:	480c      	ldr	r0, [pc, #48]	@ (8003210 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80031e0:	f7ff ff9e 	bl	8003120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80031e4:	480b      	ldr	r0, [pc, #44]	@ (8003214 <LoopForever+0x6>)
 80031e6:	490c      	ldr	r1, [pc, #48]	@ (8003218 <LoopForever+0xa>)
 80031e8:	4a0c      	ldr	r2, [pc, #48]	@ (800321c <LoopForever+0xe>)
 80031ea:	2300      	movs	r3, #0
 80031ec:	f7ff ffed 	bl	80031ca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80031f0:	480b      	ldr	r0, [pc, #44]	@ (8003220 <LoopForever+0x12>)
 80031f2:	490c      	ldr	r1, [pc, #48]	@ (8003224 <LoopForever+0x16>)
 80031f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003228 <LoopForever+0x1a>)
 80031f6:	2300      	movs	r3, #0
 80031f8:	f7ff ffe7 	bl	80031ca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80031fc:	480b      	ldr	r0, [pc, #44]	@ (800322c <LoopForever+0x1e>)
 80031fe:	490c      	ldr	r1, [pc, #48]	@ (8003230 <LoopForever+0x22>)
 8003200:	2300      	movs	r3, #0
 8003202:	f7ff ffe8 	bl	80031d6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003206:	f00d fdfd 	bl	8010e04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800320a:	f7ff f981 	bl	8002510 <main>

0800320e <LoopForever>:

LoopForever:
  b LoopForever
 800320e:	e7fe      	b.n	800320e <LoopForever>
  ldr   r0, =_estack
 8003210:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003214:	20000008 	.word	0x20000008
 8003218:	2000023c 	.word	0x2000023c
 800321c:	08016bc0 	.word	0x08016bc0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003220:	200301e4 	.word	0x200301e4
 8003224:	20030a67 	.word	0x20030a67
 8003228:	08016e3a 	.word	0x08016e3a
  INIT_BSS _sbss, _ebss
 800322c:	20000288 	.word	0x20000288
 8003230:	20003300 	.word	0x20003300

08003234 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC1_IRQHandler>
	...

08003238 <InitializeNanoEdgeAI>:

#include "AI.h"
#include "main.h"


void InitializeNanoEdgeAI(void) {
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
    if (neai_classification_init(knowledge) != NEAI_OK) {
 800323c:	4807      	ldr	r0, [pc, #28]	@ (800325c <InitializeNanoEdgeAI+0x24>)
 800323e:	f00b fedb 	bl	800eff8 <neai_classification_init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <InitializeNanoEdgeAI+0x18>
        printf(" NanoEdge AI Initialization Failed!\n");
 8003248:	4805      	ldr	r0, [pc, #20]	@ (8003260 <InitializeNanoEdgeAI+0x28>)
 800324a:	f00d fc7d 	bl	8010b48 <puts>
    } else {
        printf(" NanoEdge AI Model Loaded Successfully!\n");
    }
}
 800324e:	e002      	b.n	8003256 <InitializeNanoEdgeAI+0x1e>
        printf(" NanoEdge AI Model Loaded Successfully!\n");
 8003250:	4804      	ldr	r0, [pc, #16]	@ (8003264 <InitializeNanoEdgeAI+0x2c>)
 8003252:	f00d fc79 	bl	8010b48 <puts>
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	080158a0 	.word	0x080158a0
 8003260:	0801334c 	.word	0x0801334c
 8003264:	08013370 	.word	0x08013370

08003268 <RunNanoEdgeAI>:

void RunNanoEdgeAI(AccelerometerData *accelData, GyroscopeData *gyroData) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
    //  Store IMU data in AI buffer
    neai_buffer[AXIS * neai_buffer_ptr] = accelData->x;
 8003272:	4b46      	ldr	r3, [pc, #280]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4618      	mov	r0, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4942      	ldr	r1, [pc, #264]	@ (8003390 <RunNanoEdgeAI+0x128>)
 8003288:	0083      	lsls	r3, r0, #2
 800328a:	440b      	add	r3, r1
 800328c:	601a      	str	r2, [r3, #0]
    neai_buffer[(AXIS * neai_buffer_ptr) + 1] = accelData->y;
 800328e:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	3301      	adds	r3, #1
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	493b      	ldr	r1, [pc, #236]	@ (8003390 <RunNanoEdgeAI+0x128>)
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	601a      	str	r2, [r3, #0]
    neai_buffer[(AXIS * neai_buffer_ptr) + 2] = accelData->z;
 80032aa:	4b38      	ldr	r3, [pc, #224]	@ (800338c <RunNanoEdgeAI+0x124>)
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	3302      	adds	r3, #2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6912      	ldr	r2, [r2, #16]
 80032be:	4934      	ldr	r1, [pc, #208]	@ (8003390 <RunNanoEdgeAI+0x128>)
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	601a      	str	r2, [r3, #0]
    neai_buffer[(AXIS * neai_buffer_ptr) + 3] = gyroData->x;
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <RunNanoEdgeAI+0x124>)
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	461a      	mov	r2, r3
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	3303      	adds	r3, #3
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	6892      	ldr	r2, [r2, #8]
 80032da:	492d      	ldr	r1, [pc, #180]	@ (8003390 <RunNanoEdgeAI+0x128>)
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	601a      	str	r2, [r3, #0]
    neai_buffer[(AXIS * neai_buffer_ptr) + 4] = gyroData->y;
 80032e2:	4b2a      	ldr	r3, [pc, #168]	@ (800338c <RunNanoEdgeAI+0x124>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	3304      	adds	r3, #4
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68d2      	ldr	r2, [r2, #12]
 80032f6:	4926      	ldr	r1, [pc, #152]	@ (8003390 <RunNanoEdgeAI+0x128>)
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	601a      	str	r2, [r3, #0]
    neai_buffer[(AXIS * neai_buffer_ptr) + 5] = gyroData->z;
 80032fe:	4b23      	ldr	r3, [pc, #140]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	3305      	adds	r3, #5
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	6912      	ldr	r2, [r2, #16]
 8003312:	491f      	ldr	r1, [pc, #124]	@ (8003390 <RunNanoEdgeAI+0x128>)
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	601a      	str	r2, [r3, #0]

    neai_buffer_ptr++;
 800331a:	4b1c      	ldr	r3, [pc, #112]	@ (800338c <RunNanoEdgeAI+0x124>)
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	3301      	adds	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003324:	801a      	strh	r2, [r3, #0]

    //  Run classification when buffer is full
    if (neai_buffer_ptr >= SAMPLES) {
 8003326:	4b19      	ldr	r3, [pc, #100]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	2bff      	cmp	r3, #255	@ 0xff
 800332c:	d92a      	bls.n	8003384 <RunNanoEdgeAI+0x11c>
        printf("\n Running NanoEdge AI Classification...\n");
 800332e:	4819      	ldr	r0, [pc, #100]	@ (8003394 <RunNanoEdgeAI+0x12c>)
 8003330:	f00d fc0a 	bl	8010b48 <puts>

        if (neai_classification(neai_buffer, output_class_buffer, &id_class) == NEAI_OK) {
 8003334:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <RunNanoEdgeAI+0x130>)
 8003336:	4919      	ldr	r1, [pc, #100]	@ (800339c <RunNanoEdgeAI+0x134>)
 8003338:	4815      	ldr	r0, [pc, #84]	@ (8003390 <RunNanoEdgeAI+0x128>)
 800333a:	f00b ff51 	bl	800f1e0 <neai_classification>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d110      	bne.n	8003366 <RunNanoEdgeAI+0xfe>
            printf(" Classified as: %s (Class ID: %d)\n", id2class[id_class], id_class);
 8003344:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <RunNanoEdgeAI+0x130>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	461a      	mov	r2, r3
 800334a:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <RunNanoEdgeAI+0x138>)
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <RunNanoEdgeAI+0x130>)
 8003352:	8812      	ldrh	r2, [r2, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	4813      	ldr	r0, [pc, #76]	@ (80033a4 <RunNanoEdgeAI+0x13c>)
 8003358:	f00d fb86 	bl	8010a68 <iprintf>
            //JMO
            ia = id_class;
 800335c:	4b0e      	ldr	r3, [pc, #56]	@ (8003398 <RunNanoEdgeAI+0x130>)
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	4b11      	ldr	r3, [pc, #68]	@ (80033a8 <RunNanoEdgeAI+0x140>)
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	e005      	b.n	8003372 <RunNanoEdgeAI+0x10a>
        } else {
            printf(" Classification Error!\n");
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <RunNanoEdgeAI+0x144>)
 8003368:	f00d fbee 	bl	8010b48 <puts>
            ia = 8; //nb qui n'est pas possible par l'IA -> erreur
 800336c:	4b0e      	ldr	r3, [pc, #56]	@ (80033a8 <RunNanoEdgeAI+0x140>)
 800336e:	2208      	movs	r2, #8
 8003370:	801a      	strh	r2, [r3, #0]
        }

        // Reset buffer for next batch
        neai_buffer_ptr = 0;
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <RunNanoEdgeAI+0x124>)
 8003374:	2200      	movs	r2, #0
 8003376:	801a      	strh	r2, [r3, #0]
        memset(neai_buffer, 0.0, AXIS * SAMPLES * sizeof(float));
 8003378:	f44f 52c0 	mov.w	r2, #6144	@ 0x1800
 800337c:	2100      	movs	r1, #0
 800337e:	4804      	ldr	r0, [pc, #16]	@ (8003390 <RunNanoEdgeAI+0x128>)
 8003380:	f00d fcc2 	bl	8010d08 <memset>
    }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20001e42 	.word	0x20001e42
 8003390:	20000634 	.word	0x20000634
 8003394:	08013398 	.word	0x08013398
 8003398:	20001e40 	.word	0x20001e40
 800339c:	20001e34 	.word	0x20001e34
 80033a0:	2000000c 	.word	0x2000000c
 80033a4:	080133c0 	.word	0x080133c0
 80033a8:	20001f68 	.word	0x20001f68
 80033ac:	080133e4 	.word	0x080133e4

080033b0 <InitializeISM330DHCX2>:
//    printf(" CTRL7_G  = 0x%02X (Should be 0x00 - High-Perf Gyro Confirmed)\n", ctrl7_g);
//}


//added low pass filter
void InitializeISM330DHCX2(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af04      	add	r7, sp, #16
    uint8_t config[2];
    uint8_t readback;
    HAL_StatusTypeDef status;

    printf("Initializing ISM330DHCX...\n");
 80033b6:	487d      	ldr	r0, [pc, #500]	@ (80035ac <InitializeISM330DHCX2+0x1fc>)
 80033b8:	f00d fbc6 	bl	8010b48 <puts>

    // Step 1: Enable Register Auto-Increment & Block Data Update (CTRL3_C)
    config[0] = 0x12;
 80033bc:	2312      	movs	r3, #18
 80033be:	713b      	strb	r3, [r7, #4]
    config[1] = 0x44; // IF_INC = 1, BDU = 1
 80033c0:	2344      	movs	r3, #68	@ 0x44
 80033c2:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 80033c4:	1d3a      	adds	r2, r7, #4
 80033c6:	2364      	movs	r3, #100	@ 0x64
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2302      	movs	r3, #2
 80033cc:	21d6      	movs	r1, #214	@ 0xd6
 80033ce:	4878      	ldr	r0, [pc, #480]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 80033d0:	f001 f832 	bl	8004438 <HAL_I2C_Master_Transmit>
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL3_C setup failed\n");
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <InitializeISM330DHCX2+0x34>
 80033de:	4875      	ldr	r0, [pc, #468]	@ (80035b4 <InitializeISM330DHCX2+0x204>)
 80033e0:	f00d fbb2 	bl	8010b48 <puts>

    HAL_Delay(10);
 80033e4:	200a      	movs	r0, #10
 80033e6:	f7fe f9b5 	bl	8001754 <HAL_Delay>

    // Read back CTRL3_C to verify
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x12, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 80033ea:	2364      	movs	r3, #100	@ 0x64
 80033ec:	9302      	str	r3, [sp, #8]
 80033ee:	2301      	movs	r3, #1
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	1cfb      	adds	r3, r7, #3
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2301      	movs	r3, #1
 80033f8:	2212      	movs	r2, #18
 80033fa:	21d6      	movs	r1, #214	@ 0xd6
 80033fc:	486c      	ldr	r0, [pc, #432]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 80033fe:	f001 f933 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL3_C Readback: 0x%02X (Expected: 0x44)\n", readback);
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	4619      	mov	r1, r3
 8003406:	486c      	ldr	r0, [pc, #432]	@ (80035b8 <InitializeISM330DHCX2+0x208>)
 8003408:	f00d fb2e 	bl	8010a68 <iprintf>

    // Step 2: Enable Accelerometer - 104Hz ODR, ±2g Full Scale, High-Performance Mode (CTRL1_XL)
    config[0] = 0x10;
 800340c:	2310      	movs	r3, #16
 800340e:	713b      	strb	r3, [r7, #4]
    config[1] = 0x50;
 8003410:	2350      	movs	r3, #80	@ 0x50
 8003412:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8003414:	1d3a      	adds	r2, r7, #4
 8003416:	2364      	movs	r3, #100	@ 0x64
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	2302      	movs	r3, #2
 800341c:	21d6      	movs	r1, #214	@ 0xd6
 800341e:	4864      	ldr	r0, [pc, #400]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 8003420:	f001 f80a 	bl	8004438 <HAL_I2C_Master_Transmit>
 8003424:	4603      	mov	r3, r0
 8003426:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL1_XL setup failed\n");
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <InitializeISM330DHCX2+0x84>
 800342e:	4863      	ldr	r0, [pc, #396]	@ (80035bc <InitializeISM330DHCX2+0x20c>)
 8003430:	f00d fb8a 	bl	8010b48 <puts>

    HAL_Delay(10);
 8003434:	200a      	movs	r0, #10
 8003436:	f7fe f98d 	bl	8001754 <HAL_Delay>

    // Read back CTRL1_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 800343a:	2364      	movs	r3, #100	@ 0x64
 800343c:	9302      	str	r3, [sp, #8]
 800343e:	2301      	movs	r3, #1
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	1cfb      	adds	r3, r7, #3
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2301      	movs	r3, #1
 8003448:	2210      	movs	r2, #16
 800344a:	21d6      	movs	r1, #214	@ 0xd6
 800344c:	4858      	ldr	r0, [pc, #352]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 800344e:	f001 f90b 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL1_XL Readback: 0x%02X (Expected: 0x50)\n", readback);
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	4619      	mov	r1, r3
 8003456:	485a      	ldr	r0, [pc, #360]	@ (80035c0 <InitializeISM330DHCX2+0x210>)
 8003458:	f00d fb06 	bl	8010a68 <iprintf>

    // Step 3: Enable Gyroscope - 104Hz ODR, ±1000 dps Full Scale (CTRL2_G)
    config[0] = 0x11;
 800345c:	2311      	movs	r3, #17
 800345e:	713b      	strb	r3, [r7, #4]
    config[1] = 0x48;
 8003460:	2348      	movs	r3, #72	@ 0x48
 8003462:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8003464:	1d3a      	adds	r2, r7, #4
 8003466:	2364      	movs	r3, #100	@ 0x64
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	2302      	movs	r3, #2
 800346c:	21d6      	movs	r1, #214	@ 0xd6
 800346e:	4850      	ldr	r0, [pc, #320]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 8003470:	f000 ffe2 	bl	8004438 <HAL_I2C_Master_Transmit>
 8003474:	4603      	mov	r3, r0
 8003476:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL2_G setup failed\n");
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <InitializeISM330DHCX2+0xd4>
 800347e:	4851      	ldr	r0, [pc, #324]	@ (80035c4 <InitializeISM330DHCX2+0x214>)
 8003480:	f00d fb62 	bl	8010b48 <puts>

    HAL_Delay(10);
 8003484:	200a      	movs	r0, #10
 8003486:	f7fe f965 	bl	8001754 <HAL_Delay>

    // Read back CTRL2_G
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 800348a:	2364      	movs	r3, #100	@ 0x64
 800348c:	9302      	str	r3, [sp, #8]
 800348e:	2301      	movs	r3, #1
 8003490:	9301      	str	r3, [sp, #4]
 8003492:	1cfb      	adds	r3, r7, #3
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	2301      	movs	r3, #1
 8003498:	2211      	movs	r2, #17
 800349a:	21d6      	movs	r1, #214	@ 0xd6
 800349c:	4844      	ldr	r0, [pc, #272]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 800349e:	f001 f8e3 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL2_G Readback: 0x%02X (Expected: 0x48)\n", readback);
 80034a2:	78fb      	ldrb	r3, [r7, #3]
 80034a4:	4619      	mov	r1, r3
 80034a6:	4848      	ldr	r0, [pc, #288]	@ (80035c8 <InitializeISM330DHCX2+0x218>)
 80034a8:	f00d fade 	bl	8010a68 <iprintf>

    // Step 4: Enable LPF2 for Accelerometer & Set Cutoff Frequency to ODR/20
    config[0] = 0x17;  // CTRL8_XL register
 80034ac:	2317      	movs	r3, #23
 80034ae:	713b      	strb	r3, [r7, #4]
    config[1] = 0x82;  // LPF2_XL_EN = 1, HPCF_XL = 010 (ODR/20)
 80034b0:	2382      	movs	r3, #130	@ 0x82
 80034b2:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 80034b4:	1d3a      	adds	r2, r7, #4
 80034b6:	2364      	movs	r3, #100	@ 0x64
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2302      	movs	r3, #2
 80034bc:	21d6      	movs	r1, #214	@ 0xd6
 80034be:	483c      	ldr	r0, [pc, #240]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 80034c0:	f000 ffba 	bl	8004438 <HAL_I2C_Master_Transmit>
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL8_XL setup failed\n");
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d002      	beq.n	80034d4 <InitializeISM330DHCX2+0x124>
 80034ce:	483f      	ldr	r0, [pc, #252]	@ (80035cc <InitializeISM330DHCX2+0x21c>)
 80034d0:	f00d fb3a 	bl	8010b48 <puts>

    HAL_Delay(10);
 80034d4:	200a      	movs	r0, #10
 80034d6:	f7fe f93d 	bl	8001754 <HAL_Delay>

    // Read back CTRL8_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x17, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 80034da:	2364      	movs	r3, #100	@ 0x64
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	2301      	movs	r3, #1
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	1cfb      	adds	r3, r7, #3
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	2301      	movs	r3, #1
 80034e8:	2217      	movs	r2, #23
 80034ea:	21d6      	movs	r1, #214	@ 0xd6
 80034ec:	4830      	ldr	r0, [pc, #192]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 80034ee:	f001 f8bb 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL8_XL Readback: 0x%02X (Expected: 0x82)\n", readback);
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	4619      	mov	r1, r3
 80034f6:	4836      	ldr	r0, [pc, #216]	@ (80035d0 <InitializeISM330DHCX2+0x220>)
 80034f8:	f00d fab6 	bl	8010a68 <iprintf>

    // Step 5: Enable LPF1 for Gyroscope (CTRL4_C)
    config[0] = 0x13;
 80034fc:	2313      	movs	r3, #19
 80034fe:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // LPF1_SEL_G = 1 (Enable LPF1)
 8003500:	2302      	movs	r3, #2
 8003502:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8003504:	1d3a      	adds	r2, r7, #4
 8003506:	2364      	movs	r3, #100	@ 0x64
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	2302      	movs	r3, #2
 800350c:	21d6      	movs	r1, #214	@ 0xd6
 800350e:	4828      	ldr	r0, [pc, #160]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 8003510:	f000 ff92 	bl	8004438 <HAL_I2C_Master_Transmit>
 8003514:	4603      	mov	r3, r0
 8003516:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL4_C setup failed\n");
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <InitializeISM330DHCX2+0x174>
 800351e:	482d      	ldr	r0, [pc, #180]	@ (80035d4 <InitializeISM330DHCX2+0x224>)
 8003520:	f00d fb12 	bl	8010b48 <puts>

    HAL_Delay(10);
 8003524:	200a      	movs	r0, #10
 8003526:	f7fe f915 	bl	8001754 <HAL_Delay>

    // Read back CTRL4_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x13, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 800352a:	2364      	movs	r3, #100	@ 0x64
 800352c:	9302      	str	r3, [sp, #8]
 800352e:	2301      	movs	r3, #1
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	1cfb      	adds	r3, r7, #3
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	2213      	movs	r2, #19
 800353a:	21d6      	movs	r1, #214	@ 0xd6
 800353c:	481c      	ldr	r0, [pc, #112]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 800353e:	f001 f893 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL4_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	4619      	mov	r1, r3
 8003546:	4824      	ldr	r0, [pc, #144]	@ (80035d8 <InitializeISM330DHCX2+0x228>)
 8003548:	f00d fa8e 	bl	8010a68 <iprintf>

    // Step 6: Set Gyroscope Cutoff Frequency to ODR/10 (CTRL6_C)
    config[0] = 0x15;
 800354c:	2315      	movs	r3, #21
 800354e:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // FTYPE = 10 (ODR/10)
 8003550:	2302      	movs	r3, #2
 8003552:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8003554:	1d3a      	adds	r2, r7, #4
 8003556:	2364      	movs	r3, #100	@ 0x64
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	2302      	movs	r3, #2
 800355c:	21d6      	movs	r1, #214	@ 0xd6
 800355e:	4814      	ldr	r0, [pc, #80]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 8003560:	f000 ff6a 	bl	8004438 <HAL_I2C_Master_Transmit>
 8003564:	4603      	mov	r3, r0
 8003566:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL6_C setup failed\n");
 8003568:	79fb      	ldrb	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <InitializeISM330DHCX2+0x1c4>
 800356e:	481b      	ldr	r0, [pc, #108]	@ (80035dc <InitializeISM330DHCX2+0x22c>)
 8003570:	f00d faea 	bl	8010b48 <puts>

    HAL_Delay(10);
 8003574:	200a      	movs	r0, #10
 8003576:	f7fe f8ed 	bl	8001754 <HAL_Delay>

    // Read back CTRL6_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x15, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 800357a:	2364      	movs	r3, #100	@ 0x64
 800357c:	9302      	str	r3, [sp, #8]
 800357e:	2301      	movs	r3, #1
 8003580:	9301      	str	r3, [sp, #4]
 8003582:	1cfb      	adds	r3, r7, #3
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	2301      	movs	r3, #1
 8003588:	2215      	movs	r2, #21
 800358a:	21d6      	movs	r1, #214	@ 0xd6
 800358c:	4808      	ldr	r0, [pc, #32]	@ (80035b0 <InitializeISM330DHCX2+0x200>)
 800358e:	f001 f86b 	bl	8004668 <HAL_I2C_Mem_Read>
    printf("CTRL6_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	4619      	mov	r1, r3
 8003596:	4812      	ldr	r0, [pc, #72]	@ (80035e0 <InitializeISM330DHCX2+0x230>)
 8003598:	f00d fa66 	bl	8010a68 <iprintf>

    printf("ISM330DHCX Initialization Complete with LPF Enabled!\n");
 800359c:	4811      	ldr	r0, [pc, #68]	@ (80035e4 <InitializeISM330DHCX2+0x234>)
 800359e:	f00d fad3 	bl	8010b48 <puts>


}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	080133fc 	.word	0x080133fc
 80035b0:	20000344 	.word	0x20000344
 80035b4:	08013418 	.word	0x08013418
 80035b8:	08013434 	.word	0x08013434
 80035bc:	08013460 	.word	0x08013460
 80035c0:	08013480 	.word	0x08013480
 80035c4:	080134ac 	.word	0x080134ac
 80035c8:	080134c8 	.word	0x080134c8
 80035cc:	080134f4 	.word	0x080134f4
 80035d0:	08013514 	.word	0x08013514
 80035d4:	08013540 	.word	0x08013540
 80035d8:	0801355c 	.word	0x0801355c
 80035dc:	08013588 	.word	0x08013588
 80035e0:	080135a4 	.word	0x080135a4
 80035e4:	080135d0 	.word	0x080135d0

080035e8 <ReadIMUData>:




// AI
void ReadIMUData(AccelerometerData *accelData, GyroscopeData *gyroData) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b090      	sub	sp, #64	@ 0x40
 80035ec:	af04      	add	r7, sp, #16
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
    uint8_t accelDataRaw[6] = {0};
 80035f2:	f107 0310 	add.w	r3, r7, #16
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	809a      	strh	r2, [r3, #4]
    uint8_t gyroDataRaw[6] = {0};
 80035fc:	f107 0308 	add.w	r3, r7, #8
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	809a      	strh	r2, [r3, #4]
    HAL_StatusTypeDef status;

    //  Read Gyroscope Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x22,
 8003606:	2332      	movs	r3, #50	@ 0x32
 8003608:	9302      	str	r3, [sp, #8]
 800360a:	2306      	movs	r3, #6
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	f107 0308 	add.w	r3, r7, #8
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2301      	movs	r3, #1
 8003616:	2222      	movs	r2, #34	@ 0x22
 8003618:	21d6      	movs	r1, #214	@ 0xd6
 800361a:	4864      	ldr	r0, [pc, #400]	@ (80037ac <ReadIMUData+0x1c4>)
 800361c:	f001 f824 	bl	8004668 <HAL_I2C_Mem_Read>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                               I2C_MEMADD_SIZE_8BIT, gyroDataRaw, 6, 50);
    if (status == HAL_OK) {
 8003626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800362a:	2b00      	cmp	r3, #0
 800362c:	d14d      	bne.n	80036ca <ReadIMUData+0xe2>
        int16_t rawGyroX = (int16_t)((gyroDataRaw[0]) | (gyroDataRaw[1] << 8));
 800362e:	7a3b      	ldrb	r3, [r7, #8]
 8003630:	b21a      	sxth	r2, r3
 8003632:	7a7b      	ldrb	r3, [r7, #9]
 8003634:	b21b      	sxth	r3, r3
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	b21b      	sxth	r3, r3
 800363a:	4313      	orrs	r3, r2
 800363c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        int16_t rawGyroY = (int16_t)((gyroDataRaw[2]) | (gyroDataRaw[3] << 8));
 800363e:	7abb      	ldrb	r3, [r7, #10]
 8003640:	b21a      	sxth	r2, r3
 8003642:	7afb      	ldrb	r3, [r7, #11]
 8003644:	b21b      	sxth	r3, r3
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	b21b      	sxth	r3, r3
 800364a:	4313      	orrs	r3, r2
 800364c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t rawGyroZ = (int16_t)((gyroDataRaw[4]) | (gyroDataRaw[5] << 8));
 800364e:	7b3b      	ldrb	r3, [r7, #12]
 8003650:	b21a      	sxth	r2, r3
 8003652:	7b7b      	ldrb	r3, [r7, #13]
 8003654:	b21b      	sxth	r3, r3
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	b21b      	sxth	r3, r3
 800365a:	4313      	orrs	r3, r2
 800365c:	853b      	strh	r3, [r7, #40]	@ 0x28

        float gyroSensitivity = 0.035f;
 800365e:	4b54      	ldr	r3, [pc, #336]	@ (80037b0 <ReadIMUData+0x1c8>)
 8003660:	627b      	str	r3, [r7, #36]	@ 0x24
        gyroData->x = rawGyroX * gyroSensitivity;
 8003662:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800366e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	edc3 7a02 	vstr	s15, [r3, #8]
        gyroData->y = rawGyroY * gyroSensitivity;
 800367c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800368c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	edc3 7a03 	vstr	s15, [r3, #12]
        gyroData->z = rawGyroZ * gyroSensitivity;
 8003696:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800369a:	ee07 3a90 	vmov	s15, r3
 800369e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	edc3 7a04 	vstr	s15, [r3, #16]

        gyrx = gyroData->x;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	4a3f      	ldr	r2, [pc, #252]	@ (80037b4 <ReadIMUData+0x1cc>)
 80036b6:	6013      	str	r3, [r2, #0]
        gyry = gyroData->y;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a3e      	ldr	r2, [pc, #248]	@ (80037b8 <ReadIMUData+0x1d0>)
 80036be:	6013      	str	r3, [r2, #0]
        gyrz = gyroData->z;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	4a3d      	ldr	r2, [pc, #244]	@ (80037bc <ReadIMUData+0x1d4>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	e002      	b.n	80036d0 <ReadIMUData+0xe8>

    } else {
        printf(" Gyroscope Read Error!\n");
 80036ca:	483d      	ldr	r0, [pc, #244]	@ (80037c0 <ReadIMUData+0x1d8>)
 80036cc:	f00d fa3c 	bl	8010b48 <puts>
    }

    //  Read Accelerometer Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x28,
 80036d0:	2332      	movs	r3, #50	@ 0x32
 80036d2:	9302      	str	r3, [sp, #8]
 80036d4:	2306      	movs	r3, #6
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	f107 0310 	add.w	r3, r7, #16
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	2301      	movs	r3, #1
 80036e0:	2228      	movs	r2, #40	@ 0x28
 80036e2:	21d6      	movs	r1, #214	@ 0xd6
 80036e4:	4831      	ldr	r0, [pc, #196]	@ (80037ac <ReadIMUData+0x1c4>)
 80036e6:	f000 ffbf 	bl	8004668 <HAL_I2C_Mem_Read>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                               I2C_MEMADD_SIZE_8BIT, accelDataRaw, 6, 50);
    if (status == HAL_OK) {
 80036f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d14d      	bne.n	8003794 <ReadIMUData+0x1ac>
        int16_t rawAccelX = (int16_t)((accelDataRaw[0]) | (accelDataRaw[1] << 8));
 80036f8:	7c3b      	ldrb	r3, [r7, #16]
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	b21b      	sxth	r3, r3
 8003700:	021b      	lsls	r3, r3, #8
 8003702:	b21b      	sxth	r3, r3
 8003704:	4313      	orrs	r3, r2
 8003706:	847b      	strh	r3, [r7, #34]	@ 0x22
        int16_t rawAccelY = (int16_t)((accelDataRaw[2]) | (accelDataRaw[3] << 8));
 8003708:	7cbb      	ldrb	r3, [r7, #18]
 800370a:	b21a      	sxth	r2, r3
 800370c:	7cfb      	ldrb	r3, [r7, #19]
 800370e:	b21b      	sxth	r3, r3
 8003710:	021b      	lsls	r3, r3, #8
 8003712:	b21b      	sxth	r3, r3
 8003714:	4313      	orrs	r3, r2
 8003716:	843b      	strh	r3, [r7, #32]
        int16_t rawAccelZ = (int16_t)((accelDataRaw[4]) | (accelDataRaw[5] << 8));
 8003718:	7d3b      	ldrb	r3, [r7, #20]
 800371a:	b21a      	sxth	r2, r3
 800371c:	7d7b      	ldrb	r3, [r7, #21]
 800371e:	b21b      	sxth	r3, r3
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	b21b      	sxth	r3, r3
 8003724:	4313      	orrs	r3, r2
 8003726:	83fb      	strh	r3, [r7, #30]

        float accelSensitivity = 0.000061f;
 8003728:	4b26      	ldr	r3, [pc, #152]	@ (80037c4 <ReadIMUData+0x1dc>)
 800372a:	61bb      	str	r3, [r7, #24]
        accelData->x = rawAccelX * accelSensitivity;
 800372c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003730:	ee07 3a90 	vmov	s15, r3
 8003734:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003738:	edd7 7a06 	vldr	s15, [r7, #24]
 800373c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	edc3 7a02 	vstr	s15, [r3, #8]
        accelData->y = rawAccelY * accelSensitivity;
 8003746:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003752:	edd7 7a06 	vldr	s15, [r7, #24]
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	edc3 7a03 	vstr	s15, [r3, #12]
        accelData->z = rawAccelZ * accelSensitivity;
 8003760:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003764:	ee07 3a90 	vmov	s15, r3
 8003768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edc3 7a04 	vstr	s15, [r3, #16]

        accx = accelData->x;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <ReadIMUData+0x1e0>)
 8003780:	6013      	str	r3, [r2, #0]
        accy = accelData->y;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	4a11      	ldr	r2, [pc, #68]	@ (80037cc <ReadIMUData+0x1e4>)
 8003788:	6013      	str	r3, [r2, #0]
        accz = accelData->z;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	4a10      	ldr	r2, [pc, #64]	@ (80037d0 <ReadIMUData+0x1e8>)
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e002      	b.n	800379a <ReadIMUData+0x1b2>
    } else {
        printf(" Accelerometer Read Error!\n");
 8003794:	480f      	ldr	r0, [pc, #60]	@ (80037d4 <ReadIMUData+0x1ec>)
 8003796:	f00d f9d7 	bl	8010b48 <puts>
    }

    //  Call AI Model with Converted Data
    RunNanoEdgeAI(accelData, gyroData);
 800379a:	6839      	ldr	r1, [r7, #0]
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff fd63 	bl	8003268 <RunNanoEdgeAI>
}
 80037a2:	bf00      	nop
 80037a4:	3730      	adds	r7, #48	@ 0x30
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000344 	.word	0x20000344
 80037b0:	3d0f5c29 	.word	0x3d0f5c29
 80037b4:	20001f78 	.word	0x20001f78
 80037b8:	20001f7c 	.word	0x20001f7c
 80037bc:	20001f80 	.word	0x20001f80
 80037c0:	08013740 	.word	0x08013740
 80037c4:	387fda40 	.word	0x387fda40
 80037c8:	20001f6c 	.word	0x20001f6c
 80037cc:	20001f70 	.word	0x20001f70
 80037d0:	20001f74 	.word	0x20001f74
 80037d4:	08013758 	.word	0x08013758

080037d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_Init+0x3c>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	@ (8003814 <HAL_Init+0x3c>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037ee:	2003      	movs	r0, #3
 80037f0:	f000 f9b4 	bl	8003b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037f4:	200f      	movs	r0, #15
 80037f6:	f000 f80f 	bl	8003818 <HAL_InitTick>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	71fb      	strb	r3, [r7, #7]
 8003804:	e001      	b.n	800380a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003806:	f7ff f9fb 	bl	8002c00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800380a:	79fb      	ldrb	r3, [r7, #7]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	58004000 	.word	0x58004000

08003818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003824:	4b17      	ldr	r3, [pc, #92]	@ (8003884 <HAL_InitTick+0x6c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d024      	beq.n	8003876 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800382c:	f002 fd62 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b14      	ldr	r3, [pc, #80]	@ (8003884 <HAL_InitTick+0x6c>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	4619      	mov	r1, r3
 8003838:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800383c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003840:	fbb2 f3f3 	udiv	r3, r2, r3
 8003844:	4618      	mov	r0, r3
 8003846:	f000 f9ca 	bl	8003bde <HAL_SYSTICK_Config>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10f      	bne.n	8003870 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b0f      	cmp	r3, #15
 8003854:	d809      	bhi.n	800386a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003856:	2200      	movs	r2, #0
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	f000 f988 	bl	8003b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003862:	4a09      	ldr	r2, [pc, #36]	@ (8003888 <HAL_InitTick+0x70>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6013      	str	r3, [r2, #0]
 8003868:	e007      	b.n	800387a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e004      	b.n	800387a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
 8003874:	e001      	b.n	800387a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000020 	.word	0x20000020
 8003888:	2000001c 	.word	0x2000001c

0800388c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003890:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_IncTick+0x20>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <HAL_IncTick+0x24>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	4a04      	ldr	r2, [pc, #16]	@ (80038b0 <HAL_IncTick+0x24>)
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000020 	.word	0x20000020
 80038b0:	20001e44 	.word	0x20001e44

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <HAL_GetTick+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20001e44 	.word	0x20001e44

080038cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80038d0:	4b03      	ldr	r3, [pc, #12]	@ (80038e0 <HAL_GetTickPrio+0x14>)
 80038d2:	681b      	ldr	r3, [r3, #0]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	2000001c 	.word	0x2000001c

080038e4 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80038e8:	4b03      	ldr	r3, [pc, #12]	@ (80038f8 <HAL_GetTickFreq+0x14>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	20000020 	.word	0x20000020

080038fc <__NVIC_SetPriorityGrouping>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800390c:	4b0c      	ldr	r3, [pc, #48]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003918:	4013      	ands	r3, r2
 800391a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800392c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800392e:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <__NVIC_SetPriorityGrouping+0x44>)
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	60d3      	str	r3, [r2, #12]
}
 8003934:	bf00      	nop
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <__NVIC_GetPriorityGrouping>:
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003948:	4b04      	ldr	r3, [pc, #16]	@ (800395c <__NVIC_GetPriorityGrouping+0x18>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	0a1b      	lsrs	r3, r3, #8
 800394e:	f003 0307 	and.w	r3, r3, #7
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	e000ed00 	.word	0xe000ed00

08003960 <__NVIC_EnableIRQ>:
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db0b      	blt.n	800398a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 021f 	and.w	r2, r3, #31
 8003978:	4907      	ldr	r1, [pc, #28]	@ (8003998 <__NVIC_EnableIRQ+0x38>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	2001      	movs	r0, #1
 8003982:	fa00 f202 	lsl.w	r2, r0, r2
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	e000e100 	.word	0xe000e100

0800399c <__NVIC_DisableIRQ>:
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	db12      	blt.n	80039d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ae:	79fb      	ldrb	r3, [r7, #7]
 80039b0:	f003 021f 	and.w	r2, r3, #31
 80039b4:	490a      	ldr	r1, [pc, #40]	@ (80039e0 <__NVIC_DisableIRQ+0x44>)
 80039b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2001      	movs	r0, #1
 80039be:	fa00 f202 	lsl.w	r2, r0, r2
 80039c2:	3320      	adds	r3, #32
 80039c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80039c8:	f3bf 8f4f 	dsb	sy
}
 80039cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039ce:	f3bf 8f6f 	isb	sy
}
 80039d2:	bf00      	nop
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100

080039e4 <__NVIC_SetPendingIRQ>:
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	4603      	mov	r3, r0
 80039ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	db0c      	blt.n	8003a10 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	f003 021f 	and.w	r2, r3, #31
 80039fc:	4907      	ldr	r1, [pc, #28]	@ (8003a1c <__NVIC_SetPendingIRQ+0x38>)
 80039fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	2001      	movs	r0, #1
 8003a06:	fa00 f202 	lsl.w	r2, r0, r2
 8003a0a:	3340      	adds	r3, #64	@ 0x40
 8003a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	e000e100 	.word	0xe000e100

08003a20 <__NVIC_ClearPendingIRQ>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	db0c      	blt.n	8003a4c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	f003 021f 	and.w	r2, r3, #31
 8003a38:	4907      	ldr	r1, [pc, #28]	@ (8003a58 <__NVIC_ClearPendingIRQ+0x38>)
 8003a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2001      	movs	r0, #1
 8003a42:	fa00 f202 	lsl.w	r2, r0, r2
 8003a46:	3360      	adds	r3, #96	@ 0x60
 8003a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	e000e100 	.word	0xe000e100

08003a5c <__NVIC_SetPriority>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	6039      	str	r1, [r7, #0]
 8003a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	db0a      	blt.n	8003a86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	490c      	ldr	r1, [pc, #48]	@ (8003aa8 <__NVIC_SetPriority+0x4c>)
 8003a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7a:	0112      	lsls	r2, r2, #4
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	440b      	add	r3, r1
 8003a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003a84:	e00a      	b.n	8003a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	4908      	ldr	r1, [pc, #32]	@ (8003aac <__NVIC_SetPriority+0x50>)
 8003a8c:	79fb      	ldrb	r3, [r7, #7]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	3b04      	subs	r3, #4
 8003a94:	0112      	lsls	r2, r2, #4
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	440b      	add	r3, r1
 8003a9a:	761a      	strb	r2, [r3, #24]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000e100 	.word	0xe000e100
 8003aac:	e000ed00 	.word	0xe000ed00

08003ab0 <NVIC_EncodePriority>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	@ 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f1c3 0307 	rsb	r3, r3, #7
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	bf28      	it	cs
 8003ace:	2304      	movcs	r3, #4
 8003ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2b06      	cmp	r3, #6
 8003ad8:	d902      	bls.n	8003ae0 <NVIC_EncodePriority+0x30>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3b03      	subs	r3, #3
 8003ade:	e000      	b.n	8003ae2 <NVIC_EncodePriority+0x32>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	401a      	ands	r2, r3
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af8:	f04f 31ff 	mov.w	r1, #4294967295
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	fa01 f303 	lsl.w	r3, r1, r3
 8003b02:	43d9      	mvns	r1, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b08:	4313      	orrs	r3, r2
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3724      	adds	r7, #36	@ 0x24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
	...

08003b18 <SysTick_Config>:
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b28:	d301      	bcc.n	8003b2e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00f      	b.n	8003b4e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b58 <SysTick_Config+0x40>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b36:	210f      	movs	r1, #15
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295
 8003b3c:	f7ff ff8e 	bl	8003a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b40:	4b05      	ldr	r3, [pc, #20]	@ (8003b58 <SysTick_Config+0x40>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b46:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <SysTick_Config+0x40>)
 8003b48:	2207      	movs	r2, #7
 8003b4a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	e000e010 	.word	0xe000e010

08003b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fec9 	bl	80038fc <__NVIC_SetPriorityGrouping>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	4603      	mov	r3, r0
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b80:	f7ff fee0 	bl	8003944 <__NVIC_GetPriorityGrouping>
 8003b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	68b9      	ldr	r1, [r7, #8]
 8003b8a:	6978      	ldr	r0, [r7, #20]
 8003b8c:	f7ff ff90 	bl	8003ab0 <NVIC_EncodePriority>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff ff5f 	bl	8003a5c <__NVIC_SetPriority>
}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	4603      	mov	r3, r0
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fed3 	bl	8003960 <__NVIC_EnableIRQ>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b082      	sub	sp, #8
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fee3 	bl	800399c <__NVIC_DisableIRQ>
}
 8003bd6:	bf00      	nop
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ff96 	bl	8003b18 <SysTick_Config>
 8003bec:	4603      	mov	r3, r0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff feed 	bl	80039e4 <__NVIC_SetPendingIRQ>
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	4603      	mov	r3, r0
 8003c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fefd 	bl	8003a20 <__NVIC_ClearPendingIRQ>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e08e      	b.n	8003d60 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	4b47      	ldr	r3, [pc, #284]	@ (8003d68 <HAL_DMA_Init+0x138>)
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d80f      	bhi.n	8003c6e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	4b45      	ldr	r3, [pc, #276]	@ (8003d6c <HAL_DMA_Init+0x13c>)
 8003c56:	4413      	add	r3, r2
 8003c58:	4a45      	ldr	r2, [pc, #276]	@ (8003d70 <HAL_DMA_Init+0x140>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	009a      	lsls	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a42      	ldr	r2, [pc, #264]	@ (8003d74 <HAL_DMA_Init+0x144>)
 8003c6a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c6c:	e00e      	b.n	8003c8c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	4b40      	ldr	r3, [pc, #256]	@ (8003d78 <HAL_DMA_Init+0x148>)
 8003c76:	4413      	add	r3, r2
 8003c78:	4a3d      	ldr	r2, [pc, #244]	@ (8003d70 <HAL_DMA_Init+0x140>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	009a      	lsls	r2, r3, #2
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a3c      	ldr	r2, [pc, #240]	@ (8003d7c <HAL_DMA_Init+0x14c>)
 8003c8a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003cb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f8fe 	bl	8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cec:	d102      	bne.n	8003cf4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8003d00:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d0a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <HAL_DMA_Init+0x106>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d80c      	bhi.n	8003d36 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f91d 	bl	8003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d32:	605a      	str	r2, [r3, #4]
 8003d34:	e008      	b.n	8003d48 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40020407 	.word	0x40020407
 8003d6c:	bffdfff8 	.word	0xbffdfff8
 8003d70:	cccccccd 	.word	0xcccccccd
 8003d74:	40020000 	.word	0x40020000
 8003d78:	bffdfbf8 	.word	0xbffdfbf8
 8003d7c:	40020400 	.word	0x40020400

08003d80 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f003 031c 	and.w	r3, r3, #28
 8003da0:	2204      	movs	r2, #4
 8003da2:	409a      	lsls	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	4013      	ands	r3, r2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d026      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x7a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d021      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d107      	bne.n	8003dd4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0204 	bic.w	r2, r2, #4
 8003dd2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	f003 021c 	and.w	r2, r3, #28
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	2104      	movs	r1, #4
 8003de2:	fa01 f202 	lsl.w	r2, r1, r2
 8003de6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d071      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003df8:	e06c      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	f003 031c 	and.w	r3, r3, #28
 8003e02:	2202      	movs	r2, #2
 8003e04:	409a      	lsls	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d02e      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xec>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d029      	beq.n	8003e6c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 020a 	bic.w	r2, r2, #10
 8003e34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f003 021c 	and.w	r2, r3, #28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d038      	beq.n	8003ed4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e6a:	e033      	b.n	8003ed4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f003 031c 	and.w	r3, r3, #28
 8003e74:	2208      	movs	r2, #8
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d02a      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x156>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d025      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 020e 	bic.w	r2, r2, #14
 8003e98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f003 021c 	and.w	r2, r3, #28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d004      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
}
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4b17      	ldr	r3, [pc, #92]	@ (8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d80a      	bhi.n	8003f0a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f00:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f08:	e007      	b.n	8003f1a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	089b      	lsrs	r3, r3, #2
 8003f10:	009a      	lsls	r2, r3, #2
 8003f12:	4b0f      	ldr	r3, [pc, #60]	@ (8003f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003f14:	4413      	add	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3b08      	subs	r3, #8
 8003f22:	4a0c      	ldr	r2, [pc, #48]	@ (8003f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003f30:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2201      	movs	r2, #1
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f40:	bf00      	nop
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	40020407 	.word	0x40020407
 8003f50:	4002081c 	.word	0x4002081c
 8003f54:	cccccccd 	.word	0xcccccccd
 8003f58:	40020880 	.word	0x40020880

08003f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4b0b      	ldr	r3, [pc, #44]	@ (8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	461a      	mov	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003f80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003f92:	bf00      	nop
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	1000823f 	.word	0x1000823f
 8003fa4:	40020940 	.word	0x40020940

08003fa8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fb6:	e14c      	b.n	8004252 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 813e 	beq.w	800424c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0303 	and.w	r3, r3, #3
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d005      	beq.n	8003fe8 <HAL_GPIO_Init+0x40>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d130      	bne.n	800404a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	2203      	movs	r2, #3
 8003ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff8:	43db      	mvns	r3, r3
 8003ffa:	693a      	ldr	r2, [r7, #16]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800401e:	2201      	movs	r2, #1
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	f003 0201 	and.w	r2, r3, #1
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f003 0303 	and.w	r3, r3, #3
 8004052:	2b03      	cmp	r3, #3
 8004054:	d017      	beq.n	8004086 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	2203      	movs	r2, #3
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43db      	mvns	r3, r3
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	4013      	ands	r3, r2
 800406c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	fa02 f303 	lsl.w	r3, r2, r3
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	4313      	orrs	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d123      	bne.n	80040da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	08da      	lsrs	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3208      	adds	r2, #8
 800409a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800409e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	08da      	lsrs	r2, r3, #3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3208      	adds	r2, #8
 80040d4:	6939      	ldr	r1, [r7, #16]
 80040d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	2203      	movs	r2, #3
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	43db      	mvns	r3, r3
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f003 0203 	and.w	r2, r3, #3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8098 	beq.w	800424c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800411c:	4a54      	ldr	r2, [pc, #336]	@ (8004270 <HAL_GPIO_Init+0x2c8>)
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004146:	d019      	beq.n	800417c <HAL_GPIO_Init+0x1d4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a4a      	ldr	r2, [pc, #296]	@ (8004274 <HAL_GPIO_Init+0x2cc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_GPIO_Init+0x1d0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a49      	ldr	r2, [pc, #292]	@ (8004278 <HAL_GPIO_Init+0x2d0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00d      	beq.n	8004174 <HAL_GPIO_Init+0x1cc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a48      	ldr	r2, [pc, #288]	@ (800427c <HAL_GPIO_Init+0x2d4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d007      	beq.n	8004170 <HAL_GPIO_Init+0x1c8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a47      	ldr	r2, [pc, #284]	@ (8004280 <HAL_GPIO_Init+0x2d8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d101      	bne.n	800416c <HAL_GPIO_Init+0x1c4>
 8004168:	2304      	movs	r3, #4
 800416a:	e008      	b.n	800417e <HAL_GPIO_Init+0x1d6>
 800416c:	2307      	movs	r3, #7
 800416e:	e006      	b.n	800417e <HAL_GPIO_Init+0x1d6>
 8004170:	2303      	movs	r3, #3
 8004172:	e004      	b.n	800417e <HAL_GPIO_Init+0x1d6>
 8004174:	2302      	movs	r3, #2
 8004176:	e002      	b.n	800417e <HAL_GPIO_Init+0x1d6>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_GPIO_Init+0x1d6>
 800417c:	2300      	movs	r3, #0
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	f002 0203 	and.w	r2, r2, #3
 8004184:	0092      	lsls	r2, r2, #2
 8004186:	4093      	lsls	r3, r2
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800418e:	4938      	ldr	r1, [pc, #224]	@ (8004270 <HAL_GPIO_Init+0x2c8>)
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	089b      	lsrs	r3, r3, #2
 8004194:	3302      	adds	r3, #2
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800419c:	4b39      	ldr	r3, [pc, #228]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041c0:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041ea:	4a26      	ldr	r2, [pc, #152]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041f0:	4b24      	ldr	r3, [pc, #144]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 80041f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43db      	mvns	r3, r3
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4013      	ands	r3, r2
 8004200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004216:	4a1b      	ldr	r2, [pc, #108]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800421e:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 8004220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	43db      	mvns	r3, r3
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4013      	ands	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004244:	4a0f      	ldr	r2, [pc, #60]	@ (8004284 <HAL_GPIO_Init+0x2dc>)
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	3301      	adds	r3, #1
 8004250:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f aeab 	bne.w	8003fb8 <HAL_GPIO_Init+0x10>
  }
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40010000 	.word	0x40010000
 8004274:	48000400 	.word	0x48000400
 8004278:	48000800 	.word	0x48000800
 800427c:	48000c00 	.word	0x48000c00
 8004280:	48001000 	.word	0x48001000
 8004284:	58000800 	.word	0x58000800

08004288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	460b      	mov	r3, r1
 8004292:	807b      	strh	r3, [r7, #2]
 8004294:	4613      	mov	r3, r2
 8004296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004298:	787b      	ldrb	r3, [r7, #1]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800429e:	887a      	ldrh	r2, [r7, #2]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80042a4:	e002      	b.n	80042ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80042a6:	887a      	ldrh	r2, [r7, #2]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80042be:	4b0a      	ldr	r3, [pc, #40]	@ (80042e8 <HAL_HSEM_IRQHandler+0x30>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80042c4:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <HAL_HSEM_IRQHandler+0x30>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	4906      	ldr	r1, [pc, #24]	@ (80042e8 <HAL_HSEM_IRQHandler+0x30>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80042d2:	4a05      	ldr	r2, [pc, #20]	@ (80042e8 <HAL_HSEM_IRQHandler+0x30>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f807 	bl	80042ec <HAL_HSEM_FreeCallback>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	58001500 	.word	0x58001500

080042ec <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e08d      	b.n	800442e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d106      	bne.n	800432c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f7fe fc7a 	bl	8002c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2224      	movs	r2, #36	@ 0x24
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004350:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689a      	ldr	r2, [r3, #8]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004360:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d107      	bne.n	800437a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004376:	609a      	str	r2, [r3, #8]
 8004378:	e006      	b.n	8004388 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004386:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b02      	cmp	r3, #2
 800438e:	d108      	bne.n	80043a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	e007      	b.n	80043b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6812      	ldr	r2, [r2, #0]
 80043bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69d9      	ldr	r1, [r3, #28]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1a      	ldr	r2, [r3, #32]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b088      	sub	sp, #32
 800443c:	af02      	add	r7, sp, #8
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	461a      	mov	r2, r3
 8004444:	460b      	mov	r3, r1
 8004446:	817b      	strh	r3, [r7, #10]
 8004448:	4613      	mov	r3, r2
 800444a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b20      	cmp	r3, #32
 8004456:	f040 80fd 	bne.w	8004654 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_Master_Transmit+0x30>
 8004464:	2302      	movs	r3, #2
 8004466:	e0f6      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004470:	f7ff fa20 	bl	80038b4 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	2319      	movs	r3, #25
 800447c:	2201      	movs	r2, #1
 800447e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fb6e 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e0e1      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2221      	movs	r2, #33	@ 0x21
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2210      	movs	r2, #16
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	893a      	ldrh	r2, [r7, #8]
 80044b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2bff      	cmp	r3, #255	@ 0xff
 80044c2:	d906      	bls.n	80044d2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	22ff      	movs	r2, #255	@ 0xff
 80044c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80044ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	e007      	b.n	80044e2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80044dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044e0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d024      	beq.n	8004534 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004512:	3b01      	subs	r3, #1
 8004514:	b29a      	uxth	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	b2db      	uxtb	r3, r3
 8004520:	3301      	adds	r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	8979      	ldrh	r1, [r7, #10]
 8004526:	4b4e      	ldr	r3, [pc, #312]	@ (8004660 <HAL_I2C_Master_Transmit+0x228>)
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fcdd 	bl	8004eec <I2C_TransferConfig>
 8004532:	e066      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004538:	b2da      	uxtb	r2, r3
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	4b48      	ldr	r3, [pc, #288]	@ (8004660 <HAL_I2C_Master_Transmit+0x228>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fcd2 	bl	8004eec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004548:	e05b      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	6a39      	ldr	r1, [r7, #32]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 fb61 	bl	8004c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e07b      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	781a      	ldrb	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	3b01      	subs	r3, #1
 800457c:	b29a      	uxth	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d034      	beq.n	8004602 <HAL_I2C_Master_Transmit+0x1ca>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800459c:	2b00      	cmp	r3, #0
 800459e:	d130      	bne.n	8004602 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2180      	movs	r1, #128	@ 0x80
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fada 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d001      	beq.n	80045ba <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e04d      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045be:	b29b      	uxth	r3, r3
 80045c0:	2bff      	cmp	r3, #255	@ 0xff
 80045c2:	d90e      	bls.n	80045e2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	22ff      	movs	r2, #255	@ 0xff
 80045c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	8979      	ldrh	r1, [r7, #10]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc86 	bl	8004eec <I2C_TransferConfig>
 80045e0:	e00f      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	8979      	ldrh	r1, [r7, #10]
 80045f4:	2300      	movs	r3, #0
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fc75 	bl	8004eec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	d19e      	bne.n	800454a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	6a39      	ldr	r1, [r7, #32]
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb47 	bl	8004ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e01a      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2220      	movs	r2, #32
 8004626:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6859      	ldr	r1, [r3, #4]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <HAL_I2C_Master_Transmit+0x22c>)
 8004634:	400b      	ands	r3, r1
 8004636:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004654:	2302      	movs	r3, #2
  }
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	80002000 	.word	0x80002000
 8004664:	fe00e800 	.word	0xfe00e800

08004668 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af02      	add	r7, sp, #8
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4603      	mov	r3, r0
 8004678:	817b      	strh	r3, [r7, #10]
 800467a:	460b      	mov	r3, r1
 800467c:	813b      	strh	r3, [r7, #8]
 800467e:	4613      	mov	r3, r2
 8004680:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b20      	cmp	r3, #32
 800468c:	f040 80fd 	bne.w	800488a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <HAL_I2C_Mem_Read+0x34>
 8004696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0f1      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d101      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x4e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	e0ea      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046be:	f7ff f8f9 	bl	80038b4 <HAL_GetTick>
 80046c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	9300      	str	r3, [sp, #0]
 80046c8:	2319      	movs	r3, #25
 80046ca:	2201      	movs	r2, #1
 80046cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fa47 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d5      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2222      	movs	r2, #34	@ 0x22
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2240      	movs	r2, #64	@ 0x40
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004700:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004708:	88f8      	ldrh	r0, [r7, #6]
 800470a:	893a      	ldrh	r2, [r7, #8]
 800470c:	8979      	ldrh	r1, [r7, #10]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	4603      	mov	r3, r0
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 f9ab 	bl	8004a74 <I2C_RequestMemoryRead>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e0ad      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2bff      	cmp	r3, #255	@ 0xff
 8004738:	d90e      	bls.n	8004758 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	22ff      	movs	r2, #255	@ 0xff
 800473e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004744:	b2da      	uxtb	r2, r3
 8004746:	8979      	ldrh	r1, [r7, #10]
 8004748:	4b52      	ldr	r3, [pc, #328]	@ (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fbcb 	bl	8004eec <I2C_TransferConfig>
 8004756:	e00f      	b.n	8004778 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004766:	b2da      	uxtb	r2, r3
 8004768:	8979      	ldrh	r1, [r7, #10]
 800476a:	4b4a      	ldr	r3, [pc, #296]	@ (8004894 <HAL_I2C_Mem_Read+0x22c>)
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fbba 	bl	8004eec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477e:	2200      	movs	r2, #0
 8004780:	2104      	movs	r1, #4
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f9ee 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07c      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d034      	beq.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d130      	bne.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047dc:	2200      	movs	r2, #0
 80047de:	2180      	movs	r1, #128	@ 0x80
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f9bf 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e04d      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	2bff      	cmp	r3, #255	@ 0xff
 80047f8:	d90e      	bls.n	8004818 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	22ff      	movs	r2, #255	@ 0xff
 80047fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004804:	b2da      	uxtb	r2, r3
 8004806:	8979      	ldrh	r1, [r7, #10]
 8004808:	2300      	movs	r3, #0
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004810:	68f8      	ldr	r0, [r7, #12]
 8004812:	f000 fb6b 	bl	8004eec <I2C_TransferConfig>
 8004816:	e00f      	b.n	8004838 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	b2da      	uxtb	r2, r3
 8004828:	8979      	ldrh	r1, [r7, #10]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 fb5a 	bl	8004eec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d19a      	bne.n	8004778 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fa2c 	bl	8004ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01a      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2220      	movs	r2, #32
 800485c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6859      	ldr	r1, [r3, #4]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <HAL_I2C_Mem_Read+0x230>)
 800486a:	400b      	ands	r3, r1
 800486c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2220      	movs	r2, #32
 8004872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	80002400 	.word	0x80002400
 8004898:	fe00e800 	.word	0xfe00e800

0800489c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	@ 0x28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607a      	str	r2, [r7, #4]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	460b      	mov	r3, r1
 80048aa:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80048ac:	2300      	movs	r3, #0
 80048ae:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b20      	cmp	r3, #32
 80048ba:	f040 80d6 	bne.w	8004a6a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048cc:	d101      	bne.n	80048d2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80048ce:	2302      	movs	r3, #2
 80048d0:	e0cc      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d101      	bne.n	80048e0 <HAL_I2C_IsDeviceReady+0x44>
 80048dc:	2302      	movs	r3, #2
 80048de:	e0c5      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d107      	bne.n	800490e <HAL_I2C_IsDeviceReady+0x72>
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004908:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800490c:	e006      	b.n	800491c <HAL_I2C_IsDeviceReady+0x80>
 800490e:	897b      	ldrh	r3, [r7, #10]
 8004910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004914:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004918:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8004922:	f7fe ffc7 	bl	80038b4 <HAL_GetTick>
 8004926:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f003 0320 	and.w	r3, r3, #32
 8004932:	2b20      	cmp	r3, #32
 8004934:	bf0c      	ite	eq
 8004936:	2301      	moveq	r3, #1
 8004938:	2300      	movne	r3, #0
 800493a:	b2db      	uxtb	r3, r3
 800493c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004954:	e034      	b.n	80049c0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495c:	d01a      	beq.n	8004994 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800495e:	f7fe ffa9 	bl	80038b4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d302      	bcc.n	8004974 <HAL_I2C_IsDeviceReady+0xd8>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10f      	bne.n	8004994 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004980:	f043 0220 	orr.w	r2, r3, #32
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e06b      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b20      	cmp	r3, #32
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b10      	cmp	r3, #16
 80049b6:	bf0c      	ite	eq
 80049b8:	2301      	moveq	r3, #1
 80049ba:	2300      	movne	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049c0:	7ffb      	ldrb	r3, [r7, #31]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_I2C_IsDeviceReady+0x130>
 80049c6:	7fbb      	ldrb	r3, [r7, #30]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0c4      	beq.n	8004956 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0310 	and.w	r3, r3, #16
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d01a      	beq.n	8004a10 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2200      	movs	r2, #0
 80049e2:	2120      	movs	r1, #32
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f8bd 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e03b      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e02d      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2120      	movs	r1, #32
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f8a2 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e020      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2210      	movs	r2, #16
 8004a30:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2220      	movs	r2, #32
 8004a38:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	f63f af56 	bhi.w	80048f6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a56:	f043 0220 	orr.w	r2, r3, #32
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004a6a:	2302      	movs	r3, #2
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af02      	add	r7, sp, #8
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	4608      	mov	r0, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	4603      	mov	r3, r0
 8004a84:	817b      	strh	r3, [r7, #10]
 8004a86:	460b      	mov	r3, r1
 8004a88:	813b      	strh	r3, [r7, #8]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	8979      	ldrh	r1, [r7, #10]
 8004a94:	4b20      	ldr	r3, [pc, #128]	@ (8004b18 <I2C_RequestMemoryRead+0xa4>)
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 fa26 	bl	8004eec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aa0:	69fa      	ldr	r2, [r7, #28]
 8004aa2:	69b9      	ldr	r1, [r7, #24]
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 f8b6 	bl	8004c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e02c      	b.n	8004b0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d105      	bne.n	8004ac6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004aba:	893b      	ldrh	r3, [r7, #8]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ac4:	e015      	b.n	8004af2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ac6:	893b      	ldrh	r3, [r7, #8]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad4:	69fa      	ldr	r2, [r7, #28]
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f89c 	bl	8004c16 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e012      	b.n	8004b0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae8:	893b      	ldrh	r3, [r7, #8]
 8004aea:	b2da      	uxtb	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2200      	movs	r2, #0
 8004afa:	2140      	movs	r1, #64	@ 0x40
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f831 	bl	8004b64 <I2C_WaitOnFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e000      	b.n	8004b0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	80002000 	.word	0x80002000

08004b1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d103      	bne.n	8004b3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2200      	movs	r2, #0
 8004b38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d007      	beq.n	8004b58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699a      	ldr	r2, [r3, #24]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	619a      	str	r2, [r3, #24]
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b74:	e03b      	b.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 f8d6 	bl	8004d2c <I2C_IsErrorOccurred>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e041      	b.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d02d      	beq.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fe fe8f 	bl	80038b4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d122      	bne.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	79fb      	ldrb	r3, [r7, #7]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d113      	bne.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bca:	f043 0220 	orr.w	r2, r3, #32
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e00f      	b.n	8004c0e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d0b4      	beq.n	8004b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c22:	e033      	b.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f87f 	bl	8004d2c <I2C_IsErrorOccurred>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e031      	b.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3e:	d025      	beq.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c40:	f7fe fe38 	bl	80038b4 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d302      	bcc.n	8004c56 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11a      	bne.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d013      	beq.n	8004c8c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c68:	f043 0220 	orr.w	r2, r3, #32
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e007      	b.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d1c4      	bne.n	8004c24 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cb0:	e02f      	b.n	8004d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f838 	bl	8004d2c <I2C_IsErrorOccurred>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e02d      	b.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fe fdf5 	bl	80038b4 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11a      	bne.n	8004d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d013      	beq.n	8004d12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cee:	f043 0220 	orr.w	r2, r3, #32
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e007      	b.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d1c8      	bne.n	8004cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d068      	beq.n	8004e2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2210      	movs	r2, #16
 8004d5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d60:	e049      	b.n	8004df6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d045      	beq.n	8004df6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fe fda3 	bl	80038b4 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_IsErrorOccurred+0x54>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d13a      	bne.n	8004df6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004da2:	d121      	bne.n	8004de8 <I2C_IsErrorOccurred+0xbc>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004daa:	d01d      	beq.n	8004de8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	2b20      	cmp	r3, #32
 8004db0:	d01a      	beq.n	8004de8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004dc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dc2:	f7fe fd77 	bl	80038b4 <HAL_GetTick>
 8004dc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dc8:	e00e      	b.n	8004de8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004dca:	f7fe fd73 	bl	80038b4 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b19      	cmp	r3, #25
 8004dd6:	d907      	bls.n	8004de8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004dd8:	6a3b      	ldr	r3, [r7, #32]
 8004dda:	f043 0320 	orr.w	r3, r3, #32
 8004dde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004de6:	e006      	b.n	8004df6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d1e9      	bne.n	8004dca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b20      	cmp	r3, #32
 8004e02:	d003      	beq.n	8004e0c <I2C_IsErrorOccurred+0xe0>
 8004e04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0aa      	beq.n	8004d62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00b      	beq.n	8004e54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	f043 0301 	orr.w	r3, r3, #1
 8004e42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	f043 0308 	orr.w	r3, r3, #8
 8004e64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00b      	beq.n	8004e98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	f043 0302 	orr.w	r3, r3, #2
 8004e86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004e98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01c      	beq.n	8004eda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fe3b 	bl	8004b1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	6859      	ldr	r1, [r3, #4]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <I2C_IsErrorOccurred+0x1bc>)
 8004eb2:	400b      	ands	r3, r1
 8004eb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3728      	adds	r7, #40	@ 0x28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	fe00e800 	.word	0xfe00e800

08004eec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	607b      	str	r3, [r7, #4]
 8004ef6:	460b      	mov	r3, r1
 8004ef8:	817b      	strh	r3, [r7, #10]
 8004efa:	4613      	mov	r3, r2
 8004efc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004efe:	897b      	ldrh	r3, [r7, #10]
 8004f00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f04:	7a7b      	ldrb	r3, [r7, #9]
 8004f06:	041b      	lsls	r3, r3, #16
 8004f08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	0d5b      	lsrs	r3, r3, #21
 8004f26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004f2a:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <I2C_TransferConfig+0x60>)
 8004f2c:	430b      	orrs	r3, r1
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	ea02 0103 	and.w	r1, r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	03ff63ff 	.word	0x03ff63ff

08004f50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d138      	bne.n	8004fd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e032      	b.n	8004fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2224      	movs	r2, #36	@ 0x24
 8004f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0201 	bic.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004fa2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6819      	ldr	r1, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b085      	sub	sp, #20
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b20      	cmp	r3, #32
 8004ffa:	d139      	bne.n	8005070 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005006:	2302      	movs	r3, #2
 8005008:	e033      	b.n	8005072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2224      	movs	r2, #36	@ 0x24
 8005016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f022 0201 	bic.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005038:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	021b      	lsls	r3, r3, #8
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005070:	2302      	movs	r3, #2
  }
}
 8005072:	4618      	mov	r0, r3
 8005074:	3714      	adds	r7, #20
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005088:	2300      	movs	r3, #0
 800508a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01e      	beq.n	80050d0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <HAL_IPCC_Init+0x60>)
 8005094:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fd fe04 	bl	8002cb0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80050a8:	68b8      	ldr	r0, [r7, #8]
 80050aa:	f000 f85b 	bl	8005164 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f82c 	bl	8005118 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80050ce:	e001      	b.n	80050d4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	58000c00 	.word	0x58000c00

080050e4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	60f8      	str	r0, [r7, #12]
 80050ec:	60b9      	str	r1, [r7, #8]
 80050ee:	4613      	mov	r3, r2
 80050f0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	e00f      	b.n	8005146 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	4a0b      	ldr	r2, [pc, #44]	@ (800515c <IPCC_SetDefaultCallbacks+0x44>)
 8005130:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	3306      	adds	r3, #6
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <IPCC_SetDefaultCallbacks+0x48>)
 800513e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2b05      	cmp	r3, #5
 800514a:	d9ec      	bls.n	8005126 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800514c:	bf00      	nop
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	080050e5 	.word	0x080050e5
 8005160:	080050ff 	.word	0x080050ff

08005164 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005178:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	223f      	movs	r2, #63	@ 0x3f
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a04      	ldr	r2, [pc, #16]	@ (80051a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519a:	6013      	str	r3, [r2, #0]
}
 800519c:	bf00      	nop
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	58000400 	.word	0x58000400

080051ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80051b0:	4b04      	ldr	r3, [pc, #16]	@ (80051c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	58000400 	.word	0x58000400

080051c8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80051cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80051d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051da:	d101      	bne.n	80051e0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_RCC_HSE_Enable>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051fe:	6013      	str	r3, [r2, #0]
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <LL_RCC_HSE_Disable>:
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800520e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005218:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800521c:	6013      	str	r3, [r2, #0]
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_HSE_IsReady>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005236:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523a:	d101      	bne.n	8005240 <LL_RCC_HSE_IsReady+0x18>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <LL_RCC_HSE_IsReady+0x1a>
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <LL_RCC_HSI_Enable>:
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800525a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525e:	6013      	str	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <LL_RCC_HSI_Disable>:
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800526e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800527c:	6013      	str	r3, [r2, #0]
}
 800527e:	bf00      	nop
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_RCC_HSI_IsReady>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529a:	d101      	bne.n	80052a0 <LL_RCC_HSI_IsReady+0x18>
 800529c:	2301      	movs	r3, #1
 800529e:	e000      	b.n	80052a2 <LL_RCC_HSI_IsReady+0x1a>
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_HSI_SetCalibTrimming>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052c6:	4313      	orrs	r3, r2
 80052c8:	604b      	str	r3, [r1, #4]
}
 80052ca:	bf00      	nop
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <LL_RCC_HSI48_Enable>:
{
 80052d6:	b480      	push	{r7}
 80052d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80052da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80052ee:	bf00      	nop
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <LL_RCC_HSI48_Disable>:
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005300:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_RCC_HSI48_IsReady>:
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800531e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005322:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b02      	cmp	r3, #2
 800532c:	d101      	bne.n	8005332 <LL_RCC_HSI48_IsReady+0x18>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <LL_RCC_HSI48_IsReady+0x1a>
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <LL_RCC_LSE_Enable>:
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800534a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800534e:	f043 0301 	orr.w	r3, r3, #1
 8005352:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005356:	bf00      	nop
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <LL_RCC_LSE_Disable>:
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <LL_RCC_LSE_EnableBypass>:
{
 8005382:	b480      	push	{r7}
 8005384:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800538a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800538e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800539a:	bf00      	nop
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <LL_RCC_LSE_DisableBypass>:
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053b4:	f023 0304 	bic.w	r3, r3, #4
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_LSE_IsReady>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d101      	bne.n	80053de <LL_RCC_LSE_IsReady+0x18>
 80053da:	2301      	movs	r3, #1
 80053dc:	e000      	b.n	80053e0 <LL_RCC_LSE_IsReady+0x1a>
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <LL_RCC_LSI1_Enable>:
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80053ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053fa:	f043 0301 	orr.w	r3, r3, #1
 80053fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005402:	bf00      	nop
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_RCC_LSI1_Disable>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005424:	bf00      	nop
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <LL_RCC_LSI1_IsReady>:
{
 800542e:	b480      	push	{r7}
 8005430:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005436:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b02      	cmp	r3, #2
 8005440:	d101      	bne.n	8005446 <LL_RCC_LSI1_IsReady+0x18>
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <LL_RCC_LSI1_IsReady+0x1a>
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_RCC_LSI2_Enable>:
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800545e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005462:	f043 0304 	orr.w	r3, r3, #4
 8005466:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800546a:	bf00      	nop
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <LL_RCC_LSI2_Disable>:
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005478:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800547c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005480:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800548c:	bf00      	nop
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <LL_RCC_LSI2_IsReady>:
{
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800549e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d101      	bne.n	80054ae <LL_RCC_LSI2_IsReady+0x18>
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <LL_RCC_LSI2_IsReady+0x1a>
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_LSI2_SetTrimming>:
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	021b      	lsls	r3, r3, #8
 80054d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054d6:	4313      	orrs	r3, r2
 80054d8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80054dc:	bf00      	nop
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <LL_RCC_MSI_Enable>:
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80054ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054f6:	f043 0301 	orr.w	r3, r3, #1
 80054fa:	6013      	str	r3, [r2, #0]
}
 80054fc:	bf00      	nop
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_RCC_MSI_Disable>:
{
 8005506:	b480      	push	{r7}
 8005508:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005514:	f023 0301 	bic.w	r3, r3, #1
 8005518:	6013      	str	r3, [r2, #0]
}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_RCC_MSI_IsReady>:
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b02      	cmp	r3, #2
 8005534:	d101      	bne.n	800553a <LL_RCC_MSI_IsReady+0x16>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <LL_RCC_MSI_IsReady+0x18>
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_RCC_MSI_SetRange>:
{
 8005546:	b480      	push	{r7}
 8005548:	b083      	sub	sp, #12
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800554e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4313      	orrs	r3, r2
 8005560:	600b      	str	r3, [r1, #0]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <LL_RCC_MSI_GetRange>:
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800557e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2bb0      	cmp	r3, #176	@ 0xb0
 8005584:	d901      	bls.n	800558a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005586:	23b0      	movs	r3, #176	@ 0xb0
 8005588:	607b      	str	r3, [r7, #4]
  return msiRange;
 800558a:	687b      	ldr	r3, [r7, #4]
}
 800558c:	4618      	mov	r0, r3
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055b2:	4313      	orrs	r3, r2
 80055b4:	604b      	str	r3, [r1, #4]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <LL_RCC_SetSysClkSource>:
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80055ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f023 0203 	bic.w	r2, r3, #3
 80055d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4313      	orrs	r3, r2
 80055dc:	608b      	str	r3, [r1, #8]
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <LL_RCC_GetSysClkSource>:
{
 80055ea:	b480      	push	{r7}
 80055ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80055ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f003 030c 	and.w	r3, r3, #12
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <LL_RCC_SetAHBPrescaler>:
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800560a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4313      	orrs	r3, r2
 800561c:	608b      	str	r3, [r1, #8]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <LL_C2_RCC_SetAHBPrescaler>:
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005636:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800563a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800563e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4313      	orrs	r3, r2
 8005646:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <LL_RCC_SetAHB4Prescaler>:
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800565e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005662:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005666:	f023 020f 	bic.w	r2, r3, #15
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <LL_RCC_SetAPB1Prescaler>:
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <LL_RCC_SetAPB2Prescaler>:
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80056b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	608b      	str	r3, [r1, #8]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <LL_RCC_GetAHBPrescaler>:
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80056d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <LL_RCC_GetAHB4Prescaler>:
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80056f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <LL_RCC_GetAPB1Prescaler>:
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800570c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_RCC_GetAPB2Prescaler>:
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800572e:	4618      	mov	r0, r3
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_RCC_PLL_Enable>:
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800573c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005746:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800574a:	6013      	str	r3, [r2, #0]
}
 800574c:	bf00      	nop
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <LL_RCC_PLL_Disable>:
{
 8005756:	b480      	push	{r7}
 8005758:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800575a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005768:	6013      	str	r3, [r2, #0]
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <LL_RCC_PLL_IsReady>:
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005786:	d101      	bne.n	800578c <LL_RCC_PLL_IsReady+0x18>
 8005788:	2301      	movs	r3, #1
 800578a:	e000      	b.n	800578e <LL_RCC_PLL_IsReady+0x1a>
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <LL_RCC_PLL_GetN>:
{
 8005798:	b480      	push	{r7}
 800579a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	0a1b      	lsrs	r3, r3, #8
 80057a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <LL_RCC_PLL_GetR>:
{
 80057b2:	b480      	push	{r7}
 80057b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80057b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <LL_RCC_PLL_GetDivider>:
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80057ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80057d8:	4618      	mov	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <LL_RCC_PLL_GetMainSource>:
{
 80057e2:	b480      	push	{r7}
 80057e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80057e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0303 	and.w	r3, r3, #3
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <LL_RCC_IsActiveFlag_HPRE>:
{
 80057fa:	b480      	push	{r7}
 80057fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80057fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800580c:	d101      	bne.n	8005812 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800580e:	2301      	movs	r3, #1
 8005810:	e000      	b.n	8005814 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800581e:	b480      	push	{r7}
 8005820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005826:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800582a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800582e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005832:	d101      	bne.n	8005838 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005834:	2301      	movs	r3, #1
 8005836:	e000      	b.n	800583a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800584c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d101      	bne.n	800585e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800586a:	b480      	push	{r7}
 800586c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800586e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800587c:	d101      	bne.n	8005882 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800588e:	b480      	push	{r7}
 8005890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800589c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058a0:	d101      	bne.n	80058a6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80058a2:	2301      	movs	r3, #1
 80058a4:	e000      	b.n	80058a8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
	...

080058b4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b08d      	sub	sp, #52	@ 0x34
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e363      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 808d 	beq.w	80059ee <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058d4:	f7ff fe89 	bl	80055ea <LL_RCC_GetSysClkSource>
 80058d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80058da:	f7ff ff82 	bl	80057e2 <LL_RCC_PLL_GetMainSource>
 80058de:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x3e>
 80058e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d147      	bne.n	800597c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d144      	bne.n	800597c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e347      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005902:	f7ff fe34 	bl	800556e <LL_RCC_MSI_GetRange>
 8005906:	4603      	mov	r3, r0
 8005908:	429c      	cmp	r4, r3
 800590a:	d914      	bls.n	8005936 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	4618      	mov	r0, r3
 8005912:	f000 fd2f 	bl	8006374 <RCC_SetFlashLatencyFromMSIRange>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e336      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff fe0e 	bl	8005546 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff fe32 	bl	8005598 <LL_RCC_MSI_SetCalibTrimming>
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff fe03 	bl	8005546 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fe27 	bl	8005598 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fd10 	bl	8006374 <RCC_SetFlashLatencyFromMSIRange>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e317      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800595e:	f000 fcc9 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8005962:	4603      	mov	r3, r0
 8005964:	4aa4      	ldr	r2, [pc, #656]	@ (8005bf8 <HAL_RCC_OscConfig+0x344>)
 8005966:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005968:	4ba4      	ldr	r3, [pc, #656]	@ (8005bfc <HAL_RCC_OscConfig+0x348>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd ff53 	bl	8003818 <HAL_InitTick>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d039      	beq.n	80059ec <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e308      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01e      	beq.n	80059c2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005984:	f7ff fdb0 	bl	80054e8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005988:	f7fd ff94 	bl	80038b4 <HAL_GetTick>
 800598c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005990:	f7fd ff90 	bl	80038b4 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e2f5      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80059a2:	f7ff fdbf 	bl	8005524 <LL_RCC_MSI_IsReady>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0f1      	beq.n	8005990 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fdc8 	bl	8005546 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff fdec 	bl	8005598 <LL_RCC_MSI_SetCalibTrimming>
 80059c0:	e015      	b.n	80059ee <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059c2:	f7ff fda0 	bl	8005506 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059c6:	f7fd ff75 	bl	80038b4 <HAL_GetTick>
 80059ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059ce:	f7fd ff71 	bl	80038b4 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e2d6      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80059e0:	f7ff fda0 	bl	8005524 <LL_RCC_MSI_IsReady>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1f1      	bne.n	80059ce <HAL_RCC_OscConfig+0x11a>
 80059ea:	e000      	b.n	80059ee <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80059ec:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d047      	beq.n	8005a8a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059fa:	f7ff fdf6 	bl	80055ea <LL_RCC_GetSysClkSource>
 80059fe:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a00:	f7ff feef 	bl	80057e2 <LL_RCC_PLL_GetMainSource>
 8005a04:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_OscConfig+0x164>
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d108      	bne.n	8005a24 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d105      	bne.n	8005a24 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d134      	bne.n	8005a8a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e2b4      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2c:	d102      	bne.n	8005a34 <HAL_RCC_OscConfig+0x180>
 8005a2e:	f7ff fbdd 	bl	80051ec <LL_RCC_HSE_Enable>
 8005a32:	e001      	b.n	8005a38 <HAL_RCC_OscConfig+0x184>
 8005a34:	f7ff fbe9 	bl	800520a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a40:	f7fd ff38 	bl	80038b4 <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a48:	f7fd ff34 	bl	80038b4 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	@ 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e299      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005a5a:	f7ff fbe5 	bl	8005228 <LL_RCC_HSE_IsReady>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f1      	beq.n	8005a48 <HAL_RCC_OscConfig+0x194>
 8005a64:	e011      	b.n	8005a8a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a66:	f7fd ff25 	bl	80038b4 <HAL_GetTick>
 8005a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a6e:	f7fd ff21 	bl	80038b4 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b64      	cmp	r3, #100	@ 0x64
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e286      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005a80:	f7ff fbd2 	bl	8005228 <LL_RCC_HSE_IsReady>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f1      	bne.n	8005a6e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04c      	beq.n	8005b30 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a96:	f7ff fda8 	bl	80055ea <LL_RCC_GetSysClkSource>
 8005a9a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a9c:	f7ff fea1 	bl	80057e2 <LL_RCC_PLL_GetMainSource>
 8005aa0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d005      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x200>
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2b0c      	cmp	r3, #12
 8005aac:	d10e      	bne.n	8005acc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d10b      	bne.n	8005acc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e266      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7ff fbf1 	bl	80052ac <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005aca:	e031      	b.n	8005b30 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ad4:	f7ff fbba 	bl	800524c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad8:	f7fd feec 	bl	80038b4 <HAL_GetTick>
 8005adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fee8 	bl	80038b4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e24d      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005af2:	f7ff fbc9 	bl	8005288 <LL_RCC_HSI_IsReady>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f1      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fbd3 	bl	80052ac <LL_RCC_HSI_SetCalibTrimming>
 8005b06:	e013      	b.n	8005b30 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b08:	f7ff fbaf 	bl	800526a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0c:	f7fd fed2 	bl	80038b4 <HAL_GetTick>
 8005b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b14:	f7fd fece 	bl	80038b4 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e233      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005b26:	f7ff fbaf 	bl	8005288 <LL_RCC_HSI_IsReady>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f1      	bne.n	8005b14 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 80a3 	beq.w	8005c90 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d076      	beq.n	8005c40 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d046      	beq.n	8005bec <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005b5e:	f7ff fc66 	bl	800542e <LL_RCC_LSI1_IsReady>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d113      	bne.n	8005b90 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005b68:	f7ff fc3f 	bl	80053ea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b6c:	f7fd fea2 	bl	80038b4 <HAL_GetTick>
 8005b70:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005b74:	f7fd fe9e 	bl	80038b4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e203      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005b86:	f7ff fc52 	bl	800542e <LL_RCC_LSI1_IsReady>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d0f1      	beq.n	8005b74 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005b90:	f7ff fc5f 	bl	8005452 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fd fe8e 	bl	80038b4 <HAL_GetTick>
 8005b98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005b9c:	f7fd fe8a 	bl	80038b4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e1ef      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005bae:	f7ff fc72 	bl	8005496 <LL_RCC_LSI2_IsReady>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f1      	beq.n	8005b9c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fc7c 	bl	80054ba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005bc2:	f7ff fc23 	bl	800540c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fd fe75 	bl	80038b4 <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005bce:	f7fd fe71 	bl	80038b4 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e1d6      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005be0:	f7ff fc25 	bl	800542e <LL_RCC_LSI1_IsReady>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f1      	bne.n	8005bce <HAL_RCC_OscConfig+0x31a>
 8005bea:	e051      	b.n	8005c90 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005bec:	f7ff fbfd 	bl	80053ea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fd fe60 	bl	80038b4 <HAL_GetTick>
 8005bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005bf6:	e00c      	b.n	8005c12 <HAL_RCC_OscConfig+0x35e>
 8005bf8:	20000008 	.word	0x20000008
 8005bfc:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c00:	f7fd fe58 	bl	80038b4 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e1bd      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005c12:	f7ff fc0c 	bl	800542e <LL_RCC_LSI1_IsReady>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f1      	beq.n	8005c00 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005c1c:	f7ff fc2a 	bl	8005474 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c22:	f7fd fe47 	bl	80038b4 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e1ac      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005c34:	f7ff fc2f 	bl	8005496 <LL_RCC_LSI2_IsReady>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f1      	bne.n	8005c22 <HAL_RCC_OscConfig+0x36e>
 8005c3e:	e027      	b.n	8005c90 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005c40:	f7ff fc18 	bl	8005474 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c44:	f7fd fe36 	bl	80038b4 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005c4a:	e008      	b.n	8005c5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005c4c:	f7fd fe32 	bl	80038b4 <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e197      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005c5e:	f7ff fc1a 	bl	8005496 <LL_RCC_LSI2_IsReady>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1f1      	bne.n	8005c4c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005c68:	f7ff fbd0 	bl	800540c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fd fe22 	bl	80038b4 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005c74:	f7fd fe1e 	bl	80038b4 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e183      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005c86:	f7ff fbd2 	bl	800542e <LL_RCC_LSI1_IsReady>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f1      	bne.n	8005c74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05b      	beq.n	8005d54 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9c:	4ba7      	ldr	r3, [pc, #668]	@ (8005f3c <HAL_RCC_OscConfig+0x688>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d114      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005ca8:	f7ff fa70 	bl	800518c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cac:	f7fd fe02 	bl	80038b4 <HAL_GetTick>
 8005cb0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cb2:	e008      	b.n	8005cc6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb4:	f7fd fdfe 	bl	80038b4 <HAL_GetTick>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d901      	bls.n	8005cc6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	e163      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cc6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f3c <HAL_RCC_OscConfig+0x688>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d0f0      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x42c>
 8005cda:	f7ff fb30 	bl	800533e <LL_RCC_LSE_Enable>
 8005cde:	e00c      	b.n	8005cfa <HAL_RCC_OscConfig+0x446>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d104      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x43e>
 8005ce8:	f7ff fb4b 	bl	8005382 <LL_RCC_LSE_EnableBypass>
 8005cec:	f7ff fb27 	bl	800533e <LL_RCC_LSE_Enable>
 8005cf0:	e003      	b.n	8005cfa <HAL_RCC_OscConfig+0x446>
 8005cf2:	f7ff fb35 	bl	8005360 <LL_RCC_LSE_Disable>
 8005cf6:	f7ff fb55 	bl	80053a4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d014      	beq.n	8005d2c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d02:	f7fd fdd7 	bl	80038b4 <HAL_GetTick>
 8005d06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d08:	e00a      	b.n	8005d20 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d0a:	f7fd fdd3 	bl	80038b4 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d901      	bls.n	8005d20 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e136      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005d20:	f7ff fb51 	bl	80053c6 <LL_RCC_LSE_IsReady>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCC_OscConfig+0x456>
 8005d2a:	e013      	b.n	8005d54 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2c:	f7fd fdc2 	bl	80038b4 <HAL_GetTick>
 8005d30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d32:	e00a      	b.n	8005d4a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d34:	f7fd fdbe 	bl	80038b4 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e121      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005d4a:	f7ff fb3c 	bl	80053c6 <LL_RCC_LSE_IsReady>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1ef      	bne.n	8005d34 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d02c      	beq.n	8005dba <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d014      	beq.n	8005d92 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005d68:	f7ff fab5 	bl	80052d6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fd fda2 	bl	80038b4 <HAL_GetTick>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d74:	f7fd fd9e 	bl	80038b4 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e103      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005d86:	f7ff fac8 	bl	800531a <LL_RCC_HSI48_IsReady>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f1      	beq.n	8005d74 <HAL_RCC_OscConfig+0x4c0>
 8005d90:	e013      	b.n	8005dba <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d92:	f7ff fab1 	bl	80052f8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d96:	f7fd fd8d 	bl	80038b4 <HAL_GetTick>
 8005d9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d9e:	f7fd fd89 	bl	80038b4 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e0ee      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005db0:	f7ff fab3 	bl	800531a <LL_RCC_HSI48_IsReady>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f1      	bne.n	8005d9e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80e4 	beq.w	8005f8c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dc4:	f7ff fc11 	bl	80055ea <LL_RCC_GetSysClkSource>
 8005dc8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	f040 80b4 	bne.w	8005f44 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 0203 	and.w	r2, r3, #3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d123      	bne.n	8005e32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d11c      	bne.n	8005e32 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0a1b      	lsrs	r3, r3, #8
 8005dfc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d114      	bne.n	8005e32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d10d      	bne.n	8005e32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d106      	bne.n	8005e32 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d05d      	beq.n	8005eee <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b0c      	cmp	r3, #12
 8005e36:	d058      	beq.n	8005eea <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d001      	beq.n	8005e4a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e0a1      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e4a:	f7ff fc84 	bl	8005756 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e4e:	f7fd fd31 	bl	80038b4 <HAL_GetTick>
 8005e52:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e54:	e008      	b.n	8005e68 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e56:	f7fd fd2d 	bl	80038b4 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d901      	bls.n	8005e68 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e092      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1ef      	bne.n	8005e56 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <HAL_RCC_OscConfig+0x68c>)
 8005e7e:	4013      	ands	r3, r2
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e88:	4311      	orrs	r1, r2
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e8e:	0212      	lsls	r2, r2, #8
 8005e90:	4311      	orrs	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e96:	4311      	orrs	r1, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005e9c:	4311      	orrs	r1, r2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005eac:	f7ff fc44 	bl	8005738 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ec0:	f7fd fcf8 	bl	80038b4 <HAL_GetTick>
 8005ec4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ec8:	f7fd fcf4 	bl	80038b4 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e059      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d0ef      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ee8:	e050      	b.n	8005f8c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e04f      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d147      	bne.n	8005f8c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005efc:	f7ff fc1c 	bl	8005738 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f10:	f7fd fcd0 	bl	80038b4 <HAL_GetTick>
 8005f14:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fd fccc 	bl	80038b4 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e031      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ef      	beq.n	8005f18 <HAL_RCC_OscConfig+0x664>
 8005f38:	e028      	b.n	8005f8c <HAL_RCC_OscConfig+0x6d8>
 8005f3a:	bf00      	nop
 8005f3c:	58000400 	.word	0x58000400
 8005f40:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b0c      	cmp	r3, #12
 8005f48:	d01e      	beq.n	8005f88 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f4a:	f7ff fc04 	bl	8005756 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fd fcb1 	bl	80038b4 <HAL_GetTick>
 8005f52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f56:	f7fd fcad 	bl	80038b4 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e012      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ef      	bne.n	8005f56 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005f76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f7a:	68da      	ldr	r2, [r3, #12]
 8005f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f80:	4b05      	ldr	r3, [pc, #20]	@ (8005f98 <HAL_RCC_OscConfig+0x6e4>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	60cb      	str	r3, [r1, #12]
 8005f86:	e001      	b.n	8005f8c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3734      	adds	r7, #52	@ 0x34
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	eefefffc 	.word	0xeefefffc

08005f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e12d      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb0:	4b98      	ldr	r3, [pc, #608]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d91b      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fbe:	4b95      	ldr	r3, [pc, #596]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f023 0207 	bic.w	r2, r3, #7
 8005fc6:	4993      	ldr	r1, [pc, #588]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fce:	f7fd fc71 	bl	80038b4 <HAL_GetTick>
 8005fd2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fd6:	f7fd fc6d 	bl	80038b4 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e111      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d1ef      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d016      	beq.n	8006030 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f7ff fafb 	bl	8005602 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800600c:	f7fd fc52 	bl	80038b4 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006014:	f7fd fc4e 	bl	80038b4 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e0f2      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006026:	f7ff fbe8 	bl	80057fa <LL_RCC_IsActiveFlag_HPRE>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f1      	beq.n	8006014 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d016      	beq.n	800606a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	4618      	mov	r0, r3
 8006042:	f7ff faf2 	bl	800562a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006046:	f7fd fc35 	bl	80038b4 <HAL_GetTick>
 800604a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800604c:	e008      	b.n	8006060 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800604e:	f7fd fc31 	bl	80038b4 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d901      	bls.n	8006060 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800605c:	2303      	movs	r3, #3
 800605e:	e0d5      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006060:	f7ff fbdd 	bl	800581e <LL_RCC_IsActiveFlag_C2HPRE>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f1      	beq.n	800604e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	4618      	mov	r0, r3
 800607c:	f7ff faeb 	bl	8005656 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006080:	f7fd fc18 	bl	80038b4 <HAL_GetTick>
 8006084:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006088:	f7fd fc14 	bl	80038b4 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e0b8      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800609a:	f7ff fbd3 	bl	8005844 <LL_RCC_IsActiveFlag_SHDHPRE>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f1      	beq.n	8006088 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d016      	beq.n	80060de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fae5 	bl	8005684 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060ba:	f7fd fbfb 	bl	80038b4 <HAL_GetTick>
 80060be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060c2:	f7fd fbf7 	bl	80038b4 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e09b      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80060d4:	f7ff fbc9 	bl	800586a <LL_RCC_IsActiveFlag_PPRE1>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f1      	beq.n	80060c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d017      	beq.n	800611a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fadb 	bl	80056ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060f6:	f7fd fbdd 	bl	80038b4 <HAL_GetTick>
 80060fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060fe:	f7fd fbd9 	bl	80038b4 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e07d      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006110:	f7ff fbbd 	bl	800588e <LL_RCC_IsActiveFlag_PPRE2>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f1      	beq.n	80060fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d043      	beq.n	80061ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b02      	cmp	r3, #2
 800612c:	d106      	bne.n	800613c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800612e:	f7ff f87b 	bl	8005228 <LL_RCC_HSE_IsReady>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11e      	bne.n	8006176 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e067      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d106      	bne.n	8006152 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006144:	f7ff fb16 	bl	8005774 <LL_RCC_PLL_IsReady>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d113      	bne.n	8006176 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e05c      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d106      	bne.n	8006168 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800615a:	f7ff f9e3 	bl	8005524 <LL_RCC_MSI_IsReady>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d108      	bne.n	8006176 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e051      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006168:	f7ff f88e 	bl	8005288 <LL_RCC_HSI_IsReady>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e04a      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fa21 	bl	80055c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006180:	f7fd fb98 	bl	80038b4 <HAL_GetTick>
 8006184:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	e00a      	b.n	800619e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006188:	f7fd fb94 	bl	80038b4 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006196:	4293      	cmp	r3, r2
 8006198:	d901      	bls.n	800619e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e036      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800619e:	f7ff fa24 	bl	80055ea <LL_RCC_GetSysClkSource>
 80061a2:	4602      	mov	r2, r0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d1ec      	bne.n	8006188 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061ae:	4b19      	ldr	r3, [pc, #100]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d21b      	bcs.n	80061f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061bc:	4b15      	ldr	r3, [pc, #84]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f023 0207 	bic.w	r2, r3, #7
 80061c4:	4913      	ldr	r1, [pc, #76]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061cc:	f7fd fb72 	bl	80038b4 <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80061d4:	f7fd fb6e 	bl	80038b4 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e012      	b.n	800620c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006214 <HAL_RCC_ClockConfig+0x278>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0307 	and.w	r3, r3, #7
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d1ef      	bne.n	80061d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061f4:	f000 f87e 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4a07      	ldr	r2, [pc, #28]	@ (8006218 <HAL_RCC_ClockConfig+0x27c>)
 80061fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80061fe:	f7fd fb65 	bl	80038cc <HAL_GetTickPrio>
 8006202:	4603      	mov	r3, r0
 8006204:	4618      	mov	r0, r3
 8006206:	f7fd fb07 	bl	8003818 <HAL_InitTick>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	58004000 	.word	0x58004000
 8006218:	20000008 	.word	0x20000008

0800621c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800621c:	b590      	push	{r4, r7, lr}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006222:	f7ff f9e2 	bl	80055ea <LL_RCC_GetSysClkSource>
 8006226:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800622e:	f7ff f99e 	bl	800556e <LL_RCC_MSI_GetRange>
 8006232:	4603      	mov	r3, r0
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	4a2b      	ldr	r2, [pc, #172]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800623c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006240:	60fb      	str	r3, [r7, #12]
 8006242:	e04b      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b04      	cmp	r3, #4
 8006248:	d102      	bne.n	8006250 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800624a:	4b28      	ldr	r3, [pc, #160]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xd0>)
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	e045      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b08      	cmp	r3, #8
 8006254:	d10a      	bne.n	800626c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006256:	f7fe ffb7 	bl	80051c8 <LL_RCC_HSE_IsEnabledDiv2>
 800625a:	4603      	mov	r3, r0
 800625c:	2b01      	cmp	r3, #1
 800625e:	d102      	bne.n	8006266 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006260:	4b22      	ldr	r3, [pc, #136]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	e03a      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006266:	4b22      	ldr	r3, [pc, #136]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	e037      	b.n	80062dc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800626c:	f7ff fab9 	bl	80057e2 <LL_RCC_PLL_GetMainSource>
 8006270:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d003      	beq.n	8006280 <HAL_RCC_GetSysClockFreq+0x64>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b03      	cmp	r3, #3
 800627c:	d003      	beq.n	8006286 <HAL_RCC_GetSysClockFreq+0x6a>
 800627e:	e00d      	b.n	800629c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006280:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006282:	60bb      	str	r3, [r7, #8]
        break;
 8006284:	e015      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006286:	f7fe ff9f 	bl	80051c8 <LL_RCC_HSE_IsEnabledDiv2>
 800628a:	4603      	mov	r3, r0
 800628c:	2b01      	cmp	r3, #1
 800628e:	d102      	bne.n	8006296 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006290:	4b16      	ldr	r3, [pc, #88]	@ (80062ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8006292:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006294:	e00d      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006296:	4b16      	ldr	r3, [pc, #88]	@ (80062f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006298:	60bb      	str	r3, [r7, #8]
        break;
 800629a:	e00a      	b.n	80062b2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800629c:	f7ff f967 	bl	800556e <LL_RCC_MSI_GetRange>
 80062a0:	4603      	mov	r3, r0
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 030f 	and.w	r3, r3, #15
 80062a8:	4a0f      	ldr	r2, [pc, #60]	@ (80062e8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80062aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062ae:	60bb      	str	r3, [r7, #8]
        break;
 80062b0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80062b2:	f7ff fa71 	bl	8005798 <LL_RCC_PLL_GetN>
 80062b6:	4602      	mov	r2, r0
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	fb03 f402 	mul.w	r4, r3, r2
 80062be:	f7ff fa84 	bl	80057ca <LL_RCC_PLL_GetDivider>
 80062c2:	4603      	mov	r3, r0
 80062c4:	091b      	lsrs	r3, r3, #4
 80062c6:	3301      	adds	r3, #1
 80062c8:	fbb4 f4f3 	udiv	r4, r4, r3
 80062cc:	f7ff fa71 	bl	80057b2 <LL_RCC_PLL_GetR>
 80062d0:	4603      	mov	r3, r0
 80062d2:	0f5b      	lsrs	r3, r3, #29
 80062d4:	3301      	adds	r3, #1
 80062d6:	fbb4 f3f3 	udiv	r3, r4, r3
 80062da:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80062dc:	68fb      	ldr	r3, [r7, #12]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	080165f8 	.word	0x080165f8
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	01e84800 	.word	0x01e84800

080062f4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062f4:	b598      	push	{r3, r4, r7, lr}
 80062f6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80062f8:	f7ff ff90 	bl	800621c <HAL_RCC_GetSysClockFreq>
 80062fc:	4604      	mov	r4, r0
 80062fe:	f7ff f9e9 	bl	80056d4 <LL_RCC_GetAHBPrescaler>
 8006302:	4603      	mov	r3, r0
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	4a03      	ldr	r2, [pc, #12]	@ (8006318 <HAL_RCC_GetHCLKFreq+0x24>)
 800630c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006310:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd98      	pop	{r3, r4, r7, pc}
 8006318:	08016598 	.word	0x08016598

0800631c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800631c:	b598      	push	{r3, r4, r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006320:	f7ff ffe8 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006324:	4604      	mov	r4, r0
 8006326:	f7ff f9ef 	bl	8005708 <LL_RCC_GetAPB1Prescaler>
 800632a:	4603      	mov	r3, r0
 800632c:	0a1b      	lsrs	r3, r3, #8
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	4a04      	ldr	r2, [pc, #16]	@ (8006344 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd98      	pop	{r3, r4, r7, pc}
 8006344:	080165d8 	.word	0x080165d8

08006348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006348:	b598      	push	{r3, r4, r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800634c:	f7ff ffd2 	bl	80062f4 <HAL_RCC_GetHCLKFreq>
 8006350:	4604      	mov	r4, r0
 8006352:	f7ff f9e5 	bl	8005720 <LL_RCC_GetAPB2Prescaler>
 8006356:	4603      	mov	r3, r0
 8006358:	0adb      	lsrs	r3, r3, #11
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	4a04      	ldr	r2, [pc, #16]	@ (8006370 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006364:	f003 031f 	and.w	r3, r3, #31
 8006368:	fa24 f303 	lsr.w	r3, r4, r3
}
 800636c:	4618      	mov	r0, r3
 800636e:	bd98      	pop	{r3, r4, r7, pc}
 8006370:	080165d8 	.word	0x080165d8

08006374 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006374:	b590      	push	{r4, r7, lr}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2bb0      	cmp	r3, #176	@ 0xb0
 8006380:	d903      	bls.n	800638a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006382:	4b15      	ldr	r3, [pc, #84]	@ (80063d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e007      	b.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	4a11      	ldr	r2, [pc, #68]	@ (80063d8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006398:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800639a:	f7ff f9a7 	bl	80056ec <LL_RCC_GetAHB4Prescaler>
 800639e:	4603      	mov	r3, r0
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	f003 030f 	and.w	r3, r3, #15
 80063a6:	4a0d      	ldr	r2, [pc, #52]	@ (80063dc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80063a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	@ (80063e0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	0c9c      	lsrs	r4, r3, #18
 80063be:	f7fe fef5 	bl	80051ac <HAL_PWREx_GetVoltageRange>
 80063c2:	4603      	mov	r3, r0
 80063c4:	4619      	mov	r1, r3
 80063c6:	4620      	mov	r0, r4
 80063c8:	f000 f80c 	bl	80063e4 <RCC_SetFlashLatency>
 80063cc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd90      	pop	{r4, r7, pc}
 80063d6:	bf00      	nop
 80063d8:	080165f8 	.word	0x080165f8
 80063dc:	08016598 	.word	0x08016598
 80063e0:	431bde83 	.word	0x431bde83

080063e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b093      	sub	sp, #76	@ 0x4c
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80063ee:	4b37      	ldr	r3, [pc, #220]	@ (80064cc <RCC_SetFlashLatency+0xe8>)
 80063f0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80063f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80063f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80063fa:	4a35      	ldr	r2, [pc, #212]	@ (80064d0 <RCC_SetFlashLatency+0xec>)
 80063fc:	f107 031c 	add.w	r3, r7, #28
 8006400:	ca07      	ldmia	r2, {r0, r1, r2}
 8006402:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006406:	4b33      	ldr	r3, [pc, #204]	@ (80064d4 <RCC_SetFlashLatency+0xf0>)
 8006408:	f107 040c 	add.w	r4, r7, #12
 800640c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800640e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006412:	2300      	movs	r3, #0
 8006414:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800641c:	d11a      	bne.n	8006454 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800641e:	2300      	movs	r3, #0
 8006420:	643b      	str	r3, [r7, #64]	@ 0x40
 8006422:	e013      	b.n	800644c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	3348      	adds	r3, #72	@ 0x48
 800642a:	443b      	add	r3, r7
 800642c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d807      	bhi.n	8006446 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	3348      	adds	r3, #72	@ 0x48
 800643c:	443b      	add	r3, r7
 800643e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006442:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8006444:	e020      	b.n	8006488 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006446:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006448:	3301      	adds	r3, #1
 800644a:	643b      	str	r3, [r7, #64]	@ 0x40
 800644c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800644e:	2b03      	cmp	r3, #3
 8006450:	d9e8      	bls.n	8006424 <RCC_SetFlashLatency+0x40>
 8006452:	e019      	b.n	8006488 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006454:	2300      	movs	r3, #0
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006458:	e013      	b.n	8006482 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	3348      	adds	r3, #72	@ 0x48
 8006460:	443b      	add	r3, r7
 8006462:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d807      	bhi.n	800647c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	3348      	adds	r3, #72	@ 0x48
 8006472:	443b      	add	r3, r7
 8006474:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006478:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800647a:	e005      	b.n	8006488 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800647c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647e:	3301      	adds	r3, #1
 8006480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006484:	2b02      	cmp	r3, #2
 8006486:	d9e8      	bls.n	800645a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006488:	4b13      	ldr	r3, [pc, #76]	@ (80064d8 <RCC_SetFlashLatency+0xf4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f023 0207 	bic.w	r2, r3, #7
 8006490:	4911      	ldr	r1, [pc, #68]	@ (80064d8 <RCC_SetFlashLatency+0xf4>)
 8006492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006498:	f7fd fa0c 	bl	80038b4 <HAL_GetTick>
 800649c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800649e:	e008      	b.n	80064b2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064a0:	f7fd fa08 	bl	80038b4 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e007      	b.n	80064c2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064b2:	4b09      	ldr	r3, [pc, #36]	@ (80064d8 <RCC_SetFlashLatency+0xf4>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064bc:	429a      	cmp	r2, r3
 80064be:	d1ef      	bne.n	80064a0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	374c      	adds	r7, #76	@ 0x4c
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd90      	pop	{r4, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	0801388c 	.word	0x0801388c
 80064d0:	0801389c 	.word	0x0801389c
 80064d4:	080138a8 	.word	0x080138a8
 80064d8:	58004000 	.word	0x58004000

080064dc <LL_RCC_LSE_IsEnabled>:
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80064e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d101      	bne.n	80064f4 <LL_RCC_LSE_IsEnabled+0x18>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <LL_RCC_LSE_IsEnabled+0x1a>
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <LL_RCC_LSE_IsReady>:
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d101      	bne.n	8006518 <LL_RCC_LSE_IsReady+0x18>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <LL_RCC_LSE_IsReady+0x1a>
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <LL_RCC_SetRFWKPClockSource>:
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006530:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006534:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006538:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <LL_RCC_SetSMPSClockSource>:
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800655c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655e:	f023 0203 	bic.w	r2, r3, #3
 8006562:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4313      	orrs	r3, r2
 800656a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <LL_RCC_SetSMPSPrescaler>:
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800658a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_RCC_SetUSARTClockSource>:
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b0:	f023 0203 	bic.w	r2, r3, #3
 80065b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <LL_RCC_SetLPUARTClockSource>:
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80065d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065dc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80065e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <LL_RCC_SetI2CClockSource>:
{
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006604:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800661c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <LL_RCC_SetLPTIMClockSource>:
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800663a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800663e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	0c1b      	lsrs	r3, r3, #16
 8006646:	041b      	lsls	r3, r3, #16
 8006648:	43db      	mvns	r3, r3
 800664a:	401a      	ands	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006654:	4313      	orrs	r3, r2
 8006656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <LL_RCC_SetSAIClockSource>:
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800666e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800667a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4313      	orrs	r3, r2
 8006682:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr

08006692 <LL_RCC_SetRNGClockSource>:
{
 8006692:	b480      	push	{r7}
 8006694:	b083      	sub	sp, #12
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800669a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80066a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <LL_RCC_SetCLK48ClockSource>:
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80066c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <LL_RCC_SetUSBClockSource>:
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b082      	sub	sp, #8
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7ff ffe3 	bl	80066be <LL_RCC_SetCLK48ClockSource>
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <LL_RCC_SetADCClockSource>:
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800670c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006710:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006714:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <LL_RCC_SetRTCClockSource>:
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4313      	orrs	r3, r2
 8006748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800674c:	bf00      	nop
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <LL_RCC_GetRTCClockSource>:
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8006768:	4618      	mov	r0, r3
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <LL_RCC_ForceBackupDomainReset>:
{
 8006772:	b480      	push	{r7}
 8006774:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800677a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800677e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006782:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006786:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800678a:	bf00      	nop
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800679c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80067ac:	bf00      	nop
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <LL_RCC_PLLSAI1_Enable>:
{
 80067b6:	b480      	push	{r7}
 80067b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80067c8:	6013      	str	r3, [r2, #0]
}
 80067ca:	bf00      	nop
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <LL_RCC_PLLSAI1_Disable>:
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80067d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80067e6:	6013      	str	r3, [r2, #0]
}
 80067e8:	bf00      	nop
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <LL_RCC_PLLSAI1_IsReady>:
{
 80067f2:	b480      	push	{r7}
 80067f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80067f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006800:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006804:	d101      	bne.n	800680a <LL_RCC_PLLSAI1_IsReady+0x18>
 8006806:	2301      	movs	r3, #1
 8006808:	e000      	b.n	800680c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b088      	sub	sp, #32
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800681e:	2300      	movs	r3, #0
 8006820:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006822:	2300      	movs	r3, #0
 8006824:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682e:	2b00      	cmp	r3, #0
 8006830:	d034      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006836:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800683a:	d021      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800683c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006840:	d81b      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006842:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006846:	d01d      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006848:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800684c:	d815      	bhi.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00b      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8006852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006856:	d110      	bne.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006866:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006868:	e00d      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f000 f947 	bl	8006b02 <RCCEx_PLLSAI1_ConfigNP>
 8006874:	4603      	mov	r3, r0
 8006876:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006878:	e005      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77fb      	strb	r3, [r7, #31]
        break;
 800687e:	e002      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006880:	bf00      	nop
 8006882:	e000      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006886:	7ffb      	ldrb	r3, [r7, #31]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fee8 	bl	8006666 <LL_RCC_SetSAIClockSource>
 8006896:	e001      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006898:	7ffb      	ldrb	r3, [r7, #31]
 800689a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d046      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80068a8:	f7ff ff56 	bl	8006758 <LL_RCC_GetRTCClockSource>
 80068ac:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d03c      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80068b8:	f7fe fc68 	bl	800518c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d105      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff ff30 	bl	800672c <LL_RCC_SetRTCClockSource>
 80068cc:	e02e      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80068ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068d6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80068d8:	f7ff ff4b 	bl	8006772 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80068dc:	f7ff ff5a 	bl	8006794 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	4313      	orrs	r3, r2
 80068ec:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80068ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80068f8:	f7ff fdf0 	bl	80064dc <LL_RCC_LSE_IsEnabled>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d114      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006902:	f7fc ffd7 	bl	80038b4 <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006908:	e00b      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800690a:	f7fc ffd3 	bl	80038b4 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006918:	4293      	cmp	r3, r2
 800691a:	d902      	bls.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	77fb      	strb	r3, [r7, #31]
              break;
 8006920:	e004      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006922:	f7ff fded 	bl	8006500 <LL_RCC_LSE_IsReady>
 8006926:	4603      	mov	r3, r0
 8006928:	2b01      	cmp	r3, #1
 800692a:	d1ee      	bne.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800692c:	7ffb      	ldrb	r3, [r7, #31]
 800692e:	77bb      	strb	r3, [r7, #30]
 8006930:	e001      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006932:	7ffb      	ldrb	r3, [r7, #31]
 8006934:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d004      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	4618      	mov	r0, r3
 8006948:	f7ff fe2a 	bl	80065a0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fe35 	bl	80065cc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	2b00      	cmp	r3, #0
 800696c:	d004      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006972:	4618      	mov	r0, r3
 8006974:	f7ff fe5d 	bl	8006632 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0320 	and.w	r3, r3, #32
 8006980:	2b00      	cmp	r3, #0
 8006982:	d004      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fe52 	bl	8006632 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff fe2a 	bl	80065f8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff fe1f 	bl	80065f8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d022      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7ff fe8d 	bl	80066ea <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069d8:	d107      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80069da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069e8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069f2:	d10b      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 f8dd 	bl	8006bb8 <RCCEx_PLLSAI1_ConfigNQ>
 80069fe:	4603      	mov	r3, r0
 8006a00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006a02:	7ffb      	ldrb	r3, [r7, #31]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006a08:	7ffb      	ldrb	r3, [r7, #31]
 8006a0a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d02b      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a20:	d008      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fe2a 	bl	8006692 <LL_RCC_SetRNGClockSource>
 8006a3e:	e00a      	b.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	f7ff fe21 	bl	8006692 <LL_RCC_SetRNGClockSource>
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff fe34 	bl	80066be <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006a5e:	d107      	bne.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006a6e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d022      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff fe3d 	bl	8006700 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a8e:	d107      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a9e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aa8:	d10b      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	3304      	adds	r3, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f8dd 	bl	8006c6e <RCCEx_PLLSAI1_ConfigNR>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006ab8:	7ffb      	ldrb	r3, [r7, #31]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006abe:	7ffb      	ldrb	r3, [r7, #31]
 8006ac0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fd26 	bl	8006524 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d009      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fd45 	bl	8006578 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fd2c 	bl	8006550 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006af8:	7fbb      	ldrb	r3, [r7, #30]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006b0e:	f7ff fe61 	bl	80067d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006b12:	f7fc fecf 	bl	80038b4 <HAL_GetTick>
 8006b16:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b18:	e009      	b.n	8006b2e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b1a:	f7fc fecb 	bl	80038b4 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d902      	bls.n	8006b2e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e004      	b.n	8006b38 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006b2e:	f7ff fe60 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1f0      	bne.n	8006b1a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d137      	bne.n	8006bae <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006b3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b52:	4313      	orrs	r3, r2
 8006b54:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006b6c:	f7ff fe23 	bl	80067b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b70:	f7fc fea0 	bl	80038b4 <HAL_GetTick>
 8006b74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b76:	e009      	b.n	8006b8c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b78:	f7fc fe9c 	bl	80038b4 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d902      	bls.n	8006b8c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	73fb      	strb	r3, [r7, #15]
        break;
 8006b8a:	e004      	b.n	8006b96 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006b8c:	f7ff fe31 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d1f0      	bne.n	8006b78 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d108      	bne.n	8006bae <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ba0:	691a      	ldr	r2, [r3, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006baa:	4313      	orrs	r3, r2
 8006bac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006bc4:	f7ff fe06 	bl	80067d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006bc8:	f7fc fe74 	bl	80038b4 <HAL_GetTick>
 8006bcc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006bce:	e009      	b.n	8006be4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006bd0:	f7fc fe70 	bl	80038b4 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d902      	bls.n	8006be4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	73fb      	strb	r3, [r7, #15]
      break;
 8006be2:	e004      	b.n	8006bee <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006be4:	f7ff fe05 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006bee:	7bfb      	ldrb	r3, [r7, #15]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d137      	bne.n	8006c64 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	021b      	lsls	r3, r3, #8
 8006c04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006c22:	f7ff fdc8 	bl	80067b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c26:	f7fc fe45 	bl	80038b4 <HAL_GetTick>
 8006c2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c2c:	e009      	b.n	8006c42 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c2e:	f7fc fe41 	bl	80038b4 <HAL_GetTick>
 8006c32:	4602      	mov	r2, r0
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	1ad3      	subs	r3, r2, r3
 8006c38:	2b02      	cmp	r3, #2
 8006c3a:	d902      	bls.n	8006c42 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	73fb      	strb	r3, [r7, #15]
        break;
 8006c40:	e004      	b.n	8006c4c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006c42:	f7ff fdd6 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d1f0      	bne.n	8006c2e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006c52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006c7a:	f7ff fdab 	bl	80067d4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006c7e:	f7fc fe19 	bl	80038b4 <HAL_GetTick>
 8006c82:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c84:	e009      	b.n	8006c9a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c86:	f7fc fe15 	bl	80038b4 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d902      	bls.n	8006c9a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	e004      	b.n	8006ca4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006c9a:	f7ff fdaa 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f0      	bne.n	8006c86 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d137      	bne.n	8006d1a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	021b      	lsls	r3, r3, #8
 8006cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006cd8:	f7ff fd6d 	bl	80067b6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cdc:	f7fc fdea 	bl	80038b4 <HAL_GetTick>
 8006ce0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006ce2:	e009      	b.n	8006cf8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006ce4:	f7fc fde6 	bl	80038b4 <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d902      	bls.n	8006cf8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	73fb      	strb	r3, [r7, #15]
        break;
 8006cf6:	e004      	b.n	8006d02 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006cf8:	f7ff fd7b 	bl	80067f2 <LL_RCC_PLLSAI1_IsReady>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d1f0      	bne.n	8006ce4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d108      	bne.n	8006d1a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006d08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d0c:	691a      	ldr	r2, [r3, #16]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d16:	4313      	orrs	r3, r2
 8006d18:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d101      	bne.n	8006d36 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e09f      	b.n	8006e76 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d106      	bne.n	8006d50 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fc f876 	bl	8002e3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d58:	4b49      	ldr	r3, [pc, #292]	@ (8006e80 <HAL_RTC_Init+0x15c>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b10      	cmp	r3, #16
 8006d62:	d07e      	beq.n	8006e62 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	22ca      	movs	r2, #202	@ 0xca
 8006d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2253      	movs	r2, #83	@ 0x53
 8006d72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f8ab 	bl	8006ed0 <RTC_EnterInitMode>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	22ff      	movs	r2, #255	@ 0xff
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2204      	movs	r2, #4
 8006d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	73fb      	strb	r3, [r7, #15]
 8006d94:	e067      	b.n	8006e66 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	6812      	ldr	r2, [r2, #0]
 8006da0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006da4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6899      	ldr	r1, [r3, #8]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	68d2      	ldr	r2, [r2, #12]
 8006dd0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6919      	ldr	r1, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	041a      	lsls	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006df4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0203 	bic.w	r2, r2, #3
 8006e04:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69da      	ldr	r2, [r3, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d113      	bne.n	8006e54 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f829 	bl	8006e84 <HAL_RTC_WaitForSynchro>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00d      	beq.n	8006e54 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	22ff      	movs	r2, #255	@ 0xff
 8006e3e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2204      	movs	r2, #4
 8006e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e010      	b.n	8006e76 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	22ff      	movs	r2, #255	@ 0xff
 8006e5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]
 8006e60:	e001      	b.n	8006e66 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40002800 	.word	0x40002800

08006e84 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e9a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006e9c:	f7fc fd0a 	bl	80038b4 <HAL_GetTick>
 8006ea0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ea2:	e009      	b.n	8006eb8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ea4:	f7fc fd06 	bl	80038b4 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e007      	b.n	8006ec8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	f003 0320 	and.w	r3, r3, #32
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0ee      	beq.n	8006ea4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d119      	bne.n	8006f1a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ef0:	f7fc fce0 	bl	80038b4 <HAL_GetTick>
 8006ef4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ef6:	e009      	b.n	8006f0c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ef8:	f7fc fcdc 	bl	80038b4 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f06:	d901      	bls.n	8006f0c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006f08:	2303      	movs	r3, #3
 8006f0a:	e007      	b.n	8006f1c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0ee      	beq.n	8006ef8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b086      	sub	sp, #24
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d101      	bne.n	8006f3e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006f3a:	2302      	movs	r3, #2
 8006f3c:	e0a8      	b.n	8007090 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ca      	movs	r2, #202	@ 0xca
 8006f54:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2253      	movs	r2, #83	@ 0x53
 8006f5c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d020      	beq.n	8006fae <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006f6c:	f7fc fca2 	bl	80038b4 <HAL_GetTick>
 8006f70:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006f72:	e015      	b.n	8006fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f74:	f7fc fc9e 	bl	80038b4 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f82:	d90d      	bls.n	8006fa0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	22ff      	movs	r2, #255	@ 0xff
 8006f8a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2203      	movs	r2, #3
 8006f90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e077      	b.n	8007090 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f003 0304 	and.w	r3, r3, #4
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e2      	bne.n	8006f74 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fbc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006fce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006fd0:	f7fc fc70 	bl	80038b4 <HAL_GetTick>
 8006fd4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006fd6:	e015      	b.n	8007004 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fd8:	f7fc fc6c 	bl	80038b4 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fe6:	d90d      	bls.n	8007004 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	22ff      	movs	r2, #255	@ 0xff
 8006fee:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2203      	movs	r2, #3
 8006ff4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e045      	b.n	8007090 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0e2      	beq.n	8006fd8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689a      	ldr	r2, [r3, #8]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0207 	bic.w	r2, r2, #7
 8007028:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6899      	ldr	r1, [r3, #8]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800703a:	4b17      	ldr	r3, [pc, #92]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800703c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007040:	4a15      	ldr	r2, [pc, #84]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007042:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007046:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800704a:	4b13      	ldr	r3, [pc, #76]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a12      	ldr	r2, [pc, #72]	@ (8007098 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007054:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007064:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689a      	ldr	r2, [r3, #8]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007074:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	22ff      	movs	r2, #255	@ 0xff
 800707c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	58000800 	.word	0x58000800

0800709c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e095      	b.n	80071da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d108      	bne.n	80070c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070be:	d009      	beq.n	80070d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	61da      	str	r2, [r3, #28]
 80070c6:	e005      	b.n	80070d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d106      	bne.n	80070f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f7fb feda 	bl	8002ea8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2202      	movs	r2, #2
 80070f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800710a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007114:	d902      	bls.n	800711c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	e002      	b.n	8007122 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800711c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007120:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800712a:	d007      	beq.n	800713c <HAL_SPI_Init+0xa0>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007134:	d002      	beq.n	800713c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800714c:	431a      	orrs	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	431a      	orrs	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800716a:	431a      	orrs	r2, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	69db      	ldr	r3, [r3, #28]
 8007170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717e:	ea42 0103 	orr.w	r1, r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007186:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	0c1b      	lsrs	r3, r3, #16
 8007198:	f003 0204 	and.w	r2, r3, #4
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a0:	f003 0310 	and.w	r3, r3, #16
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071aa:	f003 0308 	and.w	r3, r3, #8
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	68db      	ldr	r3, [r3, #12]
 80071b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80071b8:	ea42 0103 	orr.w	r1, r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	430a      	orrs	r2, r1
 80071c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <HAL_SPI_Transmit+0x22>
 8007200:	2302      	movs	r3, #2
 8007202:	e15f      	b.n	80074c4 <HAL_SPI_Transmit+0x2e2>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800720c:	f7fc fb52 	bl	80038b4 <HAL_GetTick>
 8007210:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007212:	88fb      	ldrh	r3, [r7, #6]
 8007214:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b01      	cmp	r3, #1
 8007220:	d002      	beq.n	8007228 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007222:	2302      	movs	r3, #2
 8007224:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007226:	e148      	b.n	80074ba <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_SPI_Transmit+0x52>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007238:	e13f      	b.n	80074ba <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2203      	movs	r2, #3
 800723e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	88fa      	ldrh	r2, [r7, #6]
 8007252:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007284:	d10f      	bne.n	80072a6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d007      	beq.n	80072c4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072cc:	d94f      	bls.n	800736e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_SPI_Transmit+0xfa>
 80072d6:	8afb      	ldrh	r3, [r7, #22]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d142      	bne.n	8007362 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ec:	1c9a      	adds	r2, r3, #2
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007300:	e02f      	b.n	8007362 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b02      	cmp	r3, #2
 800730e:	d112      	bne.n	8007336 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	881a      	ldrh	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007320:	1c9a      	adds	r2, r3, #2
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800732a:	b29b      	uxth	r3, r3
 800732c:	3b01      	subs	r3, #1
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007334:	e015      	b.n	8007362 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007336:	f7fc fabd 	bl	80038b4 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d803      	bhi.n	800734e <HAL_SPI_Transmit+0x16c>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d102      	bne.n	8007354 <HAL_SPI_Transmit+0x172>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007360:	e0ab      	b.n	80074ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1ca      	bne.n	8007302 <HAL_SPI_Transmit+0x120>
 800736c:	e080      	b.n	8007470 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_SPI_Transmit+0x19a>
 8007376:	8afb      	ldrh	r3, [r7, #22]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d174      	bne.n	8007466 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007380:	b29b      	uxth	r3, r3
 8007382:	2b01      	cmp	r3, #1
 8007384:	d912      	bls.n	80073ac <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738a:	881a      	ldrh	r2, [r3, #0]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	1c9a      	adds	r2, r3, #2
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b02      	subs	r3, #2
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073aa:	e05c      	b.n	8007466 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	330c      	adds	r3, #12
 80073b6:	7812      	ldrb	r2, [r2, #0]
 80073b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073be:	1c5a      	adds	r2, r3, #1
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3b01      	subs	r3, #1
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80073d2:	e048      	b.n	8007466 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0302 	and.w	r3, r3, #2
 80073de:	2b02      	cmp	r3, #2
 80073e0:	d12b      	bne.n	800743a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d912      	bls.n	8007412 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fc:	1c9a      	adds	r2, r3, #2
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007406:	b29b      	uxth	r3, r3
 8007408:	3b02      	subs	r3, #2
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007410:	e029      	b.n	8007466 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	330c      	adds	r3, #12
 800741c:	7812      	ldrb	r2, [r2, #0]
 800741e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800742e:	b29b      	uxth	r3, r3
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007438:	e015      	b.n	8007466 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800743a:	f7fc fa3b 	bl	80038b4 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	683a      	ldr	r2, [r7, #0]
 8007446:	429a      	cmp	r2, r3
 8007448:	d803      	bhi.n	8007452 <HAL_SPI_Transmit+0x270>
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d102      	bne.n	8007458 <HAL_SPI_Transmit+0x276>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007464:	e029      	b.n	80074ba <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1b1      	bne.n	80073d4 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f000 fb69 	bl	8007b4c <SPI_EndRxTxTransaction>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2220      	movs	r2, #32
 8007484:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800748e:	2300      	movs	r3, #0
 8007490:	613b      	str	r3, [r7, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e003      	b.n	80074ba <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	@ 0x28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074da:	2301      	movs	r3, #1
 80074dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_SPI_TransmitReceive+0x26>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e20a      	b.n	8007908 <HAL_SPI_TransmitReceive+0x43c>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074fa:	f7fc f9db 	bl	80038b4 <HAL_GetTick>
 80074fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007506:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800750e:	887b      	ldrh	r3, [r7, #2]
 8007510:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007512:	887b      	ldrh	r3, [r7, #2]
 8007514:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007516:	7efb      	ldrb	r3, [r7, #27]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d00e      	beq.n	800753a <HAL_SPI_TransmitReceive+0x6e>
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007522:	d106      	bne.n	8007532 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d102      	bne.n	8007532 <HAL_SPI_TransmitReceive+0x66>
 800752c:	7efb      	ldrb	r3, [r7, #27]
 800752e:	2b04      	cmp	r3, #4
 8007530:	d003      	beq.n	800753a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007532:	2302      	movs	r3, #2
 8007534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007538:	e1e0      	b.n	80078fc <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_SPI_TransmitReceive+0x80>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d002      	beq.n	800754c <HAL_SPI_TransmitReceive+0x80>
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d103      	bne.n	8007554 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007552:	e1d3      	b.n	80078fc <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b04      	cmp	r3, #4
 800755e:	d003      	beq.n	8007568 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2205      	movs	r2, #5
 8007564:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	887a      	ldrh	r2, [r7, #2]
 8007580:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	887a      	ldrh	r2, [r7, #2]
 800758e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	887a      	ldrh	r2, [r7, #2]
 8007594:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075aa:	d802      	bhi.n	80075b2 <HAL_SPI_TransmitReceive+0xe6>
 80075ac:	8a3b      	ldrh	r3, [r7, #16]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d908      	bls.n	80075c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075c0:	605a      	str	r2, [r3, #4]
 80075c2:	e007      	b.n	80075d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80075d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075de:	2b40      	cmp	r3, #64	@ 0x40
 80075e0:	d007      	beq.n	80075f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80075fa:	f240 8081 	bls.w	8007700 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_TransmitReceive+0x140>
 8007606:	8a7b      	ldrh	r3, [r7, #18]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d16d      	bne.n	80076e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007610:	881a      	ldrh	r2, [r3, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761c:	1c9a      	adds	r2, r3, #2
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007630:	e05a      	b.n	80076e8 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b02      	cmp	r3, #2
 800763e:	d11b      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x1ac>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	d016      	beq.n	8007678 <HAL_SPI_TransmitReceive+0x1ac>
 800764a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800764c:	2b01      	cmp	r3, #1
 800764e:	d113      	bne.n	8007678 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	881a      	ldrh	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	1c9a      	adds	r2, r3, #2
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d11c      	bne.n	80076c0 <HAL_SPI_TransmitReceive+0x1f4>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800768c:	b29b      	uxth	r3, r3
 800768e:	2b00      	cmp	r3, #0
 8007690:	d016      	beq.n	80076c0 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769c:	b292      	uxth	r2, r2
 800769e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a4:	1c9a      	adds	r2, r3, #2
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076bc:	2301      	movs	r3, #1
 80076be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076c0:	f7fc f8f8 	bl	80038b4 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d80b      	bhi.n	80076e8 <HAL_SPI_TransmitReceive+0x21c>
 80076d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d6:	d007      	beq.n	80076e8 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80076e6:	e109      	b.n	80078fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d19f      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x166>
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d199      	bne.n	8007632 <HAL_SPI_TransmitReceive+0x166>
 80076fe:	e0e3      	b.n	80078c8 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_SPI_TransmitReceive+0x244>
 8007708:	8a7b      	ldrh	r3, [r7, #18]
 800770a:	2b01      	cmp	r3, #1
 800770c:	f040 80cf 	bne.w	80078ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	d912      	bls.n	8007740 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772a:	1c9a      	adds	r2, r3, #2
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007734:	b29b      	uxth	r3, r3
 8007736:	3b02      	subs	r3, #2
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800773e:	e0b6      	b.n	80078ae <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	330c      	adds	r3, #12
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007766:	e0a2      	b.n	80078ae <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d134      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x314>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d02f      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x314>
 8007780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007782:	2b01      	cmp	r3, #1
 8007784:	d12c      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b01      	cmp	r3, #1
 800778e:	d912      	bls.n	80077b6 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007794:	881a      	ldrh	r2, [r3, #0]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	1c9a      	adds	r2, r3, #2
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	3b02      	subs	r3, #2
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077b4:	e012      	b.n	80077dc <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	330c      	adds	r3, #12
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	3b01      	subs	r3, #1
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d148      	bne.n	8007880 <HAL_SPI_TransmitReceive+0x3b4>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d042      	beq.n	8007880 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d923      	bls.n	800784e <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007810:	b292      	uxth	r2, r2
 8007812:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007818:	1c9a      	adds	r2, r3, #2
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b02      	subs	r3, #2
 8007828:	b29a      	uxth	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007836:	b29b      	uxth	r3, r3
 8007838:	2b01      	cmp	r3, #1
 800783a:	d81f      	bhi.n	800787c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800784a:	605a      	str	r2, [r3, #4]
 800784c:	e016      	b.n	800787c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f103 020c 	add.w	r2, r3, #12
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	7812      	ldrb	r2, [r2, #0]
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007870:	b29b      	uxth	r3, r3
 8007872:	3b01      	subs	r3, #1
 8007874:	b29a      	uxth	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800787c:	2301      	movs	r3, #1
 800787e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007880:	f7fc f818 	bl	80038b4 <HAL_GetTick>
 8007884:	4602      	mov	r2, r0
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800788c:	429a      	cmp	r2, r3
 800788e:	d803      	bhi.n	8007898 <HAL_SPI_TransmitReceive+0x3cc>
 8007890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007896:	d102      	bne.n	800789e <HAL_SPI_TransmitReceive+0x3d2>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80078ac:	e026      	b.n	80078fc <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f47f af57 	bne.w	8007768 <HAL_SPI_TransmitReceive+0x29c>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f47f af50 	bne.w	8007768 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078c8:	69fa      	ldr	r2, [r7, #28]
 80078ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f93d 	bl	8007b4c <SPI_EndRxTxTransaction>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d003      	beq.n	80078f4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078f2:	e003      	b.n	80078fc <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007904:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007908:	4618      	mov	r0, r3
 800790a:	3728      	adds	r7, #40	@ 0x28
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b088      	sub	sp, #32
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	603b      	str	r3, [r7, #0]
 800791c:	4613      	mov	r3, r2
 800791e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007920:	f7fb ffc8 	bl	80038b4 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	1a9b      	subs	r3, r3, r2
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4413      	add	r3, r2
 800792e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007930:	f7fb ffc0 	bl	80038b4 <HAL_GetTick>
 8007934:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007936:	4b39      	ldr	r3, [pc, #228]	@ (8007a1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	015b      	lsls	r3, r3, #5
 800793c:	0d1b      	lsrs	r3, r3, #20
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	fb02 f303 	mul.w	r3, r2, r3
 8007944:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007946:	e054      	b.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794e:	d050      	beq.n	80079f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007950:	f7fb ffb0 	bl	80038b4 <HAL_GetTick>
 8007954:	4602      	mov	r2, r0
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	69fa      	ldr	r2, [r7, #28]
 800795c:	429a      	cmp	r2, r3
 800795e:	d902      	bls.n	8007966 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d13d      	bne.n	80079e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007974:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800797e:	d111      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007988:	d004      	beq.n	8007994 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007992:	d107      	bne.n	80079a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ac:	d10f      	bne.n	80079ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e017      	b.n	8007a12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689a      	ldr	r2, [r3, #8]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d19b      	bne.n	8007948 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3720      	adds	r7, #32
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000008 	.word	0x20000008

08007a20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	@ 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007a32:	f7fb ff3f 	bl	80038b4 <HAL_GetTick>
 8007a36:	4602      	mov	r2, r0
 8007a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3a:	1a9b      	subs	r3, r3, r2
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	4413      	add	r3, r2
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007a42:	f7fb ff37 	bl	80038b4 <HAL_GetTick>
 8007a46:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	330c      	adds	r3, #12
 8007a4e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007a50:	4b3d      	ldr	r3, [pc, #244]	@ (8007b48 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	4613      	mov	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	00da      	lsls	r2, r3, #3
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	0d1b      	lsrs	r3, r3, #20
 8007a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007a68:	e060      	b.n	8007b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007a70:	d107      	bne.n	8007a82 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d104      	bne.n	8007a82 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007a80:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a88:	d050      	beq.n	8007b2c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a8a:	f7fb ff13 	bl	80038b4 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d902      	bls.n	8007aa0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d13d      	bne.n	8007b1c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007aae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ab8:	d111      	bne.n	8007ade <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ac2:	d004      	beq.n	8007ace <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007acc:	d107      	bne.n	8007ade <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007adc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ae6:	d10f      	bne.n	8007b08 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b06:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	e010      	b.n	8007b3e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d101      	bne.n	8007b26 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007b26:	69bb      	ldr	r3, [r7, #24]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	4013      	ands	r3, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d196      	bne.n	8007a6a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3728      	adds	r7, #40	@ 0x28
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000008 	.word	0x20000008

08007b4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af02      	add	r7, sp, #8
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff ff5b 	bl	8007a20 <SPI_WaitFifoStateUntilTimeout>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b74:	f043 0220 	orr.w	r2, r3, #32
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e027      	b.n	8007bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	9300      	str	r3, [sp, #0]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fec0 	bl	8007910 <SPI_WaitFlagStateUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d007      	beq.n	8007ba6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b9a:	f043 0220 	orr.w	r2, r3, #32
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e014      	b.n	8007bd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	9300      	str	r3, [sp, #0]
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff ff34 	bl	8007a20 <SPI_WaitFifoStateUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e000      	b.n	8007bd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e049      	b.n	8007c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fb f982 	bl	8002f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f000 f8fe 	bl	8007e18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c90:	2300      	movs	r3, #0
 8007c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_ConfigClockSource+0x1c>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e0b6      	b.n	8007e10 <HAL_TIM_ConfigClockSource+0x18a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2202      	movs	r2, #2
 8007cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007cc0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ccc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cde:	d03e      	beq.n	8007d5e <HAL_TIM_ConfigClockSource+0xd8>
 8007ce0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ce4:	f200 8087 	bhi.w	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007ce8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cec:	f000 8086 	beq.w	8007dfc <HAL_TIM_ConfigClockSource+0x176>
 8007cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf4:	d87f      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007cf6:	2b70      	cmp	r3, #112	@ 0x70
 8007cf8:	d01a      	beq.n	8007d30 <HAL_TIM_ConfigClockSource+0xaa>
 8007cfa:	2b70      	cmp	r3, #112	@ 0x70
 8007cfc:	d87b      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007cfe:	2b60      	cmp	r3, #96	@ 0x60
 8007d00:	d050      	beq.n	8007da4 <HAL_TIM_ConfigClockSource+0x11e>
 8007d02:	2b60      	cmp	r3, #96	@ 0x60
 8007d04:	d877      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007d06:	2b50      	cmp	r3, #80	@ 0x50
 8007d08:	d03c      	beq.n	8007d84 <HAL_TIM_ConfigClockSource+0xfe>
 8007d0a:	2b50      	cmp	r3, #80	@ 0x50
 8007d0c:	d873      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007d0e:	2b40      	cmp	r3, #64	@ 0x40
 8007d10:	d058      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0x13e>
 8007d12:	2b40      	cmp	r3, #64	@ 0x40
 8007d14:	d86f      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007d16:	2b30      	cmp	r3, #48	@ 0x30
 8007d18:	d064      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x15e>
 8007d1a:	2b30      	cmp	r3, #48	@ 0x30
 8007d1c:	d86b      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007d1e:	2b20      	cmp	r3, #32
 8007d20:	d060      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x15e>
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d867      	bhi.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05c      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x15e>
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d05a      	beq.n	8007de4 <HAL_TIM_ConfigClockSource+0x15e>
 8007d2e:	e062      	b.n	8007df6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d40:	f000 f956 	bl	8007ff0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d52:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	609a      	str	r2, [r3, #8]
      break;
 8007d5c:	e04f      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d6e:	f000 f93f 	bl	8007ff0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d80:	609a      	str	r2, [r3, #8]
      break;
 8007d82:	e03c      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d90:	461a      	mov	r2, r3
 8007d92:	f000 f8b1 	bl	8007ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2150      	movs	r1, #80	@ 0x50
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 f90a 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007da2:	e02c      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007db0:	461a      	mov	r2, r3
 8007db2:	f000 f8d0 	bl	8007f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2160      	movs	r1, #96	@ 0x60
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f8fa 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007dc2:	e01c      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f000 f891 	bl	8007ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2140      	movs	r1, #64	@ 0x40
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 f8ea 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007de2:	e00c      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4619      	mov	r1, r3
 8007dee:	4610      	mov	r0, r2
 8007df0:	f000 f8e1 	bl	8007fb6 <TIM_ITRx_SetConfig>
      break;
 8007df4:	e003      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dfa:	e000      	b.n	8007dfe <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b085      	sub	sp, #20
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a30      	ldr	r2, [pc, #192]	@ (8007eec <TIM_Base_SetConfig+0xd4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_Base_SetConfig+0x20>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e36:	d108      	bne.n	8007e4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a27      	ldr	r2, [pc, #156]	@ (8007eec <TIM_Base_SetConfig+0xd4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d00b      	beq.n	8007e6a <TIM_Base_SetConfig+0x52>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e58:	d007      	beq.n	8007e6a <TIM_Base_SetConfig+0x52>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a24      	ldr	r2, [pc, #144]	@ (8007ef0 <TIM_Base_SetConfig+0xd8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d003      	beq.n	8007e6a <TIM_Base_SetConfig+0x52>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a23      	ldr	r2, [pc, #140]	@ (8007ef4 <TIM_Base_SetConfig+0xdc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d108      	bne.n	8007e7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4a12      	ldr	r2, [pc, #72]	@ (8007eec <TIM_Base_SetConfig+0xd4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d007      	beq.n	8007eb8 <TIM_Base_SetConfig+0xa0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4a11      	ldr	r2, [pc, #68]	@ (8007ef0 <TIM_Base_SetConfig+0xd8>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d003      	beq.n	8007eb8 <TIM_Base_SetConfig+0xa0>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a10      	ldr	r2, [pc, #64]	@ (8007ef4 <TIM_Base_SetConfig+0xdc>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d103      	bne.n	8007ec0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	691a      	ldr	r2, [r3, #16]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d105      	bne.n	8007ede <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	611a      	str	r2, [r3, #16]
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	40012c00 	.word	0x40012c00
 8007ef0:	40014400 	.word	0x40014400
 8007ef4:	40014800 	.word	0x40014800

08007ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f023 0201 	bic.w	r2, r3, #1
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	699b      	ldr	r3, [r3, #24]
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f023 030a 	bic.w	r3, r3, #10
 8007f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	621a      	str	r2, [r3, #32]
}
 8007f4a:	bf00      	nop
 8007f4c:	371c      	adds	r7, #28
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr

08007f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b087      	sub	sp, #28
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	60f8      	str	r0, [r7, #12]
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a1b      	ldr	r3, [r3, #32]
 8007f6c:	f023 0210 	bic.w	r2, r3, #16
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	031b      	lsls	r3, r3, #12
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	621a      	str	r2, [r3, #32]
}
 8007faa:	bf00      	nop
 8007fac:	371c      	adds	r7, #28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b085      	sub	sp, #20
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	f043 0307 	orr.w	r3, r3, #7
 8007fdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800800a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	021a      	lsls	r2, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	431a      	orrs	r2, r3
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	4313      	orrs	r3, r2
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	609a      	str	r2, [r3, #8]
}
 8008024:	bf00      	nop
 8008026:	371c      	adds	r7, #28
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008040:	2b01      	cmp	r3, #1
 8008042:	d101      	bne.n	8008048 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008044:	2302      	movs	r3, #2
 8008046:	e04a      	b.n	80080de <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d108      	bne.n	8008084 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008078:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	4313      	orrs	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a12      	ldr	r2, [pc, #72]	@ (80080ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d004      	beq.n	80080b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080b0:	d10c      	bne.n	80080cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40012c00 	.word	0x40012c00

080080f0 <LL_RCC_GetUSARTClockSource>:
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80080f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4013      	ands	r3, r2
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <LL_RCC_GetLPUARTClockSource>:
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008118:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800811c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4013      	ands	r3, r2
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	e042      	b.n	80081c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fa fdcf 	bl	8002cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2224      	movs	r2, #36	@ 0x24
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f022 0201 	bic.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fa50 	bl	8008620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f825 	bl	80081d0 <UART_SetConfig>
 8008186:	4603      	mov	r3, r0
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e01b      	b.n	80081c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800819e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689a      	ldr	r2, [r3, #8]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80081ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0201 	orr.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 facf 	bl	8008764 <UART_CheckIdleState>
 80081c6:	4603      	mov	r3, r0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d4:	b08c      	sub	sp, #48	@ 0x30
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	431a      	orrs	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4baf      	ldr	r3, [pc, #700]	@ (80084bc <UART_SetConfig+0x2ec>)
 8008200:	4013      	ands	r3, r2
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008208:	430b      	orrs	r3, r1
 800820a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4aa4      	ldr	r2, [pc, #656]	@ (80084c0 <UART_SetConfig+0x2f0>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008238:	4313      	orrs	r3, r2
 800823a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008246:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	6812      	ldr	r2, [r2, #0]
 800824e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008250:	430b      	orrs	r3, r1
 8008252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800825a:	f023 010f 	bic.w	r1, r3, #15
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a95      	ldr	r2, [pc, #596]	@ (80084c4 <UART_SetConfig+0x2f4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d125      	bne.n	80082c0 <UART_SetConfig+0xf0>
 8008274:	2003      	movs	r0, #3
 8008276:	f7ff ff3b 	bl	80080f0 <LL_RCC_GetUSARTClockSource>
 800827a:	4603      	mov	r3, r0
 800827c:	2b03      	cmp	r3, #3
 800827e:	d81b      	bhi.n	80082b8 <UART_SetConfig+0xe8>
 8008280:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <UART_SetConfig+0xb8>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	08008299 	.word	0x08008299
 800828c:	080082a9 	.word	0x080082a9
 8008290:	080082a1 	.word	0x080082a1
 8008294:	080082b1 	.word	0x080082b1
 8008298:	2301      	movs	r3, #1
 800829a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829e:	e042      	b.n	8008326 <UART_SetConfig+0x156>
 80082a0:	2302      	movs	r3, #2
 80082a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a6:	e03e      	b.n	8008326 <UART_SetConfig+0x156>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ae:	e03a      	b.n	8008326 <UART_SetConfig+0x156>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082b6:	e036      	b.n	8008326 <UART_SetConfig+0x156>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082be:	e032      	b.n	8008326 <UART_SetConfig+0x156>
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a7e      	ldr	r2, [pc, #504]	@ (80084c0 <UART_SetConfig+0x2f0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d12a      	bne.n	8008320 <UART_SetConfig+0x150>
 80082ca:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80082ce:	f7ff ff1f 	bl	8008110 <LL_RCC_GetLPUARTClockSource>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082d8:	d01a      	beq.n	8008310 <UART_SetConfig+0x140>
 80082da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80082de:	d81b      	bhi.n	8008318 <UART_SetConfig+0x148>
 80082e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082e4:	d00c      	beq.n	8008300 <UART_SetConfig+0x130>
 80082e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80082ea:	d815      	bhi.n	8008318 <UART_SetConfig+0x148>
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <UART_SetConfig+0x128>
 80082f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082f4:	d008      	beq.n	8008308 <UART_SetConfig+0x138>
 80082f6:	e00f      	b.n	8008318 <UART_SetConfig+0x148>
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fe:	e012      	b.n	8008326 <UART_SetConfig+0x156>
 8008300:	2302      	movs	r3, #2
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008306:	e00e      	b.n	8008326 <UART_SetConfig+0x156>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800830e:	e00a      	b.n	8008326 <UART_SetConfig+0x156>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008316:	e006      	b.n	8008326 <UART_SetConfig+0x156>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800831e:	e002      	b.n	8008326 <UART_SetConfig+0x156>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a65      	ldr	r2, [pc, #404]	@ (80084c0 <UART_SetConfig+0x2f0>)
 800832c:	4293      	cmp	r3, r2
 800832e:	f040 8097 	bne.w	8008460 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008332:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008336:	2b08      	cmp	r3, #8
 8008338:	d823      	bhi.n	8008382 <UART_SetConfig+0x1b2>
 800833a:	a201      	add	r2, pc, #4	@ (adr r2, 8008340 <UART_SetConfig+0x170>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008365 	.word	0x08008365
 8008344:	08008383 	.word	0x08008383
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008383 	.word	0x08008383
 8008350:	08008373 	.word	0x08008373
 8008354:	08008383 	.word	0x08008383
 8008358:	08008383 	.word	0x08008383
 800835c:	08008383 	.word	0x08008383
 8008360:	0800837b 	.word	0x0800837b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008364:	f7fd ffda 	bl	800631c <HAL_RCC_GetPCLK1Freq>
 8008368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800836a:	e010      	b.n	800838e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800836c:	4b56      	ldr	r3, [pc, #344]	@ (80084c8 <UART_SetConfig+0x2f8>)
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008370:	e00d      	b.n	800838e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008372:	f7fd ff53 	bl	800621c <HAL_RCC_GetSysClockFreq>
 8008376:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008378:	e009      	b.n	800838e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008380:	e005      	b.n	800838e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800838c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800838e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 812b 	beq.w	80085ec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839a:	4a4c      	ldr	r2, [pc, #304]	@ (80084cc <UART_SetConfig+0x2fc>)
 800839c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a0:	461a      	mov	r2, r3
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80083a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	4613      	mov	r3, r2
 80083b0:	005b      	lsls	r3, r3, #1
 80083b2:	4413      	add	r3, r2
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d305      	bcc.n	80083c6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d903      	bls.n	80083ce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083cc:	e10e      	b.n	80085ec <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	2200      	movs	r2, #0
 80083d2:	60bb      	str	r3, [r7, #8]
 80083d4:	60fa      	str	r2, [r7, #12]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	4a3c      	ldr	r2, [pc, #240]	@ (80084cc <UART_SetConfig+0x2fc>)
 80083dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	2200      	movs	r2, #0
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083f0:	f7f8 fbb2 	bl	8000b58 <__aeabi_uldivmod>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4610      	mov	r0, r2
 80083fa:	4619      	mov	r1, r3
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	020b      	lsls	r3, r1, #8
 8008406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800840a:	0202      	lsls	r2, r0, #8
 800840c:	6979      	ldr	r1, [r7, #20]
 800840e:	6849      	ldr	r1, [r1, #4]
 8008410:	0849      	lsrs	r1, r1, #1
 8008412:	2000      	movs	r0, #0
 8008414:	460c      	mov	r4, r1
 8008416:	4605      	mov	r5, r0
 8008418:	eb12 0804 	adds.w	r8, r2, r4
 800841c:	eb43 0905 	adc.w	r9, r3, r5
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	469a      	mov	sl, r3
 8008428:	4693      	mov	fp, r2
 800842a:	4652      	mov	r2, sl
 800842c:	465b      	mov	r3, fp
 800842e:	4640      	mov	r0, r8
 8008430:	4649      	mov	r1, r9
 8008432:	f7f8 fb91 	bl	8000b58 <__aeabi_uldivmod>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4613      	mov	r3, r2
 800843c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008444:	d308      	bcc.n	8008458 <UART_SetConfig+0x288>
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800844c:	d204      	bcs.n	8008458 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6a3a      	ldr	r2, [r7, #32]
 8008454:	60da      	str	r2, [r3, #12]
 8008456:	e0c9      	b.n	80085ec <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800845e:	e0c5      	b.n	80085ec <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008468:	d16d      	bne.n	8008546 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800846a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800846e:	3b01      	subs	r3, #1
 8008470:	2b07      	cmp	r3, #7
 8008472:	d82d      	bhi.n	80084d0 <UART_SetConfig+0x300>
 8008474:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <UART_SetConfig+0x2ac>)
 8008476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847a:	bf00      	nop
 800847c:	0800849d 	.word	0x0800849d
 8008480:	080084a5 	.word	0x080084a5
 8008484:	080084d1 	.word	0x080084d1
 8008488:	080084ab 	.word	0x080084ab
 800848c:	080084d1 	.word	0x080084d1
 8008490:	080084d1 	.word	0x080084d1
 8008494:	080084d1 	.word	0x080084d1
 8008498:	080084b3 	.word	0x080084b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800849c:	f7fd ff54 	bl	8006348 <HAL_RCC_GetPCLK2Freq>
 80084a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084a2:	e01b      	b.n	80084dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084a4:	4b08      	ldr	r3, [pc, #32]	@ (80084c8 <UART_SetConfig+0x2f8>)
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084a8:	e018      	b.n	80084dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084aa:	f7fd feb7 	bl	800621c <HAL_RCC_GetSysClockFreq>
 80084ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80084b0:	e014      	b.n	80084dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80084b8:	e010      	b.n	80084dc <UART_SetConfig+0x30c>
 80084ba:	bf00      	nop
 80084bc:	cfff69f3 	.word	0xcfff69f3
 80084c0:	40008000 	.word	0x40008000
 80084c4:	40013800 	.word	0x40013800
 80084c8:	00f42400 	.word	0x00f42400
 80084cc:	08016638 	.word	0x08016638
      default:
        pclk = 0U;
 80084d0:	2300      	movs	r3, #0
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80084da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084de:	2b00      	cmp	r3, #0
 80084e0:	f000 8084 	beq.w	80085ec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e8:	4a4b      	ldr	r2, [pc, #300]	@ (8008618 <UART_SetConfig+0x448>)
 80084ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084f6:	005a      	lsls	r2, r3, #1
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	441a      	add	r2, r3
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	fbb2 f3f3 	udiv	r3, r2, r3
 8008508:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	2b0f      	cmp	r3, #15
 800850e:	d916      	bls.n	800853e <UART_SetConfig+0x36e>
 8008510:	6a3b      	ldr	r3, [r7, #32]
 8008512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008516:	d212      	bcs.n	800853e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	b29b      	uxth	r3, r3
 800851c:	f023 030f 	bic.w	r3, r3, #15
 8008520:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	085b      	lsrs	r3, r3, #1
 8008526:	b29b      	uxth	r3, r3
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	b29a      	uxth	r2, r3
 800852e:	8bfb      	ldrh	r3, [r7, #30]
 8008530:	4313      	orrs	r3, r2
 8008532:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	8bfa      	ldrh	r2, [r7, #30]
 800853a:	60da      	str	r2, [r3, #12]
 800853c:	e056      	b.n	80085ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008544:	e052      	b.n	80085ec <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008546:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800854a:	3b01      	subs	r3, #1
 800854c:	2b07      	cmp	r3, #7
 800854e:	d822      	bhi.n	8008596 <UART_SetConfig+0x3c6>
 8008550:	a201      	add	r2, pc, #4	@ (adr r2, 8008558 <UART_SetConfig+0x388>)
 8008552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008556:	bf00      	nop
 8008558:	08008579 	.word	0x08008579
 800855c:	08008581 	.word	0x08008581
 8008560:	08008597 	.word	0x08008597
 8008564:	08008587 	.word	0x08008587
 8008568:	08008597 	.word	0x08008597
 800856c:	08008597 	.word	0x08008597
 8008570:	08008597 	.word	0x08008597
 8008574:	0800858f 	.word	0x0800858f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008578:	f7fd fee6 	bl	8006348 <HAL_RCC_GetPCLK2Freq>
 800857c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800857e:	e010      	b.n	80085a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008580:	4b26      	ldr	r3, [pc, #152]	@ (800861c <UART_SetConfig+0x44c>)
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008584:	e00d      	b.n	80085a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008586:	f7fd fe49 	bl	800621c <HAL_RCC_GetSysClockFreq>
 800858a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800858c:	e009      	b.n	80085a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800858e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008594:	e005      	b.n	80085a2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085a0:	bf00      	nop
    }

    if (pclk != 0U)
 80085a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d021      	beq.n	80085ec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008618 <UART_SetConfig+0x448>)
 80085ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	085b      	lsrs	r3, r3, #1
 80085c0:	441a      	add	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d909      	bls.n	80085e6 <UART_SetConfig+0x416>
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085d8:	d205      	bcs.n	80085e6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e002      	b.n	80085ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2200      	movs	r2, #0
 8008606:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008608:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800860c:	4618      	mov	r0, r3
 800860e:	3730      	adds	r7, #48	@ 0x30
 8008610:	46bd      	mov	sp, r7
 8008612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008616:	bf00      	nop
 8008618:	08016638 	.word	0x08016638
 800861c:	00f42400 	.word	0x00f42400

08008620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862c:	f003 0308 	and.w	r3, r3, #8
 8008630:	2b00      	cmp	r3, #0
 8008632:	d00a      	beq.n	800864a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008670:	f003 0302 	and.w	r3, r3, #2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d00a      	beq.n	800868e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008692:	f003 0304 	and.w	r3, r3, #4
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00a      	beq.n	80086b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	430a      	orrs	r2, r1
 80086ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086b4:	f003 0310 	and.w	r3, r3, #16
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	430a      	orrs	r2, r1
 80086d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d6:	f003 0320 	and.w	r3, r3, #32
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00a      	beq.n	80086f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d01a      	beq.n	8008736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	430a      	orrs	r2, r1
 8008714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800871e:	d10a      	bne.n	8008736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	605a      	str	r2, [r3, #4]
  }
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b098      	sub	sp, #96	@ 0x60
 8008768:	af02      	add	r7, sp, #8
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008774:	f7fb f89e 	bl	80038b4 <HAL_GetTick>
 8008778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b08      	cmp	r3, #8
 8008786:	d12f      	bne.n	80087e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008790:	2200      	movs	r2, #0
 8008792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f88e 	bl	80088b8 <UART_WaitOnFlagUntilTimeout>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d022      	beq.n	80087e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	e853 3f00 	ldrex	r3, [r3]
 80087ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80087c2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087c8:	e841 2300 	strex	r3, r2, [r1]
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e6      	bne.n	80087a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e063      	b.n	80088b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d149      	bne.n	800888a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80087fa:	9300      	str	r3, [sp, #0]
 80087fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80087fe:	2200      	movs	r2, #0
 8008800:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f857 	bl	80088b8 <UART_WaitOnFlagUntilTimeout>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d03c      	beq.n	800888a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	623b      	str	r3, [r7, #32]
   return(result);
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800882e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008830:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800883c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e6      	bne.n	8008810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3308      	adds	r3, #8
 8008848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	e853 3f00 	ldrex	r3, [r3]
 8008850:	60fb      	str	r3, [r7, #12]
   return(result);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f023 0301 	bic.w	r3, r3, #1
 8008858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	3308      	adds	r3, #8
 8008860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008862:	61fa      	str	r2, [r7, #28]
 8008864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	69b9      	ldr	r1, [r7, #24]
 8008868:	69fa      	ldr	r2, [r7, #28]
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	617b      	str	r3, [r7, #20]
   return(result);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e5      	bne.n	8008842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2220      	movs	r2, #32
 800887a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e012      	b.n	80088b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3758      	adds	r7, #88	@ 0x58
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	603b      	str	r3, [r7, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c8:	e04f      	b.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d0:	d04b      	beq.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088d2:	f7fa ffef 	bl	80038b4 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d302      	bcc.n	80088e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d101      	bne.n	80088ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088e8:	2303      	movs	r3, #3
 80088ea:	e04e      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0304 	and.w	r3, r3, #4
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d037      	beq.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b80      	cmp	r3, #128	@ 0x80
 80088fe:	d034      	beq.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b40      	cmp	r3, #64	@ 0x40
 8008904:	d031      	beq.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b08      	cmp	r3, #8
 8008912:	d110      	bne.n	8008936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	2208      	movs	r2, #8
 800891a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f838 	bl	8008992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2208      	movs	r2, #8
 8008926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e029      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008944:	d111      	bne.n	800896a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800894e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f81e 	bl	8008992 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2220      	movs	r2, #32
 800895a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e00f      	b.n	800898a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	4013      	ands	r3, r2
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	429a      	cmp	r2, r3
 8008978:	bf0c      	ite	eq
 800897a:	2301      	moveq	r3, #1
 800897c:	2300      	movne	r3, #0
 800897e:	b2db      	uxtb	r3, r3
 8008980:	461a      	mov	r2, r3
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	429a      	cmp	r2, r3
 8008986:	d0a0      	beq.n	80088ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008992:	b480      	push	{r7}
 8008994:	b095      	sub	sp, #84	@ 0x54
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a2:	e853 3f00 	ldrex	r3, [r3]
 80089a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80089a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80089ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80089ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089c0:	e841 2300 	strex	r3, r2, [r1]
 80089c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d1e6      	bne.n	800899a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3308      	adds	r3, #8
 80089d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	e853 3f00 	ldrex	r3, [r3]
 80089da:	61fb      	str	r3, [r7, #28]
   return(result);
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e3      	bne.n	80089cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d118      	bne.n	8008a3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f023 0310 	bic.w	r3, r3, #16
 8008a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6979      	ldr	r1, [r7, #20]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e6      	bne.n	8008a0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a52:	bf00      	nop
 8008a54:	3754      	adds	r7, #84	@ 0x54
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b085      	sub	sp, #20
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d101      	bne.n	8008a74 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a70:	2302      	movs	r3, #2
 8008a72:	e027      	b.n	8008ac4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2224      	movs	r2, #36	@ 0x24
 8008a80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f022 0201 	bic.w	r2, r2, #1
 8008a9a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008aa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68fa      	ldr	r2, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2220      	movs	r2, #32
 8008ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3714      	adds	r7, #20
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr

08008ad0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d101      	bne.n	8008ae8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	e02d      	b.n	8008b44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2224      	movs	r2, #36	@ 0x24
 8008af4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0201 	bic.w	r2, r2, #1
 8008b0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f84f 	bl	8008bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e02d      	b.n	8008bc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2224      	movs	r2, #36	@ 0x24
 8008b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f022 0201 	bic.w	r2, r2, #1
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f811 	bl	8008bc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68fa      	ldr	r2, [r7, #12]
 8008bac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3710      	adds	r7, #16
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d108      	bne.n	8008bea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008be8:	e031      	b.n	8008c4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bea:	2308      	movs	r3, #8
 8008bec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bee:	2308      	movs	r3, #8
 8008bf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	0e5b      	lsrs	r3, r3, #25
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	0f5b      	lsrs	r3, r3, #29
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c12:	7bbb      	ldrb	r3, [r7, #14]
 8008c14:	7b3a      	ldrb	r2, [r7, #12]
 8008c16:	4911      	ldr	r1, [pc, #68]	@ (8008c5c <UARTEx_SetNbDataToProcess+0x94>)
 8008c18:	5c8a      	ldrb	r2, [r1, r2]
 8008c1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c1e:	7b3a      	ldrb	r2, [r7, #12]
 8008c20:	490f      	ldr	r1, [pc, #60]	@ (8008c60 <UARTEx_SetNbDataToProcess+0x98>)
 8008c22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c24:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	7b7a      	ldrb	r2, [r7, #13]
 8008c34:	4909      	ldr	r1, [pc, #36]	@ (8008c5c <UARTEx_SetNbDataToProcess+0x94>)
 8008c36:	5c8a      	ldrb	r2, [r1, r2]
 8008c38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c3c:	7b7a      	ldrb	r2, [r7, #13]
 8008c3e:	4908      	ldr	r1, [pc, #32]	@ (8008c60 <UARTEx_SetNbDataToProcess+0x98>)
 8008c40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c42:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008c4e:	bf00      	nop
 8008c50:	3714      	adds	r7, #20
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	08016650 	.word	0x08016650
 8008c60:	08016658 	.word	0x08016658

08008c64 <set_gpio_output>:
	while (__HAL_TIM_GET_COUNTER(&htim2) < target_time)
		;
}

// Configure GPIO as Output
void set_gpio_output(void) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	601a      	str	r2, [r3, #0]
 8008c70:	605a      	str	r2, [r3, #4]
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	60da      	str	r2, [r3, #12]
 8008c76:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = TMP1826_PIN;
 8008c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c7c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008c7e:	2311      	movs	r3, #17
 8008c80:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c82:	2300      	movs	r3, #0
 8008c84:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TMP1826_PORT, &GPIO_InitStruct);
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	4619      	mov	r1, r3
 8008c8a:	4803      	ldr	r0, [pc, #12]	@ (8008c98 <set_gpio_output+0x34>)
 8008c8c:	f7fb f98c 	bl	8003fa8 <HAL_GPIO_Init>
}
 8008c90:	bf00      	nop
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}
 8008c98:	48000800 	.word	0x48000800

08008c9c <TMP1826_Init>:
	while (counter--)
		;
}

// Initialize TMP1826
void TMP1826_Init(void) {
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
	set_gpio_output();
 8008ca0:	f7ff ffe0 	bl	8008c64 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_SET);
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008caa:	4804      	ldr	r0, [pc, #16]	@ (8008cbc <TMP1826_Init+0x20>)
 8008cac:	f7fb faec 	bl	8004288 <HAL_GPIO_WritePin>
	printf("TMP1826 Initialized on PC10\n");
 8008cb0:	4803      	ldr	r0, [pc, #12]	@ (8008cc0 <TMP1826_Init+0x24>)
 8008cb2:	f007 ff49 	bl	8010b48 <puts>
}
 8008cb6:	bf00      	nop
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	48000800 	.word	0x48000800
 8008cc0:	080138b8 	.word	0x080138b8

08008cc4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8008cc8:	4907      	ldr	r1, [pc, #28]	@ (8008ce8 <MX_FATFS_Init+0x24>)
 8008cca:	4808      	ldr	r0, [pc, #32]	@ (8008cec <MX_FATFS_Init+0x28>)
 8008ccc:	f002 ff0e 	bl	800baec <FATFS_LinkDriver>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8008cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cda:	e003      	b.n	8008ce4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8008cdc:	4b04      	ldr	r3, [pc, #16]	@ (8008cf0 <MX_FATFS_Init+0x2c>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8008ce2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	20001e48 	.word	0x20001e48
 8008cec:	20000024 	.word	0x20000024
 8008cf0:	20001e4c 	.word	0x20001e4c

08008cf4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
	return USER_SPI_initialize(pdrv);
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f9d1 	bl	80090a8 <USER_SPI_initialize>
 8008d06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return USER_SPI_status(pdrv);
 8008d1a:	79fb      	ldrb	r3, [r7, #7]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f000 faaf 	bl	8009280 <USER_SPI_status>
 8008d22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8008d3c:	7bf8      	ldrb	r0, [r7, #15]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	68b9      	ldr	r1, [r7, #8]
 8008d44:	f000 fab2 	bl	80092ac <USER_SPI_read>
 8008d48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	603b      	str	r3, [r7, #0]
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8008d62:	7bf8      	ldrb	r0, [r7, #15]
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68b9      	ldr	r1, [r7, #8]
 8008d6a:	f000 fb05 	bl	8009378 <USER_SPI_write>
 8008d6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	603a      	str	r2, [r7, #0]
 8008d82:	71fb      	strb	r3, [r7, #7]
 8008d84:	460b      	mov	r3, r1
 8008d86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8008d88:	79b9      	ldrb	r1, [r7, #6]
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	683a      	ldr	r2, [r7, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 fb6e 	bl	8009470 <USER_SPI_ioctl>
 8008d94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
	...

08008da0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8008da8:	f7fa fd84 	bl	80038b4 <HAL_GetTick>
 8008dac:	4603      	mov	r3, r0
 8008dae:	4a04      	ldr	r2, [pc, #16]	@ (8008dc0 <SPI_Timer_On+0x20>)
 8008db0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8008db2:	4a04      	ldr	r2, [pc, #16]	@ (8008dc4 <SPI_Timer_On+0x24>)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6013      	str	r3, [r2, #0]
}
 8008db8:	bf00      	nop
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20001e50 	.word	0x20001e50
 8008dc4:	20001e54 	.word	0x20001e54

08008dc8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8008dcc:	f7fa fd72 	bl	80038b4 <HAL_GetTick>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4b06      	ldr	r3, [pc, #24]	@ (8008dec <SPI_Timer_Status+0x24>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	4b05      	ldr	r3, [pc, #20]	@ (8008df0 <SPI_Timer_Status+0x28>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	bf34      	ite	cc
 8008de0:	2301      	movcc	r3, #1
 8008de2:	2300      	movcs	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20001e50 	.word	0x20001e50
 8008df0:	20001e54 	.word	0x20001e54

08008df4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8008dfe:	f107 020f 	add.w	r2, r7, #15
 8008e02:	1df9      	adds	r1, r7, #7
 8008e04:	2332      	movs	r3, #50	@ 0x32
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4804      	ldr	r0, [pc, #16]	@ (8008e1c <xchg_spi+0x28>)
 8008e0c:	f7fe fb5e 	bl	80074cc <HAL_SPI_TransmitReceive>
    return rxDat;
 8008e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000580 	.word	0x20000580

08008e20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	e00a      	b.n	8008e46 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	18d4      	adds	r4, r2, r3
 8008e36:	20ff      	movs	r0, #255	@ 0xff
 8008e38:	f7ff ffdc 	bl	8008df4 <xchg_spi>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d3f0      	bcc.n	8008e30 <rcvr_spi_multi+0x10>
	}
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd90      	pop	{r4, r7, pc}

08008e58 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	f04f 33ff 	mov.w	r3, #4294967295
 8008e6a:	6879      	ldr	r1, [r7, #4]
 8008e6c:	4803      	ldr	r0, [pc, #12]	@ (8008e7c <xmit_spi_multi+0x24>)
 8008e6e:	f7fe f9b8 	bl	80071e2 <HAL_SPI_Transmit>
}
 8008e72:	bf00      	nop
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20000580 	.word	0x20000580

08008e80 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8008e88:	f7fa fd14 	bl	80038b4 <HAL_GetTick>
 8008e8c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8008e92:	20ff      	movs	r0, #255	@ 0xff
 8008e94:	f7ff ffae 	bl	8008df4 <xchg_spi>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2bff      	cmp	r3, #255	@ 0xff
 8008ea0:	d007      	beq.n	8008eb2 <wait_ready+0x32>
 8008ea2:	f7fa fd07 	bl	80038b4 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	693a      	ldr	r2, [r7, #16]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d8ef      	bhi.n	8008e92 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
 8008eb4:	2bff      	cmp	r3, #255	@ 0xff
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8008eca:	2201      	movs	r2, #1
 8008ecc:	2110      	movs	r1, #16
 8008ece:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008ed2:	f7fb f9d9 	bl	8004288 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8008ed6:	20ff      	movs	r0, #255	@ 0xff
 8008ed8:	f7ff ff8c 	bl	8008df4 <xchg_spi>

}
 8008edc:	bf00      	nop
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	2110      	movs	r1, #16
 8008ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008eec:	f7fb f9cc 	bl	8004288 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8008ef0:	20ff      	movs	r0, #255	@ 0xff
 8008ef2:	f7ff ff7f 	bl	8008df4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8008ef6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008efa:	f7ff ffc1 	bl	8008e80 <wait_ready>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <spiselect+0x28>
 8008f04:	2301      	movs	r3, #1
 8008f06:	e002      	b.n	8008f0e <spiselect+0x2e>

	despiselect();
 8008f08:	f7ff ffdd 	bl	8008ec6 <despiselect>
	return 0;	/* Timeout */
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8008f1c:	20c8      	movs	r0, #200	@ 0xc8
 8008f1e:	f7ff ff3f 	bl	8008da0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8008f22:	20ff      	movs	r0, #255	@ 0xff
 8008f24:	f7ff ff66 	bl	8008df4 <xchg_spi>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	2bff      	cmp	r3, #255	@ 0xff
 8008f30:	d104      	bne.n	8008f3c <rcvr_datablock+0x2a>
 8008f32:	f7ff ff49 	bl	8008dc8 <SPI_Timer_Status>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f2      	bne.n	8008f22 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008f40:	d001      	beq.n	8008f46 <rcvr_datablock+0x34>
 8008f42:	2300      	movs	r3, #0
 8008f44:	e00a      	b.n	8008f5c <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8008f46:	6839      	ldr	r1, [r7, #0]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff69 	bl	8008e20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8008f4e:	20ff      	movs	r0, #255	@ 0xff
 8008f50:	f7ff ff50 	bl	8008df4 <xchg_spi>
 8008f54:	20ff      	movs	r0, #255	@ 0xff
 8008f56:	f7ff ff4d 	bl	8008df4 <xchg_spi>

	return 1;						/* Function succeeded */
 8008f5a:	2301      	movs	r3, #1
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8008f70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008f74:	f7ff ff84 	bl	8008e80 <wait_ready>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d101      	bne.n	8008f82 <xmit_datablock+0x1e>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	e01e      	b.n	8008fc0 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff ff35 	bl	8008df4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	2bfd      	cmp	r3, #253	@ 0xfd
 8008f8e:	d016      	beq.n	8008fbe <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8008f90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ff5f 	bl	8008e58 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8008f9a:	20ff      	movs	r0, #255	@ 0xff
 8008f9c:	f7ff ff2a 	bl	8008df4 <xchg_spi>
 8008fa0:	20ff      	movs	r0, #255	@ 0xff
 8008fa2:	f7ff ff27 	bl	8008df4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8008fa6:	20ff      	movs	r0, #255	@ 0xff
 8008fa8:	f7ff ff24 	bl	8008df4 <xchg_spi>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2b05      	cmp	r3, #5
 8008fb8:	d001      	beq.n	8008fbe <xmit_datablock+0x5a>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	e000      	b.n	8008fc0 <xmit_datablock+0x5c>
	}
	return 1;
 8008fbe:	2301      	movs	r3, #1
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	4603      	mov	r3, r0
 8008fd0:	6039      	str	r1, [r7, #0]
 8008fd2:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8008fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da0e      	bge.n	8008ffa <send_cmd+0x32>
		cmd &= 0x7F;
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fe2:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	2037      	movs	r0, #55	@ 0x37
 8008fe8:	f7ff ffee 	bl	8008fc8 <send_cmd>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d901      	bls.n	8008ffa <send_cmd+0x32>
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	e051      	b.n	800909e <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8008ffa:	79fb      	ldrb	r3, [r7, #7]
 8008ffc:	2b0c      	cmp	r3, #12
 8008ffe:	d008      	beq.n	8009012 <send_cmd+0x4a>
		despiselect();
 8009000:	f7ff ff61 	bl	8008ec6 <despiselect>
		if (!spiselect()) return 0xFF;
 8009004:	f7ff ff6c 	bl	8008ee0 <spiselect>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <send_cmd+0x4a>
 800900e:	23ff      	movs	r3, #255	@ 0xff
 8009010:	e045      	b.n	800909e <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009018:	b2db      	uxtb	r3, r3
 800901a:	4618      	mov	r0, r3
 800901c:	f7ff feea 	bl	8008df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	0e1b      	lsrs	r3, r3, #24
 8009024:	b2db      	uxtb	r3, r3
 8009026:	4618      	mov	r0, r3
 8009028:	f7ff fee4 	bl	8008df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	0c1b      	lsrs	r3, r3, #16
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4618      	mov	r0, r3
 8009034:	f7ff fede 	bl	8008df4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff fed8 	bl	8008df4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4618      	mov	r0, r3
 800904a:	f7ff fed3 	bl	8008df4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800904e:	2301      	movs	r3, #1
 8009050:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <send_cmd+0x94>
 8009058:	2395      	movs	r3, #149	@ 0x95
 800905a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b08      	cmp	r3, #8
 8009060:	d101      	bne.n	8009066 <send_cmd+0x9e>
 8009062:	2387      	movs	r3, #135	@ 0x87
 8009064:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8009066:	7bfb      	ldrb	r3, [r7, #15]
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fec3 	bl	8008df4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800906e:	79fb      	ldrb	r3, [r7, #7]
 8009070:	2b0c      	cmp	r3, #12
 8009072:	d102      	bne.n	800907a <send_cmd+0xb2>
 8009074:	20ff      	movs	r0, #255	@ 0xff
 8009076:	f7ff febd 	bl	8008df4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800907a:	230a      	movs	r3, #10
 800907c:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800907e:	20ff      	movs	r0, #255	@ 0xff
 8009080:	f7ff feb8 	bl	8008df4 <xchg_spi>
 8009084:	4603      	mov	r3, r0
 8009086:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8009088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908c:	2b00      	cmp	r3, #0
 800908e:	da05      	bge.n	800909c <send_cmd+0xd4>
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	3b01      	subs	r3, #1
 8009094:	73fb      	strb	r3, [r7, #15]
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1f0      	bne.n	800907e <send_cmd+0xb6>

	return res;							/* Return received response */
 800909c:	7bbb      	ldrb	r3, [r7, #14]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b085      	sub	sp, #20
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <USER_SPI_initialize+0x14>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e0d6      	b.n	800926a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80090bc:	4b6d      	ldr	r3, [pc, #436]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <USER_SPI_initialize+0x2a>
 80090ca:	4b6a      	ldr	r3, [pc, #424]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	e0cb      	b.n	800926a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80090d2:	4b69      	ldr	r3, [pc, #420]	@ (8009278 <USER_SPI_initialize+0x1d0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80090dc:	4b66      	ldr	r3, [pc, #408]	@ (8009278 <USER_SPI_initialize+0x1d0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80090e4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80090e6:	230a      	movs	r3, #10
 80090e8:	73fb      	strb	r3, [r7, #15]
 80090ea:	e005      	b.n	80090f8 <USER_SPI_initialize+0x50>
 80090ec:	20ff      	movs	r0, #255	@ 0xff
 80090ee:	f7ff fe81 	bl	8008df4 <xchg_spi>
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1f6      	bne.n	80090ec <USER_SPI_initialize+0x44>

	ty = 0;
 80090fe:	2300      	movs	r3, #0
 8009100:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009102:	2100      	movs	r1, #0
 8009104:	2000      	movs	r0, #0
 8009106:	f7ff ff5f 	bl	8008fc8 <send_cmd>
 800910a:	4603      	mov	r3, r0
 800910c:	2b01      	cmp	r3, #1
 800910e:	f040 808b 	bne.w	8009228 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009112:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009116:	f7ff fe43 	bl	8008da0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800911a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800911e:	2008      	movs	r0, #8
 8009120:	f7ff ff52 	bl	8008fc8 <send_cmd>
 8009124:	4603      	mov	r3, r0
 8009126:	2b01      	cmp	r3, #1
 8009128:	d151      	bne.n	80091ce <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800912a:	2300      	movs	r3, #0
 800912c:	73fb      	strb	r3, [r7, #15]
 800912e:	e00d      	b.n	800914c <USER_SPI_initialize+0xa4>
 8009130:	7bfc      	ldrb	r4, [r7, #15]
 8009132:	20ff      	movs	r0, #255	@ 0xff
 8009134:	f7ff fe5e 	bl	8008df4 <xchg_spi>
 8009138:	4603      	mov	r3, r0
 800913a:	461a      	mov	r2, r3
 800913c:	f104 0310 	add.w	r3, r4, #16
 8009140:	443b      	add	r3, r7
 8009142:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	3301      	adds	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
 800914c:	7bfb      	ldrb	r3, [r7, #15]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d9ee      	bls.n	8009130 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009152:	7abb      	ldrb	r3, [r7, #10]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d167      	bne.n	8009228 <USER_SPI_initialize+0x180>
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	2baa      	cmp	r3, #170	@ 0xaa
 800915c:	d164      	bne.n	8009228 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800915e:	bf00      	nop
 8009160:	f7ff fe32 	bl	8008dc8 <SPI_Timer_Status>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d007      	beq.n	800917a <USER_SPI_initialize+0xd2>
 800916a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800916e:	20a9      	movs	r0, #169	@ 0xa9
 8009170:	f7ff ff2a 	bl	8008fc8 <send_cmd>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f2      	bne.n	8009160 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800917a:	f7ff fe25 	bl	8008dc8 <SPI_Timer_Status>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d051      	beq.n	8009228 <USER_SPI_initialize+0x180>
 8009184:	2100      	movs	r1, #0
 8009186:	203a      	movs	r0, #58	@ 0x3a
 8009188:	f7ff ff1e 	bl	8008fc8 <send_cmd>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d14a      	bne.n	8009228 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009192:	2300      	movs	r3, #0
 8009194:	73fb      	strb	r3, [r7, #15]
 8009196:	e00d      	b.n	80091b4 <USER_SPI_initialize+0x10c>
 8009198:	7bfc      	ldrb	r4, [r7, #15]
 800919a:	20ff      	movs	r0, #255	@ 0xff
 800919c:	f7ff fe2a 	bl	8008df4 <xchg_spi>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	f104 0310 	add.w	r3, r4, #16
 80091a8:	443b      	add	r3, r7
 80091aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	3301      	adds	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d9ee      	bls.n	8009198 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80091ba:	7a3b      	ldrb	r3, [r7, #8]
 80091bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USER_SPI_initialize+0x120>
 80091c4:	230c      	movs	r3, #12
 80091c6:	e000      	b.n	80091ca <USER_SPI_initialize+0x122>
 80091c8:	2304      	movs	r3, #4
 80091ca:	737b      	strb	r3, [r7, #13]
 80091cc:	e02c      	b.n	8009228 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80091ce:	2100      	movs	r1, #0
 80091d0:	20a9      	movs	r0, #169	@ 0xa9
 80091d2:	f7ff fef9 	bl	8008fc8 <send_cmd>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d804      	bhi.n	80091e6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80091dc:	2302      	movs	r3, #2
 80091de:	737b      	strb	r3, [r7, #13]
 80091e0:	23a9      	movs	r3, #169	@ 0xa9
 80091e2:	73bb      	strb	r3, [r7, #14]
 80091e4:	e003      	b.n	80091ee <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80091e6:	2301      	movs	r3, #1
 80091e8:	737b      	strb	r3, [r7, #13]
 80091ea:	2301      	movs	r3, #1
 80091ec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80091ee:	bf00      	nop
 80091f0:	f7ff fdea 	bl	8008dc8 <SPI_Timer_Status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d007      	beq.n	800920a <USER_SPI_initialize+0x162>
 80091fa:	7bbb      	ldrb	r3, [r7, #14]
 80091fc:	2100      	movs	r1, #0
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fee2 	bl	8008fc8 <send_cmd>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f2      	bne.n	80091f0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800920a:	f7ff fddd 	bl	8008dc8 <SPI_Timer_Status>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <USER_SPI_initialize+0x17c>
 8009214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009218:	2010      	movs	r0, #16
 800921a:	f7ff fed5 	bl	8008fc8 <send_cmd>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <USER_SPI_initialize+0x180>
				ty = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009228:	4a14      	ldr	r2, [pc, #80]	@ (800927c <USER_SPI_initialize+0x1d4>)
 800922a:	7b7b      	ldrb	r3, [r7, #13]
 800922c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800922e:	f7ff fe4a 	bl	8008ec6 <despiselect>

	if (ty) {			/* OK */
 8009232:	7b7b      	ldrb	r3, [r7, #13]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d012      	beq.n	800925e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <USER_SPI_initialize+0x1d0>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <USER_SPI_initialize+0x1d0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f042 0210 	orr.w	r2, r2, #16
 800924a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800924c:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	f023 0301 	bic.w	r3, r3, #1
 8009256:	b2da      	uxtb	r2, r3
 8009258:	4b06      	ldr	r3, [pc, #24]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	e002      	b.n	8009264 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800925e:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 8009260:	2201      	movs	r2, #1
 8009262:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009264:	4b03      	ldr	r3, [pc, #12]	@ (8009274 <USER_SPI_initialize+0x1cc>)
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	b2db      	uxtb	r3, r3
}
 800926a:	4618      	mov	r0, r3
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	bd90      	pop	{r4, r7, pc}
 8009272:	bf00      	nop
 8009274:	20000038 	.word	0x20000038
 8009278:	20000580 	.word	0x20000580
 800927c:	20001e4d 	.word	0x20001e4d

08009280 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800928a:	79fb      	ldrb	r3, [r7, #7]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <USER_SPI_status+0x14>
 8009290:	2301      	movs	r3, #1
 8009292:	e002      	b.n	800929a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009294:	4b04      	ldr	r3, [pc, #16]	@ (80092a8 <USER_SPI_status+0x28>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	b2db      	uxtb	r3, r3
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000038 	.word	0x20000038

080092ac <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60b9      	str	r1, [r7, #8]
 80092b4:	607a      	str	r2, [r7, #4]
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4603      	mov	r3, r0
 80092ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80092bc:	7bfb      	ldrb	r3, [r7, #15]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <USER_SPI_read+0x1c>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <USER_SPI_read+0x20>
 80092c8:	2304      	movs	r3, #4
 80092ca:	e04d      	b.n	8009368 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80092cc:	4b28      	ldr	r3, [pc, #160]	@ (8009370 <USER_SPI_read+0xc4>)
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <USER_SPI_read+0x32>
 80092da:	2303      	movs	r3, #3
 80092dc:	e044      	b.n	8009368 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80092de:	4b25      	ldr	r3, [pc, #148]	@ (8009374 <USER_SPI_read+0xc8>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d102      	bne.n	80092f0 <USER_SPI_read+0x44>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	025b      	lsls	r3, r3, #9
 80092ee:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d111      	bne.n	800931a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80092f6:	6879      	ldr	r1, [r7, #4]
 80092f8:	2011      	movs	r0, #17
 80092fa:	f7ff fe65 	bl	8008fc8 <send_cmd>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d129      	bne.n	8009358 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009308:	68b8      	ldr	r0, [r7, #8]
 800930a:	f7ff fe02 	bl	8008f12 <rcvr_datablock>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d021      	beq.n	8009358 <USER_SPI_read+0xac>
			count = 0;
 8009314:	2300      	movs	r3, #0
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	e01e      	b.n	8009358 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	2012      	movs	r0, #18
 800931e:	f7ff fe53 	bl	8008fc8 <send_cmd>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d117      	bne.n	8009358 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009328:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f7ff fdf0 	bl	8008f12 <rcvr_datablock>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <USER_SPI_read+0xa2>
				buff += 512;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800933e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	3b01      	subs	r3, #1
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1ed      	bne.n	8009328 <USER_SPI_read+0x7c>
 800934c:	e000      	b.n	8009350 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800934e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009350:	2100      	movs	r1, #0
 8009352:	200c      	movs	r0, #12
 8009354:	f7ff fe38 	bl	8008fc8 <send_cmd>
		}
	}
	despiselect();
 8009358:	f7ff fdb5 	bl	8008ec6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	bf14      	ite	ne
 8009362:	2301      	movne	r3, #1
 8009364:	2300      	moveq	r3, #0
 8009366:	b2db      	uxtb	r3, r3
}
 8009368:	4618      	mov	r0, r3
 800936a:	3710      	adds	r7, #16
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}
 8009370:	20000038 	.word	0x20000038
 8009374:	20001e4d 	.word	0x20001e4d

08009378 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	60b9      	str	r1, [r7, #8]
 8009380:	607a      	str	r2, [r7, #4]
 8009382:	603b      	str	r3, [r7, #0]
 8009384:	4603      	mov	r3, r0
 8009386:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d102      	bne.n	8009394 <USER_SPI_write+0x1c>
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <USER_SPI_write+0x20>
 8009394:	2304      	movs	r3, #4
 8009396:	e063      	b.n	8009460 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009398:	4b33      	ldr	r3, [pc, #204]	@ (8009468 <USER_SPI_write+0xf0>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <USER_SPI_write+0x32>
 80093a6:	2303      	movs	r3, #3
 80093a8:	e05a      	b.n	8009460 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80093aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009468 <USER_SPI_write+0xf0>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <USER_SPI_write+0x44>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e051      	b.n	8009460 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80093bc:	4b2b      	ldr	r3, [pc, #172]	@ (800946c <USER_SPI_write+0xf4>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 0308 	and.w	r3, r3, #8
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <USER_SPI_write+0x56>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	025b      	lsls	r3, r3, #9
 80093cc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d110      	bne.n	80093f6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	2018      	movs	r0, #24
 80093d8:	f7ff fdf6 	bl	8008fc8 <send_cmd>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d136      	bne.n	8009450 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80093e2:	21fe      	movs	r1, #254	@ 0xfe
 80093e4:	68b8      	ldr	r0, [r7, #8]
 80093e6:	f7ff fdbd 	bl	8008f64 <xmit_datablock>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d02f      	beq.n	8009450 <USER_SPI_write+0xd8>
			count = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	603b      	str	r3, [r7, #0]
 80093f4:	e02c      	b.n	8009450 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80093f6:	4b1d      	ldr	r3, [pc, #116]	@ (800946c <USER_SPI_write+0xf4>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	f003 0306 	and.w	r3, r3, #6
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <USER_SPI_write+0x92>
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	2097      	movs	r0, #151	@ 0x97
 8009406:	f7ff fddf 	bl	8008fc8 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	2019      	movs	r0, #25
 800940e:	f7ff fddb 	bl	8008fc8 <send_cmd>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d11b      	bne.n	8009450 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009418:	21fc      	movs	r1, #252	@ 0xfc
 800941a:	68b8      	ldr	r0, [r7, #8]
 800941c:	f7ff fda2 	bl	8008f64 <xmit_datablock>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00a      	beq.n	800943c <USER_SPI_write+0xc4>
				buff += 512;
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800942c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	3b01      	subs	r3, #1
 8009432:	603b      	str	r3, [r7, #0]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1ee      	bne.n	8009418 <USER_SPI_write+0xa0>
 800943a:	e000      	b.n	800943e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800943c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800943e:	21fd      	movs	r1, #253	@ 0xfd
 8009440:	2000      	movs	r0, #0
 8009442:	f7ff fd8f 	bl	8008f64 <xmit_datablock>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <USER_SPI_write+0xd8>
 800944c:	2301      	movs	r3, #1
 800944e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009450:	f7ff fd39 	bl	8008ec6 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	bf14      	ite	ne
 800945a:	2301      	movne	r3, #1
 800945c:	2300      	moveq	r3, #0
 800945e:	b2db      	uxtb	r3, r3
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}
 8009468:	20000038 	.word	0x20000038
 800946c:	20001e4d 	.word	0x20001e4d

08009470 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08c      	sub	sp, #48	@ 0x30
 8009474:	af00      	add	r7, sp, #0
 8009476:	4603      	mov	r3, r0
 8009478:	603a      	str	r2, [r7, #0]
 800947a:	71fb      	strb	r3, [r7, #7]
 800947c:	460b      	mov	r3, r1
 800947e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <USER_SPI_ioctl+0x1a>
 8009486:	2304      	movs	r3, #4
 8009488:	e15a      	b.n	8009740 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800948a:	4baf      	ldr	r3, [pc, #700]	@ (8009748 <USER_SPI_ioctl+0x2d8>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	f003 0301 	and.w	r3, r3, #1
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <USER_SPI_ioctl+0x2c>
 8009498:	2303      	movs	r3, #3
 800949a:	e151      	b.n	8009740 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80094a2:	79bb      	ldrb	r3, [r7, #6]
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	f200 8136 	bhi.w	8009716 <USER_SPI_ioctl+0x2a6>
 80094aa:	a201      	add	r2, pc, #4	@ (adr r2, 80094b0 <USER_SPI_ioctl+0x40>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c5 	.word	0x080094c5
 80094b4:	080094d9 	.word	0x080094d9
 80094b8:	08009717 	.word	0x08009717
 80094bc:	08009585 	.word	0x08009585
 80094c0:	0800967b 	.word	0x0800967b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80094c4:	f7ff fd0c 	bl	8008ee0 <spiselect>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 8127 	beq.w	800971e <USER_SPI_ioctl+0x2ae>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80094d6:	e122      	b.n	800971e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80094d8:	2100      	movs	r1, #0
 80094da:	2009      	movs	r0, #9
 80094dc:	f7ff fd74 	bl	8008fc8 <send_cmd>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f040 811d 	bne.w	8009722 <USER_SPI_ioctl+0x2b2>
 80094e8:	f107 030c 	add.w	r3, r7, #12
 80094ec:	2110      	movs	r1, #16
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7ff fd0f 	bl	8008f12 <rcvr_datablock>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 8113 	beq.w	8009722 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80094fc:	7b3b      	ldrb	r3, [r7, #12]
 80094fe:	099b      	lsrs	r3, r3, #6
 8009500:	b2db      	uxtb	r3, r3
 8009502:	2b01      	cmp	r3, #1
 8009504:	d111      	bne.n	800952a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009506:	7d7b      	ldrb	r3, [r7, #21]
 8009508:	461a      	mov	r2, r3
 800950a:	7d3b      	ldrb	r3, [r7, #20]
 800950c:	021b      	lsls	r3, r3, #8
 800950e:	4413      	add	r3, r2
 8009510:	461a      	mov	r2, r3
 8009512:	7cfb      	ldrb	r3, [r7, #19]
 8009514:	041b      	lsls	r3, r3, #16
 8009516:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800951a:	4413      	add	r3, r2
 800951c:	3301      	adds	r3, #1
 800951e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	029a      	lsls	r2, r3, #10
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	e028      	b.n	800957c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800952a:	7c7b      	ldrb	r3, [r7, #17]
 800952c:	f003 030f 	and.w	r3, r3, #15
 8009530:	b2da      	uxtb	r2, r3
 8009532:	7dbb      	ldrb	r3, [r7, #22]
 8009534:	09db      	lsrs	r3, r3, #7
 8009536:	b2db      	uxtb	r3, r3
 8009538:	4413      	add	r3, r2
 800953a:	b2da      	uxtb	r2, r3
 800953c:	7d7b      	ldrb	r3, [r7, #21]
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	b2db      	uxtb	r3, r3
 8009542:	f003 0306 	and.w	r3, r3, #6
 8009546:	b2db      	uxtb	r3, r3
 8009548:	4413      	add	r3, r2
 800954a:	b2db      	uxtb	r3, r3
 800954c:	3302      	adds	r3, #2
 800954e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009552:	7d3b      	ldrb	r3, [r7, #20]
 8009554:	099b      	lsrs	r3, r3, #6
 8009556:	b2db      	uxtb	r3, r3
 8009558:	461a      	mov	r2, r3
 800955a:	7cfb      	ldrb	r3, [r7, #19]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	7cbb      	ldrb	r3, [r7, #18]
 8009562:	029b      	lsls	r3, r3, #10
 8009564:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009568:	4413      	add	r3, r2
 800956a:	3301      	adds	r3, #1
 800956c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800956e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009572:	3b09      	subs	r3, #9
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	409a      	lsls	r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009582:	e0ce      	b.n	8009722 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009584:	4b71      	ldr	r3, [pc, #452]	@ (800974c <USER_SPI_ioctl+0x2dc>)
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d031      	beq.n	80095f4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009590:	2100      	movs	r1, #0
 8009592:	208d      	movs	r0, #141	@ 0x8d
 8009594:	f7ff fd18 	bl	8008fc8 <send_cmd>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	f040 80c3 	bne.w	8009726 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80095a0:	20ff      	movs	r0, #255	@ 0xff
 80095a2:	f7ff fc27 	bl	8008df4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	2110      	movs	r1, #16
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff fcb0 	bl	8008f12 <rcvr_datablock>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	f000 80b6 	beq.w	8009726 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80095ba:	2330      	movs	r3, #48	@ 0x30
 80095bc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80095c0:	e007      	b.n	80095d2 <USER_SPI_ioctl+0x162>
 80095c2:	20ff      	movs	r0, #255	@ 0xff
 80095c4:	f7ff fc16 	bl	8008df4 <xchg_spi>
 80095c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095cc:	3b01      	subs	r3, #1
 80095ce:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80095d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d1f3      	bne.n	80095c2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80095da:	7dbb      	ldrb	r3, [r7, #22]
 80095dc:	091b      	lsrs	r3, r3, #4
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	461a      	mov	r2, r3
 80095e2:	2310      	movs	r3, #16
 80095e4:	fa03 f202 	lsl.w	r2, r3, r2
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80095f2:	e098      	b.n	8009726 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80095f4:	2100      	movs	r1, #0
 80095f6:	2009      	movs	r0, #9
 80095f8:	f7ff fce6 	bl	8008fc8 <send_cmd>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f040 8091 	bne.w	8009726 <USER_SPI_ioctl+0x2b6>
 8009604:	f107 030c 	add.w	r3, r7, #12
 8009608:	2110      	movs	r1, #16
 800960a:	4618      	mov	r0, r3
 800960c:	f7ff fc81 	bl	8008f12 <rcvr_datablock>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	f000 8087 	beq.w	8009726 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009618:	4b4c      	ldr	r3, [pc, #304]	@ (800974c <USER_SPI_ioctl+0x2dc>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 0302 	and.w	r3, r3, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	d012      	beq.n	800964a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009624:	7dbb      	ldrb	r3, [r7, #22]
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800962c:	7dfa      	ldrb	r2, [r7, #23]
 800962e:	09d2      	lsrs	r2, r2, #7
 8009630:	b2d2      	uxtb	r2, r2
 8009632:	4413      	add	r3, r2
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	7e7b      	ldrb	r3, [r7, #25]
 8009638:	099b      	lsrs	r3, r3, #6
 800963a:	b2db      	uxtb	r3, r3
 800963c:	3b01      	subs	r3, #1
 800963e:	fa02 f303 	lsl.w	r3, r2, r3
 8009642:	461a      	mov	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	e013      	b.n	8009672 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800964a:	7dbb      	ldrb	r3, [r7, #22]
 800964c:	109b      	asrs	r3, r3, #2
 800964e:	b29b      	uxth	r3, r3
 8009650:	f003 031f 	and.w	r3, r3, #31
 8009654:	3301      	adds	r3, #1
 8009656:	7dfa      	ldrb	r2, [r7, #23]
 8009658:	00d2      	lsls	r2, r2, #3
 800965a:	f002 0218 	and.w	r2, r2, #24
 800965e:	7df9      	ldrb	r1, [r7, #23]
 8009660:	0949      	lsrs	r1, r1, #5
 8009662:	b2c9      	uxtb	r1, r1
 8009664:	440a      	add	r2, r1
 8009666:	3201      	adds	r2, #1
 8009668:	fb02 f303 	mul.w	r3, r2, r3
 800966c:	461a      	mov	r2, r3
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009678:	e055      	b.n	8009726 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800967a:	4b34      	ldr	r3, [pc, #208]	@ (800974c <USER_SPI_ioctl+0x2dc>)
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	f003 0306 	and.w	r3, r3, #6
 8009682:	2b00      	cmp	r3, #0
 8009684:	d051      	beq.n	800972a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009686:	f107 020c 	add.w	r2, r7, #12
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	210b      	movs	r1, #11
 800968e:	4618      	mov	r0, r3
 8009690:	f7ff feee 	bl	8009470 <USER_SPI_ioctl>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d149      	bne.n	800972e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800969a:	7b3b      	ldrb	r3, [r7, #12]
 800969c:	099b      	lsrs	r3, r3, #6
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d104      	bne.n	80096ae <USER_SPI_ioctl+0x23e>
 80096a4:	7dbb      	ldrb	r3, [r7, #22]
 80096a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d041      	beq.n	8009732 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	623b      	str	r3, [r7, #32]
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096b8:	6a3b      	ldr	r3, [r7, #32]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80096be:	4b23      	ldr	r3, [pc, #140]	@ (800974c <USER_SPI_ioctl+0x2dc>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80096ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096cc:	025b      	lsls	r3, r3, #9
 80096ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	025b      	lsls	r3, r3, #9
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80096d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d8:	2020      	movs	r0, #32
 80096da:	f7ff fc75 	bl	8008fc8 <send_cmd>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d128      	bne.n	8009736 <USER_SPI_ioctl+0x2c6>
 80096e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80096e6:	2021      	movs	r0, #33	@ 0x21
 80096e8:	f7ff fc6e 	bl	8008fc8 <send_cmd>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d121      	bne.n	8009736 <USER_SPI_ioctl+0x2c6>
 80096f2:	2100      	movs	r1, #0
 80096f4:	2026      	movs	r0, #38	@ 0x26
 80096f6:	f7ff fc67 	bl	8008fc8 <send_cmd>
 80096fa:	4603      	mov	r3, r0
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11a      	bne.n	8009736 <USER_SPI_ioctl+0x2c6>
 8009700:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009704:	f7ff fbbc 	bl	8008e80 <wait_ready>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d013      	beq.n	8009736 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800970e:	2300      	movs	r3, #0
 8009710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009714:	e00f      	b.n	8009736 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009716:	2304      	movs	r3, #4
 8009718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800971c:	e00c      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		break;
 800971e:	bf00      	nop
 8009720:	e00a      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		break;
 8009722:	bf00      	nop
 8009724:	e008      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		break;
 8009726:	bf00      	nop
 8009728:	e006      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800972a:	bf00      	nop
 800972c:	e004      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800972e:	bf00      	nop
 8009730:	e002      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009732:	bf00      	nop
 8009734:	e000      	b.n	8009738 <USER_SPI_ioctl+0x2c8>
		break;
 8009736:	bf00      	nop
	}

	despiselect();
 8009738:	f7ff fbc5 	bl	8008ec6 <despiselect>

	return res;
 800973c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009740:	4618      	mov	r0, r3
 8009742:	3730      	adds	r7, #48	@ 0x30
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20000038 	.word	0x20000038
 800974c:	20001e4d 	.word	0x20001e4d

08009750 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009756:	2300      	movs	r3, #0
 8009758:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	2218      	movs	r2, #24
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f001 f92d 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009768:	233f      	movs	r3, #63	@ 0x3f
 800976a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800976c:	2381      	movs	r3, #129	@ 0x81
 800976e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009770:	1dfb      	adds	r3, r7, #7
 8009772:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009774:	2301      	movs	r3, #1
 8009776:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009778:	f107 0308 	add.w	r3, r7, #8
 800977c:	2100      	movs	r1, #0
 800977e:	4618      	mov	r0, r3
 8009780:	f001 fba8 	bl	800aed4 <hci_send_req>
 8009784:	4603      	mov	r3, r0
 8009786:	2b00      	cmp	r3, #0
 8009788:	da01      	bge.n	800978e <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800978a:	23ff      	movs	r3, #255	@ 0xff
 800978c:	e000      	b.n	8009790 <aci_gap_set_non_discoverable+0x40>
  return status;
 800978e:	79fb      	ldrb	r3, [r7, #7]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3720      	adds	r7, #32
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009798:	b5b0      	push	{r4, r5, r7, lr}
 800979a:	b0ce      	sub	sp, #312	@ 0x138
 800979c:	af00      	add	r7, sp, #0
 800979e:	4605      	mov	r5, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	4610      	mov	r0, r2
 80097a4:	4619      	mov	r1, r3
 80097a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80097ae:	462a      	mov	r2, r5
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097b6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80097ba:	4622      	mov	r2, r4
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097c2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80097c6:	4602      	mov	r2, r0
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80097ce:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80097d2:	460a      	mov	r2, r1
 80097d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80097d6:	f107 0310 	add.w	r3, r7, #16
 80097da:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80097de:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80097e2:	3308      	adds	r3, #8
 80097e4:	f107 0210 	add.w	r2, r7, #16
 80097e8:	4413      	add	r3, r2
 80097ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80097ee:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80097f2:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80097f6:	4413      	add	r3, r2
 80097f8:	3309      	adds	r3, #9
 80097fa:	f107 0210 	add.w	r2, r7, #16
 80097fe:	4413      	add	r3, r2
 8009800:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009804:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8009808:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800980c:	2200      	movs	r2, #0
 800980e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800981a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800981e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8009822:	7812      	ldrb	r2, [r2, #0]
 8009824:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009826:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800982a:	3301      	adds	r3, #1
 800982c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009830:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009834:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009838:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800983c:	8812      	ldrh	r2, [r2, #0]
 800983e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009842:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009846:	3302      	adds	r3, #2
 8009848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800984c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009850:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009854:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8009858:	8812      	ldrh	r2, [r2, #0]
 800985a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800985e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009862:	3302      	adds	r3, #2
 8009864:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009868:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800986c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8009870:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8009874:	7812      	ldrb	r2, [r2, #0]
 8009876:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009878:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800987c:	3301      	adds	r3, #1
 800987e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009882:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009886:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800988a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800988c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009890:	3301      	adds	r3, #1
 8009892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009896:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800989a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800989e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80098a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098a4:	3301      	adds	r3, #1
 80098a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80098aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80098ae:	3308      	adds	r3, #8
 80098b0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80098b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f872 	bl	800a9a2 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80098be:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80098c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80098c6:	4413      	add	r3, r2
 80098c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80098cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80098d0:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80098d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80098d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098da:	3301      	adds	r3, #1
 80098dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80098e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80098e4:	3301      	adds	r3, #1
 80098e6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80098ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 f857 	bl	800a9a2 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80098f4:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80098f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80098fc:	4413      	add	r3, r2
 80098fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8009902:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009906:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800990a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800990c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009910:	3302      	adds	r3, #2
 8009912:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009916:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800991a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800991e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009924:	3302      	adds	r3, #2
 8009926:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800992a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800992e:	2218      	movs	r2, #24
 8009930:	2100      	movs	r1, #0
 8009932:	4618      	mov	r0, r3
 8009934:	f001 f845 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009938:	233f      	movs	r3, #63	@ 0x3f
 800993a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800993e:	2383      	movs	r3, #131	@ 0x83
 8009940:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800994c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009950:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009954:	f107 030f 	add.w	r3, r7, #15
 8009958:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800995c:	2301      	movs	r3, #1
 800995e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009962:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009966:	2100      	movs	r1, #0
 8009968:	4618      	mov	r0, r3
 800996a:	f001 fab3 	bl	800aed4 <hci_send_req>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	da01      	bge.n	8009978 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8009974:	23ff      	movs	r3, #255	@ 0xff
 8009976:	e004      	b.n	8009982 <aci_gap_set_discoverable+0x1ea>
  return status;
 8009978:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800997c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009980:	781b      	ldrb	r3, [r3, #0]
}
 8009982:	4618      	mov	r0, r3
 8009984:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009988:	46bd      	mov	sp, r7
 800998a:	bdb0      	pop	{r4, r5, r7, pc}

0800998c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b0cc      	sub	sp, #304	@ 0x130
 8009990:	af00      	add	r7, sp, #0
 8009992:	4602      	mov	r2, r0
 8009994:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009998:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800999c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800999e:	f107 0310 	add.w	r3, r7, #16
 80099a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80099a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80099aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80099ae:	2200      	movs	r2, #0
 80099b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80099b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80099bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80099c0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099cc:	3301      	adds	r3, #1
 80099ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80099d6:	2218      	movs	r2, #24
 80099d8:	2100      	movs	r1, #0
 80099da:	4618      	mov	r0, r3
 80099dc:	f000 fff1 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099e0:	233f      	movs	r3, #63	@ 0x3f
 80099e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80099e6:	2385      	movs	r3, #133	@ 0x85
 80099e8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80099ec:	f107 0310 	add.w	r3, r7, #16
 80099f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80099f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80099f8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80099fc:	f107 030f 	add.w	r3, r7, #15
 8009a00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009a0e:	2100      	movs	r1, #0
 8009a10:	4618      	mov	r0, r3
 8009a12:	f001 fa5f 	bl	800aed4 <hci_send_req>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	da01      	bge.n	8009a20 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8009a1c:	23ff      	movs	r3, #255	@ 0xff
 8009a1e:	e004      	b.n	8009a2a <aci_gap_set_io_capability+0x9e>
  return status;
 8009a20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a28:	781b      	ldrb	r3, [r3, #0]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8009a34:	b5b0      	push	{r4, r5, r7, lr}
 8009a36:	b0cc      	sub	sp, #304	@ 0x130
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4605      	mov	r5, r0
 8009a3c:	460c      	mov	r4, r1
 8009a3e:	4610      	mov	r0, r2
 8009a40:	4619      	mov	r1, r3
 8009a42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a46:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009a4a:	462a      	mov	r2, r5
 8009a4c:	701a      	strb	r2, [r3, #0]
 8009a4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009a56:	4622      	mov	r2, r4
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a5e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009a62:	4602      	mov	r2, r0
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8009a6e:	460a      	mov	r2, r1
 8009a70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8009a72:	f107 0310 	add.w	r3, r7, #16
 8009a76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009a7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009a7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009a82:	2200      	movs	r2, #0
 8009a84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009a90:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009a94:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8009aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009aaa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009aae:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009ab2:	7812      	ldrb	r2, [r2, #0]
 8009ab4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aba:	3301      	adds	r3, #1
 8009abc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8009ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ac4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ac8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009acc:	7812      	ldrb	r2, [r2, #0]
 8009ace:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ade:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ae2:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8009ae6:	7812      	ldrb	r2, [r2, #0]
 8009ae8:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009aee:	3301      	adds	r3, #1
 8009af0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009af8:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8009afc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b02:	3301      	adds	r3, #1
 8009b04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b0c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8009b10:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009b12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b16:	3301      	adds	r3, #1
 8009b18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8009b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b20:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8009b24:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b34:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8009b38:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8009b3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b40:	3304      	adds	r3, #4
 8009b42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009b4a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8009b4e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009b50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b54:	3301      	adds	r3, #1
 8009b56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b5e:	2218      	movs	r2, #24
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f000 ff2d 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b68:	233f      	movs	r3, #63	@ 0x3f
 8009b6a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8009b6e:	2386      	movs	r3, #134	@ 0x86
 8009b70:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009b74:	f107 0310 	add.w	r3, r7, #16
 8009b78:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009b80:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009b84:	f107 030f 	add.w	r3, r7, #15
 8009b88:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009b96:	2100      	movs	r1, #0
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f99b 	bl	800aed4 <hci_send_req>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	da01      	bge.n	8009ba8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8009ba4:	23ff      	movs	r3, #255	@ 0xff
 8009ba6:	e004      	b.n	8009bb2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009ba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009bb0:	781b      	ldrb	r3, [r3, #0]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bdb0      	pop	{r4, r5, r7, pc}

08009bbc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b0cc      	sub	sp, #304	@ 0x130
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bc8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009bcc:	6019      	str	r1, [r3, #0]
 8009bce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009bd2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009bd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009bd8:	f107 0310 	add.w	r3, r7, #16
 8009bdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009be0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009be4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009be8:	2200      	movs	r2, #0
 8009bea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009bf6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009bfa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009bfe:	8812      	ldrh	r2, [r2, #0]
 8009c00:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c06:	3302      	adds	r3, #2
 8009c08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8009c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009c10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c14:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009c18:	6812      	ldr	r2, [r2, #0]
 8009c1a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009c1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c22:	3304      	adds	r3, #4
 8009c24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c2c:	2218      	movs	r2, #24
 8009c2e:	2100      	movs	r1, #0
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fec6 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c36:	233f      	movs	r3, #63	@ 0x3f
 8009c38:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8009c3c:	2388      	movs	r3, #136	@ 0x88
 8009c3e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009c42:	f107 0310 	add.w	r3, r7, #16
 8009c46:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009c4e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009c52:	f107 030f 	add.w	r3, r7, #15
 8009c56:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009c64:	2100      	movs	r1, #0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f001 f934 	bl	800aed4 <hci_send_req>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da01      	bge.n	8009c76 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009c72:	23ff      	movs	r3, #255	@ 0xff
 8009c74:	e004      	b.n	8009c80 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009c7a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009c7e:	781b      	ldrb	r3, [r3, #0]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009c8a:	b590      	push	{r4, r7, lr}
 8009c8c:	b0cd      	sub	sp, #308	@ 0x134
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4604      	mov	r4, r0
 8009c92:	4608      	mov	r0, r1
 8009c94:	4611      	mov	r1, r2
 8009c96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009c9a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009ca4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009ca8:	4622      	mov	r2, r4
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cb0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	701a      	strb	r2, [r3, #0]
 8009cb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009cbc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009cc0:	460a      	mov	r2, r1
 8009cc2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009cc4:	f107 0310 	add.w	r3, r7, #16
 8009cc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009ccc:	f107 0308 	add.w	r3, r7, #8
 8009cd0:	2207      	movs	r2, #7
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f000 fe74 	bl	800a9c2 <Osal_MemSet>
  int index_input = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8009ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009ce4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009ce8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009cec:	7812      	ldrb	r2, [r2, #0]
 8009cee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009cfe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d0e:	3301      	adds	r3, #1
 8009d10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009d14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009d18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009d1c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009d20:	7812      	ldrb	r2, [r2, #0]
 8009d22:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d28:	3301      	adds	r3, #1
 8009d2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009d2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d32:	2218      	movs	r2, #24
 8009d34:	2100      	movs	r1, #0
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 fe43 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009d3c:	233f      	movs	r3, #63	@ 0x3f
 8009d3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8009d42:	238a      	movs	r3, #138	@ 0x8a
 8009d44:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009d48:	f107 0310 	add.w	r3, r7, #16
 8009d4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009d54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8009d58:	f107 0308 	add.w	r3, r7, #8
 8009d5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8009d60:	2307      	movs	r3, #7
 8009d62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f001 f8b1 	bl	800aed4 <hci_send_req>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	da01      	bge.n	8009d7c <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009d78:	23ff      	movs	r3, #255	@ 0xff
 8009d7a:	e02e      	b.n	8009dda <aci_gap_init+0x150>
  if ( resp.Status )
 8009d7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d80:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d005      	beq.n	8009d96 <aci_gap_init+0x10c>
    return resp.Status;
 8009d8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	e021      	b.n	8009dda <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009d96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009d9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009d9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009da8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009db0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009db4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009db8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8009dc2:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009dc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009dc8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8009dcc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8009dd6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009dd8:	2300      	movs	r3, #0
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd90      	pop	{r4, r7, pc}

08009de4 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b0cc      	sub	sp, #304	@ 0x130
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4602      	mov	r2, r0
 8009dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009df0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009df4:	6019      	str	r1, [r3, #0]
 8009df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009dfa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009dfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009e00:	f107 0310 	add.w	r3, r7, #16
 8009e04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009e08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009e10:	2200      	movs	r2, #0
 8009e12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009e1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009e22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8009e26:	7812      	ldrb	r2, [r2, #0]
 8009e28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009e38:	1c58      	adds	r0, r3, #1
 8009e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e3e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009e42:	781a      	ldrb	r2, [r3, #0]
 8009e44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e48:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	f000 fda8 	bl	800a9a2 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009e52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009e56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8009e60:	4413      	add	r3, r2
 8009e62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009e6a:	2218      	movs	r2, #24
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f000 fda7 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e74:	233f      	movs	r3, #63	@ 0x3f
 8009e76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8009e7a:	238e      	movs	r3, #142	@ 0x8e
 8009e7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009e80:	f107 0310 	add.w	r3, r7, #16
 8009e84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009e8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009e90:	f107 030f 	add.w	r3, r7, #15
 8009e94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009ea2:	2100      	movs	r1, #0
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 f815 	bl	800aed4 <hci_send_req>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	da01      	bge.n	8009eb4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009eb0:	23ff      	movs	r3, #255	@ 0xff
 8009eb2:	e004      	b.n	8009ebe <aci_gap_update_adv_data+0xda>
  return status;
 8009eb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009eb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009ebc:	781b      	ldrb	r3, [r3, #0]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b088      	sub	sp, #32
 8009ecc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ed2:	f107 0308 	add.w	r3, r7, #8
 8009ed6:	2218      	movs	r2, #24
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 fd71 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ee0:	233f      	movs	r3, #63	@ 0x3f
 8009ee2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009ee4:	2392      	movs	r3, #146	@ 0x92
 8009ee6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009ee8:	1dfb      	adds	r3, r7, #7
 8009eea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009eec:	2301      	movs	r3, #1
 8009eee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009ef0:	f107 0308 	add.w	r3, r7, #8
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f000 ffec 	bl	800aed4 <hci_send_req>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	da01      	bge.n	8009f06 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009f02:	23ff      	movs	r3, #255	@ 0xff
 8009f04:	e000      	b.n	8009f08 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009f06:	79fb      	ldrb	r3, [r7, #7]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b0cc      	sub	sp, #304	@ 0x130
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4602      	mov	r2, r0
 8009f18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f1c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f26:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8009f2a:	460a      	mov	r2, r1
 8009f2c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009f2e:	f107 0310 	add.w	r3, r7, #16
 8009f32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8009f36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009f3a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f42:	2300      	movs	r3, #0
 8009f44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8009f54:	8812      	ldrh	r2, [r2, #0]
 8009f56:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009f66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8009f6a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8009f6e:	7812      	ldrb	r2, [r2, #0]
 8009f70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009f76:	3301      	adds	r3, #1
 8009f78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009f80:	2218      	movs	r2, #24
 8009f82:	2100      	movs	r1, #0
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fd1c 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f8a:	233f      	movs	r3, #63	@ 0x3f
 8009f8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8009f90:	23a5      	movs	r3, #165	@ 0xa5
 8009f92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8009f96:	f107 0310 	add.w	r3, r7, #16
 8009f9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8009f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009fa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8009fa6:	f107 030f 	add.w	r3, r7, #15
 8009faa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 ff8a 	bl	800aed4 <hci_send_req>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da01      	bge.n	8009fca <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009fc6:	23ff      	movs	r3, #255	@ 0xff
 8009fc8:	e004      	b.n	8009fd4 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8009fce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8009fd2:	781b      	ldrb	r3, [r3, #0]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b088      	sub	sp, #32
 8009fe2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	2218      	movs	r2, #24
 8009fee:	2100      	movs	r1, #0
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f000 fce6 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ff6:	233f      	movs	r3, #63	@ 0x3f
 8009ff8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009ffa:	f240 1301 	movw	r3, #257	@ 0x101
 8009ffe:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a000:	1dfb      	adds	r3, r7, #7
 800a002:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a004:	2301      	movs	r3, #1
 800a006:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a008:	f107 0308 	add.w	r3, r7, #8
 800a00c:	2100      	movs	r1, #0
 800a00e:	4618      	mov	r0, r3
 800a010:	f000 ff60 	bl	800aed4 <hci_send_req>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	da01      	bge.n	800a01e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a01a:	23ff      	movs	r3, #255	@ 0xff
 800a01c:	e000      	b.n	800a020 <aci_gatt_init+0x42>
  return status;
 800a01e:	79fb      	ldrb	r3, [r7, #7]
}
 800a020:	4618      	mov	r0, r3
 800a022:	3720      	adds	r7, #32
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b0cf      	sub	sp, #316	@ 0x13c
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4604      	mov	r4, r0
 800a030:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800a034:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800a038:	6001      	str	r1, [r0, #0]
 800a03a:	4610      	mov	r0, r2
 800a03c:	4619      	mov	r1, r3
 800a03e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a042:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a046:	4622      	mov	r2, r4
 800a048:	701a      	strb	r2, [r3, #0]
 800a04a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a04e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a052:	4602      	mov	r2, r0
 800a054:	701a      	strb	r2, [r3, #0]
 800a056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a05a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a05e:	460a      	mov	r2, r1
 800a060:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a06a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a06e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d00a      	beq.n	800a08e <aci_gatt_add_service+0x66>
 800a078:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a07c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d101      	bne.n	800a08a <aci_gatt_add_service+0x62>
 800a086:	2311      	movs	r3, #17
 800a088:	e002      	b.n	800a090 <aci_gatt_add_service+0x68>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <aci_gatt_add_service+0x68>
 800a08e:	2303      	movs	r3, #3
 800a090:	f107 0210 	add.w	r2, r7, #16
 800a094:	4413      	add	r3, r2
 800a096:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a09a:	f107 030c 	add.w	r3, r7, #12
 800a09e:	2203      	movs	r2, #3
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 fc8d 	bl	800a9c2 <Osal_MemSet>
  int index_input = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a0ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0b2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a0b6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a0c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a0cc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d002      	beq.n	800a0dc <aci_gatt_add_service+0xb4>
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d004      	beq.n	800a0e4 <aci_gatt_add_service+0xbc>
 800a0da:	e007      	b.n	800a0ec <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a0dc:	2302      	movs	r3, #2
 800a0de:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a0e2:	e005      	b.n	800a0f0 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a0e4:	2310      	movs	r3, #16
 800a0e6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800a0ea:	e001      	b.n	800a0f0 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a0ec:	2397      	movs	r3, #151	@ 0x97
 800a0ee:	e06c      	b.n	800a1ca <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a0f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a0f4:	1c58      	adds	r0, r3, #1
 800a0f6:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800a0fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a0fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a102:	6819      	ldr	r1, [r3, #0]
 800a104:	f000 fc4d 	bl	800a9a2 <Osal_MemCpy>
    index_input += size;
 800a108:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800a10c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a110:	4413      	add	r3, r2
 800a112:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800a116:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a11a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a11e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a122:	7812      	ldrb	r2, [r2, #0]
 800a124:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a126:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a12a:	3301      	adds	r3, #1
 800a12c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a130:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a134:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800a138:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a13c:	7812      	ldrb	r2, [r2, #0]
 800a13e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a140:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a144:	3301      	adds	r3, #1
 800a146:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a14a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a14e:	2218      	movs	r2, #24
 800a150:	2100      	movs	r1, #0
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fc35 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a158:	233f      	movs	r3, #63	@ 0x3f
 800a15a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800a15e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800a162:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a166:	f107 0310 	add.w	r3, r7, #16
 800a16a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a16e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a172:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800a176:	f107 030c 	add.w	r3, r7, #12
 800a17a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800a17e:	2303      	movs	r3, #3
 800a180:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a184:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a188:	2100      	movs	r1, #0
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fea2 	bl	800aed4 <hci_send_req>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	da01      	bge.n	800a19a <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a196:	23ff      	movs	r3, #255	@ 0xff
 800a198:	e017      	b.n	800a1ca <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a19a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a19e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d005      	beq.n	800a1b4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a1a8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a1ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	e00a      	b.n	800a1ca <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a1b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800a1b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a1bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800a1c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bd90      	pop	{r4, r7, pc}

0800a1d4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a1d4:	b590      	push	{r4, r7, lr}
 800a1d6:	b0d1      	sub	sp, #324	@ 0x144
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4604      	mov	r4, r0
 800a1dc:	4608      	mov	r0, r1
 800a1de:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800a1e2:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800a1e6:	600a      	str	r2, [r1, #0]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800a1f2:	4622      	mov	r2, r4
 800a1f4:	801a      	strh	r2, [r3, #0]
 800a1f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a1fa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a1fe:	4602      	mov	r2, r0
 800a200:	701a      	strb	r2, [r3, #0]
 800a202:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a206:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800a20a:	460a      	mov	r2, r1
 800a20c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a20e:	f107 0318 	add.w	r3, r7, #24
 800a212:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a216:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a21a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	2b01      	cmp	r3, #1
 800a222:	d00a      	beq.n	800a23a <aci_gatt_add_char+0x66>
 800a224:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a228:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d101      	bne.n	800a236 <aci_gatt_add_char+0x62>
 800a232:	2313      	movs	r3, #19
 800a234:	e002      	b.n	800a23c <aci_gatt_add_char+0x68>
 800a236:	2303      	movs	r3, #3
 800a238:	e000      	b.n	800a23c <aci_gatt_add_char+0x68>
 800a23a:	2305      	movs	r3, #5
 800a23c:	f107 0218 	add.w	r2, r7, #24
 800a240:	4413      	add	r3, r2
 800a242:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a246:	f107 0314 	add.w	r3, r7, #20
 800a24a:	2203      	movs	r2, #3
 800a24c:	2100      	movs	r1, #0
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fbb7 	bl	800a9c2 <Osal_MemSet>
  int index_input = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800a25a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a25e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a262:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800a266:	8812      	ldrh	r2, [r2, #0]
 800a268:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a26a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a26e:	3302      	adds	r3, #2
 800a270:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a274:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a278:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a27c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800a280:	7812      	ldrb	r2, [r2, #0]
 800a282:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a284:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a288:	3301      	adds	r3, #1
 800a28a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a28e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a292:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d002      	beq.n	800a2a2 <aci_gatt_add_char+0xce>
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d004      	beq.n	800a2aa <aci_gatt_add_char+0xd6>
 800a2a0:	e007      	b.n	800a2b2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a2a8:	e005      	b.n	800a2b6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a2aa:	2310      	movs	r3, #16
 800a2ac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800a2b0:	e001      	b.n	800a2b6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a2b2:	2397      	movs	r3, #151	@ 0x97
 800a2b4:	e091      	b.n	800a3da <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a2b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800a2ba:	1cd8      	adds	r0, r3, #3
 800a2bc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800a2c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a2c4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800a2c8:	6819      	ldr	r1, [r3, #0]
 800a2ca:	f000 fb6a 	bl	800a9a2 <Osal_MemCpy>
    index_input += size;
 800a2ce:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800a2d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a2dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2e0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800a2e4:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800a2e8:	8812      	ldrh	r2, [r2, #0]
 800a2ea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a2ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a2f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a2fa:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800a2fe:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a300:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a304:	3301      	adds	r3, #1
 800a306:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a30a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a30e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800a312:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a314:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a318:	3301      	adds	r3, #1
 800a31a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a31e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a322:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800a326:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a328:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a32c:	3301      	adds	r3, #1
 800a32e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a332:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a336:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800a33a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a33c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a340:	3301      	adds	r3, #1
 800a342:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a346:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800a34a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800a34e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a350:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a354:	3301      	adds	r3, #1
 800a356:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a35a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a35e:	2218      	movs	r2, #24
 800a360:	2100      	movs	r1, #0
 800a362:	4618      	mov	r0, r3
 800a364:	f000 fb2d 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a368:	233f      	movs	r3, #63	@ 0x3f
 800a36a:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800a36e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800a372:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800a376:	f107 0318 	add.w	r3, r7, #24
 800a37a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800a37e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800a382:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800a386:	f107 0314 	add.w	r3, r7, #20
 800a38a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800a38e:	2303      	movs	r3, #3
 800a390:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a394:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800a398:	2100      	movs	r1, #0
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fd9a 	bl	800aed4 <hci_send_req>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	da01      	bge.n	800a3aa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a3a6:	23ff      	movs	r3, #255	@ 0xff
 800a3a8:	e017      	b.n	800a3da <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a3aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a3ae:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a3b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a3bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	e00a      	b.n	800a3da <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a3c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800a3c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a3cc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800a3d6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd90      	pop	{r4, r7, pc}

0800a3e4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a3e4:	b5b0      	push	{r4, r5, r7, lr}
 800a3e6:	b0cc      	sub	sp, #304	@ 0x130
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	460c      	mov	r4, r1
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a3f6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a402:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800a406:	4622      	mov	r2, r4
 800a408:	801a      	strh	r2, [r3, #0]
 800a40a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a40e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800a412:	4602      	mov	r2, r0
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a41a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a41e:	460a      	mov	r2, r1
 800a420:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a422:	f107 0310 	add.w	r3, r7, #16
 800a426:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a42a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a42e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a436:	2300      	movs	r3, #0
 800a438:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800a43c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a440:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a444:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a448:	8812      	ldrh	r2, [r2, #0]
 800a44a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a44c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a450:	3302      	adds	r3, #2
 800a452:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800a456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a45a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a45e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800a462:	8812      	ldrh	r2, [r2, #0]
 800a464:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a46a:	3302      	adds	r3, #2
 800a46c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800a470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a474:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a478:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800a47c:	7812      	ldrb	r2, [r2, #0]
 800a47e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a480:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a484:	3301      	adds	r3, #1
 800a486:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a48a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a48e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a492:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800a496:	7812      	ldrb	r2, [r2, #0]
 800a498:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a49a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a49e:	3301      	adds	r3, #1
 800a4a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a4a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a4a8:	1d98      	adds	r0, r3, #6
 800a4aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4ae:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a4ba:	f000 fa72 	bl	800a9a2 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a4be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a4c2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a4d6:	2218      	movs	r2, #24
 800a4d8:	2100      	movs	r1, #0
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fa71 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4e0:	233f      	movs	r3, #63	@ 0x3f
 800a4e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800a4e6:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800a4ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a4ee:	f107 0310 	add.w	r3, r7, #16
 800a4f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a4f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a4fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a4fe:	f107 030f 	add.w	r3, r7, #15
 800a502:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a506:	2301      	movs	r3, #1
 800a508:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a50c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a510:	2100      	movs	r1, #0
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fcde 	bl	800aed4 <hci_send_req>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	da01      	bge.n	800a522 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a51e:	23ff      	movs	r3, #255	@ 0xff
 800a520:	e004      	b.n	800a52c <aci_gatt_update_char_value+0x148>
  return status;
 800a522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a526:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a52a:	781b      	ldrb	r3, [r3, #0]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a532:	46bd      	mov	sp, r7
 800a534:	bdb0      	pop	{r4, r5, r7, pc}

0800a536 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b0cc      	sub	sp, #304	@ 0x130
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	4602      	mov	r2, r0
 800a53e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a542:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a546:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800a548:	f107 0310 	add.w	r3, r7, #16
 800a54c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a550:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a554:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a558:	2200      	movs	r2, #0
 800a55a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a562:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a566:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a56a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a56e:	8812      	ldrh	r2, [r2, #0]
 800a570:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a572:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a576:	3302      	adds	r3, #2
 800a578:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a57c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a580:	2218      	movs	r2, #24
 800a582:	2100      	movs	r1, #0
 800a584:	4618      	mov	r0, r3
 800a586:	f000 fa1c 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a58a:	233f      	movs	r3, #63	@ 0x3f
 800a58c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800a590:	f240 1325 	movw	r3, #293	@ 0x125
 800a594:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a598:	f107 0310 	add.w	r3, r7, #16
 800a59c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a5a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a5a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a5a8:	f107 030f 	add.w	r3, r7, #15
 800a5ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a5ba:	2100      	movs	r1, #0
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f000 fc89 	bl	800aed4 <hci_send_req>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	da01      	bge.n	800a5cc <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800a5c8:	23ff      	movs	r3, #255	@ 0xff
 800a5ca:	e004      	b.n	800a5d6 <aci_gatt_confirm_indication+0xa0>
  return status;
 800a5cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a5d4:	781b      	ldrb	r3, [r3, #0]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b0cc      	sub	sp, #304	@ 0x130
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a5f4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	701a      	strb	r2, [r3, #0]
 800a5fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a600:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a604:	460a      	mov	r2, r1
 800a606:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a608:	f107 0310 	add.w	r3, r7, #16
 800a60c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a610:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a614:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a618:	2200      	movs	r2, #0
 800a61a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800a622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a626:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a62a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a62e:	7812      	ldrb	r2, [r2, #0]
 800a630:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a636:	3301      	adds	r3, #1
 800a638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800a63c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a640:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a644:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a648:	7812      	ldrb	r2, [r2, #0]
 800a64a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a64c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a650:	3301      	adds	r3, #1
 800a652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a656:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a65a:	1c98      	adds	r0, r3, #2
 800a65c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a660:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a664:	781a      	ldrb	r2, [r3, #0]
 800a666:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a66a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a66e:	6819      	ldr	r1, [r3, #0]
 800a670:	f000 f997 	bl	800a9a2 <Osal_MemCpy>
  index_input += Length;
 800a674:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a678:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a682:	4413      	add	r3, r2
 800a684:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a688:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a68c:	2218      	movs	r2, #24
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f996 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a696:	233f      	movs	r3, #63	@ 0x3f
 800a698:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800a69c:	230c      	movs	r3, #12
 800a69e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a6a2:	f107 0310 	add.w	r3, r7, #16
 800a6a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a6aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a6ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a6b2:	f107 030f 	add.w	r3, r7, #15
 800a6b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fc04 	bl	800aed4 <hci_send_req>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	da01      	bge.n	800a6d6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a6d2:	23ff      	movs	r3, #255	@ 0xff
 800a6d4:	e004      	b.n	800a6e0 <aci_hal_write_config_data+0x100>
  return status;
 800a6d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a6de:	781b      	ldrb	r3, [r3, #0]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b0cc      	sub	sp, #304	@ 0x130
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a6f6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a6fa:	701a      	strb	r2, [r3, #0]
 800a6fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a700:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a704:	460a      	mov	r2, r1
 800a706:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a708:	f107 0310 	add.w	r3, r7, #16
 800a70c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a710:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a714:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a71c:	2300      	movs	r3, #0
 800a71e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800a722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a726:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a72a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a72e:	7812      	ldrb	r2, [r2, #0]
 800a730:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a732:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a736:	3301      	adds	r3, #1
 800a738:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800a73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a740:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a744:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a748:	7812      	ldrb	r2, [r2, #0]
 800a74a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a74c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a750:	3301      	adds	r3, #1
 800a752:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a75a:	2218      	movs	r2, #24
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 f92f 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a764:	233f      	movs	r3, #63	@ 0x3f
 800a766:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800a76a:	230f      	movs	r3, #15
 800a76c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a770:	f107 0310 	add.w	r3, r7, #16
 800a774:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a778:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a77c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a780:	f107 030f 	add.w	r3, r7, #15
 800a784:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a788:	2301      	movs	r3, #1
 800a78a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a78e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a792:	2100      	movs	r1, #0
 800a794:	4618      	mov	r0, r3
 800a796:	f000 fb9d 	bl	800aed4 <hci_send_req>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	da01      	bge.n	800a7a4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a7a0:	23ff      	movs	r3, #255	@ 0xff
 800a7a2:	e004      	b.n	800a7ae <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a7a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7ac:	781b      	ldrb	r3, [r3, #0]
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b0cc      	sub	sp, #304	@ 0x130
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4602      	mov	r2, r0
 800a7c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a7c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a7ca:	f107 0310 	add.w	r3, r7, #16
 800a7ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a7d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7d6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a7e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a7ec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a7f0:	8812      	ldrh	r2, [r2, #0]
 800a7f2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a7f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a802:	2218      	movs	r2, #24
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f000 f8db 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a80c:	233f      	movs	r3, #63	@ 0x3f
 800a80e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800a812:	2318      	movs	r3, #24
 800a814:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a818:	f107 0310 	add.w	r3, r7, #16
 800a81c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a824:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a828:	f107 030f 	add.w	r3, r7, #15
 800a82c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a830:	2301      	movs	r3, #1
 800a832:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a836:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a83a:	2100      	movs	r1, #0
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fb49 	bl	800aed4 <hci_send_req>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	da01      	bge.n	800a84c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a848:	23ff      	movs	r3, #255	@ 0xff
 800a84a:	e004      	b.n	800a856 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a84c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a850:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a854:	781b      	ldrb	r3, [r3, #0]
}
 800a856:	4618      	mov	r0, r3
 800a858:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b088      	sub	sp, #32
 800a864:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a86a:	f107 0308 	add.w	r3, r7, #8
 800a86e:	2218      	movs	r2, #24
 800a870:	2100      	movs	r1, #0
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f8a5 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x03;
 800a878:	2303      	movs	r3, #3
 800a87a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a87c:	2303      	movs	r3, #3
 800a87e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a880:	1dfb      	adds	r3, r7, #7
 800a882:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a884:	2301      	movs	r3, #1
 800a886:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a888:	f107 0308 	add.w	r3, r7, #8
 800a88c:	2100      	movs	r1, #0
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 fb20 	bl	800aed4 <hci_send_req>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	da01      	bge.n	800a89e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a89a:	23ff      	movs	r3, #255	@ 0xff
 800a89c:	e000      	b.n	800a8a0 <hci_reset+0x40>
  return status;
 800a89e:	79fb      	ldrb	r3, [r7, #7]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a8a8:	b590      	push	{r4, r7, lr}
 800a8aa:	b0cd      	sub	sp, #308	@ 0x134
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800a8bc:	4622      	mov	r2, r4
 800a8be:	701a      	strb	r2, [r3, #0]
 800a8c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8c4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	701a      	strb	r2, [r3, #0]
 800a8cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8d0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800a8d4:	460a      	mov	r2, r1
 800a8d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a8d8:	f107 0310 	add.w	r3, r7, #16
 800a8dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800a8e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a8f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8f6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8fa:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800a8fe:	7812      	ldrb	r2, [r2, #0]
 800a900:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a902:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a906:	3301      	adds	r3, #1
 800a908:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a90c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a910:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a914:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800a918:	7812      	ldrb	r2, [r2, #0]
 800a91a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a91c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a920:	3301      	adds	r3, #1
 800a922:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a926:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a92a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a92e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800a932:	7812      	ldrb	r2, [r2, #0]
 800a934:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a93a:	3301      	adds	r3, #1
 800a93c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a940:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a944:	2218      	movs	r2, #24
 800a946:	2100      	movs	r1, #0
 800a948:	4618      	mov	r0, r3
 800a94a:	f000 f83a 	bl	800a9c2 <Osal_MemSet>
  rq.ogf = 0x08;
 800a94e:	2308      	movs	r3, #8
 800a950:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800a954:	2331      	movs	r3, #49	@ 0x31
 800a956:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800a95a:	f107 0310 	add.w	r3, r7, #16
 800a95e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800a962:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a966:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800a96a:	f107 030f 	add.w	r3, r7, #15
 800a96e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800a972:	2301      	movs	r3, #1
 800a974:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a978:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 faa8 	bl	800aed4 <hci_send_req>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	da01      	bge.n	800a98e <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a98a:	23ff      	movs	r3, #255	@ 0xff
 800a98c:	e004      	b.n	800a998 <hci_le_set_default_phy+0xf0>
  return status;
 800a98e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a992:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800a996:	781b      	ldrb	r3, [r3, #0]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd90      	pop	{r4, r7, pc}

0800a9a2 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	60f8      	str	r0, [r7, #12]
 800a9aa:	60b9      	str	r1, [r7, #8]
 800a9ac:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f006 fa4d 	bl	8010e52 <memcpy>
 800a9b8:	4603      	mov	r3, r0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	68b9      	ldr	r1, [r7, #8]
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f006 f998 	bl	8010d08 <memset>
 800a9d8:	4603      	mov	r3, r0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	af00      	add	r7, sp, #0
  return;
 800a9e6:	bf00      	nop
}
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
  return;
 800a9f4:	bf00      	nop
}
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800a9fe:	b480      	push	{r7}
 800aa00:	af00      	add	r7, sp, #0
  return;
 800aa02:	bf00      	nop
}
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
  return;
 800aa10:	bf00      	nop
}
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800aa1a:	b480      	push	{r7}
 800aa1c:	af00      	add	r7, sp, #0
  return;
 800aa1e:	bf00      	nop
}
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	af00      	add	r7, sp, #0
  return;
 800aa2c:	bf00      	nop
}
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800aa36:	b480      	push	{r7}
 800aa38:	af00      	add	r7, sp, #0
  return;
 800aa3a:	bf00      	nop
}
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
  return;
 800aa48:	bf00      	nop
}
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800aa52:	b480      	push	{r7}
 800aa54:	af00      	add	r7, sp, #0
  return;
 800aa56:	bf00      	nop
}
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
  return;
 800aa64:	bf00      	nop
}
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800aa6e:	b480      	push	{r7}
 800aa70:	af00      	add	r7, sp, #0
  return;
 800aa72:	bf00      	nop
}
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	af00      	add	r7, sp, #0
  return;
 800aa80:	bf00      	nop
}
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr

0800aa8a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	af00      	add	r7, sp, #0
  return;
 800aa8e:	bf00      	nop
}
 800aa90:	46bd      	mov	sp, r7
 800aa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa96:	4770      	bx	lr

0800aa98 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
  return;
 800aa9c:	bf00      	nop
}
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	af00      	add	r7, sp, #0
  return;
 800aaaa:	bf00      	nop
}
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800aab4:	b480      	push	{r7}
 800aab6:	af00      	add	r7, sp, #0
  return;
 800aab8:	bf00      	nop
}
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800aac2:	b480      	push	{r7}
 800aac4:	af00      	add	r7, sp, #0
  return;
 800aac6:	bf00      	nop
}
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800aad4:	4b04      	ldr	r3, [pc, #16]	@ (800aae8 <SVCCTL_Init+0x18>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800aada:	4b04      	ldr	r3, [pc, #16]	@ (800aaec <SVCCTL_Init+0x1c>)
 800aadc:	2200      	movs	r2, #0
 800aade:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800aae0:	f000 f806 	bl	800aaf0 <SVCCTL_SvcInit>

  return;
 800aae4:	bf00      	nop
}
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	2000023c 	.word	0x2000023c
 800aaec:	2000025c 	.word	0x2000025c

0800aaf0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
  BAS_Init();
 800aaf4:	f7ff ff75 	bl	800a9e2 <BAS_Init>

  BLS_Init();
 800aaf8:	f7ff ff7a 	bl	800a9f0 <BLS_Init>

  CRS_STM_Init();
 800aafc:	f7ff ff7f 	bl	800a9fe <CRS_STM_Init>

  DIS_Init();
 800ab00:	f7ff ff84 	bl	800aa0c <DIS_Init>

  EDS_STM_Init();
 800ab04:	f7ff ff89 	bl	800aa1a <EDS_STM_Init>

  HIDS_Init();
 800ab08:	f7ff ff8e 	bl	800aa28 <HIDS_Init>

  HRS_Init();
 800ab0c:	f7ff ff93 	bl	800aa36 <HRS_Init>

  HTS_Init();
 800ab10:	f7ff ff98 	bl	800aa44 <HTS_Init>

  IAS_Init();
 800ab14:	f7ff ff9d 	bl	800aa52 <IAS_Init>

  LLS_Init();
 800ab18:	f7ff ffa2 	bl	800aa60 <LLS_Init>

  TPS_Init();
 800ab1c:	f7ff ffa7 	bl	800aa6e <TPS_Init>

  MOTENV_STM_Init();
 800ab20:	f7ff ffac 	bl	800aa7c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ab24:	f7ff ffb1 	bl	800aa8a <P2PS_STM_Init>

  ZDD_STM_Init();
 800ab28:	f7ff ffb6 	bl	800aa98 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ab2c:	f7ff ffbb 	bl	800aaa6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ab30:	f7ff ffc7 	bl	800aac2 <BVOPUS_STM_Init>

  MESH_Init();
 800ab34:	f7ff ffbe 	bl	800aab4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ab38:	f002 fcce 	bl	800d4d8 <SVCCTL_InitCustomSvc>
  
  return;
 800ab3c:	bf00      	nop
}
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ab48:	4b09      	ldr	r3, [pc, #36]	@ (800ab70 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab4a:	7f1b      	ldrb	r3, [r3, #28]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4a08      	ldr	r2, [pc, #32]	@ (800ab70 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ab56:	4b06      	ldr	r3, [pc, #24]	@ (800ab70 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab58:	7f1b      	ldrb	r3, [r3, #28]
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab60:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800ab62:	bf00      	nop
}
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	2000023c 	.word	0x2000023c

0800ab74 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b086      	sub	sp, #24
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ab82:	2300      	movs	r3, #0
 800ab84:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	2bff      	cmp	r3, #255	@ 0xff
 800ab8c:	d125      	bne.n	800abda <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	3302      	adds	r3, #2
 800ab92:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ab9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aba2:	d118      	bne.n	800abd6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800aba4:	2300      	movs	r3, #0
 800aba6:	757b      	strb	r3, [r7, #21]
 800aba8:	e00d      	b.n	800abc6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800abaa:	7d7b      	ldrb	r3, [r7, #21]
 800abac:	4a1a      	ldr	r2, [pc, #104]	@ (800ac18 <SVCCTL_UserEvtRx+0xa4>)
 800abae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	4798      	blx	r3
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d108      	bne.n	800abd2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800abc0:	7d7b      	ldrb	r3, [r7, #21]
 800abc2:	3301      	adds	r3, #1
 800abc4:	757b      	strb	r3, [r7, #21]
 800abc6:	4b14      	ldr	r3, [pc, #80]	@ (800ac18 <SVCCTL_UserEvtRx+0xa4>)
 800abc8:	7f1b      	ldrb	r3, [r3, #28]
 800abca:	7d7a      	ldrb	r2, [r7, #21]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d3ec      	bcc.n	800abaa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800abd0:	e002      	b.n	800abd8 <SVCCTL_UserEvtRx+0x64>
              break;
 800abd2:	bf00      	nop
          break;
 800abd4:	e000      	b.n	800abd8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800abd6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800abd8:	e000      	b.n	800abdc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800abda:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d00f      	beq.n	800ac02 <SVCCTL_UserEvtRx+0x8e>
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	dc10      	bgt.n	800ac08 <SVCCTL_UserEvtRx+0x94>
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <SVCCTL_UserEvtRx+0x7c>
 800abea:	2b01      	cmp	r3, #1
 800abec:	d006      	beq.n	800abfc <SVCCTL_UserEvtRx+0x88>
 800abee:	e00b      	b.n	800ac08 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f001 f857 	bl	800bca4 <SVCCTL_App_Notification>
 800abf6:	4603      	mov	r3, r0
 800abf8:	75bb      	strb	r3, [r7, #22]
      break;
 800abfa:	e008      	b.n	800ac0e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800abfc:	2301      	movs	r3, #1
 800abfe:	75bb      	strb	r3, [r7, #22]
      break;
 800ac00:	e005      	b.n	800ac0e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ac02:	2300      	movs	r3, #0
 800ac04:	75bb      	strb	r3, [r7, #22]
      break;
 800ac06:	e002      	b.n	800ac0e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	75bb      	strb	r3, [r7, #22]
      break;
 800ac0c:	bf00      	nop
  }

  return (return_status);
 800ac0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3718      	adds	r7, #24
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}
 800ac18:	2000023c 	.word	0x2000023c

0800ac1c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ac24:	f107 030c 	add.w	r3, r7, #12
 800ac28:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ac30:	69fb      	ldr	r3, [r7, #28]
 800ac32:	212e      	movs	r1, #46	@ 0x2e
 800ac34:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800ac38:	f000 fae8 	bl	800b20c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	330b      	adds	r3, #11
 800ac40:	78db      	ldrb	r3, [r3, #3]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3720      	adds	r7, #32
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ac52:	f107 030c 	add.w	r3, r7, #12
 800ac56:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	210f      	movs	r1, #15
 800ac62:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ac66:	f000 fad1 	bl	800b20c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	330b      	adds	r3, #11
 800ac6e:	78db      	ldrb	r3, [r3, #3]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b088      	sub	sp, #32
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ac80:	f107 030c 	add.w	r3, r7, #12
 800ac84:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	2110      	movs	r1, #16
 800ac8c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ac90:	f000 fabc 	bl	800b20c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	330b      	adds	r3, #11
 800ac98:	78db      	ldrb	r3, [r3, #3]
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800aca4:	b480      	push	{r7}
 800aca6:	b08b      	sub	sp, #44	@ 0x2c
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800accc:	4b4a      	ldr	r3, [pc, #296]	@ (800adf8 <SHCI_GetWirelessFwInfo+0x154>)
 800acce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800acd4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800acde:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a44      	ldr	r2, [pc, #272]	@ (800adfc <SHCI_GetWirelessFwInfo+0x158>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d10f      	bne.n	800ad10 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	e01a      	b.n	800ad46 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ad18:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ad1c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	691b      	ldr	r3, [r3, #16]
 800ad24:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	699b      	ldr	r3, [r3, #24]
 800ad34:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ad46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad48:	0e1b      	lsrs	r3, r3, #24
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ad50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad52:	0c1b      	lsrs	r3, r3, #16
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	0a1b      	lsrs	r3, r3, #8
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ad64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad66:	091b      	lsrs	r3, r3, #4
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 030f 	and.w	r3, r3, #15
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ad74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	f003 030f 	and.w	r3, r3, #15
 800ad7c:	b2da      	uxtb	r2, r3
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	0e1b      	lsrs	r3, r3, #24
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	0c1b      	lsrs	r3, r3, #16
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	0a1b      	lsrs	r3, r3, #8
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ada0:	6a3b      	ldr	r3, [r7, #32]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	0e1b      	lsrs	r3, r3, #24
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	0a1b      	lsrs	r3, r3, #8
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	0e1b      	lsrs	r3, r3, #24
 800add2:	b2da      	uxtb	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	0c1b      	lsrs	r3, r3, #16
 800addc:	b2da      	uxtb	r2, r3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800adea:	2300      	movs	r3, #0
}
 800adec:	4618      	mov	r0, r3
 800adee:	372c      	adds	r7, #44	@ 0x2c
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	58004000 	.word	0x58004000
 800adfc:	a94656b9 	.word	0xa94656b9

0800ae00 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	4a08      	ldr	r2, [pc, #32]	@ (800ae30 <hci_init+0x30>)
 800ae10:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800ae12:	4a08      	ldr	r2, [pc, #32]	@ (800ae34 <hci_init+0x34>)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800ae18:	4806      	ldr	r0, [pc, #24]	@ (800ae34 <hci_init+0x34>)
 800ae1a:	f000 f979 	bl	800b110 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f8da 	bl	800afdc <TlInit>

  return;
 800ae28:	bf00      	nop
}
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20001e80 	.word	0x20001e80
 800ae34:	20001e58 	.word	0x20001e58

0800ae38 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ae3e:	4822      	ldr	r0, [pc, #136]	@ (800aec8 <hci_user_evt_proc+0x90>)
 800ae40:	f000 fd5a 	bl	800b8f8 <LST_is_empty>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d12b      	bne.n	800aea2 <hci_user_evt_proc+0x6a>
 800ae4a:	4b20      	ldr	r3, [pc, #128]	@ (800aecc <hci_user_evt_proc+0x94>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d027      	beq.n	800aea2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	4619      	mov	r1, r3
 800ae58:	481b      	ldr	r0, [pc, #108]	@ (800aec8 <hci_user_evt_proc+0x90>)
 800ae5a:	f000 fddc 	bl	800ba16 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ae5e:	4b1c      	ldr	r3, [pc, #112]	@ (800aed0 <hci_user_evt_proc+0x98>)
 800ae60:	69db      	ldr	r3, [r3, #28]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00c      	beq.n	800ae80 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ae6e:	4b18      	ldr	r3, [pc, #96]	@ (800aed0 <hci_user_evt_proc+0x98>)
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	1d3a      	adds	r2, r7, #4
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ae78:	793a      	ldrb	r2, [r7, #4]
 800ae7a:	4b14      	ldr	r3, [pc, #80]	@ (800aecc <hci_user_evt_proc+0x94>)
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	e002      	b.n	800ae86 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ae80:	4b12      	ldr	r3, [pc, #72]	@ (800aecc <hci_user_evt_proc+0x94>)
 800ae82:	2201      	movs	r2, #1
 800ae84:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ae86:	4b11      	ldr	r3, [pc, #68]	@ (800aecc <hci_user_evt_proc+0x94>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d004      	beq.n	800ae98 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 fc0d 	bl	800b6b0 <TL_MM_EvtDone>
 800ae96:	e004      	b.n	800aea2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	480a      	ldr	r0, [pc, #40]	@ (800aec8 <hci_user_evt_proc+0x90>)
 800ae9e:	f000 fd4d 	bl	800b93c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800aea2:	4809      	ldr	r0, [pc, #36]	@ (800aec8 <hci_user_evt_proc+0x90>)
 800aea4:	f000 fd28 	bl	800b8f8 <LST_is_empty>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d107      	bne.n	800aebe <hci_user_evt_proc+0x86>
 800aeae:	4b07      	ldr	r3, [pc, #28]	@ (800aecc <hci_user_evt_proc+0x94>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d003      	beq.n	800aebe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800aeb6:	4804      	ldr	r0, [pc, #16]	@ (800aec8 <hci_user_evt_proc+0x90>)
 800aeb8:	f001 fd72 	bl	800c9a0 <hci_notify_asynch_evt>
  }


  return;
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
}
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	20000264 	.word	0x20000264
 800aecc:	20000270 	.word	0x20000270
 800aed0:	20001e58 	.word	0x20001e58

0800aed4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b088      	sub	sp, #32
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800aee0:	2000      	movs	r0, #0
 800aee2:	f000 f8d1 	bl	800b088 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800aee6:	2300      	movs	r3, #0
 800aee8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	885b      	ldrh	r3, [r3, #2]
 800aeee:	b21b      	sxth	r3, r3
 800aef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aef4:	b21a      	sxth	r2, r3
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	881b      	ldrh	r3, [r3, #0]
 800aefa:	b21b      	sxth	r3, r3
 800aefc:	029b      	lsls	r3, r3, #10
 800aefe:	b21b      	sxth	r3, r3
 800af00:	4313      	orrs	r3, r2
 800af02:	b21b      	sxth	r3, r3
 800af04:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800af06:	4b33      	ldr	r3, [pc, #204]	@ (800afd4 <hci_send_req+0x100>)
 800af08:	2201      	movs	r2, #1
 800af0a:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	b2d9      	uxtb	r1, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689a      	ldr	r2, [r3, #8]
 800af16:	8bbb      	ldrh	r3, [r7, #28]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f88f 	bl	800b03c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800af1e:	e04e      	b.n	800afbe <hci_send_req+0xea>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800af20:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800af24:	f001 fd53 	bl	800c9ce <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800af28:	e043      	b.n	800afb2 <hci_send_req+0xde>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800af2a:	f107 030c 	add.w	r3, r7, #12
 800af2e:	4619      	mov	r1, r3
 800af30:	4829      	ldr	r0, [pc, #164]	@ (800afd8 <hci_send_req+0x104>)
 800af32:	f000 fd70 	bl	800ba16 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	7a5b      	ldrb	r3, [r3, #9]
 800af3a:	2b0f      	cmp	r3, #15
 800af3c:	d114      	bne.n	800af68 <hci_send_req+0x94>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	330b      	adds	r3, #11
 800af42:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	885b      	ldrh	r3, [r3, #2]
 800af48:	b29b      	uxth	r3, r3
 800af4a:	8bba      	ldrh	r2, [r7, #28]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d104      	bne.n	800af5a <hci_send_req+0x86>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	7812      	ldrb	r2, [r2, #0]
 800af58:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d027      	beq.n	800afb2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800af62:	2301      	movs	r3, #1
 800af64:	77fb      	strb	r3, [r7, #31]
 800af66:	e024      	b.n	800afb2 <hci_send_req+0xde>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	330b      	adds	r3, #11
 800af6c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800af74:	b29b      	uxth	r3, r3
 800af76:	8bba      	ldrh	r2, [r7, #28]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d114      	bne.n	800afa6 <hci_send_req+0xd2>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	7a9b      	ldrb	r3, [r3, #10]
 800af80:	3b03      	subs	r3, #3
 800af82:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	695a      	ldr	r2, [r3, #20]
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	429a      	cmp	r2, r3
 800af8c:	bfa8      	it	ge
 800af8e:	461a      	movge	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6918      	ldr	r0, [r3, #16]
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	1cd9      	adds	r1, r3, #3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	461a      	mov	r2, r3
 800afa2:	f005 ff56 	bl	8010e52 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <hci_send_req+0xde>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800afae:	2301      	movs	r3, #1
 800afb0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800afb2:	4809      	ldr	r0, [pc, #36]	@ (800afd8 <hci_send_req+0x104>)
 800afb4:	f000 fca0 	bl	800b8f8 <LST_is_empty>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d0b5      	beq.n	800af2a <hci_send_req+0x56>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800afbe:	7ffb      	ldrb	r3, [r7, #31]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d0ad      	beq.n	800af20 <hci_send_req+0x4c>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800afc4:	2001      	movs	r0, #1
 800afc6:	f000 f85f 	bl	800b088 <NotifyCmdStatus>

  return 0;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3720      	adds	r7, #32
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	20001e84 	.word	0x20001e84
 800afd8:	20001e78 	.word	0x20001e78

0800afdc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800afe4:	480f      	ldr	r0, [pc, #60]	@ (800b024 <TlInit+0x48>)
 800afe6:	f000 fc77 	bl	800b8d8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800afea:	4a0f      	ldr	r2, [pc, #60]	@ (800b028 <TlInit+0x4c>)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800aff0:	480e      	ldr	r0, [pc, #56]	@ (800b02c <TlInit+0x50>)
 800aff2:	f000 fc71 	bl	800b8d8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800aff6:	4b0e      	ldr	r3, [pc, #56]	@ (800b030 <TlInit+0x54>)
 800aff8:	2201      	movs	r2, #1
 800affa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800affc:	4b0d      	ldr	r3, [pc, #52]	@ (800b034 <TlInit+0x58>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b008:	4b0b      	ldr	r3, [pc, #44]	@ (800b038 <TlInit+0x5c>)
 800b00a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b00c:	4b09      	ldr	r3, [pc, #36]	@ (800b034 <TlInit+0x58>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f107 0208 	add.w	r2, r7, #8
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
  }

  return;
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
}
 800b01c:	3718      	adds	r7, #24
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	20001e78 	.word	0x20001e78
 800b028:	2000026c 	.word	0x2000026c
 800b02c:	20000264 	.word	0x20000264
 800b030:	20000270 	.word	0x20000270
 800b034:	20001e58 	.word	0x20001e58
 800b038:	0800b0c9 	.word	0x0800b0c9

0800b03c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	4603      	mov	r3, r0
 800b044:	603a      	str	r2, [r7, #0]
 800b046:	80fb      	strh	r3, [r7, #6]
 800b048:	460b      	mov	r3, r1
 800b04a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b04c:	4b0c      	ldr	r3, [pc, #48]	@ (800b080 <SendCmd+0x44>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	88fa      	ldrh	r2, [r7, #6]
 800b052:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b056:	4b0a      	ldr	r3, [pc, #40]	@ (800b080 <SendCmd+0x44>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	797a      	ldrb	r2, [r7, #5]
 800b05c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b05e:	4b08      	ldr	r3, [pc, #32]	@ (800b080 <SendCmd+0x44>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	330c      	adds	r3, #12
 800b064:	797a      	ldrb	r2, [r7, #5]
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f005 fef2 	bl	8010e52 <memcpy>

  hciContext.io.Send(0,0);
 800b06e:	4b05      	ldr	r3, [pc, #20]	@ (800b084 <SendCmd+0x48>)
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	2100      	movs	r1, #0
 800b074:	2000      	movs	r0, #0
 800b076:	4798      	blx	r3

  return;
 800b078:	bf00      	nop
}
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	2000026c 	.word	0x2000026c
 800b084:	20001e58 	.word	0x20001e58

0800b088 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d108      	bne.n	800b0aa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b098:	4b0a      	ldr	r3, [pc, #40]	@ (800b0c4 <NotifyCmdStatus+0x3c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00d      	beq.n	800b0bc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b0a0:	4b08      	ldr	r3, [pc, #32]	@ (800b0c4 <NotifyCmdStatus+0x3c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b0a8:	e008      	b.n	800b0bc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b0aa:	4b06      	ldr	r3, [pc, #24]	@ (800b0c4 <NotifyCmdStatus+0x3c>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d004      	beq.n	800b0bc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b0b2:	4b04      	ldr	r3, [pc, #16]	@ (800b0c4 <NotifyCmdStatus+0x3c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	4798      	blx	r3
  return;
 800b0ba:	bf00      	nop
 800b0bc:	bf00      	nop
}
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	20001e80 	.word	0x20001e80

0800b0c8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	7a5b      	ldrb	r3, [r3, #9]
 800b0d4:	2b0f      	cmp	r3, #15
 800b0d6:	d003      	beq.n	800b0e0 <TlEvtReceived+0x18>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7a5b      	ldrb	r3, [r3, #9]
 800b0dc:	2b0e      	cmp	r3, #14
 800b0de:	d107      	bne.n	800b0f0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b0e0:	6879      	ldr	r1, [r7, #4]
 800b0e2:	4809      	ldr	r0, [pc, #36]	@ (800b108 <TlEvtReceived+0x40>)
 800b0e4:	f000 fc50 	bl	800b988 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	f001 fc65 	bl	800c9b8 <hci_cmd_resp_release>
 800b0ee:	e006      	b.n	800b0fe <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	4806      	ldr	r0, [pc, #24]	@ (800b10c <TlEvtReceived+0x44>)
 800b0f4:	f000 fc48 	bl	800b988 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b0f8:	4804      	ldr	r0, [pc, #16]	@ (800b10c <TlEvtReceived+0x44>)
 800b0fa:	f001 fc51 	bl	800c9a0 <hci_notify_asynch_evt>
  }

  return;
 800b0fe:	bf00      	nop
}
 800b100:	3708      	adds	r7, #8
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	20001e78 	.word	0x20001e78
 800b10c:	20000264 	.word	0x20000264

0800b110 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a05      	ldr	r2, [pc, #20]	@ (800b130 <hci_register_io_bus+0x20>)
 800b11c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a04      	ldr	r2, [pc, #16]	@ (800b134 <hci_register_io_bus+0x24>)
 800b122:	611a      	str	r2, [r3, #16]

  return;
 800b124:	bf00      	nop
}
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	0800b429 	.word	0x0800b429
 800b134:	0800b491 	.word	0x0800b491

0800b138 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4a08      	ldr	r2, [pc, #32]	@ (800b168 <shci_init+0x30>)
 800b148:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b14a:	4a08      	ldr	r2, [pc, #32]	@ (800b16c <shci_init+0x34>)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b150:	4806      	ldr	r0, [pc, #24]	@ (800b16c <shci_init+0x34>)
 800b152:	f000 f915 	bl	800b380 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 f898 	bl	800b290 <TlInit>

  return;
 800b160:	bf00      	nop
}
 800b162:	3708      	adds	r7, #8
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}
 800b168:	20001ea8 	.word	0x20001ea8
 800b16c:	20001e88 	.word	0x20001e88

0800b170 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b084      	sub	sp, #16
 800b174:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b176:	4822      	ldr	r0, [pc, #136]	@ (800b200 <shci_user_evt_proc+0x90>)
 800b178:	f000 fbbe 	bl	800b8f8 <LST_is_empty>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d12b      	bne.n	800b1da <shci_user_evt_proc+0x6a>
 800b182:	4b20      	ldr	r3, [pc, #128]	@ (800b204 <shci_user_evt_proc+0x94>)
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d027      	beq.n	800b1da <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b18a:	f107 030c 	add.w	r3, r7, #12
 800b18e:	4619      	mov	r1, r3
 800b190:	481b      	ldr	r0, [pc, #108]	@ (800b200 <shci_user_evt_proc+0x90>)
 800b192:	f000 fc40 	bl	800ba16 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b196:	4b1c      	ldr	r3, [pc, #112]	@ (800b208 <shci_user_evt_proc+0x98>)
 800b198:	69db      	ldr	r3, [r3, #28]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d00c      	beq.n	800b1b8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b1a6:	4b18      	ldr	r3, [pc, #96]	@ (800b208 <shci_user_evt_proc+0x98>)
 800b1a8:	69db      	ldr	r3, [r3, #28]
 800b1aa:	1d3a      	adds	r2, r7, #4
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b1b0:	793a      	ldrb	r2, [r7, #4]
 800b1b2:	4b14      	ldr	r3, [pc, #80]	@ (800b204 <shci_user_evt_proc+0x94>)
 800b1b4:	701a      	strb	r2, [r3, #0]
 800b1b6:	e002      	b.n	800b1be <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b1b8:	4b12      	ldr	r3, [pc, #72]	@ (800b204 <shci_user_evt_proc+0x94>)
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b1be:	4b11      	ldr	r3, [pc, #68]	@ (800b204 <shci_user_evt_proc+0x94>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 fa71 	bl	800b6b0 <TL_MM_EvtDone>
 800b1ce:	e004      	b.n	800b1da <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4619      	mov	r1, r3
 800b1d4:	480a      	ldr	r0, [pc, #40]	@ (800b200 <shci_user_evt_proc+0x90>)
 800b1d6:	f000 fbb1 	bl	800b93c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b1da:	4809      	ldr	r0, [pc, #36]	@ (800b200 <shci_user_evt_proc+0x90>)
 800b1dc:	f000 fb8c 	bl	800b8f8 <LST_is_empty>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d107      	bne.n	800b1f6 <shci_user_evt_proc+0x86>
 800b1e6:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <shci_user_evt_proc+0x94>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b1ee:	4804      	ldr	r0, [pc, #16]	@ (800b200 <shci_user_evt_proc+0x90>)
 800b1f0:	f7f6 faf1 	bl	80017d6 <shci_notify_asynch_evt>
  }


  return;
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
}
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	20000274 	.word	0x20000274
 800b204:	20000284 	.word	0x20000284
 800b208:	20001e88 	.word	0x20001e88

0800b20c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	60ba      	str	r2, [r7, #8]
 800b214:	607b      	str	r3, [r7, #4]
 800b216:	4603      	mov	r3, r0
 800b218:	81fb      	strh	r3, [r7, #14]
 800b21a:	460b      	mov	r3, r1
 800b21c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b21e:	2000      	movs	r0, #0
 800b220:	f000 f868 	bl	800b2f4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b224:	4b17      	ldr	r3, [pc, #92]	@ (800b284 <shci_send+0x78>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	89fa      	ldrh	r2, [r7, #14]
 800b22a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b22e:	4b15      	ldr	r3, [pc, #84]	@ (800b284 <shci_send+0x78>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	7b7a      	ldrb	r2, [r7, #13]
 800b234:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b236:	4b13      	ldr	r3, [pc, #76]	@ (800b284 <shci_send+0x78>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	330c      	adds	r3, #12
 800b23c:	7b7a      	ldrb	r2, [r7, #13]
 800b23e:	68b9      	ldr	r1, [r7, #8]
 800b240:	4618      	mov	r0, r3
 800b242:	f005 fe06 	bl	8010e52 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b246:	4b10      	ldr	r3, [pc, #64]	@ (800b288 <shci_send+0x7c>)
 800b248:	2201      	movs	r2, #1
 800b24a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b24c:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <shci_send+0x80>)
 800b24e:	691b      	ldr	r3, [r3, #16]
 800b250:	2100      	movs	r1, #0
 800b252:	2000      	movs	r0, #0
 800b254:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b256:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800b25a:	f7f6 fad4 	bl	8001806 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f103 0008 	add.w	r0, r3, #8
 800b264:	4b07      	ldr	r3, [pc, #28]	@ (800b284 <shci_send+0x78>)
 800b266:	6819      	ldr	r1, [r3, #0]
 800b268:	4b06      	ldr	r3, [pc, #24]	@ (800b284 <shci_send+0x78>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	789b      	ldrb	r3, [r3, #2]
 800b26e:	3303      	adds	r3, #3
 800b270:	461a      	mov	r2, r3
 800b272:	f005 fdee 	bl	8010e52 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b276:	2001      	movs	r0, #1
 800b278:	f000 f83c 	bl	800b2f4 <Cmd_SetStatus>

  return;
 800b27c:	bf00      	nop
}
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20000280 	.word	0x20000280
 800b288:	20001eac 	.word	0x20001eac
 800b28c:	20001e88 	.word	0x20001e88

0800b290 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b298:	4a10      	ldr	r2, [pc, #64]	@ (800b2dc <TlInit+0x4c>)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b29e:	4810      	ldr	r0, [pc, #64]	@ (800b2e0 <TlInit+0x50>)
 800b2a0:	f000 fb1a 	bl	800b8d8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	f000 f825 	bl	800b2f4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b2aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b2e4 <TlInit+0x54>)
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b2b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e8 <TlInit+0x58>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d00c      	beq.n	800b2d2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b2ec <TlInit+0x5c>)
 800b2be:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f0 <TlInit+0x60>)
 800b2c2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b2c4:	4b08      	ldr	r3, [pc, #32]	@ (800b2e8 <TlInit+0x58>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f107 020c 	add.w	r2, r7, #12
 800b2cc:	4610      	mov	r0, r2
 800b2ce:	4798      	blx	r3
  }

  return;
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
}
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20000280 	.word	0x20000280
 800b2e0:	20000274 	.word	0x20000274
 800b2e4:	20000284 	.word	0x20000284
 800b2e8:	20001e88 	.word	0x20001e88
 800b2ec:	0800b345 	.word	0x0800b345
 800b2f0:	0800b35d 	.word	0x0800b35d

0800b2f4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b2fe:	79fb      	ldrb	r3, [r7, #7]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10b      	bne.n	800b31c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b304:	4b0d      	ldr	r3, [pc, #52]	@ (800b33c <Cmd_SetStatus+0x48>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d003      	beq.n	800b314 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b30c:	4b0b      	ldr	r3, [pc, #44]	@ (800b33c <Cmd_SetStatus+0x48>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2000      	movs	r0, #0
 800b312:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b314:	4b0a      	ldr	r3, [pc, #40]	@ (800b340 <Cmd_SetStatus+0x4c>)
 800b316:	2200      	movs	r2, #0
 800b318:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b31a:	e00b      	b.n	800b334 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b31c:	4b08      	ldr	r3, [pc, #32]	@ (800b340 <Cmd_SetStatus+0x4c>)
 800b31e:	2201      	movs	r2, #1
 800b320:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b322:	4b06      	ldr	r3, [pc, #24]	@ (800b33c <Cmd_SetStatus+0x48>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b32a:	4b04      	ldr	r3, [pc, #16]	@ (800b33c <Cmd_SetStatus+0x48>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2001      	movs	r0, #1
 800b330:	4798      	blx	r3
  return;
 800b332:	bf00      	nop
 800b334:	bf00      	nop
}
 800b336:	3708      	adds	r7, #8
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	20001ea8 	.word	0x20001ea8
 800b340:	2000027c 	.word	0x2000027c

0800b344 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b34c:	2000      	movs	r0, #0
 800b34e:	f7f6 fa4f 	bl	80017f0 <shci_cmd_resp_release>

  return;
 800b352:	bf00      	nop
}
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}
	...

0800b35c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	4805      	ldr	r0, [pc, #20]	@ (800b37c <TlUserEvtReceived+0x20>)
 800b368:	f000 fb0e 	bl	800b988 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b36c:	4803      	ldr	r0, [pc, #12]	@ (800b37c <TlUserEvtReceived+0x20>)
 800b36e:	f7f6 fa32 	bl	80017d6 <shci_notify_asynch_evt>

  return;
 800b372:	bf00      	nop
}
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000274 	.word	0x20000274

0800b380 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	4a05      	ldr	r2, [pc, #20]	@ (800b3a0 <shci_register_io_bus+0x20>)
 800b38c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	4a04      	ldr	r2, [pc, #16]	@ (800b3a4 <shci_register_io_bus+0x24>)
 800b392:	611a      	str	r2, [r3, #16]

  return;
 800b394:	bf00      	nop
}
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	0800b53d 	.word	0x0800b53d
 800b3a4:	0800b591 	.word	0x0800b591

0800b3a8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800b3ac:	f003 fa3c 	bl	800e828 <HW_IPCC_Enable>

  return;
 800b3b0:	bf00      	nop
}
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <TL_Init>:


void TL_Init( void )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800b3b8:	4b10      	ldr	r3, [pc, #64]	@ (800b3fc <TL_Init+0x48>)
 800b3ba:	4a11      	ldr	r2, [pc, #68]	@ (800b400 <TL_Init+0x4c>)
 800b3bc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800b3be:	4b0f      	ldr	r3, [pc, #60]	@ (800b3fc <TL_Init+0x48>)
 800b3c0:	4a10      	ldr	r2, [pc, #64]	@ (800b404 <TL_Init+0x50>)
 800b3c2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800b3c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b3fc <TL_Init+0x48>)
 800b3c6:	4a10      	ldr	r2, [pc, #64]	@ (800b408 <TL_Init+0x54>)
 800b3c8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800b3ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b3fc <TL_Init+0x48>)
 800b3cc:	4a0f      	ldr	r2, [pc, #60]	@ (800b40c <TL_Init+0x58>)
 800b3ce:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3fc <TL_Init+0x48>)
 800b3d2:	4a0f      	ldr	r2, [pc, #60]	@ (800b410 <TL_Init+0x5c>)
 800b3d4:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800b3d6:	4b09      	ldr	r3, [pc, #36]	@ (800b3fc <TL_Init+0x48>)
 800b3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800b414 <TL_Init+0x60>)
 800b3da:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800b3dc:	4b07      	ldr	r3, [pc, #28]	@ (800b3fc <TL_Init+0x48>)
 800b3de:	4a0e      	ldr	r2, [pc, #56]	@ (800b418 <TL_Init+0x64>)
 800b3e0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800b3e2:	4b06      	ldr	r3, [pc, #24]	@ (800b3fc <TL_Init+0x48>)
 800b3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800b41c <TL_Init+0x68>)
 800b3e6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800b3e8:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <TL_Init+0x48>)
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b420 <TL_Init+0x6c>)
 800b3ec:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800b3ee:	4b03      	ldr	r3, [pc, #12]	@ (800b3fc <TL_Init+0x48>)
 800b3f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b424 <TL_Init+0x70>)
 800b3f2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800b3f4:	f003 fa2c 	bl	800e850 <HW_IPCC_Init>

  return;
 800b3f8:	bf00      	nop
}
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	20030000 	.word	0x20030000
 800b400:	20030028 	.word	0x20030028
 800b404:	20030048 	.word	0x20030048
 800b408:	20030058 	.word	0x20030058
 800b40c:	20030068 	.word	0x20030068
 800b410:	20030070 	.word	0x20030070
 800b414:	20030078 	.word	0x20030078
 800b418:	20030080 	.word	0x20030080
 800b41c:	2003009c 	.word	0x2003009c
 800b420:	200300a0 	.word	0x200300a0
 800b424:	200300ac 	.word	0x200300ac

0800b428 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800b434:	4811      	ldr	r0, [pc, #68]	@ (800b47c <TL_BLE_Init+0x54>)
 800b436:	f000 fa4f 	bl	800b8d8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800b43a:	4b11      	ldr	r3, [pc, #68]	@ (800b480 <TL_BLE_Init+0x58>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	68da      	ldr	r2, [r3, #12]
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4a0c      	ldr	r2, [pc, #48]	@ (800b484 <TL_BLE_Init+0x5c>)
 800b454:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	4a08      	ldr	r2, [pc, #32]	@ (800b47c <TL_BLE_Init+0x54>)
 800b45a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800b45c:	f003 fa0e 	bl	800e87c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a08      	ldr	r2, [pc, #32]	@ (800b488 <TL_BLE_Init+0x60>)
 800b466:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	4a07      	ldr	r2, [pc, #28]	@ (800b48c <TL_BLE_Init+0x64>)
 800b46e:	6013      	str	r3, [r2, #0]

  return 0;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	200300c8 	.word	0x200300c8
 800b480:	20030000 	.word	0x20030000
 800b484:	20030a58 	.word	0x20030a58
 800b488:	20001eb8 	.word	0x20001eb8
 800b48c:	20001ebc 	.word	0x20001ebc

0800b490 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800b49c:	4b09      	ldr	r3, [pc, #36]	@ (800b4c4 <TL_BLE_SendCmd+0x34>)
 800b49e:	685b      	ldr	r3, [r3, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800b4a6:	4b07      	ldr	r3, [pc, #28]	@ (800b4c4 <TL_BLE_SendCmd+0x34>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	2001      	movs	r0, #1
 800b4b0:	f000 f96c 	bl	800b78c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800b4b4:	f003 f9ec 	bl	800e890 <HW_IPCC_BLE_SendCmd>

  return 0;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	3708      	adds	r7, #8
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	bf00      	nop
 800b4c4:	20030000 	.word	0x20030000

0800b4c8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800b4ce:	e01c      	b.n	800b50a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800b4d0:	1d3b      	adds	r3, r7, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4812      	ldr	r0, [pc, #72]	@ (800b520 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b4d6:	f000 fa9e 	bl	800ba16 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	7a5b      	ldrb	r3, [r3, #9]
 800b4de:	2b0f      	cmp	r3, #15
 800b4e0:	d003      	beq.n	800b4ea <HW_IPCC_BLE_RxEvtNot+0x22>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	7a5b      	ldrb	r3, [r3, #9]
 800b4e6:	2b0e      	cmp	r3, #14
 800b4e8:	d105      	bne.n	800b4f6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	2002      	movs	r0, #2
 800b4f0:	f000 f94c 	bl	800b78c <OutputDbgTrace>
 800b4f4:	e004      	b.n	800b500 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	2003      	movs	r0, #3
 800b4fc:	f000 f946 	bl	800b78c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800b500:	4b08      	ldr	r3, [pc, #32]	@ (800b524 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	4610      	mov	r0, r2
 800b508:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800b50a:	4805      	ldr	r0, [pc, #20]	@ (800b520 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800b50c:	f000 f9f4 	bl	800b8f8 <LST_is_empty>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0dc      	beq.n	800b4d0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800b516:	bf00      	nop
}
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	200300c8 	.word	0x200300c8
 800b524:	20001eb8 	.word	0x20001eb8

0800b528 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800b52c:	4b02      	ldr	r3, [pc, #8]	@ (800b538 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4798      	blx	r3

  return;
 800b532:	bf00      	nop
}
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20001ebc 	.word	0x20001ebc

0800b53c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800b548:	480d      	ldr	r0, [pc, #52]	@ (800b580 <TL_SYS_Init+0x44>)
 800b54a:	f000 f9c5 	bl	800b8d8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800b54e:	4b0d      	ldr	r3, [pc, #52]	@ (800b584 <TL_SYS_Init+0x48>)
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a08      	ldr	r2, [pc, #32]	@ (800b580 <TL_SYS_Init+0x44>)
 800b560:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800b562:	f003 f9b7 	bl	800e8d4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a07      	ldr	r2, [pc, #28]	@ (800b588 <TL_SYS_Init+0x4c>)
 800b56c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	4a06      	ldr	r2, [pc, #24]	@ (800b58c <TL_SYS_Init+0x50>)
 800b574:	6013      	str	r3, [r2, #0]

  return 0;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	200300d0 	.word	0x200300d0
 800b584:	20030000 	.word	0x20030000
 800b588:	20001ec0 	.word	0x20001ec0
 800b58c:	20001ec4 	.word	0x20001ec4

0800b590 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800b59c:	4b09      	ldr	r3, [pc, #36]	@ (800b5c4 <TL_SYS_SendCmd+0x34>)
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	2210      	movs	r2, #16
 800b5a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800b5a6:	4b07      	ldr	r3, [pc, #28]	@ (800b5c4 <TL_SYS_SendCmd+0x34>)
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	2004      	movs	r0, #4
 800b5b0:	f000 f8ec 	bl	800b78c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800b5b4:	f003 f998 	bl	800e8e8 <HW_IPCC_SYS_SendCmd>

  return 0;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20030000 	.word	0x20030000

0800b5c8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b5cc:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	2005      	movs	r0, #5
 800b5d6:	f000 f8d9 	bl	800b78c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800b5da:	4b05      	ldr	r3, [pc, #20]	@ (800b5f0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a03      	ldr	r2, [pc, #12]	@ (800b5ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800b5e0:	68d2      	ldr	r2, [r2, #12]
 800b5e2:	6812      	ldr	r2, [r2, #0]
 800b5e4:	4610      	mov	r0, r2
 800b5e6:	4798      	blx	r3

  return;
 800b5e8:	bf00      	nop
}
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	20030000 	.word	0x20030000
 800b5f0:	20001ec0 	.word	0x20001ec0

0800b5f4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b5fa:	e00e      	b.n	800b61a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800b5fc:	1d3b      	adds	r3, r7, #4
 800b5fe:	4619      	mov	r1, r3
 800b600:	480b      	ldr	r0, [pc, #44]	@ (800b630 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b602:	f000 fa08 	bl	800ba16 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4619      	mov	r1, r3
 800b60a:	2006      	movs	r0, #6
 800b60c:	f000 f8be 	bl	800b78c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800b610:	4b08      	ldr	r3, [pc, #32]	@ (800b634 <HW_IPCC_SYS_EvtNot+0x40>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	4610      	mov	r0, r2
 800b618:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800b61a:	4805      	ldr	r0, [pc, #20]	@ (800b630 <HW_IPCC_SYS_EvtNot+0x3c>)
 800b61c:	f000 f96c 	bl	800b8f8 <LST_is_empty>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0ea      	beq.n	800b5fc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800b626:	bf00      	nop
}
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200300d0 	.word	0x200300d0
 800b634:	20001ec4 	.word	0x20001ec4

0800b638 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800b640:	4817      	ldr	r0, [pc, #92]	@ (800b6a0 <TL_MM_Init+0x68>)
 800b642:	f000 f949 	bl	800b8d8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800b646:	4817      	ldr	r0, [pc, #92]	@ (800b6a4 <TL_MM_Init+0x6c>)
 800b648:	f000 f946 	bl	800b8d8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800b64c:	4b16      	ldr	r3, [pc, #88]	@ (800b6a8 <TL_MM_Init+0x70>)
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	4a16      	ldr	r2, [pc, #88]	@ (800b6ac <TL_MM_Init+0x74>)
 800b652:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800b654:	4b15      	ldr	r3, [pc, #84]	@ (800b6ac <TL_MM_Init+0x74>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	6892      	ldr	r2, [r2, #8]
 800b65c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800b65e:	4b13      	ldr	r3, [pc, #76]	@ (800b6ac <TL_MM_Init+0x74>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	68d2      	ldr	r2, [r2, #12]
 800b666:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800b668:	4b10      	ldr	r3, [pc, #64]	@ (800b6ac <TL_MM_Init+0x74>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a0 <TL_MM_Init+0x68>)
 800b66e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800b670:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ac <TL_MM_Init+0x74>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800b67a:	4b0c      	ldr	r3, [pc, #48]	@ (800b6ac <TL_MM_Init+0x74>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	6852      	ldr	r2, [r2, #4]
 800b682:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800b684:	4b09      	ldr	r3, [pc, #36]	@ (800b6ac <TL_MM_Init+0x74>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6912      	ldr	r2, [r2, #16]
 800b68c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b68e:	4b07      	ldr	r3, [pc, #28]	@ (800b6ac <TL_MM_Init+0x74>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	6952      	ldr	r2, [r2, #20]
 800b696:	619a      	str	r2, [r3, #24]

  return;
 800b698:	bf00      	nop
}
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	200300b8 	.word	0x200300b8
 800b6a4:	20001eb0 	.word	0x20001eb0
 800b6a8:	20030000 	.word	0x20030000
 800b6ac:	20001ec8 	.word	0x20001ec8

0800b6b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	4807      	ldr	r0, [pc, #28]	@ (800b6d8 <TL_MM_EvtDone+0x28>)
 800b6bc:	f000 f964 	bl	800b988 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	2000      	movs	r0, #0
 800b6c4:	f000 f862 	bl	800b78c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b6c8:	4804      	ldr	r0, [pc, #16]	@ (800b6dc <TL_MM_EvtDone+0x2c>)
 800b6ca:	f003 f933 	bl	800e934 <HW_IPCC_MM_SendFreeBuf>

  return;
 800b6ce:	bf00      	nop
}
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20001eb0 	.word	0x20001eb0
 800b6dc:	0800b6e1 	.word	0x0800b6e1

0800b6e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b6e6:	e00c      	b.n	800b702 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b6e8:	1d3b      	adds	r3, r7, #4
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	480a      	ldr	r0, [pc, #40]	@ (800b718 <SendFreeBuf+0x38>)
 800b6ee:	f000 f992 	bl	800ba16 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b6f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b71c <SendFreeBuf+0x3c>)
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f000 f943 	bl	800b988 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b702:	4805      	ldr	r0, [pc, #20]	@ (800b718 <SendFreeBuf+0x38>)
 800b704:	f000 f8f8 	bl	800b8f8 <LST_is_empty>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0ec      	beq.n	800b6e8 <SendFreeBuf+0x8>
  }

  return;
 800b70e:	bf00      	nop
}
 800b710:	3708      	adds	r7, #8
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	20001eb0 	.word	0x20001eb0
 800b71c:	20030000 	.word	0x20030000

0800b720 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b724:	4805      	ldr	r0, [pc, #20]	@ (800b73c <TL_TRACES_Init+0x1c>)
 800b726:	f000 f8d7 	bl	800b8d8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b72a:	4b05      	ldr	r3, [pc, #20]	@ (800b740 <TL_TRACES_Init+0x20>)
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	4a03      	ldr	r2, [pc, #12]	@ (800b73c <TL_TRACES_Init+0x1c>)
 800b730:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b732:	f003 f935 	bl	800e9a0 <HW_IPCC_TRACES_Init>

  return;
 800b736:	bf00      	nop
}
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	200300c0 	.word	0x200300c0
 800b740:	20030000 	.word	0x20030000

0800b744 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b74a:	e008      	b.n	800b75e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b74c:	1d3b      	adds	r3, r7, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4808      	ldr	r0, [pc, #32]	@ (800b774 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b752:	f000 f960 	bl	800ba16 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4618      	mov	r0, r3
 800b75a:	f000 f80d 	bl	800b778 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b75e:	4805      	ldr	r0, [pc, #20]	@ (800b774 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b760:	f000 f8ca 	bl	800b8f8 <LST_is_empty>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d0f0      	beq.n	800b74c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b76a:	bf00      	nop
}
 800b76c:	3708      	adds	r7, #8
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	200300c0 	.word	0x200300c0

0800b778 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b780:	bf00      	nop
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	4603      	mov	r3, r0
 800b794:	6039      	str	r1, [r7, #0]
 800b796:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	2b06      	cmp	r3, #6
 800b79c:	d845      	bhi.n	800b82a <OutputDbgTrace+0x9e>
 800b79e:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a4 <OutputDbgTrace+0x18>)
 800b7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a4:	0800b7c1 	.word	0x0800b7c1
 800b7a8:	0800b7e5 	.word	0x0800b7e5
 800b7ac:	0800b7eb 	.word	0x0800b7eb
 800b7b0:	0800b7ff 	.word	0x0800b7ff
 800b7b4:	0800b80b 	.word	0x0800b80b
 800b7b8:	0800b811 	.word	0x0800b811
 800b7bc:	0800b81f 	.word	0x0800b81f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	7a5b      	ldrb	r3, [r3, #9]
 800b7c8:	2bff      	cmp	r3, #255	@ 0xff
 800b7ca:	d005      	beq.n	800b7d8 <OutputDbgTrace+0x4c>
 800b7cc:	2bff      	cmp	r3, #255	@ 0xff
 800b7ce:	dc05      	bgt.n	800b7dc <OutputDbgTrace+0x50>
 800b7d0:	2b0e      	cmp	r3, #14
 800b7d2:	d005      	beq.n	800b7e0 <OutputDbgTrace+0x54>
 800b7d4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b7d6:	e001      	b.n	800b7dc <OutputDbgTrace+0x50>
          break;
 800b7d8:	bf00      	nop
 800b7da:	e027      	b.n	800b82c <OutputDbgTrace+0xa0>
          break;
 800b7dc:	bf00      	nop
 800b7de:	e025      	b.n	800b82c <OutputDbgTrace+0xa0>
          break;
 800b7e0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b7e2:	e023      	b.n	800b82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b7e8:	e020      	b.n	800b82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	7a5b      	ldrb	r3, [r3, #9]
 800b7f2:	2b0e      	cmp	r3, #14
 800b7f4:	d001      	beq.n	800b7fa <OutputDbgTrace+0x6e>
 800b7f6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b7f8:	e000      	b.n	800b7fc <OutputDbgTrace+0x70>
          break;
 800b7fa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b7fc:	e016      	b.n	800b82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	7a5b      	ldrb	r3, [r3, #9]
 800b806:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b808:	e010      	b.n	800b82c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b80e:	e00d      	b.n	800b82c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	7a5b      	ldrb	r3, [r3, #9]
 800b818:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b81a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b81c:	e006      	b.n	800b82c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	7a5b      	ldrb	r3, [r3, #9]
 800b826:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b828:	e000      	b.n	800b82c <OutputDbgTrace+0xa0>

    default:
      break;
 800b82a:	bf00      	nop
  }

  return;
 800b82c:	bf00      	nop
}
 800b82e:	3714      	adds	r7, #20
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800b844:	215c      	movs	r1, #92	@ 0x5c
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f005 fa66 	bl	8010d18 <strrchr>
 800b84c:	4603      	mov	r3, r0
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d007      	beq.n	800b862 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800b852:	215c      	movs	r1, #92	@ 0x5c
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f005 fa5f 	bl	8010d18 <strrchr>
 800b85a:	4603      	mov	r3, r0
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
 800b860:	e00d      	b.n	800b87e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800b862:	212f      	movs	r1, #47	@ 0x2f
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f005 fa57 	bl	8010d18 <strrchr>
 800b86a:	4603      	mov	r3, r0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d006      	beq.n	800b87e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800b870:	212f      	movs	r1, #47	@ 0x2f
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f005 fa50 	bl	8010d18 <strrchr>
 800b878:	4603      	mov	r3, r0
 800b87a:	3301      	adds	r3, #1
 800b87c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b87e:	68fb      	ldr	r3, [r7, #12]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b888:	b480      	push	{r7}
 800b88a:	b085      	sub	sp, #20
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	4603      	mov	r3, r0
 800b890:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b892:	4b0f      	ldr	r3, [pc, #60]	@ (800b8d0 <OTP_Read+0x48>)
 800b894:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b896:	e002      	b.n	800b89e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3b08      	subs	r3, #8
 800b89c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	79fa      	ldrb	r2, [r7, #7]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d003      	beq.n	800b8b2 <OTP_Read+0x2a>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4a09      	ldr	r2, [pc, #36]	@ (800b8d4 <OTP_Read+0x4c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d1f2      	bne.n	800b898 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3307      	adds	r3, #7
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	79fa      	ldrb	r2, [r7, #7]
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d001      	beq.n	800b8c2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3714      	adds	r7, #20
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	1fff73f8 	.word	0x1fff73f8
 800b8d4:	1fff7000 	.word	0x1fff7000

0800b8d8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	687a      	ldr	r2, [r7, #4]
 800b8e4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	605a      	str	r2, [r3, #4]
}
 800b8ec:	bf00      	nop
 800b8ee:	370c      	adds	r7, #12
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f6:	4770      	bx	lr

0800b8f8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b087      	sub	sp, #28
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b900:	f3ef 8310 	mrs	r3, PRIMASK
 800b904:	60fb      	str	r3, [r7, #12]
  return(result);
 800b906:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b90a:	b672      	cpsid	i
}
 800b90c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	429a      	cmp	r2, r3
 800b916:	d102      	bne.n	800b91e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
 800b91c:	e001      	b.n	800b922 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b91e:	2300      	movs	r3, #0
 800b920:	75fb      	strb	r3, [r7, #23]
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	f383 8810 	msr	PRIMASK, r3
}
 800b92c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b930:	4618      	mov	r0, r3
 800b932:	371c      	adds	r7, #28
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
 800b944:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b946:	f3ef 8310 	mrs	r3, PRIMASK
 800b94a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b94c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b94e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b950:	b672      	cpsid	i
}
 800b952:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	605a      	str	r2, [r3, #4]
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	f383 8810 	msr	PRIMASK, r3
}
 800b97a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b97c:	bf00      	nop
 800b97e:	371c      	adds	r7, #28
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b988:	b480      	push	{r7}
 800b98a:	b087      	sub	sp, #28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b992:	f3ef 8310 	mrs	r3, PRIMASK
 800b996:	60fb      	str	r3, [r7, #12]
  return(result);
 800b998:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b99a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b99c:	b672      	cpsid	i
}
 800b99e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	687a      	ldr	r2, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	683a      	ldr	r2, [r7, #0]
 800b9ba:	601a      	str	r2, [r3, #0]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	f383 8810 	msr	PRIMASK, r3
}
 800b9c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b9c8:	bf00      	nop
 800b9ca:	371c      	adds	r7, #28
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b087      	sub	sp, #28
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b9e0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b9e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9e6:	b672      	cpsid	i
}
 800b9e8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	6852      	ldr	r2, [r2, #4]
 800b9fc:	605a      	str	r2, [r3, #4]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	f383 8810 	msr	PRIMASK, r3
}
 800ba08:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba0a:	bf00      	nop
 800ba0c:	371c      	adds	r7, #28
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ba16:	b580      	push	{r7, lr}
 800ba18:	b086      	sub	sp, #24
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba20:	f3ef 8310 	mrs	r3, PRIMASK
 800ba24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ba28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ba2a:	b672      	cpsid	i
}
 800ba2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff ffca 	bl	800b9d4 <LST_remove_node>
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f383 8810 	msr	PRIMASK, r3
}
 800ba4a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ba4c:	bf00      	nop
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b087      	sub	sp, #28
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ba62:	2301      	movs	r3, #1
 800ba64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ba6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba6c:	7a5b      	ldrb	r3, [r3, #9]
 800ba6e:	b2db      	uxtb	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d131      	bne.n	800bad8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ba74:	4b1c      	ldr	r3, [pc, #112]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba76:	7a5b      	ldrb	r3, [r3, #9]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	4b1a      	ldr	r3, [pc, #104]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba7e:	2100      	movs	r1, #0
 800ba80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ba82:	4b19      	ldr	r3, [pc, #100]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba84:	7a5b      	ldrb	r3, [r3, #9]
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	4a17      	ldr	r2, [pc, #92]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba8a:	009b      	lsls	r3, r3, #2
 800ba8c:	4413      	add	r3, r2
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ba92:	4b15      	ldr	r3, [pc, #84]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba94:	7a5b      	ldrb	r3, [r3, #9]
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	461a      	mov	r2, r3
 800ba9a:	4b13      	ldr	r3, [pc, #76]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800ba9c:	4413      	add	r3, r2
 800ba9e:	79fa      	ldrb	r2, [r7, #7]
 800baa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800baa2:	4b11      	ldr	r3, [pc, #68]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800baa4:	7a5b      	ldrb	r3, [r3, #9]
 800baa6:	b2db      	uxtb	r3, r3
 800baa8:	1c5a      	adds	r2, r3, #1
 800baaa:	b2d1      	uxtb	r1, r2
 800baac:	4a0e      	ldr	r2, [pc, #56]	@ (800bae8 <FATFS_LinkDriverEx+0x94>)
 800baae:	7251      	strb	r1, [r2, #9]
 800bab0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bab2:	7dbb      	ldrb	r3, [r7, #22]
 800bab4:	3330      	adds	r3, #48	@ 0x30
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	3301      	adds	r3, #1
 800bac0:	223a      	movs	r2, #58	@ 0x3a
 800bac2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	3302      	adds	r3, #2
 800bac8:	222f      	movs	r2, #47	@ 0x2f
 800baca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	3303      	adds	r3, #3
 800bad0:	2200      	movs	r2, #0
 800bad2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bad4:	2300      	movs	r3, #0
 800bad6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bada:	4618      	mov	r0, r3
 800badc:	371c      	adds	r7, #28
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	20001ecc 	.word	0x20001ecc

0800baec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800baf6:	2200      	movs	r2, #0
 800baf8:	6839      	ldr	r1, [r7, #0]
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f7ff ffaa 	bl	800ba54 <FATFS_LinkDriverEx>
 800bb00:	4603      	mov	r3, r0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
	...

0800bb0c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800bb10:	4b03      	ldr	r3, [pc, #12]	@ (800bb20 <LL_FLASH_GetUDN+0x14>)
 800bb12:	681b      	ldr	r3, [r3, #0]
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	1fff7580 	.word	0x1fff7580

0800bb24 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800bb28:	4b03      	ldr	r3, [pc, #12]	@ (800bb38 <LL_FLASH_GetDeviceID+0x14>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	b2db      	uxtb	r3, r3
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr
 800bb38:	1fff7584 	.word	0x1fff7584

0800bb3c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800bb40:	4b03      	ldr	r3, [pc, #12]	@ (800bb50 <LL_FLASH_GetSTCompanyID+0x14>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	0a1b      	lsrs	r3, r3, #8
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr
 800bb50:	1fff7584 	.word	0x1fff7584

0800bb54 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800bb54:	b5b0      	push	{r4, r5, r7, lr}
 800bb56:	b090      	sub	sp, #64	@ 0x40
 800bb58:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bb5a:	2392      	movs	r3, #146	@ 0x92
 800bb5c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800bb60:	4b45      	ldr	r3, [pc, #276]	@ (800bc78 <APP_BLE_Init+0x124>)
 800bb62:	1d3c      	adds	r4, r7, #4
 800bb64:	461d      	mov	r5, r3
 800bb66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bb76:	c403      	stmia	r4!, {r0, r1}
 800bb78:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800bb7a:	f000 fb55 	bl	800c228 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800bb7e:	2101      	movs	r1, #1
 800bb80:	2002      	movs	r0, #2
 800bb82:	f002 ff35 	bl	800e9f0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800bb86:	4a3d      	ldr	r2, [pc, #244]	@ (800bc7c <APP_BLE_Init+0x128>)
 800bb88:	2100      	movs	r1, #0
 800bb8a:	2002      	movs	r0, #2
 800bb8c:	f003 f85c 	bl	800ec48 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800bb90:	1d3b      	adds	r3, r7, #4
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff f842 	bl	800ac1c <SHCI_C2_BLE_Init>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800bb9e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d012      	beq.n	800bbcc <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800bba6:	4836      	ldr	r0, [pc, #216]	@ (800bc80 <APP_BLE_Init+0x12c>)
 800bba8:	f7ff fe46 	bl	800b838 <DbgTraceGetFileName>
 800bbac:	4601      	mov	r1, r0
 800bbae:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800bbb2:	4a34      	ldr	r2, [pc, #208]	@ (800bc84 <APP_BLE_Init+0x130>)
 800bbb4:	4834      	ldr	r0, [pc, #208]	@ (800bc88 <APP_BLE_Init+0x134>)
 800bbb6:	f004 ff57 	bl	8010a68 <iprintf>
 800bbba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	4832      	ldr	r0, [pc, #200]	@ (800bc8c <APP_BLE_Init+0x138>)
 800bbc2:	f004 ff51 	bl	8010a68 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800bbc6:	f7f6 ff87 	bl	8002ad8 <Error_Handler>
 800bbca:	e00c      	b.n	800bbe6 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800bbcc:	482c      	ldr	r0, [pc, #176]	@ (800bc80 <APP_BLE_Init+0x12c>)
 800bbce:	f7ff fe33 	bl	800b838 <DbgTraceGetFileName>
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800bbd8:	4a2a      	ldr	r2, [pc, #168]	@ (800bc84 <APP_BLE_Init+0x130>)
 800bbda:	482b      	ldr	r0, [pc, #172]	@ (800bc88 <APP_BLE_Init+0x134>)
 800bbdc:	f004 ff44 	bl	8010a68 <iprintf>
 800bbe0:	482b      	ldr	r0, [pc, #172]	@ (800bc90 <APP_BLE_Init+0x13c>)
 800bbe2:	f004 ff41 	bl	8010a68 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800bbe6:	f000 fb35 	bl	800c254 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800bbea:	f7fe ff71 	bl	800aad0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bbee:	4b29      	ldr	r3, [pc, #164]	@ (800bc94 <APP_BLE_Init+0x140>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800bbf6:	4b27      	ldr	r3, [pc, #156]	@ (800bc94 <APP_BLE_Init+0x140>)
 800bbf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bbfc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800bbfe:	4a26      	ldr	r2, [pc, #152]	@ (800bc98 <APP_BLE_Init+0x144>)
 800bc00:	2100      	movs	r1, #0
 800bc02:	2001      	movs	r0, #1
 800bc04:	f003 f820 	bl	800ec48 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800bc08:	2006      	movs	r0, #6
 800bc0a:	f7fe fdd5 	bl	800a7b8 <aci_hal_set_radio_activity_mask>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800bc14:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d010      	beq.n	800bc3e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800bc1c:	4818      	ldr	r0, [pc, #96]	@ (800bc80 <APP_BLE_Init+0x12c>)
 800bc1e:	f7ff fe0b 	bl	800b838 <DbgTraceGetFileName>
 800bc22:	4601      	mov	r1, r0
 800bc24:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800bc28:	4a16      	ldr	r2, [pc, #88]	@ (800bc84 <APP_BLE_Init+0x130>)
 800bc2a:	4817      	ldr	r0, [pc, #92]	@ (800bc88 <APP_BLE_Init+0x134>)
 800bc2c:	f004 ff1c 	bl	8010a68 <iprintf>
 800bc30:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc34:	4619      	mov	r1, r3
 800bc36:	4819      	ldr	r0, [pc, #100]	@ (800bc9c <APP_BLE_Init+0x148>)
 800bc38:	f004 ff16 	bl	8010a68 <iprintf>
 800bc3c:	e00c      	b.n	800bc58 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800bc3e:	4810      	ldr	r0, [pc, #64]	@ (800bc80 <APP_BLE_Init+0x12c>)
 800bc40:	f7ff fdfa 	bl	800b838 <DbgTraceGetFileName>
 800bc44:	4601      	mov	r1, r0
 800bc46:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800bc4a:	4a0e      	ldr	r2, [pc, #56]	@ (800bc84 <APP_BLE_Init+0x130>)
 800bc4c:	480e      	ldr	r0, [pc, #56]	@ (800bc88 <APP_BLE_Init+0x134>)
 800bc4e:	f004 ff0b 	bl	8010a68 <iprintf>
 800bc52:	4813      	ldr	r0, [pc, #76]	@ (800bca0 <APP_BLE_Init+0x14c>)
 800bc54:	f004 ff08 	bl	8010a68 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800bc58:	f000 ffc0 	bl	800cbdc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800bc5c:	4b0d      	ldr	r3, [pc, #52]	@ (800bc94 <APP_BLE_Init+0x140>)
 800bc5e:	2200      	movs	r2, #0
 800bc60:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800bc62:	4b0c      	ldr	r3, [pc, #48]	@ (800bc94 <APP_BLE_Init+0x140>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800bc68:	2001      	movs	r0, #1
 800bc6a:	f000 fd87 	bl	800c77c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800bc6e:	bf00      	nop
}
 800bc70:	3740      	adds	r7, #64	@ 0x40
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bdb0      	pop	{r4, r5, r7, pc}
 800bc76:	bf00      	nop
 800bc78:	08013d14 	.word	0x08013d14
 800bc7c:	0800ae39 	.word	0x0800ae39
 800bc80:	08013c08 	.word	0x08013c08
 800bc84:	08016688 	.word	0x08016688
 800bc88:	08013c24 	.word	0x08013c24
 800bc8c:	08013c38 	.word	0x08013c38
 800bc90:	08013c70 	.word	0x08013c70
 800bc94:	20001ee0 	.word	0x20001ee0
 800bc98:	0800c901 	.word	0x0800c901
 800bc9c:	08013c98 	.word	0x08013c98
 800bca0:	08013cdc 	.word	0x08013cdc

0800bca4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800bca4:	b5b0      	push	{r4, r5, r7, lr}
 800bca6:	b08e      	sub	sp, #56	@ 0x38
 800bca8:	af04      	add	r7, sp, #16
 800bcaa:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800bcac:	2392      	movs	r3, #146	@ 0x92
 800bcae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800bcb8:	6a3b      	ldr	r3, [r7, #32]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2bff      	cmp	r3, #255	@ 0xff
 800bcbe:	f000 811d 	beq.w	800befc <SVCCTL_App_Notification+0x258>
 800bcc2:	2bff      	cmp	r3, #255	@ 0xff
 800bcc4:	f300 8286 	bgt.w	800c1d4 <SVCCTL_App_Notification+0x530>
 800bcc8:	2b05      	cmp	r3, #5
 800bcca:	d002      	beq.n	800bcd2 <SVCCTL_App_Notification+0x2e>
 800bccc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcce:	d042      	beq.n	800bd56 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800bcd0:	e280      	b.n	800c1d4 <SVCCTL_App_Notification+0x530>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800bcd2:	6a3b      	ldr	r3, [r7, #32]
 800bcd4:	3302      	adds	r3, #2
 800bcd6:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	4bb6      	ldr	r3, [pc, #728]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bce2:	8adb      	ldrh	r3, [r3, #22]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d128      	bne.n	800bd3a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800bce8:	4bb4      	ldr	r3, [pc, #720]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800bcee:	4bb3      	ldr	r3, [pc, #716]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800bcf6:	48b2      	ldr	r0, [pc, #712]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bcf8:	f7ff fd9e 	bl	800b838 <DbgTraceGetFileName>
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800bd02:	4ab0      	ldr	r2, [pc, #704]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bd04:	48b0      	ldr	r0, [pc, #704]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bd06:	f004 feaf 	bl	8010a68 <iprintf>
 800bd0a:	48b0      	ldr	r0, [pc, #704]	@ (800bfcc <SVCCTL_App_Notification+0x328>)
 800bd0c:	f004 ff1c 	bl	8010b48 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800bd10:	48ab      	ldr	r0, [pc, #684]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bd12:	f7ff fd91 	bl	800b838 <DbgTraceGetFileName>
 800bd16:	4601      	mov	r1, r0
 800bd18:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800bd1c:	4aa9      	ldr	r2, [pc, #676]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bd1e:	48aa      	ldr	r0, [pc, #680]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bd20:	f004 fea2 	bl	8010a68 <iprintf>
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	4619      	mov	r1, r3
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	78db      	ldrb	r3, [r3, #3]
 800bd32:	461a      	mov	r2, r3
 800bd34:	48a6      	ldr	r0, [pc, #664]	@ (800bfd0 <SVCCTL_App_Notification+0x32c>)
 800bd36:	f004 fe97 	bl	8010a68 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800bd3a:	2001      	movs	r0, #1
 800bd3c:	f000 fd1e 	bl	800c77c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800bd40:	4ba4      	ldr	r3, [pc, #656]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bd46:	4b9d      	ldr	r3, [pc, #628]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bd48:	8ada      	ldrh	r2, [r3, #22]
 800bd4a:	4ba2      	ldr	r3, [pc, #648]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800bd4c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800bd4e:	48a1      	ldr	r0, [pc, #644]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800bd50:	f000 ff30 	bl	800cbb4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800bd54:	e241      	b.n	800c1da <SVCCTL_App_Notification+0x536>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800bd56:	6a3b      	ldr	r3, [r7, #32]
 800bd58:	3302      	adds	r3, #2
 800bd5a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d042      	beq.n	800bdea <SVCCTL_App_Notification+0x146>
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	f040 80c7 	bne.w	800bef8 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	3301      	adds	r3, #1
 800bd6e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800bd70:	4893      	ldr	r0, [pc, #588]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bd72:	f7ff fd61 	bl	800b838 <DbgTraceGetFileName>
 800bd76:	4601      	mov	r1, r0
 800bd78:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800bd7c:	4a91      	ldr	r2, [pc, #580]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bd7e:	4892      	ldr	r0, [pc, #584]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bd80:	f004 fe72 	bl	8010a68 <iprintf>
 800bd84:	4894      	ldr	r0, [pc, #592]	@ (800bfd8 <SVCCTL_App_Notification+0x334>)
 800bd86:	f004 fedf 	bl	8010b48 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bd8a:	488d      	ldr	r0, [pc, #564]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bd8c:	f7ff fd54 	bl	800b838 <DbgTraceGetFileName>
 800bd90:	4601      	mov	r1, r0
 800bd92:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800bd96:	4a8b      	ldr	r2, [pc, #556]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bd98:	488b      	ldr	r0, [pc, #556]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bd9a:	f004 fe65 	bl	8010a68 <iprintf>
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7f4 fb94 	bl	80004d4 <__aeabi_i2d>
 800bdac:	f04f 0200 	mov.w	r2, #0
 800bdb0:	4b8a      	ldr	r3, [pc, #552]	@ (800bfdc <SVCCTL_App_Notification+0x338>)
 800bdb2:	f7f4 fbf9 	bl	80005a8 <__aeabi_dmul>
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4610      	mov	r0, r2
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	461c      	mov	r4, r3
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	005b      	lsls	r3, r3, #1
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	9400      	str	r4, [sp, #0]
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	487f      	ldr	r0, [pc, #508]	@ (800bfe0 <SVCCTL_App_Notification+0x33c>)
 800bde4:	f004 fe40 	bl	8010a68 <iprintf>
          break;
 800bde8:	e087      	b.n	800befa <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	3301      	adds	r3, #1
 800bdee:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800bdf0:	4873      	ldr	r0, [pc, #460]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bdf2:	f7ff fd21 	bl	800b838 <DbgTraceGetFileName>
 800bdf6:	4601      	mov	r1, r0
 800bdf8:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800bdfc:	4a71      	ldr	r2, [pc, #452]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bdfe:	4872      	ldr	r0, [pc, #456]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800be00:	f004 fe32 	bl	8010a68 <iprintf>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	4619      	mov	r1, r3
 800be0e:	4875      	ldr	r0, [pc, #468]	@ (800bfe4 <SVCCTL_App_Notification+0x340>)
 800be10:	f004 fe2a 	bl	8010a68 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800be14:	486a      	ldr	r0, [pc, #424]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800be16:	f7ff fd0f 	bl	800b838 <DbgTraceGetFileName>
 800be1a:	4601      	mov	r1, r0
 800be1c:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800be20:	4a68      	ldr	r2, [pc, #416]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800be22:	4869      	ldr	r0, [pc, #420]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800be24:	f004 fe20 	bl	8010a68 <iprintf>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	7a9b      	ldrb	r3, [r3, #10]
 800be2c:	4618      	mov	r0, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	7a5b      	ldrb	r3, [r3, #9]
 800be32:	461c      	mov	r4, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	7a1b      	ldrb	r3, [r3, #8]
 800be38:	461d      	mov	r5, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	79db      	ldrb	r3, [r3, #7]
 800be3e:	461a      	mov	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	799b      	ldrb	r3, [r3, #6]
 800be44:	4619      	mov	r1, r3
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	795b      	ldrb	r3, [r3, #5]
 800be4a:	9302      	str	r3, [sp, #8]
 800be4c:	9101      	str	r1, [sp, #4]
 800be4e:	9200      	str	r2, [sp, #0]
 800be50:	462b      	mov	r3, r5
 800be52:	4622      	mov	r2, r4
 800be54:	4601      	mov	r1, r0
 800be56:	4864      	ldr	r0, [pc, #400]	@ (800bfe8 <SVCCTL_App_Notification+0x344>)
 800be58:	f004 fe06 	bl	8010a68 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800be5c:	4858      	ldr	r0, [pc, #352]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800be5e:	f7ff fceb 	bl	800b838 <DbgTraceGetFileName>
 800be62:	4601      	mov	r1, r0
 800be64:	f240 13fd 	movw	r3, #509	@ 0x1fd
 800be68:	4a56      	ldr	r2, [pc, #344]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800be6a:	4857      	ldr	r0, [pc, #348]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800be6c:	f004 fdfc 	bl	8010a68 <iprintf>
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800be76:	b29b      	uxth	r3, r3
 800be78:	4618      	mov	r0, r3
 800be7a:	f7f4 fb2b 	bl	80004d4 <__aeabi_i2d>
 800be7e:	f04f 0200 	mov.w	r2, #0
 800be82:	4b56      	ldr	r3, [pc, #344]	@ (800bfdc <SVCCTL_App_Notification+0x338>)
 800be84:	f7f4 fb90 	bl	80005a8 <__aeabi_dmul>
 800be88:	4602      	mov	r2, r0
 800be8a:	460b      	mov	r3, r1
 800be8c:	4610      	mov	r0, r2
 800be8e:	4619      	mov	r1, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800be96:	b29b      	uxth	r3, r3
 800be98:	461c      	mov	r4, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	461a      	mov	r2, r3
 800bea4:	4613      	mov	r3, r2
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	9400      	str	r4, [sp, #0]
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	484a      	ldr	r0, [pc, #296]	@ (800bfe0 <SVCCTL_App_Notification+0x33c>)
 800beb6:	f004 fdd7 	bl	8010a68 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800beba:	4b40      	ldr	r3, [pc, #256]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bebc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800bec0:	2b04      	cmp	r3, #4
 800bec2:	d104      	bne.n	800bece <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bec4:	4b3d      	ldr	r3, [pc, #244]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bec6:	2206      	movs	r2, #6
 800bec8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800becc:	e003      	b.n	800bed6 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bece:	4b3b      	ldr	r3, [pc, #236]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bed0:	2205      	movs	r2, #5
 800bed2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bedc:	b29a      	uxth	r2, r3
 800bede:	4b37      	ldr	r3, [pc, #220]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800bee0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bee2:	4b3c      	ldr	r3, [pc, #240]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800bee4:	2200      	movs	r2, #0
 800bee6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bee8:	4b34      	ldr	r3, [pc, #208]	@ (800bfbc <SVCCTL_App_Notification+0x318>)
 800beea:	8ada      	ldrh	r2, [r3, #22]
 800beec:	4b39      	ldr	r3, [pc, #228]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800beee:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800bef0:	4838      	ldr	r0, [pc, #224]	@ (800bfd4 <SVCCTL_App_Notification+0x330>)
 800bef2:	f000 fe5f 	bl	800cbb4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bef6:	e000      	b.n	800befa <SVCCTL_App_Notification+0x256>
          break;
 800bef8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800befa:	e16e      	b.n	800c1da <SVCCTL_App_Notification+0x536>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800befc:	6a3b      	ldr	r3, [r7, #32]
 800befe:	3302      	adds	r3, #2
 800bf00:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	f000 814a 	beq.w	800c1a6 <SVCCTL_App_Notification+0x502>
 800bf12:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800bf16:	4293      	cmp	r3, r2
 800bf18:	f300 815e 	bgt.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf20:	f000 8154 	beq.w	800c1cc <SVCCTL_App_Notification+0x528>
 800bf24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bf28:	f300 8156 	bgt.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf2c:	2b04      	cmp	r3, #4
 800bf2e:	f000 814f 	beq.w	800c1d0 <SVCCTL_App_Notification+0x52c>
 800bf32:	2b04      	cmp	r3, #4
 800bf34:	f2c0 8150 	blt.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf38:	f240 420a 	movw	r2, #1034	@ 0x40a
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	f300 814b 	bgt.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bf46:	f340 8147 	ble.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf4a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800bf4e:	2b09      	cmp	r3, #9
 800bf50:	f200 8142 	bhi.w	800c1d8 <SVCCTL_App_Notification+0x534>
 800bf54:	a201      	add	r2, pc, #4	@ (adr r2, 800bf5c <SVCCTL_App_Notification+0x2b8>)
 800bf56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5a:	bf00      	nop
 800bf5c:	0800c121 	.word	0x0800c121
 800bf60:	0800bff5 	.word	0x0800bff5
 800bf64:	0800c1d9 	.word	0x0800c1d9
 800bf68:	0800c1d9 	.word	0x0800c1d9
 800bf6c:	0800c1d9 	.word	0x0800c1d9
 800bf70:	0800c1d9 	.word	0x0800c1d9
 800bf74:	0800bf85 	.word	0x0800bf85
 800bf78:	0800c1d9 	.word	0x0800c1d9
 800bf7c:	0800c067 	.word	0x0800c067
 800bf80:	0800bfa1 	.word	0x0800bfa1
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800bf84:	480e      	ldr	r0, [pc, #56]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bf86:	f7ff fc57 	bl	800b838 <DbgTraceGetFileName>
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	f240 233f 	movw	r3, #575	@ 0x23f
 800bf90:	4a0c      	ldr	r2, [pc, #48]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bf92:	480d      	ldr	r0, [pc, #52]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bf94:	f004 fd68 	bl	8010a68 <iprintf>
 800bf98:	4814      	ldr	r0, [pc, #80]	@ (800bfec <SVCCTL_App_Notification+0x348>)
 800bf9a:	f004 fd65 	bl	8010a68 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bf9e:	e118      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800bfa0:	4807      	ldr	r0, [pc, #28]	@ (800bfc0 <SVCCTL_App_Notification+0x31c>)
 800bfa2:	f7ff fc49 	bl	800b838 <DbgTraceGetFileName>
 800bfa6:	4601      	mov	r1, r0
 800bfa8:	f240 234f 	movw	r3, #591	@ 0x24f
 800bfac:	4a05      	ldr	r2, [pc, #20]	@ (800bfc4 <SVCCTL_App_Notification+0x320>)
 800bfae:	4806      	ldr	r0, [pc, #24]	@ (800bfc8 <SVCCTL_App_Notification+0x324>)
 800bfb0:	f004 fd5a 	bl	8010a68 <iprintf>
 800bfb4:	480e      	ldr	r0, [pc, #56]	@ (800bff0 <SVCCTL_App_Notification+0x34c>)
 800bfb6:	f004 fdc7 	bl	8010b48 <puts>
          break;
 800bfba:	e10a      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
 800bfbc:	20001ee0 	.word	0x20001ee0
 800bfc0:	08013c08 	.word	0x08013c08
 800bfc4:	08016698 	.word	0x08016698
 800bfc8:	08013c24 	.word	0x08013c24
 800bfcc:	08013d50 	.word	0x08013d50
 800bfd0:	08013d7c 	.word	0x08013d7c
 800bfd4:	20001f64 	.word	0x20001f64
 800bfd8:	08013db8 	.word	0x08013db8
 800bfdc:	3ff40000 	.word	0x3ff40000
 800bfe0:	08013dec 	.word	0x08013dec
 800bfe4:	08013e58 	.word	0x08013e58
 800bfe8:	08013ea0 	.word	0x08013ea0
 800bfec:	08013ef0 	.word	0x08013ef0
 800bff0:	08013f18 	.word	0x08013f18
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800bff4:	487b      	ldr	r0, [pc, #492]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800bff6:	f7ff fc1f 	bl	800b838 <DbgTraceGetFileName>
 800bffa:	4601      	mov	r1, r0
 800bffc:	f240 2356 	movw	r3, #598	@ 0x256
 800c000:	4a79      	ldr	r2, [pc, #484]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c002:	487a      	ldr	r0, [pc, #488]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c004:	f004 fd30 	bl	8010a68 <iprintf>
 800c008:	4879      	ldr	r0, [pc, #484]	@ (800c1f0 <SVCCTL_App_Notification+0x54c>)
 800c00a:	f004 fd9d 	bl	8010b48 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800c00e:	4b79      	ldr	r3, [pc, #484]	@ (800c1f4 <SVCCTL_App_Notification+0x550>)
 800c010:	8adb      	ldrh	r3, [r3, #22]
 800c012:	4979      	ldr	r1, [pc, #484]	@ (800c1f8 <SVCCTL_App_Notification+0x554>)
 800c014:	4618      	mov	r0, r3
 800c016:	f7fd fdd1 	bl	8009bbc <aci_gap_pass_key_resp>
 800c01a:	4603      	mov	r3, r0
 800c01c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c024:	2b00      	cmp	r3, #0
 800c026:	d010      	beq.n	800c04a <SVCCTL_App_Notification+0x3a6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800c028:	486e      	ldr	r0, [pc, #440]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c02a:	f7ff fc05 	bl	800b838 <DbgTraceGetFileName>
 800c02e:	4601      	mov	r1, r0
 800c030:	f240 235b 	movw	r3, #603	@ 0x25b
 800c034:	4a6c      	ldr	r2, [pc, #432]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c036:	486d      	ldr	r0, [pc, #436]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c038:	f004 fd16 	bl	8010a68 <iprintf>
 800c03c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c040:	4619      	mov	r1, r3
 800c042:	486e      	ldr	r0, [pc, #440]	@ (800c1fc <SVCCTL_App_Notification+0x558>)
 800c044:	f004 fd10 	bl	8010a68 <iprintf>
          break;
 800c048:	e0c3      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800c04a:	4866      	ldr	r0, [pc, #408]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c04c:	f7ff fbf4 	bl	800b838 <DbgTraceGetFileName>
 800c050:	4601      	mov	r1, r0
 800c052:	f240 235f 	movw	r3, #607	@ 0x25f
 800c056:	4a64      	ldr	r2, [pc, #400]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c058:	4864      	ldr	r0, [pc, #400]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c05a:	f004 fd05 	bl	8010a68 <iprintf>
 800c05e:	4868      	ldr	r0, [pc, #416]	@ (800c200 <SVCCTL_App_Notification+0x55c>)
 800c060:	f004 fd72 	bl	8010b48 <puts>
          break;
 800c064:	e0b5      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800c066:	485f      	ldr	r0, [pc, #380]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c068:	f7ff fbe6 	bl	800b838 <DbgTraceGetFileName>
 800c06c:	4601      	mov	r1, r0
 800c06e:	f240 2367 	movw	r3, #615	@ 0x267
 800c072:	4a5d      	ldr	r2, [pc, #372]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c074:	485d      	ldr	r0, [pc, #372]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c076:	f004 fcf7 	bl	8010a68 <iprintf>
 800c07a:	4862      	ldr	r0, [pc, #392]	@ (800c204 <SVCCTL_App_Notification+0x560>)
 800c07c:	f004 fd64 	bl	8010b48 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800c080:	4858      	ldr	r0, [pc, #352]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c082:	f7ff fbd9 	bl	800b838 <DbgTraceGetFileName>
 800c086:	4601      	mov	r1, r0
 800c088:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800c08c:	4a56      	ldr	r2, [pc, #344]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c08e:	4857      	ldr	r0, [pc, #348]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c090:	f004 fcea 	bl	8010a68 <iprintf>
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	3302      	adds	r3, #2
 800c098:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c09c:	4619      	mov	r1, r3
 800c09e:	485a      	ldr	r0, [pc, #360]	@ (800c208 <SVCCTL_App_Notification+0x564>)
 800c0a0:	f004 fce2 	bl	8010a68 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800c0a4:	484f      	ldr	r0, [pc, #316]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c0a6:	f7ff fbc7 	bl	800b838 <DbgTraceGetFileName>
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	f240 236a 	movw	r3, #618	@ 0x26a
 800c0b0:	4a4d      	ldr	r2, [pc, #308]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c0b2:	484e      	ldr	r0, [pc, #312]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c0b4:	f004 fcd8 	bl	8010a68 <iprintf>
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	3302      	adds	r3, #2
 800c0bc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	4852      	ldr	r0, [pc, #328]	@ (800c20c <SVCCTL_App_Notification+0x568>)
 800c0c4:	f004 fcd0 	bl	8010a68 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800c0c8:	4b4a      	ldr	r3, [pc, #296]	@ (800c1f4 <SVCCTL_App_Notification+0x550>)
 800c0ca:	8adb      	ldrh	r3, [r3, #22]
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd ff1e 	bl	8009f10 <aci_gap_numeric_comparison_value_confirm_yesno>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800c0da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d010      	beq.n	800c104 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800c0e2:	4840      	ldr	r0, [pc, #256]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c0e4:	f7ff fba8 	bl	800b838 <DbgTraceGetFileName>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	f240 236f 	movw	r3, #623	@ 0x26f
 800c0ee:	4a3e      	ldr	r2, [pc, #248]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c0f0:	483e      	ldr	r0, [pc, #248]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c0f2:	f004 fcb9 	bl	8010a68 <iprintf>
 800c0f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	4844      	ldr	r0, [pc, #272]	@ (800c210 <SVCCTL_App_Notification+0x56c>)
 800c0fe:	f004 fcb3 	bl	8010a68 <iprintf>
          break;
 800c102:	e066      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800c104:	4837      	ldr	r0, [pc, #220]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c106:	f7ff fb97 	bl	800b838 <DbgTraceGetFileName>
 800c10a:	4601      	mov	r1, r0
 800c10c:	f240 2373 	movw	r3, #627	@ 0x273
 800c110:	4a35      	ldr	r2, [pc, #212]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c112:	4836      	ldr	r0, [pc, #216]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c114:	f004 fca8 	bl	8010a68 <iprintf>
 800c118:	483e      	ldr	r0, [pc, #248]	@ (800c214 <SVCCTL_App_Notification+0x570>)
 800c11a:	f004 fd15 	bl	8010b48 <puts>
          break;
 800c11e:	e058      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800c120:	69fb      	ldr	r3, [r7, #28]
 800c122:	3302      	adds	r3, #2
 800c124:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800c126:	482f      	ldr	r0, [pc, #188]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c128:	f7ff fb86 	bl	800b838 <DbgTraceGetFileName>
 800c12c:	4601      	mov	r1, r0
 800c12e:	f240 237d 	movw	r3, #637	@ 0x27d
 800c132:	4a2d      	ldr	r2, [pc, #180]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c134:	482d      	ldr	r0, [pc, #180]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c136:	f004 fc97 	bl	8010a68 <iprintf>
 800c13a:	4837      	ldr	r0, [pc, #220]	@ (800c218 <SVCCTL_App_Notification+0x574>)
 800c13c:	f004 fd04 	bl	8010b48 <puts>
          if (p_pairing_complete->Status != 0)
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	789b      	ldrb	r3, [r3, #2]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d013      	beq.n	800c170 <SVCCTL_App_Notification+0x4cc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800c148:	4826      	ldr	r0, [pc, #152]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c14a:	f7ff fb75 	bl	800b838 <DbgTraceGetFileName>
 800c14e:	4601      	mov	r1, r0
 800c150:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800c154:	4a24      	ldr	r2, [pc, #144]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c156:	4825      	ldr	r0, [pc, #148]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c158:	f004 fc86 	bl	8010a68 <iprintf>
 800c15c:	69bb      	ldr	r3, [r7, #24]
 800c15e:	789b      	ldrb	r3, [r3, #2]
 800c160:	4619      	mov	r1, r3
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	78db      	ldrb	r3, [r3, #3]
 800c166:	461a      	mov	r2, r3
 800c168:	482c      	ldr	r0, [pc, #176]	@ (800c21c <SVCCTL_App_Notification+0x578>)
 800c16a:	f004 fc7d 	bl	8010a68 <iprintf>
 800c16e:	e00c      	b.n	800c18a <SVCCTL_App_Notification+0x4e6>
            APP_DBG_MSG("     - Pairing Success\n");
 800c170:	481c      	ldr	r0, [pc, #112]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c172:	f7ff fb61 	bl	800b838 <DbgTraceGetFileName>
 800c176:	4601      	mov	r1, r0
 800c178:	f44f 7321 	mov.w	r3, #644	@ 0x284
 800c17c:	4a1a      	ldr	r2, [pc, #104]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c17e:	481b      	ldr	r0, [pc, #108]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c180:	f004 fc72 	bl	8010a68 <iprintf>
 800c184:	4826      	ldr	r0, [pc, #152]	@ (800c220 <SVCCTL_App_Notification+0x57c>)
 800c186:	f004 fcdf 	bl	8010b48 <puts>
          APP_DBG_MSG("\n");
 800c18a:	4816      	ldr	r0, [pc, #88]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c18c:	f7ff fb54 	bl	800b838 <DbgTraceGetFileName>
 800c190:	4601      	mov	r1, r0
 800c192:	f240 2386 	movw	r3, #646	@ 0x286
 800c196:	4a14      	ldr	r2, [pc, #80]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c198:	4814      	ldr	r0, [pc, #80]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c19a:	f004 fc65 	bl	8010a68 <iprintf>
 800c19e:	200a      	movs	r0, #10
 800c1a0:	f004 fc74 	bl	8010a8c <putchar>
          break;
 800c1a4:	e015      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800c1a6:	480f      	ldr	r0, [pc, #60]	@ (800c1e4 <SVCCTL_App_Notification+0x540>)
 800c1a8:	f7ff fb46 	bl	800b838 <DbgTraceGetFileName>
 800c1ac:	4601      	mov	r1, r0
 800c1ae:	f240 238f 	movw	r3, #655	@ 0x28f
 800c1b2:	4a0d      	ldr	r2, [pc, #52]	@ (800c1e8 <SVCCTL_App_Notification+0x544>)
 800c1b4:	480d      	ldr	r0, [pc, #52]	@ (800c1ec <SVCCTL_App_Notification+0x548>)
 800c1b6:	f004 fc57 	bl	8010a68 <iprintf>
 800c1ba:	481a      	ldr	r0, [pc, #104]	@ (800c224 <SVCCTL_App_Notification+0x580>)
 800c1bc:	f004 fc54 	bl	8010a68 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f4 <SVCCTL_App_Notification+0x550>)
 800c1c2:	8adb      	ldrh	r3, [r3, #22]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7fe f9b6 	bl	800a536 <aci_gatt_confirm_indication>
        break;
 800c1ca:	e002      	b.n	800c1d2 <SVCCTL_App_Notification+0x52e>
          break;
 800c1cc:	bf00      	nop
 800c1ce:	e003      	b.n	800c1d8 <SVCCTL_App_Notification+0x534>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800c1d0:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c1d2:	e001      	b.n	800c1d8 <SVCCTL_App_Notification+0x534>
      break;
 800c1d4:	bf00      	nop
 800c1d6:	e000      	b.n	800c1da <SVCCTL_App_Notification+0x536>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c1d8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800c1da:	2301      	movs	r3, #1
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3728      	adds	r7, #40	@ 0x28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c1e4:	08013c08 	.word	0x08013c08
 800c1e8:	08016698 	.word	0x08016698
 800c1ec:	08013c24 	.word	0x08013c24
 800c1f0:	08013f48 	.word	0x08013f48
 800c1f4:	20001ee0 	.word	0x20001ee0
 800c1f8:	0001b207 	.word	0x0001b207
 800c1fc:	08013f70 	.word	0x08013f70
 800c200:	08013fa4 	.word	0x08013fa4
 800c204:	08013fcc 	.word	0x08013fcc
 800c208:	08014000 	.word	0x08014000
 800c20c:	0801401c 	.word	0x0801401c
 800c210:	08014034 	.word	0x08014034
 800c214:	08014084 	.word	0x08014084
 800c218:	080140cc 	.word	0x080140cc
 800c21c:	080140f8 	.word	0x080140f8
 800c220:	08014134 	.word	0x08014134
 800c224:	0801414c 	.word	0x0801414c

0800c228 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800c22e:	4b06      	ldr	r3, [pc, #24]	@ (800c248 <Ble_Tl_Init+0x20>)
 800c230:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800c232:	4b06      	ldr	r3, [pc, #24]	@ (800c24c <Ble_Tl_Init+0x24>)
 800c234:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800c236:	463b      	mov	r3, r7
 800c238:	4619      	mov	r1, r3
 800c23a:	4805      	ldr	r0, [pc, #20]	@ (800c250 <Ble_Tl_Init+0x28>)
 800c23c:	f7fe fde0 	bl	800ae00 <hci_init>

  return;
 800c240:	bf00      	nop
}
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	200300d8 	.word	0x200300d8
 800c24c:	0800ca1d 	.word	0x0800ca1d
 800c250:	0800c9e5 	.word	0x0800c9e5

0800c254 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800c254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c256:	b08d      	sub	sp, #52	@ 0x34
 800c258:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800c25a:	2300      	movs	r3, #0
 800c25c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c25e:	2392      	movs	r3, #146	@ 0x92
 800c260:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800c262:	48a3      	ldr	r0, [pc, #652]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c264:	f7ff fae8 	bl	800b838 <DbgTraceGetFileName>
 800c268:	4601      	mov	r1, r0
 800c26a:	f44f 7333 	mov.w	r3, #716	@ 0x2cc
 800c26e:	4aa1      	ldr	r2, [pc, #644]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c270:	48a1      	ldr	r0, [pc, #644]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c272:	f004 fbf9 	bl	8010a68 <iprintf>
 800c276:	48a1      	ldr	r0, [pc, #644]	@ (800c4fc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800c278:	f004 fc66 	bl	8010b48 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800c27c:	f7fe faf0 	bl	800a860 <hci_reset>
 800c280:	4603      	mov	r3, r0
 800c282:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c284:	7dfb      	ldrb	r3, [r7, #23]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00f      	beq.n	800c2aa <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800c28a:	4899      	ldr	r0, [pc, #612]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c28c:	f7ff fad4 	bl	800b838 <DbgTraceGetFileName>
 800c290:	4601      	mov	r1, r0
 800c292:	f240 23d5 	movw	r3, #725	@ 0x2d5
 800c296:	4a97      	ldr	r2, [pc, #604]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c298:	4897      	ldr	r0, [pc, #604]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c29a:	f004 fbe5 	bl	8010a68 <iprintf>
 800c29e:	7dfb      	ldrb	r3, [r7, #23]
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4897      	ldr	r0, [pc, #604]	@ (800c500 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800c2a4:	f004 fbe0 	bl	8010a68 <iprintf>
 800c2a8:	e00c      	b.n	800c2c4 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800c2aa:	4891      	ldr	r0, [pc, #580]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c2ac:	f7ff fac4 	bl	800b838 <DbgTraceGetFileName>
 800c2b0:	4601      	mov	r1, r0
 800c2b2:	f240 23d9 	movw	r3, #729	@ 0x2d9
 800c2b6:	4a8f      	ldr	r2, [pc, #572]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c2b8:	488f      	ldr	r0, [pc, #572]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c2ba:	f004 fbd5 	bl	8010a68 <iprintf>
 800c2be:	4891      	ldr	r0, [pc, #580]	@ (800c504 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800c2c0:	f004 fc42 	bl	8010b48 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800c2c4:	f000 fad8 	bl	800c878 <BleGetBdAddress>
 800c2c8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	2106      	movs	r1, #6
 800c2ce:	2000      	movs	r0, #0
 800c2d0:	f7fe f986 	bl	800a5e0 <aci_hal_write_config_data>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c2d8:	7dfb      	ldrb	r3, [r7, #23]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00f      	beq.n	800c2fe <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800c2de:	4884      	ldr	r0, [pc, #528]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c2e0:	f7ff faaa 	bl	800b838 <DbgTraceGetFileName>
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	f240 23e3 	movw	r3, #739	@ 0x2e3
 800c2ea:	4a82      	ldr	r2, [pc, #520]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c2ec:	4882      	ldr	r0, [pc, #520]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c2ee:	f004 fbbb 	bl	8010a68 <iprintf>
 800c2f2:	7dfb      	ldrb	r3, [r7, #23]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	4884      	ldr	r0, [pc, #528]	@ (800c508 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800c2f8:	f004 fbb6 	bl	8010a68 <iprintf>
 800c2fc:	e035      	b.n	800c36a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800c2fe:	487c      	ldr	r0, [pc, #496]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c300:	f7ff fa9a 	bl	800b838 <DbgTraceGetFileName>
 800c304:	4601      	mov	r1, r0
 800c306:	f240 23e7 	movw	r3, #743	@ 0x2e7
 800c30a:	4a7a      	ldr	r2, [pc, #488]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c30c:	487a      	ldr	r0, [pc, #488]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c30e:	f004 fbab 	bl	8010a68 <iprintf>
 800c312:	487e      	ldr	r0, [pc, #504]	@ (800c50c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800c314:	f004 fc18 	bl	8010b48 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c318:	4875      	ldr	r0, [pc, #468]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c31a:	f7ff fa8d 	bl	800b838 <DbgTraceGetFileName>
 800c31e:	4601      	mov	r1, r0
 800c320:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 800c324:	4a73      	ldr	r2, [pc, #460]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c326:	4874      	ldr	r0, [pc, #464]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c328:	f004 fb9e 	bl	8010a68 <iprintf>
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	3305      	adds	r3, #5
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3304      	adds	r3, #4
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	461c      	mov	r4, r3
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	3303      	adds	r3, #3
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	461d      	mov	r5, r3
 800c344:	693b      	ldr	r3, [r7, #16]
 800c346:	3302      	adds	r3, #2
 800c348:	781b      	ldrb	r3, [r3, #0]
 800c34a:	461a      	mov	r2, r3
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	3301      	adds	r3, #1
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	4619      	mov	r1, r3
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	9302      	str	r3, [sp, #8]
 800c35a:	9101      	str	r1, [sp, #4]
 800c35c:	9200      	str	r2, [sp, #0]
 800c35e:	462b      	mov	r3, r5
 800c360:	4622      	mov	r2, r4
 800c362:	4601      	mov	r1, r0
 800c364:	486a      	ldr	r0, [pc, #424]	@ (800c510 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800c366:	f004 fb7f 	bl	8010a68 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c36a:	4a6a      	ldr	r2, [pc, #424]	@ (800c514 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800c36c:	2110      	movs	r1, #16
 800c36e:	2018      	movs	r0, #24
 800c370:	f7fe f936 	bl	800a5e0 <aci_hal_write_config_data>
 800c374:	4603      	mov	r3, r0
 800c376:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c378:	7dfb      	ldrb	r3, [r7, #23]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00f      	beq.n	800c39e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c37e:	485c      	ldr	r0, [pc, #368]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c380:	f7ff fa5a 	bl	800b838 <DbgTraceGetFileName>
 800c384:	4601      	mov	r1, r0
 800c386:	f240 330a 	movw	r3, #778	@ 0x30a
 800c38a:	4a5a      	ldr	r2, [pc, #360]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c38c:	485a      	ldr	r0, [pc, #360]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c38e:	f004 fb6b 	bl	8010a68 <iprintf>
 800c392:	7dfb      	ldrb	r3, [r7, #23]
 800c394:	4619      	mov	r1, r3
 800c396:	4860      	ldr	r0, [pc, #384]	@ (800c518 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800c398:	f004 fb66 	bl	8010a68 <iprintf>
 800c39c:	e00c      	b.n	800c3b8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c39e:	4854      	ldr	r0, [pc, #336]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c3a0:	f7ff fa4a 	bl	800b838 <DbgTraceGetFileName>
 800c3a4:	4601      	mov	r1, r0
 800c3a6:	f240 330e 	movw	r3, #782	@ 0x30e
 800c3aa:	4a52      	ldr	r2, [pc, #328]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c3ac:	4852      	ldr	r0, [pc, #328]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c3ae:	f004 fb5b 	bl	8010a68 <iprintf>
 800c3b2:	485a      	ldr	r0, [pc, #360]	@ (800c51c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800c3b4:	f004 fbc8 	bl	8010b48 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c3b8:	4a59      	ldr	r2, [pc, #356]	@ (800c520 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800c3ba:	2110      	movs	r1, #16
 800c3bc:	2008      	movs	r0, #8
 800c3be:	f7fe f90f 	bl	800a5e0 <aci_hal_write_config_data>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00f      	beq.n	800c3ec <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c3cc:	4848      	ldr	r0, [pc, #288]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c3ce:	f7ff fa33 	bl	800b838 <DbgTraceGetFileName>
 800c3d2:	4601      	mov	r1, r0
 800c3d4:	f240 3317 	movw	r3, #791	@ 0x317
 800c3d8:	4a46      	ldr	r2, [pc, #280]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c3da:	4847      	ldr	r0, [pc, #284]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c3dc:	f004 fb44 	bl	8010a68 <iprintf>
 800c3e0:	7dfb      	ldrb	r3, [r7, #23]
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	484f      	ldr	r0, [pc, #316]	@ (800c524 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800c3e6:	f004 fb3f 	bl	8010a68 <iprintf>
 800c3ea:	e00c      	b.n	800c406 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c3ec:	4840      	ldr	r0, [pc, #256]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c3ee:	f7ff fa23 	bl	800b838 <DbgTraceGetFileName>
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	f240 331b 	movw	r3, #795	@ 0x31b
 800c3f8:	4a3e      	ldr	r2, [pc, #248]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c3fa:	483f      	ldr	r0, [pc, #252]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c3fc:	f004 fb34 	bl	8010a68 <iprintf>
 800c400:	4849      	ldr	r0, [pc, #292]	@ (800c528 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800c402:	f004 fba1 	bl	8010b48 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c406:	2118      	movs	r1, #24
 800c408:	2001      	movs	r0, #1
 800c40a:	f7fe f96e 	bl	800a6ea <aci_hal_set_tx_power_level>
 800c40e:	4603      	mov	r3, r0
 800c410:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00f      	beq.n	800c438 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c418:	4835      	ldr	r0, [pc, #212]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c41a:	f7ff fa0d 	bl	800b838 <DbgTraceGetFileName>
 800c41e:	4601      	mov	r1, r0
 800c420:	f44f 7349 	mov.w	r3, #804	@ 0x324
 800c424:	4a33      	ldr	r2, [pc, #204]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c426:	4834      	ldr	r0, [pc, #208]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c428:	f004 fb1e 	bl	8010a68 <iprintf>
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	4619      	mov	r1, r3
 800c430:	483e      	ldr	r0, [pc, #248]	@ (800c52c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800c432:	f004 fb19 	bl	8010a68 <iprintf>
 800c436:	e00c      	b.n	800c452 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c438:	482d      	ldr	r0, [pc, #180]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c43a:	f7ff f9fd 	bl	800b838 <DbgTraceGetFileName>
 800c43e:	4601      	mov	r1, r0
 800c440:	f44f 734a 	mov.w	r3, #808	@ 0x328
 800c444:	4a2b      	ldr	r2, [pc, #172]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c446:	482c      	ldr	r0, [pc, #176]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c448:	f004 fb0e 	bl	8010a68 <iprintf>
 800c44c:	4838      	ldr	r0, [pc, #224]	@ (800c530 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800c44e:	f004 fb7b 	bl	8010b48 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c452:	f7fd fdc4 	bl	8009fde <aci_gatt_init>
 800c456:	4603      	mov	r3, r0
 800c458:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d00f      	beq.n	800c480 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c460:	4823      	ldr	r0, [pc, #140]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c462:	f7ff f9e9 	bl	800b838 <DbgTraceGetFileName>
 800c466:	4601      	mov	r1, r0
 800c468:	f240 3331 	movw	r3, #817	@ 0x331
 800c46c:	4a21      	ldr	r2, [pc, #132]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c46e:	4822      	ldr	r0, [pc, #136]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c470:	f004 fafa 	bl	8010a68 <iprintf>
 800c474:	7dfb      	ldrb	r3, [r7, #23]
 800c476:	4619      	mov	r1, r3
 800c478:	482e      	ldr	r0, [pc, #184]	@ (800c534 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800c47a:	f004 faf5 	bl	8010a68 <iprintf>
 800c47e:	e00c      	b.n	800c49a <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c480:	481b      	ldr	r0, [pc, #108]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c482:	f7ff f9d9 	bl	800b838 <DbgTraceGetFileName>
 800c486:	4601      	mov	r1, r0
 800c488:	f240 3335 	movw	r3, #821	@ 0x335
 800c48c:	4a19      	ldr	r2, [pc, #100]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c48e:	481a      	ldr	r0, [pc, #104]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c490:	f004 faea 	bl	8010a68 <iprintf>
 800c494:	4828      	ldr	r0, [pc, #160]	@ (800c538 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800c496:	f004 fb57 	bl	8010b48 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
 800c4a0:	f043 0301 	orr.w	r3, r3, #1
 800c4a4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d069      	beq.n	800c580 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c4ac:	4b23      	ldr	r3, [pc, #140]	@ (800c53c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c4ae:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c4b0:	1dba      	adds	r2, r7, #6
 800c4b2:	7bf8      	ldrb	r0, [r7, #15]
 800c4b4:	1cbb      	adds	r3, r7, #2
 800c4b6:	9301      	str	r3, [sp, #4]
 800c4b8:	1d3b      	adds	r3, r7, #4
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	4613      	mov	r3, r2
 800c4be:	2205      	movs	r2, #5
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	f7fd fbe2 	bl	8009c8a <aci_gap_init>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c4ca:	7dfb      	ldrb	r3, [r7, #23]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d039      	beq.n	800c544 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c4d0:	4807      	ldr	r0, [pc, #28]	@ (800c4f0 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c4d2:	f7ff f9b1 	bl	800b838 <DbgTraceGetFileName>
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	f240 3355 	movw	r3, #853	@ 0x355
 800c4dc:	4a05      	ldr	r2, [pc, #20]	@ (800c4f4 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c4de:	4806      	ldr	r0, [pc, #24]	@ (800c4f8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c4e0:	f004 fac2 	bl	8010a68 <iprintf>
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	4815      	ldr	r0, [pc, #84]	@ (800c540 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c4ea:	f004 fabd 	bl	8010a68 <iprintf>
 800c4ee:	e036      	b.n	800c55e <Ble_Hci_Gap_Gatt_Init+0x30a>
 800c4f0:	08013c08 	.word	0x08013c08
 800c4f4:	080166b0 	.word	0x080166b0
 800c4f8:	08013c24 	.word	0x08013c24
 800c4fc:	08014174 	.word	0x08014174
 800c500:	080141a0 	.word	0x080141a0
 800c504:	080141d0 	.word	0x080141d0
 800c508:	080141f0 	.word	0x080141f0
 800c50c:	0801424c 	.word	0x0801424c
 800c510:	08014298 	.word	0x08014298
 800c514:	08016668 	.word	0x08016668
 800c518:	080142d4 	.word	0x080142d4
 800c51c:	0801432c 	.word	0x0801432c
 800c520:	08016678 	.word	0x08016678
 800c524:	08014374 	.word	0x08014374
 800c528:	080143cc 	.word	0x080143cc
 800c52c:	08014414 	.word	0x08014414
 800c530:	08014454 	.word	0x08014454
 800c534:	08014484 	.word	0x08014484
 800c538:	080144b8 	.word	0x080144b8
 800c53c:	080144dc 	.word	0x080144dc
 800c540:	080144e4 	.word	0x080144e4
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c544:	487e      	ldr	r0, [pc, #504]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c546:	f7ff f977 	bl	800b838 <DbgTraceGetFileName>
 800c54a:	4601      	mov	r1, r0
 800c54c:	f240 3359 	movw	r3, #857	@ 0x359
 800c550:	4a7c      	ldr	r2, [pc, #496]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c552:	487d      	ldr	r0, [pc, #500]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c554:	f004 fa88 	bl	8010a68 <iprintf>
 800c558:	487c      	ldr	r0, [pc, #496]	@ (800c74c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800c55a:	f004 faf5 	bl	8010b48 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c55e:	88fc      	ldrh	r4, [r7, #6]
 800c560:	88bd      	ldrh	r5, [r7, #4]
 800c562:	68b8      	ldr	r0, [r7, #8]
 800c564:	f7f3 fe5c 	bl	8000220 <strlen>
 800c568:	4603      	mov	r3, r0
 800c56a:	b2da      	uxtb	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	9300      	str	r3, [sp, #0]
 800c570:	4613      	mov	r3, r2
 800c572:	2200      	movs	r2, #0
 800c574:	4629      	mov	r1, r5
 800c576:	4620      	mov	r0, r4
 800c578:	f7fd ff34 	bl	800a3e4 <aci_gatt_update_char_value>
 800c57c:	4603      	mov	r3, r0
 800c57e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c580:	88f8      	ldrh	r0, [r7, #6]
 800c582:	8879      	ldrh	r1, [r7, #2]
 800c584:	463b      	mov	r3, r7
 800c586:	9300      	str	r3, [sp, #0]
 800c588:	2302      	movs	r3, #2
 800c58a:	2200      	movs	r2, #0
 800c58c:	f7fd ff2a 	bl	800a3e4 <aci_gatt_update_char_value>
 800c590:	4603      	mov	r3, r0
 800c592:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c594:	2202      	movs	r2, #2
 800c596:	2102      	movs	r1, #2
 800c598:	2000      	movs	r0, #0
 800c59a:	f7fe f985 	bl	800a8a8 <hci_le_set_default_phy>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d00f      	beq.n	800c5c8 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800c5a8:	4865      	ldr	r0, [pc, #404]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c5aa:	f7ff f945 	bl	800b838 <DbgTraceGetFileName>
 800c5ae:	4601      	mov	r1, r0
 800c5b0:	f240 337b 	movw	r3, #891	@ 0x37b
 800c5b4:	4a63      	ldr	r2, [pc, #396]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c5b6:	4864      	ldr	r0, [pc, #400]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c5b8:	f004 fa56 	bl	8010a68 <iprintf>
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4863      	ldr	r0, [pc, #396]	@ (800c750 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800c5c2:	f004 fa51 	bl	8010a68 <iprintf>
 800c5c6:	e00c      	b.n	800c5e2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800c5c8:	485d      	ldr	r0, [pc, #372]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c5ca:	f7ff f935 	bl	800b838 <DbgTraceGetFileName>
 800c5ce:	4601      	mov	r1, r0
 800c5d0:	f240 337f 	movw	r3, #895	@ 0x37f
 800c5d4:	4a5b      	ldr	r2, [pc, #364]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c5d6:	485c      	ldr	r0, [pc, #368]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c5d8:	f004 fa46 	bl	8010a68 <iprintf>
 800c5dc:	485d      	ldr	r0, [pc, #372]	@ (800c754 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800c5de:	f004 fab3 	bl	8010b48 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c5e2:	4b5d      	ldr	r3, [pc, #372]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c5e8:	4b5b      	ldr	r3, [pc, #364]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f7fd f9cd 	bl	800998c <aci_gap_set_io_capability>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c5f6:	7dfb      	ldrb	r3, [r7, #23]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00f      	beq.n	800c61c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c5fc:	4850      	ldr	r0, [pc, #320]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c5fe:	f7ff f91b 	bl	800b838 <DbgTraceGetFileName>
 800c602:	4601      	mov	r1, r0
 800c604:	f240 3389 	movw	r3, #905	@ 0x389
 800c608:	4a4e      	ldr	r2, [pc, #312]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c60a:	484f      	ldr	r0, [pc, #316]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c60c:	f004 fa2c 	bl	8010a68 <iprintf>
 800c610:	7dfb      	ldrb	r3, [r7, #23]
 800c612:	4619      	mov	r1, r3
 800c614:	4851      	ldr	r0, [pc, #324]	@ (800c75c <Ble_Hci_Gap_Gatt_Init+0x508>)
 800c616:	f004 fa27 	bl	8010a68 <iprintf>
 800c61a:	e00c      	b.n	800c636 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c61c:	4848      	ldr	r0, [pc, #288]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c61e:	f7ff f90b 	bl	800b838 <DbgTraceGetFileName>
 800c622:	4601      	mov	r1, r0
 800c624:	f240 338d 	movw	r3, #909	@ 0x38d
 800c628:	4a46      	ldr	r2, [pc, #280]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c62a:	4847      	ldr	r0, [pc, #284]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c62c:	f004 fa1c 	bl	8010a68 <iprintf>
 800c630:	484b      	ldr	r0, [pc, #300]	@ (800c760 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800c632:	f004 fa89 	bl	8010b48 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c636:	4b48      	ldr	r3, [pc, #288]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c638:	2201      	movs	r2, #1
 800c63a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c63c:	4b46      	ldr	r3, [pc, #280]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c63e:	2208      	movs	r2, #8
 800c640:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c642:	4b45      	ldr	r3, [pc, #276]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c644:	2210      	movs	r2, #16
 800c646:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c648:	4b43      	ldr	r3, [pc, #268]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c64a:	2200      	movs	r2, #0
 800c64c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c64e:	4b42      	ldr	r3, [pc, #264]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c650:	4a44      	ldr	r2, [pc, #272]	@ (800c764 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800c652:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c654:	4b40      	ldr	r3, [pc, #256]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c656:	2200      	movs	r2, #0
 800c658:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c65a:	4b3f      	ldr	r3, [pc, #252]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c65c:	789c      	ldrb	r4, [r3, #2]
 800c65e:	4b3e      	ldr	r3, [pc, #248]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c660:	785d      	ldrb	r5, [r3, #1]
 800c662:	4b3d      	ldr	r3, [pc, #244]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c664:	791b      	ldrb	r3, [r3, #4]
 800c666:	4a3c      	ldr	r2, [pc, #240]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c668:	7952      	ldrb	r2, [r2, #5]
 800c66a:	493b      	ldr	r1, [pc, #236]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c66c:	78c9      	ldrb	r1, [r1, #3]
 800c66e:	483a      	ldr	r0, [pc, #232]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c670:	6880      	ldr	r0, [r0, #8]
 800c672:	2600      	movs	r6, #0
 800c674:	9604      	str	r6, [sp, #16]
 800c676:	9003      	str	r0, [sp, #12]
 800c678:	9102      	str	r1, [sp, #8]
 800c67a:	9201      	str	r2, [sp, #4]
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	2300      	movs	r3, #0
 800c680:	2201      	movs	r2, #1
 800c682:	4629      	mov	r1, r5
 800c684:	4620      	mov	r0, r4
 800c686:	f7fd f9d5 	bl	8009a34 <aci_gap_set_authentication_requirement>
 800c68a:	4603      	mov	r3, r0
 800c68c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c68e:	7dfb      	ldrb	r3, [r7, #23]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00f      	beq.n	800c6b4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c694:	482a      	ldr	r0, [pc, #168]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c696:	f7ff f8cf 	bl	800b838 <DbgTraceGetFileName>
 800c69a:	4601      	mov	r1, r0
 800c69c:	f44f 736a 	mov.w	r3, #936	@ 0x3a8
 800c6a0:	4a28      	ldr	r2, [pc, #160]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c6a2:	4829      	ldr	r0, [pc, #164]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c6a4:	f004 f9e0 	bl	8010a68 <iprintf>
 800c6a8:	7dfb      	ldrb	r3, [r7, #23]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	482e      	ldr	r0, [pc, #184]	@ (800c768 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800c6ae:	f004 f9db 	bl	8010a68 <iprintf>
 800c6b2:	e00c      	b.n	800c6ce <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c6b4:	4822      	ldr	r0, [pc, #136]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c6b6:	f7ff f8bf 	bl	800b838 <DbgTraceGetFileName>
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	f44f 736b 	mov.w	r3, #940	@ 0x3ac
 800c6c0:	4a20      	ldr	r2, [pc, #128]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c6c2:	4821      	ldr	r0, [pc, #132]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c6c4:	f004 f9d0 	bl	8010a68 <iprintf>
 800c6c8:	4828      	ldr	r0, [pc, #160]	@ (800c76c <Ble_Hci_Gap_Gatt_Init+0x518>)
 800c6ca:	f004 fa3d 	bl	8010b48 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c6ce:	4b22      	ldr	r3, [pc, #136]	@ (800c758 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c6d0:	789b      	ldrb	r3, [r3, #2]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d023      	beq.n	800c71e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800c6d6:	f7fd fbf7 	bl	8009ec8 <aci_gap_configure_filter_accept_list>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c6de:	7dfb      	ldrb	r3, [r7, #23]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00f      	beq.n	800c704 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c6e4:	4816      	ldr	r0, [pc, #88]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c6e6:	f7ff f8a7 	bl	800b838 <DbgTraceGetFileName>
 800c6ea:	4601      	mov	r1, r0
 800c6ec:	f240 33b7 	movw	r3, #951	@ 0x3b7
 800c6f0:	4a14      	ldr	r2, [pc, #80]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c6f2:	4815      	ldr	r0, [pc, #84]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c6f4:	f004 f9b8 	bl	8010a68 <iprintf>
 800c6f8:	7dfb      	ldrb	r3, [r7, #23]
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	481c      	ldr	r0, [pc, #112]	@ (800c770 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800c6fe:	f004 f9b3 	bl	8010a68 <iprintf>
 800c702:	e00c      	b.n	800c71e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c704:	480e      	ldr	r0, [pc, #56]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c706:	f7ff f897 	bl	800b838 <DbgTraceGetFileName>
 800c70a:	4601      	mov	r1, r0
 800c70c:	f240 33bb 	movw	r3, #955	@ 0x3bb
 800c710:	4a0c      	ldr	r2, [pc, #48]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c712:	480d      	ldr	r0, [pc, #52]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c714:	f004 f9a8 	bl	8010a68 <iprintf>
 800c718:	4816      	ldr	r0, [pc, #88]	@ (800c774 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800c71a:	f004 fa15 	bl	8010b48 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c71e:	4808      	ldr	r0, [pc, #32]	@ (800c740 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c720:	f7ff f88a 	bl	800b838 <DbgTraceGetFileName>
 800c724:	4601      	mov	r1, r0
 800c726:	f240 33be 	movw	r3, #958	@ 0x3be
 800c72a:	4a06      	ldr	r2, [pc, #24]	@ (800c744 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c72c:	4806      	ldr	r0, [pc, #24]	@ (800c748 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c72e:	f004 f99b 	bl	8010a68 <iprintf>
 800c732:	4811      	ldr	r0, [pc, #68]	@ (800c778 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800c734:	f004 f998 	bl	8010a68 <iprintf>
}
 800c738:	bf00      	nop
 800c73a:	371c      	adds	r7, #28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c740:	08013c08 	.word	0x08013c08
 800c744:	080166b0 	.word	0x080166b0
 800c748:	08013c24 	.word	0x08013c24
 800c74c:	08014514 	.word	0x08014514
 800c750:	08014534 	.word	0x08014534
 800c754:	08014570 	.word	0x08014570
 800c758:	20001ee0 	.word	0x20001ee0
 800c75c:	0801459c 	.word	0x0801459c
 800c760:	080145dc 	.word	0x080145dc
 800c764:	0001b207 	.word	0x0001b207
 800c768:	0801460c 	.word	0x0801460c
 800c76c:	08014658 	.word	0x08014658
 800c770:	08014694 	.word	0x08014694
 800c774:	080146d4 	.word	0x080146d4
 800c778:	08014704 	.word	0x08014704

0800c77c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c77c:	b580      	push	{r7, lr}
 800c77e:	b08c      	sub	sp, #48	@ 0x30
 800c780:	af08      	add	r7, sp, #32
 800c782:	4603      	mov	r3, r0
 800c784:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c786:	2392      	movs	r3, #146	@ 0x92
 800c788:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c78a:	4a32      	ldr	r2, [pc, #200]	@ (800c854 <Adv_Request+0xd8>)
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c792:	2300      	movs	r3, #0
 800c794:	9306      	str	r3, [sp, #24]
 800c796:	2300      	movs	r3, #0
 800c798:	9305      	str	r3, [sp, #20]
 800c79a:	2300      	movs	r3, #0
 800c79c:	9304      	str	r3, [sp, #16]
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9303      	str	r3, [sp, #12]
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	9302      	str	r3, [sp, #8]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	9301      	str	r3, [sp, #4]
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	22a0      	movs	r2, #160	@ 0xa0
 800c7b2:	2180      	movs	r1, #128	@ 0x80
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	f7fc ffef 	bl	8009798 <aci_gap_set_discoverable>
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c7be:	7bfb      	ldrb	r3, [r7, #15]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00f      	beq.n	800c7e4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c7c4:	4824      	ldr	r0, [pc, #144]	@ (800c858 <Adv_Request+0xdc>)
 800c7c6:	f7ff f837 	bl	800b838 <DbgTraceGetFileName>
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	f44f 7375 	mov.w	r3, #980	@ 0x3d4
 800c7d0:	4a22      	ldr	r2, [pc, #136]	@ (800c85c <Adv_Request+0xe0>)
 800c7d2:	4823      	ldr	r0, [pc, #140]	@ (800c860 <Adv_Request+0xe4>)
 800c7d4:	f004 f948 	bl	8010a68 <iprintf>
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4821      	ldr	r0, [pc, #132]	@ (800c864 <Adv_Request+0xe8>)
 800c7de:	f004 f943 	bl	8010a68 <iprintf>
 800c7e2:	e00c      	b.n	800c7fe <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c7e4:	481c      	ldr	r0, [pc, #112]	@ (800c858 <Adv_Request+0xdc>)
 800c7e6:	f7ff f827 	bl	800b838 <DbgTraceGetFileName>
 800c7ea:	4601      	mov	r1, r0
 800c7ec:	f44f 7376 	mov.w	r3, #984	@ 0x3d8
 800c7f0:	4a1a      	ldr	r2, [pc, #104]	@ (800c85c <Adv_Request+0xe0>)
 800c7f2:	481b      	ldr	r0, [pc, #108]	@ (800c860 <Adv_Request+0xe4>)
 800c7f4:	f004 f938 	bl	8010a68 <iprintf>
 800c7f8:	481b      	ldr	r0, [pc, #108]	@ (800c868 <Adv_Request+0xec>)
 800c7fa:	f004 f9a5 	bl	8010b48 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c7fe:	491b      	ldr	r1, [pc, #108]	@ (800c86c <Adv_Request+0xf0>)
 800c800:	2015      	movs	r0, #21
 800c802:	f7fd faef 	bl	8009de4 <aci_gap_update_adv_data>
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00f      	beq.n	800c830 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c810:	4811      	ldr	r0, [pc, #68]	@ (800c858 <Adv_Request+0xdc>)
 800c812:	f7ff f811 	bl	800b838 <DbgTraceGetFileName>
 800c816:	4601      	mov	r1, r0
 800c818:	f240 33e3 	movw	r3, #995	@ 0x3e3
 800c81c:	4a0f      	ldr	r2, [pc, #60]	@ (800c85c <Adv_Request+0xe0>)
 800c81e:	4810      	ldr	r0, [pc, #64]	@ (800c860 <Adv_Request+0xe4>)
 800c820:	f004 f922 	bl	8010a68 <iprintf>
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4619      	mov	r1, r3
 800c828:	4811      	ldr	r0, [pc, #68]	@ (800c870 <Adv_Request+0xf4>)
 800c82a:	f004 f91d 	bl	8010a68 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c82e:	e00d      	b.n	800c84c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c830:	4809      	ldr	r0, [pc, #36]	@ (800c858 <Adv_Request+0xdc>)
 800c832:	f7ff f801 	bl	800b838 <DbgTraceGetFileName>
 800c836:	4601      	mov	r1, r0
 800c838:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800c83c:	4a07      	ldr	r2, [pc, #28]	@ (800c85c <Adv_Request+0xe0>)
 800c83e:	4808      	ldr	r0, [pc, #32]	@ (800c860 <Adv_Request+0xe4>)
 800c840:	f004 f912 	bl	8010a68 <iprintf>
 800c844:	480b      	ldr	r0, [pc, #44]	@ (800c874 <Adv_Request+0xf8>)
 800c846:	f004 f90f 	bl	8010a68 <iprintf>
  return;
 800c84a:	bf00      	nop
}
 800c84c:	3710      	adds	r7, #16
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	20001ee0 	.word	0x20001ee0
 800c858:	08013c08 	.word	0x08013c08
 800c85c:	080166c8 	.word	0x080166c8
 800c860:	08013c24 	.word	0x08013c24
 800c864:	08014730 	.word	0x08014730
 800c868:	08014768 	.word	0x08014768
 800c86c:	2000003c 	.word	0x2000003c
 800c870:	08014790 	.word	0x08014790
 800c874:	080147c4 	.word	0x080147c4

0800c878 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b086      	sub	sp, #24
 800c87c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c87e:	f7ff f945 	bl	800bb0c <LL_FLASH_GetUDN>
 800c882:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88a:	d023      	beq.n	800c8d4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c88c:	f7ff f956 	bl	800bb3c <LL_FLASH_GetSTCompanyID>
 800c890:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c892:	f7ff f947 	bl	800bb24 <LL_FLASH_GetDeviceID>
 800c896:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	4b16      	ldr	r3, [pc, #88]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c89e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	0a1b      	lsrs	r3, r3, #8
 800c8a4:	b2da      	uxtb	r2, r3
 800c8a6:	4b14      	ldr	r3, [pc, #80]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8a8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	b2da      	uxtb	r2, r3
 800c8ae:	4b12      	ldr	r3, [pc, #72]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8b0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	4b10      	ldr	r3, [pc, #64]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8b8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	0a1b      	lsrs	r3, r3, #8
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8c2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	0c1b      	lsrs	r3, r3, #16
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8cc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f8 <BleGetBdAddress+0x80>)
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e00b      	b.n	800c8ec <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	f7fe ffd7 	bl	800b888 <OTP_Read>
 800c8da:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	617b      	str	r3, [r7, #20]
 800c8e6:	e001      	b.n	800c8ec <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c8e8:	4b04      	ldr	r3, [pc, #16]	@ (800c8fc <BleGetBdAddress+0x84>)
 800c8ea:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c8ec:	697b      	ldr	r3, [r7, #20]
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001ed8 	.word	0x20001ed8
 800c8fc:	08016660 	.word	0x08016660

0800c900 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c906:	4b1f      	ldr	r3, [pc, #124]	@ (800c984 <Adv_Cancel+0x84>)
 800c908:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800c90c:	2b05      	cmp	r3, #5
 800c90e:	d035      	beq.n	800c97c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c910:	2392      	movs	r3, #146	@ 0x92
 800c912:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c914:	f7fc ff1c 	bl	8009750 <aci_gap_set_non_discoverable>
 800c918:	4603      	mov	r3, r0
 800c91a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c91c:	4b19      	ldr	r3, [pc, #100]	@ (800c984 <Adv_Cancel+0x84>)
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c924:	79fb      	ldrb	r3, [r7, #7]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00d      	beq.n	800c946 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c92a:	4817      	ldr	r0, [pc, #92]	@ (800c988 <Adv_Cancel+0x88>)
 800c92c:	f7fe ff84 	bl	800b838 <DbgTraceGetFileName>
 800c930:	4601      	mov	r1, r0
 800c932:	f240 4335 	movw	r3, #1077	@ 0x435
 800c936:	4a15      	ldr	r2, [pc, #84]	@ (800c98c <Adv_Cancel+0x8c>)
 800c938:	4815      	ldr	r0, [pc, #84]	@ (800c990 <Adv_Cancel+0x90>)
 800c93a:	f004 f895 	bl	8010a68 <iprintf>
 800c93e:	4815      	ldr	r0, [pc, #84]	@ (800c994 <Adv_Cancel+0x94>)
 800c940:	f004 f892 	bl	8010a68 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c944:	e01a      	b.n	800c97c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800c946:	4810      	ldr	r0, [pc, #64]	@ (800c988 <Adv_Cancel+0x88>)
 800c948:	f7fe ff76 	bl	800b838 <DbgTraceGetFileName>
 800c94c:	4601      	mov	r1, r0
 800c94e:	f240 4339 	movw	r3, #1081	@ 0x439
 800c952:	4a0e      	ldr	r2, [pc, #56]	@ (800c98c <Adv_Cancel+0x8c>)
 800c954:	480e      	ldr	r0, [pc, #56]	@ (800c990 <Adv_Cancel+0x90>)
 800c956:	f004 f887 	bl	8010a68 <iprintf>
 800c95a:	480f      	ldr	r0, [pc, #60]	@ (800c998 <Adv_Cancel+0x98>)
 800c95c:	f004 f884 	bl	8010a68 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c960:	4809      	ldr	r0, [pc, #36]	@ (800c988 <Adv_Cancel+0x88>)
 800c962:	f7fe ff69 	bl	800b838 <DbgTraceGetFileName>
 800c966:	4601      	mov	r1, r0
 800c968:	f240 433a 	movw	r3, #1082	@ 0x43a
 800c96c:	4a07      	ldr	r2, [pc, #28]	@ (800c98c <Adv_Cancel+0x8c>)
 800c96e:	4808      	ldr	r0, [pc, #32]	@ (800c990 <Adv_Cancel+0x90>)
 800c970:	f004 f87a 	bl	8010a68 <iprintf>
 800c974:	4809      	ldr	r0, [pc, #36]	@ (800c99c <Adv_Cancel+0x9c>)
 800c976:	f004 f877 	bl	8010a68 <iprintf>
  return;
 800c97a:	bf00      	nop
 800c97c:	bf00      	nop
}
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}
 800c984:	20001ee0 	.word	0x20001ee0
 800c988:	08013c08 	.word	0x08013c08
 800c98c:	080166d4 	.word	0x080166d4
 800c990:	08013c24 	.word	0x08013c24
 800c994:	080147ec 	.word	0x080147ec
 800c998:	08014810 	.word	0x08014810
 800c99c:	08014818 	.word	0x08014818

0800c9a0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c9a8:	2100      	movs	r1, #0
 800c9aa:	2002      	movs	r0, #2
 800c9ac:	f002 f96e 	bl	800ec8c <UTIL_SEQ_SetTask>

  return;
 800c9b0:	bf00      	nop
}
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c9c0:	2001      	movs	r0, #1
 800c9c2:	f002 f9cf 	bl	800ed64 <UTIL_SEQ_SetEvt>

  return;
 800c9c6:	bf00      	nop
}
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	f002 f9e4 	bl	800eda4 <UTIL_SEQ_WaitEvt>

  return;
 800c9dc:	bf00      	nop
}
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	3308      	adds	r3, #8
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7fe f8bc 	bl	800ab74 <SVCCTL_UserEvtRx>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800ca00:	7afb      	ldrb	r3, [r7, #11]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d003      	beq.n	800ca0e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2201      	movs	r2, #1
 800ca0a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800ca0c:	e003      	b.n	800ca16 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
  return;
 800ca14:	bf00      	nop
}
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	4603      	mov	r3, r0
 800ca24:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800ca26:	79fb      	ldrb	r3, [r7, #7]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d002      	beq.n	800ca32 <BLE_StatusNot+0x16>
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d007      	beq.n	800ca40 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800ca30:	e00d      	b.n	800ca4e <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ca32:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800ca36:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f002 f953 	bl	800ece4 <UTIL_SEQ_PauseTask>
      break;
 800ca3e:	e006      	b.n	800ca4e <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800ca40:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800ca44:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800ca46:	68f8      	ldr	r0, [r7, #12]
 800ca48:	f002 f96c 	bl	800ed24 <UTIL_SEQ_ResumeTask>
      break;
 800ca4c:	bf00      	nop
  }

  return;
 800ca4e:	bf00      	nop
}
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
	...

0800ca58 <Custom_STM_App_Notification>:
static void Custom_acq_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */
	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6859      	ldr	r1, [r3, #4]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	7a1b      	ldrb	r3, [r3, #8]
 800ca68:	461a      	mov	r2, r3
 800ca6a:	4850      	ldr	r0, [pc, #320]	@ (800cbac <Custom_STM_App_Notification+0x154>)
 800ca6c:	f004 f9f1 	bl	8010e52 <memcpy>
  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	2b1c      	cmp	r3, #28
 800ca76:	f200 8093 	bhi.w	800cba0 <Custom_STM_App_Notification+0x148>
 800ca7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca80 <Custom_STM_App_Notification+0x28>)
 800ca7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca80:	0800cba1 	.word	0x0800cba1
 800ca84:	0800caf5 	.word	0x0800caf5
 800ca88:	0800cba1 	.word	0x0800cba1
 800ca8c:	0800cafb 	.word	0x0800cafb
 800ca90:	0800cba1 	.word	0x0800cba1
 800ca94:	0800cb01 	.word	0x0800cb01
 800ca98:	0800cb0d 	.word	0x0800cb0d
 800ca9c:	0800cba1 	.word	0x0800cba1
 800caa0:	0800cb15 	.word	0x0800cb15
 800caa4:	0800cb21 	.word	0x0800cb21
 800caa8:	0800cba1 	.word	0x0800cba1
 800caac:	0800cb29 	.word	0x0800cb29
 800cab0:	0800cb35 	.word	0x0800cb35
 800cab4:	0800cba1 	.word	0x0800cba1
 800cab8:	0800cb3d 	.word	0x0800cb3d
 800cabc:	0800cb49 	.word	0x0800cb49
 800cac0:	0800cba1 	.word	0x0800cba1
 800cac4:	0800cb51 	.word	0x0800cb51
 800cac8:	0800cb5d 	.word	0x0800cb5d
 800cacc:	0800cba1 	.word	0x0800cba1
 800cad0:	0800cb65 	.word	0x0800cb65
 800cad4:	0800cb71 	.word	0x0800cb71
 800cad8:	0800cba1 	.word	0x0800cba1
 800cadc:	0800cb79 	.word	0x0800cb79
 800cae0:	0800cb85 	.word	0x0800cb85
 800cae4:	0800cba1 	.word	0x0800cba1
 800cae8:	0800cb8d 	.word	0x0800cb8d
 800caec:	0800cb99 	.word	0x0800cb99
 800caf0:	0800cba1 	.word	0x0800cba1
      /* USER CODE END CUSTOM_STM_DELAI_READ_EVT */
      break;

    case CUSTOM_STM_DELAI_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_DELAI_WRITE_NO_RESP_EVT */
    	Custom_delai_Update_Char();
 800caf4:	f000 fb16 	bl	800d124 <Custom_delai_Update_Char>
      /* USER CODE END CUSTOM_STM_DELAI_WRITE_NO_RESP_EVT */
      break;
 800caf8:	e053      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_ACQ_READ_EVT */
      break;

    case CUSTOM_STM_ACQ_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACQ_WRITE_NO_RESP_EVT */
    	Custom_acq_Update_Char();
 800cafa:	f000 fb1d 	bl	800d138 <Custom_acq_Update_Char>
      /* USER CODE END CUSTOM_STM_ACQ_WRITE_NO_RESP_EVT */
      break;
 800cafe:	e050      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_IAC_READ_EVT */
      break;

    case CUSTOM_STM_IAC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IAC_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Iac_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb00:	4b2b      	ldr	r3, [pc, #172]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
    	    	Custom_Iac_Send_Notification();
 800cb06:	f000 f8cd 	bl	800cca4 <Custom_Iac_Send_Notification>
      /* USER CODE END CUSTOM_STM_IAC_NOTIFY_ENABLED_EVT */
      break;
 800cb0a:	e04a      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_IAC_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_IAC_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Iac_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb0c:	4b28      	ldr	r3, [pc, #160]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_IAC_NOTIFY_DISABLED_EVT */
      break;
 800cb12:	e046      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_ACCX_READ_EVT */
      break;

    case CUSTOM_STM_ACCX_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCX_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Accx_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb14:	4b26      	ldr	r3, [pc, #152]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb16:	2201      	movs	r2, #1
 800cb18:	705a      	strb	r2, [r3, #1]
    	    	Custom_Accx_Send_Notification();
 800cb1a:	f000 f90d 	bl	800cd38 <Custom_Accx_Send_Notification>
      /* USER CODE END CUSTOM_STM_ACCX_NOTIFY_ENABLED_EVT */
      break;
 800cb1e:	e040      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_ACCX_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCX_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Accx_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb20:	4b23      	ldr	r3, [pc, #140]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_ACCX_NOTIFY_DISABLED_EVT */
      break;
 800cb26:	e03c      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_ACCY_READ_EVT */
      break;

    case CUSTOM_STM_ACCY_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCY_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Accy_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb28:	4b21      	ldr	r3, [pc, #132]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	709a      	strb	r2, [r3, #2]
    	    	Custom_Accy_Send_Notification();
 800cb2e:	f000 f93d 	bl	800cdac <Custom_Accy_Send_Notification>
      /* USER CODE END CUSTOM_STM_ACCY_NOTIFY_ENABLED_EVT */
      break;
 800cb32:	e036      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_ACCY_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCY_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Accy_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb34:	4b1e      	ldr	r3, [pc, #120]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	709a      	strb	r2, [r3, #2]
      /* USER CODE END CUSTOM_STM_ACCY_NOTIFY_DISABLED_EVT */
      break;
 800cb3a:	e032      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_ACCZ_READ_EVT */
      break;

    case CUSTOM_STM_ACCZ_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCZ_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Accz_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb3c:	4b1c      	ldr	r3, [pc, #112]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb3e:	2201      	movs	r2, #1
 800cb40:	70da      	strb	r2, [r3, #3]
    	    	Custom_Accz_Send_Notification();
 800cb42:	f000 f97d 	bl	800ce40 <Custom_Accz_Send_Notification>
      /* USER CODE END CUSTOM_STM_ACCZ_NOTIFY_ENABLED_EVT */
      break;
 800cb46:	e02c      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_ACCZ_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCZ_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Accz_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb48:	4b19      	ldr	r3, [pc, #100]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	70da      	strb	r2, [r3, #3]
      /* USER CODE END CUSTOM_STM_ACCZ_NOTIFY_DISABLED_EVT */
      break;
 800cb4e:	e028      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_GYRX_READ_EVT */
      break;

    case CUSTOM_STM_GYRX_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRX_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Gyrx_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb50:	4b17      	ldr	r3, [pc, #92]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	711a      	strb	r2, [r3, #4]
    	    	Custom_Gyrx_Send_Notification();
 800cb56:	f000 f9bd 	bl	800ced4 <Custom_Gyrx_Send_Notification>
      /* USER CODE END CUSTOM_STM_GYRX_NOTIFY_ENABLED_EVT */
      break;
 800cb5a:	e022      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_GYRX_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRX_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Gyrx_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb5c:	4b14      	ldr	r3, [pc, #80]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	711a      	strb	r2, [r3, #4]
      /* USER CODE END CUSTOM_STM_GYRX_NOTIFY_DISABLED_EVT */
      break;
 800cb62:	e01e      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_GYRY_READ_EVT */
      break;

    case CUSTOM_STM_GYRY_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRY_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Gyry_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb64:	4b12      	ldr	r3, [pc, #72]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb66:	2201      	movs	r2, #1
 800cb68:	715a      	strb	r2, [r3, #5]
    	    	Custom_Gyry_Send_Notification();
 800cb6a:	f000 f9fd 	bl	800cf68 <Custom_Gyry_Send_Notification>
      /* USER CODE END CUSTOM_STM_GYRY_NOTIFY_ENABLED_EVT */
      break;
 800cb6e:	e018      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_GYRY_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRY_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Gyry_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb70:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	715a      	strb	r2, [r3, #5]
      /* USER CODE END CUSTOM_STM_GYRY_NOTIFY_DISABLED_EVT */
      break;
 800cb76:	e014      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_GYRZ_READ_EVT */
      break;

    case CUSTOM_STM_GYRZ_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRZ_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Gyrz_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb78:	4b0d      	ldr	r3, [pc, #52]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	719a      	strb	r2, [r3, #6]
    	    	Custom_Gyrz_Send_Notification();
 800cb7e:	f000 fa3d 	bl	800cffc <Custom_Gyrz_Send_Notification>
      /* USER CODE END CUSTOM_STM_GYRZ_NOTIFY_ENABLED_EVT */
      break;
 800cb82:	e00e      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_GYRZ_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GYRZ_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Gyrz_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb84:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb86:	2200      	movs	r2, #0
 800cb88:	719a      	strb	r2, [r3, #6]
      /* USER CODE END CUSTOM_STM_GYRZ_NOTIFY_DISABLED_EVT */
      break;
 800cb8a:	e00a      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>
      /* USER CODE END CUSTOM_STM_TEMPC_READ_EVT */
      break;

    case CUSTOM_STM_TEMPC_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPC_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Tempc_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 800cb8c:	4b08      	ldr	r3, [pc, #32]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb8e:	2201      	movs	r2, #1
 800cb90:	71da      	strb	r2, [r3, #7]
    	    	Custom_Tempc_Send_Notification();
 800cb92:	f000 fa7d 	bl	800d090 <Custom_Tempc_Send_Notification>
      /* USER CODE END CUSTOM_STM_TEMPC_NOTIFY_ENABLED_EVT */
      break;
 800cb96:	e004      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    case CUSTOM_STM_TEMPC_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_TEMPC_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Tempc_Notification_Status = 0;        /* My_Switch_Char notification status has been enabled */
 800cb98:	4b05      	ldr	r3, [pc, #20]	@ (800cbb0 <Custom_STM_App_Notification+0x158>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	71da      	strb	r2, [r3, #7]
      /* USER CODE END CUSTOM_STM_TEMPC_NOTIFY_DISABLED_EVT */
      break;
 800cb9e:	e000      	b.n	800cba2 <Custom_STM_App_Notification+0x14a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800cba0:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800cba2:	bf00      	nop
}
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20001fb4 	.word	0x20001fb4
 800cbb0:	20001f88 	.word	0x20001f88

0800cbb4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b083      	sub	sp, #12
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <Custom_APP_Notification+0x16>
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d002      	beq.n	800cbce <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800cbc8:	e002      	b.n	800cbd0 <Custom_APP_Notification+0x1c>
      break;
 800cbca:	bf00      	nop
 800cbcc:	e000      	b.n	800cbd0 <Custom_APP_Notification+0x1c>
      break;
 800cbce:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800cbd0:	bf00      	nop
}
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.ia_ = 0;
 800cbe0:	4b27      	ldr	r3, [pc, #156]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	811a      	strh	r2, [r3, #8]
	Custom_App_Context.accx_ = 0;
 800cbe6:	4b26      	ldr	r3, [pc, #152]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cbe8:	f04f 0200 	mov.w	r2, #0
 800cbec:	60da      	str	r2, [r3, #12]
	Custom_App_Context.accy_ = 0;
 800cbee:	4b24      	ldr	r3, [pc, #144]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cbf0:	f04f 0200 	mov.w	r2, #0
 800cbf4:	611a      	str	r2, [r3, #16]
	Custom_App_Context.accz_ = 0;
 800cbf6:	4b22      	ldr	r3, [pc, #136]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cbf8:	f04f 0200 	mov.w	r2, #0
 800cbfc:	615a      	str	r2, [r3, #20]
	Custom_App_Context.gyrx_ = 0;
 800cbfe:	4b20      	ldr	r3, [pc, #128]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cc00:	f04f 0200 	mov.w	r2, #0
 800cc04:	619a      	str	r2, [r3, #24]
	Custom_App_Context.gyry_ = 0;
 800cc06:	4b1e      	ldr	r3, [pc, #120]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cc08:	f04f 0200 	mov.w	r2, #0
 800cc0c:	61da      	str	r2, [r3, #28]
	Custom_App_Context.gyrz_ = 0;
 800cc0e:	4b1c      	ldr	r3, [pc, #112]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	621a      	str	r2, [r3, #32]
	Custom_App_Context.temp_ = 0;
 800cc16:	4b1a      	ldr	r3, [pc, #104]	@ (800cc80 <Custom_APP_Init+0xa4>)
 800cc18:	f04f 0200 	mov.w	r2, #0
 800cc1c:	625a      	str	r2, [r3, #36]	@ 0x24
	UTIL_SEQ_RegTask(1<<CFG_TASK_IA_ID, UTIL_SEQ_RFU, Custom_Iac_Send_Notification);
 800cc1e:	4a19      	ldr	r2, [pc, #100]	@ (800cc84 <Custom_APP_Init+0xa8>)
 800cc20:	2100      	movs	r1, #0
 800cc22:	2004      	movs	r0, #4
 800cc24:	f002 f810 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_ACCX_ID, UTIL_SEQ_RFU, Custom_Accx_Send_Notification);
 800cc28:	4a17      	ldr	r2, [pc, #92]	@ (800cc88 <Custom_APP_Init+0xac>)
 800cc2a:	2100      	movs	r1, #0
 800cc2c:	2008      	movs	r0, #8
 800cc2e:	f002 f80b 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_ACCY_ID, UTIL_SEQ_RFU, Custom_Accy_Send_Notification);
 800cc32:	4a16      	ldr	r2, [pc, #88]	@ (800cc8c <Custom_APP_Init+0xb0>)
 800cc34:	2100      	movs	r1, #0
 800cc36:	2010      	movs	r0, #16
 800cc38:	f002 f806 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_ACCZ_ID, UTIL_SEQ_RFU, Custom_Accz_Send_Notification);
 800cc3c:	4a14      	ldr	r2, [pc, #80]	@ (800cc90 <Custom_APP_Init+0xb4>)
 800cc3e:	2100      	movs	r1, #0
 800cc40:	2020      	movs	r0, #32
 800cc42:	f002 f801 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_GYRX_ID, UTIL_SEQ_RFU, Custom_Gyrx_Send_Notification);
 800cc46:	4a13      	ldr	r2, [pc, #76]	@ (800cc94 <Custom_APP_Init+0xb8>)
 800cc48:	2100      	movs	r1, #0
 800cc4a:	2040      	movs	r0, #64	@ 0x40
 800cc4c:	f001 fffc 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_GYRY_ID, UTIL_SEQ_RFU, Custom_Gyry_Send_Notification);
 800cc50:	4a11      	ldr	r2, [pc, #68]	@ (800cc98 <Custom_APP_Init+0xbc>)
 800cc52:	2100      	movs	r1, #0
 800cc54:	2080      	movs	r0, #128	@ 0x80
 800cc56:	f001 fff7 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_GYRZ_ID, UTIL_SEQ_RFU, Custom_Gyrz_Send_Notification);
 800cc5a:	4a10      	ldr	r2, [pc, #64]	@ (800cc9c <Custom_APP_Init+0xc0>)
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800cc62:	f001 fff1 	bl	800ec48 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask(1<<CFG_TASK_TEMP_ID, UTIL_SEQ_RFU, Custom_Tempc_Send_Notification);
 800cc66:	4a0e      	ldr	r2, [pc, #56]	@ (800cca0 <Custom_APP_Init+0xc4>)
 800cc68:	2100      	movs	r1, #0
 800cc6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800cc6e:	f001 ffeb 	bl	800ec48 <UTIL_SEQ_RegTask>
	Custom_delai_Update_Char();
 800cc72:	f000 fa57 	bl	800d124 <Custom_delai_Update_Char>
	Custom_acq_Update_Char();
 800cc76:	f000 fa5f 	bl	800d138 <Custom_acq_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800cc7a:	bf00      	nop
}
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	20001f88 	.word	0x20001f88
 800cc84:	0800cca5 	.word	0x0800cca5
 800cc88:	0800cd39 	.word	0x0800cd39
 800cc8c:	0800cdad 	.word	0x0800cdad
 800cc90:	0800ce41 	.word	0x0800ce41
 800cc94:	0800ced5 	.word	0x0800ced5
 800cc98:	0800cf69 	.word	0x0800cf69
 800cc9c:	0800cffd 	.word	0x0800cffd
 800cca0:	0800d091 	.word	0x0800d091

0800cca4 <Custom_Iac_Send_Notification>:
  /* USER CODE END Iac_UC_Last*/
  return;
}

void Custom_Iac_Send_Notification(void) /* Property Notification */
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Iac_NS_1*/
  if (Custom_App_Context.Iac_Notification_Status == 1)
 800ccae:	4b1a      	ldr	r3, [pc, #104]	@ (800cd18 <Custom_Iac_Send_Notification+0x74>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d117      	bne.n	800cce6 <Custom_Iac_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	71fb      	strb	r3, [r7, #7]

  	//if (Custom_App_Context.swc == 1)
  	  //{
  		  Custom_App_Context.ia_ = ia;
 800ccba:	4b18      	ldr	r3, [pc, #96]	@ (800cd1c <Custom_Iac_Send_Notification+0x78>)
 800ccbc:	881a      	ldrh	r2, [r3, #0]
 800ccbe:	4b16      	ldr	r3, [pc, #88]	@ (800cd18 <Custom_Iac_Send_Notification+0x74>)
 800ccc0:	811a      	strh	r2, [r3, #8]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.ia_,sizeof(Custom_App_Context.ia_));
 800ccc2:	4b15      	ldr	r3, [pc, #84]	@ (800cd18 <Custom_Iac_Send_Notification+0x74>)
 800ccc4:	891a      	ldrh	r2, [r3, #8]
 800ccc6:	4b16      	ldr	r3, [pc, #88]	@ (800cd20 <Custom_Iac_Send_Notification+0x7c>)
 800ccc8:	801a      	strh	r2, [r3, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800ccca:	4816      	ldr	r0, [pc, #88]	@ (800cd24 <Custom_Iac_Send_Notification+0x80>)
 800cccc:	f7fe fdb4 	bl	800b838 <DbgTraceGetFileName>
 800ccd0:	4601      	mov	r1, r0
 800ccd2:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800ccd6:	4a14      	ldr	r2, [pc, #80]	@ (800cd28 <Custom_Iac_Send_Notification+0x84>)
 800ccd8:	4814      	ldr	r0, [pc, #80]	@ (800cd2c <Custom_Iac_Send_Notification+0x88>)
 800ccda:	f003 fec5 	bl	8010a68 <iprintf>
 800ccde:	4814      	ldr	r0, [pc, #80]	@ (800cd30 <Custom_Iac_Send_Notification+0x8c>)
 800cce0:	f003 ff32 	bl	8010b48 <puts>
 800cce4:	e00c      	b.n	800cd00 <Custom_Iac_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800cce6:	480f      	ldr	r0, [pc, #60]	@ (800cd24 <Custom_Iac_Send_Notification+0x80>)
 800cce8:	f7fe fda6 	bl	800b838 <DbgTraceGetFileName>
 800ccec:	4601      	mov	r1, r0
 800ccee:	f240 13c7 	movw	r3, #455	@ 0x1c7
 800ccf2:	4a0d      	ldr	r2, [pc, #52]	@ (800cd28 <Custom_Iac_Send_Notification+0x84>)
 800ccf4:	480d      	ldr	r0, [pc, #52]	@ (800cd2c <Custom_Iac_Send_Notification+0x88>)
 800ccf6:	f003 feb7 	bl	8010a68 <iprintf>
 800ccfa:	480e      	ldr	r0, [pc, #56]	@ (800cd34 <Custom_Iac_Send_Notification+0x90>)
 800ccfc:	f003 ff24 	bl	8010b48 <puts>
  	}
  /* USER CODE END Iac_NS_1*/

  if (updateflag != 0)
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d004      	beq.n	800cd10 <Custom_Iac_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_IAC, (uint8_t *)NotifyCharData);
 800cd06:	4906      	ldr	r1, [pc, #24]	@ (800cd20 <Custom_Iac_Send_Notification+0x7c>)
 800cd08:	2002      	movs	r0, #2
 800cd0a:	f001 f959 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Iac_NS_Last*/

  /* USER CODE END Iac_NS_Last*/

  return;
 800cd0e:	bf00      	nop
 800cd10:	bf00      	nop
}
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	20001f88 	.word	0x20001f88
 800cd1c:	20001f68 	.word	0x20001f68
 800cd20:	200021b4 	.word	0x200021b4
 800cd24:	08014834 	.word	0x08014834
 800cd28:	080166e0 	.word	0x080166e0
 800cd2c:	08014854 	.word	0x08014854
 800cd30:	08014868 	.word	0x08014868
 800cd34:	080148a8 	.word	0x080148a8

0800cd38 <Custom_Accx_Send_Notification>:
  /* USER CODE END Accx_UC_Last*/
  return;
}

void Custom_Accx_Send_Notification(void) /* Property Notification */
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b082      	sub	sp, #8
 800cd3c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Accx_NS_1*/
  if (Custom_App_Context.Accx_Notification_Status == 1)
 800cd42:	4b13      	ldr	r3, [pc, #76]	@ (800cd90 <Custom_Accx_Send_Notification+0x58>)
 800cd44:	785b      	ldrb	r3, [r3, #1]
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d11e      	bne.n	800cd88 <Custom_Accx_Send_Notification+0x50>
  	{
  	  updateflag = 1;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	71fb      	strb	r3, [r7, #7]
  	//acq=1;
  	//if (acq == 1)
  	  //{
  	//if (Custom_App_Context.swc == 1)
  	  //	  {s
  		  Custom_App_Context.accx_ = accx;
 800cd4e:	4b11      	ldr	r3, [pc, #68]	@ (800cd94 <Custom_Accx_Send_Notification+0x5c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a0f      	ldr	r2, [pc, #60]	@ (800cd90 <Custom_Accx_Send_Notification+0x58>)
 800cd54:	60d3      	str	r3, [r2, #12]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.accx_,sizeof(Custom_App_Context.accx_));
 800cd56:	4b0e      	ldr	r3, [pc, #56]	@ (800cd90 <Custom_Accx_Send_Notification+0x58>)
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	4a0f      	ldr	r2, [pc, #60]	@ (800cd98 <Custom_Accx_Send_Notification+0x60>)
 800cd5c:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800cd5e:	480f      	ldr	r0, [pc, #60]	@ (800cd9c <Custom_Accx_Send_Notification+0x64>)
 800cd60:	f7fe fd6a 	bl	800b838 <DbgTraceGetFileName>
 800cd64:	4601      	mov	r1, r0
 800cd66:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 800cd6a:	4a0d      	ldr	r2, [pc, #52]	@ (800cda0 <Custom_Accx_Send_Notification+0x68>)
 800cd6c:	480d      	ldr	r0, [pc, #52]	@ (800cda4 <Custom_Accx_Send_Notification+0x6c>)
 800cd6e:	f003 fe7b 	bl	8010a68 <iprintf>
 800cd72:	480d      	ldr	r0, [pc, #52]	@ (800cda8 <Custom_Accx_Send_Notification+0x70>)
 800cd74:	f003 fee8 	bl	8010b48 <puts>
  	//{
  	  //APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
  	//}
  /* USER CODE END Accx_NS_1*/

  if (updateflag != 0)
 800cd78:	79fb      	ldrb	r3, [r7, #7]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d004      	beq.n	800cd88 <Custom_Accx_Send_Notification+0x50>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACCX, (uint8_t *)NotifyCharData);
 800cd7e:	4906      	ldr	r1, [pc, #24]	@ (800cd98 <Custom_Accx_Send_Notification+0x60>)
 800cd80:	2003      	movs	r0, #3
 800cd82:	f001 f91d 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Accx_NS_Last*/
  	}
  /* USER CODE END Accx_NS_Last*/

  return;
 800cd86:	bf00      	nop
 800cd88:	bf00      	nop
}
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20001f88 	.word	0x20001f88
 800cd94:	20001f6c 	.word	0x20001f6c
 800cd98:	200021b4 	.word	0x200021b4
 800cd9c:	08014834 	.word	0x08014834
 800cda0:	08016700 	.word	0x08016700
 800cda4:	08014854 	.word	0x08014854
 800cda8:	08014868 	.word	0x08014868

0800cdac <Custom_Accy_Send_Notification>:
  /* USER CODE END Accy_UC_Last*/
  return;
}

void Custom_Accy_Send_Notification(void) /* Property Notification */
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b082      	sub	sp, #8
 800cdb0:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Accy_NS_1*/
  if (Custom_App_Context.Accy_Notification_Status == 1)
 800cdb6:	4b1a      	ldr	r3, [pc, #104]	@ (800ce20 <Custom_Accy_Send_Notification+0x74>)
 800cdb8:	789b      	ldrb	r3, [r3, #2]
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d117      	bne.n	800cdee <Custom_Accy_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	71fb      	strb	r3, [r7, #7]

  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.accy_ = accy;
 800cdc2:	4b18      	ldr	r3, [pc, #96]	@ (800ce24 <Custom_Accy_Send_Notification+0x78>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a16      	ldr	r2, [pc, #88]	@ (800ce20 <Custom_Accy_Send_Notification+0x74>)
 800cdc8:	6113      	str	r3, [r2, #16]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.accy_,sizeof(Custom_App_Context.accy_));
 800cdca:	4b15      	ldr	r3, [pc, #84]	@ (800ce20 <Custom_Accy_Send_Notification+0x74>)
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	4a16      	ldr	r2, [pc, #88]	@ (800ce28 <Custom_Accy_Send_Notification+0x7c>)
 800cdd0:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800cdd2:	4816      	ldr	r0, [pc, #88]	@ (800ce2c <Custom_Accy_Send_Notification+0x80>)
 800cdd4:	f7fe fd30 	bl	800b838 <DbgTraceGetFileName>
 800cdd8:	4601      	mov	r1, r0
 800cdda:	f240 232f 	movw	r3, #559	@ 0x22f
 800cdde:	4a14      	ldr	r2, [pc, #80]	@ (800ce30 <Custom_Accy_Send_Notification+0x84>)
 800cde0:	4814      	ldr	r0, [pc, #80]	@ (800ce34 <Custom_Accy_Send_Notification+0x88>)
 800cde2:	f003 fe41 	bl	8010a68 <iprintf>
 800cde6:	4814      	ldr	r0, [pc, #80]	@ (800ce38 <Custom_Accy_Send_Notification+0x8c>)
 800cde8:	f003 feae 	bl	8010b48 <puts>
 800cdec:	e00c      	b.n	800ce08 <Custom_Accy_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800cdee:	480f      	ldr	r0, [pc, #60]	@ (800ce2c <Custom_Accy_Send_Notification+0x80>)
 800cdf0:	f7fe fd22 	bl	800b838 <DbgTraceGetFileName>
 800cdf4:	4601      	mov	r1, r0
 800cdf6:	f44f 730d 	mov.w	r3, #564	@ 0x234
 800cdfa:	4a0d      	ldr	r2, [pc, #52]	@ (800ce30 <Custom_Accy_Send_Notification+0x84>)
 800cdfc:	480d      	ldr	r0, [pc, #52]	@ (800ce34 <Custom_Accy_Send_Notification+0x88>)
 800cdfe:	f003 fe33 	bl	8010a68 <iprintf>
 800ce02:	480e      	ldr	r0, [pc, #56]	@ (800ce3c <Custom_Accy_Send_Notification+0x90>)
 800ce04:	f003 fea0 	bl	8010b48 <puts>
  	}
  /* USER CODE END Accy_NS_1*/

  if (updateflag != 0)
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d004      	beq.n	800ce18 <Custom_Accy_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACCY, (uint8_t *)NotifyCharData);
 800ce0e:	4906      	ldr	r1, [pc, #24]	@ (800ce28 <Custom_Accy_Send_Notification+0x7c>)
 800ce10:	2004      	movs	r0, #4
 800ce12:	f001 f8d5 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Accy_NS_Last*/

  /* USER CODE END Accy_NS_Last*/

  return;
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
}
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	20001f88 	.word	0x20001f88
 800ce24:	20001f70 	.word	0x20001f70
 800ce28:	200021b4 	.word	0x200021b4
 800ce2c:	08014834 	.word	0x08014834
 800ce30:	08016720 	.word	0x08016720
 800ce34:	08014854 	.word	0x08014854
 800ce38:	08014868 	.word	0x08014868
 800ce3c:	080148a8 	.word	0x080148a8

0800ce40 <Custom_Accz_Send_Notification>:
  /* USER CODE END Accz_UC_Last*/
  return;
}

void Custom_Accz_Send_Notification(void) /* Property Notification */
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800ce46:	2300      	movs	r3, #0
 800ce48:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Accz_NS_1*/
  if (Custom_App_Context.Accz_Notification_Status == 1)
 800ce4a:	4b1a      	ldr	r3, [pc, #104]	@ (800ceb4 <Custom_Accz_Send_Notification+0x74>)
 800ce4c:	78db      	ldrb	r3, [r3, #3]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d117      	bne.n	800ce82 <Custom_Accz_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800ce52:	2301      	movs	r3, #1
 800ce54:	71fb      	strb	r3, [r7, #7]

  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.accz_ = accz;
 800ce56:	4b18      	ldr	r3, [pc, #96]	@ (800ceb8 <Custom_Accz_Send_Notification+0x78>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4a16      	ldr	r2, [pc, #88]	@ (800ceb4 <Custom_Accz_Send_Notification+0x74>)
 800ce5c:	6153      	str	r3, [r2, #20]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.accz_,sizeof(Custom_App_Context.accz_));
 800ce5e:	4b15      	ldr	r3, [pc, #84]	@ (800ceb4 <Custom_Accz_Send_Notification+0x74>)
 800ce60:	695b      	ldr	r3, [r3, #20]
 800ce62:	4a16      	ldr	r2, [pc, #88]	@ (800cebc <Custom_Accz_Send_Notification+0x7c>)
 800ce64:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800ce66:	4816      	ldr	r0, [pc, #88]	@ (800cec0 <Custom_Accz_Send_Notification+0x80>)
 800ce68:	f7fe fce6 	bl	800b838 <DbgTraceGetFileName>
 800ce6c:	4601      	mov	r1, r0
 800ce6e:	f44f 7319 	mov.w	r3, #612	@ 0x264
 800ce72:	4a14      	ldr	r2, [pc, #80]	@ (800cec4 <Custom_Accz_Send_Notification+0x84>)
 800ce74:	4814      	ldr	r0, [pc, #80]	@ (800cec8 <Custom_Accz_Send_Notification+0x88>)
 800ce76:	f003 fdf7 	bl	8010a68 <iprintf>
 800ce7a:	4814      	ldr	r0, [pc, #80]	@ (800cecc <Custom_Accz_Send_Notification+0x8c>)
 800ce7c:	f003 fe64 	bl	8010b48 <puts>
 800ce80:	e00c      	b.n	800ce9c <Custom_Accz_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800ce82:	480f      	ldr	r0, [pc, #60]	@ (800cec0 <Custom_Accz_Send_Notification+0x80>)
 800ce84:	f7fe fcd8 	bl	800b838 <DbgTraceGetFileName>
 800ce88:	4601      	mov	r1, r0
 800ce8a:	f240 2369 	movw	r3, #617	@ 0x269
 800ce8e:	4a0d      	ldr	r2, [pc, #52]	@ (800cec4 <Custom_Accz_Send_Notification+0x84>)
 800ce90:	480d      	ldr	r0, [pc, #52]	@ (800cec8 <Custom_Accz_Send_Notification+0x88>)
 800ce92:	f003 fde9 	bl	8010a68 <iprintf>
 800ce96:	480e      	ldr	r0, [pc, #56]	@ (800ced0 <Custom_Accz_Send_Notification+0x90>)
 800ce98:	f003 fe56 	bl	8010b48 <puts>
  	}
  /* USER CODE END Accz_NS_1*/

  if (updateflag != 0)
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <Custom_Accz_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_ACCZ, (uint8_t *)NotifyCharData);
 800cea2:	4906      	ldr	r1, [pc, #24]	@ (800cebc <Custom_Accz_Send_Notification+0x7c>)
 800cea4:	2005      	movs	r0, #5
 800cea6:	f001 f88b 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Accz_NS_Last*/

  /* USER CODE END Accz_NS_Last*/

  return;
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
}
 800ceae:	3708      	adds	r7, #8
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	20001f88 	.word	0x20001f88
 800ceb8:	20001f74 	.word	0x20001f74
 800cebc:	200021b4 	.word	0x200021b4
 800cec0:	08014834 	.word	0x08014834
 800cec4:	08016740 	.word	0x08016740
 800cec8:	08014854 	.word	0x08014854
 800cecc:	08014868 	.word	0x08014868
 800ced0:	080148a8 	.word	0x080148a8

0800ced4 <Custom_Gyrx_Send_Notification>:
  /* USER CODE END Gyrx_UC_Last*/
  return;
}

void Custom_Gyrx_Send_Notification(void) /* Property Notification */
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Gyrx_NS_1*/
  if (Custom_App_Context.Gyrx_Notification_Status == 1)
 800cede:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <Custom_Gyrx_Send_Notification+0x74>)
 800cee0:	791b      	ldrb	r3, [r3, #4]
 800cee2:	2b01      	cmp	r3, #1
 800cee4:	d117      	bne.n	800cf16 <Custom_Gyrx_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800cee6:	2301      	movs	r3, #1
 800cee8:	71fb      	strb	r3, [r7, #7]

  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.gyrx_ = gyrx;
 800ceea:	4b18      	ldr	r3, [pc, #96]	@ (800cf4c <Custom_Gyrx_Send_Notification+0x78>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a16      	ldr	r2, [pc, #88]	@ (800cf48 <Custom_Gyrx_Send_Notification+0x74>)
 800cef0:	6193      	str	r3, [r2, #24]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.gyrx_,sizeof(Custom_App_Context.gyrx_));
 800cef2:	4b15      	ldr	r3, [pc, #84]	@ (800cf48 <Custom_Gyrx_Send_Notification+0x74>)
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	4a16      	ldr	r2, [pc, #88]	@ (800cf50 <Custom_Gyrx_Send_Notification+0x7c>)
 800cef8:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800cefa:	4816      	ldr	r0, [pc, #88]	@ (800cf54 <Custom_Gyrx_Send_Notification+0x80>)
 800cefc:	f7fe fc9c 	bl	800b838 <DbgTraceGetFileName>
 800cf00:	4601      	mov	r1, r0
 800cf02:	f240 239a 	movw	r3, #666	@ 0x29a
 800cf06:	4a14      	ldr	r2, [pc, #80]	@ (800cf58 <Custom_Gyrx_Send_Notification+0x84>)
 800cf08:	4814      	ldr	r0, [pc, #80]	@ (800cf5c <Custom_Gyrx_Send_Notification+0x88>)
 800cf0a:	f003 fdad 	bl	8010a68 <iprintf>
 800cf0e:	4814      	ldr	r0, [pc, #80]	@ (800cf60 <Custom_Gyrx_Send_Notification+0x8c>)
 800cf10:	f003 fe1a 	bl	8010b48 <puts>
 800cf14:	e00c      	b.n	800cf30 <Custom_Gyrx_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800cf16:	480f      	ldr	r0, [pc, #60]	@ (800cf54 <Custom_Gyrx_Send_Notification+0x80>)
 800cf18:	f7fe fc8e 	bl	800b838 <DbgTraceGetFileName>
 800cf1c:	4601      	mov	r1, r0
 800cf1e:	f240 239f 	movw	r3, #671	@ 0x29f
 800cf22:	4a0d      	ldr	r2, [pc, #52]	@ (800cf58 <Custom_Gyrx_Send_Notification+0x84>)
 800cf24:	480d      	ldr	r0, [pc, #52]	@ (800cf5c <Custom_Gyrx_Send_Notification+0x88>)
 800cf26:	f003 fd9f 	bl	8010a68 <iprintf>
 800cf2a:	480e      	ldr	r0, [pc, #56]	@ (800cf64 <Custom_Gyrx_Send_Notification+0x90>)
 800cf2c:	f003 fe0c 	bl	8010b48 <puts>
  	}
  /* USER CODE END Gyrx_NS_1*/

  if (updateflag != 0)
 800cf30:	79fb      	ldrb	r3, [r7, #7]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d004      	beq.n	800cf40 <Custom_Gyrx_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_GYRX, (uint8_t *)NotifyCharData);
 800cf36:	4906      	ldr	r1, [pc, #24]	@ (800cf50 <Custom_Gyrx_Send_Notification+0x7c>)
 800cf38:	2006      	movs	r0, #6
 800cf3a:	f001 f841 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Gyrx_NS_Last*/

  /* USER CODE END Gyrx_NS_Last*/

  return;
 800cf3e:	bf00      	nop
 800cf40:	bf00      	nop
}
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	20001f88 	.word	0x20001f88
 800cf4c:	20001f78 	.word	0x20001f78
 800cf50:	200021b4 	.word	0x200021b4
 800cf54:	08014834 	.word	0x08014834
 800cf58:	08016760 	.word	0x08016760
 800cf5c:	08014854 	.word	0x08014854
 800cf60:	08014868 	.word	0x08014868
 800cf64:	080148a8 	.word	0x080148a8

0800cf68 <Custom_Gyry_Send_Notification>:
  /* USER CODE END Gyry_UC_Last*/
  return;
}

void Custom_Gyry_Send_Notification(void) /* Property Notification */
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Gyry_NS_1*/
  if (Custom_App_Context.Gyry_Notification_Status == 1)
 800cf72:	4b1a      	ldr	r3, [pc, #104]	@ (800cfdc <Custom_Gyry_Send_Notification+0x74>)
 800cf74:	795b      	ldrb	r3, [r3, #5]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d117      	bne.n	800cfaa <Custom_Gyry_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	71fb      	strb	r3, [r7, #7]

  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.gyry_ = gyry;
 800cf7e:	4b18      	ldr	r3, [pc, #96]	@ (800cfe0 <Custom_Gyry_Send_Notification+0x78>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a16      	ldr	r2, [pc, #88]	@ (800cfdc <Custom_Gyry_Send_Notification+0x74>)
 800cf84:	61d3      	str	r3, [r2, #28]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.gyry_,sizeof(Custom_App_Context.gyry_));
 800cf86:	4b15      	ldr	r3, [pc, #84]	@ (800cfdc <Custom_Gyry_Send_Notification+0x74>)
 800cf88:	69db      	ldr	r3, [r3, #28]
 800cf8a:	4a16      	ldr	r2, [pc, #88]	@ (800cfe4 <Custom_Gyry_Send_Notification+0x7c>)
 800cf8c:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800cf8e:	4816      	ldr	r0, [pc, #88]	@ (800cfe8 <Custom_Gyry_Send_Notification+0x80>)
 800cf90:	f7fe fc52 	bl	800b838 <DbgTraceGetFileName>
 800cf94:	4601      	mov	r1, r0
 800cf96:	f240 23cf 	movw	r3, #719	@ 0x2cf
 800cf9a:	4a14      	ldr	r2, [pc, #80]	@ (800cfec <Custom_Gyry_Send_Notification+0x84>)
 800cf9c:	4814      	ldr	r0, [pc, #80]	@ (800cff0 <Custom_Gyry_Send_Notification+0x88>)
 800cf9e:	f003 fd63 	bl	8010a68 <iprintf>
 800cfa2:	4814      	ldr	r0, [pc, #80]	@ (800cff4 <Custom_Gyry_Send_Notification+0x8c>)
 800cfa4:	f003 fdd0 	bl	8010b48 <puts>
 800cfa8:	e00c      	b.n	800cfc4 <Custom_Gyry_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800cfaa:	480f      	ldr	r0, [pc, #60]	@ (800cfe8 <Custom_Gyry_Send_Notification+0x80>)
 800cfac:	f7fe fc44 	bl	800b838 <DbgTraceGetFileName>
 800cfb0:	4601      	mov	r1, r0
 800cfb2:	f44f 7335 	mov.w	r3, #724	@ 0x2d4
 800cfb6:	4a0d      	ldr	r2, [pc, #52]	@ (800cfec <Custom_Gyry_Send_Notification+0x84>)
 800cfb8:	480d      	ldr	r0, [pc, #52]	@ (800cff0 <Custom_Gyry_Send_Notification+0x88>)
 800cfba:	f003 fd55 	bl	8010a68 <iprintf>
 800cfbe:	480e      	ldr	r0, [pc, #56]	@ (800cff8 <Custom_Gyry_Send_Notification+0x90>)
 800cfc0:	f003 fdc2 	bl	8010b48 <puts>
  	}
  /* USER CODE END Gyry_NS_1*/

  if (updateflag != 0)
 800cfc4:	79fb      	ldrb	r3, [r7, #7]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d004      	beq.n	800cfd4 <Custom_Gyry_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_GYRY, (uint8_t *)NotifyCharData);
 800cfca:	4906      	ldr	r1, [pc, #24]	@ (800cfe4 <Custom_Gyry_Send_Notification+0x7c>)
 800cfcc:	2007      	movs	r0, #7
 800cfce:	f000 fff7 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Gyry_NS_Last*/

  /* USER CODE END Gyry_NS_Last*/

  return;
 800cfd2:	bf00      	nop
 800cfd4:	bf00      	nop
}
 800cfd6:	3708      	adds	r7, #8
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	20001f88 	.word	0x20001f88
 800cfe0:	20001f7c 	.word	0x20001f7c
 800cfe4:	200021b4 	.word	0x200021b4
 800cfe8:	08014834 	.word	0x08014834
 800cfec:	08016780 	.word	0x08016780
 800cff0:	08014854 	.word	0x08014854
 800cff4:	08014868 	.word	0x08014868
 800cff8:	080148a8 	.word	0x080148a8

0800cffc <Custom_Gyrz_Send_Notification>:
  /* USER CODE END Gyrz_UC_Last*/
  return;
}

void Custom_Gyrz_Send_Notification(void) /* Property Notification */
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800d002:	2300      	movs	r3, #0
 800d004:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Gyrz_NS_1*/
  if (Custom_App_Context.Gyrz_Notification_Status == 1)
 800d006:	4b1a      	ldr	r3, [pc, #104]	@ (800d070 <Custom_Gyrz_Send_Notification+0x74>)
 800d008:	799b      	ldrb	r3, [r3, #6]
 800d00a:	2b01      	cmp	r3, #1
 800d00c:	d117      	bne.n	800d03e <Custom_Gyrz_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800d00e:	2301      	movs	r3, #1
 800d010:	71fb      	strb	r3, [r7, #7]

  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.gyrz_ = gyrz;
 800d012:	4b18      	ldr	r3, [pc, #96]	@ (800d074 <Custom_Gyrz_Send_Notification+0x78>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a16      	ldr	r2, [pc, #88]	@ (800d070 <Custom_Gyrz_Send_Notification+0x74>)
 800d018:	6213      	str	r3, [r2, #32]
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.gyrz_,sizeof(Custom_App_Context.gyrz_));
 800d01a:	4b15      	ldr	r3, [pc, #84]	@ (800d070 <Custom_Gyrz_Send_Notification+0x74>)
 800d01c:	6a1b      	ldr	r3, [r3, #32]
 800d01e:	4a16      	ldr	r2, [pc, #88]	@ (800d078 <Custom_Gyrz_Send_Notification+0x7c>)
 800d020:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800d022:	4816      	ldr	r0, [pc, #88]	@ (800d07c <Custom_Gyrz_Send_Notification+0x80>)
 800d024:	f7fe fc08 	bl	800b838 <DbgTraceGetFileName>
 800d028:	4601      	mov	r1, r0
 800d02a:	f44f 7341 	mov.w	r3, #772	@ 0x304
 800d02e:	4a14      	ldr	r2, [pc, #80]	@ (800d080 <Custom_Gyrz_Send_Notification+0x84>)
 800d030:	4814      	ldr	r0, [pc, #80]	@ (800d084 <Custom_Gyrz_Send_Notification+0x88>)
 800d032:	f003 fd19 	bl	8010a68 <iprintf>
 800d036:	4814      	ldr	r0, [pc, #80]	@ (800d088 <Custom_Gyrz_Send_Notification+0x8c>)
 800d038:	f003 fd86 	bl	8010b48 <puts>
 800d03c:	e00c      	b.n	800d058 <Custom_Gyrz_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800d03e:	480f      	ldr	r0, [pc, #60]	@ (800d07c <Custom_Gyrz_Send_Notification+0x80>)
 800d040:	f7fe fbfa 	bl	800b838 <DbgTraceGetFileName>
 800d044:	4601      	mov	r1, r0
 800d046:	f240 3309 	movw	r3, #777	@ 0x309
 800d04a:	4a0d      	ldr	r2, [pc, #52]	@ (800d080 <Custom_Gyrz_Send_Notification+0x84>)
 800d04c:	480d      	ldr	r0, [pc, #52]	@ (800d084 <Custom_Gyrz_Send_Notification+0x88>)
 800d04e:	f003 fd0b 	bl	8010a68 <iprintf>
 800d052:	480e      	ldr	r0, [pc, #56]	@ (800d08c <Custom_Gyrz_Send_Notification+0x90>)
 800d054:	f003 fd78 	bl	8010b48 <puts>
  	}
  /* USER CODE END Gyrz_NS_1*/

  if (updateflag != 0)
 800d058:	79fb      	ldrb	r3, [r7, #7]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <Custom_Gyrz_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_GYRZ, (uint8_t *)NotifyCharData);
 800d05e:	4906      	ldr	r1, [pc, #24]	@ (800d078 <Custom_Gyrz_Send_Notification+0x7c>)
 800d060:	2008      	movs	r0, #8
 800d062:	f000 ffad 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Gyrz_NS_Last*/

  /* USER CODE END Gyrz_NS_Last*/

  return;
 800d066:	bf00      	nop
 800d068:	bf00      	nop
}
 800d06a:	3708      	adds	r7, #8
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20001f88 	.word	0x20001f88
 800d074:	20001f80 	.word	0x20001f80
 800d078:	200021b4 	.word	0x200021b4
 800d07c:	08014834 	.word	0x08014834
 800d080:	080167a0 	.word	0x080167a0
 800d084:	08014854 	.word	0x08014854
 800d088:	08014868 	.word	0x08014868
 800d08c:	080148a8 	.word	0x080148a8

0800d090 <Custom_Tempc_Send_Notification>:
  /* USER CODE END Tempc_UC_Last*/
  return;
}

void Custom_Tempc_Send_Notification(void) /* Property Notification */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Tempc_NS_1*/
  if (Custom_App_Context.Tempc_Notification_Status == 1)
 800d09a:	4b1a      	ldr	r3, [pc, #104]	@ (800d104 <Custom_Tempc_Send_Notification+0x74>)
 800d09c:	79db      	ldrb	r3, [r3, #7]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d117      	bne.n	800d0d2 <Custom_Tempc_Send_Notification+0x42>
  	{
  	  updateflag = 1;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	71fb      	strb	r3, [r7, #7]
  	  //acq=1;
  	//if (acq == 1)
  	  //{
  		  Custom_App_Context.temp_ = temp;
 800d0a6:	4b18      	ldr	r3, [pc, #96]	@ (800d108 <Custom_Tempc_Send_Notification+0x78>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a16      	ldr	r2, [pc, #88]	@ (800d104 <Custom_Tempc_Send_Notification+0x74>)
 800d0ac:	6253      	str	r3, [r2, #36]	@ 0x24
  		  memcpy(&NotifyCharData[0],&Custom_App_Context.temp_,sizeof(Custom_App_Context.temp_));
 800d0ae:	4b15      	ldr	r3, [pc, #84]	@ (800d104 <Custom_Tempc_Send_Notification+0x74>)
 800d0b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b2:	4a16      	ldr	r2, [pc, #88]	@ (800d10c <Custom_Tempc_Send_Notification+0x7c>)
 800d0b4:	6013      	str	r3, [r2, #0]
  		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 3 PUSHED \n");
 800d0b6:	4816      	ldr	r0, [pc, #88]	@ (800d110 <Custom_Tempc_Send_Notification+0x80>)
 800d0b8:	f7fe fbbe 	bl	800b838 <DbgTraceGetFileName>
 800d0bc:	4601      	mov	r1, r0
 800d0be:	f240 333a 	movw	r3, #826	@ 0x33a
 800d0c2:	4a14      	ldr	r2, [pc, #80]	@ (800d114 <Custom_Tempc_Send_Notification+0x84>)
 800d0c4:	4814      	ldr	r0, [pc, #80]	@ (800d118 <Custom_Tempc_Send_Notification+0x88>)
 800d0c6:	f003 fccf 	bl	8010a68 <iprintf>
 800d0ca:	4814      	ldr	r0, [pc, #80]	@ (800d11c <Custom_Tempc_Send_Notification+0x8c>)
 800d0cc:	f003 fd3c 	bl	8010b48 <puts>
 800d0d0:	e00c      	b.n	800d0ec <Custom_Tempc_Send_Notification+0x5c>
  	  //}
  	}
  	else
  	{
  	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800d0d2:	480f      	ldr	r0, [pc, #60]	@ (800d110 <Custom_Tempc_Send_Notification+0x80>)
 800d0d4:	f7fe fbb0 	bl	800b838 <DbgTraceGetFileName>
 800d0d8:	4601      	mov	r1, r0
 800d0da:	f240 333f 	movw	r3, #831	@ 0x33f
 800d0de:	4a0d      	ldr	r2, [pc, #52]	@ (800d114 <Custom_Tempc_Send_Notification+0x84>)
 800d0e0:	480d      	ldr	r0, [pc, #52]	@ (800d118 <Custom_Tempc_Send_Notification+0x88>)
 800d0e2:	f003 fcc1 	bl	8010a68 <iprintf>
 800d0e6:	480e      	ldr	r0, [pc, #56]	@ (800d120 <Custom_Tempc_Send_Notification+0x90>)
 800d0e8:	f003 fd2e 	bl	8010b48 <puts>
  	}
  /* USER CODE END Tempc_NS_1*/

  if (updateflag != 0)
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d004      	beq.n	800d0fc <Custom_Tempc_Send_Notification+0x6c>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_TEMPC, (uint8_t *)NotifyCharData);
 800d0f2:	4906      	ldr	r1, [pc, #24]	@ (800d10c <Custom_Tempc_Send_Notification+0x7c>)
 800d0f4:	2009      	movs	r0, #9
 800d0f6:	f000 ff63 	bl	800dfc0 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Tempc_NS_Last*/

  /* USER CODE END Tempc_NS_Last*/

  return;
 800d0fa:	bf00      	nop
 800d0fc:	bf00      	nop
}
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	20001f88 	.word	0x20001f88
 800d108:	20001f84 	.word	0x20001f84
 800d10c:	200021b4 	.word	0x200021b4
 800d110:	08014834 	.word	0x08014834
 800d114:	080167c0 	.word	0x080167c0
 800d118:	08014854 	.word	0x08014854
 800d11c:	08014868 	.word	0x08014868
 800d120:	080148a8 	.word	0x080148a8

0800d124 <Custom_delai_Update_Char>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Custom_delai_Update_Char() /* Property writed */
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_DELAI, (uint8_t *)UpdateCharData);
 800d128:	4902      	ldr	r1, [pc, #8]	@ (800d134 <Custom_delai_Update_Char+0x10>)
 800d12a:	2000      	movs	r0, #0
 800d12c:	f000 ff48 	bl	800dfc0 <Custom_STM_App_Update_Char>
  return;
 800d130:	bf00      	nop
}
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20001fb4 	.word	0x20001fb4

0800d138 <Custom_acq_Update_Char>:
void Custom_acq_Update_Char() /* Property writed */
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	af00      	add	r7, sp, #0
  Custom_STM_App_Update_Char(CUSTOM_STM_ACQ, (uint8_t *)UpdateCharData);
 800d13c:	4902      	ldr	r1, [pc, #8]	@ (800d148 <Custom_acq_Update_Char+0x10>)
 800d13e:	2001      	movs	r0, #1
 800d140:	f000 ff3e 	bl	800dfc0 <Custom_STM_App_Update_Char>
  return;
 800d144:	bf00      	nop
}
 800d146:	bd80      	pop	{r7, pc}
 800d148:	20001fb4 	.word	0x20001fb4

0800d14c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08c      	sub	sp, #48	@ 0x30
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800d154:	2300      	movs	r3, #0
 800d156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	3301      	adds	r3, #1
 800d15e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 800d160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	2bff      	cmp	r3, #255	@ 0xff
 800d166:	f040 81af 	bne.w	800d4c8 <Custom_STM_Event_Handler+0x37c>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d16a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d16c:	3302      	adds	r3, #2
 800d16e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 800d170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d172:	881b      	ldrh	r3, [r3, #0]
 800d174:	b29b      	uxth	r3, r3
 800d176:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 800d17a:	2b1a      	cmp	r3, #26
 800d17c:	f200 819d 	bhi.w	800d4ba <Custom_STM_Event_Handler+0x36e>
 800d180:	a201      	add	r2, pc, #4	@ (adr r2, 800d188 <Custom_STM_Event_Handler+0x3c>)
 800d182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d186:	bf00      	nop
 800d188:	0800d1f5 	.word	0x0800d1f5
 800d18c:	0800d4bb 	.word	0x0800d4bb
 800d190:	0800d4bb 	.word	0x0800d4bb
 800d194:	0800d4bb 	.word	0x0800d4bb
 800d198:	0800d4bb 	.word	0x0800d4bb
 800d19c:	0800d4bb 	.word	0x0800d4bb
 800d1a0:	0800d4bb 	.word	0x0800d4bb
 800d1a4:	0800d4bb 	.word	0x0800d4bb
 800d1a8:	0800d4bb 	.word	0x0800d4bb
 800d1ac:	0800d4bb 	.word	0x0800d4bb
 800d1b0:	0800d4bb 	.word	0x0800d4bb
 800d1b4:	0800d4bb 	.word	0x0800d4bb
 800d1b8:	0800d4bb 	.word	0x0800d4bb
 800d1bc:	0800d4bb 	.word	0x0800d4bb
 800d1c0:	0800d4bb 	.word	0x0800d4bb
 800d1c4:	0800d4bb 	.word	0x0800d4bb
 800d1c8:	0800d4bb 	.word	0x0800d4bb
 800d1cc:	0800d4bb 	.word	0x0800d4bb
 800d1d0:	0800d4bb 	.word	0x0800d4bb
 800d1d4:	0800d4bb 	.word	0x0800d4bb
 800d1d8:	0800d4bb 	.word	0x0800d4bb
 800d1dc:	0800d4bb 	.word	0x0800d4bb
 800d1e0:	0800d4bb 	.word	0x0800d4bb
 800d1e4:	0800d4bb 	.word	0x0800d4bb
 800d1e8:	0800d4bb 	.word	0x0800d4bb
 800d1ec:	0800d4bb 	.word	0x0800d4bb
 800d1f0:	0800d49d 	.word	0x0800d49d
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f6:	3302      	adds	r3, #2
 800d1f8:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomIacHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	885b      	ldrh	r3, [r3, #2]
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	461a      	mov	r2, r3
 800d202:	4bb0      	ldr	r3, [pc, #704]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	3302      	adds	r3, #2
 800d208:	429a      	cmp	r2, r3
 800d20a:	d119      	bne.n	800d240 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d20c:	2301      	movs	r3, #1
 800d20e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	7a1b      	ldrb	r3, [r3, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <Custom_STM_Event_Handler+0xd4>
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d008      	beq.n	800d230 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 800d21e:	e13c      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IAC_NOTIFY_DISABLED_EVT;
 800d220:	2306      	movs	r3, #6
 800d222:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	4618      	mov	r0, r3
 800d22a:	f7ff fc15 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d22e:	e134      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_IAC_NOTIFY_ENABLED_EVT;
 800d230:	2305      	movs	r3, #5
 800d232:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d234:	f107 0308 	add.w	r3, r7, #8
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fc0d 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d23e:	e12c      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomIacHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAccxHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	885b      	ldrh	r3, [r3, #2]
 800d244:	b29b      	uxth	r3, r3
 800d246:	461a      	mov	r2, r3
 800d248:	4b9e      	ldr	r3, [pc, #632]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d24a:	899b      	ldrh	r3, [r3, #12]
 800d24c:	3302      	adds	r3, #2
 800d24e:	429a      	cmp	r2, r3
 800d250:	d119      	bne.n	800d286 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d252:	2301      	movs	r3, #1
 800d254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_3_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	7a1b      	ldrb	r3, [r3, #8]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <Custom_STM_Event_Handler+0x11a>
 800d260:	2b01      	cmp	r3, #1
 800d262:	d008      	beq.n	800d276 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_3_Char_1_default */
              break;
 800d264:	e119      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCX_NOTIFY_DISABLED_EVT;
 800d266:	2309      	movs	r3, #9
 800d268:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d26a:	f107 0308 	add.w	r3, r7, #8
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fbf2 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d274:	e111      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCX_NOTIFY_ENABLED_EVT;
 800d276:	2308      	movs	r3, #8
 800d278:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d27a:	f107 0308 	add.w	r3, r7, #8
 800d27e:	4618      	mov	r0, r3
 800d280:	f7ff fbea 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d284:	e109      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccxHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAccyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	885b      	ldrh	r3, [r3, #2]
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	461a      	mov	r2, r3
 800d28e:	4b8d      	ldr	r3, [pc, #564]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d290:	89db      	ldrh	r3, [r3, #14]
 800d292:	3302      	adds	r3, #2
 800d294:	429a      	cmp	r2, r3
 800d296:	d119      	bne.n	800d2cc <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d298:	2301      	movs	r3, #1
 800d29a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_3_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	7a1b      	ldrb	r3, [r3, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d002      	beq.n	800d2ac <Custom_STM_Event_Handler+0x160>
 800d2a6:	2b01      	cmp	r3, #1
 800d2a8:	d008      	beq.n	800d2bc <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_3_Char_2_default */
              break;
 800d2aa:	e0f6      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCY_NOTIFY_DISABLED_EVT;
 800d2ac:	230c      	movs	r3, #12
 800d2ae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d2b0:	f107 0308 	add.w	r3, r7, #8
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fbcf 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d2ba:	e0ee      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCY_NOTIFY_ENABLED_EVT;
 800d2bc:	230b      	movs	r3, #11
 800d2be:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d2c0:	f107 0308 	add.w	r3, r7, #8
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7ff fbc7 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d2ca:	e0e6      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccyHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAcczHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	885b      	ldrh	r3, [r3, #2]
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	461a      	mov	r2, r3
 800d2d4:	4b7b      	ldr	r3, [pc, #492]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d2d6:	8a1b      	ldrh	r3, [r3, #16]
 800d2d8:	3302      	adds	r3, #2
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d119      	bne.n	800d312 <Custom_STM_Event_Handler+0x1c6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_3_Char_3 */
            switch (attribute_modified->Attr_Data[0])
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	7a1b      	ldrb	r3, [r3, #8]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <Custom_STM_Event_Handler+0x1a6>
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d008      	beq.n	800d302 <Custom_STM_Event_Handler+0x1b6>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_3_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_3_Char_3_default */
              break;
 800d2f0:	e0d3      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCZ_NOTIFY_DISABLED_EVT;
 800d2f2:	230f      	movs	r3, #15
 800d2f4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d2f6:	f107 0308 	add.w	r3, r7, #8
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fbac 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d300:	e0cb      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCZ_NOTIFY_ENABLED_EVT;
 800d302:	230e      	movs	r3, #14
 800d304:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d306:	f107 0308 	add.w	r3, r7, #8
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7ff fba4 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d310:	e0c3      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAcczHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGyrxHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d312:	69fb      	ldr	r3, [r7, #28]
 800d314:	885b      	ldrh	r3, [r3, #2]
 800d316:	b29b      	uxth	r3, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	4b6a      	ldr	r3, [pc, #424]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d31c:	8a9b      	ldrh	r3, [r3, #20]
 800d31e:	3302      	adds	r3, #2
 800d320:	429a      	cmp	r2, r3
 800d322:	d119      	bne.n	800d358 <Custom_STM_Event_Handler+0x20c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d324:	2301      	movs	r3, #1
 800d326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_4_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	7a1b      	ldrb	r3, [r3, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <Custom_STM_Event_Handler+0x1ec>
 800d332:	2b01      	cmp	r3, #1
 800d334:	d008      	beq.n	800d348 <Custom_STM_Event_Handler+0x1fc>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_4_Char_1_default */
              break;
 800d336:	e0b0      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRX_NOTIFY_DISABLED_EVT;
 800d338:	2312      	movs	r3, #18
 800d33a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d33c:	f107 0308 	add.w	r3, r7, #8
 800d340:	4618      	mov	r0, r3
 800d342:	f7ff fb89 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d346:	e0a8      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRX_NOTIFY_ENABLED_EVT;
 800d348:	2311      	movs	r3, #17
 800d34a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d34c:	f107 0308 	add.w	r3, r7, #8
 800d350:	4618      	mov	r0, r3
 800d352:	f7ff fb81 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d356:	e0a0      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomGyrxHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGyryHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	885b      	ldrh	r3, [r3, #2]
 800d35c:	b29b      	uxth	r3, r3
 800d35e:	461a      	mov	r2, r3
 800d360:	4b58      	ldr	r3, [pc, #352]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d362:	8adb      	ldrh	r3, [r3, #22]
 800d364:	3302      	adds	r3, #2
 800d366:	429a      	cmp	r2, r3
 800d368:	d119      	bne.n	800d39e <Custom_STM_Event_Handler+0x252>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_4_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 800d370:	69fb      	ldr	r3, [r7, #28]
 800d372:	7a1b      	ldrb	r3, [r3, #8]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <Custom_STM_Event_Handler+0x232>
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d008      	beq.n	800d38e <Custom_STM_Event_Handler+0x242>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_4_Char_2_default */
              break;
 800d37c:	e08d      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRY_NOTIFY_DISABLED_EVT;
 800d37e:	2315      	movs	r3, #21
 800d380:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d382:	f107 0308 	add.w	r3, r7, #8
 800d386:	4618      	mov	r0, r3
 800d388:	f7ff fb66 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d38c:	e085      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRY_NOTIFY_ENABLED_EVT;
 800d38e:	2314      	movs	r3, #20
 800d390:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d392:	f107 0308 	add.w	r3, r7, #8
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fb5e 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d39c:	e07d      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomGyryHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGyrzHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	885b      	ldrh	r3, [r3, #2]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b47      	ldr	r3, [pc, #284]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d3a8:	8b1b      	ldrh	r3, [r3, #24]
 800d3aa:	3302      	adds	r3, #2
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d119      	bne.n	800d3e4 <Custom_STM_Event_Handler+0x298>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_4_Char_3 */
            switch (attribute_modified->Attr_Data[0])
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	7a1b      	ldrb	r3, [r3, #8]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d002      	beq.n	800d3c4 <Custom_STM_Event_Handler+0x278>
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d008      	beq.n	800d3d4 <Custom_STM_Event_Handler+0x288>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_4_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_4_Char_3_default */
              break;
 800d3c2:	e06a      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRZ_NOTIFY_DISABLED_EVT;
 800d3c4:	2318      	movs	r3, #24
 800d3c6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d3c8:	f107 0308 	add.w	r3, r7, #8
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	f7ff fb43 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d3d2:	e062      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_GYRZ_NOTIFY_ENABLED_EVT;
 800d3d4:	2317      	movs	r3, #23
 800d3d6:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d3d8:	f107 0308 	add.w	r3, r7, #8
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fb3b 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d3e2:	e05a      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomGyrzHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomTempcHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800d3e4:	69fb      	ldr	r3, [r7, #28]
 800d3e6:	885b      	ldrh	r3, [r3, #2]
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4b35      	ldr	r3, [pc, #212]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d3ee:	8b9b      	ldrh	r3, [r3, #28]
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d119      	bne.n	800d42a <Custom_STM_Event_Handler+0x2de>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_5_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_5_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	7a1b      	ldrb	r3, [r3, #8]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d002      	beq.n	800d40a <Custom_STM_Event_Handler+0x2be>
 800d404:	2b01      	cmp	r3, #1
 800d406:	d008      	beq.n	800d41a <Custom_STM_Event_Handler+0x2ce>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_5_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_5_Char_1_default */
              break;
 800d408:	e047      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPC_NOTIFY_DISABLED_EVT;
 800d40a:	231b      	movs	r3, #27
 800d40c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d40e:	f107 0308 	add.w	r3, r7, #8
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fb20 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d418:	e03f      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_TEMPC_NOTIFY_ENABLED_EVT;
 800d41a:	231a      	movs	r3, #26
 800d41c:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800d41e:	f107 0308 	add.w	r3, r7, #8
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff fb18 	bl	800ca58 <Custom_STM_App_Notification>
                break;
 800d428:	e037      	b.n	800d49a <Custom_STM_Event_Handler+0x34e>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomTempcHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomDelaiHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	885b      	ldrh	r3, [r3, #2]
 800d42e:	b29b      	uxth	r3, r3
 800d430:	461a      	mov	r2, r3
 800d432:	4b24      	ldr	r3, [pc, #144]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d434:	885b      	ldrh	r3, [r3, #2]
 800d436:	3301      	adds	r3, #1
 800d438:	429a      	cmp	r2, r3
 800d43a:	d112      	bne.n	800d462 <Custom_STM_Event_Handler+0x316>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 800d43c:	2301      	movs	r3, #1
 800d43e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_DELAI_WRITE_NO_RESP_EVT;
 800d442:	2301      	movs	r3, #1
 800d444:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	88db      	ldrh	r3, [r3, #6]
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	3308      	adds	r3, #8
 800d454:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800d456:	f107 0308 	add.w	r3, r7, #8
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7ff fafc 	bl	800ca58 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAcqHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 800d460:	e02d      	b.n	800d4be <Custom_STM_Event_Handler+0x372>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAcqHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	885b      	ldrh	r3, [r3, #2]
 800d466:	b29b      	uxth	r3, r3
 800d468:	461a      	mov	r2, r3
 800d46a:	4b16      	ldr	r3, [pc, #88]	@ (800d4c4 <Custom_STM_Event_Handler+0x378>)
 800d46c:	889b      	ldrh	r3, [r3, #4]
 800d46e:	3301      	adds	r3, #1
 800d470:	429a      	cmp	r2, r3
 800d472:	d124      	bne.n	800d4be <Custom_STM_Event_Handler+0x372>
            return_value = SVCCTL_EvtAckFlowEnable;
 800d474:	2301      	movs	r3, #1
 800d476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            Notification.Custom_Evt_Opcode = CUSTOM_STM_ACQ_WRITE_NO_RESP_EVT;
 800d47a:	2303      	movs	r3, #3
 800d47c:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	88db      	ldrh	r3, [r3, #6]
 800d482:	b29b      	uxth	r3, r3
 800d484:	b2db      	uxtb	r3, r3
 800d486:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	3308      	adds	r3, #8
 800d48c:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800d48e:	f107 0308 	add.w	r3, r7, #8
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff fae0 	bl	800ca58 <Custom_STM_App_Notification>
          break;
 800d498:	e011      	b.n	800d4be <Custom_STM_Event_Handler+0x372>
 800d49a:	e010      	b.n	800d4be <Custom_STM_Event_Handler+0x372>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 800d49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49e:	3302      	adds	r3, #2
 800d4a0:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 800d4a2:	231c      	movs	r3, #28
 800d4a4:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 800d4a6:	6a3b      	ldr	r3, [r7, #32]
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
 800d4ac:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 800d4ae:	f107 0308 	add.w	r3, r7, #8
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7ff fad0 	bl	800ca58 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 800d4b8:	e002      	b.n	800d4c0 <Custom_STM_Event_Handler+0x374>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800d4ba:	bf00      	nop
 800d4bc:	e005      	b.n	800d4ca <Custom_STM_Event_Handler+0x37e>
          break;
 800d4be:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d4c0:	e003      	b.n	800d4ca <Custom_STM_Event_Handler+0x37e>
 800d4c2:	bf00      	nop
 800d4c4:	200023bc 	.word	0x200023bc

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800d4c8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800d4ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3730      	adds	r7, #48	@ 0x30
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop

0800d4d8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08c      	sub	sp, #48	@ 0x30
 800d4dc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d4de:	2392      	movs	r3, #146	@ 0x92
 800d4e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800d4e2:	48c8      	ldr	r0, [pc, #800]	@ (800d804 <SVCCTL_InitCustomSvc+0x32c>)
 800d4e4:	f7fd fb2c 	bl	800ab40 <SVCCTL_RegisterSvcHandler>
   *                              = 5
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 5;
 800d4e8:	2305      	movs	r3, #5
 800d4ea:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_CONFIGDATA_UUID(uuid.Char_UUID_128);
 800d4ec:	238f      	movs	r3, #143	@ 0x8f
 800d4ee:	713b      	strb	r3, [r7, #4]
 800d4f0:	23e5      	movs	r3, #229	@ 0xe5
 800d4f2:	717b      	strb	r3, [r7, #5]
 800d4f4:	23b3      	movs	r3, #179	@ 0xb3
 800d4f6:	71bb      	strb	r3, [r7, #6]
 800d4f8:	23d5      	movs	r3, #213	@ 0xd5
 800d4fa:	71fb      	strb	r3, [r7, #7]
 800d4fc:	232e      	movs	r3, #46	@ 0x2e
 800d4fe:	723b      	strb	r3, [r7, #8]
 800d500:	237f      	movs	r3, #127	@ 0x7f
 800d502:	727b      	strb	r3, [r7, #9]
 800d504:	234a      	movs	r3, #74	@ 0x4a
 800d506:	72bb      	strb	r3, [r7, #10]
 800d508:	2398      	movs	r3, #152	@ 0x98
 800d50a:	72fb      	strb	r3, [r7, #11]
 800d50c:	232a      	movs	r3, #42	@ 0x2a
 800d50e:	733b      	strb	r3, [r7, #12]
 800d510:	2348      	movs	r3, #72	@ 0x48
 800d512:	737b      	strb	r3, [r7, #13]
 800d514:	237a      	movs	r3, #122	@ 0x7a
 800d516:	73bb      	strb	r3, [r7, #14]
 800d518:	23cc      	movs	r3, #204	@ 0xcc
 800d51a:	73fb      	strb	r3, [r7, #15]
 800d51c:	23aa      	movs	r3, #170	@ 0xaa
 800d51e:	743b      	strb	r3, [r7, #16]
 800d520:	23aa      	movs	r3, #170	@ 0xaa
 800d522:	747b      	strb	r3, [r7, #17]
 800d524:	2300      	movs	r3, #0
 800d526:	74bb      	strb	r3, [r7, #18]
 800d528:	2300      	movs	r3, #0
 800d52a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d52c:	7dbb      	ldrb	r3, [r7, #22]
 800d52e:	1d39      	adds	r1, r7, #4
 800d530:	4ab5      	ldr	r2, [pc, #724]	@ (800d808 <SVCCTL_InitCustomSvc+0x330>)
 800d532:	9200      	str	r2, [sp, #0]
 800d534:	2201      	movs	r2, #1
 800d536:	2002      	movs	r0, #2
 800d538:	f7fc fd76 	bl	800a028 <aci_gatt_add_service>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomConfigHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d540:	7dfb      	ldrb	r3, [r7, #23]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00f      	beq.n	800d566 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: config, error code: 0x%x \n\r", ret);
 800d546:	48b1      	ldr	r0, [pc, #708]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d548:	f7fe f976 	bl	800b838 <DbgTraceGetFileName>
 800d54c:	4601      	mov	r1, r0
 800d54e:	f240 23a3 	movw	r3, #675	@ 0x2a3
 800d552:	4aaf      	ldr	r2, [pc, #700]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d554:	48af      	ldr	r0, [pc, #700]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d556:	f003 fa87 	bl	8010a68 <iprintf>
 800d55a:	7dfb      	ldrb	r3, [r7, #23]
 800d55c:	4619      	mov	r1, r3
 800d55e:	48ae      	ldr	r0, [pc, #696]	@ (800d818 <SVCCTL_InitCustomSvc+0x340>)
 800d560:	f003 fa82 	bl	8010a68 <iprintf>
 800d564:	e00c      	b.n	800d580 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: config \n\r");
 800d566:	48a9      	ldr	r0, [pc, #676]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d568:	f7fe f966 	bl	800b838 <DbgTraceGetFileName>
 800d56c:	4601      	mov	r1, r0
 800d56e:	f240 23a7 	movw	r3, #679	@ 0x2a7
 800d572:	4aa7      	ldr	r2, [pc, #668]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d574:	48a7      	ldr	r0, [pc, #668]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d576:	f003 fa77 	bl	8010a68 <iprintf>
 800d57a:	48a8      	ldr	r0, [pc, #672]	@ (800d81c <SVCCTL_InitCustomSvc+0x344>)
 800d57c:	f003 fa74 	bl	8010a68 <iprintf>
  }

  /**
   *  delaicharac
   */
  COPY_DELAICHARAC_UUID(uuid.Char_UUID_128);
 800d580:	2319      	movs	r3, #25
 800d582:	713b      	strb	r3, [r7, #4]
 800d584:	23ed      	movs	r3, #237	@ 0xed
 800d586:	717b      	strb	r3, [r7, #5]
 800d588:	2382      	movs	r3, #130	@ 0x82
 800d58a:	71bb      	strb	r3, [r7, #6]
 800d58c:	23ae      	movs	r3, #174	@ 0xae
 800d58e:	71fb      	strb	r3, [r7, #7]
 800d590:	23ed      	movs	r3, #237	@ 0xed
 800d592:	723b      	strb	r3, [r7, #8]
 800d594:	2321      	movs	r3, #33	@ 0x21
 800d596:	727b      	strb	r3, [r7, #9]
 800d598:	234c      	movs	r3, #76	@ 0x4c
 800d59a:	72bb      	strb	r3, [r7, #10]
 800d59c:	239d      	movs	r3, #157	@ 0x9d
 800d59e:	72fb      	strb	r3, [r7, #11]
 800d5a0:	2341      	movs	r3, #65	@ 0x41
 800d5a2:	733b      	strb	r3, [r7, #12]
 800d5a4:	2345      	movs	r3, #69	@ 0x45
 800d5a6:	737b      	strb	r3, [r7, #13]
 800d5a8:	2322      	movs	r3, #34	@ 0x22
 800d5aa:	73bb      	strb	r3, [r7, #14]
 800d5ac:	238e      	movs	r3, #142	@ 0x8e
 800d5ae:	73fb      	strb	r3, [r7, #15]
 800d5b0:	23ab      	movs	r3, #171	@ 0xab
 800d5b2:	743b      	strb	r3, [r7, #16]
 800d5b4:	23aa      	movs	r3, #170	@ 0xaa
 800d5b6:	747b      	strb	r3, [r7, #17]
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	74bb      	strb	r3, [r7, #18]
 800d5bc:	2300      	movs	r3, #0
 800d5be:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomConfigHdle,
 800d5c0:	4b91      	ldr	r3, [pc, #580]	@ (800d808 <SVCCTL_InitCustomSvc+0x330>)
 800d5c2:	8818      	ldrh	r0, [r3, #0]
 800d5c4:	4b96      	ldr	r3, [pc, #600]	@ (800d820 <SVCCTL_InitCustomSvc+0x348>)
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	1d3a      	adds	r2, r7, #4
 800d5ca:	4996      	ldr	r1, [pc, #600]	@ (800d824 <SVCCTL_InitCustomSvc+0x34c>)
 800d5cc:	9105      	str	r1, [sp, #20]
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	9104      	str	r1, [sp, #16]
 800d5d2:	2110      	movs	r1, #16
 800d5d4:	9103      	str	r1, [sp, #12]
 800d5d6:	2101      	movs	r1, #1
 800d5d8:	9102      	str	r1, [sp, #8]
 800d5da:	2100      	movs	r1, #0
 800d5dc:	9101      	str	r1, [sp, #4]
 800d5de:	2106      	movs	r1, #6
 800d5e0:	9100      	str	r1, [sp, #0]
 800d5e2:	2102      	movs	r1, #2
 800d5e4:	f7fc fdf6 	bl	800a1d4 <aci_gatt_add_char>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomDelaiHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d5ec:	7dfb      	ldrb	r3, [r7, #23]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d00f      	beq.n	800d612 <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DELAI, error code: 0x%x \n\r", ret);
 800d5f2:	4886      	ldr	r0, [pc, #536]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d5f4:	f7fe f920 	bl	800b838 <DbgTraceGetFileName>
 800d5f8:	4601      	mov	r1, r0
 800d5fa:	f240 23b9 	movw	r3, #697	@ 0x2b9
 800d5fe:	4a84      	ldr	r2, [pc, #528]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d600:	4884      	ldr	r0, [pc, #528]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d602:	f003 fa31 	bl	8010a68 <iprintf>
 800d606:	7dfb      	ldrb	r3, [r7, #23]
 800d608:	4619      	mov	r1, r3
 800d60a:	4887      	ldr	r0, [pc, #540]	@ (800d828 <SVCCTL_InitCustomSvc+0x350>)
 800d60c:	f003 fa2c 	bl	8010a68 <iprintf>
 800d610:	e00c      	b.n	800d62c <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DELAI \n\r");
 800d612:	487e      	ldr	r0, [pc, #504]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d614:	f7fe f910 	bl	800b838 <DbgTraceGetFileName>
 800d618:	4601      	mov	r1, r0
 800d61a:	f240 23bd 	movw	r3, #701	@ 0x2bd
 800d61e:	4a7c      	ldr	r2, [pc, #496]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d620:	487c      	ldr	r0, [pc, #496]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d622:	f003 fa21 	bl	8010a68 <iprintf>
 800d626:	4881      	ldr	r0, [pc, #516]	@ (800d82c <SVCCTL_InitCustomSvc+0x354>)
 800d628:	f003 fa1e 	bl	8010a68 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  acqcharac
   */
  COPY_ACQCHARAC_UUID(uuid.Char_UUID_128);
 800d62c:	2319      	movs	r3, #25
 800d62e:	713b      	strb	r3, [r7, #4]
 800d630:	23ed      	movs	r3, #237	@ 0xed
 800d632:	717b      	strb	r3, [r7, #5]
 800d634:	2382      	movs	r3, #130	@ 0x82
 800d636:	71bb      	strb	r3, [r7, #6]
 800d638:	23ae      	movs	r3, #174	@ 0xae
 800d63a:	71fb      	strb	r3, [r7, #7]
 800d63c:	23ed      	movs	r3, #237	@ 0xed
 800d63e:	723b      	strb	r3, [r7, #8]
 800d640:	2321      	movs	r3, #33	@ 0x21
 800d642:	727b      	strb	r3, [r7, #9]
 800d644:	234c      	movs	r3, #76	@ 0x4c
 800d646:	72bb      	strb	r3, [r7, #10]
 800d648:	239d      	movs	r3, #157	@ 0x9d
 800d64a:	72fb      	strb	r3, [r7, #11]
 800d64c:	2341      	movs	r3, #65	@ 0x41
 800d64e:	733b      	strb	r3, [r7, #12]
 800d650:	2345      	movs	r3, #69	@ 0x45
 800d652:	737b      	strb	r3, [r7, #13]
 800d654:	2322      	movs	r3, #34	@ 0x22
 800d656:	73bb      	strb	r3, [r7, #14]
 800d658:	238e      	movs	r3, #142	@ 0x8e
 800d65a:	73fb      	strb	r3, [r7, #15]
 800d65c:	23ac      	movs	r3, #172	@ 0xac
 800d65e:	743b      	strb	r3, [r7, #16]
 800d660:	23aa      	movs	r3, #170	@ 0xaa
 800d662:	747b      	strb	r3, [r7, #17]
 800d664:	2300      	movs	r3, #0
 800d666:	74bb      	strb	r3, [r7, #18]
 800d668:	2300      	movs	r3, #0
 800d66a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomConfigHdle,
 800d66c:	4b66      	ldr	r3, [pc, #408]	@ (800d808 <SVCCTL_InitCustomSvc+0x330>)
 800d66e:	8818      	ldrh	r0, [r3, #0]
 800d670:	4b6f      	ldr	r3, [pc, #444]	@ (800d830 <SVCCTL_InitCustomSvc+0x358>)
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	1d3a      	adds	r2, r7, #4
 800d676:	496f      	ldr	r1, [pc, #444]	@ (800d834 <SVCCTL_InitCustomSvc+0x35c>)
 800d678:	9105      	str	r1, [sp, #20]
 800d67a:	2101      	movs	r1, #1
 800d67c:	9104      	str	r1, [sp, #16]
 800d67e:	2110      	movs	r1, #16
 800d680:	9103      	str	r1, [sp, #12]
 800d682:	2101      	movs	r1, #1
 800d684:	9102      	str	r1, [sp, #8]
 800d686:	2100      	movs	r1, #0
 800d688:	9101      	str	r1, [sp, #4]
 800d68a:	2106      	movs	r1, #6
 800d68c:	9100      	str	r1, [sp, #0]
 800d68e:	2102      	movs	r1, #2
 800d690:	f7fc fda0 	bl	800a1d4 <aci_gatt_add_char>
 800d694:	4603      	mov	r3, r0
 800d696:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAcqHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d698:	7dfb      	ldrb	r3, [r7, #23]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00f      	beq.n	800d6be <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACQ, error code: 0x%x \n\r", ret);
 800d69e:	485b      	ldr	r0, [pc, #364]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d6a0:	f7fe f8ca 	bl	800b838 <DbgTraceGetFileName>
 800d6a4:	4601      	mov	r1, r0
 800d6a6:	f240 23d3 	movw	r3, #723	@ 0x2d3
 800d6aa:	4a59      	ldr	r2, [pc, #356]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d6ac:	4859      	ldr	r0, [pc, #356]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d6ae:	f003 f9db 	bl	8010a68 <iprintf>
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	4860      	ldr	r0, [pc, #384]	@ (800d838 <SVCCTL_InitCustomSvc+0x360>)
 800d6b8:	f003 f9d6 	bl	8010a68 <iprintf>
 800d6bc:	e00c      	b.n	800d6d8 <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACQ \n\r");
 800d6be:	4853      	ldr	r0, [pc, #332]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d6c0:	f7fe f8ba 	bl	800b838 <DbgTraceGetFileName>
 800d6c4:	4601      	mov	r1, r0
 800d6c6:	f240 23d7 	movw	r3, #727	@ 0x2d7
 800d6ca:	4a51      	ldr	r2, [pc, #324]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d6cc:	4851      	ldr	r0, [pc, #324]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d6ce:	f003 f9cb 	bl	8010a68 <iprintf>
 800d6d2:	485a      	ldr	r0, [pc, #360]	@ (800d83c <SVCCTL_InitCustomSvc+0x364>)
 800d6d4:	f003 f9c8 	bl	8010a68 <iprintf>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800d6d8:	2304      	movs	r3, #4
 800d6da:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_IADATA_UUID(uuid.Char_UUID_128);
 800d6dc:	238f      	movs	r3, #143	@ 0x8f
 800d6de:	713b      	strb	r3, [r7, #4]
 800d6e0:	23e5      	movs	r3, #229	@ 0xe5
 800d6e2:	717b      	strb	r3, [r7, #5]
 800d6e4:	23b3      	movs	r3, #179	@ 0xb3
 800d6e6:	71bb      	strb	r3, [r7, #6]
 800d6e8:	23d5      	movs	r3, #213	@ 0xd5
 800d6ea:	71fb      	strb	r3, [r7, #7]
 800d6ec:	232e      	movs	r3, #46	@ 0x2e
 800d6ee:	723b      	strb	r3, [r7, #8]
 800d6f0:	237f      	movs	r3, #127	@ 0x7f
 800d6f2:	727b      	strb	r3, [r7, #9]
 800d6f4:	234a      	movs	r3, #74	@ 0x4a
 800d6f6:	72bb      	strb	r3, [r7, #10]
 800d6f8:	2398      	movs	r3, #152	@ 0x98
 800d6fa:	72fb      	strb	r3, [r7, #11]
 800d6fc:	232a      	movs	r3, #42	@ 0x2a
 800d6fe:	733b      	strb	r3, [r7, #12]
 800d700:	2348      	movs	r3, #72	@ 0x48
 800d702:	737b      	strb	r3, [r7, #13]
 800d704:	237a      	movs	r3, #122	@ 0x7a
 800d706:	73bb      	strb	r3, [r7, #14]
 800d708:	23cc      	movs	r3, #204	@ 0xcc
 800d70a:	73fb      	strb	r3, [r7, #15]
 800d70c:	23bb      	movs	r3, #187	@ 0xbb
 800d70e:	743b      	strb	r3, [r7, #16]
 800d710:	23bb      	movs	r3, #187	@ 0xbb
 800d712:	747b      	strb	r3, [r7, #17]
 800d714:	2300      	movs	r3, #0
 800d716:	74bb      	strb	r3, [r7, #18]
 800d718:	2300      	movs	r3, #0
 800d71a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d71c:	7dbb      	ldrb	r3, [r7, #22]
 800d71e:	1d39      	adds	r1, r7, #4
 800d720:	4a47      	ldr	r2, [pc, #284]	@ (800d840 <SVCCTL_InitCustomSvc+0x368>)
 800d722:	9200      	str	r2, [sp, #0]
 800d724:	2201      	movs	r2, #1
 800d726:	2002      	movs	r0, #2
 800d728:	f7fc fc7e 	bl	800a028 <aci_gatt_add_service>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomIaHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d730:	7dfb      	ldrb	r3, [r7, #23]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00f      	beq.n	800d756 <SVCCTL_InitCustomSvc+0x27e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: ia, error code: 0x%x \n\r", ret);
 800d736:	4835      	ldr	r0, [pc, #212]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d738:	f7fe f87e 	bl	800b838 <DbgTraceGetFileName>
 800d73c:	4601      	mov	r1, r0
 800d73e:	f240 23fa 	movw	r3, #762	@ 0x2fa
 800d742:	4a33      	ldr	r2, [pc, #204]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d744:	4833      	ldr	r0, [pc, #204]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d746:	f003 f98f 	bl	8010a68 <iprintf>
 800d74a:	7dfb      	ldrb	r3, [r7, #23]
 800d74c:	4619      	mov	r1, r3
 800d74e:	483d      	ldr	r0, [pc, #244]	@ (800d844 <SVCCTL_InitCustomSvc+0x36c>)
 800d750:	f003 f98a 	bl	8010a68 <iprintf>
 800d754:	e00c      	b.n	800d770 <SVCCTL_InitCustomSvc+0x298>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: ia \n\r");
 800d756:	482d      	ldr	r0, [pc, #180]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d758:	f7fe f86e 	bl	800b838 <DbgTraceGetFileName>
 800d75c:	4601      	mov	r1, r0
 800d75e:	f240 23fe 	movw	r3, #766	@ 0x2fe
 800d762:	4a2b      	ldr	r2, [pc, #172]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d764:	482b      	ldr	r0, [pc, #172]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d766:	f003 f97f 	bl	8010a68 <iprintf>
 800d76a:	4837      	ldr	r0, [pc, #220]	@ (800d848 <SVCCTL_InitCustomSvc+0x370>)
 800d76c:	f003 f97c 	bl	8010a68 <iprintf>
  }

  /**
   *  iacharac
   */
  COPY_IACHARAC_UUID(uuid.Char_UUID_128);
 800d770:	2319      	movs	r3, #25
 800d772:	713b      	strb	r3, [r7, #4]
 800d774:	23ed      	movs	r3, #237	@ 0xed
 800d776:	717b      	strb	r3, [r7, #5]
 800d778:	2382      	movs	r3, #130	@ 0x82
 800d77a:	71bb      	strb	r3, [r7, #6]
 800d77c:	23ae      	movs	r3, #174	@ 0xae
 800d77e:	71fb      	strb	r3, [r7, #7]
 800d780:	23ed      	movs	r3, #237	@ 0xed
 800d782:	723b      	strb	r3, [r7, #8]
 800d784:	2321      	movs	r3, #33	@ 0x21
 800d786:	727b      	strb	r3, [r7, #9]
 800d788:	234c      	movs	r3, #76	@ 0x4c
 800d78a:	72bb      	strb	r3, [r7, #10]
 800d78c:	239d      	movs	r3, #157	@ 0x9d
 800d78e:	72fb      	strb	r3, [r7, #11]
 800d790:	2341      	movs	r3, #65	@ 0x41
 800d792:	733b      	strb	r3, [r7, #12]
 800d794:	2345      	movs	r3, #69	@ 0x45
 800d796:	737b      	strb	r3, [r7, #13]
 800d798:	2322      	movs	r3, #34	@ 0x22
 800d79a:	73bb      	strb	r3, [r7, #14]
 800d79c:	238e      	movs	r3, #142	@ 0x8e
 800d79e:	73fb      	strb	r3, [r7, #15]
 800d7a0:	23ba      	movs	r3, #186	@ 0xba
 800d7a2:	743b      	strb	r3, [r7, #16]
 800d7a4:	23bb      	movs	r3, #187	@ 0xbb
 800d7a6:	747b      	strb	r3, [r7, #17]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	74bb      	strb	r3, [r7, #18]
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomIaHdle,
 800d7b0:	4b15      	ldr	r3, [pc, #84]	@ (800d808 <SVCCTL_InitCustomSvc+0x330>)
 800d7b2:	88d8      	ldrh	r0, [r3, #6]
 800d7b4:	4b25      	ldr	r3, [pc, #148]	@ (800d84c <SVCCTL_InitCustomSvc+0x374>)
 800d7b6:	881b      	ldrh	r3, [r3, #0]
 800d7b8:	1d3a      	adds	r2, r7, #4
 800d7ba:	4925      	ldr	r1, [pc, #148]	@ (800d850 <SVCCTL_InitCustomSvc+0x378>)
 800d7bc:	9105      	str	r1, [sp, #20]
 800d7be:	2101      	movs	r1, #1
 800d7c0:	9104      	str	r1, [sp, #16]
 800d7c2:	2110      	movs	r1, #16
 800d7c4:	9103      	str	r1, [sp, #12]
 800d7c6:	2109      	movs	r1, #9
 800d7c8:	9102      	str	r1, [sp, #8]
 800d7ca:	2100      	movs	r1, #0
 800d7cc:	9101      	str	r1, [sp, #4]
 800d7ce:	2112      	movs	r1, #18
 800d7d0:	9100      	str	r1, [sp, #0]
 800d7d2:	2102      	movs	r1, #2
 800d7d4:	f7fc fcfe 	bl	800a1d4 <aci_gatt_add_char>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomIacHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d03a      	beq.n	800d858 <SVCCTL_InitCustomSvc+0x380>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : IAC, error code: 0x%x \n\r", ret);
 800d7e2:	480a      	ldr	r0, [pc, #40]	@ (800d80c <SVCCTL_InitCustomSvc+0x334>)
 800d7e4:	f7fe f828 	bl	800b838 <DbgTraceGetFileName>
 800d7e8:	4601      	mov	r1, r0
 800d7ea:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800d7ee:	4a08      	ldr	r2, [pc, #32]	@ (800d810 <SVCCTL_InitCustomSvc+0x338>)
 800d7f0:	4808      	ldr	r0, [pc, #32]	@ (800d814 <SVCCTL_InitCustomSvc+0x33c>)
 800d7f2:	f003 f939 	bl	8010a68 <iprintf>
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	4816      	ldr	r0, [pc, #88]	@ (800d854 <SVCCTL_InitCustomSvc+0x37c>)
 800d7fc:	f003 f934 	bl	8010a68 <iprintf>
 800d800:	e037      	b.n	800d872 <SVCCTL_InitCustomSvc+0x39a>
 800d802:	bf00      	nop
 800d804:	0800d14d 	.word	0x0800d14d
 800d808:	200023bc 	.word	0x200023bc
 800d80c:	080148f0 	.word	0x080148f0
 800d810:	080167e0 	.word	0x080167e0
 800d814:	08014910 	.word	0x08014910
 800d818:	08014924 	.word	0x08014924
 800d81c:	0801496c 	.word	0x0801496c
 800d820:	20000052 	.word	0x20000052
 800d824:	200023be 	.word	0x200023be
 800d828:	080149a0 	.word	0x080149a0
 800d82c:	080149e4 	.word	0x080149e4
 800d830:	20000054 	.word	0x20000054
 800d834:	200023c0 	.word	0x200023c0
 800d838:	08014a18 	.word	0x08014a18
 800d83c:	08014a5c 	.word	0x08014a5c
 800d840:	200023c2 	.word	0x200023c2
 800d844:	08014a8c 	.word	0x08014a8c
 800d848:	08014ad0 	.word	0x08014ad0
 800d84c:	20000056 	.word	0x20000056
 800d850:	200023c4 	.word	0x200023c4
 800d854:	08014b00 	.word	0x08014b00
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : IAC \n\r");
 800d858:	48a6      	ldr	r0, [pc, #664]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800d85a:	f7fd ffed 	bl	800b838 <DbgTraceGetFileName>
 800d85e:	4601      	mov	r1, r0
 800d860:	f44f 7345 	mov.w	r3, #788	@ 0x314
 800d864:	4aa4      	ldr	r2, [pc, #656]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800d866:	48a5      	ldr	r0, [pc, #660]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800d868:	f003 f8fe 	bl	8010a68 <iprintf>
 800d86c:	48a4      	ldr	r0, [pc, #656]	@ (800db00 <SVCCTL_InitCustomSvc+0x628>)
 800d86e:	f003 f8fb 	bl	8010a68 <iprintf>
   *                              = 10
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 10;
 800d872:	230a      	movs	r3, #10
 800d874:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_ACCDATA_UUID(uuid.Char_UUID_128);
 800d876:	238f      	movs	r3, #143	@ 0x8f
 800d878:	713b      	strb	r3, [r7, #4]
 800d87a:	23e5      	movs	r3, #229	@ 0xe5
 800d87c:	717b      	strb	r3, [r7, #5]
 800d87e:	23b3      	movs	r3, #179	@ 0xb3
 800d880:	71bb      	strb	r3, [r7, #6]
 800d882:	23d5      	movs	r3, #213	@ 0xd5
 800d884:	71fb      	strb	r3, [r7, #7]
 800d886:	232e      	movs	r3, #46	@ 0x2e
 800d888:	723b      	strb	r3, [r7, #8]
 800d88a:	237f      	movs	r3, #127	@ 0x7f
 800d88c:	727b      	strb	r3, [r7, #9]
 800d88e:	234a      	movs	r3, #74	@ 0x4a
 800d890:	72bb      	strb	r3, [r7, #10]
 800d892:	2398      	movs	r3, #152	@ 0x98
 800d894:	72fb      	strb	r3, [r7, #11]
 800d896:	232a      	movs	r3, #42	@ 0x2a
 800d898:	733b      	strb	r3, [r7, #12]
 800d89a:	2348      	movs	r3, #72	@ 0x48
 800d89c:	737b      	strb	r3, [r7, #13]
 800d89e:	237a      	movs	r3, #122	@ 0x7a
 800d8a0:	73bb      	strb	r3, [r7, #14]
 800d8a2:	23cc      	movs	r3, #204	@ 0xcc
 800d8a4:	73fb      	strb	r3, [r7, #15]
 800d8a6:	23cc      	movs	r3, #204	@ 0xcc
 800d8a8:	743b      	strb	r3, [r7, #16]
 800d8aa:	23cc      	movs	r3, #204	@ 0xcc
 800d8ac:	747b      	strb	r3, [r7, #17]
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	74bb      	strb	r3, [r7, #18]
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800d8b6:	7dbb      	ldrb	r3, [r7, #22]
 800d8b8:	1d39      	adds	r1, r7, #4
 800d8ba:	4a92      	ldr	r2, [pc, #584]	@ (800db04 <SVCCTL_InitCustomSvc+0x62c>)
 800d8bc:	9200      	str	r2, [sp, #0]
 800d8be:	2201      	movs	r2, #1
 800d8c0:	2002      	movs	r0, #2
 800d8c2:	f7fc fbb1 	bl	800a028 <aci_gatt_add_service>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomAccHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d8ca:	7dfb      	ldrb	r3, [r7, #23]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00f      	beq.n	800d8f0 <SVCCTL_InitCustomSvc+0x418>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: acc, error code: 0x%x \n\r", ret);
 800d8d0:	4888      	ldr	r0, [pc, #544]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800d8d2:	f7fd ffb1 	bl	800b838 <DbgTraceGetFileName>
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	f240 333b 	movw	r3, #827	@ 0x33b
 800d8dc:	4a86      	ldr	r2, [pc, #536]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800d8de:	4887      	ldr	r0, [pc, #540]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800d8e0:	f003 f8c2 	bl	8010a68 <iprintf>
 800d8e4:	7dfb      	ldrb	r3, [r7, #23]
 800d8e6:	4619      	mov	r1, r3
 800d8e8:	4887      	ldr	r0, [pc, #540]	@ (800db08 <SVCCTL_InitCustomSvc+0x630>)
 800d8ea:	f003 f8bd 	bl	8010a68 <iprintf>
 800d8ee:	e00c      	b.n	800d90a <SVCCTL_InitCustomSvc+0x432>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: acc \n\r");
 800d8f0:	4880      	ldr	r0, [pc, #512]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800d8f2:	f7fd ffa1 	bl	800b838 <DbgTraceGetFileName>
 800d8f6:	4601      	mov	r1, r0
 800d8f8:	f240 333f 	movw	r3, #831	@ 0x33f
 800d8fc:	4a7e      	ldr	r2, [pc, #504]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800d8fe:	487f      	ldr	r0, [pc, #508]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800d900:	f003 f8b2 	bl	8010a68 <iprintf>
 800d904:	4881      	ldr	r0, [pc, #516]	@ (800db0c <SVCCTL_InitCustomSvc+0x634>)
 800d906:	f003 f8af 	bl	8010a68 <iprintf>
  }

  /**
   *  accxcahrac
   */
  COPY_ACCXCAHRAC_UUID(uuid.Char_UUID_128);
 800d90a:	2319      	movs	r3, #25
 800d90c:	713b      	strb	r3, [r7, #4]
 800d90e:	23ed      	movs	r3, #237	@ 0xed
 800d910:	717b      	strb	r3, [r7, #5]
 800d912:	2382      	movs	r3, #130	@ 0x82
 800d914:	71bb      	strb	r3, [r7, #6]
 800d916:	23ae      	movs	r3, #174	@ 0xae
 800d918:	71fb      	strb	r3, [r7, #7]
 800d91a:	23ed      	movs	r3, #237	@ 0xed
 800d91c:	723b      	strb	r3, [r7, #8]
 800d91e:	2321      	movs	r3, #33	@ 0x21
 800d920:	727b      	strb	r3, [r7, #9]
 800d922:	234c      	movs	r3, #76	@ 0x4c
 800d924:	72bb      	strb	r3, [r7, #10]
 800d926:	239d      	movs	r3, #157	@ 0x9d
 800d928:	72fb      	strb	r3, [r7, #11]
 800d92a:	2341      	movs	r3, #65	@ 0x41
 800d92c:	733b      	strb	r3, [r7, #12]
 800d92e:	2345      	movs	r3, #69	@ 0x45
 800d930:	737b      	strb	r3, [r7, #13]
 800d932:	2322      	movs	r3, #34	@ 0x22
 800d934:	73bb      	strb	r3, [r7, #14]
 800d936:	238e      	movs	r3, #142	@ 0x8e
 800d938:	73fb      	strb	r3, [r7, #15]
 800d93a:	23ca      	movs	r3, #202	@ 0xca
 800d93c:	743b      	strb	r3, [r7, #16]
 800d93e:	23cc      	movs	r3, #204	@ 0xcc
 800d940:	747b      	strb	r3, [r7, #17]
 800d942:	2300      	movs	r3, #0
 800d944:	74bb      	strb	r3, [r7, #18]
 800d946:	2300      	movs	r3, #0
 800d948:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomAccHdle,
 800d94a:	4b71      	ldr	r3, [pc, #452]	@ (800db10 <SVCCTL_InitCustomSvc+0x638>)
 800d94c:	8958      	ldrh	r0, [r3, #10]
 800d94e:	4b71      	ldr	r3, [pc, #452]	@ (800db14 <SVCCTL_InitCustomSvc+0x63c>)
 800d950:	881b      	ldrh	r3, [r3, #0]
 800d952:	1d3a      	adds	r2, r7, #4
 800d954:	4970      	ldr	r1, [pc, #448]	@ (800db18 <SVCCTL_InitCustomSvc+0x640>)
 800d956:	9105      	str	r1, [sp, #20]
 800d958:	2101      	movs	r1, #1
 800d95a:	9104      	str	r1, [sp, #16]
 800d95c:	2110      	movs	r1, #16
 800d95e:	9103      	str	r1, [sp, #12]
 800d960:	2101      	movs	r1, #1
 800d962:	9102      	str	r1, [sp, #8]
 800d964:	2100      	movs	r1, #0
 800d966:	9101      	str	r1, [sp, #4]
 800d968:	2112      	movs	r1, #18
 800d96a:	9100      	str	r1, [sp, #0]
 800d96c:	2102      	movs	r1, #2
 800d96e:	f7fc fc31 	bl	800a1d4 <aci_gatt_add_char>
 800d972:	4603      	mov	r3, r0
 800d974:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAccxHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800d976:	7dfb      	ldrb	r3, [r7, #23]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d00f      	beq.n	800d99c <SVCCTL_InitCustomSvc+0x4c4>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCX, error code: 0x%x \n\r", ret);
 800d97c:	485d      	ldr	r0, [pc, #372]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800d97e:	f7fd ff5b 	bl	800b838 <DbgTraceGetFileName>
 800d982:	4601      	mov	r1, r0
 800d984:	f240 3351 	movw	r3, #849	@ 0x351
 800d988:	4a5b      	ldr	r2, [pc, #364]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800d98a:	485c      	ldr	r0, [pc, #368]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800d98c:	f003 f86c 	bl	8010a68 <iprintf>
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	4619      	mov	r1, r3
 800d994:	4861      	ldr	r0, [pc, #388]	@ (800db1c <SVCCTL_InitCustomSvc+0x644>)
 800d996:	f003 f867 	bl	8010a68 <iprintf>
 800d99a:	e00c      	b.n	800d9b6 <SVCCTL_InitCustomSvc+0x4de>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCX \n\r");
 800d99c:	4855      	ldr	r0, [pc, #340]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800d99e:	f7fd ff4b 	bl	800b838 <DbgTraceGetFileName>
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	f240 3355 	movw	r3, #853	@ 0x355
 800d9a8:	4a53      	ldr	r2, [pc, #332]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800d9aa:	4854      	ldr	r0, [pc, #336]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800d9ac:	f003 f85c 	bl	8010a68 <iprintf>
 800d9b0:	485b      	ldr	r0, [pc, #364]	@ (800db20 <SVCCTL_InitCustomSvc+0x648>)
 800d9b2:	f003 f859 	bl	8010a68 <iprintf>

  /* USER CODE END SVCCTL_Init_Service3_Char1 */
  /**
   *  accycharac
   */
  COPY_ACCYCHARAC_UUID(uuid.Char_UUID_128);
 800d9b6:	2319      	movs	r3, #25
 800d9b8:	713b      	strb	r3, [r7, #4]
 800d9ba:	23ed      	movs	r3, #237	@ 0xed
 800d9bc:	717b      	strb	r3, [r7, #5]
 800d9be:	2382      	movs	r3, #130	@ 0x82
 800d9c0:	71bb      	strb	r3, [r7, #6]
 800d9c2:	23ae      	movs	r3, #174	@ 0xae
 800d9c4:	71fb      	strb	r3, [r7, #7]
 800d9c6:	23ed      	movs	r3, #237	@ 0xed
 800d9c8:	723b      	strb	r3, [r7, #8]
 800d9ca:	2321      	movs	r3, #33	@ 0x21
 800d9cc:	727b      	strb	r3, [r7, #9]
 800d9ce:	234c      	movs	r3, #76	@ 0x4c
 800d9d0:	72bb      	strb	r3, [r7, #10]
 800d9d2:	239d      	movs	r3, #157	@ 0x9d
 800d9d4:	72fb      	strb	r3, [r7, #11]
 800d9d6:	2341      	movs	r3, #65	@ 0x41
 800d9d8:	733b      	strb	r3, [r7, #12]
 800d9da:	2345      	movs	r3, #69	@ 0x45
 800d9dc:	737b      	strb	r3, [r7, #13]
 800d9de:	2322      	movs	r3, #34	@ 0x22
 800d9e0:	73bb      	strb	r3, [r7, #14]
 800d9e2:	238e      	movs	r3, #142	@ 0x8e
 800d9e4:	73fb      	strb	r3, [r7, #15]
 800d9e6:	23cb      	movs	r3, #203	@ 0xcb
 800d9e8:	743b      	strb	r3, [r7, #16]
 800d9ea:	23cc      	movs	r3, #204	@ 0xcc
 800d9ec:	747b      	strb	r3, [r7, #17]
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	74bb      	strb	r3, [r7, #18]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomAccHdle,
 800d9f6:	4b46      	ldr	r3, [pc, #280]	@ (800db10 <SVCCTL_InitCustomSvc+0x638>)
 800d9f8:	8958      	ldrh	r0, [r3, #10]
 800d9fa:	4b4a      	ldr	r3, [pc, #296]	@ (800db24 <SVCCTL_InitCustomSvc+0x64c>)
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	1d3a      	adds	r2, r7, #4
 800da00:	4949      	ldr	r1, [pc, #292]	@ (800db28 <SVCCTL_InitCustomSvc+0x650>)
 800da02:	9105      	str	r1, [sp, #20]
 800da04:	2101      	movs	r1, #1
 800da06:	9104      	str	r1, [sp, #16]
 800da08:	2110      	movs	r1, #16
 800da0a:	9103      	str	r1, [sp, #12]
 800da0c:	2109      	movs	r1, #9
 800da0e:	9102      	str	r1, [sp, #8]
 800da10:	2100      	movs	r1, #0
 800da12:	9101      	str	r1, [sp, #4]
 800da14:	2112      	movs	r1, #18
 800da16:	9100      	str	r1, [sp, #0]
 800da18:	2102      	movs	r1, #2
 800da1a:	f7fc fbdb 	bl	800a1d4 <aci_gatt_add_char>
 800da1e:	4603      	mov	r3, r0
 800da20:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAccyHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800da22:	7dfb      	ldrb	r3, [r7, #23]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00f      	beq.n	800da48 <SVCCTL_InitCustomSvc+0x570>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCY, error code: 0x%x \n\r", ret);
 800da28:	4832      	ldr	r0, [pc, #200]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800da2a:	f7fd ff05 	bl	800b838 <DbgTraceGetFileName>
 800da2e:	4601      	mov	r1, r0
 800da30:	f240 336b 	movw	r3, #875	@ 0x36b
 800da34:	4a30      	ldr	r2, [pc, #192]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800da36:	4831      	ldr	r0, [pc, #196]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800da38:	f003 f816 	bl	8010a68 <iprintf>
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	4619      	mov	r1, r3
 800da40:	483a      	ldr	r0, [pc, #232]	@ (800db2c <SVCCTL_InitCustomSvc+0x654>)
 800da42:	f003 f811 	bl	8010a68 <iprintf>
 800da46:	e00c      	b.n	800da62 <SVCCTL_InitCustomSvc+0x58a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCY \n\r");
 800da48:	482a      	ldr	r0, [pc, #168]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800da4a:	f7fd fef5 	bl	800b838 <DbgTraceGetFileName>
 800da4e:	4601      	mov	r1, r0
 800da50:	f240 336f 	movw	r3, #879	@ 0x36f
 800da54:	4a28      	ldr	r2, [pc, #160]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800da56:	4829      	ldr	r0, [pc, #164]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800da58:	f003 f806 	bl	8010a68 <iprintf>
 800da5c:	4834      	ldr	r0, [pc, #208]	@ (800db30 <SVCCTL_InitCustomSvc+0x658>)
 800da5e:	f003 f803 	bl	8010a68 <iprintf>

  /* USER CODE END SVCCTL_Init_Service3_Char2 */
  /**
   *  acczcharac
   */
  COPY_ACCZCHARAC_UUID(uuid.Char_UUID_128);
 800da62:	2319      	movs	r3, #25
 800da64:	713b      	strb	r3, [r7, #4]
 800da66:	23ed      	movs	r3, #237	@ 0xed
 800da68:	717b      	strb	r3, [r7, #5]
 800da6a:	2382      	movs	r3, #130	@ 0x82
 800da6c:	71bb      	strb	r3, [r7, #6]
 800da6e:	23ae      	movs	r3, #174	@ 0xae
 800da70:	71fb      	strb	r3, [r7, #7]
 800da72:	23ed      	movs	r3, #237	@ 0xed
 800da74:	723b      	strb	r3, [r7, #8]
 800da76:	2321      	movs	r3, #33	@ 0x21
 800da78:	727b      	strb	r3, [r7, #9]
 800da7a:	234c      	movs	r3, #76	@ 0x4c
 800da7c:	72bb      	strb	r3, [r7, #10]
 800da7e:	239d      	movs	r3, #157	@ 0x9d
 800da80:	72fb      	strb	r3, [r7, #11]
 800da82:	2341      	movs	r3, #65	@ 0x41
 800da84:	733b      	strb	r3, [r7, #12]
 800da86:	2345      	movs	r3, #69	@ 0x45
 800da88:	737b      	strb	r3, [r7, #13]
 800da8a:	2322      	movs	r3, #34	@ 0x22
 800da8c:	73bb      	strb	r3, [r7, #14]
 800da8e:	238e      	movs	r3, #142	@ 0x8e
 800da90:	73fb      	strb	r3, [r7, #15]
 800da92:	23cd      	movs	r3, #205	@ 0xcd
 800da94:	743b      	strb	r3, [r7, #16]
 800da96:	23cc      	movs	r3, #204	@ 0xcc
 800da98:	747b      	strb	r3, [r7, #17]
 800da9a:	2300      	movs	r3, #0
 800da9c:	74bb      	strb	r3, [r7, #18]
 800da9e:	2300      	movs	r3, #0
 800daa0:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomAccHdle,
 800daa2:	4b1b      	ldr	r3, [pc, #108]	@ (800db10 <SVCCTL_InitCustomSvc+0x638>)
 800daa4:	8958      	ldrh	r0, [r3, #10]
 800daa6:	4b23      	ldr	r3, [pc, #140]	@ (800db34 <SVCCTL_InitCustomSvc+0x65c>)
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	1d3a      	adds	r2, r7, #4
 800daac:	4922      	ldr	r1, [pc, #136]	@ (800db38 <SVCCTL_InitCustomSvc+0x660>)
 800daae:	9105      	str	r1, [sp, #20]
 800dab0:	2101      	movs	r1, #1
 800dab2:	9104      	str	r1, [sp, #16]
 800dab4:	2110      	movs	r1, #16
 800dab6:	9103      	str	r1, [sp, #12]
 800dab8:	2109      	movs	r1, #9
 800daba:	9102      	str	r1, [sp, #8]
 800dabc:	2100      	movs	r1, #0
 800dabe:	9101      	str	r1, [sp, #4]
 800dac0:	2112      	movs	r1, #18
 800dac2:	9100      	str	r1, [sp, #0]
 800dac4:	2102      	movs	r1, #2
 800dac6:	f7fc fb85 	bl	800a1d4 <aci_gatt_add_char>
 800daca:	4603      	mov	r3, r0
 800dacc:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAcczHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800dace:	7dfb      	ldrb	r3, [r7, #23]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d035      	beq.n	800db40 <SVCCTL_InitCustomSvc+0x668>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCZ, error code: 0x%x \n\r", ret);
 800dad4:	4807      	ldr	r0, [pc, #28]	@ (800daf4 <SVCCTL_InitCustomSvc+0x61c>)
 800dad6:	f7fd feaf 	bl	800b838 <DbgTraceGetFileName>
 800dada:	4601      	mov	r1, r0
 800dadc:	f240 3385 	movw	r3, #901	@ 0x385
 800dae0:	4a05      	ldr	r2, [pc, #20]	@ (800daf8 <SVCCTL_InitCustomSvc+0x620>)
 800dae2:	4806      	ldr	r0, [pc, #24]	@ (800dafc <SVCCTL_InitCustomSvc+0x624>)
 800dae4:	f002 ffc0 	bl	8010a68 <iprintf>
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	4619      	mov	r1, r3
 800daec:	4813      	ldr	r0, [pc, #76]	@ (800db3c <SVCCTL_InitCustomSvc+0x664>)
 800daee:	f002 ffbb 	bl	8010a68 <iprintf>
 800daf2:	e032      	b.n	800db5a <SVCCTL_InitCustomSvc+0x682>
 800daf4:	080148f0 	.word	0x080148f0
 800daf8:	080167e0 	.word	0x080167e0
 800dafc:	08014910 	.word	0x08014910
 800db00:	08014b44 	.word	0x08014b44
 800db04:	200023c6 	.word	0x200023c6
 800db08:	08014b74 	.word	0x08014b74
 800db0c:	08014bb8 	.word	0x08014bb8
 800db10:	200023bc 	.word	0x200023bc
 800db14:	20000058 	.word	0x20000058
 800db18:	200023c8 	.word	0x200023c8
 800db1c:	08014be8 	.word	0x08014be8
 800db20:	08014c2c 	.word	0x08014c2c
 800db24:	2000005a 	.word	0x2000005a
 800db28:	200023ca 	.word	0x200023ca
 800db2c:	08014c60 	.word	0x08014c60
 800db30:	08014ca4 	.word	0x08014ca4
 800db34:	2000005c 	.word	0x2000005c
 800db38:	200023cc 	.word	0x200023cc
 800db3c:	08014cd8 	.word	0x08014cd8
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCZ \n\r");
 800db40:	48a6      	ldr	r0, [pc, #664]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800db42:	f7fd fe79 	bl	800b838 <DbgTraceGetFileName>
 800db46:	4601      	mov	r1, r0
 800db48:	f240 3389 	movw	r3, #905	@ 0x389
 800db4c:	4aa4      	ldr	r2, [pc, #656]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800db4e:	48a5      	ldr	r0, [pc, #660]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800db50:	f002 ff8a 	bl	8010a68 <iprintf>
 800db54:	48a4      	ldr	r0, [pc, #656]	@ (800dde8 <SVCCTL_InitCustomSvc+0x910>)
 800db56:	f002 ff87 	bl	8010a68 <iprintf>
   *                              = 10
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 10;
 800db5a:	230a      	movs	r3, #10
 800db5c:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_GYRDATA_UUID(uuid.Char_UUID_128);
 800db5e:	238f      	movs	r3, #143	@ 0x8f
 800db60:	713b      	strb	r3, [r7, #4]
 800db62:	23e5      	movs	r3, #229	@ 0xe5
 800db64:	717b      	strb	r3, [r7, #5]
 800db66:	23b3      	movs	r3, #179	@ 0xb3
 800db68:	71bb      	strb	r3, [r7, #6]
 800db6a:	23d5      	movs	r3, #213	@ 0xd5
 800db6c:	71fb      	strb	r3, [r7, #7]
 800db6e:	232e      	movs	r3, #46	@ 0x2e
 800db70:	723b      	strb	r3, [r7, #8]
 800db72:	237f      	movs	r3, #127	@ 0x7f
 800db74:	727b      	strb	r3, [r7, #9]
 800db76:	234a      	movs	r3, #74	@ 0x4a
 800db78:	72bb      	strb	r3, [r7, #10]
 800db7a:	2398      	movs	r3, #152	@ 0x98
 800db7c:	72fb      	strb	r3, [r7, #11]
 800db7e:	232a      	movs	r3, #42	@ 0x2a
 800db80:	733b      	strb	r3, [r7, #12]
 800db82:	2348      	movs	r3, #72	@ 0x48
 800db84:	737b      	strb	r3, [r7, #13]
 800db86:	237a      	movs	r3, #122	@ 0x7a
 800db88:	73bb      	strb	r3, [r7, #14]
 800db8a:	23cc      	movs	r3, #204	@ 0xcc
 800db8c:	73fb      	strb	r3, [r7, #15]
 800db8e:	23dd      	movs	r3, #221	@ 0xdd
 800db90:	743b      	strb	r3, [r7, #16]
 800db92:	23dd      	movs	r3, #221	@ 0xdd
 800db94:	747b      	strb	r3, [r7, #17]
 800db96:	2300      	movs	r3, #0
 800db98:	74bb      	strb	r3, [r7, #18]
 800db9a:	2300      	movs	r3, #0
 800db9c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800db9e:	7dbb      	ldrb	r3, [r7, #22]
 800dba0:	1d39      	adds	r1, r7, #4
 800dba2:	4a92      	ldr	r2, [pc, #584]	@ (800ddec <SVCCTL_InitCustomSvc+0x914>)
 800dba4:	9200      	str	r2, [sp, #0]
 800dba6:	2201      	movs	r2, #1
 800dba8:	2002      	movs	r0, #2
 800dbaa:	f7fc fa3d 	bl	800a028 <aci_gatt_add_service>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomGyrHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00f      	beq.n	800dbd8 <SVCCTL_InitCustomSvc+0x700>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: gyr, error code: 0x%x \n\r", ret);
 800dbb8:	4888      	ldr	r0, [pc, #544]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dbba:	f7fd fe3d 	bl	800b838 <DbgTraceGetFileName>
 800dbbe:	4601      	mov	r1, r0
 800dbc0:	f44f 736c 	mov.w	r3, #944	@ 0x3b0
 800dbc4:	4a86      	ldr	r2, [pc, #536]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dbc6:	4887      	ldr	r0, [pc, #540]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dbc8:	f002 ff4e 	bl	8010a68 <iprintf>
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4887      	ldr	r0, [pc, #540]	@ (800ddf0 <SVCCTL_InitCustomSvc+0x918>)
 800dbd2:	f002 ff49 	bl	8010a68 <iprintf>
 800dbd6:	e00c      	b.n	800dbf2 <SVCCTL_InitCustomSvc+0x71a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: gyr \n\r");
 800dbd8:	4880      	ldr	r0, [pc, #512]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dbda:	f7fd fe2d 	bl	800b838 <DbgTraceGetFileName>
 800dbde:	4601      	mov	r1, r0
 800dbe0:	f44f 736d 	mov.w	r3, #948	@ 0x3b4
 800dbe4:	4a7e      	ldr	r2, [pc, #504]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dbe6:	487f      	ldr	r0, [pc, #508]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dbe8:	f002 ff3e 	bl	8010a68 <iprintf>
 800dbec:	4881      	ldr	r0, [pc, #516]	@ (800ddf4 <SVCCTL_InitCustomSvc+0x91c>)
 800dbee:	f002 ff3b 	bl	8010a68 <iprintf>
  }

  /**
   *  gyrxcharac
   */
  COPY_GYRXCHARAC_UUID(uuid.Char_UUID_128);
 800dbf2:	2319      	movs	r3, #25
 800dbf4:	713b      	strb	r3, [r7, #4]
 800dbf6:	23ed      	movs	r3, #237	@ 0xed
 800dbf8:	717b      	strb	r3, [r7, #5]
 800dbfa:	2382      	movs	r3, #130	@ 0x82
 800dbfc:	71bb      	strb	r3, [r7, #6]
 800dbfe:	23ae      	movs	r3, #174	@ 0xae
 800dc00:	71fb      	strb	r3, [r7, #7]
 800dc02:	23ed      	movs	r3, #237	@ 0xed
 800dc04:	723b      	strb	r3, [r7, #8]
 800dc06:	2321      	movs	r3, #33	@ 0x21
 800dc08:	727b      	strb	r3, [r7, #9]
 800dc0a:	234c      	movs	r3, #76	@ 0x4c
 800dc0c:	72bb      	strb	r3, [r7, #10]
 800dc0e:	239d      	movs	r3, #157	@ 0x9d
 800dc10:	72fb      	strb	r3, [r7, #11]
 800dc12:	2341      	movs	r3, #65	@ 0x41
 800dc14:	733b      	strb	r3, [r7, #12]
 800dc16:	2345      	movs	r3, #69	@ 0x45
 800dc18:	737b      	strb	r3, [r7, #13]
 800dc1a:	2322      	movs	r3, #34	@ 0x22
 800dc1c:	73bb      	strb	r3, [r7, #14]
 800dc1e:	238e      	movs	r3, #142	@ 0x8e
 800dc20:	73fb      	strb	r3, [r7, #15]
 800dc22:	23da      	movs	r3, #218	@ 0xda
 800dc24:	743b      	strb	r3, [r7, #16]
 800dc26:	23dd      	movs	r3, #221	@ 0xdd
 800dc28:	747b      	strb	r3, [r7, #17]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	74bb      	strb	r3, [r7, #18]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGyrHdle,
 800dc32:	4b71      	ldr	r3, [pc, #452]	@ (800ddf8 <SVCCTL_InitCustomSvc+0x920>)
 800dc34:	8a58      	ldrh	r0, [r3, #18]
 800dc36:	4b71      	ldr	r3, [pc, #452]	@ (800ddfc <SVCCTL_InitCustomSvc+0x924>)
 800dc38:	881b      	ldrh	r3, [r3, #0]
 800dc3a:	1d3a      	adds	r2, r7, #4
 800dc3c:	4970      	ldr	r1, [pc, #448]	@ (800de00 <SVCCTL_InitCustomSvc+0x928>)
 800dc3e:	9105      	str	r1, [sp, #20]
 800dc40:	2101      	movs	r1, #1
 800dc42:	9104      	str	r1, [sp, #16]
 800dc44:	2110      	movs	r1, #16
 800dc46:	9103      	str	r1, [sp, #12]
 800dc48:	2109      	movs	r1, #9
 800dc4a:	9102      	str	r1, [sp, #8]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	9101      	str	r1, [sp, #4]
 800dc50:	2112      	movs	r1, #18
 800dc52:	9100      	str	r1, [sp, #0]
 800dc54:	2102      	movs	r1, #2
 800dc56:	f7fc fabd 	bl	800a1d4 <aci_gatt_add_char>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGyrxHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00f      	beq.n	800dc84 <SVCCTL_InitCustomSvc+0x7ac>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GYRX, error code: 0x%x \n\r", ret);
 800dc64:	485d      	ldr	r0, [pc, #372]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dc66:	f7fd fde7 	bl	800b838 <DbgTraceGetFileName>
 800dc6a:	4601      	mov	r1, r0
 800dc6c:	f240 33c6 	movw	r3, #966	@ 0x3c6
 800dc70:	4a5b      	ldr	r2, [pc, #364]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dc72:	485c      	ldr	r0, [pc, #368]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dc74:	f002 fef8 	bl	8010a68 <iprintf>
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4861      	ldr	r0, [pc, #388]	@ (800de04 <SVCCTL_InitCustomSvc+0x92c>)
 800dc7e:	f002 fef3 	bl	8010a68 <iprintf>
 800dc82:	e00c      	b.n	800dc9e <SVCCTL_InitCustomSvc+0x7c6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GYRX \n\r");
 800dc84:	4855      	ldr	r0, [pc, #340]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dc86:	f7fd fdd7 	bl	800b838 <DbgTraceGetFileName>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	f240 33ca 	movw	r3, #970	@ 0x3ca
 800dc90:	4a53      	ldr	r2, [pc, #332]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dc92:	4854      	ldr	r0, [pc, #336]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dc94:	f002 fee8 	bl	8010a68 <iprintf>
 800dc98:	485b      	ldr	r0, [pc, #364]	@ (800de08 <SVCCTL_InitCustomSvc+0x930>)
 800dc9a:	f002 fee5 	bl	8010a68 <iprintf>

  /* USER CODE END SVCCTL_Init_Service4_Char1 */
  /**
   *  gyrycharac
   */
  COPY_GYRYCHARAC_UUID(uuid.Char_UUID_128);
 800dc9e:	2319      	movs	r3, #25
 800dca0:	713b      	strb	r3, [r7, #4]
 800dca2:	23ed      	movs	r3, #237	@ 0xed
 800dca4:	717b      	strb	r3, [r7, #5]
 800dca6:	2382      	movs	r3, #130	@ 0x82
 800dca8:	71bb      	strb	r3, [r7, #6]
 800dcaa:	23ae      	movs	r3, #174	@ 0xae
 800dcac:	71fb      	strb	r3, [r7, #7]
 800dcae:	23ed      	movs	r3, #237	@ 0xed
 800dcb0:	723b      	strb	r3, [r7, #8]
 800dcb2:	2321      	movs	r3, #33	@ 0x21
 800dcb4:	727b      	strb	r3, [r7, #9]
 800dcb6:	234c      	movs	r3, #76	@ 0x4c
 800dcb8:	72bb      	strb	r3, [r7, #10]
 800dcba:	239d      	movs	r3, #157	@ 0x9d
 800dcbc:	72fb      	strb	r3, [r7, #11]
 800dcbe:	2341      	movs	r3, #65	@ 0x41
 800dcc0:	733b      	strb	r3, [r7, #12]
 800dcc2:	2345      	movs	r3, #69	@ 0x45
 800dcc4:	737b      	strb	r3, [r7, #13]
 800dcc6:	2322      	movs	r3, #34	@ 0x22
 800dcc8:	73bb      	strb	r3, [r7, #14]
 800dcca:	238e      	movs	r3, #142	@ 0x8e
 800dccc:	73fb      	strb	r3, [r7, #15]
 800dcce:	23db      	movs	r3, #219	@ 0xdb
 800dcd0:	743b      	strb	r3, [r7, #16]
 800dcd2:	23dd      	movs	r3, #221	@ 0xdd
 800dcd4:	747b      	strb	r3, [r7, #17]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	74bb      	strb	r3, [r7, #18]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGyrHdle,
 800dcde:	4b46      	ldr	r3, [pc, #280]	@ (800ddf8 <SVCCTL_InitCustomSvc+0x920>)
 800dce0:	8a58      	ldrh	r0, [r3, #18]
 800dce2:	4b4a      	ldr	r3, [pc, #296]	@ (800de0c <SVCCTL_InitCustomSvc+0x934>)
 800dce4:	881b      	ldrh	r3, [r3, #0]
 800dce6:	1d3a      	adds	r2, r7, #4
 800dce8:	4949      	ldr	r1, [pc, #292]	@ (800de10 <SVCCTL_InitCustomSvc+0x938>)
 800dcea:	9105      	str	r1, [sp, #20]
 800dcec:	2101      	movs	r1, #1
 800dcee:	9104      	str	r1, [sp, #16]
 800dcf0:	2110      	movs	r1, #16
 800dcf2:	9103      	str	r1, [sp, #12]
 800dcf4:	2109      	movs	r1, #9
 800dcf6:	9102      	str	r1, [sp, #8]
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	9101      	str	r1, [sp, #4]
 800dcfc:	2112      	movs	r1, #18
 800dcfe:	9100      	str	r1, [sp, #0]
 800dd00:	2102      	movs	r1, #2
 800dd02:	f7fc fa67 	bl	800a1d4 <aci_gatt_add_char>
 800dd06:	4603      	mov	r3, r0
 800dd08:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGyryHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800dd0a:	7dfb      	ldrb	r3, [r7, #23]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d00f      	beq.n	800dd30 <SVCCTL_InitCustomSvc+0x858>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GYRY, error code: 0x%x \n\r", ret);
 800dd10:	4832      	ldr	r0, [pc, #200]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dd12:	f7fd fd91 	bl	800b838 <DbgTraceGetFileName>
 800dd16:	4601      	mov	r1, r0
 800dd18:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800dd1c:	4a30      	ldr	r2, [pc, #192]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dd1e:	4831      	ldr	r0, [pc, #196]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dd20:	f002 fea2 	bl	8010a68 <iprintf>
 800dd24:	7dfb      	ldrb	r3, [r7, #23]
 800dd26:	4619      	mov	r1, r3
 800dd28:	483a      	ldr	r0, [pc, #232]	@ (800de14 <SVCCTL_InitCustomSvc+0x93c>)
 800dd2a:	f002 fe9d 	bl	8010a68 <iprintf>
 800dd2e:	e00c      	b.n	800dd4a <SVCCTL_InitCustomSvc+0x872>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GYRY \n\r");
 800dd30:	482a      	ldr	r0, [pc, #168]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800dd32:	f7fd fd81 	bl	800b838 <DbgTraceGetFileName>
 800dd36:	4601      	mov	r1, r0
 800dd38:	f44f 7379 	mov.w	r3, #996	@ 0x3e4
 800dd3c:	4a28      	ldr	r2, [pc, #160]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800dd3e:	4829      	ldr	r0, [pc, #164]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800dd40:	f002 fe92 	bl	8010a68 <iprintf>
 800dd44:	4834      	ldr	r0, [pc, #208]	@ (800de18 <SVCCTL_InitCustomSvc+0x940>)
 800dd46:	f002 fe8f 	bl	8010a68 <iprintf>

  /* USER CODE END SVCCTL_Init_Service4_Char2 */
  /**
   *  gyrzcharac
   */
  COPY_GYRZCHARAC_UUID(uuid.Char_UUID_128);
 800dd4a:	2319      	movs	r3, #25
 800dd4c:	713b      	strb	r3, [r7, #4]
 800dd4e:	23ed      	movs	r3, #237	@ 0xed
 800dd50:	717b      	strb	r3, [r7, #5]
 800dd52:	2382      	movs	r3, #130	@ 0x82
 800dd54:	71bb      	strb	r3, [r7, #6]
 800dd56:	23ae      	movs	r3, #174	@ 0xae
 800dd58:	71fb      	strb	r3, [r7, #7]
 800dd5a:	23ed      	movs	r3, #237	@ 0xed
 800dd5c:	723b      	strb	r3, [r7, #8]
 800dd5e:	2321      	movs	r3, #33	@ 0x21
 800dd60:	727b      	strb	r3, [r7, #9]
 800dd62:	234c      	movs	r3, #76	@ 0x4c
 800dd64:	72bb      	strb	r3, [r7, #10]
 800dd66:	239d      	movs	r3, #157	@ 0x9d
 800dd68:	72fb      	strb	r3, [r7, #11]
 800dd6a:	2341      	movs	r3, #65	@ 0x41
 800dd6c:	733b      	strb	r3, [r7, #12]
 800dd6e:	2345      	movs	r3, #69	@ 0x45
 800dd70:	737b      	strb	r3, [r7, #13]
 800dd72:	2322      	movs	r3, #34	@ 0x22
 800dd74:	73bb      	strb	r3, [r7, #14]
 800dd76:	238e      	movs	r3, #142	@ 0x8e
 800dd78:	73fb      	strb	r3, [r7, #15]
 800dd7a:	23dc      	movs	r3, #220	@ 0xdc
 800dd7c:	743b      	strb	r3, [r7, #16]
 800dd7e:	23dd      	movs	r3, #221	@ 0xdd
 800dd80:	747b      	strb	r3, [r7, #17]
 800dd82:	2300      	movs	r3, #0
 800dd84:	74bb      	strb	r3, [r7, #18]
 800dd86:	2300      	movs	r3, #0
 800dd88:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomGyrHdle,
 800dd8a:	4b1b      	ldr	r3, [pc, #108]	@ (800ddf8 <SVCCTL_InitCustomSvc+0x920>)
 800dd8c:	8a58      	ldrh	r0, [r3, #18]
 800dd8e:	4b23      	ldr	r3, [pc, #140]	@ (800de1c <SVCCTL_InitCustomSvc+0x944>)
 800dd90:	881b      	ldrh	r3, [r3, #0]
 800dd92:	1d3a      	adds	r2, r7, #4
 800dd94:	4922      	ldr	r1, [pc, #136]	@ (800de20 <SVCCTL_InitCustomSvc+0x948>)
 800dd96:	9105      	str	r1, [sp, #20]
 800dd98:	2101      	movs	r1, #1
 800dd9a:	9104      	str	r1, [sp, #16]
 800dd9c:	2110      	movs	r1, #16
 800dd9e:	9103      	str	r1, [sp, #12]
 800dda0:	2109      	movs	r1, #9
 800dda2:	9102      	str	r1, [sp, #8]
 800dda4:	2100      	movs	r1, #0
 800dda6:	9101      	str	r1, [sp, #4]
 800dda8:	2112      	movs	r1, #18
 800ddaa:	9100      	str	r1, [sp, #0]
 800ddac:	2102      	movs	r1, #2
 800ddae:	f7fc fa11 	bl	800a1d4 <aci_gatt_add_char>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGyrzHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ddb6:	7dfb      	ldrb	r3, [r7, #23]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d035      	beq.n	800de28 <SVCCTL_InitCustomSvc+0x950>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GYRZ, error code: 0x%x \n\r", ret);
 800ddbc:	4807      	ldr	r0, [pc, #28]	@ (800dddc <SVCCTL_InitCustomSvc+0x904>)
 800ddbe:	f7fd fd3b 	bl	800b838 <DbgTraceGetFileName>
 800ddc2:	4601      	mov	r1, r0
 800ddc4:	f240 33fa 	movw	r3, #1018	@ 0x3fa
 800ddc8:	4a05      	ldr	r2, [pc, #20]	@ (800dde0 <SVCCTL_InitCustomSvc+0x908>)
 800ddca:	4806      	ldr	r0, [pc, #24]	@ (800dde4 <SVCCTL_InitCustomSvc+0x90c>)
 800ddcc:	f002 fe4c 	bl	8010a68 <iprintf>
 800ddd0:	7dfb      	ldrb	r3, [r7, #23]
 800ddd2:	4619      	mov	r1, r3
 800ddd4:	4813      	ldr	r0, [pc, #76]	@ (800de24 <SVCCTL_InitCustomSvc+0x94c>)
 800ddd6:	f002 fe47 	bl	8010a68 <iprintf>
 800ddda:	e032      	b.n	800de42 <SVCCTL_InitCustomSvc+0x96a>
 800dddc:	080148f0 	.word	0x080148f0
 800dde0:	080167e0 	.word	0x080167e0
 800dde4:	08014910 	.word	0x08014910
 800dde8:	08014d1c 	.word	0x08014d1c
 800ddec:	200023ce 	.word	0x200023ce
 800ddf0:	08014d50 	.word	0x08014d50
 800ddf4:	08014d94 	.word	0x08014d94
 800ddf8:	200023bc 	.word	0x200023bc
 800ddfc:	2000005e 	.word	0x2000005e
 800de00:	200023d0 	.word	0x200023d0
 800de04:	08014dc4 	.word	0x08014dc4
 800de08:	08014e08 	.word	0x08014e08
 800de0c:	20000060 	.word	0x20000060
 800de10:	200023d2 	.word	0x200023d2
 800de14:	08014e3c 	.word	0x08014e3c
 800de18:	08014e80 	.word	0x08014e80
 800de1c:	20000062 	.word	0x20000062
 800de20:	200023d4 	.word	0x200023d4
 800de24:	08014eb4 	.word	0x08014eb4
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GYRZ \n\r");
 800de28:	4859      	ldr	r0, [pc, #356]	@ (800df90 <SVCCTL_InitCustomSvc+0xab8>)
 800de2a:	f7fd fd05 	bl	800b838 <DbgTraceGetFileName>
 800de2e:	4601      	mov	r1, r0
 800de30:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800de34:	4a57      	ldr	r2, [pc, #348]	@ (800df94 <SVCCTL_InitCustomSvc+0xabc>)
 800de36:	4858      	ldr	r0, [pc, #352]	@ (800df98 <SVCCTL_InitCustomSvc+0xac0>)
 800de38:	f002 fe16 	bl	8010a68 <iprintf>
 800de3c:	4857      	ldr	r0, [pc, #348]	@ (800df9c <SVCCTL_InitCustomSvc+0xac4>)
 800de3e:	f002 fe13 	bl	8010a68 <iprintf>
   *                              = 4
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 4;
 800de42:	2304      	movs	r3, #4
 800de44:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_TEMPDATA_UUID(uuid.Char_UUID_128);
 800de46:	238f      	movs	r3, #143	@ 0x8f
 800de48:	713b      	strb	r3, [r7, #4]
 800de4a:	23e5      	movs	r3, #229	@ 0xe5
 800de4c:	717b      	strb	r3, [r7, #5]
 800de4e:	23b3      	movs	r3, #179	@ 0xb3
 800de50:	71bb      	strb	r3, [r7, #6]
 800de52:	23d5      	movs	r3, #213	@ 0xd5
 800de54:	71fb      	strb	r3, [r7, #7]
 800de56:	232e      	movs	r3, #46	@ 0x2e
 800de58:	723b      	strb	r3, [r7, #8]
 800de5a:	237f      	movs	r3, #127	@ 0x7f
 800de5c:	727b      	strb	r3, [r7, #9]
 800de5e:	234a      	movs	r3, #74	@ 0x4a
 800de60:	72bb      	strb	r3, [r7, #10]
 800de62:	2398      	movs	r3, #152	@ 0x98
 800de64:	72fb      	strb	r3, [r7, #11]
 800de66:	232a      	movs	r3, #42	@ 0x2a
 800de68:	733b      	strb	r3, [r7, #12]
 800de6a:	2348      	movs	r3, #72	@ 0x48
 800de6c:	737b      	strb	r3, [r7, #13]
 800de6e:	237a      	movs	r3, #122	@ 0x7a
 800de70:	73bb      	strb	r3, [r7, #14]
 800de72:	23cc      	movs	r3, #204	@ 0xcc
 800de74:	73fb      	strb	r3, [r7, #15]
 800de76:	23ee      	movs	r3, #238	@ 0xee
 800de78:	743b      	strb	r3, [r7, #16]
 800de7a:	23ee      	movs	r3, #238	@ 0xee
 800de7c:	747b      	strb	r3, [r7, #17]
 800de7e:	2300      	movs	r3, #0
 800de80:	74bb      	strb	r3, [r7, #18]
 800de82:	2300      	movs	r3, #0
 800de84:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800de86:	7dbb      	ldrb	r3, [r7, #22]
 800de88:	1d39      	adds	r1, r7, #4
 800de8a:	4a45      	ldr	r2, [pc, #276]	@ (800dfa0 <SVCCTL_InitCustomSvc+0xac8>)
 800de8c:	9200      	str	r2, [sp, #0]
 800de8e:	2201      	movs	r2, #1
 800de90:	2002      	movs	r0, #2
 800de92:	f7fc f8c9 	bl	800a028 <aci_gatt_add_service>
 800de96:	4603      	mov	r3, r0
 800de98:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomTempHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800de9a:	7dfb      	ldrb	r3, [r7, #23]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00f      	beq.n	800dec0 <SVCCTL_InitCustomSvc+0x9e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: temp, error code: 0x%x \n\r", ret);
 800dea0:	483b      	ldr	r0, [pc, #236]	@ (800df90 <SVCCTL_InitCustomSvc+0xab8>)
 800dea2:	f7fd fcc9 	bl	800b838 <DbgTraceGetFileName>
 800dea6:	4601      	mov	r1, r0
 800dea8:	f240 4321 	movw	r3, #1057	@ 0x421
 800deac:	4a39      	ldr	r2, [pc, #228]	@ (800df94 <SVCCTL_InitCustomSvc+0xabc>)
 800deae:	483a      	ldr	r0, [pc, #232]	@ (800df98 <SVCCTL_InitCustomSvc+0xac0>)
 800deb0:	f002 fdda 	bl	8010a68 <iprintf>
 800deb4:	7dfb      	ldrb	r3, [r7, #23]
 800deb6:	4619      	mov	r1, r3
 800deb8:	483a      	ldr	r0, [pc, #232]	@ (800dfa4 <SVCCTL_InitCustomSvc+0xacc>)
 800deba:	f002 fdd5 	bl	8010a68 <iprintf>
 800debe:	e00c      	b.n	800deda <SVCCTL_InitCustomSvc+0xa02>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: temp \n\r");
 800dec0:	4833      	ldr	r0, [pc, #204]	@ (800df90 <SVCCTL_InitCustomSvc+0xab8>)
 800dec2:	f7fd fcb9 	bl	800b838 <DbgTraceGetFileName>
 800dec6:	4601      	mov	r1, r0
 800dec8:	f240 4325 	movw	r3, #1061	@ 0x425
 800decc:	4a31      	ldr	r2, [pc, #196]	@ (800df94 <SVCCTL_InitCustomSvc+0xabc>)
 800dece:	4832      	ldr	r0, [pc, #200]	@ (800df98 <SVCCTL_InitCustomSvc+0xac0>)
 800ded0:	f002 fdca 	bl	8010a68 <iprintf>
 800ded4:	4834      	ldr	r0, [pc, #208]	@ (800dfa8 <SVCCTL_InitCustomSvc+0xad0>)
 800ded6:	f002 fdc7 	bl	8010a68 <iprintf>
  }

  /**
   *  tempcharac
   */
  COPY_TEMPCHARAC_UUID(uuid.Char_UUID_128);
 800deda:	2319      	movs	r3, #25
 800dedc:	713b      	strb	r3, [r7, #4]
 800dede:	23ed      	movs	r3, #237	@ 0xed
 800dee0:	717b      	strb	r3, [r7, #5]
 800dee2:	2382      	movs	r3, #130	@ 0x82
 800dee4:	71bb      	strb	r3, [r7, #6]
 800dee6:	23ae      	movs	r3, #174	@ 0xae
 800dee8:	71fb      	strb	r3, [r7, #7]
 800deea:	23ed      	movs	r3, #237	@ 0xed
 800deec:	723b      	strb	r3, [r7, #8]
 800deee:	2321      	movs	r3, #33	@ 0x21
 800def0:	727b      	strb	r3, [r7, #9]
 800def2:	234c      	movs	r3, #76	@ 0x4c
 800def4:	72bb      	strb	r3, [r7, #10]
 800def6:	239d      	movs	r3, #157	@ 0x9d
 800def8:	72fb      	strb	r3, [r7, #11]
 800defa:	2341      	movs	r3, #65	@ 0x41
 800defc:	733b      	strb	r3, [r7, #12]
 800defe:	2345      	movs	r3, #69	@ 0x45
 800df00:	737b      	strb	r3, [r7, #13]
 800df02:	2322      	movs	r3, #34	@ 0x22
 800df04:	73bb      	strb	r3, [r7, #14]
 800df06:	238e      	movs	r3, #142	@ 0x8e
 800df08:	73fb      	strb	r3, [r7, #15]
 800df0a:	23ea      	movs	r3, #234	@ 0xea
 800df0c:	743b      	strb	r3, [r7, #16]
 800df0e:	23ee      	movs	r3, #238	@ 0xee
 800df10:	747b      	strb	r3, [r7, #17]
 800df12:	2300      	movs	r3, #0
 800df14:	74bb      	strb	r3, [r7, #18]
 800df16:	2300      	movs	r3, #0
 800df18:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomTempHdle,
 800df1a:	4b24      	ldr	r3, [pc, #144]	@ (800dfac <SVCCTL_InitCustomSvc+0xad4>)
 800df1c:	8b58      	ldrh	r0, [r3, #26]
 800df1e:	4b24      	ldr	r3, [pc, #144]	@ (800dfb0 <SVCCTL_InitCustomSvc+0xad8>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	1d3a      	adds	r2, r7, #4
 800df24:	4923      	ldr	r1, [pc, #140]	@ (800dfb4 <SVCCTL_InitCustomSvc+0xadc>)
 800df26:	9105      	str	r1, [sp, #20]
 800df28:	2101      	movs	r1, #1
 800df2a:	9104      	str	r1, [sp, #16]
 800df2c:	2110      	movs	r1, #16
 800df2e:	9103      	str	r1, [sp, #12]
 800df30:	2109      	movs	r1, #9
 800df32:	9102      	str	r1, [sp, #8]
 800df34:	2100      	movs	r1, #0
 800df36:	9101      	str	r1, [sp, #4]
 800df38:	2112      	movs	r1, #18
 800df3a:	9100      	str	r1, [sp, #0]
 800df3c:	2102      	movs	r1, #2
 800df3e:	f7fc f949 	bl	800a1d4 <aci_gatt_add_char>
 800df42:	4603      	mov	r3, r0
 800df44:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_NOTIFICATION_COMPLETION,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomTempcHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800df46:	7dfb      	ldrb	r3, [r7, #23]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00f      	beq.n	800df6c <SVCCTL_InitCustomSvc+0xa94>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : TEMPC, error code: 0x%x \n\r", ret);
 800df4c:	4810      	ldr	r0, [pc, #64]	@ (800df90 <SVCCTL_InitCustomSvc+0xab8>)
 800df4e:	f7fd fc73 	bl	800b838 <DbgTraceGetFileName>
 800df52:	4601      	mov	r1, r0
 800df54:	f240 4337 	movw	r3, #1079	@ 0x437
 800df58:	4a0e      	ldr	r2, [pc, #56]	@ (800df94 <SVCCTL_InitCustomSvc+0xabc>)
 800df5a:	480f      	ldr	r0, [pc, #60]	@ (800df98 <SVCCTL_InitCustomSvc+0xac0>)
 800df5c:	f002 fd84 	bl	8010a68 <iprintf>
 800df60:	7dfb      	ldrb	r3, [r7, #23]
 800df62:	4619      	mov	r1, r3
 800df64:	4814      	ldr	r0, [pc, #80]	@ (800dfb8 <SVCCTL_InitCustomSvc+0xae0>)
 800df66:	f002 fd7f 	bl	8010a68 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800df6a:	e00d      	b.n	800df88 <SVCCTL_InitCustomSvc+0xab0>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : TEMPC \n\r");
 800df6c:	4808      	ldr	r0, [pc, #32]	@ (800df90 <SVCCTL_InitCustomSvc+0xab8>)
 800df6e:	f7fd fc63 	bl	800b838 <DbgTraceGetFileName>
 800df72:	4601      	mov	r1, r0
 800df74:	f240 433b 	movw	r3, #1083	@ 0x43b
 800df78:	4a06      	ldr	r2, [pc, #24]	@ (800df94 <SVCCTL_InitCustomSvc+0xabc>)
 800df7a:	4807      	ldr	r0, [pc, #28]	@ (800df98 <SVCCTL_InitCustomSvc+0xac0>)
 800df7c:	f002 fd74 	bl	8010a68 <iprintf>
 800df80:	480e      	ldr	r0, [pc, #56]	@ (800dfbc <SVCCTL_InitCustomSvc+0xae4>)
 800df82:	f002 fd71 	bl	8010a68 <iprintf>
  return;
 800df86:	bf00      	nop
}
 800df88:	3718      	adds	r7, #24
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
 800df8e:	bf00      	nop
 800df90:	080148f0 	.word	0x080148f0
 800df94:	080167e0 	.word	0x080167e0
 800df98:	08014910 	.word	0x08014910
 800df9c:	08014ef8 	.word	0x08014ef8
 800dfa0:	200023d6 	.word	0x200023d6
 800dfa4:	08014f2c 	.word	0x08014f2c
 800dfa8:	08014f70 	.word	0x08014f70
 800dfac:	200023bc 	.word	0x200023bc
 800dfb0:	20000064 	.word	0x20000064
 800dfb4:	200023d8 	.word	0x200023d8
 800dfb8:	08014fa4 	.word	0x08014fa4
 800dfbc:	08014fe8 	.word	0x08014fe8

0800dfc0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b086      	sub	sp, #24
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	6039      	str	r1, [r7, #0]
 800dfca:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800dfcc:	2392      	movs	r3, #146	@ 0x92
 800dfce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800dfd0:	79fb      	ldrb	r3, [r7, #7]
 800dfd2:	2b09      	cmp	r3, #9
 800dfd4:	f200 8280 	bhi.w	800e4d8 <Custom_STM_App_Update_Char+0x518>
 800dfd8:	a201      	add	r2, pc, #4	@ (adr r2, 800dfe0 <Custom_STM_App_Update_Char+0x20>)
 800dfda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfde:	bf00      	nop
 800dfe0:	0800e009 	.word	0x0800e009
 800dfe4:	0800e107 	.word	0x0800e107
 800dfe8:	0800e187 	.word	0x0800e187
 800dfec:	0800e1e7 	.word	0x0800e1e7
 800dff0:	0800e247 	.word	0x0800e247
 800dff4:	0800e2f9 	.word	0x0800e2f9
 800dff8:	0800e359 	.word	0x0800e359
 800dffc:	0800e3b9 	.word	0x0800e3b9
 800e000:	0800e419 	.word	0x0800e419
 800e004:	0800e479 	.word	0x0800e479
  {

    case CUSTOM_STM_DELAI:
      ret = aci_gatt_update_char_value(CustomContext.CustomConfigHdle,
 800e008:	4ba0      	ldr	r3, [pc, #640]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e00a:	8818      	ldrh	r0, [r3, #0]
 800e00c:	4b9f      	ldr	r3, [pc, #636]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e00e:	8859      	ldrh	r1, [r3, #2]
 800e010:	4b9f      	ldr	r3, [pc, #636]	@ (800e290 <Custom_STM_App_Update_Char+0x2d0>)
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	b2da      	uxtb	r2, r3
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	4613      	mov	r3, r2
 800e01c:	2200      	movs	r2, #0
 800e01e:	f7fc f9e1 	bl	800a3e4 <aci_gatt_update_char_value>
 800e022:	4603      	mov	r3, r0
 800e024:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDelaiHdle,
                                       0, /* charValOffset */
                                       SizeDelai, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e026:	7bfb      	ldrb	r3, [r7, #15]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00f      	beq.n	800e04c <Custom_STM_App_Update_Char+0x8c>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DELAI command, result : 0x%x \n\r", ret);
 800e02c:	4899      	ldr	r0, [pc, #612]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e02e:	f7fd fc03 	bl	800b838 <DbgTraceGetFileName>
 800e032:	4601      	mov	r1, r0
 800e034:	f240 4362 	movw	r3, #1122	@ 0x462
 800e038:	4a97      	ldr	r2, [pc, #604]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e03a:	4898      	ldr	r0, [pc, #608]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e03c:	f002 fd14 	bl	8010a68 <iprintf>
 800e040:	7bfb      	ldrb	r3, [r7, #15]
 800e042:	4619      	mov	r1, r3
 800e044:	4896      	ldr	r0, [pc, #600]	@ (800e2a0 <Custom_STM_App_Update_Char+0x2e0>)
 800e046:	f002 fd0f 	bl	8010a68 <iprintf>
 800e04a:	e00c      	b.n	800e066 <Custom_STM_App_Update_Char+0xa6>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DELAI command\n\r");
 800e04c:	4891      	ldr	r0, [pc, #580]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e04e:	f7fd fbf3 	bl	800b838 <DbgTraceGetFileName>
 800e052:	4601      	mov	r1, r0
 800e054:	f240 4366 	movw	r3, #1126	@ 0x466
 800e058:	4a8f      	ldr	r2, [pc, #572]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e05a:	4890      	ldr	r0, [pc, #576]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e05c:	f002 fd04 	bl	8010a68 <iprintf>
 800e060:	4890      	ldr	r0, [pc, #576]	@ (800e2a4 <Custom_STM_App_Update_Char+0x2e4>)
 800e062:	f002 fd01 	bl	8010a68 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/
      if(pPayload[0] == 0x01) {
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d103      	bne.n	800e076 <Custom_STM_App_Update_Char+0xb6>
          	  delai = 100;
 800e06e:	4b8e      	ldr	r3, [pc, #568]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e070:	2264      	movs	r2, #100	@ 0x64
 800e072:	601a      	str	r2, [r3, #0]
    	  delai = 900;
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 800e074:	e232      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x02){
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d103      	bne.n	800e086 <Custom_STM_App_Update_Char+0xc6>
    	  delai = 200;
 800e07e:	4b8a      	ldr	r3, [pc, #552]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e080:	22c8      	movs	r2, #200	@ 0xc8
 800e082:	601a      	str	r2, [r3, #0]
      break;
 800e084:	e22a      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x03){
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d104      	bne.n	800e098 <Custom_STM_App_Update_Char+0xd8>
    	  delai = 300;
 800e08e:	4b86      	ldr	r3, [pc, #536]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e090:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800e094:	601a      	str	r2, [r3, #0]
      break;
 800e096:	e221      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x04){
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b04      	cmp	r3, #4
 800e09e:	d104      	bne.n	800e0aa <Custom_STM_App_Update_Char+0xea>
    	  delai = 400;
 800e0a0:	4b81      	ldr	r3, [pc, #516]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0a2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e0a6:	601a      	str	r2, [r3, #0]
      break;
 800e0a8:	e218      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x05){
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b05      	cmp	r3, #5
 800e0b0:	d104      	bne.n	800e0bc <Custom_STM_App_Update_Char+0xfc>
    	  delai = 500;
 800e0b2:	4b7d      	ldr	r3, [pc, #500]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800e0b8:	601a      	str	r2, [r3, #0]
      break;
 800e0ba:	e20f      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x06){
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	781b      	ldrb	r3, [r3, #0]
 800e0c0:	2b06      	cmp	r3, #6
 800e0c2:	d104      	bne.n	800e0ce <Custom_STM_App_Update_Char+0x10e>
    	  delai = 600;
 800e0c4:	4b78      	ldr	r3, [pc, #480]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0c6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800e0ca:	601a      	str	r2, [r3, #0]
      break;
 800e0cc:	e206      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x07){
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	2b07      	cmp	r3, #7
 800e0d4:	d104      	bne.n	800e0e0 <Custom_STM_App_Update_Char+0x120>
    	  delai = 700;
 800e0d6:	4b74      	ldr	r3, [pc, #464]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0d8:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 800e0dc:	601a      	str	r2, [r3, #0]
      break;
 800e0de:	e1fd      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x08){
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	2b08      	cmp	r3, #8
 800e0e6:	d104      	bne.n	800e0f2 <Custom_STM_App_Update_Char+0x132>
    	  delai = 800;
 800e0e8:	4b6f      	ldr	r3, [pc, #444]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0ea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800e0ee:	601a      	str	r2, [r3, #0]
      break;
 800e0f0:	e1f4      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>
      else if(pPayload[0] == 0x09){
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	2b09      	cmp	r3, #9
 800e0f8:	f040 81f0 	bne.w	800e4dc <Custom_STM_App_Update_Char+0x51c>
    	  delai = 900;
 800e0fc:	4b6a      	ldr	r3, [pc, #424]	@ (800e2a8 <Custom_STM_App_Update_Char+0x2e8>)
 800e0fe:	f44f 7261 	mov.w	r2, #900	@ 0x384
 800e102:	601a      	str	r2, [r3, #0]
      break;
 800e104:	e1ea      	b.n	800e4dc <Custom_STM_App_Update_Char+0x51c>

    case CUSTOM_STM_ACQ:
      ret = aci_gatt_update_char_value(CustomContext.CustomConfigHdle,
 800e106:	4b61      	ldr	r3, [pc, #388]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e108:	8818      	ldrh	r0, [r3, #0]
 800e10a:	4b60      	ldr	r3, [pc, #384]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e10c:	8899      	ldrh	r1, [r3, #4]
 800e10e:	4b67      	ldr	r3, [pc, #412]	@ (800e2ac <Custom_STM_App_Update_Char+0x2ec>)
 800e110:	881b      	ldrh	r3, [r3, #0]
 800e112:	b2da      	uxtb	r2, r3
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	4613      	mov	r3, r2
 800e11a:	2200      	movs	r2, #0
 800e11c:	f7fc f962 	bl	800a3e4 <aci_gatt_update_char_value>
 800e120:	4603      	mov	r3, r0
 800e122:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAcqHdle,
                                       0, /* charValOffset */
                                       SizeAcq, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e124:	7bfb      	ldrb	r3, [r7, #15]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00f      	beq.n	800e14a <Custom_STM_App_Update_Char+0x18a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACQ command, result : 0x%x \n\r", ret);
 800e12a:	485a      	ldr	r0, [pc, #360]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e12c:	f7fd fb84 	bl	800b838 <DbgTraceGetFileName>
 800e130:	4601      	mov	r1, r0
 800e132:	f240 4391 	movw	r3, #1169	@ 0x491
 800e136:	4a58      	ldr	r2, [pc, #352]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e138:	4858      	ldr	r0, [pc, #352]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e13a:	f002 fc95 	bl	8010a68 <iprintf>
 800e13e:	7bfb      	ldrb	r3, [r7, #15]
 800e140:	4619      	mov	r1, r3
 800e142:	485b      	ldr	r0, [pc, #364]	@ (800e2b0 <Custom_STM_App_Update_Char+0x2f0>)
 800e144:	f002 fc90 	bl	8010a68 <iprintf>
 800e148:	e00c      	b.n	800e164 <Custom_STM_App_Update_Char+0x1a4>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACQ command\n\r");
 800e14a:	4852      	ldr	r0, [pc, #328]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e14c:	f7fd fb74 	bl	800b838 <DbgTraceGetFileName>
 800e150:	4601      	mov	r1, r0
 800e152:	f240 4395 	movw	r3, #1173	@ 0x495
 800e156:	4a50      	ldr	r2, [pc, #320]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e158:	4850      	ldr	r0, [pc, #320]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e15a:	f002 fc85 	bl	8010a68 <iprintf>
 800e15e:	4855      	ldr	r0, [pc, #340]	@ (800e2b4 <Custom_STM_App_Update_Char+0x2f4>)
 800e160:	f002 fc82 	bl	8010a68 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/
      if(pPayload[0] == 0x10) {
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	2b10      	cmp	r3, #16
 800e16a:	d103      	bne.n	800e174 <Custom_STM_App_Update_Char+0x1b4>
          	  acq = 1;
 800e16c:	4b52      	ldr	r3, [pc, #328]	@ (800e2b8 <Custom_STM_App_Update_Char+0x2f8>)
 800e16e:	2201      	movs	r2, #1
 800e170:	601a      	str	r2, [r3, #0]
            }
      else if (pPayload[0] == 0x20){
    	  acq = 0;
      }
      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 800e172:	e1b5      	b.n	800e4e0 <Custom_STM_App_Update_Char+0x520>
      else if (pPayload[0] == 0x20){
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2b20      	cmp	r3, #32
 800e17a:	f040 81b1 	bne.w	800e4e0 <Custom_STM_App_Update_Char+0x520>
    	  acq = 0;
 800e17e:	4b4e      	ldr	r3, [pc, #312]	@ (800e2b8 <Custom_STM_App_Update_Char+0x2f8>)
 800e180:	2200      	movs	r2, #0
 800e182:	601a      	str	r2, [r3, #0]
      break;
 800e184:	e1ac      	b.n	800e4e0 <Custom_STM_App_Update_Char+0x520>

    case CUSTOM_STM_IAC:
      ret = aci_gatt_update_char_value(CustomContext.CustomIaHdle,
 800e186:	4b41      	ldr	r3, [pc, #260]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e188:	88d8      	ldrh	r0, [r3, #6]
 800e18a:	4b40      	ldr	r3, [pc, #256]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e18c:	8919      	ldrh	r1, [r3, #8]
 800e18e:	4b4b      	ldr	r3, [pc, #300]	@ (800e2bc <Custom_STM_App_Update_Char+0x2fc>)
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	b2da      	uxtb	r2, r3
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	4613      	mov	r3, r2
 800e19a:	2200      	movs	r2, #0
 800e19c:	f7fc f922 	bl	800a3e4 <aci_gatt_update_char_value>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomIacHdle,
                                       0, /* charValOffset */
                                       SizeIac, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e1a4:	7bfb      	ldrb	r3, [r7, #15]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00f      	beq.n	800e1ca <Custom_STM_App_Update_Char+0x20a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value IAC command, result : 0x%x \n\r", ret);
 800e1aa:	483a      	ldr	r0, [pc, #232]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e1ac:	f7fd fb44 	bl	800b838 <DbgTraceGetFileName>
 800e1b0:	4601      	mov	r1, r0
 800e1b2:	f240 43a9 	movw	r3, #1193	@ 0x4a9
 800e1b6:	4a38      	ldr	r2, [pc, #224]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e1b8:	4838      	ldr	r0, [pc, #224]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e1ba:	f002 fc55 	bl	8010a68 <iprintf>
 800e1be:	7bfb      	ldrb	r3, [r7, #15]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	483f      	ldr	r0, [pc, #252]	@ (800e2c0 <Custom_STM_App_Update_Char+0x300>)
 800e1c4:	f002 fc50 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IAC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800e1c8:	e18b      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value IAC command\n\r");
 800e1ca:	4832      	ldr	r0, [pc, #200]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e1cc:	f7fd fb34 	bl	800b838 <DbgTraceGetFileName>
 800e1d0:	4601      	mov	r1, r0
 800e1d2:	f240 43ad 	movw	r3, #1197	@ 0x4ad
 800e1d6:	4a30      	ldr	r2, [pc, #192]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e1d8:	4830      	ldr	r0, [pc, #192]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e1da:	f002 fc45 	bl	8010a68 <iprintf>
 800e1de:	4839      	ldr	r0, [pc, #228]	@ (800e2c4 <Custom_STM_App_Update_Char+0x304>)
 800e1e0:	f002 fc42 	bl	8010a68 <iprintf>
      break;
 800e1e4:	e17d      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_ACCX:
      ret = aci_gatt_update_char_value(CustomContext.CustomAccHdle,
 800e1e6:	4b29      	ldr	r3, [pc, #164]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e1e8:	8958      	ldrh	r0, [r3, #10]
 800e1ea:	4b28      	ldr	r3, [pc, #160]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e1ec:	8999      	ldrh	r1, [r3, #12]
 800e1ee:	4b36      	ldr	r3, [pc, #216]	@ (800e2c8 <Custom_STM_App_Update_Char+0x308>)
 800e1f0:	881b      	ldrh	r3, [r3, #0]
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	9300      	str	r3, [sp, #0]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	2200      	movs	r2, #0
 800e1fc:	f7fc f8f2 	bl	800a3e4 <aci_gatt_update_char_value>
 800e200:	4603      	mov	r3, r0
 800e202:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccxHdle,
                                       0, /* charValOffset */
                                       SizeAccx, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e204:	7bfb      	ldrb	r3, [r7, #15]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00f      	beq.n	800e22a <Custom_STM_App_Update_Char+0x26a>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCX command, result : 0x%x \n\r", ret);
 800e20a:	4822      	ldr	r0, [pc, #136]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e20c:	f7fd fb14 	bl	800b838 <DbgTraceGetFileName>
 800e210:	4601      	mov	r1, r0
 800e212:	f240 43bc 	movw	r3, #1212	@ 0x4bc
 800e216:	4a20      	ldr	r2, [pc, #128]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e218:	4820      	ldr	r0, [pc, #128]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e21a:	f002 fc25 	bl	8010a68 <iprintf>
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	4619      	mov	r1, r3
 800e222:	482a      	ldr	r0, [pc, #168]	@ (800e2cc <Custom_STM_App_Update_Char+0x30c>)
 800e224:	f002 fc20 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCX command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_1*/
      break;
 800e228:	e15b      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCX command\n\r");
 800e22a:	481a      	ldr	r0, [pc, #104]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e22c:	f7fd fb04 	bl	800b838 <DbgTraceGetFileName>
 800e230:	4601      	mov	r1, r0
 800e232:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800e236:	4a18      	ldr	r2, [pc, #96]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e238:	4818      	ldr	r0, [pc, #96]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e23a:	f002 fc15 	bl	8010a68 <iprintf>
 800e23e:	4824      	ldr	r0, [pc, #144]	@ (800e2d0 <Custom_STM_App_Update_Char+0x310>)
 800e240:	f002 fc12 	bl	8010a68 <iprintf>
      break;
 800e244:	e14d      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_ACCY:
      ret = aci_gatt_update_char_value(CustomContext.CustomAccHdle,
 800e246:	4b11      	ldr	r3, [pc, #68]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e248:	8958      	ldrh	r0, [r3, #10]
 800e24a:	4b10      	ldr	r3, [pc, #64]	@ (800e28c <Custom_STM_App_Update_Char+0x2cc>)
 800e24c:	89d9      	ldrh	r1, [r3, #14]
 800e24e:	4b21      	ldr	r3, [pc, #132]	@ (800e2d4 <Custom_STM_App_Update_Char+0x314>)
 800e250:	881b      	ldrh	r3, [r3, #0]
 800e252:	b2da      	uxtb	r2, r3
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	4613      	mov	r3, r2
 800e25a:	2200      	movs	r2, #0
 800e25c:	f7fc f8c2 	bl	800a3e4 <aci_gatt_update_char_value>
 800e260:	4603      	mov	r3, r0
 800e262:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccyHdle,
                                       0, /* charValOffset */
                                       SizeAccy, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e264:	7bfb      	ldrb	r3, [r7, #15]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d038      	beq.n	800e2dc <Custom_STM_App_Update_Char+0x31c>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCY command, result : 0x%x \n\r", ret);
 800e26a:	480a      	ldr	r0, [pc, #40]	@ (800e294 <Custom_STM_App_Update_Char+0x2d4>)
 800e26c:	f7fd fae4 	bl	800b838 <DbgTraceGetFileName>
 800e270:	4601      	mov	r1, r0
 800e272:	f240 43cf 	movw	r3, #1231	@ 0x4cf
 800e276:	4a08      	ldr	r2, [pc, #32]	@ (800e298 <Custom_STM_App_Update_Char+0x2d8>)
 800e278:	4808      	ldr	r0, [pc, #32]	@ (800e29c <Custom_STM_App_Update_Char+0x2dc>)
 800e27a:	f002 fbf5 	bl	8010a68 <iprintf>
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
 800e280:	4619      	mov	r1, r3
 800e282:	4815      	ldr	r0, [pc, #84]	@ (800e2d8 <Custom_STM_App_Update_Char+0x318>)
 800e284:	f002 fbf0 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCY command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_2*/
      break;
 800e288:	e12b      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
 800e28a:	bf00      	nop
 800e28c:	200023bc 	.word	0x200023bc
 800e290:	20000052 	.word	0x20000052
 800e294:	080148f0 	.word	0x080148f0
 800e298:	080167f8 	.word	0x080167f8
 800e29c:	08014910 	.word	0x08014910
 800e2a0:	0801501c 	.word	0x0801501c
 800e2a4:	08015064 	.word	0x08015064
 800e2a8:	200023b4 	.word	0x200023b4
 800e2ac:	20000054 	.word	0x20000054
 800e2b0:	0801509c 	.word	0x0801509c
 800e2b4:	080150e0 	.word	0x080150e0
 800e2b8:	200023b8 	.word	0x200023b8
 800e2bc:	20000056 	.word	0x20000056
 800e2c0:	08015114 	.word	0x08015114
 800e2c4:	08015158 	.word	0x08015158
 800e2c8:	20000058 	.word	0x20000058
 800e2cc:	0801518c 	.word	0x0801518c
 800e2d0:	080151d4 	.word	0x080151d4
 800e2d4:	2000005a 	.word	0x2000005a
 800e2d8:	0801520c 	.word	0x0801520c
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCY command\n\r");
 800e2dc:	4883      	ldr	r0, [pc, #524]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e2de:	f7fd faab 	bl	800b838 <DbgTraceGetFileName>
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	f240 43d3 	movw	r3, #1235	@ 0x4d3
 800e2e8:	4a81      	ldr	r2, [pc, #516]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e2ea:	4882      	ldr	r0, [pc, #520]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e2ec:	f002 fbbc 	bl	8010a68 <iprintf>
 800e2f0:	4881      	ldr	r0, [pc, #516]	@ (800e4f8 <Custom_STM_App_Update_Char+0x538>)
 800e2f2:	f002 fbb9 	bl	8010a68 <iprintf>
      break;
 800e2f6:	e0f4      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_ACCZ:
      ret = aci_gatt_update_char_value(CustomContext.CustomAccHdle,
 800e2f8:	4b80      	ldr	r3, [pc, #512]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e2fa:	8958      	ldrh	r0, [r3, #10]
 800e2fc:	4b7f      	ldr	r3, [pc, #508]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e2fe:	8a19      	ldrh	r1, [r3, #16]
 800e300:	4b7f      	ldr	r3, [pc, #508]	@ (800e500 <Custom_STM_App_Update_Char+0x540>)
 800e302:	881b      	ldrh	r3, [r3, #0]
 800e304:	b2da      	uxtb	r2, r3
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	4613      	mov	r3, r2
 800e30c:	2200      	movs	r2, #0
 800e30e:	f7fc f869 	bl	800a3e4 <aci_gatt_update_char_value>
 800e312:	4603      	mov	r3, r0
 800e314:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAcczHdle,
                                       0, /* charValOffset */
                                       SizeAccz, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e316:	7bfb      	ldrb	r3, [r7, #15]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00f      	beq.n	800e33c <Custom_STM_App_Update_Char+0x37c>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCZ command, result : 0x%x \n\r", ret);
 800e31c:	4873      	ldr	r0, [pc, #460]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e31e:	f7fd fa8b 	bl	800b838 <DbgTraceGetFileName>
 800e322:	4601      	mov	r1, r0
 800e324:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800e328:	4a71      	ldr	r2, [pc, #452]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e32a:	4872      	ldr	r0, [pc, #456]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e32c:	f002 fb9c 	bl	8010a68 <iprintf>
 800e330:	7bfb      	ldrb	r3, [r7, #15]
 800e332:	4619      	mov	r1, r3
 800e334:	4873      	ldr	r0, [pc, #460]	@ (800e504 <Custom_STM_App_Update_Char+0x544>)
 800e336:	f002 fb97 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCZ command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_3_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_3_Char_3*/
      break;
 800e33a:	e0d2      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCZ command\n\r");
 800e33c:	486b      	ldr	r0, [pc, #428]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e33e:	f7fd fa7b 	bl	800b838 <DbgTraceGetFileName>
 800e342:	4601      	mov	r1, r0
 800e344:	f240 43e6 	movw	r3, #1254	@ 0x4e6
 800e348:	4a69      	ldr	r2, [pc, #420]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e34a:	486a      	ldr	r0, [pc, #424]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e34c:	f002 fb8c 	bl	8010a68 <iprintf>
 800e350:	486d      	ldr	r0, [pc, #436]	@ (800e508 <Custom_STM_App_Update_Char+0x548>)
 800e352:	f002 fb89 	bl	8010a68 <iprintf>
      break;
 800e356:	e0c4      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_GYRX:
      ret = aci_gatt_update_char_value(CustomContext.CustomGyrHdle,
 800e358:	4b68      	ldr	r3, [pc, #416]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e35a:	8a58      	ldrh	r0, [r3, #18]
 800e35c:	4b67      	ldr	r3, [pc, #412]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e35e:	8a99      	ldrh	r1, [r3, #20]
 800e360:	4b6a      	ldr	r3, [pc, #424]	@ (800e50c <Custom_STM_App_Update_Char+0x54c>)
 800e362:	881b      	ldrh	r3, [r3, #0]
 800e364:	b2da      	uxtb	r2, r3
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4613      	mov	r3, r2
 800e36c:	2200      	movs	r2, #0
 800e36e:	f7fc f839 	bl	800a3e4 <aci_gatt_update_char_value>
 800e372:	4603      	mov	r3, r0
 800e374:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomGyrxHdle,
                                       0, /* charValOffset */
                                       SizeGyrx, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e376:	7bfb      	ldrb	r3, [r7, #15]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00f      	beq.n	800e39c <Custom_STM_App_Update_Char+0x3dc>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GYRX command, result : 0x%x \n\r", ret);
 800e37c:	485b      	ldr	r0, [pc, #364]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e37e:	f7fd fa5b 	bl	800b838 <DbgTraceGetFileName>
 800e382:	4601      	mov	r1, r0
 800e384:	f240 43f5 	movw	r3, #1269	@ 0x4f5
 800e388:	4a59      	ldr	r2, [pc, #356]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e38a:	485a      	ldr	r0, [pc, #360]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e38c:	f002 fb6c 	bl	8010a68 <iprintf>
 800e390:	7bfb      	ldrb	r3, [r7, #15]
 800e392:	4619      	mov	r1, r3
 800e394:	485e      	ldr	r0, [pc, #376]	@ (800e510 <Custom_STM_App_Update_Char+0x550>)
 800e396:	f002 fb67 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRX command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_1*/
      break;
 800e39a:	e0a2      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRX command\n\r");
 800e39c:	4853      	ldr	r0, [pc, #332]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e39e:	f7fd fa4b 	bl	800b838 <DbgTraceGetFileName>
 800e3a2:	4601      	mov	r1, r0
 800e3a4:	f240 43f9 	movw	r3, #1273	@ 0x4f9
 800e3a8:	4a51      	ldr	r2, [pc, #324]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e3aa:	4852      	ldr	r0, [pc, #328]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e3ac:	f002 fb5c 	bl	8010a68 <iprintf>
 800e3b0:	4858      	ldr	r0, [pc, #352]	@ (800e514 <Custom_STM_App_Update_Char+0x554>)
 800e3b2:	f002 fb59 	bl	8010a68 <iprintf>
      break;
 800e3b6:	e094      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_GYRY:
      ret = aci_gatt_update_char_value(CustomContext.CustomGyrHdle,
 800e3b8:	4b50      	ldr	r3, [pc, #320]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e3ba:	8a58      	ldrh	r0, [r3, #18]
 800e3bc:	4b4f      	ldr	r3, [pc, #316]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e3be:	8ad9      	ldrh	r1, [r3, #22]
 800e3c0:	4b55      	ldr	r3, [pc, #340]	@ (800e518 <Custom_STM_App_Update_Char+0x558>)
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f7fc f809 	bl	800a3e4 <aci_gatt_update_char_value>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomGyryHdle,
                                       0, /* charValOffset */
                                       SizeGyry, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00f      	beq.n	800e3fc <Custom_STM_App_Update_Char+0x43c>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GYRY command, result : 0x%x \n\r", ret);
 800e3dc:	4843      	ldr	r0, [pc, #268]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e3de:	f7fd fa2b 	bl	800b838 <DbgTraceGetFileName>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	f44f 63a1 	mov.w	r3, #1288	@ 0x508
 800e3e8:	4a41      	ldr	r2, [pc, #260]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e3ea:	4842      	ldr	r0, [pc, #264]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e3ec:	f002 fb3c 	bl	8010a68 <iprintf>
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4849      	ldr	r0, [pc, #292]	@ (800e51c <Custom_STM_App_Update_Char+0x55c>)
 800e3f6:	f002 fb37 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRY command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_2*/
      break;
 800e3fa:	e072      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRY command\n\r");
 800e3fc:	483b      	ldr	r0, [pc, #236]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e3fe:	f7fd fa1b 	bl	800b838 <DbgTraceGetFileName>
 800e402:	4601      	mov	r1, r0
 800e404:	f240 530c 	movw	r3, #1292	@ 0x50c
 800e408:	4a39      	ldr	r2, [pc, #228]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e40a:	483a      	ldr	r0, [pc, #232]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e40c:	f002 fb2c 	bl	8010a68 <iprintf>
 800e410:	4843      	ldr	r0, [pc, #268]	@ (800e520 <Custom_STM_App_Update_Char+0x560>)
 800e412:	f002 fb29 	bl	8010a68 <iprintf>
      break;
 800e416:	e064      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_GYRZ:
      ret = aci_gatt_update_char_value(CustomContext.CustomGyrHdle,
 800e418:	4b38      	ldr	r3, [pc, #224]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e41a:	8a58      	ldrh	r0, [r3, #18]
 800e41c:	4b37      	ldr	r3, [pc, #220]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e41e:	8b19      	ldrh	r1, [r3, #24]
 800e420:	4b40      	ldr	r3, [pc, #256]	@ (800e524 <Custom_STM_App_Update_Char+0x564>)
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	b2da      	uxtb	r2, r3
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	9300      	str	r3, [sp, #0]
 800e42a:	4613      	mov	r3, r2
 800e42c:	2200      	movs	r2, #0
 800e42e:	f7fb ffd9 	bl	800a3e4 <aci_gatt_update_char_value>
 800e432:	4603      	mov	r3, r0
 800e434:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomGyrzHdle,
                                       0, /* charValOffset */
                                       SizeGyrz, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e436:	7bfb      	ldrb	r3, [r7, #15]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00f      	beq.n	800e45c <Custom_STM_App_Update_Char+0x49c>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GYRZ command, result : 0x%x \n\r", ret);
 800e43c:	482b      	ldr	r0, [pc, #172]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e43e:	f7fd f9fb 	bl	800b838 <DbgTraceGetFileName>
 800e442:	4601      	mov	r1, r0
 800e444:	f240 531b 	movw	r3, #1307	@ 0x51b
 800e448:	4a29      	ldr	r2, [pc, #164]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e44a:	482a      	ldr	r0, [pc, #168]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e44c:	f002 fb0c 	bl	8010a68 <iprintf>
 800e450:	7bfb      	ldrb	r3, [r7, #15]
 800e452:	4619      	mov	r1, r3
 800e454:	4834      	ldr	r0, [pc, #208]	@ (800e528 <Custom_STM_App_Update_Char+0x568>)
 800e456:	f002 fb07 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRZ command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_4_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_4_Char_3*/
      break;
 800e45a:	e042      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GYRZ command\n\r");
 800e45c:	4823      	ldr	r0, [pc, #140]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e45e:	f7fd f9eb 	bl	800b838 <DbgTraceGetFileName>
 800e462:	4601      	mov	r1, r0
 800e464:	f240 531f 	movw	r3, #1311	@ 0x51f
 800e468:	4a21      	ldr	r2, [pc, #132]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e46a:	4822      	ldr	r0, [pc, #136]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e46c:	f002 fafc 	bl	8010a68 <iprintf>
 800e470:	482e      	ldr	r0, [pc, #184]	@ (800e52c <Custom_STM_App_Update_Char+0x56c>)
 800e472:	f002 faf9 	bl	8010a68 <iprintf>
      break;
 800e476:	e034      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    case CUSTOM_STM_TEMPC:
      ret = aci_gatt_update_char_value(CustomContext.CustomTempHdle,
 800e478:	4b20      	ldr	r3, [pc, #128]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e47a:	8b58      	ldrh	r0, [r3, #26]
 800e47c:	4b1f      	ldr	r3, [pc, #124]	@ (800e4fc <Custom_STM_App_Update_Char+0x53c>)
 800e47e:	8b99      	ldrh	r1, [r3, #28]
 800e480:	4b2b      	ldr	r3, [pc, #172]	@ (800e530 <Custom_STM_App_Update_Char+0x570>)
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	b2da      	uxtb	r2, r3
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	4613      	mov	r3, r2
 800e48c:	2200      	movs	r2, #0
 800e48e:	f7fb ffa9 	bl	800a3e4 <aci_gatt_update_char_value>
 800e492:	4603      	mov	r3, r0
 800e494:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomTempcHdle,
                                       0, /* charValOffset */
                                       SizeTempc, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 800e496:	7bfb      	ldrb	r3, [r7, #15]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00f      	beq.n	800e4bc <Custom_STM_App_Update_Char+0x4fc>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value TEMPC command, result : 0x%x \n\r", ret);
 800e49c:	4813      	ldr	r0, [pc, #76]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e49e:	f7fd f9cb 	bl	800b838 <DbgTraceGetFileName>
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	f240 532e 	movw	r3, #1326	@ 0x52e
 800e4a8:	4a11      	ldr	r2, [pc, #68]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e4aa:	4812      	ldr	r0, [pc, #72]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e4ac:	f002 fadc 	bl	8010a68 <iprintf>
 800e4b0:	7bfb      	ldrb	r3, [r7, #15]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	481f      	ldr	r0, [pc, #124]	@ (800e534 <Custom_STM_App_Update_Char+0x574>)
 800e4b6:	f002 fad7 	bl	8010a68 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPC command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_5_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_5_Char_1*/
      break;
 800e4ba:	e012      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value TEMPC command\n\r");
 800e4bc:	480b      	ldr	r0, [pc, #44]	@ (800e4ec <Custom_STM_App_Update_Char+0x52c>)
 800e4be:	f7fd f9bb 	bl	800b838 <DbgTraceGetFileName>
 800e4c2:	4601      	mov	r1, r0
 800e4c4:	f240 5332 	movw	r3, #1330	@ 0x532
 800e4c8:	4a09      	ldr	r2, [pc, #36]	@ (800e4f0 <Custom_STM_App_Update_Char+0x530>)
 800e4ca:	480a      	ldr	r0, [pc, #40]	@ (800e4f4 <Custom_STM_App_Update_Char+0x534>)
 800e4cc:	f002 facc 	bl	8010a68 <iprintf>
 800e4d0:	4819      	ldr	r0, [pc, #100]	@ (800e538 <Custom_STM_App_Update_Char+0x578>)
 800e4d2:	f002 fac9 	bl	8010a68 <iprintf>
      break;
 800e4d6:	e004      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>

    default:
      break;
 800e4d8:	bf00      	nop
 800e4da:	e002      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
      break;
 800e4dc:	bf00      	nop
 800e4de:	e000      	b.n	800e4e2 <Custom_STM_App_Update_Char+0x522>
      break;
 800e4e0:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	080148f0 	.word	0x080148f0
 800e4f0:	080167f8 	.word	0x080167f8
 800e4f4:	08014910 	.word	0x08014910
 800e4f8:	08015254 	.word	0x08015254
 800e4fc:	200023bc 	.word	0x200023bc
 800e500:	2000005c 	.word	0x2000005c
 800e504:	0801528c 	.word	0x0801528c
 800e508:	080152d4 	.word	0x080152d4
 800e50c:	2000005e 	.word	0x2000005e
 800e510:	0801530c 	.word	0x0801530c
 800e514:	08015354 	.word	0x08015354
 800e518:	20000060 	.word	0x20000060
 800e51c:	0801538c 	.word	0x0801538c
 800e520:	080153d4 	.word	0x080153d4
 800e524:	20000062 	.word	0x20000062
 800e528:	0801540c 	.word	0x0801540c
 800e52c:	08015454 	.word	0x08015454
 800e530:	20000064 	.word	0x20000064
 800e534:	0801548c 	.word	0x0801548c
 800e538:	080154d4 	.word	0x080154d4

0800e53c <LL_PWR_EnableBootC2>:
{
 800e53c:	b480      	push	{r7}
 800e53e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e540:	4b05      	ldr	r3, [pc, #20]	@ (800e558 <LL_PWR_EnableBootC2+0x1c>)
 800e542:	68db      	ldr	r3, [r3, #12]
 800e544:	4a04      	ldr	r2, [pc, #16]	@ (800e558 <LL_PWR_EnableBootC2+0x1c>)
 800e546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e54a:	60d3      	str	r3, [r2, #12]
}
 800e54c:	bf00      	nop
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
 800e556:	bf00      	nop
 800e558:	58000400 	.word	0x58000400

0800e55c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e564:	4b06      	ldr	r3, [pc, #24]	@ (800e580 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e566:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800e56a:	4905      	ldr	r1, [pc, #20]	@ (800e580 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4313      	orrs	r3, r2
 800e570:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800e574:	bf00      	nop
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	58000800 	.word	0x58000800

0800e584 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e58c:	4b05      	ldr	r3, [pc, #20]	@ (800e5a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e58e:	6a1a      	ldr	r2, [r3, #32]
 800e590:	4904      	ldr	r1, [pc, #16]	@ (800e5a4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	4313      	orrs	r3, r2
 800e596:	620b      	str	r3, [r1, #32]
}
 800e598:	bf00      	nop
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	58000800 	.word	0x58000800

0800e5a8 <LL_AHB3_GRP1_EnableClock>:
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e5b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e5c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4013      	ands	r3, r2
 800e5ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
}
 800e5ce:	bf00      	nop
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b085      	sub	sp, #20
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e5e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5e6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e5ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e5f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	4013      	ands	r3, r2
 800e602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e604:	68fb      	ldr	r3, [r7, #12]
}
 800e606:	bf00      	nop
 800e608:	3714      	adds	r7, #20
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <LL_C1_IPCC_EnableIT_TXF>:
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
}
 800e626:	bf00      	nop
 800e628:	370c      	adds	r7, #12
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <LL_C1_IPCC_EnableIT_RXO>:
{
 800e632:	b480      	push	{r7}
 800e634:	b083      	sub	sp, #12
 800e636:	af00      	add	r7, sp, #0
 800e638:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f043 0201 	orr.w	r2, r3, #1
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	601a      	str	r2, [r3, #0]
}
 800e646:	bf00      	nop
 800e648:	370c      	adds	r7, #12
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <LL_C1_IPCC_EnableTransmitChannel>:
{
 800e652:	b480      	push	{r7}
 800e654:	b083      	sub	sp, #12
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685a      	ldr	r2, [r3, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	041b      	lsls	r3, r3, #16
 800e664:	43db      	mvns	r3, r3
 800e666:	401a      	ands	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	605a      	str	r2, [r3, #4]
}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	041b      	lsls	r3, r3, #16
 800e68a:	431a      	orrs	r2, r3
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	605a      	str	r2, [r3, #4]
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800e69c:	b480      	push	{r7}
 800e69e:	b083      	sub	sp, #12
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	43db      	mvns	r3, r3
 800e6ae:	401a      	ands	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	605a      	str	r2, [r3, #4]
}
 800e6b4:	bf00      	nop
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
 800e6c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	683a      	ldr	r2, [r7, #0]
 800e6ce:	609a      	str	r2, [r3, #8]
}
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr

0800e6dc <LL_C1_IPCC_SetFlag_CHx>:
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
 800e6e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	041a      	lsls	r2, r3, #16
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	609a      	str	r2, [r3, #8]
}
 800e6ee:	bf00      	nop
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr

0800e6fa <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800e6fa:	b480      	push	{r7}
 800e6fc:	b083      	sub	sp, #12
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
 800e702:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	4013      	ands	r3, r2
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d101      	bne.n	800e716 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e712:	2301      	movs	r3, #1
 800e714:	e000      	b.n	800e718 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e716:	2300      	movs	r3, #0
}
 800e718:	4618      	mov	r0, r3
 800e71a:	370c      	adds	r7, #12
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	69da      	ldr	r2, [r3, #28]
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	4013      	ands	r3, r2
 800e736:	683a      	ldr	r2, [r7, #0]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d101      	bne.n	800e740 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e73c:	2301      	movs	r3, #1
 800e73e:	e000      	b.n	800e742 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	370c      	adds	r7, #12
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
	...

0800e750 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e754:	2102      	movs	r1, #2
 800e756:	4818      	ldr	r0, [pc, #96]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e758:	f7ff ffe4 	bl	800e724 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d008      	beq.n	800e774 <HW_IPCC_Rx_Handler+0x24>
 800e762:	4b15      	ldr	r3, [pc, #84]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e764:	685b      	ldr	r3, [r3, #4]
 800e766:	f003 0302 	and.w	r3, r3, #2
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d102      	bne.n	800e774 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e76e:	f000 f8d5 	bl	800e91c <HW_IPCC_SYS_EvtHandler>
 800e772:	e01e      	b.n	800e7b2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e774:	2101      	movs	r1, #1
 800e776:	4810      	ldr	r0, [pc, #64]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e778:	f7ff ffd4 	bl	800e724 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d008      	beq.n	800e794 <HW_IPCC_Rx_Handler+0x44>
 800e782:	4b0d      	ldr	r3, [pc, #52]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d102      	bne.n	800e794 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e78e:	f000 f889 	bl	800e8a4 <HW_IPCC_BLE_EvtHandler>
 800e792:	e00e      	b.n	800e7b2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e794:	2108      	movs	r1, #8
 800e796:	4808      	ldr	r0, [pc, #32]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e798:	f7ff ffc4 	bl	800e724 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d008      	beq.n	800e7b4 <HW_IPCC_Rx_Handler+0x64>
 800e7a2:	4b05      	ldr	r3, [pc, #20]	@ (800e7b8 <HW_IPCC_Rx_Handler+0x68>)
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	f003 0308 	and.w	r3, r3, #8
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d102      	bne.n	800e7b4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e7ae:	f000 f901 	bl	800e9b4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
}
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	58000c00 	.word	0x58000c00

0800e7bc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e7c0:	2102      	movs	r1, #2
 800e7c2:	4818      	ldr	r0, [pc, #96]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e7c4:	f7ff ff99 	bl	800e6fa <LL_C1_IPCC_IsActiveFlag_CHx>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d108      	bne.n	800e7e0 <HW_IPCC_Tx_Handler+0x24>
 800e7ce:	4b15      	ldr	r3, [pc, #84]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d102      	bne.n	800e7e0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e7da:	f000 f893 	bl	800e904 <HW_IPCC_SYS_CmdEvtHandler>
 800e7de:	e01e      	b.n	800e81e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e7e0:	2108      	movs	r1, #8
 800e7e2:	4810      	ldr	r0, [pc, #64]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e7e4:	f7ff ff89 	bl	800e6fa <LL_C1_IPCC_IsActiveFlag_CHx>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d108      	bne.n	800e800 <HW_IPCC_Tx_Handler+0x44>
 800e7ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e7f0:	685b      	ldr	r3, [r3, #4]
 800e7f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e7fa:	f000 f8bd 	bl	800e978 <HW_IPCC_MM_FreeBufHandler>
 800e7fe:	e00e      	b.n	800e81e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e800:	2120      	movs	r1, #32
 800e802:	4808      	ldr	r0, [pc, #32]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e804:	f7ff ff79 	bl	800e6fa <LL_C1_IPCC_IsActiveFlag_CHx>
 800e808:	4603      	mov	r3, r0
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d108      	bne.n	800e820 <HW_IPCC_Tx_Handler+0x64>
 800e80e:	4b05      	ldr	r3, [pc, #20]	@ (800e824 <HW_IPCC_Tx_Handler+0x68>)
 800e810:	685b      	ldr	r3, [r3, #4]
 800e812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e816:	2b00      	cmp	r3, #0
 800e818:	d102      	bne.n	800e820 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e81a:	f000 f84f 	bl	800e8bc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e81e:	bf00      	nop
 800e820:	bf00      	nop
}
 800e822:	bd80      	pop	{r7, pc}
 800e824:	58000c00 	.word	0x58000c00

0800e828 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e82c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e830:	f7ff fed3 	bl	800e5da <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e834:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e838:	f7ff fea4 	bl	800e584 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e83c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e840:	f7ff fe8c 	bl	800e55c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e844:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e846:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e848:	f7ff fe78 	bl	800e53c <LL_PWR_EnableBootC2>

  return;
 800e84c:	bf00      	nop
}
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e850:	b580      	push	{r7, lr}
 800e852:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e854:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800e858:	f7ff fea6 	bl	800e5a8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e85c:	4806      	ldr	r0, [pc, #24]	@ (800e878 <HW_IPCC_Init+0x28>)
 800e85e:	f7ff fee8 	bl	800e632 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e862:	4805      	ldr	r0, [pc, #20]	@ (800e878 <HW_IPCC_Init+0x28>)
 800e864:	f7ff fed5 	bl	800e612 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e868:	202c      	movs	r0, #44	@ 0x2c
 800e86a:	f7f5 f99c 	bl	8003ba6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e86e:	202d      	movs	r0, #45	@ 0x2d
 800e870:	f7f5 f999 	bl	8003ba6 <HAL_NVIC_EnableIRQ>

  return;
 800e874:	bf00      	nop
}
 800e876:	bd80      	pop	{r7, pc}
 800e878:	58000c00 	.word	0x58000c00

0800e87c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e880:	2101      	movs	r1, #1
 800e882:	4802      	ldr	r0, [pc, #8]	@ (800e88c <HW_IPCC_BLE_Init+0x10>)
 800e884:	f7ff ff0a 	bl	800e69c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e888:	bf00      	nop
}
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	58000c00 	.word	0x58000c00

0800e890 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e890:	b580      	push	{r7, lr}
 800e892:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e894:	2101      	movs	r1, #1
 800e896:	4802      	ldr	r0, [pc, #8]	@ (800e8a0 <HW_IPCC_BLE_SendCmd+0x10>)
 800e898:	f7ff ff20 	bl	800e6dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e89c:	bf00      	nop
}
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	58000c00 	.word	0x58000c00

0800e8a4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e8a8:	f7fc fe0e 	bl	800b4c8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e8ac:	2101      	movs	r1, #1
 800e8ae:	4802      	ldr	r0, [pc, #8]	@ (800e8b8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e8b0:	f7ff ff06 	bl	800e6c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e8b4:	bf00      	nop
}
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	58000c00 	.word	0x58000c00

0800e8bc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e8c0:	2120      	movs	r1, #32
 800e8c2:	4803      	ldr	r0, [pc, #12]	@ (800e8d0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e8c4:	f7ff fed8 	bl	800e678 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e8c8:	f7fc fe2e 	bl	800b528 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e8cc:	bf00      	nop
}
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	58000c00 	.word	0x58000c00

0800e8d4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e8d8:	2102      	movs	r1, #2
 800e8da:	4802      	ldr	r0, [pc, #8]	@ (800e8e4 <HW_IPCC_SYS_Init+0x10>)
 800e8dc:	f7ff fede 	bl	800e69c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e8e0:	bf00      	nop
}
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	58000c00 	.word	0x58000c00

0800e8e8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e8ec:	2102      	movs	r1, #2
 800e8ee:	4804      	ldr	r0, [pc, #16]	@ (800e900 <HW_IPCC_SYS_SendCmd+0x18>)
 800e8f0:	f7ff fef4 	bl	800e6dc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e8f4:	2102      	movs	r1, #2
 800e8f6:	4802      	ldr	r0, [pc, #8]	@ (800e900 <HW_IPCC_SYS_SendCmd+0x18>)
 800e8f8:	f7ff feab 	bl	800e652 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e8fc:	bf00      	nop
}
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	58000c00 	.word	0x58000c00

0800e904 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e904:	b580      	push	{r7, lr}
 800e906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e908:	2102      	movs	r1, #2
 800e90a:	4803      	ldr	r0, [pc, #12]	@ (800e918 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e90c:	f7ff feb4 	bl	800e678 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e910:	f7fc fe5a 	bl	800b5c8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e914:	bf00      	nop
}
 800e916:	bd80      	pop	{r7, pc}
 800e918:	58000c00 	.word	0x58000c00

0800e91c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e920:	f7fc fe68 	bl	800b5f4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e924:	2102      	movs	r1, #2
 800e926:	4802      	ldr	r0, [pc, #8]	@ (800e930 <HW_IPCC_SYS_EvtHandler+0x14>)
 800e928:	f7ff feca 	bl	800e6c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e92c:	bf00      	nop
}
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	58000c00 	.word	0x58000c00

0800e934 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e93c:	2108      	movs	r1, #8
 800e93e:	480c      	ldr	r0, [pc, #48]	@ (800e970 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e940:	f7ff fedb 	bl	800e6fa <LL_C1_IPCC_IsActiveFlag_CHx>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d007      	beq.n	800e95a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e94a:	4a0a      	ldr	r2, [pc, #40]	@ (800e974 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e950:	2108      	movs	r1, #8
 800e952:	4807      	ldr	r0, [pc, #28]	@ (800e970 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e954:	f7ff fe7d 	bl	800e652 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e958:	e006      	b.n	800e968 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e95e:	2108      	movs	r1, #8
 800e960:	4803      	ldr	r0, [pc, #12]	@ (800e970 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e962:	f7ff febb 	bl	800e6dc <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e966:	bf00      	nop
}
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	58000c00 	.word	0x58000c00
 800e974:	200023dc 	.word	0x200023dc

0800e978 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e97c:	2108      	movs	r1, #8
 800e97e:	4806      	ldr	r0, [pc, #24]	@ (800e998 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e980:	f7ff fe7a 	bl	800e678 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e984:	4b05      	ldr	r3, [pc, #20]	@ (800e99c <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e98a:	2108      	movs	r1, #8
 800e98c:	4802      	ldr	r0, [pc, #8]	@ (800e998 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e98e:	f7ff fea5 	bl	800e6dc <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e992:	bf00      	nop
}
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	58000c00 	.word	0x58000c00
 800e99c:	200023dc 	.word	0x200023dc

0800e9a0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e9a4:	2108      	movs	r1, #8
 800e9a6:	4802      	ldr	r0, [pc, #8]	@ (800e9b0 <HW_IPCC_TRACES_Init+0x10>)
 800e9a8:	f7ff fe78 	bl	800e69c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e9ac:	bf00      	nop
}
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	58000c00 	.word	0x58000c00

0800e9b4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e9b8:	f7fc fec4 	bl	800b744 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e9bc:	2108      	movs	r1, #8
 800e9be:	4802      	ldr	r0, [pc, #8]	@ (800e9c8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e9c0:	f7ff fe7e 	bl	800e6c0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e9c4:	bf00      	nop
}
 800e9c6:	bd80      	pop	{r7, pc}
 800e9c8:	58000c00 	.word	0x58000c00

0800e9cc <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e9d0:	4b05      	ldr	r3, [pc, #20]	@ (800e9e8 <UTIL_LPM_Init+0x1c>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e9d6:	4b05      	ldr	r3, [pc, #20]	@ (800e9ec <UTIL_LPM_Init+0x20>)
 800e9d8:	2200      	movs	r2, #0
 800e9da:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e9dc:	bf00      	nop
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr
 800e9e6:	bf00      	nop
 800e9e8:	200023e0 	.word	0x200023e0
 800e9ec:	200023e4 	.word	0x200023e4

0800e9f0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b087      	sub	sp, #28
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9fc:	f3ef 8310 	mrs	r3, PRIMASK
 800ea00:	613b      	str	r3, [r7, #16]
  return(result);
 800ea02:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ea04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea06:	b672      	cpsid	i
}
 800ea08:	bf00      	nop
  
  switch(state)
 800ea0a:	78fb      	ldrb	r3, [r7, #3]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d008      	beq.n	800ea22 <UTIL_LPM_SetOffMode+0x32>
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d10e      	bne.n	800ea32 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ea14:	4b0d      	ldr	r3, [pc, #52]	@ (800ea4c <UTIL_LPM_SetOffMode+0x5c>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	4313      	orrs	r3, r2
 800ea1c:	4a0b      	ldr	r2, [pc, #44]	@ (800ea4c <UTIL_LPM_SetOffMode+0x5c>)
 800ea1e:	6013      	str	r3, [r2, #0]
      break;
 800ea20:	e008      	b.n	800ea34 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	43da      	mvns	r2, r3
 800ea26:	4b09      	ldr	r3, [pc, #36]	@ (800ea4c <UTIL_LPM_SetOffMode+0x5c>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	4a07      	ldr	r2, [pc, #28]	@ (800ea4c <UTIL_LPM_SetOffMode+0x5c>)
 800ea2e:	6013      	str	r3, [r2, #0]
      break;
 800ea30:	e000      	b.n	800ea34 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ea32:	bf00      	nop
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f383 8810 	msr	PRIMASK, r3
}
 800ea3e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ea40:	bf00      	nop
 800ea42:	371c      	adds	r7, #28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	200023e4 	.word	0x200023e4

0800ea50 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ea50:	b580      	push	{r7, lr}
 800ea52:	b090      	sub	sp, #64	@ 0x40
 800ea54:	af00      	add	r7, sp, #0
 800ea56:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ea58:	4b73      	ldr	r3, [pc, #460]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ea5e:	4b72      	ldr	r3, [pc, #456]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	4013      	ands	r3, r2
 800ea66:	4a70      	ldr	r2, [pc, #448]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ea68:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ea6a:	4b70      	ldr	r3, [pc, #448]	@ (800ec2c <UTIL_SEQ_Run+0x1dc>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ea70:	4b6f      	ldr	r3, [pc, #444]	@ (800ec30 <UTIL_SEQ_Run+0x1e0>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ea76:	4b6f      	ldr	r3, [pc, #444]	@ (800ec34 <UTIL_SEQ_Run+0x1e4>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800ea7c:	4b6e      	ldr	r3, [pc, #440]	@ (800ec38 <UTIL_SEQ_Run+0x1e8>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ea82:	e08d      	b.n	800eba0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ea84:	2300      	movs	r3, #0
 800ea86:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ea88:	e002      	b.n	800ea90 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ea8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ea90:	4a6a      	ldr	r2, [pc, #424]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800ea92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea94:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ea98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea9a:	401a      	ands	r2, r3
 800ea9c:	4b62      	ldr	r3, [pc, #392]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4013      	ands	r3, r2
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0f1      	beq.n	800ea8a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800eaa6:	4a65      	ldr	r2, [pc, #404]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eaa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eaaa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eaae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eab0:	401a      	ands	r2, r3
 800eab2:	4b5d      	ldr	r3, [pc, #372]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	4013      	ands	r3, r2
 800eab8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800eaba:	4a60      	ldr	r2, [pc, #384]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eabc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eabe:	00db      	lsls	r3, r3, #3
 800eac0:	4413      	add	r3, r2
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	4013      	ands	r3, r2
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d106      	bne.n	800eada <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800eacc:	4a5b      	ldr	r2, [pc, #364]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ead0:	00db      	lsls	r3, r3, #3
 800ead2:	4413      	add	r3, r2
 800ead4:	f04f 32ff 	mov.w	r2, #4294967295
 800ead8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800eada:	4a58      	ldr	r2, [pc, #352]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eadc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	4413      	add	r3, r2
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eae6:	4013      	ands	r3, r2
 800eae8:	4618      	mov	r0, r3
 800eaea:	f000 f9b3 	bl	800ee54 <SEQ_BitPosition>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	461a      	mov	r2, r3
 800eaf2:	4b53      	ldr	r3, [pc, #332]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800eaf4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800eaf6:	4a51      	ldr	r2, [pc, #324]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eaf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eafa:	00db      	lsls	r3, r3, #3
 800eafc:	4413      	add	r3, r2
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	4b4f      	ldr	r3, [pc, #316]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2101      	movs	r1, #1
 800eb06:	fa01 f303 	lsl.w	r3, r1, r3
 800eb0a:	43db      	mvns	r3, r3
 800eb0c:	401a      	ands	r2, r3
 800eb0e:	494b      	ldr	r1, [pc, #300]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eb10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb12:	00db      	lsls	r3, r3, #3
 800eb14:	440b      	add	r3, r1
 800eb16:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb18:	f3ef 8310 	mrs	r3, PRIMASK
 800eb1c:	61bb      	str	r3, [r7, #24]
  return(result);
 800eb1e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb20:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb22:	b672      	cpsid	i
}
 800eb24:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800eb26:	4b46      	ldr	r3, [pc, #280]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800eb30:	43da      	mvns	r2, r3
 800eb32:	4b3e      	ldr	r3, [pc, #248]	@ (800ec2c <UTIL_SEQ_Run+0x1dc>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4013      	ands	r3, r2
 800eb38:	4a3c      	ldr	r2, [pc, #240]	@ (800ec2c <UTIL_SEQ_Run+0x1dc>)
 800eb3a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb40:	e013      	b.n	800eb6a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800eb42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb44:	3b01      	subs	r3, #1
 800eb46:	4a3d      	ldr	r2, [pc, #244]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eb48:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800eb4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	2201      	movs	r2, #1
 800eb52:	fa02 f303 	lsl.w	r3, r2, r3
 800eb56:	43da      	mvns	r2, r3
 800eb58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	400a      	ands	r2, r1
 800eb5e:	4937      	ldr	r1, [pc, #220]	@ (800ec3c <UTIL_SEQ_Run+0x1ec>)
 800eb60:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800eb64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb66:	3b01      	subs	r3, #1
 800eb68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d1e8      	bne.n	800eb42 <UTIL_SEQ_Run+0xf2>
 800eb70:	6a3b      	ldr	r3, [r7, #32]
 800eb72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	f383 8810 	msr	PRIMASK, r3
}
 800eb7a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800eb7c:	4b30      	ldr	r3, [pc, #192]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a30      	ldr	r2, [pc, #192]	@ (800ec44 <UTIL_SEQ_Run+0x1f4>)
 800eb82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb86:	4798      	blx	r3

    local_taskset = TaskSet;
 800eb88:	4b28      	ldr	r3, [pc, #160]	@ (800ec2c <UTIL_SEQ_Run+0x1dc>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800eb8e:	4b28      	ldr	r3, [pc, #160]	@ (800ec30 <UTIL_SEQ_Run+0x1e0>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 800eb94:	4b27      	ldr	r3, [pc, #156]	@ (800ec34 <UTIL_SEQ_Run+0x1e4>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 800eb9a:	4b27      	ldr	r3, [pc, #156]	@ (800ec38 <UTIL_SEQ_Run+0x1e8>)
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800eba0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eba4:	401a      	ands	r2, r3
 800eba6:	4b20      	ldr	r3, [pc, #128]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4013      	ands	r3, r2
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d005      	beq.n	800ebbc <UTIL_SEQ_Run+0x16c>
 800ebb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ebb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebb4:	4013      	ands	r3, r2
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f43f af64 	beq.w	800ea84 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ebbc:	4b20      	ldr	r3, [pc, #128]	@ (800ec40 <UTIL_SEQ_Run+0x1f0>)
 800ebbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ebc2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ebc4:	f000 f938 	bl	800ee38 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebc8:	f3ef 8310 	mrs	r3, PRIMASK
 800ebcc:	613b      	str	r3, [r7, #16]
  return(result);
 800ebce:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ebd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebd2:	b672      	cpsid	i
}
 800ebd4:	bf00      	nop
  local_taskset = TaskSet;
 800ebd6:	4b15      	ldr	r3, [pc, #84]	@ (800ec2c <UTIL_SEQ_Run+0x1dc>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ebdc:	4b14      	ldr	r3, [pc, #80]	@ (800ec30 <UTIL_SEQ_Run+0x1e0>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ebe2:	4b14      	ldr	r3, [pc, #80]	@ (800ec34 <UTIL_SEQ_Run+0x1e4>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ebe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	401a      	ands	r2, r3
 800ebee:	4b0e      	ldr	r3, [pc, #56]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d107      	bne.n	800ec08 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ebf8:	4b0f      	ldr	r3, [pc, #60]	@ (800ec38 <UTIL_SEQ_Run+0x1e8>)
 800ebfa:	681a      	ldr	r2, [r3, #0]
 800ebfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebfe:	4013      	ands	r3, r2
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d101      	bne.n	800ec08 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ec04:	f7f2 fdd3 	bl	80017ae <UTIL_SEQ_Idle>
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f383 8810 	msr	PRIMASK, r3
}
 800ec12:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ec14:	f000 f917 	bl	800ee46 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ec18:	4a03      	ldr	r2, [pc, #12]	@ (800ec28 <UTIL_SEQ_Run+0x1d8>)
 800ec1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec1c:	6013      	str	r3, [r2, #0]

  return;
 800ec1e:	bf00      	nop
}
 800ec20:	3740      	adds	r7, #64	@ 0x40
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	2000006c 	.word	0x2000006c
 800ec2c:	200023e8 	.word	0x200023e8
 800ec30:	200023ec 	.word	0x200023ec
 800ec34:	20000068 	.word	0x20000068
 800ec38:	200023f0 	.word	0x200023f0
 800ec3c:	20002478 	.word	0x20002478
 800ec40:	200023f4 	.word	0x200023f4
 800ec44:	200023f8 	.word	0x200023f8

0800ec48 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b088      	sub	sp, #32
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec54:	f3ef 8310 	mrs	r3, PRIMASK
 800ec58:	617b      	str	r3, [r7, #20]
  return(result);
 800ec5a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800ec5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec5e:	b672      	cpsid	i
}
 800ec60:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ec62:	68f8      	ldr	r0, [r7, #12]
 800ec64:	f000 f8f6 	bl	800ee54 <SEQ_BitPosition>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4a06      	ldr	r2, [pc, #24]	@ (800ec88 <UTIL_SEQ_RegTask+0x40>)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec78:	69bb      	ldr	r3, [r7, #24]
 800ec7a:	f383 8810 	msr	PRIMASK, r3
}
 800ec7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ec80:	bf00      	nop
}
 800ec82:	3720      	adds	r7, #32
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	200023f8 	.word	0x200023f8

0800ec8c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec96:	f3ef 8310 	mrs	r3, PRIMASK
 800ec9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ec9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eca0:	b672      	cpsid	i
}
 800eca2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800eca4:	4b0d      	ldr	r3, [pc, #52]	@ (800ecdc <UTIL_SEQ_SetTask+0x50>)
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	4a0b      	ldr	r2, [pc, #44]	@ (800ecdc <UTIL_SEQ_SetTask+0x50>)
 800ecae:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ecb0:	4a0b      	ldr	r2, [pc, #44]	@ (800ece0 <UTIL_SEQ_SetTask+0x54>)
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	431a      	orrs	r2, r3
 800ecbc:	4908      	ldr	r1, [pc, #32]	@ (800ece0 <UTIL_SEQ_SetTask+0x54>)
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	f383 8810 	msr	PRIMASK, r3
}
 800ecce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ecd0:	bf00      	nop
}
 800ecd2:	371c      	adds	r7, #28
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr
 800ecdc:	200023e8 	.word	0x200023e8
 800ece0:	20002478 	.word	0x20002478

0800ece4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b087      	sub	sp, #28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecec:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ecf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ecf6:	b672      	cpsid	i
}
 800ecf8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	43da      	mvns	r2, r3
 800ecfe:	4b08      	ldr	r3, [pc, #32]	@ (800ed20 <UTIL_SEQ_PauseTask+0x3c>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	4013      	ands	r3, r2
 800ed04:	4a06      	ldr	r2, [pc, #24]	@ (800ed20 <UTIL_SEQ_PauseTask+0x3c>)
 800ed06:	6013      	str	r3, [r2, #0]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	f383 8810 	msr	PRIMASK, r3
}
 800ed12:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed14:	bf00      	nop
}
 800ed16:	371c      	adds	r7, #28
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	20000068 	.word	0x20000068

0800ed24 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800ed24:	b480      	push	{r7}
 800ed26:	b087      	sub	sp, #28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ed30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed32:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed36:	b672      	cpsid	i
}
 800ed38:	bf00      	nop

  TaskMask |= TaskId_bm;
 800ed3a:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <UTIL_SEQ_ResumeTask+0x3c>)
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	4a07      	ldr	r2, [pc, #28]	@ (800ed60 <UTIL_SEQ_ResumeTask+0x3c>)
 800ed44:	6013      	str	r3, [r2, #0]
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed4a:	693b      	ldr	r3, [r7, #16]
 800ed4c:	f383 8810 	msr	PRIMASK, r3
}
 800ed50:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed52:	bf00      	nop
}
 800ed54:	371c      	adds	r7, #28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
 800ed5e:	bf00      	nop
 800ed60:	20000068 	.word	0x20000068

0800ed64 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ed64:	b480      	push	{r7}
 800ed66:	b087      	sub	sp, #28
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ed70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed72:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ed74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed76:	b672      	cpsid	i
}
 800ed78:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ed7a:	4b09      	ldr	r3, [pc, #36]	@ (800eda0 <UTIL_SEQ_SetEvt+0x3c>)
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4313      	orrs	r3, r2
 800ed82:	4a07      	ldr	r2, [pc, #28]	@ (800eda0 <UTIL_SEQ_SetEvt+0x3c>)
 800ed84:	6013      	str	r3, [r2, #0]
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	f383 8810 	msr	PRIMASK, r3
}
 800ed90:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ed92:	bf00      	nop
}
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9c:	4770      	bx	lr
 800ed9e:	bf00      	nop
 800eda0:	200023ec 	.word	0x200023ec

0800eda4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b088      	sub	sp, #32
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800edac:	4b1f      	ldr	r3, [pc, #124]	@ (800ee2c <UTIL_SEQ_WaitEvt+0x88>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800edb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ee2c <UTIL_SEQ_WaitEvt+0x88>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edba:	d102      	bne.n	800edc2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800edbc:	2300      	movs	r3, #0
 800edbe:	61fb      	str	r3, [r7, #28]
 800edc0:	e005      	b.n	800edce <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800edc2:	4b1a      	ldr	r3, [pc, #104]	@ (800ee2c <UTIL_SEQ_WaitEvt+0x88>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	2201      	movs	r2, #1
 800edc8:	fa02 f303 	lsl.w	r3, r2, r3
 800edcc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800edce:	4b18      	ldr	r3, [pc, #96]	@ (800ee30 <UTIL_SEQ_WaitEvt+0x8c>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800edd4:	4a16      	ldr	r2, [pc, #88]	@ (800ee30 <UTIL_SEQ_WaitEvt+0x8c>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800edda:	e003      	b.n	800ede4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800eddc:	6879      	ldr	r1, [r7, #4]
 800edde:	69f8      	ldr	r0, [r7, #28]
 800ede0:	f7f2 fcec 	bl	80017bc <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ede4:	4b13      	ldr	r3, [pc, #76]	@ (800ee34 <UTIL_SEQ_WaitEvt+0x90>)
 800ede6:	681a      	ldr	r2, [r3, #0]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4013      	ands	r3, r2
 800edec:	2b00      	cmp	r3, #0
 800edee:	d0f5      	beq.n	800eddc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800edf0:	4a0e      	ldr	r2, [pc, #56]	@ (800ee2c <UTIL_SEQ_WaitEvt+0x88>)
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edf6:	f3ef 8310 	mrs	r3, PRIMASK
 800edfa:	60bb      	str	r3, [r7, #8]
  return(result);
 800edfc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800edfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee00:	b672      	cpsid	i
}
 800ee02:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	43da      	mvns	r2, r3
 800ee08:	4b0a      	ldr	r3, [pc, #40]	@ (800ee34 <UTIL_SEQ_WaitEvt+0x90>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4013      	ands	r3, r2
 800ee0e:	4a09      	ldr	r2, [pc, #36]	@ (800ee34 <UTIL_SEQ_WaitEvt+0x90>)
 800ee10:	6013      	str	r3, [r2, #0]
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f383 8810 	msr	PRIMASK, r3
}
 800ee1c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ee1e:	4a04      	ldr	r2, [pc, #16]	@ (800ee30 <UTIL_SEQ_WaitEvt+0x8c>)
 800ee20:	697b      	ldr	r3, [r7, #20]
 800ee22:	6013      	str	r3, [r2, #0]
  return;
 800ee24:	bf00      	nop
}
 800ee26:	3720      	adds	r7, #32
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	200023f4 	.word	0x200023f4
 800ee30:	200023f0 	.word	0x200023f0
 800ee34:	200023ec 	.word	0x200023ec

0800ee38 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ee38:	b480      	push	{r7}
 800ee3a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ee3c:	bf00      	nop
}
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ee46:	b480      	push	{r7}
 800ee48:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ee4a:	bf00      	nop
}
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b085      	sub	sp, #20
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee6a:	d204      	bcs.n	800ee76 <SEQ_BitPosition+0x22>
 800ee6c:	2310      	movs	r3, #16
 800ee6e:	73fb      	strb	r3, [r7, #15]
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	041b      	lsls	r3, r3, #16
 800ee74:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ee7c:	d205      	bcs.n	800ee8a <SEQ_BitPosition+0x36>
 800ee7e:	7bfb      	ldrb	r3, [r7, #15]
 800ee80:	3308      	adds	r3, #8
 800ee82:	73fb      	strb	r3, [r7, #15]
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	021b      	lsls	r3, r3, #8
 800ee88:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee90:	d205      	bcs.n	800ee9e <SEQ_BitPosition+0x4a>
 800ee92:	7bfb      	ldrb	r3, [r7, #15]
 800ee94:	3304      	adds	r3, #4
 800ee96:	73fb      	strb	r3, [r7, #15]
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	011b      	lsls	r3, r3, #4
 800ee9c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	0f1b      	lsrs	r3, r3, #28
 800eea2:	4a07      	ldr	r2, [pc, #28]	@ (800eec0 <SEQ_BitPosition+0x6c>)
 800eea4:	5cd2      	ldrb	r2, [r2, r3]
 800eea6:	7bfb      	ldrb	r3, [r7, #15]
 800eea8:	4413      	add	r3, r2
 800eeaa:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800eeac:	7bfb      	ldrb	r3, [r7, #15]
 800eeae:	f1c3 031f 	rsb	r3, r3, #31
 800eeb2:	b2db      	uxtb	r3, r3
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr
 800eec0:	08016814 	.word	0x08016814

0800eec4 <funchclassifier78.constprop.0>:
 800eec4:	4288      	cmp	r0, r1
 800eec6:	d300      	bcc.n	800eeca <funchclassifier78.constprop.0+0x6>
 800eec8:	4770      	bx	lr
 800eeca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eece:	1847      	adds	r7, r0, r1
 800eed0:	ea4f 0867 	mov.w	r8, r7, asr #1
 800eed4:	087f      	lsrs	r7, r7, #1
 800eed6:	1c7c      	adds	r4, r7, #1
 800eed8:	460d      	mov	r5, r1
 800eeda:	b2a4      	uxth	r4, r4
 800eedc:	4639      	mov	r1, r7
 800eede:	4606      	mov	r6, r0
 800eee0:	f7ff fff0 	bl	800eec4 <funchclassifier78.constprop.0>
 800eee4:	4629      	mov	r1, r5
 800eee6:	4620      	mov	r0, r4
 800eee8:	f7ff ffec 	bl	800eec4 <funchclassifier78.constprop.0>
 800eeec:	493f      	ldr	r1, [pc, #252]	@ (800efec <funchclassifier78.constprop.0+0x128>)
 800eeee:	eb01 0388 	add.w	r3, r1, r8, lsl #2
 800eef2:	ed93 7a00 	vldr	s14, [r3]
 800eef6:	edd3 7a01 	vldr	s15, [r3, #4]
 800eefa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eefe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef02:	dc01      	bgt.n	800ef08 <funchclassifier78.constprop.0+0x44>
 800ef04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef08:	42be      	cmp	r6, r7
 800ef0a:	d867      	bhi.n	800efdc <funchclassifier78.constprop.0+0x118>
 800ef0c:	42a5      	cmp	r5, r4
 800ef0e:	d369      	bcc.n	800efe4 <funchclassifier78.constprop.0+0x120>
 800ef10:	4837      	ldr	r0, [pc, #220]	@ (800eff0 <funchclassifier78.constprop.0+0x12c>)
 800ef12:	4632      	mov	r2, r6
 800ef14:	2300      	movs	r3, #0
 800ef16:	e001      	b.n	800ef1c <funchclassifier78.constprop.0+0x58>
 800ef18:	42a5      	cmp	r5, r4
 800ef1a:	d337      	bcc.n	800ef8c <funchclassifier78.constprop.0+0xc8>
 800ef1c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
 800ef20:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800ef24:	edde 7a00 	vldr	s15, [lr]
 800ef28:	ed9c 7a00 	vldr	s14, [ip]
 800ef2c:	f103 0e01 	add.w	lr, r3, #1
 800ef30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ef34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef38:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
 800ef3c:	fa1f f38e 	uxth.w	r3, lr
 800ef40:	f102 0e01 	add.w	lr, r2, #1
 800ef44:	bf53      	iteet	pl
 800ef46:	3401      	addpl	r4, #1
 800ef48:	fa1f f28e 	uxthmi.w	r2, lr
 800ef4c:	eef0 7a47 	vmovmi.f32	s15, s14
 800ef50:	b2a4      	uxthpl	r4, r4
 800ef52:	4297      	cmp	r7, r2
 800ef54:	edcc 7a00 	vstr	s15, [ip]
 800ef58:	d2de      	bcs.n	800ef18 <funchclassifier78.constprop.0+0x54>
 800ef5a:	42a5      	cmp	r5, r4
 800ef5c:	d32e      	bcc.n	800efbc <funchclassifier78.constprop.0+0xf8>
 800ef5e:	eba4 0803 	sub.w	r8, r4, r3
 800ef62:	fa1f f888 	uxth.w	r8, r8
 800ef66:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 800ef6a:	469c      	mov	ip, r3
 800ef6c:	f103 0e01 	add.w	lr, r3, #1
 800ef70:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800ef74:	fa1f f38e 	uxth.w	r3, lr
 800ef78:	f854 eb04 	ldr.w	lr, [r4], #4
 800ef7c:	f8cc e000 	str.w	lr, [ip]
 800ef80:	eb03 0c08 	add.w	ip, r3, r8
 800ef84:	fa1f fc8c 	uxth.w	ip, ip
 800ef88:	4565      	cmp	r5, ip
 800ef8a:	d2ee      	bcs.n	800ef6a <funchclassifier78.constprop.0+0xa6>
 800ef8c:	4297      	cmp	r7, r2
 800ef8e:	d315      	bcc.n	800efbc <funchclassifier78.constprop.0+0xf8>
 800ef90:	eba2 0e03 	sub.w	lr, r2, r3
 800ef94:	fa1f fe8e 	uxth.w	lr, lr
 800ef98:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ef9c:	461c      	mov	r4, r3
 800ef9e:	f103 0c01 	add.w	ip, r3, #1
 800efa2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800efa6:	fa1f f38c 	uxth.w	r3, ip
 800efaa:	f852 cb04 	ldr.w	ip, [r2], #4
 800efae:	f8c4 c000 	str.w	ip, [r4]
 800efb2:	eb03 040e 	add.w	r4, r3, lr
 800efb6:	b2a4      	uxth	r4, r4
 800efb8:	42a7      	cmp	r7, r4
 800efba:	d2ef      	bcs.n	800ef9c <funchclassifier78.constprop.0+0xd8>
 800efbc:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800efc0:	2300      	movs	r3, #0
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800efc8:	3301      	adds	r3, #1
 800efca:	6814      	ldr	r4, [r2, #0]
 800efcc:	f841 4b04 	str.w	r4, [r1], #4
 800efd0:	18f2      	adds	r2, r6, r3
 800efd2:	b292      	uxth	r2, r2
 800efd4:	4295      	cmp	r5, r2
 800efd6:	d2f4      	bcs.n	800efc2 <funchclassifier78.constprop.0+0xfe>
 800efd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efdc:	4804      	ldr	r0, [pc, #16]	@ (800eff0 <funchclassifier78.constprop.0+0x12c>)
 800efde:	4632      	mov	r2, r6
 800efe0:	2300      	movs	r3, #0
 800efe2:	e7ba      	b.n	800ef5a <funchclassifier78.constprop.0+0x96>
 800efe4:	4802      	ldr	r0, [pc, #8]	@ (800eff0 <funchclassifier78.constprop.0+0x12c>)
 800efe6:	4632      	mov	r2, r6
 800efe8:	2300      	movs	r3, #0
 800efea:	e7d1      	b.n	800ef90 <funchclassifier78.constprop.0+0xcc>
 800efec:	2000289c 	.word	0x2000289c
 800eff0:	2000249c 	.word	0x2000249c

0800eff4 <_fminf>:
 800eff4:	f003 bd4e 	b.w	8012a94 <fminf>

0800eff8 <neai_classification_init>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	f600 42b4 	addw	r2, r0, #3252	@ 0xcb4
 800effe:	4b6d      	ldr	r3, [pc, #436]	@ (800f1b4 <neai_classification_init+0x1bc>)
 800f000:	ed92 7a00 	vldr	s14, [r2]
 800f004:	4a6c      	ldr	r2, [pc, #432]	@ (800f1b8 <neai_classification_init+0x1c0>)
 800f006:	496d      	ldr	r1, [pc, #436]	@ (800f1bc <neai_classification_init+0x1c4>)
 800f008:	ed2d 8b02 	vpush	{d8}
 800f00c:	25a2      	movs	r5, #162	@ 0xa2
 800f00e:	6018      	str	r0, [r3, #0]
 800f010:	4b6b      	ldr	r3, [pc, #428]	@ (800f1c0 <neai_classification_init+0x1c8>)
 800f012:	6015      	str	r5, [r2, #0]
 800f014:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800f018:	f500 62a2 	add.w	r2, r0, #1296	@ 0x510
 800f01c:	601a      	str	r2, [r3, #0]
 800f01e:	eeb4 7a67 	vcmp.f32	s14, s15
 800f022:	4b68      	ldr	r3, [pc, #416]	@ (800f1c4 <neai_classification_init+0x1cc>)
 800f024:	f500 7422 	add.w	r4, r0, #648	@ 0x288
 800f028:	f600 42a8 	addw	r2, r0, #3240	@ 0xca8
 800f02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f030:	600c      	str	r4, [r1, #0]
 800f032:	601a      	str	r2, [r3, #0]
 800f034:	f040 80a6 	bne.w	800f184 <neai_classification_init+0x18c>
 800f038:	f600 43b8 	addw	r3, r0, #3256	@ 0xcb8
 800f03c:	edd3 6a00 	vldr	s13, [r3]
 800f040:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800f044:	eef4 6a47 	vcmp.f32	s13, s14
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04c:	f040 809a 	bne.w	800f184 <neai_classification_init+0x18c>
 800f050:	f600 43bc 	addw	r3, r0, #3260	@ 0xcbc
 800f054:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800f1c8 <neai_classification_init+0x1d0>
 800f058:	edd3 6a00 	vldr	s13, [r3]
 800f05c:	eef4 6a47 	vcmp.f32	s13, s14
 800f060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f064:	f040 808e 	bne.w	800f184 <neai_classification_init+0x18c>
 800f068:	f500 634c 	add.w	r3, r0, #3264	@ 0xcc0
 800f06c:	edd3 6a00 	vldr	s13, [r3]
 800f070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f074:	eef4 6a47 	vcmp.f32	s13, s14
 800f078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f07c:	f040 8082 	bne.w	800f184 <neai_classification_init+0x18c>
 800f080:	f600 43c4 	addw	r3, r0, #3268	@ 0xcc4
 800f084:	ed93 7a00 	vldr	s14, [r3]
 800f088:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f090:	d178      	bne.n	800f184 <neai_classification_init+0x18c>
 800f092:	f600 43c8 	addw	r3, r0, #3272	@ 0xcc8
 800f096:	ed93 7a00 	vldr	s14, [r3]
 800f09a:	eeb4 7a67 	vcmp.f32	s14, s15
 800f09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0a2:	d16f      	bne.n	800f184 <neai_classification_init+0x18c>
 800f0a4:	f600 43cc 	addw	r3, r0, #3276	@ 0xccc
 800f0a8:	edd3 7a00 	vldr	s15, [r3]
 800f0ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0b4:	d166      	bne.n	800f184 <neai_classification_init+0x18c>
 800f0b6:	f500 634d 	add.w	r3, r0, #3280	@ 0xcd0
 800f0ba:	edd3 7a00 	vldr	s15, [r3]
 800f0be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c6:	d15d      	bne.n	800f184 <neai_classification_init+0x18c>
 800f0c8:	f600 43d4 	addw	r3, r0, #3284	@ 0xcd4
 800f0cc:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f1cc <neai_classification_init+0x1d4>
 800f0d0:	ed93 7a00 	vldr	s14, [r3]
 800f0d4:	eeb4 7a67 	vcmp.f32	s14, s15
 800f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0dc:	d152      	bne.n	800f184 <neai_classification_init+0x18c>
 800f0de:	f600 43d8 	addw	r3, r0, #3288	@ 0xcd8
 800f0e2:	ed93 7a00 	vldr	s14, [r3]
 800f0e6:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f0ea:	eeb4 7a67 	vcmp.f32	s14, s15
 800f0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f2:	d147      	bne.n	800f184 <neai_classification_init+0x18c>
 800f0f4:	f600 43dc 	addw	r3, r0, #3292	@ 0xcdc
 800f0f8:	edd3 7a00 	vldr	s15, [r3]
 800f0fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f104:	d13e      	bne.n	800f184 <neai_classification_init+0x18c>
 800f106:	f500 634e 	add.w	r3, r0, #3296	@ 0xce0
 800f10a:	ed93 7a00 	vldr	s14, [r3]
 800f10e:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f112:	eeb4 7a67 	vcmp.f32	s14, s15
 800f116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f11a:	d133      	bne.n	800f184 <neai_classification_init+0x18c>
 800f11c:	f600 43e4 	addw	r3, r0, #3300	@ 0xce4
 800f120:	ed93 7a00 	vldr	s14, [r3]
 800f124:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f128:	eeb4 7a67 	vcmp.f32	s14, s15
 800f12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f130:	d128      	bne.n	800f184 <neai_classification_init+0x18c>
 800f132:	f600 43e8 	addw	r3, r0, #3304	@ 0xce8
 800f136:	edd3 7a00 	vldr	s15, [r3]
 800f13a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f142:	d11f      	bne.n	800f184 <neai_classification_init+0x18c>
 800f144:	f600 43ec 	addw	r3, r0, #3308	@ 0xcec
 800f148:	edd3 7a00 	vldr	s15, [r3]
 800f14c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f154:	d116      	bne.n	800f184 <neai_classification_init+0x18c>
 800f156:	f500 634f 	add.w	r3, r0, #3312	@ 0xcf0
 800f15a:	edd3 7a00 	vldr	s15, [r3]
 800f15e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f166:	d10d      	bne.n	800f184 <neai_classification_init+0x18c>
 800f168:	f600 40f4 	addw	r0, r0, #3316	@ 0xcf4
 800f16c:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f1d0 <neai_classification_init+0x1d8>
 800f170:	ed90 7a00 	vldr	s14, [r0]
 800f174:	eeb4 7a67 	vcmp.f32	s14, s15
 800f178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17c:	bf14      	ite	ne
 800f17e:	237d      	movne	r3, #125	@ 0x7d
 800f180:	2300      	moveq	r3, #0
 800f182:	e000      	b.n	800f186 <neai_classification_init+0x18e>
 800f184:	237d      	movs	r3, #125	@ 0x7d
 800f186:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 800f1d4 <neai_classification_init+0x1dc>
 800f18a:	4c13      	ldr	r4, [pc, #76]	@ (800f1d8 <neai_classification_init+0x1e0>)
 800f18c:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800f1dc <neai_classification_init+0x1e4>
 800f190:	7023      	strb	r3, [r4, #0]
 800f192:	eeb0 0a48 	vmov.f32	s0, s16
 800f196:	f7ff ff2d 	bl	800eff4 <_fminf>
 800f19a:	eeb4 0a48 	vcmp.f32	s0, s16
 800f19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1a2:	bf1c      	itt	ne
 800f1a4:	2081      	movne	r0, #129	@ 0x81
 800f1a6:	7020      	strbne	r0, [r4, #0]
 800f1a8:	ecbd 8b02 	vpop	{d8}
 800f1ac:	bf08      	it	eq
 800f1ae:	7820      	ldrbeq	r0, [r4, #0]
 800f1b0:	bd38      	pop	{r3, r4, r5, pc}
 800f1b2:	bf00      	nop
 800f1b4:	20002f24 	.word	0x20002f24
 800f1b8:	20002498 	.word	0x20002498
 800f1bc:	20002f28 	.word	0x20002f28
 800f1c0:	20002494 	.word	0x20002494
 800f1c4:	20002490 	.word	0x20002490
 800f1c8:	43800000 	.word	0x43800000
 800f1cc:	42c80000 	.word	0x42c80000
 800f1d0:	49742400 	.word	0x49742400
 800f1d4:	3f8ccccd 	.word	0x3f8ccccd
 800f1d8:	20000070 	.word	0x20000070
 800f1dc:	40066666 	.word	0x40066666

0800f1e0 <neai_classification>:
 800f1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1e4:	ed2d 8b06 	vpush	{d8-d10}
 800f1e8:	4bc3      	ldr	r3, [pc, #780]	@ (800f4f8 <neai_classification+0x318>)
 800f1ea:	b089      	sub	sp, #36	@ 0x24
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	9303      	str	r3, [sp, #12]
 800f1f0:	4689      	mov	r9, r1
 800f1f2:	9204      	str	r2, [sp, #16]
 800f1f4:	b113      	cbz	r3, 800f1fc <neai_classification+0x1c>
 800f1f6:	2b81      	cmp	r3, #129	@ 0x81
 800f1f8:	f040 8610 	bne.w	800fe1c <neai_classification+0xc3c>
 800f1fc:	4fbf      	ldr	r7, [pc, #764]	@ (800f4fc <neai_classification+0x31c>)
 800f1fe:	4cc0      	ldr	r4, [pc, #768]	@ (800f500 <neai_classification+0x320>)
 800f200:	4ec0      	ldr	r6, [pc, #768]	@ (800f504 <neai_classification+0x324>)
 800f202:	eddf 8ac1 	vldr	s17, [pc, #772]	@ 800f508 <neai_classification+0x328>
 800f206:	9001      	str	r0, [sp, #4]
 800f208:	4603      	mov	r3, r0
 800f20a:	e9cd 7905 	strd	r7, r9, [sp, #20]
 800f20e:	3318      	adds	r3, #24
 800f210:	9302      	str	r3, [sp, #8]
 800f212:	46bb      	mov	fp, r7
 800f214:	f506 7800 	add.w	r8, r6, #512	@ 0x200
 800f218:	f5a4 6580 	sub.w	r5, r4, #1024	@ 0x400
 800f21c:	4bbb      	ldr	r3, [pc, #748]	@ (800f50c <neai_classification+0x32c>)
 800f21e:	9a01      	ldr	r2, [sp, #4]
 800f220:	f852 1b18 	ldr.w	r1, [r2], #24
 800f224:	f843 1b04 	str.w	r1, [r3], #4
 800f228:	429c      	cmp	r4, r3
 800f22a:	d1f9      	bne.n	800f220 <neai_classification+0x40>
 800f22c:	ed95 8a00 	vldr	s16, [r5]
 800f230:	4bb6      	ldr	r3, [pc, #728]	@ (800f50c <neai_classification+0x32c>)
 800f232:	eef0 7a48 	vmov.f32	s15, s16
 800f236:	ecb3 7a01 	vldmia	r3!, {s14}
 800f23a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f242:	bfd8      	it	le
 800f244:	eef0 7a47 	vmovle.f32	s15, s14
 800f248:	429c      	cmp	r4, r3
 800f24a:	d1f4      	bne.n	800f236 <neai_classification+0x56>
 800f24c:	4baf      	ldr	r3, [pc, #700]	@ (800f50c <neai_classification+0x32c>)
 800f24e:	edcb 7a42 	vstr	s15, [fp, #264]	@ 0x108
 800f252:	eeb0 7a48 	vmov.f32	s14, s16
 800f256:	ecf3 7a01 	vldmia	r3!, {s15}
 800f25a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f25e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f262:	bf58      	it	pl
 800f264:	eeb0 7a67 	vmovpl.f32	s14, s15
 800f268:	429c      	cmp	r4, r3
 800f26a:	d1f4      	bne.n	800f256 <neai_classification+0x76>
 800f26c:	4ba7      	ldr	r3, [pc, #668]	@ (800f50c <neai_classification+0x32c>)
 800f26e:	ed8b 7a54 	vstr	s14, [fp, #336]	@ 0x150
 800f272:	eef0 7a48 	vmov.f32	s15, s16
 800f276:	ecb3 7a01 	vldmia	r3!, {s14}
 800f27a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f282:	bf58      	it	pl
 800f284:	eef0 7a47 	vmovpl.f32	s15, s14
 800f288:	429c      	cmp	r4, r3
 800f28a:	d1f4      	bne.n	800f276 <neai_classification+0x96>
 800f28c:	4b9f      	ldr	r3, [pc, #636]	@ (800f50c <neai_classification+0x32c>)
 800f28e:	eeb0 7a48 	vmov.f32	s14, s16
 800f292:	ecf3 6a01 	vldmia	r3!, {s13}
 800f296:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f29e:	bfd8      	it	le
 800f2a0:	eeb0 7a66 	vmovle.f32	s14, s13
 800f2a4:	429c      	cmp	r4, r3
 800f2a6:	d1f4      	bne.n	800f292 <neai_classification+0xb2>
 800f2a8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f2ac:	4b97      	ldr	r3, [pc, #604]	@ (800f50c <neai_classification+0x32c>)
 800f2ae:	ed8b 7a30 	vstr	s14, [fp, #192]	@ 0xc0
 800f2b2:	eef0 7a48 	vmov.f32	s15, s16
 800f2b6:	ecb3 7a01 	vldmia	r3!, {s14}
 800f2ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c2:	bfd8      	it	le
 800f2c4:	eef0 7a47 	vmovle.f32	s15, s14
 800f2c8:	429c      	cmp	r4, r3
 800f2ca:	d1f4      	bne.n	800f2b6 <neai_classification+0xd6>
 800f2cc:	4b8f      	ldr	r3, [pc, #572]	@ (800f50c <neai_classification+0x32c>)
 800f2ce:	eeb0 7a48 	vmov.f32	s14, s16
 800f2d2:	eef0 7ae7 	vabs.f32	s15, s15
 800f2d6:	ecf3 6a01 	vldmia	r3!, {s13}
 800f2da:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e2:	bf58      	it	pl
 800f2e4:	eeb0 7a66 	vmovpl.f32	s14, s13
 800f2e8:	429c      	cmp	r4, r3
 800f2ea:	d1f4      	bne.n	800f2d6 <neai_classification+0xf6>
 800f2ec:	eeb0 7ac7 	vabs.f32	s14, s14
 800f2f0:	eef4 7a47 	vcmp.f32	s15, s14
 800f2f4:	4f86      	ldr	r7, [pc, #536]	@ (800f510 <neai_classification+0x330>)
 800f2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2fa:	bf48      	it	mi
 800f2fc:	eef0 7a47 	vmovmi.f32	s15, s14
 800f300:	edcb 7a06 	vstr	s15, [fp, #24]
 800f304:	eeb0 7a48 	vmov.f32	s14, s16
 800f308:	463b      	mov	r3, r7
 800f30a:	ecf3 7a01 	vldmia	r3!, {s15}
 800f30e:	429c      	cmp	r4, r3
 800f310:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f314:	d1f9      	bne.n	800f30a <neai_classification+0x12a>
 800f316:	ee27 7a28 	vmul.f32	s14, s14, s17
 800f31a:	4b7d      	ldr	r3, [pc, #500]	@ (800f510 <neai_classification+0x330>)
 800f31c:	ed8b 7a4e 	vstr	s14, [fp, #312]	@ 0x138
 800f320:	eef0 7a48 	vmov.f32	s15, s16
 800f324:	ecb3 7a01 	vldmia	r3!, {s14}
 800f328:	429c      	cmp	r4, r3
 800f32a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f32e:	d1f9      	bne.n	800f324 <neai_classification+0x144>
 800f330:	ee27 7aa8 	vmul.f32	s14, s15, s17
 800f334:	4b76      	ldr	r3, [pc, #472]	@ (800f510 <neai_classification+0x330>)
 800f336:	ee78 6a47 	vsub.f32	s13, s16, s14
 800f33a:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f33e:	ecf3 7a01 	vldmia	r3!, {s15}
 800f342:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f346:	429c      	cmp	r4, r3
 800f348:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f34c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f350:	d1f5      	bne.n	800f33e <neai_classification+0x15e>
 800f352:	ee66 6aa8 	vmul.f32	s13, s13, s17
 800f356:	4b6e      	ldr	r3, [pc, #440]	@ (800f510 <neai_classification+0x330>)
 800f358:	edcb 6a84 	vstr	s13, [fp, #528]	@ 0x210
 800f35c:	eef0 7a48 	vmov.f32	s15, s16
 800f360:	ecb3 7a01 	vldmia	r3!, {s14}
 800f364:	429c      	cmp	r4, r3
 800f366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f36a:	d1f9      	bne.n	800f360 <neai_classification+0x180>
 800f36c:	ee67 6aa8 	vmul.f32	s13, s15, s17
 800f370:	4b67      	ldr	r3, [pc, #412]	@ (800f510 <neai_classification+0x330>)
 800f372:	ee38 7a66 	vsub.f32	s14, s16, s13
 800f376:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f37a:	ecf3 7a01 	vldmia	r3!, {s15}
 800f37e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f382:	429c      	cmp	r4, r3
 800f384:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f38c:	d1f5      	bne.n	800f37a <neai_classification+0x19a>
 800f38e:	ee27 0a28 	vmul.f32	s0, s14, s17
 800f392:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f39a:	f100 855e 	bmi.w	800fe5a <neai_classification+0xc7a>
 800f39e:	eeb1 7ac0 	vsqrt.f32	s14, s0
 800f3a2:	4b5b      	ldr	r3, [pc, #364]	@ (800f510 <neai_classification+0x330>)
 800f3a4:	eef0 7a48 	vmov.f32	s15, s16
 800f3a8:	ed8b 7a24 	vstr	s14, [fp, #144]	@ 0x90
 800f3ac:	ecb3 7a01 	vldmia	r3!, {s14}
 800f3b0:	429c      	cmp	r4, r3
 800f3b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3b6:	d1f9      	bne.n	800f3ac <neai_classification+0x1cc>
 800f3b8:	4b55      	ldr	r3, [pc, #340]	@ (800f510 <neai_classification+0x330>)
 800f3ba:	ee27 9aa8 	vmul.f32	s18, s15, s17
 800f3be:	eef0 7a48 	vmov.f32	s15, s16
 800f3c2:	ecb3 7a01 	vldmia	r3!, {s14}
 800f3c6:	429c      	cmp	r4, r3
 800f3c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3cc:	d1f9      	bne.n	800f3c2 <neai_classification+0x1e2>
 800f3ce:	ee67 6aa8 	vmul.f32	s13, s15, s17
 800f3d2:	4b4f      	ldr	r3, [pc, #316]	@ (800f510 <neai_classification+0x330>)
 800f3d4:	ee38 7a66 	vsub.f32	s14, s16, s13
 800f3d8:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f3dc:	ecf3 7a01 	vldmia	r3!, {s15}
 800f3e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3e4:	429c      	cmp	r4, r3
 800f3e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f3ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f3ee:	d1f5      	bne.n	800f3dc <neai_classification+0x1fc>
 800f3f0:	ee27 0a28 	vmul.f32	s0, s14, s17
 800f3f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3fc:	f100 8560 	bmi.w	800fec0 <neai_classification+0xce0>
 800f400:	eeb1 7ac0 	vsqrt.f32	s14, s0
 800f404:	4b42      	ldr	r3, [pc, #264]	@ (800f510 <neai_classification+0x330>)
 800f406:	ee78 7a49 	vsub.f32	s15, s16, s18
 800f40a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f40e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f412:	ecf3 7a01 	vldmia	r3!, {s15}
 800f416:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f41a:	429c      	cmp	r4, r3
 800f41c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f420:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f424:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f428:	d1f3      	bne.n	800f412 <neai_classification+0x232>
 800f42a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800f42e:	4b38      	ldr	r3, [pc, #224]	@ (800f510 <neai_classification+0x330>)
 800f430:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f434:	eef0 7a48 	vmov.f32	s15, s16
 800f438:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800f43c:	ee27 7a28 	vmul.f32	s14, s14, s17
 800f440:	ed8b 7a90 	vstr	s14, [fp, #576]	@ 0x240
 800f444:	ecb3 7a01 	vldmia	r3!, {s14}
 800f448:	429c      	cmp	r4, r3
 800f44a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f44e:	d1f9      	bne.n	800f444 <neai_classification+0x264>
 800f450:	4b2f      	ldr	r3, [pc, #188]	@ (800f510 <neai_classification+0x330>)
 800f452:	ee27 9aa8 	vmul.f32	s18, s15, s17
 800f456:	eef0 7a48 	vmov.f32	s15, s16
 800f45a:	ecb3 7a01 	vldmia	r3!, {s14}
 800f45e:	42a3      	cmp	r3, r4
 800f460:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f464:	d1f9      	bne.n	800f45a <neai_classification+0x27a>
 800f466:	ee67 6aa8 	vmul.f32	s13, s15, s17
 800f46a:	4b29      	ldr	r3, [pc, #164]	@ (800f510 <neai_classification+0x330>)
 800f46c:	ee38 7a66 	vsub.f32	s14, s16, s13
 800f470:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f474:	ecf3 7a01 	vldmia	r3!, {s15}
 800f478:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f47c:	429c      	cmp	r4, r3
 800f47e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f482:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f486:	d1f5      	bne.n	800f474 <neai_classification+0x294>
 800f488:	ee27 0a28 	vmul.f32	s0, s14, s17
 800f48c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f494:	f100 850e 	bmi.w	800feb4 <neai_classification+0xcd4>
 800f498:	eeb1 7ac0 	vsqrt.f32	s14, s0
 800f49c:	4b1c      	ldr	r3, [pc, #112]	@ (800f510 <neai_classification+0x330>)
 800f49e:	ee78 7a49 	vsub.f32	s15, s16, s18
 800f4a2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f4a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f4aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f4ae:	ecf3 7a01 	vldmia	r3!, {s15}
 800f4b2:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800f4b6:	429c      	cmp	r4, r3
 800f4b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800f4bc:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f4c0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f4c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f4c8:	d1f1      	bne.n	800f4ae <neai_classification+0x2ce>
 800f4ca:	ee67 7a07 	vmul.f32	s15, s14, s14
 800f4ce:	eef0 5a08 	vmov.f32	s11, #8	@ 0x40400000  3.0
 800f4d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4d6:	4a0d      	ldr	r2, [pc, #52]	@ (800f50c <neai_classification+0x32c>)
 800f4d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f4dc:	eeb0 6a48 	vmov.f32	s12, s16
 800f4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4e4:	2100      	movs	r1, #0
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800f4ec:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f4f0:	edcb 7a96 	vstr	s15, [fp, #600]	@ 0x258
 800f4f4:	e00e      	b.n	800f514 <neai_classification+0x334>
 800f4f6:	bf00      	nop
 800f4f8:	20000070 	.word	0x20000070
 800f4fc:	20002c9c 	.word	0x20002c9c
 800f500:	20002c9c 	.word	0x20002c9c
 800f504:	2000249c 	.word	0x2000249c
 800f508:	3b800000 	.word	0x3b800000
 800f50c:	2000289c 	.word	0x2000289c
 800f510:	200028a0 	.word	0x200028a0
 800f514:	edd2 7a01 	vldr	s15, [r2, #4]
 800f518:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f51c:	3302      	adds	r3, #2
 800f51e:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800f522:	ed92 6a02 	vldr	s12, [r2, #8]
 800f526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f52a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f52e:	bf44      	itt	mi
 800f530:	3101      	addmi	r1, #1
 800f532:	b289      	uxthmi	r1, r1
 800f534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53c:	b29b      	uxth	r3, r3
 800f53e:	f101 0001 	add.w	r0, r1, #1
 800f542:	bf48      	it	mi
 800f544:	b281      	uxthmi	r1, r0
 800f546:	2bff      	cmp	r3, #255	@ 0xff
 800f548:	f102 0208 	add.w	r2, r2, #8
 800f54c:	d1e2      	bne.n	800f514 <neai_classification+0x334>
 800f54e:	4be0      	ldr	r3, [pc, #896]	@ (800f8d0 <neai_classification+0x6f0>)
 800f550:	461a      	mov	r2, r3
 800f552:	ecf2 7a01 	vldmia	r2!, {s15}
 800f556:	ed12 7a02 	vldr	s14, [r2, #-8]
 800f55a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f55e:	1c48      	adds	r0, r1, #1
 800f560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	bf48      	it	mi
 800f56a:	b281      	uxthmi	r1, r0
 800f56c:	4294      	cmp	r4, r2
 800f56e:	d1f0      	bne.n	800f552 <neai_classification+0x372>
 800f570:	ee07 1a90 	vmov	s15, r1
 800f574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f578:	4ad6      	ldr	r2, [pc, #856]	@ (800f8d4 <neai_classification+0x6f4>)
 800f57a:	eceb 7a01 	vstmia	fp!, {s15}
 800f57e:	eeb0 7a48 	vmov.f32	s14, s16
 800f582:	ecf2 7a01 	vldmia	r2!, {s15}
 800f586:	4294      	cmp	r4, r2
 800f588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f58c:	d1f9      	bne.n	800f582 <neai_classification+0x3a2>
 800f58e:	ee27 7a28 	vmul.f32	s14, s14, s17
 800f592:	48d1      	ldr	r0, [pc, #836]	@ (800f8d8 <neai_classification+0x6f8>)
 800f594:	ee78 7a47 	vsub.f32	s15, s16, s14
 800f598:	2200      	movs	r2, #0
 800f59a:	2101      	movs	r1, #1
 800f59c:	edd0 6a01 	vldr	s13, [r0, #4]
 800f5a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f5a4:	f102 0c01 	add.w	ip, r2, #1
 800f5a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5ac:	3102      	adds	r1, #2
 800f5ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5b2:	edd0 7a02 	vldr	s15, [r0, #8]
 800f5b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5be:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f5c2:	bf48      	it	mi
 800f5c4:	fa1f f28c 	uxthmi.w	r2, ip
 800f5c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800f5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5d0:	b289      	uxth	r1, r1
 800f5d2:	f102 0c01 	add.w	ip, r2, #1
 800f5d6:	bf48      	it	mi
 800f5d8:	fa1f f28c 	uxthmi.w	r2, ip
 800f5dc:	29ff      	cmp	r1, #255	@ 0xff
 800f5de:	f100 0008 	add.w	r0, r0, #8
 800f5e2:	d1db      	bne.n	800f59c <neai_classification+0x3bc>
 800f5e4:	ecf3 6a01 	vldmia	r3!, {s13}
 800f5e8:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f5ec:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800f5f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5f4:	1c51      	adds	r1, r2, #1
 800f5f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f5fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f602:	bf48      	it	mi
 800f604:	b28a      	uxthmi	r2, r1
 800f606:	42a3      	cmp	r3, r4
 800f608:	d1ec      	bne.n	800f5e4 <neai_classification+0x404>
 800f60a:	ee07 2a90 	vmov	s15, r2
 800f60e:	ee68 9a08 	vmul.f32	s19, s16, s16
 800f612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f616:	4baf      	ldr	r3, [pc, #700]	@ (800f8d4 <neai_classification+0x6f4>)
 800f618:	edcb 7a3b 	vstr	s15, [fp, #236]	@ 0xec
 800f61c:	eeb0 7a69 	vmov.f32	s14, s19
 800f620:	ecf3 7a01 	vldmia	r3!, {s15}
 800f624:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f628:	429c      	cmp	r4, r3
 800f62a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f62e:	d1f7      	bne.n	800f620 <neai_classification+0x440>
 800f630:	ee27 0a28 	vmul.f32	s0, s14, s17
 800f634:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f63c:	f100 8434 	bmi.w	800fea8 <neai_classification+0xcc8>
 800f640:	eef1 7ac0 	vsqrt.f32	s15, s0
 800f644:	4ba3      	ldr	r3, [pc, #652]	@ (800f8d4 <neai_classification+0x6f4>)
 800f646:	eeb0 aac8 	vabs.f32	s20, s16
 800f64a:	eeb0 7a4a 	vmov.f32	s14, s20
 800f64e:	edcb 7a29 	vstr	s15, [fp, #164]	@ 0xa4
 800f652:	ecf3 7a01 	vldmia	r3!, {s15}
 800f656:	eef0 7ae7 	vabs.f32	s15, s15
 800f65a:	42a3      	cmp	r3, r4
 800f65c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f660:	d1f7      	bne.n	800f652 <neai_classification+0x472>
 800f662:	4b9c      	ldr	r3, [pc, #624]	@ (800f8d4 <neai_classification+0x6f4>)
 800f664:	ee27 9a28 	vmul.f32	s18, s14, s17
 800f668:	eeb0 7a69 	vmov.f32	s14, s19
 800f66c:	ecf3 7a01 	vldmia	r3!, {s15}
 800f670:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f674:	429c      	cmp	r4, r3
 800f676:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f67a:	d1f7      	bne.n	800f66c <neai_classification+0x48c>
 800f67c:	ee27 0a28 	vmul.f32	s0, s14, s17
 800f680:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f688:	f100 8408 	bmi.w	800fe9c <neai_classification+0xcbc>
 800f68c:	eef1 7ac0 	vsqrt.f32	s15, s0
 800f690:	4b90      	ldr	r3, [pc, #576]	@ (800f8d4 <neai_classification+0x6f4>)
 800f692:	eec7 6a89 	vdiv.f32	s13, s15, s18
 800f696:	eeb0 7a4a 	vmov.f32	s14, s20
 800f69a:	edcb 6a11 	vstr	s13, [fp, #68]	@ 0x44
 800f69e:	ecf3 7a01 	vldmia	r3!, {s15}
 800f6a2:	eef0 7ae7 	vabs.f32	s15, s15
 800f6a6:	42a3      	cmp	r3, r4
 800f6a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f6ac:	d1f7      	bne.n	800f69e <neai_classification+0x4be>
 800f6ae:	4b8a      	ldr	r3, [pc, #552]	@ (800f8d8 <neai_classification+0x6f8>)
 800f6b0:	ee27 6a28 	vmul.f32	s12, s14, s17
 800f6b4:	eeb0 7a48 	vmov.f32	s14, s16
 800f6b8:	ecf3 7a01 	vldmia	r3!, {s15}
 800f6bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6c4:	bfd8      	it	le
 800f6c6:	eeb0 7a67 	vmovle.f32	s14, s15
 800f6ca:	42a3      	cmp	r3, r4
 800f6cc:	d1f4      	bne.n	800f6b8 <neai_classification+0x4d8>
 800f6ce:	4b82      	ldr	r3, [pc, #520]	@ (800f8d8 <neai_classification+0x6f8>)
 800f6d0:	eef0 7a48 	vmov.f32	s15, s16
 800f6d4:	eeb0 7ac7 	vabs.f32	s14, s14
 800f6d8:	ecf3 6a01 	vldmia	r3!, {s13}
 800f6dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800f6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6e4:	bf58      	it	pl
 800f6e6:	eef0 7a66 	vmovpl.f32	s15, s13
 800f6ea:	42a3      	cmp	r3, r4
 800f6ec:	d1f4      	bne.n	800f6d8 <neai_classification+0x4f8>
 800f6ee:	eef0 7ae7 	vabs.f32	s15, s15
 800f6f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6fa:	bf58      	it	pl
 800f6fc:	eec7 6a06 	vdivpl.f32	s13, s14, s12
 800f700:	4b74      	ldr	r3, [pc, #464]	@ (800f8d4 <neai_classification+0x6f4>)
 800f702:	bf48      	it	mi
 800f704:	eec7 6a86 	vdivmi.f32	s13, s15, s12
 800f708:	eeb1 7aca 	vsqrt.f32	s14, s20
 800f70c:	edcb 6a77 	vstr	s13, [fp, #476]	@ 0x1dc
 800f710:	ecf3 7a01 	vldmia	r3!, {s15}
 800f714:	eef0 7ae7 	vabs.f32	s15, s15
 800f718:	eef1 6ae7 	vsqrt.f32	s13, s15
 800f71c:	42a3      	cmp	r3, r4
 800f71e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f722:	d1f5      	bne.n	800f710 <neai_classification+0x530>
 800f724:	ee67 6a28 	vmul.f32	s13, s14, s17
 800f728:	4b6b      	ldr	r3, [pc, #428]	@ (800f8d8 <neai_classification+0x6f8>)
 800f72a:	eef0 7a48 	vmov.f32	s15, s16
 800f72e:	ecb3 7a01 	vldmia	r3!, {s14}
 800f732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f73a:	bfd8      	it	le
 800f73c:	eef0 7a47 	vmovle.f32	s15, s14
 800f740:	429c      	cmp	r4, r3
 800f742:	d1f4      	bne.n	800f72e <neai_classification+0x54e>
 800f744:	4b64      	ldr	r3, [pc, #400]	@ (800f8d8 <neai_classification+0x6f8>)
 800f746:	eeb0 7a48 	vmov.f32	s14, s16
 800f74a:	eef0 7ae7 	vabs.f32	s15, s15
 800f74e:	ecb3 6a01 	vldmia	r3!, {s12}
 800f752:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	bf58      	it	pl
 800f75c:	eeb0 7a46 	vmovpl.f32	s14, s12
 800f760:	42a3      	cmp	r3, r4
 800f762:	d1f4      	bne.n	800f74e <neai_classification+0x56e>
 800f764:	eeb0 7ac7 	vabs.f32	s14, s14
 800f768:	eef4 7a47 	vcmp.f32	s15, s14
 800f76c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800f770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f774:	bf48      	it	mi
 800f776:	eef0 7a47 	vmovmi.f32	s15, s14
 800f77a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f77e:	4b56      	ldr	r3, [pc, #344]	@ (800f8d8 <neai_classification+0x6f8>)
 800f780:	eef0 7a48 	vmov.f32	s15, s16
 800f784:	ed8b 7a71 	vstr	s14, [fp, #452]	@ 0x1c4
 800f788:	ecb3 7a01 	vldmia	r3!, {s14}
 800f78c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f794:	bfd8      	it	le
 800f796:	eef0 7a47 	vmovle.f32	s15, s14
 800f79a:	42a3      	cmp	r3, r4
 800f79c:	d1f4      	bne.n	800f788 <neai_classification+0x5a8>
 800f79e:	4b4e      	ldr	r3, [pc, #312]	@ (800f8d8 <neai_classification+0x6f8>)
 800f7a0:	eeb0 7a48 	vmov.f32	s14, s16
 800f7a4:	eeb0 9ae7 	vabs.f32	s18, s15
 800f7a8:	ecf3 7a01 	vldmia	r3!, {s15}
 800f7ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7b4:	bf58      	it	pl
 800f7b6:	eeb0 7a67 	vmovpl.f32	s14, s15
 800f7ba:	429c      	cmp	r4, r3
 800f7bc:	d1f4      	bne.n	800f7a8 <neai_classification+0x5c8>
 800f7be:	eeb0 7ac7 	vabs.f32	s14, s14
 800f7c2:	eeb4 9a47 	vcmp.f32	s18, s14
 800f7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ca:	4b42      	ldr	r3, [pc, #264]	@ (800f8d4 <neai_classification+0x6f4>)
 800f7cc:	bf48      	it	mi
 800f7ce:	eeb0 9a47 	vmovmi.f32	s18, s14
 800f7d2:	ecf3 7a01 	vldmia	r3!, {s15}
 800f7d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f7da:	42a3      	cmp	r3, r4
 800f7dc:	ee79 9aa7 	vadd.f32	s19, s19, s15
 800f7e0:	d1f7      	bne.n	800f7d2 <neai_classification+0x5f2>
 800f7e2:	ee29 0aa8 	vmul.f32	s0, s19, s17
 800f7e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ee:	f100 8350 	bmi.w	800fe92 <neai_classification+0xcb2>
 800f7f2:	eef1 7ac0 	vsqrt.f32	s15, s0
 800f7f6:	4a38      	ldr	r2, [pc, #224]	@ (800f8d8 <neai_classification+0x6f8>)
 800f7f8:	2302      	movs	r3, #2
 800f7fa:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800f7fe:	ed95 6a01 	vldr	s12, [r5, #4]
 800f802:	ed8b 7a6b 	vstr	s14, [fp, #428]	@ 0x1ac
 800f806:	ee76 7a48 	vsub.f32	s15, s12, s16
 800f80a:	eef0 7ae7 	vabs.f32	s15, s15
 800f80e:	edd2 6a02 	vldr	s13, [r2, #8]
 800f812:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800f816:	ed92 6a03 	vldr	s12, [r2, #12]
 800f81a:	eeb0 7ac7 	vabs.f32	s14, s14
 800f81e:	ee76 6a66 	vsub.f32	s13, s12, s13
 800f822:	3302      	adds	r3, #2
 800f824:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f828:	b29b      	uxth	r3, r3
 800f82a:	eeb0 7ae6 	vabs.f32	s14, s13
 800f82e:	2bfe      	cmp	r3, #254	@ 0xfe
 800f830:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f834:	f102 0208 	add.w	r2, r2, #8
 800f838:	d1e9      	bne.n	800f80e <neai_classification+0x62e>
 800f83a:	4b28      	ldr	r3, [pc, #160]	@ (800f8dc <neai_classification+0x6fc>)
 800f83c:	ecb3 7a01 	vldmia	r3!, {s14}
 800f840:	ed53 6a02 	vldr	s13, [r3, #-8]
 800f844:	ee37 7a66 	vsub.f32	s14, s14, s13
 800f848:	42a3      	cmp	r3, r4
 800f84a:	eeb0 7ac7 	vabs.f32	s14, s14
 800f84e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f852:	d1f3      	bne.n	800f83c <neai_classification+0x65c>
 800f854:	edcb 7a59 	vstr	s15, [fp, #356]	@ 0x164
 800f858:	21ff      	movs	r1, #255	@ 0xff
 800f85a:	2000      	movs	r0, #0
 800f85c:	f7ff fb32 	bl	800eec4 <funchclassifier78.constprop.0>
 800f860:	ed95 5a7f 	vldr	s10, [r5, #508]	@ 0x1fc
 800f864:	ed95 3a0c 	vldr	s6, [r5, #48]	@ 0x30
 800f868:	edd5 3a3f 	vldr	s7, [r5, #252]	@ 0xfc
 800f86c:	ed95 4abf 	vldr	s8, [r5, #764]	@ 0x2fc
 800f870:	edd5 4af2 	vldr	s9, [r5, #968]	@ 0x3c8
 800f874:	edd5 5a0d 	vldr	s11, [r5, #52]	@ 0x34
 800f878:	ed95 6a40 	vldr	s12, [r5, #256]	@ 0x100
 800f87c:	edd5 6ac0 	vldr	s13, [r5, #768]	@ 0x300
 800f880:	ed95 7af3 	vldr	s14, [r5, #972]	@ 0x3cc
 800f884:	edd5 7a80 	vldr	s15, [r5, #512]	@ 0x200
 800f888:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800f8e0 <neai_classification+0x700>
 800f88c:	eddf 9a15 	vldr	s19, [pc, #84]	@ 800f8e4 <neai_classification+0x704>
 800f890:	f8df 9040 	ldr.w	r9, [pc, #64]	@ 800f8d4 <neai_classification+0x6f4>
 800f894:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f898:	ee75 5ac3 	vsub.f32	s11, s11, s6
 800f89c:	ee36 6a63 	vsub.f32	s12, s12, s7
 800f8a0:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800f8a4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800f8a8:	eef5 2a00 	vmov.f32	s5, #80	@ 0x3e800000  0.250
 800f8ac:	eef6 1a08 	vmov.f32	s3, #104	@ 0x3f400000  0.750
 800f8b0:	eeb6 2a00 	vmov.f32	s4, #96	@ 0x3f000000  0.5
 800f8b4:	ee65 5a81 	vmul.f32	s11, s11, s2
 800f8b8:	ee26 6a21 	vmul.f32	s12, s12, s3
 800f8bc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800f8c0:	ee27 7a22 	vmul.f32	s14, s14, s5
 800f8c4:	ee67 7a82 	vmul.f32	s15, s15, s4
 800f8c8:	ee75 5a83 	vadd.f32	s11, s11, s6
 800f8cc:	e00c      	b.n	800f8e8 <neai_classification+0x708>
 800f8ce:	bf00      	nop
 800f8d0:	20002c98 	.word	0x20002c98
 800f8d4:	200028a0 	.word	0x200028a0
 800f8d8:	2000289c 	.word	0x2000289c
 800f8dc:	20002c94 	.word	0x20002c94
 800f8e0:	3f3ffff0 	.word	0x3f3ffff0
 800f8e4:	00000000 	.word	0x00000000
 800f8e8:	ee77 7a85 	vadd.f32	s15, s15, s10
 800f8ec:	ee36 6a23 	vadd.f32	s12, s12, s7
 800f8f0:	ee76 6a84 	vadd.f32	s13, s13, s8
 800f8f4:	ee37 7a24 	vadd.f32	s14, s14, s9
 800f8f8:	ed95 5a00 	vldr	s10, [r5]
 800f8fc:	edcb 5a1d 	vstr	s11, [fp, #116]	@ 0x74
 800f900:	ed8b 6a7d 	vstr	s12, [fp, #500]	@ 0x1f4
 800f904:	edcb 6a17 	vstr	s13, [fp, #92]	@ 0x5c
 800f908:	ed8b 7a0b 	vstr	s14, [fp, #44]	@ 0x2c
 800f90c:	edcb 7a47 	vstr	s15, [fp, #284]	@ 0x11c
 800f910:	2301      	movs	r3, #1
 800f912:	ecb9 9a01 	vldmia	r9!, {s18}
 800f916:	eeb4 5a49 	vcmp.f32	s10, s18
 800f91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f91e:	f103 0201 	add.w	r2, r3, #1
 800f922:	f040 8281 	bne.w	800fe28 <neai_classification+0xc48>
 800f926:	454c      	cmp	r4, r9
 800f928:	b293      	uxth	r3, r2
 800f92a:	d1f2      	bne.n	800f912 <neai_classification+0x732>
 800f92c:	ee07 3a90 	vmov	s15, r3
 800f930:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f934:	ee28 8a28 	vmul.f32	s16, s16, s17
 800f938:	eeb0 0a48 	vmov.f32	s0, s16
 800f93c:	f003 f854 	bl	80129e8 <logf>
 800f940:	ee68 7a00 	vmul.f32	s15, s16, s0
 800f944:	4bd0      	ldr	r3, [pc, #832]	@ (800fc88 <neai_classification+0xaa8>)
 800f946:	9a01      	ldr	r2, [sp, #4]
 800f948:	ee77 7aa9 	vadd.f32	s15, s15, s19
 800f94c:	eef1 7a67 	vneg.f32	s15, s15
 800f950:	edcb 7a5f 	vstr	s15, [fp, #380]	@ 0x17c
 800f954:	f852 1b18 	ldr.w	r1, [r2], #24
 800f958:	f843 1b04 	str.w	r1, [r3], #4
 800f95c:	429c      	cmp	r4, r3
 800f95e:	d1f9      	bne.n	800f954 <neai_classification+0x774>
 800f960:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f964:	2100      	movs	r1, #0
 800f966:	48c9      	ldr	r0, [pc, #804]	@ (800fc8c <neai_classification+0xaac>)
 800f968:	f001 f9ce 	bl	8010d08 <memset>
 800f96c:	2100      	movs	r1, #0
 800f96e:	48c6      	ldr	r0, [pc, #792]	@ (800fc88 <neai_classification+0xaa8>)
 800f970:	460a      	mov	r2, r1
 800f972:	b28b      	uxth	r3, r1
 800f974:	429a      	cmp	r2, r3
 800f976:	d909      	bls.n	800f98c <neai_classification+0x7ac>
 800f978:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800f97c:	f8d0 c000 	ldr.w	ip, [r0]
 800f980:	f8d3 e000 	ldr.w	lr, [r3]
 800f984:	f8c0 e000 	str.w	lr, [r0]
 800f988:	f8c3 c000 	str.w	ip, [r3]
 800f98c:	2a7f      	cmp	r2, #127	@ 0x7f
 800f98e:	f04f 0380 	mov.w	r3, #128	@ 0x80
 800f992:	d904      	bls.n	800f99e <neai_classification+0x7be>
 800f994:	1ad2      	subs	r2, r2, r3
 800f996:	b292      	uxth	r2, r2
 800f998:	085b      	lsrs	r3, r3, #1
 800f99a:	429a      	cmp	r2, r3
 800f99c:	d2fa      	bcs.n	800f994 <neai_classification+0x7b4>
 800f99e:	3101      	adds	r1, #1
 800f9a0:	441a      	add	r2, r3
 800f9a2:	29ff      	cmp	r1, #255	@ 0xff
 800f9a4:	b292      	uxth	r2, r2
 800f9a6:	f100 0004 	add.w	r0, r0, #4
 800f9aa:	d1e2      	bne.n	800f972 <neai_classification+0x792>
 800f9ac:	ed9f 9ac3 	vldr	s18, [pc, #780]	@ 800fcbc <neai_classification+0xadc>
 800f9b0:	9707      	str	r7, [sp, #28]
 800f9b2:	f04f 0a08 	mov.w	sl, #8
 800f9b6:	4633      	mov	r3, r6
 800f9b8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f9bc:	4656      	mov	r6, sl
 800f9be:	eef0 aa49 	vmov.f32	s21, s18
 800f9c2:	eeb7 aa00 	vmov.f32	s20, #112	@ 0x3f800000  1.0
 800f9c6:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 800f9ca:	f04f 0901 	mov.w	r9, #1
 800f9ce:	469a      	mov	sl, r3
 800f9d0:	464f      	mov	r7, r9
 800f9d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f9d6:	fa1f f989 	uxth.w	r9, r9
 800f9da:	2f00      	cmp	r7, #0
 800f9dc:	d051      	beq.n	800fa82 <neai_classification+0x8a2>
 800f9de:	1e78      	subs	r0, r7, #1
 800f9e0:	b280      	uxth	r0, r0
 800f9e2:	28ff      	cmp	r0, #255	@ 0xff
 800f9e4:	f04f 0100 	mov.w	r1, #0
 800f9e8:	eef0 6a6a 	vmov.f32	s13, s21
 800f9ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f9f0:	bf28      	it	cs
 800f9f2:	20ff      	movcs	r0, #255	@ 0xff
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	18fa      	adds	r2, r7, r3
 800f9f8:	b292      	uxth	r2, r2
 800f9fa:	eb05 0c82 	add.w	ip, r5, r2, lsl #2
 800f9fe:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800fa02:	eddc 5a00 	vldr	s11, [ip]
 800fa06:	ed92 7a00 	vldr	s14, [r2]
 800fa0a:	ee27 6aa5 	vmul.f32	s12, s15, s11
 800fa0e:	ee26 5a87 	vmul.f32	s10, s13, s14
 800fa12:	ee66 5aa5 	vmul.f32	s11, s13, s11
 800fa16:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fa1a:	eb05 0e83 	add.w	lr, r5, r3, lsl #2
 800fa1e:	ee37 7a25 	vadd.f32	s14, s14, s11
 800fa22:	ee36 6a45 	vsub.f32	s12, s12, s10
 800fa26:	edde 5a00 	vldr	s11, [lr]
 800fa2a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800fa2e:	edcc 5a00 	vstr	s11, [ip]
 800fa32:	edde 5a00 	vldr	s11, [lr]
 800fa36:	ee35 6a86 	vadd.f32	s12, s11, s12
 800fa3a:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 800fa3e:	ed8e 6a00 	vstr	s12, [lr]
 800fa42:	ed9c 6a00 	vldr	s12, [ip]
 800fa46:	ee36 6a47 	vsub.f32	s12, s12, s14
 800fa4a:	444b      	add	r3, r9
 800fa4c:	ed82 6a00 	vstr	s12, [r2]
 800fa50:	ed9c 6a00 	vldr	s12, [ip]
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	ee36 7a07 	vadd.f32	s14, s12, s14
 800fa5a:	2bff      	cmp	r3, #255	@ 0xff
 800fa5c:	ed8c 7a00 	vstr	s14, [ip]
 800fa60:	d9c9      	bls.n	800f9f6 <neai_classification+0x816>
 800fa62:	3101      	adds	r1, #1
 800fa64:	ee66 5a89 	vmul.f32	s11, s13, s18
 800fa68:	ee27 6a89 	vmul.f32	s12, s15, s18
 800fa6c:	ee28 7a27 	vmul.f32	s14, s16, s15
 800fa70:	ee66 6a88 	vmul.f32	s13, s13, s16
 800fa74:	b28b      	uxth	r3, r1
 800fa76:	4283      	cmp	r3, r0
 800fa78:	ee77 7a65 	vsub.f32	s15, s14, s11
 800fa7c:	ee76 6a26 	vadd.f32	s13, s12, s13
 800fa80:	d9b9      	bls.n	800f9f6 <neai_classification+0x816>
 800fa82:	ee3a 0a48 	vsub.f32	s0, s20, s16
 800fa86:	ee20 0a29 	vmul.f32	s0, s0, s19
 800fa8a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fa8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa92:	f100 81f5 	bmi.w	800fe80 <neai_classification+0xca0>
 800fa96:	eeb1 9ac0 	vsqrt.f32	s18, s0
 800fa9a:	ee38 0a0a 	vadd.f32	s0, s16, s20
 800fa9e:	eeb1 9a49 	vneg.f32	s18, s18
 800faa2:	ee20 0a29 	vmul.f32	s0, s0, s19
 800faa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800faaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faae:	f100 81e2 	bmi.w	800fe76 <neai_classification+0xc96>
 800fab2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800fab6:	3e01      	subs	r6, #1
 800fab8:	b2b6      	uxth	r6, r6
 800faba:	2e00      	cmp	r6, #0
 800fabc:	d188      	bne.n	800f9d0 <neai_classification+0x7f0>
 800fabe:	46b2      	mov	sl, r6
 800fac0:	4e72      	ldr	r6, [pc, #456]	@ (800fc8c <neai_classification+0xaac>)
 800fac2:	9f07      	ldr	r7, [sp, #28]
 800fac4:	4b70      	ldr	r3, [pc, #448]	@ (800fc88 <neai_classification+0xaa8>)
 800fac6:	46b1      	mov	r9, r6
 800fac8:	4632      	mov	r2, r6
 800faca:	eddf 6a71 	vldr	s13, [pc, #452]	@ 800fc90 <neai_classification+0xab0>
 800face:	ed93 7a00 	vldr	s14, [r3]
 800fad2:	edd2 7a00 	vldr	s15, [r2]
 800fad6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fada:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fade:	eca3 7a01 	vstmia	r3!, {s14}
 800fae2:	429c      	cmp	r4, r3
 800fae4:	ece2 7a01 	vstmia	r2!, {s15}
 800fae8:	d1f1      	bne.n	800face <neai_classification+0x8ee>
 800faea:	4b68      	ldr	r3, [pc, #416]	@ (800fc8c <neai_classification+0xaac>)
 800faec:	ed93 7a01 	vldr	s14, [r3, #4]
 800faf0:	ecf7 7a01 	vldmia	r7!, {s15}
 800faf4:	4a67      	ldr	r2, [pc, #412]	@ (800fc94 <neai_classification+0xab4>)
 800faf6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800fafa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fafe:	4297      	cmp	r7, r2
 800fb00:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb04:	ece3 7a01 	vstmia	r3!, {s15}
 800fb08:	d1f0      	bne.n	800faec <neai_classification+0x90c>
 800fb0a:	4f60      	ldr	r7, [pc, #384]	@ (800fc8c <neai_classification+0xaac>)
 800fb0c:	ecb7 0a01 	vldmia	r7!, {s0}
 800fb10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800fb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb18:	f100 81a5 	bmi.w	800fe66 <neai_classification+0xc86>
 800fb1c:	eef1 7ac0 	vsqrt.f32	s15, s0
 800fb20:	4547      	cmp	r7, r8
 800fb22:	ed47 7a01 	vstr	s15, [r7, #-4]
 800fb26:	d1f1      	bne.n	800fb0c <neai_classification+0x92c>
 800fb28:	edd6 6a00 	vldr	s13, [r6]
 800fb2c:	4e57      	ldr	r6, [pc, #348]	@ (800fc8c <neai_classification+0xaac>)
 800fb2e:	eef0 7a66 	vmov.f32	s15, s13
 800fb32:	4633      	mov	r3, r6
 800fb34:	ecb3 7a01 	vldmia	r3!, {s14}
 800fb38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fb3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb40:	bfd8      	it	le
 800fb42:	eef0 7a47 	vmovle.f32	s15, s14
 800fb46:	4543      	cmp	r3, r8
 800fb48:	d1f4      	bne.n	800fb34 <neai_classification+0x954>
 800fb4a:	eeb0 7a66 	vmov.f32	s14, s13
 800fb4e:	eef0 7ae7 	vabs.f32	s15, s15
 800fb52:	ecb9 6a01 	vldmia	r9!, {s12}
 800fb56:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800fb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb5e:	bf58      	it	pl
 800fb60:	eeb0 7a46 	vmovpl.f32	s14, s12
 800fb64:	45c1      	cmp	r9, r8
 800fb66:	d1f4      	bne.n	800fb52 <neai_classification+0x972>
 800fb68:	eeb0 7ac7 	vabs.f32	s14, s14
 800fb6c:	eef4 7a47 	vcmp.f32	s15, s14
 800fb70:	4a49      	ldr	r2, [pc, #292]	@ (800fc98 <neai_classification+0xab8>)
 800fb72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb76:	bf48      	it	mi
 800fb78:	eef0 7a47 	vmovmi.f32	s15, s14
 800fb7c:	edcb 7a35 	vstr	s15, [fp, #212]	@ 0xd4
 800fb80:	eeb0 7a66 	vmov.f32	s14, s13
 800fb84:	2000      	movs	r0, #0
 800fb86:	4611      	mov	r1, r2
 800fb88:	2301      	movs	r3, #1
 800fb8a:	ecf1 7a01 	vldmia	r1!, {s15}
 800fb8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	d403      	bmi.n	800fba0 <neai_classification+0x9c0>
 800fb98:	bfc4      	itt	gt
 800fb9a:	eeb0 7a67 	vmovgt.f32	s14, s15
 800fb9e:	b298      	uxthgt	r0, r3
 800fba0:	3301      	adds	r3, #1
 800fba2:	2b80      	cmp	r3, #128	@ 0x80
 800fba4:	d1f1      	bne.n	800fb8a <neai_classification+0x9aa>
 800fba6:	ee07 0a90 	vmov	s15, r0
 800fbaa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fbae:	4b3a      	ldr	r3, [pc, #232]	@ (800fc98 <neai_classification+0xab8>)
 800fbb0:	ed8b 7a9b 	vstr	s14, [fp, #620]	@ 0x26c
 800fbb4:	eef0 7a66 	vmov.f32	s15, s13
 800fbb8:	ecb3 7a01 	vldmia	r3!, {s14}
 800fbbc:	4543      	cmp	r3, r8
 800fbbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fbc2:	d1f9      	bne.n	800fbb8 <neai_classification+0x9d8>
 800fbc4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fbc8:	edcb 7a65 	vstr	s15, [fp, #404]	@ 0x194
 800fbcc:	ecf2 7a01 	vldmia	r2!, {s15}
 800fbd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fbd4:	4542      	cmp	r2, r8
 800fbd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbda:	d1f7      	bne.n	800fbcc <neai_classification+0x9ec>
 800fbdc:	9b01      	ldr	r3, [sp, #4]
 800fbde:	9a02      	ldr	r2, [sp, #8]
 800fbe0:	ed8b 7a89 	vstr	s14, [fp, #548]	@ 0x224
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	9301      	str	r3, [sp, #4]
 800fbea:	f47f ab17 	bne.w	800f21c <neai_classification+0x3c>
 800fbee:	4b2b      	ldr	r3, [pc, #172]	@ (800fc9c <neai_classification+0xabc>)
 800fbf0:	482b      	ldr	r0, [pc, #172]	@ (800fca0 <neai_classification+0xac0>)
 800fbf2:	6819      	ldr	r1, [r3, #0]
 800fbf4:	4b2b      	ldr	r3, [pc, #172]	@ (800fca4 <neai_classification+0xac4>)
 800fbf6:	e9dd 7905 	ldrd	r7, r9, [sp, #20]
 800fbfa:	681a      	ldr	r2, [r3, #0]
 800fbfc:	f5a0 7322 	sub.w	r3, r0, #648	@ 0x288
 800fc00:	edd3 7a00 	vldr	s15, [r3]
 800fc04:	ecf1 6a01 	vldmia	r1!, {s13}
 800fc08:	ecb2 7a01 	vldmia	r2!, {s14}
 800fc0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc14:	ece3 7a01 	vstmia	r3!, {s15}
 800fc18:	4283      	cmp	r3, r0
 800fc1a:	d1f1      	bne.n	800fc00 <neai_classification+0xa20>
 800fc1c:	f8df b098 	ldr.w	fp, [pc, #152]	@ 800fcb8 <neai_classification+0xad8>
 800fc20:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 800fc88 <neai_classification+0xaa8>
 800fc24:	465b      	mov	r3, fp
 800fc26:	2600      	movs	r6, #0
 800fc28:	f105 046c 	add.w	r4, r5, #108	@ 0x6c
 800fc2c:	462a      	mov	r2, r5
 800fc2e:	4639      	mov	r1, r7
 800fc30:	f851 0b18 	ldr.w	r0, [r1], #24
 800fc34:	f842 0b04 	str.w	r0, [r2], #4
 800fc38:	42a2      	cmp	r2, r4
 800fc3a:	d1f9      	bne.n	800fc30 <neai_classification+0xa50>
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	226c      	movs	r2, #108	@ 0x6c
 800fc40:	4641      	mov	r1, r8
 800fc42:	f001 f906 	bl	8010e52 <memcpy>
 800fc46:	3601      	adds	r6, #1
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2e06      	cmp	r6, #6
 800fc4c:	f103 036c 	add.w	r3, r3, #108	@ 0x6c
 800fc50:	f107 0704 	add.w	r7, r7, #4
 800fc54:	d1ea      	bne.n	800fc2c <neai_classification+0xa4c>
 800fc56:	4b14      	ldr	r3, [pc, #80]	@ (800fca8 <neai_classification+0xac8>)
 800fc58:	4814      	ldr	r0, [pc, #80]	@ (800fcac <neai_classification+0xacc>)
 800fc5a:	681e      	ldr	r6, [r3, #0]
 800fc5c:	4b14      	ldr	r3, [pc, #80]	@ (800fcb0 <neai_classification+0xad0>)
 800fc5e:	681d      	ldr	r5, [r3, #0]
 800fc60:	4b14      	ldr	r3, [pc, #80]	@ (800fcb4 <neai_classification+0xad4>)
 800fc62:	f8d3 e000 	ldr.w	lr, [r3]
 800fc66:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800fc6a:	4607      	mov	r7, r0
 800fc6c:	eb0e 0186 	add.w	r1, lr, r6, lsl #2
 800fc70:	f105 0c0c 	add.w	ip, r5, #12
 800fc74:	2400      	movs	r4, #0
 800fc76:	2e00      	cmp	r6, #0
 800fc78:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800fcbc <neai_classification+0xadc>
 800fc7c:	dd2a      	ble.n	800fcd4 <neai_classification+0xaf4>
 800fc7e:	eb0e 0384 	add.w	r3, lr, r4, lsl #2
 800fc82:	465a      	mov	r2, fp
 800fc84:	e01c      	b.n	800fcc0 <neai_classification+0xae0>
 800fc86:	bf00      	nop
 800fc88:	2000289c 	.word	0x2000289c
 800fc8c:	2000249c 	.word	0x2000249c
 800fc90:	3c000000 	.word	0x3c000000
 800fc94:	20002aa0 	.word	0x20002aa0
 800fc98:	200024a0 	.word	0x200024a0
 800fc9c:	20002f24 	.word	0x20002f24
 800fca0:	20002f24 	.word	0x20002f24
 800fca4:	20002f28 	.word	0x20002f28
 800fca8:	20002498 	.word	0x20002498
 800fcac:	20002488 	.word	0x20002488
 800fcb0:	20002490 	.word	0x20002490
 800fcb4:	20002494 	.word	0x20002494
 800fcb8:	20002f2c 	.word	0x20002f2c
 800fcbc:	00000000 	.word	0x00000000
 800fcc0:	ecf3 6a01 	vldmia	r3!, {s13}
 800fcc4:	ecf2 7a01 	vldmia	r2!, {s15}
 800fcc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fccc:	428b      	cmp	r3, r1
 800fcce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fcd2:	d1f5      	bne.n	800fcc0 <neai_classification+0xae0>
 800fcd4:	ecf5 7a01 	vldmia	r5!, {s15}
 800fcd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcdc:	4434      	add	r4, r6
 800fcde:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fce6:	bfd4      	ite	le
 800fce8:	2301      	movle	r3, #1
 800fcea:	2302      	movgt	r3, #2
 800fcec:	4565      	cmp	r5, ip
 800fcee:	f827 3b02 	strh.w	r3, [r7], #2
 800fcf2:	4441      	add	r1, r8
 800fcf4:	d1bf      	bne.n	800fc76 <neai_classification+0xa96>
 800fcf6:	8803      	ldrh	r3, [r0, #0]
 800fcf8:	2b01      	cmp	r3, #1
 800fcfa:	d005      	beq.n	800fd08 <neai_classification+0xb28>
 800fcfc:	f1a3 0302 	sub.w	r3, r3, #2
 800fd00:	fab3 f383 	clz	r3, r3
 800fd04:	095b      	lsrs	r3, r3, #5
 800fd06:	005b      	lsls	r3, r3, #1
 800fd08:	8841      	ldrh	r1, [r0, #2]
 800fd0a:	8003      	strh	r3, [r0, #0]
 800fd0c:	2901      	cmp	r1, #1
 800fd0e:	d003      	beq.n	800fd18 <neai_classification+0xb38>
 800fd10:	2902      	cmp	r1, #2
 800fd12:	bf14      	ite	ne
 800fd14:	2100      	movne	r1, #0
 800fd16:	2103      	moveq	r1, #3
 800fd18:	8882      	ldrh	r2, [r0, #4]
 800fd1a:	8041      	strh	r1, [r0, #2]
 800fd1c:	2a01      	cmp	r2, #1
 800fd1e:	f000 8099 	beq.w	800fe54 <neai_classification+0xc74>
 800fd22:	2a02      	cmp	r2, #2
 800fd24:	bf08      	it	eq
 800fd26:	f04f 0a03 	moveq.w	sl, #3
 800fd2a:	f8a0 a004 	strh.w	sl, [r0, #4]
 800fd2e:	ed1f 8a1d 	vldr	s16, [pc, #-116]	@ 800fcbc <neai_classification+0xadc>
 800fd32:	f06f 4040 	mvn.w	r0, #3221225472	@ 0xc0000000
 800fd36:	4403      	add	r3, r0
 800fd38:	ed89 8a00 	vstr	s16, [r9]
 800fd3c:	ed89 8a01 	vstr	s16, [r9, #4]
 800fd40:	ed89 8a02 	vstr	s16, [r9, #8]
 800fd44:	eb09 0283 	add.w	r2, r9, r3, lsl #2
 800fd48:	edd2 7a00 	vldr	s15, [r2]
 800fd4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd54:	4401      	add	r1, r0
 800fd56:	edc2 7a00 	vstr	s15, [r2]
 800fd5a:	eb09 0281 	add.w	r2, r9, r1, lsl #2
 800fd5e:	edd2 7a00 	vldr	s15, [r2]
 800fd62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd66:	eb0a 0300 	add.w	r3, sl, r0
 800fd6a:	edc2 7a00 	vstr	s15, [r2]
 800fd6e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800fd72:	edd3 7a00 	vldr	s15, [r3]
 800fd76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd7a:	eeb1 9a04 	vmov.f32	s18, #20	@ 0x40a00000  5.0
 800fd7e:	edc3 7a00 	vstr	s15, [r3]
 800fd82:	ed99 7a00 	vldr	s14, [r9]
 800fd86:	edd9 7a01 	vldr	s15, [r9, #4]
 800fd8a:	edd9 8a02 	vldr	s17, [r9, #8]
 800fd8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd96:	bf58      	it	pl
 800fd98:	eef0 7a47 	vmovpl.f32	s15, s14
 800fd9c:	eef4 7ae8 	vcmpe.f32	s15, s17
 800fda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda4:	464c      	mov	r4, r9
 800fda6:	bf58      	it	pl
 800fda8:	eef0 8a67 	vmovpl.f32	s17, s15
 800fdac:	f109 050c 	add.w	r5, r9, #12
 800fdb0:	ed94 0a00 	vldr	s0, [r4]
 800fdb4:	ee30 0a68 	vsub.f32	s0, s0, s17
 800fdb8:	ee20 0a09 	vmul.f32	s0, s0, s18
 800fdbc:	f002 fdde 	bl	801297c <expf>
 800fdc0:	eca4 0a01 	vstmia	r4!, {s0}
 800fdc4:	42ac      	cmp	r4, r5
 800fdc6:	ee38 8a00 	vadd.f32	s16, s16, s0
 800fdca:	d1f1      	bne.n	800fdb0 <neai_classification+0xbd0>
 800fdcc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fdd0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800fdd4:	9a04      	ldr	r2, [sp, #16]
 800fdd6:	edd9 6a00 	vldr	s13, [r9]
 800fdda:	edd9 7a01 	vldr	s15, [r9, #4]
 800fdde:	ed99 6a02 	vldr	s12, [r9, #8]
 800fde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde6:	ee67 6a26 	vmul.f32	s13, s14, s13
 800fdea:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fdee:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf6:	edc9 7a01 	vstr	s15, [r9, #4]
 800fdfa:	bfd8      	it	le
 800fdfc:	eef0 7a66 	vmovle.f32	s15, s13
 800fe00:	eeb4 7a67 	vcmp.f32	s14, s15
 800fe04:	bfd4      	ite	le
 800fe06:	2301      	movle	r3, #1
 800fe08:	2302      	movgt	r3, #2
 800fe0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0e:	bfc8      	it	gt
 800fe10:	2303      	movgt	r3, #3
 800fe12:	edc9 6a00 	vstr	s13, [r9]
 800fe16:	ed89 7a02 	vstr	s14, [r9, #8]
 800fe1a:	8013      	strh	r3, [r2, #0]
 800fe1c:	9803      	ldr	r0, [sp, #12]
 800fe1e:	b009      	add	sp, #36	@ 0x24
 800fe20:	ecbd 8b06 	vpop	{d8-d10}
 800fe24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe28:	ee07 3a90 	vmov	s15, r3
 800fe2c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800fe30:	ee28 8a28 	vmul.f32	s16, s16, s17
 800fe34:	eeb0 0a48 	vmov.f32	s0, s16
 800fe38:	f002 fdd6 	bl	80129e8 <logf>
 800fe3c:	ee28 8a00 	vmul.f32	s16, s16, s0
 800fe40:	454c      	cmp	r4, r9
 800fe42:	ee79 9a88 	vadd.f32	s19, s19, s16
 800fe46:	f04f 0301 	mov.w	r3, #1
 800fe4a:	eeb0 5a49 	vmov.f32	s10, s18
 800fe4e:	f47f ad60 	bne.w	800f912 <neai_classification+0x732>
 800fe52:	e56b      	b.n	800f92c <neai_classification+0x74c>
 800fe54:	f04f 0a02 	mov.w	sl, #2
 800fe58:	e767      	b.n	800fd2a <neai_classification+0xb4a>
 800fe5a:	f002 fdf3 	bl	8012a44 <sqrtf>
 800fe5e:	eeb0 7a40 	vmov.f32	s14, s0
 800fe62:	f7ff ba9e 	b.w	800f3a2 <neai_classification+0x1c2>
 800fe66:	f002 fded 	bl	8012a44 <sqrtf>
 800fe6a:	4547      	cmp	r7, r8
 800fe6c:	ed07 0a01 	vstr	s0, [r7, #-4]
 800fe70:	f47f ae4c 	bne.w	800fb0c <neai_classification+0x92c>
 800fe74:	e658      	b.n	800fb28 <neai_classification+0x948>
 800fe76:	f002 fde5 	bl	8012a44 <sqrtf>
 800fe7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fe7e:	e61a      	b.n	800fab6 <neai_classification+0x8d6>
 800fe80:	f002 fde0 	bl	8012a44 <sqrtf>
 800fe84:	ee38 8a0a 	vadd.f32	s16, s16, s20
 800fe88:	eeb1 9a40 	vneg.f32	s18, s0
 800fe8c:	ee28 0a29 	vmul.f32	s0, s16, s19
 800fe90:	e60f      	b.n	800fab2 <neai_classification+0x8d2>
 800fe92:	f002 fdd7 	bl	8012a44 <sqrtf>
 800fe96:	eef0 7a40 	vmov.f32	s15, s0
 800fe9a:	e4ac      	b.n	800f7f6 <neai_classification+0x616>
 800fe9c:	f002 fdd2 	bl	8012a44 <sqrtf>
 800fea0:	eef0 7a40 	vmov.f32	s15, s0
 800fea4:	f7ff bbf4 	b.w	800f690 <neai_classification+0x4b0>
 800fea8:	f002 fdcc 	bl	8012a44 <sqrtf>
 800feac:	eef0 7a40 	vmov.f32	s15, s0
 800feb0:	f7ff bbc8 	b.w	800f644 <neai_classification+0x464>
 800feb4:	f002 fdc6 	bl	8012a44 <sqrtf>
 800feb8:	eeb0 7a40 	vmov.f32	s14, s0
 800febc:	f7ff baee 	b.w	800f49c <neai_classification+0x2bc>
 800fec0:	f002 fdc0 	bl	8012a44 <sqrtf>
 800fec4:	eeb0 7a40 	vmov.f32	s14, s0
 800fec8:	f7ff ba9c 	b.w	800f404 <neai_classification+0x224>

0800fecc <malloc>:
 800fecc:	4b02      	ldr	r3, [pc, #8]	@ (800fed8 <malloc+0xc>)
 800fece:	4601      	mov	r1, r0
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	f000 b825 	b.w	800ff20 <_malloc_r>
 800fed6:	bf00      	nop
 800fed8:	200001ec 	.word	0x200001ec

0800fedc <sbrk_aligned>:
 800fedc:	b570      	push	{r4, r5, r6, lr}
 800fede:	4e0f      	ldr	r6, [pc, #60]	@ (800ff1c <sbrk_aligned+0x40>)
 800fee0:	460c      	mov	r4, r1
 800fee2:	6831      	ldr	r1, [r6, #0]
 800fee4:	4605      	mov	r5, r0
 800fee6:	b911      	cbnz	r1, 800feee <sbrk_aligned+0x12>
 800fee8:	f000 ff64 	bl	8010db4 <_sbrk_r>
 800feec:	6030      	str	r0, [r6, #0]
 800feee:	4621      	mov	r1, r4
 800fef0:	4628      	mov	r0, r5
 800fef2:	f000 ff5f 	bl	8010db4 <_sbrk_r>
 800fef6:	1c43      	adds	r3, r0, #1
 800fef8:	d103      	bne.n	800ff02 <sbrk_aligned+0x26>
 800fefa:	f04f 34ff 	mov.w	r4, #4294967295
 800fefe:	4620      	mov	r0, r4
 800ff00:	bd70      	pop	{r4, r5, r6, pc}
 800ff02:	1cc4      	adds	r4, r0, #3
 800ff04:	f024 0403 	bic.w	r4, r4, #3
 800ff08:	42a0      	cmp	r0, r4
 800ff0a:	d0f8      	beq.n	800fefe <sbrk_aligned+0x22>
 800ff0c:	1a21      	subs	r1, r4, r0
 800ff0e:	4628      	mov	r0, r5
 800ff10:	f000 ff50 	bl	8010db4 <_sbrk_r>
 800ff14:	3001      	adds	r0, #1
 800ff16:	d1f2      	bne.n	800fefe <sbrk_aligned+0x22>
 800ff18:	e7ef      	b.n	800fefa <sbrk_aligned+0x1e>
 800ff1a:	bf00      	nop
 800ff1c:	200031b4 	.word	0x200031b4

0800ff20 <_malloc_r>:
 800ff20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff24:	1ccd      	adds	r5, r1, #3
 800ff26:	f025 0503 	bic.w	r5, r5, #3
 800ff2a:	3508      	adds	r5, #8
 800ff2c:	2d0c      	cmp	r5, #12
 800ff2e:	bf38      	it	cc
 800ff30:	250c      	movcc	r5, #12
 800ff32:	2d00      	cmp	r5, #0
 800ff34:	4606      	mov	r6, r0
 800ff36:	db01      	blt.n	800ff3c <_malloc_r+0x1c>
 800ff38:	42a9      	cmp	r1, r5
 800ff3a:	d904      	bls.n	800ff46 <_malloc_r+0x26>
 800ff3c:	230c      	movs	r3, #12
 800ff3e:	6033      	str	r3, [r6, #0]
 800ff40:	2000      	movs	r0, #0
 800ff42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801001c <_malloc_r+0xfc>
 800ff4a:	f000 f869 	bl	8010020 <__malloc_lock>
 800ff4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ff52:	461c      	mov	r4, r3
 800ff54:	bb44      	cbnz	r4, 800ffa8 <_malloc_r+0x88>
 800ff56:	4629      	mov	r1, r5
 800ff58:	4630      	mov	r0, r6
 800ff5a:	f7ff ffbf 	bl	800fedc <sbrk_aligned>
 800ff5e:	1c43      	adds	r3, r0, #1
 800ff60:	4604      	mov	r4, r0
 800ff62:	d158      	bne.n	8010016 <_malloc_r+0xf6>
 800ff64:	f8d8 4000 	ldr.w	r4, [r8]
 800ff68:	4627      	mov	r7, r4
 800ff6a:	2f00      	cmp	r7, #0
 800ff6c:	d143      	bne.n	800fff6 <_malloc_r+0xd6>
 800ff6e:	2c00      	cmp	r4, #0
 800ff70:	d04b      	beq.n	801000a <_malloc_r+0xea>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	4639      	mov	r1, r7
 800ff76:	4630      	mov	r0, r6
 800ff78:	eb04 0903 	add.w	r9, r4, r3
 800ff7c:	f000 ff1a 	bl	8010db4 <_sbrk_r>
 800ff80:	4581      	cmp	r9, r0
 800ff82:	d142      	bne.n	801000a <_malloc_r+0xea>
 800ff84:	6821      	ldr	r1, [r4, #0]
 800ff86:	1a6d      	subs	r5, r5, r1
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	f7ff ffa6 	bl	800fedc <sbrk_aligned>
 800ff90:	3001      	adds	r0, #1
 800ff92:	d03a      	beq.n	801000a <_malloc_r+0xea>
 800ff94:	6823      	ldr	r3, [r4, #0]
 800ff96:	442b      	add	r3, r5
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ff9e:	685a      	ldr	r2, [r3, #4]
 800ffa0:	bb62      	cbnz	r2, 800fffc <_malloc_r+0xdc>
 800ffa2:	f8c8 7000 	str.w	r7, [r8]
 800ffa6:	e00f      	b.n	800ffc8 <_malloc_r+0xa8>
 800ffa8:	6822      	ldr	r2, [r4, #0]
 800ffaa:	1b52      	subs	r2, r2, r5
 800ffac:	d420      	bmi.n	800fff0 <_malloc_r+0xd0>
 800ffae:	2a0b      	cmp	r2, #11
 800ffb0:	d917      	bls.n	800ffe2 <_malloc_r+0xc2>
 800ffb2:	1961      	adds	r1, r4, r5
 800ffb4:	42a3      	cmp	r3, r4
 800ffb6:	6025      	str	r5, [r4, #0]
 800ffb8:	bf18      	it	ne
 800ffba:	6059      	strne	r1, [r3, #4]
 800ffbc:	6863      	ldr	r3, [r4, #4]
 800ffbe:	bf08      	it	eq
 800ffc0:	f8c8 1000 	streq.w	r1, [r8]
 800ffc4:	5162      	str	r2, [r4, r5]
 800ffc6:	604b      	str	r3, [r1, #4]
 800ffc8:	4630      	mov	r0, r6
 800ffca:	f000 f82f 	bl	801002c <__malloc_unlock>
 800ffce:	f104 000b 	add.w	r0, r4, #11
 800ffd2:	1d23      	adds	r3, r4, #4
 800ffd4:	f020 0007 	bic.w	r0, r0, #7
 800ffd8:	1ac2      	subs	r2, r0, r3
 800ffda:	bf1c      	itt	ne
 800ffdc:	1a1b      	subne	r3, r3, r0
 800ffde:	50a3      	strne	r3, [r4, r2]
 800ffe0:	e7af      	b.n	800ff42 <_malloc_r+0x22>
 800ffe2:	6862      	ldr	r2, [r4, #4]
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	bf0c      	ite	eq
 800ffe8:	f8c8 2000 	streq.w	r2, [r8]
 800ffec:	605a      	strne	r2, [r3, #4]
 800ffee:	e7eb      	b.n	800ffc8 <_malloc_r+0xa8>
 800fff0:	4623      	mov	r3, r4
 800fff2:	6864      	ldr	r4, [r4, #4]
 800fff4:	e7ae      	b.n	800ff54 <_malloc_r+0x34>
 800fff6:	463c      	mov	r4, r7
 800fff8:	687f      	ldr	r7, [r7, #4]
 800fffa:	e7b6      	b.n	800ff6a <_malloc_r+0x4a>
 800fffc:	461a      	mov	r2, r3
 800fffe:	685b      	ldr	r3, [r3, #4]
 8010000:	42a3      	cmp	r3, r4
 8010002:	d1fb      	bne.n	800fffc <_malloc_r+0xdc>
 8010004:	2300      	movs	r3, #0
 8010006:	6053      	str	r3, [r2, #4]
 8010008:	e7de      	b.n	800ffc8 <_malloc_r+0xa8>
 801000a:	230c      	movs	r3, #12
 801000c:	6033      	str	r3, [r6, #0]
 801000e:	4630      	mov	r0, r6
 8010010:	f000 f80c 	bl	801002c <__malloc_unlock>
 8010014:	e794      	b.n	800ff40 <_malloc_r+0x20>
 8010016:	6005      	str	r5, [r0, #0]
 8010018:	e7d6      	b.n	800ffc8 <_malloc_r+0xa8>
 801001a:	bf00      	nop
 801001c:	200031b8 	.word	0x200031b8

08010020 <__malloc_lock>:
 8010020:	4801      	ldr	r0, [pc, #4]	@ (8010028 <__malloc_lock+0x8>)
 8010022:	f000 bf14 	b.w	8010e4e <__retarget_lock_acquire_recursive>
 8010026:	bf00      	nop
 8010028:	200032fc 	.word	0x200032fc

0801002c <__malloc_unlock>:
 801002c:	4801      	ldr	r0, [pc, #4]	@ (8010034 <__malloc_unlock+0x8>)
 801002e:	f000 bf0f 	b.w	8010e50 <__retarget_lock_release_recursive>
 8010032:	bf00      	nop
 8010034:	200032fc 	.word	0x200032fc

08010038 <__cvt>:
 8010038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801003c:	ec57 6b10 	vmov	r6, r7, d0
 8010040:	2f00      	cmp	r7, #0
 8010042:	460c      	mov	r4, r1
 8010044:	4619      	mov	r1, r3
 8010046:	463b      	mov	r3, r7
 8010048:	bfbb      	ittet	lt
 801004a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801004e:	461f      	movlt	r7, r3
 8010050:	2300      	movge	r3, #0
 8010052:	232d      	movlt	r3, #45	@ 0x2d
 8010054:	700b      	strb	r3, [r1, #0]
 8010056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010058:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801005c:	4691      	mov	r9, r2
 801005e:	f023 0820 	bic.w	r8, r3, #32
 8010062:	bfbc      	itt	lt
 8010064:	4632      	movlt	r2, r6
 8010066:	4616      	movlt	r6, r2
 8010068:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801006c:	d005      	beq.n	801007a <__cvt+0x42>
 801006e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010072:	d100      	bne.n	8010076 <__cvt+0x3e>
 8010074:	3401      	adds	r4, #1
 8010076:	2102      	movs	r1, #2
 8010078:	e000      	b.n	801007c <__cvt+0x44>
 801007a:	2103      	movs	r1, #3
 801007c:	ab03      	add	r3, sp, #12
 801007e:	9301      	str	r3, [sp, #4]
 8010080:	ab02      	add	r3, sp, #8
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	ec47 6b10 	vmov	d0, r6, r7
 8010088:	4653      	mov	r3, sl
 801008a:	4622      	mov	r2, r4
 801008c:	f000 ff80 	bl	8010f90 <_dtoa_r>
 8010090:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010094:	4605      	mov	r5, r0
 8010096:	d119      	bne.n	80100cc <__cvt+0x94>
 8010098:	f019 0f01 	tst.w	r9, #1
 801009c:	d00e      	beq.n	80100bc <__cvt+0x84>
 801009e:	eb00 0904 	add.w	r9, r0, r4
 80100a2:	2200      	movs	r2, #0
 80100a4:	2300      	movs	r3, #0
 80100a6:	4630      	mov	r0, r6
 80100a8:	4639      	mov	r1, r7
 80100aa:	f7f0 fce5 	bl	8000a78 <__aeabi_dcmpeq>
 80100ae:	b108      	cbz	r0, 80100b4 <__cvt+0x7c>
 80100b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80100b4:	2230      	movs	r2, #48	@ 0x30
 80100b6:	9b03      	ldr	r3, [sp, #12]
 80100b8:	454b      	cmp	r3, r9
 80100ba:	d31e      	bcc.n	80100fa <__cvt+0xc2>
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100c0:	1b5b      	subs	r3, r3, r5
 80100c2:	4628      	mov	r0, r5
 80100c4:	6013      	str	r3, [r2, #0]
 80100c6:	b004      	add	sp, #16
 80100c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80100d0:	eb00 0904 	add.w	r9, r0, r4
 80100d4:	d1e5      	bne.n	80100a2 <__cvt+0x6a>
 80100d6:	7803      	ldrb	r3, [r0, #0]
 80100d8:	2b30      	cmp	r3, #48	@ 0x30
 80100da:	d10a      	bne.n	80100f2 <__cvt+0xba>
 80100dc:	2200      	movs	r2, #0
 80100de:	2300      	movs	r3, #0
 80100e0:	4630      	mov	r0, r6
 80100e2:	4639      	mov	r1, r7
 80100e4:	f7f0 fcc8 	bl	8000a78 <__aeabi_dcmpeq>
 80100e8:	b918      	cbnz	r0, 80100f2 <__cvt+0xba>
 80100ea:	f1c4 0401 	rsb	r4, r4, #1
 80100ee:	f8ca 4000 	str.w	r4, [sl]
 80100f2:	f8da 3000 	ldr.w	r3, [sl]
 80100f6:	4499      	add	r9, r3
 80100f8:	e7d3      	b.n	80100a2 <__cvt+0x6a>
 80100fa:	1c59      	adds	r1, r3, #1
 80100fc:	9103      	str	r1, [sp, #12]
 80100fe:	701a      	strb	r2, [r3, #0]
 8010100:	e7d9      	b.n	80100b6 <__cvt+0x7e>

08010102 <__exponent>:
 8010102:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010104:	2900      	cmp	r1, #0
 8010106:	bfba      	itte	lt
 8010108:	4249      	neglt	r1, r1
 801010a:	232d      	movlt	r3, #45	@ 0x2d
 801010c:	232b      	movge	r3, #43	@ 0x2b
 801010e:	2909      	cmp	r1, #9
 8010110:	7002      	strb	r2, [r0, #0]
 8010112:	7043      	strb	r3, [r0, #1]
 8010114:	dd29      	ble.n	801016a <__exponent+0x68>
 8010116:	f10d 0307 	add.w	r3, sp, #7
 801011a:	461d      	mov	r5, r3
 801011c:	270a      	movs	r7, #10
 801011e:	461a      	mov	r2, r3
 8010120:	fbb1 f6f7 	udiv	r6, r1, r7
 8010124:	fb07 1416 	mls	r4, r7, r6, r1
 8010128:	3430      	adds	r4, #48	@ 0x30
 801012a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801012e:	460c      	mov	r4, r1
 8010130:	2c63      	cmp	r4, #99	@ 0x63
 8010132:	f103 33ff 	add.w	r3, r3, #4294967295
 8010136:	4631      	mov	r1, r6
 8010138:	dcf1      	bgt.n	801011e <__exponent+0x1c>
 801013a:	3130      	adds	r1, #48	@ 0x30
 801013c:	1e94      	subs	r4, r2, #2
 801013e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010142:	1c41      	adds	r1, r0, #1
 8010144:	4623      	mov	r3, r4
 8010146:	42ab      	cmp	r3, r5
 8010148:	d30a      	bcc.n	8010160 <__exponent+0x5e>
 801014a:	f10d 0309 	add.w	r3, sp, #9
 801014e:	1a9b      	subs	r3, r3, r2
 8010150:	42ac      	cmp	r4, r5
 8010152:	bf88      	it	hi
 8010154:	2300      	movhi	r3, #0
 8010156:	3302      	adds	r3, #2
 8010158:	4403      	add	r3, r0
 801015a:	1a18      	subs	r0, r3, r0
 801015c:	b003      	add	sp, #12
 801015e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010160:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010164:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010168:	e7ed      	b.n	8010146 <__exponent+0x44>
 801016a:	2330      	movs	r3, #48	@ 0x30
 801016c:	3130      	adds	r1, #48	@ 0x30
 801016e:	7083      	strb	r3, [r0, #2]
 8010170:	70c1      	strb	r1, [r0, #3]
 8010172:	1d03      	adds	r3, r0, #4
 8010174:	e7f1      	b.n	801015a <__exponent+0x58>
	...

08010178 <_printf_float>:
 8010178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801017c:	b08d      	sub	sp, #52	@ 0x34
 801017e:	460c      	mov	r4, r1
 8010180:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010184:	4616      	mov	r6, r2
 8010186:	461f      	mov	r7, r3
 8010188:	4605      	mov	r5, r0
 801018a:	f000 fddb 	bl	8010d44 <_localeconv_r>
 801018e:	6803      	ldr	r3, [r0, #0]
 8010190:	9304      	str	r3, [sp, #16]
 8010192:	4618      	mov	r0, r3
 8010194:	f7f0 f844 	bl	8000220 <strlen>
 8010198:	2300      	movs	r3, #0
 801019a:	930a      	str	r3, [sp, #40]	@ 0x28
 801019c:	f8d8 3000 	ldr.w	r3, [r8]
 80101a0:	9005      	str	r0, [sp, #20]
 80101a2:	3307      	adds	r3, #7
 80101a4:	f023 0307 	bic.w	r3, r3, #7
 80101a8:	f103 0208 	add.w	r2, r3, #8
 80101ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80101b0:	f8d4 b000 	ldr.w	fp, [r4]
 80101b4:	f8c8 2000 	str.w	r2, [r8]
 80101b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80101c0:	9307      	str	r3, [sp, #28]
 80101c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80101c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80101ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101ce:	4b9c      	ldr	r3, [pc, #624]	@ (8010440 <_printf_float+0x2c8>)
 80101d0:	f04f 32ff 	mov.w	r2, #4294967295
 80101d4:	f7f0 fc82 	bl	8000adc <__aeabi_dcmpun>
 80101d8:	bb70      	cbnz	r0, 8010238 <_printf_float+0xc0>
 80101da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80101de:	4b98      	ldr	r3, [pc, #608]	@ (8010440 <_printf_float+0x2c8>)
 80101e0:	f04f 32ff 	mov.w	r2, #4294967295
 80101e4:	f7f0 fc5c 	bl	8000aa0 <__aeabi_dcmple>
 80101e8:	bb30      	cbnz	r0, 8010238 <_printf_float+0xc0>
 80101ea:	2200      	movs	r2, #0
 80101ec:	2300      	movs	r3, #0
 80101ee:	4640      	mov	r0, r8
 80101f0:	4649      	mov	r1, r9
 80101f2:	f7f0 fc4b 	bl	8000a8c <__aeabi_dcmplt>
 80101f6:	b110      	cbz	r0, 80101fe <_printf_float+0x86>
 80101f8:	232d      	movs	r3, #45	@ 0x2d
 80101fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80101fe:	4a91      	ldr	r2, [pc, #580]	@ (8010444 <_printf_float+0x2cc>)
 8010200:	4b91      	ldr	r3, [pc, #580]	@ (8010448 <_printf_float+0x2d0>)
 8010202:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010206:	bf8c      	ite	hi
 8010208:	4690      	movhi	r8, r2
 801020a:	4698      	movls	r8, r3
 801020c:	2303      	movs	r3, #3
 801020e:	6123      	str	r3, [r4, #16]
 8010210:	f02b 0304 	bic.w	r3, fp, #4
 8010214:	6023      	str	r3, [r4, #0]
 8010216:	f04f 0900 	mov.w	r9, #0
 801021a:	9700      	str	r7, [sp, #0]
 801021c:	4633      	mov	r3, r6
 801021e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010220:	4621      	mov	r1, r4
 8010222:	4628      	mov	r0, r5
 8010224:	f000 f9d2 	bl	80105cc <_printf_common>
 8010228:	3001      	adds	r0, #1
 801022a:	f040 808d 	bne.w	8010348 <_printf_float+0x1d0>
 801022e:	f04f 30ff 	mov.w	r0, #4294967295
 8010232:	b00d      	add	sp, #52	@ 0x34
 8010234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010238:	4642      	mov	r2, r8
 801023a:	464b      	mov	r3, r9
 801023c:	4640      	mov	r0, r8
 801023e:	4649      	mov	r1, r9
 8010240:	f7f0 fc4c 	bl	8000adc <__aeabi_dcmpun>
 8010244:	b140      	cbz	r0, 8010258 <_printf_float+0xe0>
 8010246:	464b      	mov	r3, r9
 8010248:	2b00      	cmp	r3, #0
 801024a:	bfbc      	itt	lt
 801024c:	232d      	movlt	r3, #45	@ 0x2d
 801024e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010252:	4a7e      	ldr	r2, [pc, #504]	@ (801044c <_printf_float+0x2d4>)
 8010254:	4b7e      	ldr	r3, [pc, #504]	@ (8010450 <_printf_float+0x2d8>)
 8010256:	e7d4      	b.n	8010202 <_printf_float+0x8a>
 8010258:	6863      	ldr	r3, [r4, #4]
 801025a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801025e:	9206      	str	r2, [sp, #24]
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	d13b      	bne.n	80102dc <_printf_float+0x164>
 8010264:	2306      	movs	r3, #6
 8010266:	6063      	str	r3, [r4, #4]
 8010268:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801026c:	2300      	movs	r3, #0
 801026e:	6022      	str	r2, [r4, #0]
 8010270:	9303      	str	r3, [sp, #12]
 8010272:	ab0a      	add	r3, sp, #40	@ 0x28
 8010274:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010278:	ab09      	add	r3, sp, #36	@ 0x24
 801027a:	9300      	str	r3, [sp, #0]
 801027c:	6861      	ldr	r1, [r4, #4]
 801027e:	ec49 8b10 	vmov	d0, r8, r9
 8010282:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010286:	4628      	mov	r0, r5
 8010288:	f7ff fed6 	bl	8010038 <__cvt>
 801028c:	9b06      	ldr	r3, [sp, #24]
 801028e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010290:	2b47      	cmp	r3, #71	@ 0x47
 8010292:	4680      	mov	r8, r0
 8010294:	d129      	bne.n	80102ea <_printf_float+0x172>
 8010296:	1cc8      	adds	r0, r1, #3
 8010298:	db02      	blt.n	80102a0 <_printf_float+0x128>
 801029a:	6863      	ldr	r3, [r4, #4]
 801029c:	4299      	cmp	r1, r3
 801029e:	dd41      	ble.n	8010324 <_printf_float+0x1ac>
 80102a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80102a4:	fa5f fa8a 	uxtb.w	sl, sl
 80102a8:	3901      	subs	r1, #1
 80102aa:	4652      	mov	r2, sl
 80102ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80102b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80102b2:	f7ff ff26 	bl	8010102 <__exponent>
 80102b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80102b8:	1813      	adds	r3, r2, r0
 80102ba:	2a01      	cmp	r2, #1
 80102bc:	4681      	mov	r9, r0
 80102be:	6123      	str	r3, [r4, #16]
 80102c0:	dc02      	bgt.n	80102c8 <_printf_float+0x150>
 80102c2:	6822      	ldr	r2, [r4, #0]
 80102c4:	07d2      	lsls	r2, r2, #31
 80102c6:	d501      	bpl.n	80102cc <_printf_float+0x154>
 80102c8:	3301      	adds	r3, #1
 80102ca:	6123      	str	r3, [r4, #16]
 80102cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d0a2      	beq.n	801021a <_printf_float+0xa2>
 80102d4:	232d      	movs	r3, #45	@ 0x2d
 80102d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80102da:	e79e      	b.n	801021a <_printf_float+0xa2>
 80102dc:	9a06      	ldr	r2, [sp, #24]
 80102de:	2a47      	cmp	r2, #71	@ 0x47
 80102e0:	d1c2      	bne.n	8010268 <_printf_float+0xf0>
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1c0      	bne.n	8010268 <_printf_float+0xf0>
 80102e6:	2301      	movs	r3, #1
 80102e8:	e7bd      	b.n	8010266 <_printf_float+0xee>
 80102ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80102ee:	d9db      	bls.n	80102a8 <_printf_float+0x130>
 80102f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80102f4:	d118      	bne.n	8010328 <_printf_float+0x1b0>
 80102f6:	2900      	cmp	r1, #0
 80102f8:	6863      	ldr	r3, [r4, #4]
 80102fa:	dd0b      	ble.n	8010314 <_printf_float+0x19c>
 80102fc:	6121      	str	r1, [r4, #16]
 80102fe:	b913      	cbnz	r3, 8010306 <_printf_float+0x18e>
 8010300:	6822      	ldr	r2, [r4, #0]
 8010302:	07d0      	lsls	r0, r2, #31
 8010304:	d502      	bpl.n	801030c <_printf_float+0x194>
 8010306:	3301      	adds	r3, #1
 8010308:	440b      	add	r3, r1
 801030a:	6123      	str	r3, [r4, #16]
 801030c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801030e:	f04f 0900 	mov.w	r9, #0
 8010312:	e7db      	b.n	80102cc <_printf_float+0x154>
 8010314:	b913      	cbnz	r3, 801031c <_printf_float+0x1a4>
 8010316:	6822      	ldr	r2, [r4, #0]
 8010318:	07d2      	lsls	r2, r2, #31
 801031a:	d501      	bpl.n	8010320 <_printf_float+0x1a8>
 801031c:	3302      	adds	r3, #2
 801031e:	e7f4      	b.n	801030a <_printf_float+0x192>
 8010320:	2301      	movs	r3, #1
 8010322:	e7f2      	b.n	801030a <_printf_float+0x192>
 8010324:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010328:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801032a:	4299      	cmp	r1, r3
 801032c:	db05      	blt.n	801033a <_printf_float+0x1c2>
 801032e:	6823      	ldr	r3, [r4, #0]
 8010330:	6121      	str	r1, [r4, #16]
 8010332:	07d8      	lsls	r0, r3, #31
 8010334:	d5ea      	bpl.n	801030c <_printf_float+0x194>
 8010336:	1c4b      	adds	r3, r1, #1
 8010338:	e7e7      	b.n	801030a <_printf_float+0x192>
 801033a:	2900      	cmp	r1, #0
 801033c:	bfd4      	ite	le
 801033e:	f1c1 0202 	rsble	r2, r1, #2
 8010342:	2201      	movgt	r2, #1
 8010344:	4413      	add	r3, r2
 8010346:	e7e0      	b.n	801030a <_printf_float+0x192>
 8010348:	6823      	ldr	r3, [r4, #0]
 801034a:	055a      	lsls	r2, r3, #21
 801034c:	d407      	bmi.n	801035e <_printf_float+0x1e6>
 801034e:	6923      	ldr	r3, [r4, #16]
 8010350:	4642      	mov	r2, r8
 8010352:	4631      	mov	r1, r6
 8010354:	4628      	mov	r0, r5
 8010356:	47b8      	blx	r7
 8010358:	3001      	adds	r0, #1
 801035a:	d12b      	bne.n	80103b4 <_printf_float+0x23c>
 801035c:	e767      	b.n	801022e <_printf_float+0xb6>
 801035e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010362:	f240 80dd 	bls.w	8010520 <_printf_float+0x3a8>
 8010366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801036a:	2200      	movs	r2, #0
 801036c:	2300      	movs	r3, #0
 801036e:	f7f0 fb83 	bl	8000a78 <__aeabi_dcmpeq>
 8010372:	2800      	cmp	r0, #0
 8010374:	d033      	beq.n	80103de <_printf_float+0x266>
 8010376:	4a37      	ldr	r2, [pc, #220]	@ (8010454 <_printf_float+0x2dc>)
 8010378:	2301      	movs	r3, #1
 801037a:	4631      	mov	r1, r6
 801037c:	4628      	mov	r0, r5
 801037e:	47b8      	blx	r7
 8010380:	3001      	adds	r0, #1
 8010382:	f43f af54 	beq.w	801022e <_printf_float+0xb6>
 8010386:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801038a:	4543      	cmp	r3, r8
 801038c:	db02      	blt.n	8010394 <_printf_float+0x21c>
 801038e:	6823      	ldr	r3, [r4, #0]
 8010390:	07d8      	lsls	r0, r3, #31
 8010392:	d50f      	bpl.n	80103b4 <_printf_float+0x23c>
 8010394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010398:	4631      	mov	r1, r6
 801039a:	4628      	mov	r0, r5
 801039c:	47b8      	blx	r7
 801039e:	3001      	adds	r0, #1
 80103a0:	f43f af45 	beq.w	801022e <_printf_float+0xb6>
 80103a4:	f04f 0900 	mov.w	r9, #0
 80103a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80103ac:	f104 0a1a 	add.w	sl, r4, #26
 80103b0:	45c8      	cmp	r8, r9
 80103b2:	dc09      	bgt.n	80103c8 <_printf_float+0x250>
 80103b4:	6823      	ldr	r3, [r4, #0]
 80103b6:	079b      	lsls	r3, r3, #30
 80103b8:	f100 8103 	bmi.w	80105c2 <_printf_float+0x44a>
 80103bc:	68e0      	ldr	r0, [r4, #12]
 80103be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80103c0:	4298      	cmp	r0, r3
 80103c2:	bfb8      	it	lt
 80103c4:	4618      	movlt	r0, r3
 80103c6:	e734      	b.n	8010232 <_printf_float+0xba>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4652      	mov	r2, sl
 80103cc:	4631      	mov	r1, r6
 80103ce:	4628      	mov	r0, r5
 80103d0:	47b8      	blx	r7
 80103d2:	3001      	adds	r0, #1
 80103d4:	f43f af2b 	beq.w	801022e <_printf_float+0xb6>
 80103d8:	f109 0901 	add.w	r9, r9, #1
 80103dc:	e7e8      	b.n	80103b0 <_printf_float+0x238>
 80103de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	dc39      	bgt.n	8010458 <_printf_float+0x2e0>
 80103e4:	4a1b      	ldr	r2, [pc, #108]	@ (8010454 <_printf_float+0x2dc>)
 80103e6:	2301      	movs	r3, #1
 80103e8:	4631      	mov	r1, r6
 80103ea:	4628      	mov	r0, r5
 80103ec:	47b8      	blx	r7
 80103ee:	3001      	adds	r0, #1
 80103f0:	f43f af1d 	beq.w	801022e <_printf_float+0xb6>
 80103f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80103f8:	ea59 0303 	orrs.w	r3, r9, r3
 80103fc:	d102      	bne.n	8010404 <_printf_float+0x28c>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	07d9      	lsls	r1, r3, #31
 8010402:	d5d7      	bpl.n	80103b4 <_printf_float+0x23c>
 8010404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010408:	4631      	mov	r1, r6
 801040a:	4628      	mov	r0, r5
 801040c:	47b8      	blx	r7
 801040e:	3001      	adds	r0, #1
 8010410:	f43f af0d 	beq.w	801022e <_printf_float+0xb6>
 8010414:	f04f 0a00 	mov.w	sl, #0
 8010418:	f104 0b1a 	add.w	fp, r4, #26
 801041c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801041e:	425b      	negs	r3, r3
 8010420:	4553      	cmp	r3, sl
 8010422:	dc01      	bgt.n	8010428 <_printf_float+0x2b0>
 8010424:	464b      	mov	r3, r9
 8010426:	e793      	b.n	8010350 <_printf_float+0x1d8>
 8010428:	2301      	movs	r3, #1
 801042a:	465a      	mov	r2, fp
 801042c:	4631      	mov	r1, r6
 801042e:	4628      	mov	r0, r5
 8010430:	47b8      	blx	r7
 8010432:	3001      	adds	r0, #1
 8010434:	f43f aefb 	beq.w	801022e <_printf_float+0xb6>
 8010438:	f10a 0a01 	add.w	sl, sl, #1
 801043c:	e7ee      	b.n	801041c <_printf_float+0x2a4>
 801043e:	bf00      	nop
 8010440:	7fefffff 	.word	0x7fefffff
 8010444:	08016929 	.word	0x08016929
 8010448:	08016925 	.word	0x08016925
 801044c:	08016931 	.word	0x08016931
 8010450:	0801692d 	.word	0x0801692d
 8010454:	08016935 	.word	0x08016935
 8010458:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801045a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801045e:	4553      	cmp	r3, sl
 8010460:	bfa8      	it	ge
 8010462:	4653      	movge	r3, sl
 8010464:	2b00      	cmp	r3, #0
 8010466:	4699      	mov	r9, r3
 8010468:	dc36      	bgt.n	80104d8 <_printf_float+0x360>
 801046a:	f04f 0b00 	mov.w	fp, #0
 801046e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010472:	f104 021a 	add.w	r2, r4, #26
 8010476:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010478:	9306      	str	r3, [sp, #24]
 801047a:	eba3 0309 	sub.w	r3, r3, r9
 801047e:	455b      	cmp	r3, fp
 8010480:	dc31      	bgt.n	80104e6 <_printf_float+0x36e>
 8010482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010484:	459a      	cmp	sl, r3
 8010486:	dc3a      	bgt.n	80104fe <_printf_float+0x386>
 8010488:	6823      	ldr	r3, [r4, #0]
 801048a:	07da      	lsls	r2, r3, #31
 801048c:	d437      	bmi.n	80104fe <_printf_float+0x386>
 801048e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010490:	ebaa 0903 	sub.w	r9, sl, r3
 8010494:	9b06      	ldr	r3, [sp, #24]
 8010496:	ebaa 0303 	sub.w	r3, sl, r3
 801049a:	4599      	cmp	r9, r3
 801049c:	bfa8      	it	ge
 801049e:	4699      	movge	r9, r3
 80104a0:	f1b9 0f00 	cmp.w	r9, #0
 80104a4:	dc33      	bgt.n	801050e <_printf_float+0x396>
 80104a6:	f04f 0800 	mov.w	r8, #0
 80104aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104ae:	f104 0b1a 	add.w	fp, r4, #26
 80104b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104b4:	ebaa 0303 	sub.w	r3, sl, r3
 80104b8:	eba3 0309 	sub.w	r3, r3, r9
 80104bc:	4543      	cmp	r3, r8
 80104be:	f77f af79 	ble.w	80103b4 <_printf_float+0x23c>
 80104c2:	2301      	movs	r3, #1
 80104c4:	465a      	mov	r2, fp
 80104c6:	4631      	mov	r1, r6
 80104c8:	4628      	mov	r0, r5
 80104ca:	47b8      	blx	r7
 80104cc:	3001      	adds	r0, #1
 80104ce:	f43f aeae 	beq.w	801022e <_printf_float+0xb6>
 80104d2:	f108 0801 	add.w	r8, r8, #1
 80104d6:	e7ec      	b.n	80104b2 <_printf_float+0x33a>
 80104d8:	4642      	mov	r2, r8
 80104da:	4631      	mov	r1, r6
 80104dc:	4628      	mov	r0, r5
 80104de:	47b8      	blx	r7
 80104e0:	3001      	adds	r0, #1
 80104e2:	d1c2      	bne.n	801046a <_printf_float+0x2f2>
 80104e4:	e6a3      	b.n	801022e <_printf_float+0xb6>
 80104e6:	2301      	movs	r3, #1
 80104e8:	4631      	mov	r1, r6
 80104ea:	4628      	mov	r0, r5
 80104ec:	9206      	str	r2, [sp, #24]
 80104ee:	47b8      	blx	r7
 80104f0:	3001      	adds	r0, #1
 80104f2:	f43f ae9c 	beq.w	801022e <_printf_float+0xb6>
 80104f6:	9a06      	ldr	r2, [sp, #24]
 80104f8:	f10b 0b01 	add.w	fp, fp, #1
 80104fc:	e7bb      	b.n	8010476 <_printf_float+0x2fe>
 80104fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010502:	4631      	mov	r1, r6
 8010504:	4628      	mov	r0, r5
 8010506:	47b8      	blx	r7
 8010508:	3001      	adds	r0, #1
 801050a:	d1c0      	bne.n	801048e <_printf_float+0x316>
 801050c:	e68f      	b.n	801022e <_printf_float+0xb6>
 801050e:	9a06      	ldr	r2, [sp, #24]
 8010510:	464b      	mov	r3, r9
 8010512:	4442      	add	r2, r8
 8010514:	4631      	mov	r1, r6
 8010516:	4628      	mov	r0, r5
 8010518:	47b8      	blx	r7
 801051a:	3001      	adds	r0, #1
 801051c:	d1c3      	bne.n	80104a6 <_printf_float+0x32e>
 801051e:	e686      	b.n	801022e <_printf_float+0xb6>
 8010520:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010524:	f1ba 0f01 	cmp.w	sl, #1
 8010528:	dc01      	bgt.n	801052e <_printf_float+0x3b6>
 801052a:	07db      	lsls	r3, r3, #31
 801052c:	d536      	bpl.n	801059c <_printf_float+0x424>
 801052e:	2301      	movs	r3, #1
 8010530:	4642      	mov	r2, r8
 8010532:	4631      	mov	r1, r6
 8010534:	4628      	mov	r0, r5
 8010536:	47b8      	blx	r7
 8010538:	3001      	adds	r0, #1
 801053a:	f43f ae78 	beq.w	801022e <_printf_float+0xb6>
 801053e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010542:	4631      	mov	r1, r6
 8010544:	4628      	mov	r0, r5
 8010546:	47b8      	blx	r7
 8010548:	3001      	adds	r0, #1
 801054a:	f43f ae70 	beq.w	801022e <_printf_float+0xb6>
 801054e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010552:	2200      	movs	r2, #0
 8010554:	2300      	movs	r3, #0
 8010556:	f10a 3aff 	add.w	sl, sl, #4294967295
 801055a:	f7f0 fa8d 	bl	8000a78 <__aeabi_dcmpeq>
 801055e:	b9c0      	cbnz	r0, 8010592 <_printf_float+0x41a>
 8010560:	4653      	mov	r3, sl
 8010562:	f108 0201 	add.w	r2, r8, #1
 8010566:	4631      	mov	r1, r6
 8010568:	4628      	mov	r0, r5
 801056a:	47b8      	blx	r7
 801056c:	3001      	adds	r0, #1
 801056e:	d10c      	bne.n	801058a <_printf_float+0x412>
 8010570:	e65d      	b.n	801022e <_printf_float+0xb6>
 8010572:	2301      	movs	r3, #1
 8010574:	465a      	mov	r2, fp
 8010576:	4631      	mov	r1, r6
 8010578:	4628      	mov	r0, r5
 801057a:	47b8      	blx	r7
 801057c:	3001      	adds	r0, #1
 801057e:	f43f ae56 	beq.w	801022e <_printf_float+0xb6>
 8010582:	f108 0801 	add.w	r8, r8, #1
 8010586:	45d0      	cmp	r8, sl
 8010588:	dbf3      	blt.n	8010572 <_printf_float+0x3fa>
 801058a:	464b      	mov	r3, r9
 801058c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010590:	e6df      	b.n	8010352 <_printf_float+0x1da>
 8010592:	f04f 0800 	mov.w	r8, #0
 8010596:	f104 0b1a 	add.w	fp, r4, #26
 801059a:	e7f4      	b.n	8010586 <_printf_float+0x40e>
 801059c:	2301      	movs	r3, #1
 801059e:	4642      	mov	r2, r8
 80105a0:	e7e1      	b.n	8010566 <_printf_float+0x3ee>
 80105a2:	2301      	movs	r3, #1
 80105a4:	464a      	mov	r2, r9
 80105a6:	4631      	mov	r1, r6
 80105a8:	4628      	mov	r0, r5
 80105aa:	47b8      	blx	r7
 80105ac:	3001      	adds	r0, #1
 80105ae:	f43f ae3e 	beq.w	801022e <_printf_float+0xb6>
 80105b2:	f108 0801 	add.w	r8, r8, #1
 80105b6:	68e3      	ldr	r3, [r4, #12]
 80105b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80105ba:	1a5b      	subs	r3, r3, r1
 80105bc:	4543      	cmp	r3, r8
 80105be:	dcf0      	bgt.n	80105a2 <_printf_float+0x42a>
 80105c0:	e6fc      	b.n	80103bc <_printf_float+0x244>
 80105c2:	f04f 0800 	mov.w	r8, #0
 80105c6:	f104 0919 	add.w	r9, r4, #25
 80105ca:	e7f4      	b.n	80105b6 <_printf_float+0x43e>

080105cc <_printf_common>:
 80105cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105d0:	4616      	mov	r6, r2
 80105d2:	4698      	mov	r8, r3
 80105d4:	688a      	ldr	r2, [r1, #8]
 80105d6:	690b      	ldr	r3, [r1, #16]
 80105d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80105dc:	4293      	cmp	r3, r2
 80105de:	bfb8      	it	lt
 80105e0:	4613      	movlt	r3, r2
 80105e2:	6033      	str	r3, [r6, #0]
 80105e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80105e8:	4607      	mov	r7, r0
 80105ea:	460c      	mov	r4, r1
 80105ec:	b10a      	cbz	r2, 80105f2 <_printf_common+0x26>
 80105ee:	3301      	adds	r3, #1
 80105f0:	6033      	str	r3, [r6, #0]
 80105f2:	6823      	ldr	r3, [r4, #0]
 80105f4:	0699      	lsls	r1, r3, #26
 80105f6:	bf42      	ittt	mi
 80105f8:	6833      	ldrmi	r3, [r6, #0]
 80105fa:	3302      	addmi	r3, #2
 80105fc:	6033      	strmi	r3, [r6, #0]
 80105fe:	6825      	ldr	r5, [r4, #0]
 8010600:	f015 0506 	ands.w	r5, r5, #6
 8010604:	d106      	bne.n	8010614 <_printf_common+0x48>
 8010606:	f104 0a19 	add.w	sl, r4, #25
 801060a:	68e3      	ldr	r3, [r4, #12]
 801060c:	6832      	ldr	r2, [r6, #0]
 801060e:	1a9b      	subs	r3, r3, r2
 8010610:	42ab      	cmp	r3, r5
 8010612:	dc26      	bgt.n	8010662 <_printf_common+0x96>
 8010614:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010618:	6822      	ldr	r2, [r4, #0]
 801061a:	3b00      	subs	r3, #0
 801061c:	bf18      	it	ne
 801061e:	2301      	movne	r3, #1
 8010620:	0692      	lsls	r2, r2, #26
 8010622:	d42b      	bmi.n	801067c <_printf_common+0xb0>
 8010624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010628:	4641      	mov	r1, r8
 801062a:	4638      	mov	r0, r7
 801062c:	47c8      	blx	r9
 801062e:	3001      	adds	r0, #1
 8010630:	d01e      	beq.n	8010670 <_printf_common+0xa4>
 8010632:	6823      	ldr	r3, [r4, #0]
 8010634:	6922      	ldr	r2, [r4, #16]
 8010636:	f003 0306 	and.w	r3, r3, #6
 801063a:	2b04      	cmp	r3, #4
 801063c:	bf02      	ittt	eq
 801063e:	68e5      	ldreq	r5, [r4, #12]
 8010640:	6833      	ldreq	r3, [r6, #0]
 8010642:	1aed      	subeq	r5, r5, r3
 8010644:	68a3      	ldr	r3, [r4, #8]
 8010646:	bf0c      	ite	eq
 8010648:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801064c:	2500      	movne	r5, #0
 801064e:	4293      	cmp	r3, r2
 8010650:	bfc4      	itt	gt
 8010652:	1a9b      	subgt	r3, r3, r2
 8010654:	18ed      	addgt	r5, r5, r3
 8010656:	2600      	movs	r6, #0
 8010658:	341a      	adds	r4, #26
 801065a:	42b5      	cmp	r5, r6
 801065c:	d11a      	bne.n	8010694 <_printf_common+0xc8>
 801065e:	2000      	movs	r0, #0
 8010660:	e008      	b.n	8010674 <_printf_common+0xa8>
 8010662:	2301      	movs	r3, #1
 8010664:	4652      	mov	r2, sl
 8010666:	4641      	mov	r1, r8
 8010668:	4638      	mov	r0, r7
 801066a:	47c8      	blx	r9
 801066c:	3001      	adds	r0, #1
 801066e:	d103      	bne.n	8010678 <_printf_common+0xac>
 8010670:	f04f 30ff 	mov.w	r0, #4294967295
 8010674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010678:	3501      	adds	r5, #1
 801067a:	e7c6      	b.n	801060a <_printf_common+0x3e>
 801067c:	18e1      	adds	r1, r4, r3
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	2030      	movs	r0, #48	@ 0x30
 8010682:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010686:	4422      	add	r2, r4
 8010688:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801068c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010690:	3302      	adds	r3, #2
 8010692:	e7c7      	b.n	8010624 <_printf_common+0x58>
 8010694:	2301      	movs	r3, #1
 8010696:	4622      	mov	r2, r4
 8010698:	4641      	mov	r1, r8
 801069a:	4638      	mov	r0, r7
 801069c:	47c8      	blx	r9
 801069e:	3001      	adds	r0, #1
 80106a0:	d0e6      	beq.n	8010670 <_printf_common+0xa4>
 80106a2:	3601      	adds	r6, #1
 80106a4:	e7d9      	b.n	801065a <_printf_common+0x8e>
	...

080106a8 <_printf_i>:
 80106a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106ac:	7e0f      	ldrb	r7, [r1, #24]
 80106ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80106b0:	2f78      	cmp	r7, #120	@ 0x78
 80106b2:	4691      	mov	r9, r2
 80106b4:	4680      	mov	r8, r0
 80106b6:	460c      	mov	r4, r1
 80106b8:	469a      	mov	sl, r3
 80106ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80106be:	d807      	bhi.n	80106d0 <_printf_i+0x28>
 80106c0:	2f62      	cmp	r7, #98	@ 0x62
 80106c2:	d80a      	bhi.n	80106da <_printf_i+0x32>
 80106c4:	2f00      	cmp	r7, #0
 80106c6:	f000 80d1 	beq.w	801086c <_printf_i+0x1c4>
 80106ca:	2f58      	cmp	r7, #88	@ 0x58
 80106cc:	f000 80b8 	beq.w	8010840 <_printf_i+0x198>
 80106d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80106d8:	e03a      	b.n	8010750 <_printf_i+0xa8>
 80106da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80106de:	2b15      	cmp	r3, #21
 80106e0:	d8f6      	bhi.n	80106d0 <_printf_i+0x28>
 80106e2:	a101      	add	r1, pc, #4	@ (adr r1, 80106e8 <_printf_i+0x40>)
 80106e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80106e8:	08010741 	.word	0x08010741
 80106ec:	08010755 	.word	0x08010755
 80106f0:	080106d1 	.word	0x080106d1
 80106f4:	080106d1 	.word	0x080106d1
 80106f8:	080106d1 	.word	0x080106d1
 80106fc:	080106d1 	.word	0x080106d1
 8010700:	08010755 	.word	0x08010755
 8010704:	080106d1 	.word	0x080106d1
 8010708:	080106d1 	.word	0x080106d1
 801070c:	080106d1 	.word	0x080106d1
 8010710:	080106d1 	.word	0x080106d1
 8010714:	08010853 	.word	0x08010853
 8010718:	0801077f 	.word	0x0801077f
 801071c:	0801080d 	.word	0x0801080d
 8010720:	080106d1 	.word	0x080106d1
 8010724:	080106d1 	.word	0x080106d1
 8010728:	08010875 	.word	0x08010875
 801072c:	080106d1 	.word	0x080106d1
 8010730:	0801077f 	.word	0x0801077f
 8010734:	080106d1 	.word	0x080106d1
 8010738:	080106d1 	.word	0x080106d1
 801073c:	08010815 	.word	0x08010815
 8010740:	6833      	ldr	r3, [r6, #0]
 8010742:	1d1a      	adds	r2, r3, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	6032      	str	r2, [r6, #0]
 8010748:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801074c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010750:	2301      	movs	r3, #1
 8010752:	e09c      	b.n	801088e <_printf_i+0x1e6>
 8010754:	6833      	ldr	r3, [r6, #0]
 8010756:	6820      	ldr	r0, [r4, #0]
 8010758:	1d19      	adds	r1, r3, #4
 801075a:	6031      	str	r1, [r6, #0]
 801075c:	0606      	lsls	r6, r0, #24
 801075e:	d501      	bpl.n	8010764 <_printf_i+0xbc>
 8010760:	681d      	ldr	r5, [r3, #0]
 8010762:	e003      	b.n	801076c <_printf_i+0xc4>
 8010764:	0645      	lsls	r5, r0, #25
 8010766:	d5fb      	bpl.n	8010760 <_printf_i+0xb8>
 8010768:	f9b3 5000 	ldrsh.w	r5, [r3]
 801076c:	2d00      	cmp	r5, #0
 801076e:	da03      	bge.n	8010778 <_printf_i+0xd0>
 8010770:	232d      	movs	r3, #45	@ 0x2d
 8010772:	426d      	negs	r5, r5
 8010774:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010778:	4858      	ldr	r0, [pc, #352]	@ (80108dc <_printf_i+0x234>)
 801077a:	230a      	movs	r3, #10
 801077c:	e011      	b.n	80107a2 <_printf_i+0xfa>
 801077e:	6821      	ldr	r1, [r4, #0]
 8010780:	6833      	ldr	r3, [r6, #0]
 8010782:	0608      	lsls	r0, r1, #24
 8010784:	f853 5b04 	ldr.w	r5, [r3], #4
 8010788:	d402      	bmi.n	8010790 <_printf_i+0xe8>
 801078a:	0649      	lsls	r1, r1, #25
 801078c:	bf48      	it	mi
 801078e:	b2ad      	uxthmi	r5, r5
 8010790:	2f6f      	cmp	r7, #111	@ 0x6f
 8010792:	4852      	ldr	r0, [pc, #328]	@ (80108dc <_printf_i+0x234>)
 8010794:	6033      	str	r3, [r6, #0]
 8010796:	bf14      	ite	ne
 8010798:	230a      	movne	r3, #10
 801079a:	2308      	moveq	r3, #8
 801079c:	2100      	movs	r1, #0
 801079e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80107a2:	6866      	ldr	r6, [r4, #4]
 80107a4:	60a6      	str	r6, [r4, #8]
 80107a6:	2e00      	cmp	r6, #0
 80107a8:	db05      	blt.n	80107b6 <_printf_i+0x10e>
 80107aa:	6821      	ldr	r1, [r4, #0]
 80107ac:	432e      	orrs	r6, r5
 80107ae:	f021 0104 	bic.w	r1, r1, #4
 80107b2:	6021      	str	r1, [r4, #0]
 80107b4:	d04b      	beq.n	801084e <_printf_i+0x1a6>
 80107b6:	4616      	mov	r6, r2
 80107b8:	fbb5 f1f3 	udiv	r1, r5, r3
 80107bc:	fb03 5711 	mls	r7, r3, r1, r5
 80107c0:	5dc7      	ldrb	r7, [r0, r7]
 80107c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107c6:	462f      	mov	r7, r5
 80107c8:	42bb      	cmp	r3, r7
 80107ca:	460d      	mov	r5, r1
 80107cc:	d9f4      	bls.n	80107b8 <_printf_i+0x110>
 80107ce:	2b08      	cmp	r3, #8
 80107d0:	d10b      	bne.n	80107ea <_printf_i+0x142>
 80107d2:	6823      	ldr	r3, [r4, #0]
 80107d4:	07df      	lsls	r7, r3, #31
 80107d6:	d508      	bpl.n	80107ea <_printf_i+0x142>
 80107d8:	6923      	ldr	r3, [r4, #16]
 80107da:	6861      	ldr	r1, [r4, #4]
 80107dc:	4299      	cmp	r1, r3
 80107de:	bfde      	ittt	le
 80107e0:	2330      	movle	r3, #48	@ 0x30
 80107e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80107e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80107ea:	1b92      	subs	r2, r2, r6
 80107ec:	6122      	str	r2, [r4, #16]
 80107ee:	f8cd a000 	str.w	sl, [sp]
 80107f2:	464b      	mov	r3, r9
 80107f4:	aa03      	add	r2, sp, #12
 80107f6:	4621      	mov	r1, r4
 80107f8:	4640      	mov	r0, r8
 80107fa:	f7ff fee7 	bl	80105cc <_printf_common>
 80107fe:	3001      	adds	r0, #1
 8010800:	d14a      	bne.n	8010898 <_printf_i+0x1f0>
 8010802:	f04f 30ff 	mov.w	r0, #4294967295
 8010806:	b004      	add	sp, #16
 8010808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801080c:	6823      	ldr	r3, [r4, #0]
 801080e:	f043 0320 	orr.w	r3, r3, #32
 8010812:	6023      	str	r3, [r4, #0]
 8010814:	4832      	ldr	r0, [pc, #200]	@ (80108e0 <_printf_i+0x238>)
 8010816:	2778      	movs	r7, #120	@ 0x78
 8010818:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	6831      	ldr	r1, [r6, #0]
 8010820:	061f      	lsls	r7, r3, #24
 8010822:	f851 5b04 	ldr.w	r5, [r1], #4
 8010826:	d402      	bmi.n	801082e <_printf_i+0x186>
 8010828:	065f      	lsls	r7, r3, #25
 801082a:	bf48      	it	mi
 801082c:	b2ad      	uxthmi	r5, r5
 801082e:	6031      	str	r1, [r6, #0]
 8010830:	07d9      	lsls	r1, r3, #31
 8010832:	bf44      	itt	mi
 8010834:	f043 0320 	orrmi.w	r3, r3, #32
 8010838:	6023      	strmi	r3, [r4, #0]
 801083a:	b11d      	cbz	r5, 8010844 <_printf_i+0x19c>
 801083c:	2310      	movs	r3, #16
 801083e:	e7ad      	b.n	801079c <_printf_i+0xf4>
 8010840:	4826      	ldr	r0, [pc, #152]	@ (80108dc <_printf_i+0x234>)
 8010842:	e7e9      	b.n	8010818 <_printf_i+0x170>
 8010844:	6823      	ldr	r3, [r4, #0]
 8010846:	f023 0320 	bic.w	r3, r3, #32
 801084a:	6023      	str	r3, [r4, #0]
 801084c:	e7f6      	b.n	801083c <_printf_i+0x194>
 801084e:	4616      	mov	r6, r2
 8010850:	e7bd      	b.n	80107ce <_printf_i+0x126>
 8010852:	6833      	ldr	r3, [r6, #0]
 8010854:	6825      	ldr	r5, [r4, #0]
 8010856:	6961      	ldr	r1, [r4, #20]
 8010858:	1d18      	adds	r0, r3, #4
 801085a:	6030      	str	r0, [r6, #0]
 801085c:	062e      	lsls	r6, r5, #24
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	d501      	bpl.n	8010866 <_printf_i+0x1be>
 8010862:	6019      	str	r1, [r3, #0]
 8010864:	e002      	b.n	801086c <_printf_i+0x1c4>
 8010866:	0668      	lsls	r0, r5, #25
 8010868:	d5fb      	bpl.n	8010862 <_printf_i+0x1ba>
 801086a:	8019      	strh	r1, [r3, #0]
 801086c:	2300      	movs	r3, #0
 801086e:	6123      	str	r3, [r4, #16]
 8010870:	4616      	mov	r6, r2
 8010872:	e7bc      	b.n	80107ee <_printf_i+0x146>
 8010874:	6833      	ldr	r3, [r6, #0]
 8010876:	1d1a      	adds	r2, r3, #4
 8010878:	6032      	str	r2, [r6, #0]
 801087a:	681e      	ldr	r6, [r3, #0]
 801087c:	6862      	ldr	r2, [r4, #4]
 801087e:	2100      	movs	r1, #0
 8010880:	4630      	mov	r0, r6
 8010882:	f7ef fc7d 	bl	8000180 <memchr>
 8010886:	b108      	cbz	r0, 801088c <_printf_i+0x1e4>
 8010888:	1b80      	subs	r0, r0, r6
 801088a:	6060      	str	r0, [r4, #4]
 801088c:	6863      	ldr	r3, [r4, #4]
 801088e:	6123      	str	r3, [r4, #16]
 8010890:	2300      	movs	r3, #0
 8010892:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010896:	e7aa      	b.n	80107ee <_printf_i+0x146>
 8010898:	6923      	ldr	r3, [r4, #16]
 801089a:	4632      	mov	r2, r6
 801089c:	4649      	mov	r1, r9
 801089e:	4640      	mov	r0, r8
 80108a0:	47d0      	blx	sl
 80108a2:	3001      	adds	r0, #1
 80108a4:	d0ad      	beq.n	8010802 <_printf_i+0x15a>
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	079b      	lsls	r3, r3, #30
 80108aa:	d413      	bmi.n	80108d4 <_printf_i+0x22c>
 80108ac:	68e0      	ldr	r0, [r4, #12]
 80108ae:	9b03      	ldr	r3, [sp, #12]
 80108b0:	4298      	cmp	r0, r3
 80108b2:	bfb8      	it	lt
 80108b4:	4618      	movlt	r0, r3
 80108b6:	e7a6      	b.n	8010806 <_printf_i+0x15e>
 80108b8:	2301      	movs	r3, #1
 80108ba:	4632      	mov	r2, r6
 80108bc:	4649      	mov	r1, r9
 80108be:	4640      	mov	r0, r8
 80108c0:	47d0      	blx	sl
 80108c2:	3001      	adds	r0, #1
 80108c4:	d09d      	beq.n	8010802 <_printf_i+0x15a>
 80108c6:	3501      	adds	r5, #1
 80108c8:	68e3      	ldr	r3, [r4, #12]
 80108ca:	9903      	ldr	r1, [sp, #12]
 80108cc:	1a5b      	subs	r3, r3, r1
 80108ce:	42ab      	cmp	r3, r5
 80108d0:	dcf2      	bgt.n	80108b8 <_printf_i+0x210>
 80108d2:	e7eb      	b.n	80108ac <_printf_i+0x204>
 80108d4:	2500      	movs	r5, #0
 80108d6:	f104 0619 	add.w	r6, r4, #25
 80108da:	e7f5      	b.n	80108c8 <_printf_i+0x220>
 80108dc:	08016937 	.word	0x08016937
 80108e0:	08016948 	.word	0x08016948

080108e4 <std>:
 80108e4:	2300      	movs	r3, #0
 80108e6:	b510      	push	{r4, lr}
 80108e8:	4604      	mov	r4, r0
 80108ea:	e9c0 3300 	strd	r3, r3, [r0]
 80108ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80108f2:	6083      	str	r3, [r0, #8]
 80108f4:	8181      	strh	r1, [r0, #12]
 80108f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80108f8:	81c2      	strh	r2, [r0, #14]
 80108fa:	6183      	str	r3, [r0, #24]
 80108fc:	4619      	mov	r1, r3
 80108fe:	2208      	movs	r2, #8
 8010900:	305c      	adds	r0, #92	@ 0x5c
 8010902:	f000 fa01 	bl	8010d08 <memset>
 8010906:	4b0d      	ldr	r3, [pc, #52]	@ (801093c <std+0x58>)
 8010908:	6263      	str	r3, [r4, #36]	@ 0x24
 801090a:	4b0d      	ldr	r3, [pc, #52]	@ (8010940 <std+0x5c>)
 801090c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801090e:	4b0d      	ldr	r3, [pc, #52]	@ (8010944 <std+0x60>)
 8010910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010912:	4b0d      	ldr	r3, [pc, #52]	@ (8010948 <std+0x64>)
 8010914:	6323      	str	r3, [r4, #48]	@ 0x30
 8010916:	4b0d      	ldr	r3, [pc, #52]	@ (801094c <std+0x68>)
 8010918:	6224      	str	r4, [r4, #32]
 801091a:	429c      	cmp	r4, r3
 801091c:	d006      	beq.n	801092c <std+0x48>
 801091e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010922:	4294      	cmp	r4, r2
 8010924:	d002      	beq.n	801092c <std+0x48>
 8010926:	33d0      	adds	r3, #208	@ 0xd0
 8010928:	429c      	cmp	r4, r3
 801092a:	d105      	bne.n	8010938 <std+0x54>
 801092c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010934:	f000 ba8a 	b.w	8010e4c <__retarget_lock_init_recursive>
 8010938:	bd10      	pop	{r4, pc}
 801093a:	bf00      	nop
 801093c:	08010b59 	.word	0x08010b59
 8010940:	08010b7b 	.word	0x08010b7b
 8010944:	08010bb3 	.word	0x08010bb3
 8010948:	08010bd7 	.word	0x08010bd7
 801094c:	200031bc 	.word	0x200031bc

08010950 <stdio_exit_handler>:
 8010950:	4a02      	ldr	r2, [pc, #8]	@ (801095c <stdio_exit_handler+0xc>)
 8010952:	4903      	ldr	r1, [pc, #12]	@ (8010960 <stdio_exit_handler+0x10>)
 8010954:	4803      	ldr	r0, [pc, #12]	@ (8010964 <stdio_exit_handler+0x14>)
 8010956:	f000 b869 	b.w	8010a2c <_fwalk_sglue>
 801095a:	bf00      	nop
 801095c:	20000074 	.word	0x20000074
 8010960:	08012681 	.word	0x08012681
 8010964:	200001f0 	.word	0x200001f0

08010968 <cleanup_stdio>:
 8010968:	6841      	ldr	r1, [r0, #4]
 801096a:	4b0c      	ldr	r3, [pc, #48]	@ (801099c <cleanup_stdio+0x34>)
 801096c:	4299      	cmp	r1, r3
 801096e:	b510      	push	{r4, lr}
 8010970:	4604      	mov	r4, r0
 8010972:	d001      	beq.n	8010978 <cleanup_stdio+0x10>
 8010974:	f001 fe84 	bl	8012680 <_fflush_r>
 8010978:	68a1      	ldr	r1, [r4, #8]
 801097a:	4b09      	ldr	r3, [pc, #36]	@ (80109a0 <cleanup_stdio+0x38>)
 801097c:	4299      	cmp	r1, r3
 801097e:	d002      	beq.n	8010986 <cleanup_stdio+0x1e>
 8010980:	4620      	mov	r0, r4
 8010982:	f001 fe7d 	bl	8012680 <_fflush_r>
 8010986:	68e1      	ldr	r1, [r4, #12]
 8010988:	4b06      	ldr	r3, [pc, #24]	@ (80109a4 <cleanup_stdio+0x3c>)
 801098a:	4299      	cmp	r1, r3
 801098c:	d004      	beq.n	8010998 <cleanup_stdio+0x30>
 801098e:	4620      	mov	r0, r4
 8010990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010994:	f001 be74 	b.w	8012680 <_fflush_r>
 8010998:	bd10      	pop	{r4, pc}
 801099a:	bf00      	nop
 801099c:	200031bc 	.word	0x200031bc
 80109a0:	20003224 	.word	0x20003224
 80109a4:	2000328c 	.word	0x2000328c

080109a8 <global_stdio_init.part.0>:
 80109a8:	b510      	push	{r4, lr}
 80109aa:	4b0b      	ldr	r3, [pc, #44]	@ (80109d8 <global_stdio_init.part.0+0x30>)
 80109ac:	4c0b      	ldr	r4, [pc, #44]	@ (80109dc <global_stdio_init.part.0+0x34>)
 80109ae:	4a0c      	ldr	r2, [pc, #48]	@ (80109e0 <global_stdio_init.part.0+0x38>)
 80109b0:	601a      	str	r2, [r3, #0]
 80109b2:	4620      	mov	r0, r4
 80109b4:	2200      	movs	r2, #0
 80109b6:	2104      	movs	r1, #4
 80109b8:	f7ff ff94 	bl	80108e4 <std>
 80109bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80109c0:	2201      	movs	r2, #1
 80109c2:	2109      	movs	r1, #9
 80109c4:	f7ff ff8e 	bl	80108e4 <std>
 80109c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80109cc:	2202      	movs	r2, #2
 80109ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109d2:	2112      	movs	r1, #18
 80109d4:	f7ff bf86 	b.w	80108e4 <std>
 80109d8:	200032f4 	.word	0x200032f4
 80109dc:	200031bc 	.word	0x200031bc
 80109e0:	08010951 	.word	0x08010951

080109e4 <__sfp_lock_acquire>:
 80109e4:	4801      	ldr	r0, [pc, #4]	@ (80109ec <__sfp_lock_acquire+0x8>)
 80109e6:	f000 ba32 	b.w	8010e4e <__retarget_lock_acquire_recursive>
 80109ea:	bf00      	nop
 80109ec:	200032fd 	.word	0x200032fd

080109f0 <__sfp_lock_release>:
 80109f0:	4801      	ldr	r0, [pc, #4]	@ (80109f8 <__sfp_lock_release+0x8>)
 80109f2:	f000 ba2d 	b.w	8010e50 <__retarget_lock_release_recursive>
 80109f6:	bf00      	nop
 80109f8:	200032fd 	.word	0x200032fd

080109fc <__sinit>:
 80109fc:	b510      	push	{r4, lr}
 80109fe:	4604      	mov	r4, r0
 8010a00:	f7ff fff0 	bl	80109e4 <__sfp_lock_acquire>
 8010a04:	6a23      	ldr	r3, [r4, #32]
 8010a06:	b11b      	cbz	r3, 8010a10 <__sinit+0x14>
 8010a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a0c:	f7ff bff0 	b.w	80109f0 <__sfp_lock_release>
 8010a10:	4b04      	ldr	r3, [pc, #16]	@ (8010a24 <__sinit+0x28>)
 8010a12:	6223      	str	r3, [r4, #32]
 8010a14:	4b04      	ldr	r3, [pc, #16]	@ (8010a28 <__sinit+0x2c>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d1f5      	bne.n	8010a08 <__sinit+0xc>
 8010a1c:	f7ff ffc4 	bl	80109a8 <global_stdio_init.part.0>
 8010a20:	e7f2      	b.n	8010a08 <__sinit+0xc>
 8010a22:	bf00      	nop
 8010a24:	08010969 	.word	0x08010969
 8010a28:	200032f4 	.word	0x200032f4

08010a2c <_fwalk_sglue>:
 8010a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010a30:	4607      	mov	r7, r0
 8010a32:	4688      	mov	r8, r1
 8010a34:	4614      	mov	r4, r2
 8010a36:	2600      	movs	r6, #0
 8010a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8010a40:	d505      	bpl.n	8010a4e <_fwalk_sglue+0x22>
 8010a42:	6824      	ldr	r4, [r4, #0]
 8010a44:	2c00      	cmp	r4, #0
 8010a46:	d1f7      	bne.n	8010a38 <_fwalk_sglue+0xc>
 8010a48:	4630      	mov	r0, r6
 8010a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a4e:	89ab      	ldrh	r3, [r5, #12]
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d907      	bls.n	8010a64 <_fwalk_sglue+0x38>
 8010a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010a58:	3301      	adds	r3, #1
 8010a5a:	d003      	beq.n	8010a64 <_fwalk_sglue+0x38>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	4638      	mov	r0, r7
 8010a60:	47c0      	blx	r8
 8010a62:	4306      	orrs	r6, r0
 8010a64:	3568      	adds	r5, #104	@ 0x68
 8010a66:	e7e9      	b.n	8010a3c <_fwalk_sglue+0x10>

08010a68 <iprintf>:
 8010a68:	b40f      	push	{r0, r1, r2, r3}
 8010a6a:	b507      	push	{r0, r1, r2, lr}
 8010a6c:	4906      	ldr	r1, [pc, #24]	@ (8010a88 <iprintf+0x20>)
 8010a6e:	ab04      	add	r3, sp, #16
 8010a70:	6808      	ldr	r0, [r1, #0]
 8010a72:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a76:	6881      	ldr	r1, [r0, #8]
 8010a78:	9301      	str	r3, [sp, #4]
 8010a7a:	f001 fc65 	bl	8012348 <_vfiprintf_r>
 8010a7e:	b003      	add	sp, #12
 8010a80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a84:	b004      	add	sp, #16
 8010a86:	4770      	bx	lr
 8010a88:	200001ec 	.word	0x200001ec

08010a8c <putchar>:
 8010a8c:	4b02      	ldr	r3, [pc, #8]	@ (8010a98 <putchar+0xc>)
 8010a8e:	4601      	mov	r1, r0
 8010a90:	6818      	ldr	r0, [r3, #0]
 8010a92:	6882      	ldr	r2, [r0, #8]
 8010a94:	f001 be7e 	b.w	8012794 <_putc_r>
 8010a98:	200001ec 	.word	0x200001ec

08010a9c <_puts_r>:
 8010a9c:	6a03      	ldr	r3, [r0, #32]
 8010a9e:	b570      	push	{r4, r5, r6, lr}
 8010aa0:	6884      	ldr	r4, [r0, #8]
 8010aa2:	4605      	mov	r5, r0
 8010aa4:	460e      	mov	r6, r1
 8010aa6:	b90b      	cbnz	r3, 8010aac <_puts_r+0x10>
 8010aa8:	f7ff ffa8 	bl	80109fc <__sinit>
 8010aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010aae:	07db      	lsls	r3, r3, #31
 8010ab0:	d405      	bmi.n	8010abe <_puts_r+0x22>
 8010ab2:	89a3      	ldrh	r3, [r4, #12]
 8010ab4:	0598      	lsls	r0, r3, #22
 8010ab6:	d402      	bmi.n	8010abe <_puts_r+0x22>
 8010ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010aba:	f000 f9c8 	bl	8010e4e <__retarget_lock_acquire_recursive>
 8010abe:	89a3      	ldrh	r3, [r4, #12]
 8010ac0:	0719      	lsls	r1, r3, #28
 8010ac2:	d502      	bpl.n	8010aca <_puts_r+0x2e>
 8010ac4:	6923      	ldr	r3, [r4, #16]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d135      	bne.n	8010b36 <_puts_r+0x9a>
 8010aca:	4621      	mov	r1, r4
 8010acc:	4628      	mov	r0, r5
 8010ace:	f000 f8c5 	bl	8010c5c <__swsetup_r>
 8010ad2:	b380      	cbz	r0, 8010b36 <_puts_r+0x9a>
 8010ad4:	f04f 35ff 	mov.w	r5, #4294967295
 8010ad8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ada:	07da      	lsls	r2, r3, #31
 8010adc:	d405      	bmi.n	8010aea <_puts_r+0x4e>
 8010ade:	89a3      	ldrh	r3, [r4, #12]
 8010ae0:	059b      	lsls	r3, r3, #22
 8010ae2:	d402      	bmi.n	8010aea <_puts_r+0x4e>
 8010ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ae6:	f000 f9b3 	bl	8010e50 <__retarget_lock_release_recursive>
 8010aea:	4628      	mov	r0, r5
 8010aec:	bd70      	pop	{r4, r5, r6, pc}
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	da04      	bge.n	8010afc <_puts_r+0x60>
 8010af2:	69a2      	ldr	r2, [r4, #24]
 8010af4:	429a      	cmp	r2, r3
 8010af6:	dc17      	bgt.n	8010b28 <_puts_r+0x8c>
 8010af8:	290a      	cmp	r1, #10
 8010afa:	d015      	beq.n	8010b28 <_puts_r+0x8c>
 8010afc:	6823      	ldr	r3, [r4, #0]
 8010afe:	1c5a      	adds	r2, r3, #1
 8010b00:	6022      	str	r2, [r4, #0]
 8010b02:	7019      	strb	r1, [r3, #0]
 8010b04:	68a3      	ldr	r3, [r4, #8]
 8010b06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	60a3      	str	r3, [r4, #8]
 8010b0e:	2900      	cmp	r1, #0
 8010b10:	d1ed      	bne.n	8010aee <_puts_r+0x52>
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	da11      	bge.n	8010b3a <_puts_r+0x9e>
 8010b16:	4622      	mov	r2, r4
 8010b18:	210a      	movs	r1, #10
 8010b1a:	4628      	mov	r0, r5
 8010b1c:	f000 f85f 	bl	8010bde <__swbuf_r>
 8010b20:	3001      	adds	r0, #1
 8010b22:	d0d7      	beq.n	8010ad4 <_puts_r+0x38>
 8010b24:	250a      	movs	r5, #10
 8010b26:	e7d7      	b.n	8010ad8 <_puts_r+0x3c>
 8010b28:	4622      	mov	r2, r4
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	f000 f857 	bl	8010bde <__swbuf_r>
 8010b30:	3001      	adds	r0, #1
 8010b32:	d1e7      	bne.n	8010b04 <_puts_r+0x68>
 8010b34:	e7ce      	b.n	8010ad4 <_puts_r+0x38>
 8010b36:	3e01      	subs	r6, #1
 8010b38:	e7e4      	b.n	8010b04 <_puts_r+0x68>
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	1c5a      	adds	r2, r3, #1
 8010b3e:	6022      	str	r2, [r4, #0]
 8010b40:	220a      	movs	r2, #10
 8010b42:	701a      	strb	r2, [r3, #0]
 8010b44:	e7ee      	b.n	8010b24 <_puts_r+0x88>
	...

08010b48 <puts>:
 8010b48:	4b02      	ldr	r3, [pc, #8]	@ (8010b54 <puts+0xc>)
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	6818      	ldr	r0, [r3, #0]
 8010b4e:	f7ff bfa5 	b.w	8010a9c <_puts_r>
 8010b52:	bf00      	nop
 8010b54:	200001ec 	.word	0x200001ec

08010b58 <__sread>:
 8010b58:	b510      	push	{r4, lr}
 8010b5a:	460c      	mov	r4, r1
 8010b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b60:	f000 f916 	bl	8010d90 <_read_r>
 8010b64:	2800      	cmp	r0, #0
 8010b66:	bfab      	itete	ge
 8010b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8010b6c:	181b      	addge	r3, r3, r0
 8010b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010b72:	bfac      	ite	ge
 8010b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010b76:	81a3      	strhlt	r3, [r4, #12]
 8010b78:	bd10      	pop	{r4, pc}

08010b7a <__swrite>:
 8010b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b7e:	461f      	mov	r7, r3
 8010b80:	898b      	ldrh	r3, [r1, #12]
 8010b82:	05db      	lsls	r3, r3, #23
 8010b84:	4605      	mov	r5, r0
 8010b86:	460c      	mov	r4, r1
 8010b88:	4616      	mov	r6, r2
 8010b8a:	d505      	bpl.n	8010b98 <__swrite+0x1e>
 8010b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b90:	2302      	movs	r3, #2
 8010b92:	2200      	movs	r2, #0
 8010b94:	f000 f8ea 	bl	8010d6c <_lseek_r>
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010ba2:	81a3      	strh	r3, [r4, #12]
 8010ba4:	4632      	mov	r2, r6
 8010ba6:	463b      	mov	r3, r7
 8010ba8:	4628      	mov	r0, r5
 8010baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bae:	f000 b911 	b.w	8010dd4 <_write_r>

08010bb2 <__sseek>:
 8010bb2:	b510      	push	{r4, lr}
 8010bb4:	460c      	mov	r4, r1
 8010bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bba:	f000 f8d7 	bl	8010d6c <_lseek_r>
 8010bbe:	1c43      	adds	r3, r0, #1
 8010bc0:	89a3      	ldrh	r3, [r4, #12]
 8010bc2:	bf15      	itete	ne
 8010bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010bce:	81a3      	strheq	r3, [r4, #12]
 8010bd0:	bf18      	it	ne
 8010bd2:	81a3      	strhne	r3, [r4, #12]
 8010bd4:	bd10      	pop	{r4, pc}

08010bd6 <__sclose>:
 8010bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bda:	f000 b8b7 	b.w	8010d4c <_close_r>

08010bde <__swbuf_r>:
 8010bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010be0:	460e      	mov	r6, r1
 8010be2:	4614      	mov	r4, r2
 8010be4:	4605      	mov	r5, r0
 8010be6:	b118      	cbz	r0, 8010bf0 <__swbuf_r+0x12>
 8010be8:	6a03      	ldr	r3, [r0, #32]
 8010bea:	b90b      	cbnz	r3, 8010bf0 <__swbuf_r+0x12>
 8010bec:	f7ff ff06 	bl	80109fc <__sinit>
 8010bf0:	69a3      	ldr	r3, [r4, #24]
 8010bf2:	60a3      	str	r3, [r4, #8]
 8010bf4:	89a3      	ldrh	r3, [r4, #12]
 8010bf6:	071a      	lsls	r2, r3, #28
 8010bf8:	d501      	bpl.n	8010bfe <__swbuf_r+0x20>
 8010bfa:	6923      	ldr	r3, [r4, #16]
 8010bfc:	b943      	cbnz	r3, 8010c10 <__swbuf_r+0x32>
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4628      	mov	r0, r5
 8010c02:	f000 f82b 	bl	8010c5c <__swsetup_r>
 8010c06:	b118      	cbz	r0, 8010c10 <__swbuf_r+0x32>
 8010c08:	f04f 37ff 	mov.w	r7, #4294967295
 8010c0c:	4638      	mov	r0, r7
 8010c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c10:	6823      	ldr	r3, [r4, #0]
 8010c12:	6922      	ldr	r2, [r4, #16]
 8010c14:	1a98      	subs	r0, r3, r2
 8010c16:	6963      	ldr	r3, [r4, #20]
 8010c18:	b2f6      	uxtb	r6, r6
 8010c1a:	4283      	cmp	r3, r0
 8010c1c:	4637      	mov	r7, r6
 8010c1e:	dc05      	bgt.n	8010c2c <__swbuf_r+0x4e>
 8010c20:	4621      	mov	r1, r4
 8010c22:	4628      	mov	r0, r5
 8010c24:	f001 fd2c 	bl	8012680 <_fflush_r>
 8010c28:	2800      	cmp	r0, #0
 8010c2a:	d1ed      	bne.n	8010c08 <__swbuf_r+0x2a>
 8010c2c:	68a3      	ldr	r3, [r4, #8]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	60a3      	str	r3, [r4, #8]
 8010c32:	6823      	ldr	r3, [r4, #0]
 8010c34:	1c5a      	adds	r2, r3, #1
 8010c36:	6022      	str	r2, [r4, #0]
 8010c38:	701e      	strb	r6, [r3, #0]
 8010c3a:	6962      	ldr	r2, [r4, #20]
 8010c3c:	1c43      	adds	r3, r0, #1
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d004      	beq.n	8010c4c <__swbuf_r+0x6e>
 8010c42:	89a3      	ldrh	r3, [r4, #12]
 8010c44:	07db      	lsls	r3, r3, #31
 8010c46:	d5e1      	bpl.n	8010c0c <__swbuf_r+0x2e>
 8010c48:	2e0a      	cmp	r6, #10
 8010c4a:	d1df      	bne.n	8010c0c <__swbuf_r+0x2e>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f001 fd16 	bl	8012680 <_fflush_r>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	d0d9      	beq.n	8010c0c <__swbuf_r+0x2e>
 8010c58:	e7d6      	b.n	8010c08 <__swbuf_r+0x2a>
	...

08010c5c <__swsetup_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4b29      	ldr	r3, [pc, #164]	@ (8010d04 <__swsetup_r+0xa8>)
 8010c60:	4605      	mov	r5, r0
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	460c      	mov	r4, r1
 8010c66:	b118      	cbz	r0, 8010c70 <__swsetup_r+0x14>
 8010c68:	6a03      	ldr	r3, [r0, #32]
 8010c6a:	b90b      	cbnz	r3, 8010c70 <__swsetup_r+0x14>
 8010c6c:	f7ff fec6 	bl	80109fc <__sinit>
 8010c70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c74:	0719      	lsls	r1, r3, #28
 8010c76:	d422      	bmi.n	8010cbe <__swsetup_r+0x62>
 8010c78:	06da      	lsls	r2, r3, #27
 8010c7a:	d407      	bmi.n	8010c8c <__swsetup_r+0x30>
 8010c7c:	2209      	movs	r2, #9
 8010c7e:	602a      	str	r2, [r5, #0]
 8010c80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c84:	81a3      	strh	r3, [r4, #12]
 8010c86:	f04f 30ff 	mov.w	r0, #4294967295
 8010c8a:	e033      	b.n	8010cf4 <__swsetup_r+0x98>
 8010c8c:	0758      	lsls	r0, r3, #29
 8010c8e:	d512      	bpl.n	8010cb6 <__swsetup_r+0x5a>
 8010c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c92:	b141      	cbz	r1, 8010ca6 <__swsetup_r+0x4a>
 8010c94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c98:	4299      	cmp	r1, r3
 8010c9a:	d002      	beq.n	8010ca2 <__swsetup_r+0x46>
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	f000 ff47 	bl	8011b30 <_free_r>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	6363      	str	r3, [r4, #52]	@ 0x34
 8010ca6:	89a3      	ldrh	r3, [r4, #12]
 8010ca8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010cac:	81a3      	strh	r3, [r4, #12]
 8010cae:	2300      	movs	r3, #0
 8010cb0:	6063      	str	r3, [r4, #4]
 8010cb2:	6923      	ldr	r3, [r4, #16]
 8010cb4:	6023      	str	r3, [r4, #0]
 8010cb6:	89a3      	ldrh	r3, [r4, #12]
 8010cb8:	f043 0308 	orr.w	r3, r3, #8
 8010cbc:	81a3      	strh	r3, [r4, #12]
 8010cbe:	6923      	ldr	r3, [r4, #16]
 8010cc0:	b94b      	cbnz	r3, 8010cd6 <__swsetup_r+0x7a>
 8010cc2:	89a3      	ldrh	r3, [r4, #12]
 8010cc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ccc:	d003      	beq.n	8010cd6 <__swsetup_r+0x7a>
 8010cce:	4621      	mov	r1, r4
 8010cd0:	4628      	mov	r0, r5
 8010cd2:	f001 fd23 	bl	801271c <__smakebuf_r>
 8010cd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cda:	f013 0201 	ands.w	r2, r3, #1
 8010cde:	d00a      	beq.n	8010cf6 <__swsetup_r+0x9a>
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	60a2      	str	r2, [r4, #8]
 8010ce4:	6962      	ldr	r2, [r4, #20]
 8010ce6:	4252      	negs	r2, r2
 8010ce8:	61a2      	str	r2, [r4, #24]
 8010cea:	6922      	ldr	r2, [r4, #16]
 8010cec:	b942      	cbnz	r2, 8010d00 <__swsetup_r+0xa4>
 8010cee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010cf2:	d1c5      	bne.n	8010c80 <__swsetup_r+0x24>
 8010cf4:	bd38      	pop	{r3, r4, r5, pc}
 8010cf6:	0799      	lsls	r1, r3, #30
 8010cf8:	bf58      	it	pl
 8010cfa:	6962      	ldrpl	r2, [r4, #20]
 8010cfc:	60a2      	str	r2, [r4, #8]
 8010cfe:	e7f4      	b.n	8010cea <__swsetup_r+0x8e>
 8010d00:	2000      	movs	r0, #0
 8010d02:	e7f7      	b.n	8010cf4 <__swsetup_r+0x98>
 8010d04:	200001ec 	.word	0x200001ec

08010d08 <memset>:
 8010d08:	4402      	add	r2, r0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d100      	bne.n	8010d12 <memset+0xa>
 8010d10:	4770      	bx	lr
 8010d12:	f803 1b01 	strb.w	r1, [r3], #1
 8010d16:	e7f9      	b.n	8010d0c <memset+0x4>

08010d18 <strrchr>:
 8010d18:	b538      	push	{r3, r4, r5, lr}
 8010d1a:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8010d1e:	4603      	mov	r3, r0
 8010d20:	d10e      	bne.n	8010d40 <strrchr+0x28>
 8010d22:	4621      	mov	r1, r4
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f001 bd68 	b.w	80127fc <strchr>
 8010d2c:	1c43      	adds	r3, r0, #1
 8010d2e:	4605      	mov	r5, r0
 8010d30:	4621      	mov	r1, r4
 8010d32:	4618      	mov	r0, r3
 8010d34:	f001 fd62 	bl	80127fc <strchr>
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d1f7      	bne.n	8010d2c <strrchr+0x14>
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	bd38      	pop	{r3, r4, r5, pc}
 8010d40:	2500      	movs	r5, #0
 8010d42:	e7f5      	b.n	8010d30 <strrchr+0x18>

08010d44 <_localeconv_r>:
 8010d44:	4800      	ldr	r0, [pc, #0]	@ (8010d48 <_localeconv_r+0x4>)
 8010d46:	4770      	bx	lr
 8010d48:	20000170 	.word	0x20000170

08010d4c <_close_r>:
 8010d4c:	b538      	push	{r3, r4, r5, lr}
 8010d4e:	4d06      	ldr	r5, [pc, #24]	@ (8010d68 <_close_r+0x1c>)
 8010d50:	2300      	movs	r3, #0
 8010d52:	4604      	mov	r4, r0
 8010d54:	4608      	mov	r0, r1
 8010d56:	602b      	str	r3, [r5, #0]
 8010d58:	f7f2 f978 	bl	800304c <_close>
 8010d5c:	1c43      	adds	r3, r0, #1
 8010d5e:	d102      	bne.n	8010d66 <_close_r+0x1a>
 8010d60:	682b      	ldr	r3, [r5, #0]
 8010d62:	b103      	cbz	r3, 8010d66 <_close_r+0x1a>
 8010d64:	6023      	str	r3, [r4, #0]
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	200032f8 	.word	0x200032f8

08010d6c <_lseek_r>:
 8010d6c:	b538      	push	{r3, r4, r5, lr}
 8010d6e:	4d07      	ldr	r5, [pc, #28]	@ (8010d8c <_lseek_r+0x20>)
 8010d70:	4604      	mov	r4, r0
 8010d72:	4608      	mov	r0, r1
 8010d74:	4611      	mov	r1, r2
 8010d76:	2200      	movs	r2, #0
 8010d78:	602a      	str	r2, [r5, #0]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	f7f2 f98d 	bl	800309a <_lseek>
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	d102      	bne.n	8010d8a <_lseek_r+0x1e>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	b103      	cbz	r3, 8010d8a <_lseek_r+0x1e>
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	200032f8 	.word	0x200032f8

08010d90 <_read_r>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	4d07      	ldr	r5, [pc, #28]	@ (8010db0 <_read_r+0x20>)
 8010d94:	4604      	mov	r4, r0
 8010d96:	4608      	mov	r0, r1
 8010d98:	4611      	mov	r1, r2
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	602a      	str	r2, [r5, #0]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	f7f2 f937 	bl	8003012 <_read>
 8010da4:	1c43      	adds	r3, r0, #1
 8010da6:	d102      	bne.n	8010dae <_read_r+0x1e>
 8010da8:	682b      	ldr	r3, [r5, #0]
 8010daa:	b103      	cbz	r3, 8010dae <_read_r+0x1e>
 8010dac:	6023      	str	r3, [r4, #0]
 8010dae:	bd38      	pop	{r3, r4, r5, pc}
 8010db0:	200032f8 	.word	0x200032f8

08010db4 <_sbrk_r>:
 8010db4:	b538      	push	{r3, r4, r5, lr}
 8010db6:	4d06      	ldr	r5, [pc, #24]	@ (8010dd0 <_sbrk_r+0x1c>)
 8010db8:	2300      	movs	r3, #0
 8010dba:	4604      	mov	r4, r0
 8010dbc:	4608      	mov	r0, r1
 8010dbe:	602b      	str	r3, [r5, #0]
 8010dc0:	f7f2 f978 	bl	80030b4 <_sbrk>
 8010dc4:	1c43      	adds	r3, r0, #1
 8010dc6:	d102      	bne.n	8010dce <_sbrk_r+0x1a>
 8010dc8:	682b      	ldr	r3, [r5, #0]
 8010dca:	b103      	cbz	r3, 8010dce <_sbrk_r+0x1a>
 8010dcc:	6023      	str	r3, [r4, #0]
 8010dce:	bd38      	pop	{r3, r4, r5, pc}
 8010dd0:	200032f8 	.word	0x200032f8

08010dd4 <_write_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	4d07      	ldr	r5, [pc, #28]	@ (8010df4 <_write_r+0x20>)
 8010dd8:	4604      	mov	r4, r0
 8010dda:	4608      	mov	r0, r1
 8010ddc:	4611      	mov	r1, r2
 8010dde:	2200      	movs	r2, #0
 8010de0:	602a      	str	r2, [r5, #0]
 8010de2:	461a      	mov	r2, r3
 8010de4:	f7f1 fb78 	bl	80024d8 <_write>
 8010de8:	1c43      	adds	r3, r0, #1
 8010dea:	d102      	bne.n	8010df2 <_write_r+0x1e>
 8010dec:	682b      	ldr	r3, [r5, #0]
 8010dee:	b103      	cbz	r3, 8010df2 <_write_r+0x1e>
 8010df0:	6023      	str	r3, [r4, #0]
 8010df2:	bd38      	pop	{r3, r4, r5, pc}
 8010df4:	200032f8 	.word	0x200032f8

08010df8 <__errno>:
 8010df8:	4b01      	ldr	r3, [pc, #4]	@ (8010e00 <__errno+0x8>)
 8010dfa:	6818      	ldr	r0, [r3, #0]
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop
 8010e00:	200001ec 	.word	0x200001ec

08010e04 <__libc_init_array>:
 8010e04:	b570      	push	{r4, r5, r6, lr}
 8010e06:	4d0d      	ldr	r5, [pc, #52]	@ (8010e3c <__libc_init_array+0x38>)
 8010e08:	4c0d      	ldr	r4, [pc, #52]	@ (8010e40 <__libc_init_array+0x3c>)
 8010e0a:	1b64      	subs	r4, r4, r5
 8010e0c:	10a4      	asrs	r4, r4, #2
 8010e0e:	2600      	movs	r6, #0
 8010e10:	42a6      	cmp	r6, r4
 8010e12:	d109      	bne.n	8010e28 <__libc_init_array+0x24>
 8010e14:	4d0b      	ldr	r5, [pc, #44]	@ (8010e44 <__libc_init_array+0x40>)
 8010e16:	4c0c      	ldr	r4, [pc, #48]	@ (8010e48 <__libc_init_array+0x44>)
 8010e18:	f002 f860 	bl	8012edc <_init>
 8010e1c:	1b64      	subs	r4, r4, r5
 8010e1e:	10a4      	asrs	r4, r4, #2
 8010e20:	2600      	movs	r6, #0
 8010e22:	42a6      	cmp	r6, r4
 8010e24:	d105      	bne.n	8010e32 <__libc_init_array+0x2e>
 8010e26:	bd70      	pop	{r4, r5, r6, pc}
 8010e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e2c:	4798      	blx	r3
 8010e2e:	3601      	adds	r6, #1
 8010e30:	e7ee      	b.n	8010e10 <__libc_init_array+0xc>
 8010e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8010e36:	4798      	blx	r3
 8010e38:	3601      	adds	r6, #1
 8010e3a:	e7f2      	b.n	8010e22 <__libc_init_array+0x1e>
 8010e3c:	08016bb8 	.word	0x08016bb8
 8010e40:	08016bb8 	.word	0x08016bb8
 8010e44:	08016bb8 	.word	0x08016bb8
 8010e48:	08016bbc 	.word	0x08016bbc

08010e4c <__retarget_lock_init_recursive>:
 8010e4c:	4770      	bx	lr

08010e4e <__retarget_lock_acquire_recursive>:
 8010e4e:	4770      	bx	lr

08010e50 <__retarget_lock_release_recursive>:
 8010e50:	4770      	bx	lr

08010e52 <memcpy>:
 8010e52:	440a      	add	r2, r1
 8010e54:	4291      	cmp	r1, r2
 8010e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8010e5a:	d100      	bne.n	8010e5e <memcpy+0xc>
 8010e5c:	4770      	bx	lr
 8010e5e:	b510      	push	{r4, lr}
 8010e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010e68:	4291      	cmp	r1, r2
 8010e6a:	d1f9      	bne.n	8010e60 <memcpy+0xe>
 8010e6c:	bd10      	pop	{r4, pc}
	...

08010e70 <nanf>:
 8010e70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010e78 <nanf+0x8>
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	7fc00000 	.word	0x7fc00000

08010e7c <quorem>:
 8010e7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e80:	6903      	ldr	r3, [r0, #16]
 8010e82:	690c      	ldr	r4, [r1, #16]
 8010e84:	42a3      	cmp	r3, r4
 8010e86:	4607      	mov	r7, r0
 8010e88:	db7e      	blt.n	8010f88 <quorem+0x10c>
 8010e8a:	3c01      	subs	r4, #1
 8010e8c:	f101 0814 	add.w	r8, r1, #20
 8010e90:	00a3      	lsls	r3, r4, #2
 8010e92:	f100 0514 	add.w	r5, r0, #20
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e9c:	9301      	str	r3, [sp, #4]
 8010e9e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010ea2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010eae:	fbb2 f6f3 	udiv	r6, r2, r3
 8010eb2:	d32e      	bcc.n	8010f12 <quorem+0x96>
 8010eb4:	f04f 0a00 	mov.w	sl, #0
 8010eb8:	46c4      	mov	ip, r8
 8010eba:	46ae      	mov	lr, r5
 8010ebc:	46d3      	mov	fp, sl
 8010ebe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010ec2:	b298      	uxth	r0, r3
 8010ec4:	fb06 a000 	mla	r0, r6, r0, sl
 8010ec8:	0c02      	lsrs	r2, r0, #16
 8010eca:	0c1b      	lsrs	r3, r3, #16
 8010ecc:	fb06 2303 	mla	r3, r6, r3, r2
 8010ed0:	f8de 2000 	ldr.w	r2, [lr]
 8010ed4:	b280      	uxth	r0, r0
 8010ed6:	b292      	uxth	r2, r2
 8010ed8:	1a12      	subs	r2, r2, r0
 8010eda:	445a      	add	r2, fp
 8010edc:	f8de 0000 	ldr.w	r0, [lr]
 8010ee0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010eea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010eee:	b292      	uxth	r2, r2
 8010ef0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010ef4:	45e1      	cmp	r9, ip
 8010ef6:	f84e 2b04 	str.w	r2, [lr], #4
 8010efa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010efe:	d2de      	bcs.n	8010ebe <quorem+0x42>
 8010f00:	9b00      	ldr	r3, [sp, #0]
 8010f02:	58eb      	ldr	r3, [r5, r3]
 8010f04:	b92b      	cbnz	r3, 8010f12 <quorem+0x96>
 8010f06:	9b01      	ldr	r3, [sp, #4]
 8010f08:	3b04      	subs	r3, #4
 8010f0a:	429d      	cmp	r5, r3
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	d32f      	bcc.n	8010f70 <quorem+0xf4>
 8010f10:	613c      	str	r4, [r7, #16]
 8010f12:	4638      	mov	r0, r7
 8010f14:	f001 f8da 	bl	80120cc <__mcmp>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	db25      	blt.n	8010f68 <quorem+0xec>
 8010f1c:	4629      	mov	r1, r5
 8010f1e:	2000      	movs	r0, #0
 8010f20:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f24:	f8d1 c000 	ldr.w	ip, [r1]
 8010f28:	fa1f fe82 	uxth.w	lr, r2
 8010f2c:	fa1f f38c 	uxth.w	r3, ip
 8010f30:	eba3 030e 	sub.w	r3, r3, lr
 8010f34:	4403      	add	r3, r0
 8010f36:	0c12      	lsrs	r2, r2, #16
 8010f38:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010f3c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f46:	45c1      	cmp	r9, r8
 8010f48:	f841 3b04 	str.w	r3, [r1], #4
 8010f4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010f50:	d2e6      	bcs.n	8010f20 <quorem+0xa4>
 8010f52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f5a:	b922      	cbnz	r2, 8010f66 <quorem+0xea>
 8010f5c:	3b04      	subs	r3, #4
 8010f5e:	429d      	cmp	r5, r3
 8010f60:	461a      	mov	r2, r3
 8010f62:	d30b      	bcc.n	8010f7c <quorem+0x100>
 8010f64:	613c      	str	r4, [r7, #16]
 8010f66:	3601      	adds	r6, #1
 8010f68:	4630      	mov	r0, r6
 8010f6a:	b003      	add	sp, #12
 8010f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f70:	6812      	ldr	r2, [r2, #0]
 8010f72:	3b04      	subs	r3, #4
 8010f74:	2a00      	cmp	r2, #0
 8010f76:	d1cb      	bne.n	8010f10 <quorem+0x94>
 8010f78:	3c01      	subs	r4, #1
 8010f7a:	e7c6      	b.n	8010f0a <quorem+0x8e>
 8010f7c:	6812      	ldr	r2, [r2, #0]
 8010f7e:	3b04      	subs	r3, #4
 8010f80:	2a00      	cmp	r2, #0
 8010f82:	d1ef      	bne.n	8010f64 <quorem+0xe8>
 8010f84:	3c01      	subs	r4, #1
 8010f86:	e7ea      	b.n	8010f5e <quorem+0xe2>
 8010f88:	2000      	movs	r0, #0
 8010f8a:	e7ee      	b.n	8010f6a <quorem+0xee>
 8010f8c:	0000      	movs	r0, r0
	...

08010f90 <_dtoa_r>:
 8010f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f94:	69c7      	ldr	r7, [r0, #28]
 8010f96:	b097      	sub	sp, #92	@ 0x5c
 8010f98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8010f9c:	ec55 4b10 	vmov	r4, r5, d0
 8010fa0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8010fa2:	9107      	str	r1, [sp, #28]
 8010fa4:	4681      	mov	r9, r0
 8010fa6:	920c      	str	r2, [sp, #48]	@ 0x30
 8010fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010faa:	b97f      	cbnz	r7, 8010fcc <_dtoa_r+0x3c>
 8010fac:	2010      	movs	r0, #16
 8010fae:	f7fe ff8d 	bl	800fecc <malloc>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8010fb8:	b920      	cbnz	r0, 8010fc4 <_dtoa_r+0x34>
 8010fba:	4ba9      	ldr	r3, [pc, #676]	@ (8011260 <_dtoa_r+0x2d0>)
 8010fbc:	21ef      	movs	r1, #239	@ 0xef
 8010fbe:	48a9      	ldr	r0, [pc, #676]	@ (8011264 <_dtoa_r+0x2d4>)
 8010fc0:	f001 fc4c 	bl	801285c <__assert_func>
 8010fc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010fc8:	6007      	str	r7, [r0, #0]
 8010fca:	60c7      	str	r7, [r0, #12]
 8010fcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010fd0:	6819      	ldr	r1, [r3, #0]
 8010fd2:	b159      	cbz	r1, 8010fec <_dtoa_r+0x5c>
 8010fd4:	685a      	ldr	r2, [r3, #4]
 8010fd6:	604a      	str	r2, [r1, #4]
 8010fd8:	2301      	movs	r3, #1
 8010fda:	4093      	lsls	r3, r2
 8010fdc:	608b      	str	r3, [r1, #8]
 8010fde:	4648      	mov	r0, r9
 8010fe0:	f000 fe42 	bl	8011c68 <_Bfree>
 8010fe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	1e2b      	subs	r3, r5, #0
 8010fee:	bfb9      	ittee	lt
 8010ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010ff4:	9305      	strlt	r3, [sp, #20]
 8010ff6:	2300      	movge	r3, #0
 8010ff8:	6033      	strge	r3, [r6, #0]
 8010ffa:	9f05      	ldr	r7, [sp, #20]
 8010ffc:	4b9a      	ldr	r3, [pc, #616]	@ (8011268 <_dtoa_r+0x2d8>)
 8010ffe:	bfbc      	itt	lt
 8011000:	2201      	movlt	r2, #1
 8011002:	6032      	strlt	r2, [r6, #0]
 8011004:	43bb      	bics	r3, r7
 8011006:	d112      	bne.n	801102e <_dtoa_r+0x9e>
 8011008:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801100a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801100e:	6013      	str	r3, [r2, #0]
 8011010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011014:	4323      	orrs	r3, r4
 8011016:	f000 855a 	beq.w	8011ace <_dtoa_r+0xb3e>
 801101a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801101c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801127c <_dtoa_r+0x2ec>
 8011020:	2b00      	cmp	r3, #0
 8011022:	f000 855c 	beq.w	8011ade <_dtoa_r+0xb4e>
 8011026:	f10a 0303 	add.w	r3, sl, #3
 801102a:	f000 bd56 	b.w	8011ada <_dtoa_r+0xb4a>
 801102e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011032:	2200      	movs	r2, #0
 8011034:	ec51 0b17 	vmov	r0, r1, d7
 8011038:	2300      	movs	r3, #0
 801103a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801103e:	f7ef fd1b 	bl	8000a78 <__aeabi_dcmpeq>
 8011042:	4680      	mov	r8, r0
 8011044:	b158      	cbz	r0, 801105e <_dtoa_r+0xce>
 8011046:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8011048:	2301      	movs	r3, #1
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801104e:	b113      	cbz	r3, 8011056 <_dtoa_r+0xc6>
 8011050:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011052:	4b86      	ldr	r3, [pc, #536]	@ (801126c <_dtoa_r+0x2dc>)
 8011054:	6013      	str	r3, [r2, #0]
 8011056:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8011280 <_dtoa_r+0x2f0>
 801105a:	f000 bd40 	b.w	8011ade <_dtoa_r+0xb4e>
 801105e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8011062:	aa14      	add	r2, sp, #80	@ 0x50
 8011064:	a915      	add	r1, sp, #84	@ 0x54
 8011066:	4648      	mov	r0, r9
 8011068:	f001 f8e0 	bl	801222c <__d2b>
 801106c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011070:	9002      	str	r0, [sp, #8]
 8011072:	2e00      	cmp	r6, #0
 8011074:	d078      	beq.n	8011168 <_dtoa_r+0x1d8>
 8011076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011078:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801107c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8011084:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011088:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801108c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011090:	4619      	mov	r1, r3
 8011092:	2200      	movs	r2, #0
 8011094:	4b76      	ldr	r3, [pc, #472]	@ (8011270 <_dtoa_r+0x2e0>)
 8011096:	f7ef f8cf 	bl	8000238 <__aeabi_dsub>
 801109a:	a36b      	add	r3, pc, #428	@ (adr r3, 8011248 <_dtoa_r+0x2b8>)
 801109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a0:	f7ef fa82 	bl	80005a8 <__aeabi_dmul>
 80110a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8011250 <_dtoa_r+0x2c0>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	f7ef f8c7 	bl	800023c <__adddf3>
 80110ae:	4604      	mov	r4, r0
 80110b0:	4630      	mov	r0, r6
 80110b2:	460d      	mov	r5, r1
 80110b4:	f7ef fa0e 	bl	80004d4 <__aeabi_i2d>
 80110b8:	a367      	add	r3, pc, #412	@ (adr r3, 8011258 <_dtoa_r+0x2c8>)
 80110ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110be:	f7ef fa73 	bl	80005a8 <__aeabi_dmul>
 80110c2:	4602      	mov	r2, r0
 80110c4:	460b      	mov	r3, r1
 80110c6:	4620      	mov	r0, r4
 80110c8:	4629      	mov	r1, r5
 80110ca:	f7ef f8b7 	bl	800023c <__adddf3>
 80110ce:	4604      	mov	r4, r0
 80110d0:	460d      	mov	r5, r1
 80110d2:	f7ef fd19 	bl	8000b08 <__aeabi_d2iz>
 80110d6:	2200      	movs	r2, #0
 80110d8:	4607      	mov	r7, r0
 80110da:	2300      	movs	r3, #0
 80110dc:	4620      	mov	r0, r4
 80110de:	4629      	mov	r1, r5
 80110e0:	f7ef fcd4 	bl	8000a8c <__aeabi_dcmplt>
 80110e4:	b140      	cbz	r0, 80110f8 <_dtoa_r+0x168>
 80110e6:	4638      	mov	r0, r7
 80110e8:	f7ef f9f4 	bl	80004d4 <__aeabi_i2d>
 80110ec:	4622      	mov	r2, r4
 80110ee:	462b      	mov	r3, r5
 80110f0:	f7ef fcc2 	bl	8000a78 <__aeabi_dcmpeq>
 80110f4:	b900      	cbnz	r0, 80110f8 <_dtoa_r+0x168>
 80110f6:	3f01      	subs	r7, #1
 80110f8:	2f16      	cmp	r7, #22
 80110fa:	d852      	bhi.n	80111a2 <_dtoa_r+0x212>
 80110fc:	4b5d      	ldr	r3, [pc, #372]	@ (8011274 <_dtoa_r+0x2e4>)
 80110fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801110a:	f7ef fcbf 	bl	8000a8c <__aeabi_dcmplt>
 801110e:	2800      	cmp	r0, #0
 8011110:	d049      	beq.n	80111a6 <_dtoa_r+0x216>
 8011112:	3f01      	subs	r7, #1
 8011114:	2300      	movs	r3, #0
 8011116:	9310      	str	r3, [sp, #64]	@ 0x40
 8011118:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801111a:	1b9b      	subs	r3, r3, r6
 801111c:	1e5a      	subs	r2, r3, #1
 801111e:	bf45      	ittet	mi
 8011120:	f1c3 0301 	rsbmi	r3, r3, #1
 8011124:	9300      	strmi	r3, [sp, #0]
 8011126:	2300      	movpl	r3, #0
 8011128:	2300      	movmi	r3, #0
 801112a:	9206      	str	r2, [sp, #24]
 801112c:	bf54      	ite	pl
 801112e:	9300      	strpl	r3, [sp, #0]
 8011130:	9306      	strmi	r3, [sp, #24]
 8011132:	2f00      	cmp	r7, #0
 8011134:	db39      	blt.n	80111aa <_dtoa_r+0x21a>
 8011136:	9b06      	ldr	r3, [sp, #24]
 8011138:	970d      	str	r7, [sp, #52]	@ 0x34
 801113a:	443b      	add	r3, r7
 801113c:	9306      	str	r3, [sp, #24]
 801113e:	2300      	movs	r3, #0
 8011140:	9308      	str	r3, [sp, #32]
 8011142:	9b07      	ldr	r3, [sp, #28]
 8011144:	2b09      	cmp	r3, #9
 8011146:	d863      	bhi.n	8011210 <_dtoa_r+0x280>
 8011148:	2b05      	cmp	r3, #5
 801114a:	bfc4      	itt	gt
 801114c:	3b04      	subgt	r3, #4
 801114e:	9307      	strgt	r3, [sp, #28]
 8011150:	9b07      	ldr	r3, [sp, #28]
 8011152:	f1a3 0302 	sub.w	r3, r3, #2
 8011156:	bfcc      	ite	gt
 8011158:	2400      	movgt	r4, #0
 801115a:	2401      	movle	r4, #1
 801115c:	2b03      	cmp	r3, #3
 801115e:	d863      	bhi.n	8011228 <_dtoa_r+0x298>
 8011160:	e8df f003 	tbb	[pc, r3]
 8011164:	2b375452 	.word	0x2b375452
 8011168:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801116c:	441e      	add	r6, r3
 801116e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011172:	2b20      	cmp	r3, #32
 8011174:	bfc1      	itttt	gt
 8011176:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801117a:	409f      	lslgt	r7, r3
 801117c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011180:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011184:	bfd6      	itet	le
 8011186:	f1c3 0320 	rsble	r3, r3, #32
 801118a:	ea47 0003 	orrgt.w	r0, r7, r3
 801118e:	fa04 f003 	lslle.w	r0, r4, r3
 8011192:	f7ef f98f 	bl	80004b4 <__aeabi_ui2d>
 8011196:	2201      	movs	r2, #1
 8011198:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801119c:	3e01      	subs	r6, #1
 801119e:	9212      	str	r2, [sp, #72]	@ 0x48
 80111a0:	e776      	b.n	8011090 <_dtoa_r+0x100>
 80111a2:	2301      	movs	r3, #1
 80111a4:	e7b7      	b.n	8011116 <_dtoa_r+0x186>
 80111a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80111a8:	e7b6      	b.n	8011118 <_dtoa_r+0x188>
 80111aa:	9b00      	ldr	r3, [sp, #0]
 80111ac:	1bdb      	subs	r3, r3, r7
 80111ae:	9300      	str	r3, [sp, #0]
 80111b0:	427b      	negs	r3, r7
 80111b2:	9308      	str	r3, [sp, #32]
 80111b4:	2300      	movs	r3, #0
 80111b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80111b8:	e7c3      	b.n	8011142 <_dtoa_r+0x1b2>
 80111ba:	2301      	movs	r3, #1
 80111bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80111be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111c0:	eb07 0b03 	add.w	fp, r7, r3
 80111c4:	f10b 0301 	add.w	r3, fp, #1
 80111c8:	2b01      	cmp	r3, #1
 80111ca:	9303      	str	r3, [sp, #12]
 80111cc:	bfb8      	it	lt
 80111ce:	2301      	movlt	r3, #1
 80111d0:	e006      	b.n	80111e0 <_dtoa_r+0x250>
 80111d2:	2301      	movs	r3, #1
 80111d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80111d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80111d8:	2b00      	cmp	r3, #0
 80111da:	dd28      	ble.n	801122e <_dtoa_r+0x29e>
 80111dc:	469b      	mov	fp, r3
 80111de:	9303      	str	r3, [sp, #12]
 80111e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80111e4:	2100      	movs	r1, #0
 80111e6:	2204      	movs	r2, #4
 80111e8:	f102 0514 	add.w	r5, r2, #20
 80111ec:	429d      	cmp	r5, r3
 80111ee:	d926      	bls.n	801123e <_dtoa_r+0x2ae>
 80111f0:	6041      	str	r1, [r0, #4]
 80111f2:	4648      	mov	r0, r9
 80111f4:	f000 fcf8 	bl	8011be8 <_Balloc>
 80111f8:	4682      	mov	sl, r0
 80111fa:	2800      	cmp	r0, #0
 80111fc:	d142      	bne.n	8011284 <_dtoa_r+0x2f4>
 80111fe:	4b1e      	ldr	r3, [pc, #120]	@ (8011278 <_dtoa_r+0x2e8>)
 8011200:	4602      	mov	r2, r0
 8011202:	f240 11af 	movw	r1, #431	@ 0x1af
 8011206:	e6da      	b.n	8010fbe <_dtoa_r+0x2e>
 8011208:	2300      	movs	r3, #0
 801120a:	e7e3      	b.n	80111d4 <_dtoa_r+0x244>
 801120c:	2300      	movs	r3, #0
 801120e:	e7d5      	b.n	80111bc <_dtoa_r+0x22c>
 8011210:	2401      	movs	r4, #1
 8011212:	2300      	movs	r3, #0
 8011214:	9307      	str	r3, [sp, #28]
 8011216:	9409      	str	r4, [sp, #36]	@ 0x24
 8011218:	f04f 3bff 	mov.w	fp, #4294967295
 801121c:	2200      	movs	r2, #0
 801121e:	f8cd b00c 	str.w	fp, [sp, #12]
 8011222:	2312      	movs	r3, #18
 8011224:	920c      	str	r2, [sp, #48]	@ 0x30
 8011226:	e7db      	b.n	80111e0 <_dtoa_r+0x250>
 8011228:	2301      	movs	r3, #1
 801122a:	9309      	str	r3, [sp, #36]	@ 0x24
 801122c:	e7f4      	b.n	8011218 <_dtoa_r+0x288>
 801122e:	f04f 0b01 	mov.w	fp, #1
 8011232:	f8cd b00c 	str.w	fp, [sp, #12]
 8011236:	465b      	mov	r3, fp
 8011238:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801123c:	e7d0      	b.n	80111e0 <_dtoa_r+0x250>
 801123e:	3101      	adds	r1, #1
 8011240:	0052      	lsls	r2, r2, #1
 8011242:	e7d1      	b.n	80111e8 <_dtoa_r+0x258>
 8011244:	f3af 8000 	nop.w
 8011248:	636f4361 	.word	0x636f4361
 801124c:	3fd287a7 	.word	0x3fd287a7
 8011250:	8b60c8b3 	.word	0x8b60c8b3
 8011254:	3fc68a28 	.word	0x3fc68a28
 8011258:	509f79fb 	.word	0x509f79fb
 801125c:	3fd34413 	.word	0x3fd34413
 8011260:	08016970 	.word	0x08016970
 8011264:	08016987 	.word	0x08016987
 8011268:	7ff00000 	.word	0x7ff00000
 801126c:	08016936 	.word	0x08016936
 8011270:	3ff80000 	.word	0x3ff80000
 8011274:	08016ad0 	.word	0x08016ad0
 8011278:	080169df 	.word	0x080169df
 801127c:	0801696c 	.word	0x0801696c
 8011280:	08016935 	.word	0x08016935
 8011284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011288:	6018      	str	r0, [r3, #0]
 801128a:	9b03      	ldr	r3, [sp, #12]
 801128c:	2b0e      	cmp	r3, #14
 801128e:	f200 80a1 	bhi.w	80113d4 <_dtoa_r+0x444>
 8011292:	2c00      	cmp	r4, #0
 8011294:	f000 809e 	beq.w	80113d4 <_dtoa_r+0x444>
 8011298:	2f00      	cmp	r7, #0
 801129a:	dd33      	ble.n	8011304 <_dtoa_r+0x374>
 801129c:	4b9c      	ldr	r3, [pc, #624]	@ (8011510 <_dtoa_r+0x580>)
 801129e:	f007 020f 	and.w	r2, r7, #15
 80112a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80112a6:	ed93 7b00 	vldr	d7, [r3]
 80112aa:	05f8      	lsls	r0, r7, #23
 80112ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80112b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80112b4:	d516      	bpl.n	80112e4 <_dtoa_r+0x354>
 80112b6:	4b97      	ldr	r3, [pc, #604]	@ (8011514 <_dtoa_r+0x584>)
 80112b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80112bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80112c0:	f7ef fa9c 	bl	80007fc <__aeabi_ddiv>
 80112c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112c8:	f004 040f 	and.w	r4, r4, #15
 80112cc:	2603      	movs	r6, #3
 80112ce:	4d91      	ldr	r5, [pc, #580]	@ (8011514 <_dtoa_r+0x584>)
 80112d0:	b954      	cbnz	r4, 80112e8 <_dtoa_r+0x358>
 80112d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80112d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112da:	f7ef fa8f 	bl	80007fc <__aeabi_ddiv>
 80112de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112e2:	e028      	b.n	8011336 <_dtoa_r+0x3a6>
 80112e4:	2602      	movs	r6, #2
 80112e6:	e7f2      	b.n	80112ce <_dtoa_r+0x33e>
 80112e8:	07e1      	lsls	r1, r4, #31
 80112ea:	d508      	bpl.n	80112fe <_dtoa_r+0x36e>
 80112ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80112f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112f4:	f7ef f958 	bl	80005a8 <__aeabi_dmul>
 80112f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80112fc:	3601      	adds	r6, #1
 80112fe:	1064      	asrs	r4, r4, #1
 8011300:	3508      	adds	r5, #8
 8011302:	e7e5      	b.n	80112d0 <_dtoa_r+0x340>
 8011304:	f000 80af 	beq.w	8011466 <_dtoa_r+0x4d6>
 8011308:	427c      	negs	r4, r7
 801130a:	4b81      	ldr	r3, [pc, #516]	@ (8011510 <_dtoa_r+0x580>)
 801130c:	4d81      	ldr	r5, [pc, #516]	@ (8011514 <_dtoa_r+0x584>)
 801130e:	f004 020f 	and.w	r2, r4, #15
 8011312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011316:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801131e:	f7ef f943 	bl	80005a8 <__aeabi_dmul>
 8011322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011326:	1124      	asrs	r4, r4, #4
 8011328:	2300      	movs	r3, #0
 801132a:	2602      	movs	r6, #2
 801132c:	2c00      	cmp	r4, #0
 801132e:	f040 808f 	bne.w	8011450 <_dtoa_r+0x4c0>
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1d3      	bne.n	80112de <_dtoa_r+0x34e>
 8011336:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011338:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801133c:	2b00      	cmp	r3, #0
 801133e:	f000 8094 	beq.w	801146a <_dtoa_r+0x4da>
 8011342:	4b75      	ldr	r3, [pc, #468]	@ (8011518 <_dtoa_r+0x588>)
 8011344:	2200      	movs	r2, #0
 8011346:	4620      	mov	r0, r4
 8011348:	4629      	mov	r1, r5
 801134a:	f7ef fb9f 	bl	8000a8c <__aeabi_dcmplt>
 801134e:	2800      	cmp	r0, #0
 8011350:	f000 808b 	beq.w	801146a <_dtoa_r+0x4da>
 8011354:	9b03      	ldr	r3, [sp, #12]
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 8087 	beq.w	801146a <_dtoa_r+0x4da>
 801135c:	f1bb 0f00 	cmp.w	fp, #0
 8011360:	dd34      	ble.n	80113cc <_dtoa_r+0x43c>
 8011362:	4620      	mov	r0, r4
 8011364:	4b6d      	ldr	r3, [pc, #436]	@ (801151c <_dtoa_r+0x58c>)
 8011366:	2200      	movs	r2, #0
 8011368:	4629      	mov	r1, r5
 801136a:	f7ef f91d 	bl	80005a8 <__aeabi_dmul>
 801136e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011372:	f107 38ff 	add.w	r8, r7, #4294967295
 8011376:	3601      	adds	r6, #1
 8011378:	465c      	mov	r4, fp
 801137a:	4630      	mov	r0, r6
 801137c:	f7ef f8aa 	bl	80004d4 <__aeabi_i2d>
 8011380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011384:	f7ef f910 	bl	80005a8 <__aeabi_dmul>
 8011388:	4b65      	ldr	r3, [pc, #404]	@ (8011520 <_dtoa_r+0x590>)
 801138a:	2200      	movs	r2, #0
 801138c:	f7ee ff56 	bl	800023c <__adddf3>
 8011390:	4605      	mov	r5, r0
 8011392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011396:	2c00      	cmp	r4, #0
 8011398:	d16a      	bne.n	8011470 <_dtoa_r+0x4e0>
 801139a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801139e:	4b61      	ldr	r3, [pc, #388]	@ (8011524 <_dtoa_r+0x594>)
 80113a0:	2200      	movs	r2, #0
 80113a2:	f7ee ff49 	bl	8000238 <__aeabi_dsub>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80113ae:	462a      	mov	r2, r5
 80113b0:	4633      	mov	r3, r6
 80113b2:	f7ef fb89 	bl	8000ac8 <__aeabi_dcmpgt>
 80113b6:	2800      	cmp	r0, #0
 80113b8:	f040 8298 	bne.w	80118ec <_dtoa_r+0x95c>
 80113bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113c0:	462a      	mov	r2, r5
 80113c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80113c6:	f7ef fb61 	bl	8000a8c <__aeabi_dcmplt>
 80113ca:	bb38      	cbnz	r0, 801141c <_dtoa_r+0x48c>
 80113cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80113d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80113d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f2c0 8157 	blt.w	801168a <_dtoa_r+0x6fa>
 80113dc:	2f0e      	cmp	r7, #14
 80113de:	f300 8154 	bgt.w	801168a <_dtoa_r+0x6fa>
 80113e2:	4b4b      	ldr	r3, [pc, #300]	@ (8011510 <_dtoa_r+0x580>)
 80113e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80113e8:	ed93 7b00 	vldr	d7, [r3]
 80113ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	ed8d 7b00 	vstr	d7, [sp]
 80113f4:	f280 80e5 	bge.w	80115c2 <_dtoa_r+0x632>
 80113f8:	9b03      	ldr	r3, [sp, #12]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	f300 80e1 	bgt.w	80115c2 <_dtoa_r+0x632>
 8011400:	d10c      	bne.n	801141c <_dtoa_r+0x48c>
 8011402:	4b48      	ldr	r3, [pc, #288]	@ (8011524 <_dtoa_r+0x594>)
 8011404:	2200      	movs	r2, #0
 8011406:	ec51 0b17 	vmov	r0, r1, d7
 801140a:	f7ef f8cd 	bl	80005a8 <__aeabi_dmul>
 801140e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011412:	f7ef fb4f 	bl	8000ab4 <__aeabi_dcmpge>
 8011416:	2800      	cmp	r0, #0
 8011418:	f000 8266 	beq.w	80118e8 <_dtoa_r+0x958>
 801141c:	2400      	movs	r4, #0
 801141e:	4625      	mov	r5, r4
 8011420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011422:	4656      	mov	r6, sl
 8011424:	ea6f 0803 	mvn.w	r8, r3
 8011428:	2700      	movs	r7, #0
 801142a:	4621      	mov	r1, r4
 801142c:	4648      	mov	r0, r9
 801142e:	f000 fc1b 	bl	8011c68 <_Bfree>
 8011432:	2d00      	cmp	r5, #0
 8011434:	f000 80bd 	beq.w	80115b2 <_dtoa_r+0x622>
 8011438:	b12f      	cbz	r7, 8011446 <_dtoa_r+0x4b6>
 801143a:	42af      	cmp	r7, r5
 801143c:	d003      	beq.n	8011446 <_dtoa_r+0x4b6>
 801143e:	4639      	mov	r1, r7
 8011440:	4648      	mov	r0, r9
 8011442:	f000 fc11 	bl	8011c68 <_Bfree>
 8011446:	4629      	mov	r1, r5
 8011448:	4648      	mov	r0, r9
 801144a:	f000 fc0d 	bl	8011c68 <_Bfree>
 801144e:	e0b0      	b.n	80115b2 <_dtoa_r+0x622>
 8011450:	07e2      	lsls	r2, r4, #31
 8011452:	d505      	bpl.n	8011460 <_dtoa_r+0x4d0>
 8011454:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011458:	f7ef f8a6 	bl	80005a8 <__aeabi_dmul>
 801145c:	3601      	adds	r6, #1
 801145e:	2301      	movs	r3, #1
 8011460:	1064      	asrs	r4, r4, #1
 8011462:	3508      	adds	r5, #8
 8011464:	e762      	b.n	801132c <_dtoa_r+0x39c>
 8011466:	2602      	movs	r6, #2
 8011468:	e765      	b.n	8011336 <_dtoa_r+0x3a6>
 801146a:	9c03      	ldr	r4, [sp, #12]
 801146c:	46b8      	mov	r8, r7
 801146e:	e784      	b.n	801137a <_dtoa_r+0x3ea>
 8011470:	4b27      	ldr	r3, [pc, #156]	@ (8011510 <_dtoa_r+0x580>)
 8011472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011478:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801147c:	4454      	add	r4, sl
 801147e:	2900      	cmp	r1, #0
 8011480:	d054      	beq.n	801152c <_dtoa_r+0x59c>
 8011482:	4929      	ldr	r1, [pc, #164]	@ (8011528 <_dtoa_r+0x598>)
 8011484:	2000      	movs	r0, #0
 8011486:	f7ef f9b9 	bl	80007fc <__aeabi_ddiv>
 801148a:	4633      	mov	r3, r6
 801148c:	462a      	mov	r2, r5
 801148e:	f7ee fed3 	bl	8000238 <__aeabi_dsub>
 8011492:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011496:	4656      	mov	r6, sl
 8011498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801149c:	f7ef fb34 	bl	8000b08 <__aeabi_d2iz>
 80114a0:	4605      	mov	r5, r0
 80114a2:	f7ef f817 	bl	80004d4 <__aeabi_i2d>
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80114ae:	f7ee fec3 	bl	8000238 <__aeabi_dsub>
 80114b2:	3530      	adds	r5, #48	@ 0x30
 80114b4:	4602      	mov	r2, r0
 80114b6:	460b      	mov	r3, r1
 80114b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80114bc:	f806 5b01 	strb.w	r5, [r6], #1
 80114c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80114c4:	f7ef fae2 	bl	8000a8c <__aeabi_dcmplt>
 80114c8:	2800      	cmp	r0, #0
 80114ca:	d172      	bne.n	80115b2 <_dtoa_r+0x622>
 80114cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114d0:	4911      	ldr	r1, [pc, #68]	@ (8011518 <_dtoa_r+0x588>)
 80114d2:	2000      	movs	r0, #0
 80114d4:	f7ee feb0 	bl	8000238 <__aeabi_dsub>
 80114d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80114dc:	f7ef fad6 	bl	8000a8c <__aeabi_dcmplt>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	f040 80b4 	bne.w	801164e <_dtoa_r+0x6be>
 80114e6:	42a6      	cmp	r6, r4
 80114e8:	f43f af70 	beq.w	80113cc <_dtoa_r+0x43c>
 80114ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80114f0:	4b0a      	ldr	r3, [pc, #40]	@ (801151c <_dtoa_r+0x58c>)
 80114f2:	2200      	movs	r2, #0
 80114f4:	f7ef f858 	bl	80005a8 <__aeabi_dmul>
 80114f8:	4b08      	ldr	r3, [pc, #32]	@ (801151c <_dtoa_r+0x58c>)
 80114fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80114fe:	2200      	movs	r2, #0
 8011500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011504:	f7ef f850 	bl	80005a8 <__aeabi_dmul>
 8011508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801150c:	e7c4      	b.n	8011498 <_dtoa_r+0x508>
 801150e:	bf00      	nop
 8011510:	08016ad0 	.word	0x08016ad0
 8011514:	08016aa8 	.word	0x08016aa8
 8011518:	3ff00000 	.word	0x3ff00000
 801151c:	40240000 	.word	0x40240000
 8011520:	401c0000 	.word	0x401c0000
 8011524:	40140000 	.word	0x40140000
 8011528:	3fe00000 	.word	0x3fe00000
 801152c:	4631      	mov	r1, r6
 801152e:	4628      	mov	r0, r5
 8011530:	f7ef f83a 	bl	80005a8 <__aeabi_dmul>
 8011534:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8011538:	9413      	str	r4, [sp, #76]	@ 0x4c
 801153a:	4656      	mov	r6, sl
 801153c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011540:	f7ef fae2 	bl	8000b08 <__aeabi_d2iz>
 8011544:	4605      	mov	r5, r0
 8011546:	f7ee ffc5 	bl	80004d4 <__aeabi_i2d>
 801154a:	4602      	mov	r2, r0
 801154c:	460b      	mov	r3, r1
 801154e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011552:	f7ee fe71 	bl	8000238 <__aeabi_dsub>
 8011556:	3530      	adds	r5, #48	@ 0x30
 8011558:	f806 5b01 	strb.w	r5, [r6], #1
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	42a6      	cmp	r6, r4
 8011562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011566:	f04f 0200 	mov.w	r2, #0
 801156a:	d124      	bne.n	80115b6 <_dtoa_r+0x626>
 801156c:	4baf      	ldr	r3, [pc, #700]	@ (801182c <_dtoa_r+0x89c>)
 801156e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8011572:	f7ee fe63 	bl	800023c <__adddf3>
 8011576:	4602      	mov	r2, r0
 8011578:	460b      	mov	r3, r1
 801157a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801157e:	f7ef faa3 	bl	8000ac8 <__aeabi_dcmpgt>
 8011582:	2800      	cmp	r0, #0
 8011584:	d163      	bne.n	801164e <_dtoa_r+0x6be>
 8011586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801158a:	49a8      	ldr	r1, [pc, #672]	@ (801182c <_dtoa_r+0x89c>)
 801158c:	2000      	movs	r0, #0
 801158e:	f7ee fe53 	bl	8000238 <__aeabi_dsub>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801159a:	f7ef fa77 	bl	8000a8c <__aeabi_dcmplt>
 801159e:	2800      	cmp	r0, #0
 80115a0:	f43f af14 	beq.w	80113cc <_dtoa_r+0x43c>
 80115a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80115a6:	1e73      	subs	r3, r6, #1
 80115a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80115ae:	2b30      	cmp	r3, #48	@ 0x30
 80115b0:	d0f8      	beq.n	80115a4 <_dtoa_r+0x614>
 80115b2:	4647      	mov	r7, r8
 80115b4:	e03b      	b.n	801162e <_dtoa_r+0x69e>
 80115b6:	4b9e      	ldr	r3, [pc, #632]	@ (8011830 <_dtoa_r+0x8a0>)
 80115b8:	f7ee fff6 	bl	80005a8 <__aeabi_dmul>
 80115bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80115c0:	e7bc      	b.n	801153c <_dtoa_r+0x5ac>
 80115c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80115c6:	4656      	mov	r6, sl
 80115c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115cc:	4620      	mov	r0, r4
 80115ce:	4629      	mov	r1, r5
 80115d0:	f7ef f914 	bl	80007fc <__aeabi_ddiv>
 80115d4:	f7ef fa98 	bl	8000b08 <__aeabi_d2iz>
 80115d8:	4680      	mov	r8, r0
 80115da:	f7ee ff7b 	bl	80004d4 <__aeabi_i2d>
 80115de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80115e2:	f7ee ffe1 	bl	80005a8 <__aeabi_dmul>
 80115e6:	4602      	mov	r2, r0
 80115e8:	460b      	mov	r3, r1
 80115ea:	4620      	mov	r0, r4
 80115ec:	4629      	mov	r1, r5
 80115ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80115f2:	f7ee fe21 	bl	8000238 <__aeabi_dsub>
 80115f6:	f806 4b01 	strb.w	r4, [r6], #1
 80115fa:	9d03      	ldr	r5, [sp, #12]
 80115fc:	eba6 040a 	sub.w	r4, r6, sl
 8011600:	42a5      	cmp	r5, r4
 8011602:	4602      	mov	r2, r0
 8011604:	460b      	mov	r3, r1
 8011606:	d133      	bne.n	8011670 <_dtoa_r+0x6e0>
 8011608:	f7ee fe18 	bl	800023c <__adddf3>
 801160c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011610:	4604      	mov	r4, r0
 8011612:	460d      	mov	r5, r1
 8011614:	f7ef fa58 	bl	8000ac8 <__aeabi_dcmpgt>
 8011618:	b9c0      	cbnz	r0, 801164c <_dtoa_r+0x6bc>
 801161a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801161e:	4620      	mov	r0, r4
 8011620:	4629      	mov	r1, r5
 8011622:	f7ef fa29 	bl	8000a78 <__aeabi_dcmpeq>
 8011626:	b110      	cbz	r0, 801162e <_dtoa_r+0x69e>
 8011628:	f018 0f01 	tst.w	r8, #1
 801162c:	d10e      	bne.n	801164c <_dtoa_r+0x6bc>
 801162e:	9902      	ldr	r1, [sp, #8]
 8011630:	4648      	mov	r0, r9
 8011632:	f000 fb19 	bl	8011c68 <_Bfree>
 8011636:	2300      	movs	r3, #0
 8011638:	7033      	strb	r3, [r6, #0]
 801163a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801163c:	3701      	adds	r7, #1
 801163e:	601f      	str	r7, [r3, #0]
 8011640:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 824b 	beq.w	8011ade <_dtoa_r+0xb4e>
 8011648:	601e      	str	r6, [r3, #0]
 801164a:	e248      	b.n	8011ade <_dtoa_r+0xb4e>
 801164c:	46b8      	mov	r8, r7
 801164e:	4633      	mov	r3, r6
 8011650:	461e      	mov	r6, r3
 8011652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011656:	2a39      	cmp	r2, #57	@ 0x39
 8011658:	d106      	bne.n	8011668 <_dtoa_r+0x6d8>
 801165a:	459a      	cmp	sl, r3
 801165c:	d1f8      	bne.n	8011650 <_dtoa_r+0x6c0>
 801165e:	2230      	movs	r2, #48	@ 0x30
 8011660:	f108 0801 	add.w	r8, r8, #1
 8011664:	f88a 2000 	strb.w	r2, [sl]
 8011668:	781a      	ldrb	r2, [r3, #0]
 801166a:	3201      	adds	r2, #1
 801166c:	701a      	strb	r2, [r3, #0]
 801166e:	e7a0      	b.n	80115b2 <_dtoa_r+0x622>
 8011670:	4b6f      	ldr	r3, [pc, #444]	@ (8011830 <_dtoa_r+0x8a0>)
 8011672:	2200      	movs	r2, #0
 8011674:	f7ee ff98 	bl	80005a8 <__aeabi_dmul>
 8011678:	2200      	movs	r2, #0
 801167a:	2300      	movs	r3, #0
 801167c:	4604      	mov	r4, r0
 801167e:	460d      	mov	r5, r1
 8011680:	f7ef f9fa 	bl	8000a78 <__aeabi_dcmpeq>
 8011684:	2800      	cmp	r0, #0
 8011686:	d09f      	beq.n	80115c8 <_dtoa_r+0x638>
 8011688:	e7d1      	b.n	801162e <_dtoa_r+0x69e>
 801168a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801168c:	2a00      	cmp	r2, #0
 801168e:	f000 80ea 	beq.w	8011866 <_dtoa_r+0x8d6>
 8011692:	9a07      	ldr	r2, [sp, #28]
 8011694:	2a01      	cmp	r2, #1
 8011696:	f300 80cd 	bgt.w	8011834 <_dtoa_r+0x8a4>
 801169a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801169c:	2a00      	cmp	r2, #0
 801169e:	f000 80c1 	beq.w	8011824 <_dtoa_r+0x894>
 80116a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80116a6:	9c08      	ldr	r4, [sp, #32]
 80116a8:	9e00      	ldr	r6, [sp, #0]
 80116aa:	9a00      	ldr	r2, [sp, #0]
 80116ac:	441a      	add	r2, r3
 80116ae:	9200      	str	r2, [sp, #0]
 80116b0:	9a06      	ldr	r2, [sp, #24]
 80116b2:	2101      	movs	r1, #1
 80116b4:	441a      	add	r2, r3
 80116b6:	4648      	mov	r0, r9
 80116b8:	9206      	str	r2, [sp, #24]
 80116ba:	f000 fb89 	bl	8011dd0 <__i2b>
 80116be:	4605      	mov	r5, r0
 80116c0:	b166      	cbz	r6, 80116dc <_dtoa_r+0x74c>
 80116c2:	9b06      	ldr	r3, [sp, #24]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	dd09      	ble.n	80116dc <_dtoa_r+0x74c>
 80116c8:	42b3      	cmp	r3, r6
 80116ca:	9a00      	ldr	r2, [sp, #0]
 80116cc:	bfa8      	it	ge
 80116ce:	4633      	movge	r3, r6
 80116d0:	1ad2      	subs	r2, r2, r3
 80116d2:	9200      	str	r2, [sp, #0]
 80116d4:	9a06      	ldr	r2, [sp, #24]
 80116d6:	1af6      	subs	r6, r6, r3
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	9306      	str	r3, [sp, #24]
 80116dc:	9b08      	ldr	r3, [sp, #32]
 80116de:	b30b      	cbz	r3, 8011724 <_dtoa_r+0x794>
 80116e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	f000 80c6 	beq.w	8011874 <_dtoa_r+0x8e4>
 80116e8:	2c00      	cmp	r4, #0
 80116ea:	f000 80c0 	beq.w	801186e <_dtoa_r+0x8de>
 80116ee:	4629      	mov	r1, r5
 80116f0:	4622      	mov	r2, r4
 80116f2:	4648      	mov	r0, r9
 80116f4:	f000 fc24 	bl	8011f40 <__pow5mult>
 80116f8:	9a02      	ldr	r2, [sp, #8]
 80116fa:	4601      	mov	r1, r0
 80116fc:	4605      	mov	r5, r0
 80116fe:	4648      	mov	r0, r9
 8011700:	f000 fb7c 	bl	8011dfc <__multiply>
 8011704:	9902      	ldr	r1, [sp, #8]
 8011706:	4680      	mov	r8, r0
 8011708:	4648      	mov	r0, r9
 801170a:	f000 faad 	bl	8011c68 <_Bfree>
 801170e:	9b08      	ldr	r3, [sp, #32]
 8011710:	1b1b      	subs	r3, r3, r4
 8011712:	9308      	str	r3, [sp, #32]
 8011714:	f000 80b1 	beq.w	801187a <_dtoa_r+0x8ea>
 8011718:	9a08      	ldr	r2, [sp, #32]
 801171a:	4641      	mov	r1, r8
 801171c:	4648      	mov	r0, r9
 801171e:	f000 fc0f 	bl	8011f40 <__pow5mult>
 8011722:	9002      	str	r0, [sp, #8]
 8011724:	2101      	movs	r1, #1
 8011726:	4648      	mov	r0, r9
 8011728:	f000 fb52 	bl	8011dd0 <__i2b>
 801172c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801172e:	4604      	mov	r4, r0
 8011730:	2b00      	cmp	r3, #0
 8011732:	f000 81d8 	beq.w	8011ae6 <_dtoa_r+0xb56>
 8011736:	461a      	mov	r2, r3
 8011738:	4601      	mov	r1, r0
 801173a:	4648      	mov	r0, r9
 801173c:	f000 fc00 	bl	8011f40 <__pow5mult>
 8011740:	9b07      	ldr	r3, [sp, #28]
 8011742:	2b01      	cmp	r3, #1
 8011744:	4604      	mov	r4, r0
 8011746:	f300 809f 	bgt.w	8011888 <_dtoa_r+0x8f8>
 801174a:	9b04      	ldr	r3, [sp, #16]
 801174c:	2b00      	cmp	r3, #0
 801174e:	f040 8097 	bne.w	8011880 <_dtoa_r+0x8f0>
 8011752:	9b05      	ldr	r3, [sp, #20]
 8011754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011758:	2b00      	cmp	r3, #0
 801175a:	f040 8093 	bne.w	8011884 <_dtoa_r+0x8f4>
 801175e:	9b05      	ldr	r3, [sp, #20]
 8011760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011764:	0d1b      	lsrs	r3, r3, #20
 8011766:	051b      	lsls	r3, r3, #20
 8011768:	b133      	cbz	r3, 8011778 <_dtoa_r+0x7e8>
 801176a:	9b00      	ldr	r3, [sp, #0]
 801176c:	3301      	adds	r3, #1
 801176e:	9300      	str	r3, [sp, #0]
 8011770:	9b06      	ldr	r3, [sp, #24]
 8011772:	3301      	adds	r3, #1
 8011774:	9306      	str	r3, [sp, #24]
 8011776:	2301      	movs	r3, #1
 8011778:	9308      	str	r3, [sp, #32]
 801177a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801177c:	2b00      	cmp	r3, #0
 801177e:	f000 81b8 	beq.w	8011af2 <_dtoa_r+0xb62>
 8011782:	6923      	ldr	r3, [r4, #16]
 8011784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011788:	6918      	ldr	r0, [r3, #16]
 801178a:	f000 fad5 	bl	8011d38 <__hi0bits>
 801178e:	f1c0 0020 	rsb	r0, r0, #32
 8011792:	9b06      	ldr	r3, [sp, #24]
 8011794:	4418      	add	r0, r3
 8011796:	f010 001f 	ands.w	r0, r0, #31
 801179a:	f000 8082 	beq.w	80118a2 <_dtoa_r+0x912>
 801179e:	f1c0 0320 	rsb	r3, r0, #32
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	dd73      	ble.n	801188e <_dtoa_r+0x8fe>
 80117a6:	9b00      	ldr	r3, [sp, #0]
 80117a8:	f1c0 001c 	rsb	r0, r0, #28
 80117ac:	4403      	add	r3, r0
 80117ae:	9300      	str	r3, [sp, #0]
 80117b0:	9b06      	ldr	r3, [sp, #24]
 80117b2:	4403      	add	r3, r0
 80117b4:	4406      	add	r6, r0
 80117b6:	9306      	str	r3, [sp, #24]
 80117b8:	9b00      	ldr	r3, [sp, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	dd05      	ble.n	80117ca <_dtoa_r+0x83a>
 80117be:	9902      	ldr	r1, [sp, #8]
 80117c0:	461a      	mov	r2, r3
 80117c2:	4648      	mov	r0, r9
 80117c4:	f000 fc16 	bl	8011ff4 <__lshift>
 80117c8:	9002      	str	r0, [sp, #8]
 80117ca:	9b06      	ldr	r3, [sp, #24]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	dd05      	ble.n	80117dc <_dtoa_r+0x84c>
 80117d0:	4621      	mov	r1, r4
 80117d2:	461a      	mov	r2, r3
 80117d4:	4648      	mov	r0, r9
 80117d6:	f000 fc0d 	bl	8011ff4 <__lshift>
 80117da:	4604      	mov	r4, r0
 80117dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d061      	beq.n	80118a6 <_dtoa_r+0x916>
 80117e2:	9802      	ldr	r0, [sp, #8]
 80117e4:	4621      	mov	r1, r4
 80117e6:	f000 fc71 	bl	80120cc <__mcmp>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	da5b      	bge.n	80118a6 <_dtoa_r+0x916>
 80117ee:	2300      	movs	r3, #0
 80117f0:	9902      	ldr	r1, [sp, #8]
 80117f2:	220a      	movs	r2, #10
 80117f4:	4648      	mov	r0, r9
 80117f6:	f000 fa59 	bl	8011cac <__multadd>
 80117fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117fc:	9002      	str	r0, [sp, #8]
 80117fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 8177 	beq.w	8011af6 <_dtoa_r+0xb66>
 8011808:	4629      	mov	r1, r5
 801180a:	2300      	movs	r3, #0
 801180c:	220a      	movs	r2, #10
 801180e:	4648      	mov	r0, r9
 8011810:	f000 fa4c 	bl	8011cac <__multadd>
 8011814:	f1bb 0f00 	cmp.w	fp, #0
 8011818:	4605      	mov	r5, r0
 801181a:	dc6f      	bgt.n	80118fc <_dtoa_r+0x96c>
 801181c:	9b07      	ldr	r3, [sp, #28]
 801181e:	2b02      	cmp	r3, #2
 8011820:	dc49      	bgt.n	80118b6 <_dtoa_r+0x926>
 8011822:	e06b      	b.n	80118fc <_dtoa_r+0x96c>
 8011824:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801182a:	e73c      	b.n	80116a6 <_dtoa_r+0x716>
 801182c:	3fe00000 	.word	0x3fe00000
 8011830:	40240000 	.word	0x40240000
 8011834:	9b03      	ldr	r3, [sp, #12]
 8011836:	1e5c      	subs	r4, r3, #1
 8011838:	9b08      	ldr	r3, [sp, #32]
 801183a:	42a3      	cmp	r3, r4
 801183c:	db09      	blt.n	8011852 <_dtoa_r+0x8c2>
 801183e:	1b1c      	subs	r4, r3, r4
 8011840:	9b03      	ldr	r3, [sp, #12]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f6bf af30 	bge.w	80116a8 <_dtoa_r+0x718>
 8011848:	9b00      	ldr	r3, [sp, #0]
 801184a:	9a03      	ldr	r2, [sp, #12]
 801184c:	1a9e      	subs	r6, r3, r2
 801184e:	2300      	movs	r3, #0
 8011850:	e72b      	b.n	80116aa <_dtoa_r+0x71a>
 8011852:	9b08      	ldr	r3, [sp, #32]
 8011854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011856:	9408      	str	r4, [sp, #32]
 8011858:	1ae3      	subs	r3, r4, r3
 801185a:	441a      	add	r2, r3
 801185c:	9e00      	ldr	r6, [sp, #0]
 801185e:	9b03      	ldr	r3, [sp, #12]
 8011860:	920d      	str	r2, [sp, #52]	@ 0x34
 8011862:	2400      	movs	r4, #0
 8011864:	e721      	b.n	80116aa <_dtoa_r+0x71a>
 8011866:	9c08      	ldr	r4, [sp, #32]
 8011868:	9e00      	ldr	r6, [sp, #0]
 801186a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801186c:	e728      	b.n	80116c0 <_dtoa_r+0x730>
 801186e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8011872:	e751      	b.n	8011718 <_dtoa_r+0x788>
 8011874:	9a08      	ldr	r2, [sp, #32]
 8011876:	9902      	ldr	r1, [sp, #8]
 8011878:	e750      	b.n	801171c <_dtoa_r+0x78c>
 801187a:	f8cd 8008 	str.w	r8, [sp, #8]
 801187e:	e751      	b.n	8011724 <_dtoa_r+0x794>
 8011880:	2300      	movs	r3, #0
 8011882:	e779      	b.n	8011778 <_dtoa_r+0x7e8>
 8011884:	9b04      	ldr	r3, [sp, #16]
 8011886:	e777      	b.n	8011778 <_dtoa_r+0x7e8>
 8011888:	2300      	movs	r3, #0
 801188a:	9308      	str	r3, [sp, #32]
 801188c:	e779      	b.n	8011782 <_dtoa_r+0x7f2>
 801188e:	d093      	beq.n	80117b8 <_dtoa_r+0x828>
 8011890:	9a00      	ldr	r2, [sp, #0]
 8011892:	331c      	adds	r3, #28
 8011894:	441a      	add	r2, r3
 8011896:	9200      	str	r2, [sp, #0]
 8011898:	9a06      	ldr	r2, [sp, #24]
 801189a:	441a      	add	r2, r3
 801189c:	441e      	add	r6, r3
 801189e:	9206      	str	r2, [sp, #24]
 80118a0:	e78a      	b.n	80117b8 <_dtoa_r+0x828>
 80118a2:	4603      	mov	r3, r0
 80118a4:	e7f4      	b.n	8011890 <_dtoa_r+0x900>
 80118a6:	9b03      	ldr	r3, [sp, #12]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	46b8      	mov	r8, r7
 80118ac:	dc20      	bgt.n	80118f0 <_dtoa_r+0x960>
 80118ae:	469b      	mov	fp, r3
 80118b0:	9b07      	ldr	r3, [sp, #28]
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	dd1e      	ble.n	80118f4 <_dtoa_r+0x964>
 80118b6:	f1bb 0f00 	cmp.w	fp, #0
 80118ba:	f47f adb1 	bne.w	8011420 <_dtoa_r+0x490>
 80118be:	4621      	mov	r1, r4
 80118c0:	465b      	mov	r3, fp
 80118c2:	2205      	movs	r2, #5
 80118c4:	4648      	mov	r0, r9
 80118c6:	f000 f9f1 	bl	8011cac <__multadd>
 80118ca:	4601      	mov	r1, r0
 80118cc:	4604      	mov	r4, r0
 80118ce:	9802      	ldr	r0, [sp, #8]
 80118d0:	f000 fbfc 	bl	80120cc <__mcmp>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	f77f ada3 	ble.w	8011420 <_dtoa_r+0x490>
 80118da:	4656      	mov	r6, sl
 80118dc:	2331      	movs	r3, #49	@ 0x31
 80118de:	f806 3b01 	strb.w	r3, [r6], #1
 80118e2:	f108 0801 	add.w	r8, r8, #1
 80118e6:	e59f      	b.n	8011428 <_dtoa_r+0x498>
 80118e8:	9c03      	ldr	r4, [sp, #12]
 80118ea:	46b8      	mov	r8, r7
 80118ec:	4625      	mov	r5, r4
 80118ee:	e7f4      	b.n	80118da <_dtoa_r+0x94a>
 80118f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80118f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f000 8101 	beq.w	8011afe <_dtoa_r+0xb6e>
 80118fc:	2e00      	cmp	r6, #0
 80118fe:	dd05      	ble.n	801190c <_dtoa_r+0x97c>
 8011900:	4629      	mov	r1, r5
 8011902:	4632      	mov	r2, r6
 8011904:	4648      	mov	r0, r9
 8011906:	f000 fb75 	bl	8011ff4 <__lshift>
 801190a:	4605      	mov	r5, r0
 801190c:	9b08      	ldr	r3, [sp, #32]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d05c      	beq.n	80119cc <_dtoa_r+0xa3c>
 8011912:	6869      	ldr	r1, [r5, #4]
 8011914:	4648      	mov	r0, r9
 8011916:	f000 f967 	bl	8011be8 <_Balloc>
 801191a:	4606      	mov	r6, r0
 801191c:	b928      	cbnz	r0, 801192a <_dtoa_r+0x99a>
 801191e:	4b82      	ldr	r3, [pc, #520]	@ (8011b28 <_dtoa_r+0xb98>)
 8011920:	4602      	mov	r2, r0
 8011922:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011926:	f7ff bb4a 	b.w	8010fbe <_dtoa_r+0x2e>
 801192a:	692a      	ldr	r2, [r5, #16]
 801192c:	3202      	adds	r2, #2
 801192e:	0092      	lsls	r2, r2, #2
 8011930:	f105 010c 	add.w	r1, r5, #12
 8011934:	300c      	adds	r0, #12
 8011936:	f7ff fa8c 	bl	8010e52 <memcpy>
 801193a:	2201      	movs	r2, #1
 801193c:	4631      	mov	r1, r6
 801193e:	4648      	mov	r0, r9
 8011940:	f000 fb58 	bl	8011ff4 <__lshift>
 8011944:	f10a 0301 	add.w	r3, sl, #1
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	eb0a 030b 	add.w	r3, sl, fp
 801194e:	9308      	str	r3, [sp, #32]
 8011950:	9b04      	ldr	r3, [sp, #16]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	462f      	mov	r7, r5
 8011958:	9306      	str	r3, [sp, #24]
 801195a:	4605      	mov	r5, r0
 801195c:	9b00      	ldr	r3, [sp, #0]
 801195e:	9802      	ldr	r0, [sp, #8]
 8011960:	4621      	mov	r1, r4
 8011962:	f103 3bff 	add.w	fp, r3, #4294967295
 8011966:	f7ff fa89 	bl	8010e7c <quorem>
 801196a:	4603      	mov	r3, r0
 801196c:	3330      	adds	r3, #48	@ 0x30
 801196e:	9003      	str	r0, [sp, #12]
 8011970:	4639      	mov	r1, r7
 8011972:	9802      	ldr	r0, [sp, #8]
 8011974:	9309      	str	r3, [sp, #36]	@ 0x24
 8011976:	f000 fba9 	bl	80120cc <__mcmp>
 801197a:	462a      	mov	r2, r5
 801197c:	9004      	str	r0, [sp, #16]
 801197e:	4621      	mov	r1, r4
 8011980:	4648      	mov	r0, r9
 8011982:	f000 fbbf 	bl	8012104 <__mdiff>
 8011986:	68c2      	ldr	r2, [r0, #12]
 8011988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801198a:	4606      	mov	r6, r0
 801198c:	bb02      	cbnz	r2, 80119d0 <_dtoa_r+0xa40>
 801198e:	4601      	mov	r1, r0
 8011990:	9802      	ldr	r0, [sp, #8]
 8011992:	f000 fb9b 	bl	80120cc <__mcmp>
 8011996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011998:	4602      	mov	r2, r0
 801199a:	4631      	mov	r1, r6
 801199c:	4648      	mov	r0, r9
 801199e:	920c      	str	r2, [sp, #48]	@ 0x30
 80119a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80119a2:	f000 f961 	bl	8011c68 <_Bfree>
 80119a6:	9b07      	ldr	r3, [sp, #28]
 80119a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80119aa:	9e00      	ldr	r6, [sp, #0]
 80119ac:	ea42 0103 	orr.w	r1, r2, r3
 80119b0:	9b06      	ldr	r3, [sp, #24]
 80119b2:	4319      	orrs	r1, r3
 80119b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119b6:	d10d      	bne.n	80119d4 <_dtoa_r+0xa44>
 80119b8:	2b39      	cmp	r3, #57	@ 0x39
 80119ba:	d027      	beq.n	8011a0c <_dtoa_r+0xa7c>
 80119bc:	9a04      	ldr	r2, [sp, #16]
 80119be:	2a00      	cmp	r2, #0
 80119c0:	dd01      	ble.n	80119c6 <_dtoa_r+0xa36>
 80119c2:	9b03      	ldr	r3, [sp, #12]
 80119c4:	3331      	adds	r3, #49	@ 0x31
 80119c6:	f88b 3000 	strb.w	r3, [fp]
 80119ca:	e52e      	b.n	801142a <_dtoa_r+0x49a>
 80119cc:	4628      	mov	r0, r5
 80119ce:	e7b9      	b.n	8011944 <_dtoa_r+0x9b4>
 80119d0:	2201      	movs	r2, #1
 80119d2:	e7e2      	b.n	801199a <_dtoa_r+0xa0a>
 80119d4:	9904      	ldr	r1, [sp, #16]
 80119d6:	2900      	cmp	r1, #0
 80119d8:	db04      	blt.n	80119e4 <_dtoa_r+0xa54>
 80119da:	9807      	ldr	r0, [sp, #28]
 80119dc:	4301      	orrs	r1, r0
 80119de:	9806      	ldr	r0, [sp, #24]
 80119e0:	4301      	orrs	r1, r0
 80119e2:	d120      	bne.n	8011a26 <_dtoa_r+0xa96>
 80119e4:	2a00      	cmp	r2, #0
 80119e6:	ddee      	ble.n	80119c6 <_dtoa_r+0xa36>
 80119e8:	9902      	ldr	r1, [sp, #8]
 80119ea:	9300      	str	r3, [sp, #0]
 80119ec:	2201      	movs	r2, #1
 80119ee:	4648      	mov	r0, r9
 80119f0:	f000 fb00 	bl	8011ff4 <__lshift>
 80119f4:	4621      	mov	r1, r4
 80119f6:	9002      	str	r0, [sp, #8]
 80119f8:	f000 fb68 	bl	80120cc <__mcmp>
 80119fc:	2800      	cmp	r0, #0
 80119fe:	9b00      	ldr	r3, [sp, #0]
 8011a00:	dc02      	bgt.n	8011a08 <_dtoa_r+0xa78>
 8011a02:	d1e0      	bne.n	80119c6 <_dtoa_r+0xa36>
 8011a04:	07da      	lsls	r2, r3, #31
 8011a06:	d5de      	bpl.n	80119c6 <_dtoa_r+0xa36>
 8011a08:	2b39      	cmp	r3, #57	@ 0x39
 8011a0a:	d1da      	bne.n	80119c2 <_dtoa_r+0xa32>
 8011a0c:	2339      	movs	r3, #57	@ 0x39
 8011a0e:	f88b 3000 	strb.w	r3, [fp]
 8011a12:	4633      	mov	r3, r6
 8011a14:	461e      	mov	r6, r3
 8011a16:	3b01      	subs	r3, #1
 8011a18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011a1c:	2a39      	cmp	r2, #57	@ 0x39
 8011a1e:	d04e      	beq.n	8011abe <_dtoa_r+0xb2e>
 8011a20:	3201      	adds	r2, #1
 8011a22:	701a      	strb	r2, [r3, #0]
 8011a24:	e501      	b.n	801142a <_dtoa_r+0x49a>
 8011a26:	2a00      	cmp	r2, #0
 8011a28:	dd03      	ble.n	8011a32 <_dtoa_r+0xaa2>
 8011a2a:	2b39      	cmp	r3, #57	@ 0x39
 8011a2c:	d0ee      	beq.n	8011a0c <_dtoa_r+0xa7c>
 8011a2e:	3301      	adds	r3, #1
 8011a30:	e7c9      	b.n	80119c6 <_dtoa_r+0xa36>
 8011a32:	9a00      	ldr	r2, [sp, #0]
 8011a34:	9908      	ldr	r1, [sp, #32]
 8011a36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011a3a:	428a      	cmp	r2, r1
 8011a3c:	d028      	beq.n	8011a90 <_dtoa_r+0xb00>
 8011a3e:	9902      	ldr	r1, [sp, #8]
 8011a40:	2300      	movs	r3, #0
 8011a42:	220a      	movs	r2, #10
 8011a44:	4648      	mov	r0, r9
 8011a46:	f000 f931 	bl	8011cac <__multadd>
 8011a4a:	42af      	cmp	r7, r5
 8011a4c:	9002      	str	r0, [sp, #8]
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	f04f 020a 	mov.w	r2, #10
 8011a56:	4639      	mov	r1, r7
 8011a58:	4648      	mov	r0, r9
 8011a5a:	d107      	bne.n	8011a6c <_dtoa_r+0xadc>
 8011a5c:	f000 f926 	bl	8011cac <__multadd>
 8011a60:	4607      	mov	r7, r0
 8011a62:	4605      	mov	r5, r0
 8011a64:	9b00      	ldr	r3, [sp, #0]
 8011a66:	3301      	adds	r3, #1
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	e777      	b.n	801195c <_dtoa_r+0x9cc>
 8011a6c:	f000 f91e 	bl	8011cac <__multadd>
 8011a70:	4629      	mov	r1, r5
 8011a72:	4607      	mov	r7, r0
 8011a74:	2300      	movs	r3, #0
 8011a76:	220a      	movs	r2, #10
 8011a78:	4648      	mov	r0, r9
 8011a7a:	f000 f917 	bl	8011cac <__multadd>
 8011a7e:	4605      	mov	r5, r0
 8011a80:	e7f0      	b.n	8011a64 <_dtoa_r+0xad4>
 8011a82:	f1bb 0f00 	cmp.w	fp, #0
 8011a86:	bfcc      	ite	gt
 8011a88:	465e      	movgt	r6, fp
 8011a8a:	2601      	movle	r6, #1
 8011a8c:	4456      	add	r6, sl
 8011a8e:	2700      	movs	r7, #0
 8011a90:	9902      	ldr	r1, [sp, #8]
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	2201      	movs	r2, #1
 8011a96:	4648      	mov	r0, r9
 8011a98:	f000 faac 	bl	8011ff4 <__lshift>
 8011a9c:	4621      	mov	r1, r4
 8011a9e:	9002      	str	r0, [sp, #8]
 8011aa0:	f000 fb14 	bl	80120cc <__mcmp>
 8011aa4:	2800      	cmp	r0, #0
 8011aa6:	dcb4      	bgt.n	8011a12 <_dtoa_r+0xa82>
 8011aa8:	d102      	bne.n	8011ab0 <_dtoa_r+0xb20>
 8011aaa:	9b00      	ldr	r3, [sp, #0]
 8011aac:	07db      	lsls	r3, r3, #31
 8011aae:	d4b0      	bmi.n	8011a12 <_dtoa_r+0xa82>
 8011ab0:	4633      	mov	r3, r6
 8011ab2:	461e      	mov	r6, r3
 8011ab4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ab8:	2a30      	cmp	r2, #48	@ 0x30
 8011aba:	d0fa      	beq.n	8011ab2 <_dtoa_r+0xb22>
 8011abc:	e4b5      	b.n	801142a <_dtoa_r+0x49a>
 8011abe:	459a      	cmp	sl, r3
 8011ac0:	d1a8      	bne.n	8011a14 <_dtoa_r+0xa84>
 8011ac2:	2331      	movs	r3, #49	@ 0x31
 8011ac4:	f108 0801 	add.w	r8, r8, #1
 8011ac8:	f88a 3000 	strb.w	r3, [sl]
 8011acc:	e4ad      	b.n	801142a <_dtoa_r+0x49a>
 8011ace:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8011ad0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8011b2c <_dtoa_r+0xb9c>
 8011ad4:	b11b      	cbz	r3, 8011ade <_dtoa_r+0xb4e>
 8011ad6:	f10a 0308 	add.w	r3, sl, #8
 8011ada:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011adc:	6013      	str	r3, [r2, #0]
 8011ade:	4650      	mov	r0, sl
 8011ae0:	b017      	add	sp, #92	@ 0x5c
 8011ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae6:	9b07      	ldr	r3, [sp, #28]
 8011ae8:	2b01      	cmp	r3, #1
 8011aea:	f77f ae2e 	ble.w	801174a <_dtoa_r+0x7ba>
 8011aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011af0:	9308      	str	r3, [sp, #32]
 8011af2:	2001      	movs	r0, #1
 8011af4:	e64d      	b.n	8011792 <_dtoa_r+0x802>
 8011af6:	f1bb 0f00 	cmp.w	fp, #0
 8011afa:	f77f aed9 	ble.w	80118b0 <_dtoa_r+0x920>
 8011afe:	4656      	mov	r6, sl
 8011b00:	9802      	ldr	r0, [sp, #8]
 8011b02:	4621      	mov	r1, r4
 8011b04:	f7ff f9ba 	bl	8010e7c <quorem>
 8011b08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8011b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8011b10:	eba6 020a 	sub.w	r2, r6, sl
 8011b14:	4593      	cmp	fp, r2
 8011b16:	ddb4      	ble.n	8011a82 <_dtoa_r+0xaf2>
 8011b18:	9902      	ldr	r1, [sp, #8]
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	220a      	movs	r2, #10
 8011b1e:	4648      	mov	r0, r9
 8011b20:	f000 f8c4 	bl	8011cac <__multadd>
 8011b24:	9002      	str	r0, [sp, #8]
 8011b26:	e7eb      	b.n	8011b00 <_dtoa_r+0xb70>
 8011b28:	080169df 	.word	0x080169df
 8011b2c:	08016963 	.word	0x08016963

08011b30 <_free_r>:
 8011b30:	b538      	push	{r3, r4, r5, lr}
 8011b32:	4605      	mov	r5, r0
 8011b34:	2900      	cmp	r1, #0
 8011b36:	d041      	beq.n	8011bbc <_free_r+0x8c>
 8011b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b3c:	1f0c      	subs	r4, r1, #4
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	bfb8      	it	lt
 8011b42:	18e4      	addlt	r4, r4, r3
 8011b44:	f7fe fa6c 	bl	8010020 <__malloc_lock>
 8011b48:	4a1d      	ldr	r2, [pc, #116]	@ (8011bc0 <_free_r+0x90>)
 8011b4a:	6813      	ldr	r3, [r2, #0]
 8011b4c:	b933      	cbnz	r3, 8011b5c <_free_r+0x2c>
 8011b4e:	6063      	str	r3, [r4, #4]
 8011b50:	6014      	str	r4, [r2, #0]
 8011b52:	4628      	mov	r0, r5
 8011b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b58:	f7fe ba68 	b.w	801002c <__malloc_unlock>
 8011b5c:	42a3      	cmp	r3, r4
 8011b5e:	d908      	bls.n	8011b72 <_free_r+0x42>
 8011b60:	6820      	ldr	r0, [r4, #0]
 8011b62:	1821      	adds	r1, r4, r0
 8011b64:	428b      	cmp	r3, r1
 8011b66:	bf01      	itttt	eq
 8011b68:	6819      	ldreq	r1, [r3, #0]
 8011b6a:	685b      	ldreq	r3, [r3, #4]
 8011b6c:	1809      	addeq	r1, r1, r0
 8011b6e:	6021      	streq	r1, [r4, #0]
 8011b70:	e7ed      	b.n	8011b4e <_free_r+0x1e>
 8011b72:	461a      	mov	r2, r3
 8011b74:	685b      	ldr	r3, [r3, #4]
 8011b76:	b10b      	cbz	r3, 8011b7c <_free_r+0x4c>
 8011b78:	42a3      	cmp	r3, r4
 8011b7a:	d9fa      	bls.n	8011b72 <_free_r+0x42>
 8011b7c:	6811      	ldr	r1, [r2, #0]
 8011b7e:	1850      	adds	r0, r2, r1
 8011b80:	42a0      	cmp	r0, r4
 8011b82:	d10b      	bne.n	8011b9c <_free_r+0x6c>
 8011b84:	6820      	ldr	r0, [r4, #0]
 8011b86:	4401      	add	r1, r0
 8011b88:	1850      	adds	r0, r2, r1
 8011b8a:	4283      	cmp	r3, r0
 8011b8c:	6011      	str	r1, [r2, #0]
 8011b8e:	d1e0      	bne.n	8011b52 <_free_r+0x22>
 8011b90:	6818      	ldr	r0, [r3, #0]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	6053      	str	r3, [r2, #4]
 8011b96:	4408      	add	r0, r1
 8011b98:	6010      	str	r0, [r2, #0]
 8011b9a:	e7da      	b.n	8011b52 <_free_r+0x22>
 8011b9c:	d902      	bls.n	8011ba4 <_free_r+0x74>
 8011b9e:	230c      	movs	r3, #12
 8011ba0:	602b      	str	r3, [r5, #0]
 8011ba2:	e7d6      	b.n	8011b52 <_free_r+0x22>
 8011ba4:	6820      	ldr	r0, [r4, #0]
 8011ba6:	1821      	adds	r1, r4, r0
 8011ba8:	428b      	cmp	r3, r1
 8011baa:	bf04      	itt	eq
 8011bac:	6819      	ldreq	r1, [r3, #0]
 8011bae:	685b      	ldreq	r3, [r3, #4]
 8011bb0:	6063      	str	r3, [r4, #4]
 8011bb2:	bf04      	itt	eq
 8011bb4:	1809      	addeq	r1, r1, r0
 8011bb6:	6021      	streq	r1, [r4, #0]
 8011bb8:	6054      	str	r4, [r2, #4]
 8011bba:	e7ca      	b.n	8011b52 <_free_r+0x22>
 8011bbc:	bd38      	pop	{r3, r4, r5, pc}
 8011bbe:	bf00      	nop
 8011bc0:	200031b8 	.word	0x200031b8

08011bc4 <__ascii_mbtowc>:
 8011bc4:	b082      	sub	sp, #8
 8011bc6:	b901      	cbnz	r1, 8011bca <__ascii_mbtowc+0x6>
 8011bc8:	a901      	add	r1, sp, #4
 8011bca:	b142      	cbz	r2, 8011bde <__ascii_mbtowc+0x1a>
 8011bcc:	b14b      	cbz	r3, 8011be2 <__ascii_mbtowc+0x1e>
 8011bce:	7813      	ldrb	r3, [r2, #0]
 8011bd0:	600b      	str	r3, [r1, #0]
 8011bd2:	7812      	ldrb	r2, [r2, #0]
 8011bd4:	1e10      	subs	r0, r2, #0
 8011bd6:	bf18      	it	ne
 8011bd8:	2001      	movne	r0, #1
 8011bda:	b002      	add	sp, #8
 8011bdc:	4770      	bx	lr
 8011bde:	4610      	mov	r0, r2
 8011be0:	e7fb      	b.n	8011bda <__ascii_mbtowc+0x16>
 8011be2:	f06f 0001 	mvn.w	r0, #1
 8011be6:	e7f8      	b.n	8011bda <__ascii_mbtowc+0x16>

08011be8 <_Balloc>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	69c6      	ldr	r6, [r0, #28]
 8011bec:	4604      	mov	r4, r0
 8011bee:	460d      	mov	r5, r1
 8011bf0:	b976      	cbnz	r6, 8011c10 <_Balloc+0x28>
 8011bf2:	2010      	movs	r0, #16
 8011bf4:	f7fe f96a 	bl	800fecc <malloc>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	61e0      	str	r0, [r4, #28]
 8011bfc:	b920      	cbnz	r0, 8011c08 <_Balloc+0x20>
 8011bfe:	4b18      	ldr	r3, [pc, #96]	@ (8011c60 <_Balloc+0x78>)
 8011c00:	4818      	ldr	r0, [pc, #96]	@ (8011c64 <_Balloc+0x7c>)
 8011c02:	216b      	movs	r1, #107	@ 0x6b
 8011c04:	f000 fe2a 	bl	801285c <__assert_func>
 8011c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c0c:	6006      	str	r6, [r0, #0]
 8011c0e:	60c6      	str	r6, [r0, #12]
 8011c10:	69e6      	ldr	r6, [r4, #28]
 8011c12:	68f3      	ldr	r3, [r6, #12]
 8011c14:	b183      	cbz	r3, 8011c38 <_Balloc+0x50>
 8011c16:	69e3      	ldr	r3, [r4, #28]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011c1e:	b9b8      	cbnz	r0, 8011c50 <_Balloc+0x68>
 8011c20:	2101      	movs	r1, #1
 8011c22:	fa01 f605 	lsl.w	r6, r1, r5
 8011c26:	1d72      	adds	r2, r6, #5
 8011c28:	0092      	lsls	r2, r2, #2
 8011c2a:	4620      	mov	r0, r4
 8011c2c:	f000 fe34 	bl	8012898 <_calloc_r>
 8011c30:	b160      	cbz	r0, 8011c4c <_Balloc+0x64>
 8011c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011c36:	e00e      	b.n	8011c56 <_Balloc+0x6e>
 8011c38:	2221      	movs	r2, #33	@ 0x21
 8011c3a:	2104      	movs	r1, #4
 8011c3c:	4620      	mov	r0, r4
 8011c3e:	f000 fe2b 	bl	8012898 <_calloc_r>
 8011c42:	69e3      	ldr	r3, [r4, #28]
 8011c44:	60f0      	str	r0, [r6, #12]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d1e4      	bne.n	8011c16 <_Balloc+0x2e>
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	bd70      	pop	{r4, r5, r6, pc}
 8011c50:	6802      	ldr	r2, [r0, #0]
 8011c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c56:	2300      	movs	r3, #0
 8011c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011c5c:	e7f7      	b.n	8011c4e <_Balloc+0x66>
 8011c5e:	bf00      	nop
 8011c60:	08016970 	.word	0x08016970
 8011c64:	080169f0 	.word	0x080169f0

08011c68 <_Bfree>:
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	69c6      	ldr	r6, [r0, #28]
 8011c6c:	4605      	mov	r5, r0
 8011c6e:	460c      	mov	r4, r1
 8011c70:	b976      	cbnz	r6, 8011c90 <_Bfree+0x28>
 8011c72:	2010      	movs	r0, #16
 8011c74:	f7fe f92a 	bl	800fecc <malloc>
 8011c78:	4602      	mov	r2, r0
 8011c7a:	61e8      	str	r0, [r5, #28]
 8011c7c:	b920      	cbnz	r0, 8011c88 <_Bfree+0x20>
 8011c7e:	4b09      	ldr	r3, [pc, #36]	@ (8011ca4 <_Bfree+0x3c>)
 8011c80:	4809      	ldr	r0, [pc, #36]	@ (8011ca8 <_Bfree+0x40>)
 8011c82:	218f      	movs	r1, #143	@ 0x8f
 8011c84:	f000 fdea 	bl	801285c <__assert_func>
 8011c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c8c:	6006      	str	r6, [r0, #0]
 8011c8e:	60c6      	str	r6, [r0, #12]
 8011c90:	b13c      	cbz	r4, 8011ca2 <_Bfree+0x3a>
 8011c92:	69eb      	ldr	r3, [r5, #28]
 8011c94:	6862      	ldr	r2, [r4, #4]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c9c:	6021      	str	r1, [r4, #0]
 8011c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011ca2:	bd70      	pop	{r4, r5, r6, pc}
 8011ca4:	08016970 	.word	0x08016970
 8011ca8:	080169f0 	.word	0x080169f0

08011cac <__multadd>:
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	690d      	ldr	r5, [r1, #16]
 8011cb2:	4607      	mov	r7, r0
 8011cb4:	460c      	mov	r4, r1
 8011cb6:	461e      	mov	r6, r3
 8011cb8:	f101 0c14 	add.w	ip, r1, #20
 8011cbc:	2000      	movs	r0, #0
 8011cbe:	f8dc 3000 	ldr.w	r3, [ip]
 8011cc2:	b299      	uxth	r1, r3
 8011cc4:	fb02 6101 	mla	r1, r2, r1, r6
 8011cc8:	0c1e      	lsrs	r6, r3, #16
 8011cca:	0c0b      	lsrs	r3, r1, #16
 8011ccc:	fb02 3306 	mla	r3, r2, r6, r3
 8011cd0:	b289      	uxth	r1, r1
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011cd8:	4285      	cmp	r5, r0
 8011cda:	f84c 1b04 	str.w	r1, [ip], #4
 8011cde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011ce2:	dcec      	bgt.n	8011cbe <__multadd+0x12>
 8011ce4:	b30e      	cbz	r6, 8011d2a <__multadd+0x7e>
 8011ce6:	68a3      	ldr	r3, [r4, #8]
 8011ce8:	42ab      	cmp	r3, r5
 8011cea:	dc19      	bgt.n	8011d20 <__multadd+0x74>
 8011cec:	6861      	ldr	r1, [r4, #4]
 8011cee:	4638      	mov	r0, r7
 8011cf0:	3101      	adds	r1, #1
 8011cf2:	f7ff ff79 	bl	8011be8 <_Balloc>
 8011cf6:	4680      	mov	r8, r0
 8011cf8:	b928      	cbnz	r0, 8011d06 <__multadd+0x5a>
 8011cfa:	4602      	mov	r2, r0
 8011cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8011d30 <__multadd+0x84>)
 8011cfe:	480d      	ldr	r0, [pc, #52]	@ (8011d34 <__multadd+0x88>)
 8011d00:	21ba      	movs	r1, #186	@ 0xba
 8011d02:	f000 fdab 	bl	801285c <__assert_func>
 8011d06:	6922      	ldr	r2, [r4, #16]
 8011d08:	3202      	adds	r2, #2
 8011d0a:	f104 010c 	add.w	r1, r4, #12
 8011d0e:	0092      	lsls	r2, r2, #2
 8011d10:	300c      	adds	r0, #12
 8011d12:	f7ff f89e 	bl	8010e52 <memcpy>
 8011d16:	4621      	mov	r1, r4
 8011d18:	4638      	mov	r0, r7
 8011d1a:	f7ff ffa5 	bl	8011c68 <_Bfree>
 8011d1e:	4644      	mov	r4, r8
 8011d20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011d24:	3501      	adds	r5, #1
 8011d26:	615e      	str	r6, [r3, #20]
 8011d28:	6125      	str	r5, [r4, #16]
 8011d2a:	4620      	mov	r0, r4
 8011d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d30:	080169df 	.word	0x080169df
 8011d34:	080169f0 	.word	0x080169f0

08011d38 <__hi0bits>:
 8011d38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	bf36      	itet	cc
 8011d40:	0403      	lslcc	r3, r0, #16
 8011d42:	2000      	movcs	r0, #0
 8011d44:	2010      	movcc	r0, #16
 8011d46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011d4a:	bf3c      	itt	cc
 8011d4c:	021b      	lslcc	r3, r3, #8
 8011d4e:	3008      	addcc	r0, #8
 8011d50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011d54:	bf3c      	itt	cc
 8011d56:	011b      	lslcc	r3, r3, #4
 8011d58:	3004      	addcc	r0, #4
 8011d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011d5e:	bf3c      	itt	cc
 8011d60:	009b      	lslcc	r3, r3, #2
 8011d62:	3002      	addcc	r0, #2
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	db05      	blt.n	8011d74 <__hi0bits+0x3c>
 8011d68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011d6c:	f100 0001 	add.w	r0, r0, #1
 8011d70:	bf08      	it	eq
 8011d72:	2020      	moveq	r0, #32
 8011d74:	4770      	bx	lr

08011d76 <__lo0bits>:
 8011d76:	6803      	ldr	r3, [r0, #0]
 8011d78:	4602      	mov	r2, r0
 8011d7a:	f013 0007 	ands.w	r0, r3, #7
 8011d7e:	d00b      	beq.n	8011d98 <__lo0bits+0x22>
 8011d80:	07d9      	lsls	r1, r3, #31
 8011d82:	d421      	bmi.n	8011dc8 <__lo0bits+0x52>
 8011d84:	0798      	lsls	r0, r3, #30
 8011d86:	bf49      	itett	mi
 8011d88:	085b      	lsrmi	r3, r3, #1
 8011d8a:	089b      	lsrpl	r3, r3, #2
 8011d8c:	2001      	movmi	r0, #1
 8011d8e:	6013      	strmi	r3, [r2, #0]
 8011d90:	bf5c      	itt	pl
 8011d92:	6013      	strpl	r3, [r2, #0]
 8011d94:	2002      	movpl	r0, #2
 8011d96:	4770      	bx	lr
 8011d98:	b299      	uxth	r1, r3
 8011d9a:	b909      	cbnz	r1, 8011da0 <__lo0bits+0x2a>
 8011d9c:	0c1b      	lsrs	r3, r3, #16
 8011d9e:	2010      	movs	r0, #16
 8011da0:	b2d9      	uxtb	r1, r3
 8011da2:	b909      	cbnz	r1, 8011da8 <__lo0bits+0x32>
 8011da4:	3008      	adds	r0, #8
 8011da6:	0a1b      	lsrs	r3, r3, #8
 8011da8:	0719      	lsls	r1, r3, #28
 8011daa:	bf04      	itt	eq
 8011dac:	091b      	lsreq	r3, r3, #4
 8011dae:	3004      	addeq	r0, #4
 8011db0:	0799      	lsls	r1, r3, #30
 8011db2:	bf04      	itt	eq
 8011db4:	089b      	lsreq	r3, r3, #2
 8011db6:	3002      	addeq	r0, #2
 8011db8:	07d9      	lsls	r1, r3, #31
 8011dba:	d403      	bmi.n	8011dc4 <__lo0bits+0x4e>
 8011dbc:	085b      	lsrs	r3, r3, #1
 8011dbe:	f100 0001 	add.w	r0, r0, #1
 8011dc2:	d003      	beq.n	8011dcc <__lo0bits+0x56>
 8011dc4:	6013      	str	r3, [r2, #0]
 8011dc6:	4770      	bx	lr
 8011dc8:	2000      	movs	r0, #0
 8011dca:	4770      	bx	lr
 8011dcc:	2020      	movs	r0, #32
 8011dce:	4770      	bx	lr

08011dd0 <__i2b>:
 8011dd0:	b510      	push	{r4, lr}
 8011dd2:	460c      	mov	r4, r1
 8011dd4:	2101      	movs	r1, #1
 8011dd6:	f7ff ff07 	bl	8011be8 <_Balloc>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	b928      	cbnz	r0, 8011dea <__i2b+0x1a>
 8011dde:	4b05      	ldr	r3, [pc, #20]	@ (8011df4 <__i2b+0x24>)
 8011de0:	4805      	ldr	r0, [pc, #20]	@ (8011df8 <__i2b+0x28>)
 8011de2:	f240 1145 	movw	r1, #325	@ 0x145
 8011de6:	f000 fd39 	bl	801285c <__assert_func>
 8011dea:	2301      	movs	r3, #1
 8011dec:	6144      	str	r4, [r0, #20]
 8011dee:	6103      	str	r3, [r0, #16]
 8011df0:	bd10      	pop	{r4, pc}
 8011df2:	bf00      	nop
 8011df4:	080169df 	.word	0x080169df
 8011df8:	080169f0 	.word	0x080169f0

08011dfc <__multiply>:
 8011dfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e00:	4617      	mov	r7, r2
 8011e02:	690a      	ldr	r2, [r1, #16]
 8011e04:	693b      	ldr	r3, [r7, #16]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	bfa8      	it	ge
 8011e0a:	463b      	movge	r3, r7
 8011e0c:	4689      	mov	r9, r1
 8011e0e:	bfa4      	itt	ge
 8011e10:	460f      	movge	r7, r1
 8011e12:	4699      	movge	r9, r3
 8011e14:	693d      	ldr	r5, [r7, #16]
 8011e16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	6879      	ldr	r1, [r7, #4]
 8011e1e:	eb05 060a 	add.w	r6, r5, sl
 8011e22:	42b3      	cmp	r3, r6
 8011e24:	b085      	sub	sp, #20
 8011e26:	bfb8      	it	lt
 8011e28:	3101      	addlt	r1, #1
 8011e2a:	f7ff fedd 	bl	8011be8 <_Balloc>
 8011e2e:	b930      	cbnz	r0, 8011e3e <__multiply+0x42>
 8011e30:	4602      	mov	r2, r0
 8011e32:	4b41      	ldr	r3, [pc, #260]	@ (8011f38 <__multiply+0x13c>)
 8011e34:	4841      	ldr	r0, [pc, #260]	@ (8011f3c <__multiply+0x140>)
 8011e36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011e3a:	f000 fd0f 	bl	801285c <__assert_func>
 8011e3e:	f100 0414 	add.w	r4, r0, #20
 8011e42:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8011e46:	4623      	mov	r3, r4
 8011e48:	2200      	movs	r2, #0
 8011e4a:	4573      	cmp	r3, lr
 8011e4c:	d320      	bcc.n	8011e90 <__multiply+0x94>
 8011e4e:	f107 0814 	add.w	r8, r7, #20
 8011e52:	f109 0114 	add.w	r1, r9, #20
 8011e56:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8011e5a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8011e5e:	9302      	str	r3, [sp, #8]
 8011e60:	1beb      	subs	r3, r5, r7
 8011e62:	3b15      	subs	r3, #21
 8011e64:	f023 0303 	bic.w	r3, r3, #3
 8011e68:	3304      	adds	r3, #4
 8011e6a:	3715      	adds	r7, #21
 8011e6c:	42bd      	cmp	r5, r7
 8011e6e:	bf38      	it	cc
 8011e70:	2304      	movcc	r3, #4
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	9b02      	ldr	r3, [sp, #8]
 8011e76:	9103      	str	r1, [sp, #12]
 8011e78:	428b      	cmp	r3, r1
 8011e7a:	d80c      	bhi.n	8011e96 <__multiply+0x9a>
 8011e7c:	2e00      	cmp	r6, #0
 8011e7e:	dd03      	ble.n	8011e88 <__multiply+0x8c>
 8011e80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d055      	beq.n	8011f34 <__multiply+0x138>
 8011e88:	6106      	str	r6, [r0, #16]
 8011e8a:	b005      	add	sp, #20
 8011e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e90:	f843 2b04 	str.w	r2, [r3], #4
 8011e94:	e7d9      	b.n	8011e4a <__multiply+0x4e>
 8011e96:	f8b1 a000 	ldrh.w	sl, [r1]
 8011e9a:	f1ba 0f00 	cmp.w	sl, #0
 8011e9e:	d01f      	beq.n	8011ee0 <__multiply+0xe4>
 8011ea0:	46c4      	mov	ip, r8
 8011ea2:	46a1      	mov	r9, r4
 8011ea4:	2700      	movs	r7, #0
 8011ea6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8011eae:	fa1f fb82 	uxth.w	fp, r2
 8011eb2:	b29b      	uxth	r3, r3
 8011eb4:	fb0a 330b 	mla	r3, sl, fp, r3
 8011eb8:	443b      	add	r3, r7
 8011eba:	f8d9 7000 	ldr.w	r7, [r9]
 8011ebe:	0c12      	lsrs	r2, r2, #16
 8011ec0:	0c3f      	lsrs	r7, r7, #16
 8011ec2:	fb0a 7202 	mla	r2, sl, r2, r7
 8011ec6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ed0:	4565      	cmp	r5, ip
 8011ed2:	f849 3b04 	str.w	r3, [r9], #4
 8011ed6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8011eda:	d8e4      	bhi.n	8011ea6 <__multiply+0xaa>
 8011edc:	9b01      	ldr	r3, [sp, #4]
 8011ede:	50e7      	str	r7, [r4, r3]
 8011ee0:	9b03      	ldr	r3, [sp, #12]
 8011ee2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011ee6:	3104      	adds	r1, #4
 8011ee8:	f1b9 0f00 	cmp.w	r9, #0
 8011eec:	d020      	beq.n	8011f30 <__multiply+0x134>
 8011eee:	6823      	ldr	r3, [r4, #0]
 8011ef0:	4647      	mov	r7, r8
 8011ef2:	46a4      	mov	ip, r4
 8011ef4:	f04f 0a00 	mov.w	sl, #0
 8011ef8:	f8b7 b000 	ldrh.w	fp, [r7]
 8011efc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8011f00:	fb09 220b 	mla	r2, r9, fp, r2
 8011f04:	4452      	add	r2, sl
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f0c:	f84c 3b04 	str.w	r3, [ip], #4
 8011f10:	f857 3b04 	ldr.w	r3, [r7], #4
 8011f14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f18:	f8bc 3000 	ldrh.w	r3, [ip]
 8011f1c:	fb09 330a 	mla	r3, r9, sl, r3
 8011f20:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8011f24:	42bd      	cmp	r5, r7
 8011f26:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011f2a:	d8e5      	bhi.n	8011ef8 <__multiply+0xfc>
 8011f2c:	9a01      	ldr	r2, [sp, #4]
 8011f2e:	50a3      	str	r3, [r4, r2]
 8011f30:	3404      	adds	r4, #4
 8011f32:	e79f      	b.n	8011e74 <__multiply+0x78>
 8011f34:	3e01      	subs	r6, #1
 8011f36:	e7a1      	b.n	8011e7c <__multiply+0x80>
 8011f38:	080169df 	.word	0x080169df
 8011f3c:	080169f0 	.word	0x080169f0

08011f40 <__pow5mult>:
 8011f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f44:	4615      	mov	r5, r2
 8011f46:	f012 0203 	ands.w	r2, r2, #3
 8011f4a:	4607      	mov	r7, r0
 8011f4c:	460e      	mov	r6, r1
 8011f4e:	d007      	beq.n	8011f60 <__pow5mult+0x20>
 8011f50:	4c25      	ldr	r4, [pc, #148]	@ (8011fe8 <__pow5mult+0xa8>)
 8011f52:	3a01      	subs	r2, #1
 8011f54:	2300      	movs	r3, #0
 8011f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011f5a:	f7ff fea7 	bl	8011cac <__multadd>
 8011f5e:	4606      	mov	r6, r0
 8011f60:	10ad      	asrs	r5, r5, #2
 8011f62:	d03d      	beq.n	8011fe0 <__pow5mult+0xa0>
 8011f64:	69fc      	ldr	r4, [r7, #28]
 8011f66:	b97c      	cbnz	r4, 8011f88 <__pow5mult+0x48>
 8011f68:	2010      	movs	r0, #16
 8011f6a:	f7fd ffaf 	bl	800fecc <malloc>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	61f8      	str	r0, [r7, #28]
 8011f72:	b928      	cbnz	r0, 8011f80 <__pow5mult+0x40>
 8011f74:	4b1d      	ldr	r3, [pc, #116]	@ (8011fec <__pow5mult+0xac>)
 8011f76:	481e      	ldr	r0, [pc, #120]	@ (8011ff0 <__pow5mult+0xb0>)
 8011f78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011f7c:	f000 fc6e 	bl	801285c <__assert_func>
 8011f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f84:	6004      	str	r4, [r0, #0]
 8011f86:	60c4      	str	r4, [r0, #12]
 8011f88:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f90:	b94c      	cbnz	r4, 8011fa6 <__pow5mult+0x66>
 8011f92:	f240 2171 	movw	r1, #625	@ 0x271
 8011f96:	4638      	mov	r0, r7
 8011f98:	f7ff ff1a 	bl	8011dd0 <__i2b>
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	6003      	str	r3, [r0, #0]
 8011fa6:	f04f 0900 	mov.w	r9, #0
 8011faa:	07eb      	lsls	r3, r5, #31
 8011fac:	d50a      	bpl.n	8011fc4 <__pow5mult+0x84>
 8011fae:	4631      	mov	r1, r6
 8011fb0:	4622      	mov	r2, r4
 8011fb2:	4638      	mov	r0, r7
 8011fb4:	f7ff ff22 	bl	8011dfc <__multiply>
 8011fb8:	4631      	mov	r1, r6
 8011fba:	4680      	mov	r8, r0
 8011fbc:	4638      	mov	r0, r7
 8011fbe:	f7ff fe53 	bl	8011c68 <_Bfree>
 8011fc2:	4646      	mov	r6, r8
 8011fc4:	106d      	asrs	r5, r5, #1
 8011fc6:	d00b      	beq.n	8011fe0 <__pow5mult+0xa0>
 8011fc8:	6820      	ldr	r0, [r4, #0]
 8011fca:	b938      	cbnz	r0, 8011fdc <__pow5mult+0x9c>
 8011fcc:	4622      	mov	r2, r4
 8011fce:	4621      	mov	r1, r4
 8011fd0:	4638      	mov	r0, r7
 8011fd2:	f7ff ff13 	bl	8011dfc <__multiply>
 8011fd6:	6020      	str	r0, [r4, #0]
 8011fd8:	f8c0 9000 	str.w	r9, [r0]
 8011fdc:	4604      	mov	r4, r0
 8011fde:	e7e4      	b.n	8011faa <__pow5mult+0x6a>
 8011fe0:	4630      	mov	r0, r6
 8011fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fe6:	bf00      	nop
 8011fe8:	08016a98 	.word	0x08016a98
 8011fec:	08016970 	.word	0x08016970
 8011ff0:	080169f0 	.word	0x080169f0

08011ff4 <__lshift>:
 8011ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ff8:	460c      	mov	r4, r1
 8011ffa:	6849      	ldr	r1, [r1, #4]
 8011ffc:	6923      	ldr	r3, [r4, #16]
 8011ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012002:	68a3      	ldr	r3, [r4, #8]
 8012004:	4607      	mov	r7, r0
 8012006:	4691      	mov	r9, r2
 8012008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801200c:	f108 0601 	add.w	r6, r8, #1
 8012010:	42b3      	cmp	r3, r6
 8012012:	db0b      	blt.n	801202c <__lshift+0x38>
 8012014:	4638      	mov	r0, r7
 8012016:	f7ff fde7 	bl	8011be8 <_Balloc>
 801201a:	4605      	mov	r5, r0
 801201c:	b948      	cbnz	r0, 8012032 <__lshift+0x3e>
 801201e:	4602      	mov	r2, r0
 8012020:	4b28      	ldr	r3, [pc, #160]	@ (80120c4 <__lshift+0xd0>)
 8012022:	4829      	ldr	r0, [pc, #164]	@ (80120c8 <__lshift+0xd4>)
 8012024:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012028:	f000 fc18 	bl	801285c <__assert_func>
 801202c:	3101      	adds	r1, #1
 801202e:	005b      	lsls	r3, r3, #1
 8012030:	e7ee      	b.n	8012010 <__lshift+0x1c>
 8012032:	2300      	movs	r3, #0
 8012034:	f100 0114 	add.w	r1, r0, #20
 8012038:	f100 0210 	add.w	r2, r0, #16
 801203c:	4618      	mov	r0, r3
 801203e:	4553      	cmp	r3, sl
 8012040:	db33      	blt.n	80120aa <__lshift+0xb6>
 8012042:	6920      	ldr	r0, [r4, #16]
 8012044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012048:	f104 0314 	add.w	r3, r4, #20
 801204c:	f019 091f 	ands.w	r9, r9, #31
 8012050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012058:	d02b      	beq.n	80120b2 <__lshift+0xbe>
 801205a:	f1c9 0e20 	rsb	lr, r9, #32
 801205e:	468a      	mov	sl, r1
 8012060:	2200      	movs	r2, #0
 8012062:	6818      	ldr	r0, [r3, #0]
 8012064:	fa00 f009 	lsl.w	r0, r0, r9
 8012068:	4310      	orrs	r0, r2
 801206a:	f84a 0b04 	str.w	r0, [sl], #4
 801206e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012072:	459c      	cmp	ip, r3
 8012074:	fa22 f20e 	lsr.w	r2, r2, lr
 8012078:	d8f3      	bhi.n	8012062 <__lshift+0x6e>
 801207a:	ebac 0304 	sub.w	r3, ip, r4
 801207e:	3b15      	subs	r3, #21
 8012080:	f023 0303 	bic.w	r3, r3, #3
 8012084:	3304      	adds	r3, #4
 8012086:	f104 0015 	add.w	r0, r4, #21
 801208a:	4560      	cmp	r0, ip
 801208c:	bf88      	it	hi
 801208e:	2304      	movhi	r3, #4
 8012090:	50ca      	str	r2, [r1, r3]
 8012092:	b10a      	cbz	r2, 8012098 <__lshift+0xa4>
 8012094:	f108 0602 	add.w	r6, r8, #2
 8012098:	3e01      	subs	r6, #1
 801209a:	4638      	mov	r0, r7
 801209c:	612e      	str	r6, [r5, #16]
 801209e:	4621      	mov	r1, r4
 80120a0:	f7ff fde2 	bl	8011c68 <_Bfree>
 80120a4:	4628      	mov	r0, r5
 80120a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80120ae:	3301      	adds	r3, #1
 80120b0:	e7c5      	b.n	801203e <__lshift+0x4a>
 80120b2:	3904      	subs	r1, #4
 80120b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80120b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80120bc:	459c      	cmp	ip, r3
 80120be:	d8f9      	bhi.n	80120b4 <__lshift+0xc0>
 80120c0:	e7ea      	b.n	8012098 <__lshift+0xa4>
 80120c2:	bf00      	nop
 80120c4:	080169df 	.word	0x080169df
 80120c8:	080169f0 	.word	0x080169f0

080120cc <__mcmp>:
 80120cc:	690a      	ldr	r2, [r1, #16]
 80120ce:	4603      	mov	r3, r0
 80120d0:	6900      	ldr	r0, [r0, #16]
 80120d2:	1a80      	subs	r0, r0, r2
 80120d4:	b530      	push	{r4, r5, lr}
 80120d6:	d10e      	bne.n	80120f6 <__mcmp+0x2a>
 80120d8:	3314      	adds	r3, #20
 80120da:	3114      	adds	r1, #20
 80120dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80120e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80120e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80120e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80120ec:	4295      	cmp	r5, r2
 80120ee:	d003      	beq.n	80120f8 <__mcmp+0x2c>
 80120f0:	d205      	bcs.n	80120fe <__mcmp+0x32>
 80120f2:	f04f 30ff 	mov.w	r0, #4294967295
 80120f6:	bd30      	pop	{r4, r5, pc}
 80120f8:	42a3      	cmp	r3, r4
 80120fa:	d3f3      	bcc.n	80120e4 <__mcmp+0x18>
 80120fc:	e7fb      	b.n	80120f6 <__mcmp+0x2a>
 80120fe:	2001      	movs	r0, #1
 8012100:	e7f9      	b.n	80120f6 <__mcmp+0x2a>
	...

08012104 <__mdiff>:
 8012104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	4689      	mov	r9, r1
 801210a:	4606      	mov	r6, r0
 801210c:	4611      	mov	r1, r2
 801210e:	4648      	mov	r0, r9
 8012110:	4614      	mov	r4, r2
 8012112:	f7ff ffdb 	bl	80120cc <__mcmp>
 8012116:	1e05      	subs	r5, r0, #0
 8012118:	d112      	bne.n	8012140 <__mdiff+0x3c>
 801211a:	4629      	mov	r1, r5
 801211c:	4630      	mov	r0, r6
 801211e:	f7ff fd63 	bl	8011be8 <_Balloc>
 8012122:	4602      	mov	r2, r0
 8012124:	b928      	cbnz	r0, 8012132 <__mdiff+0x2e>
 8012126:	4b3f      	ldr	r3, [pc, #252]	@ (8012224 <__mdiff+0x120>)
 8012128:	f240 2137 	movw	r1, #567	@ 0x237
 801212c:	483e      	ldr	r0, [pc, #248]	@ (8012228 <__mdiff+0x124>)
 801212e:	f000 fb95 	bl	801285c <__assert_func>
 8012132:	2301      	movs	r3, #1
 8012134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012138:	4610      	mov	r0, r2
 801213a:	b003      	add	sp, #12
 801213c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012140:	bfbc      	itt	lt
 8012142:	464b      	movlt	r3, r9
 8012144:	46a1      	movlt	r9, r4
 8012146:	4630      	mov	r0, r6
 8012148:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801214c:	bfba      	itte	lt
 801214e:	461c      	movlt	r4, r3
 8012150:	2501      	movlt	r5, #1
 8012152:	2500      	movge	r5, #0
 8012154:	f7ff fd48 	bl	8011be8 <_Balloc>
 8012158:	4602      	mov	r2, r0
 801215a:	b918      	cbnz	r0, 8012164 <__mdiff+0x60>
 801215c:	4b31      	ldr	r3, [pc, #196]	@ (8012224 <__mdiff+0x120>)
 801215e:	f240 2145 	movw	r1, #581	@ 0x245
 8012162:	e7e3      	b.n	801212c <__mdiff+0x28>
 8012164:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012168:	6926      	ldr	r6, [r4, #16]
 801216a:	60c5      	str	r5, [r0, #12]
 801216c:	f109 0310 	add.w	r3, r9, #16
 8012170:	f109 0514 	add.w	r5, r9, #20
 8012174:	f104 0e14 	add.w	lr, r4, #20
 8012178:	f100 0b14 	add.w	fp, r0, #20
 801217c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012180:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012184:	9301      	str	r3, [sp, #4]
 8012186:	46d9      	mov	r9, fp
 8012188:	f04f 0c00 	mov.w	ip, #0
 801218c:	9b01      	ldr	r3, [sp, #4]
 801218e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012192:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012196:	9301      	str	r3, [sp, #4]
 8012198:	fa1f f38a 	uxth.w	r3, sl
 801219c:	4619      	mov	r1, r3
 801219e:	b283      	uxth	r3, r0
 80121a0:	1acb      	subs	r3, r1, r3
 80121a2:	0c00      	lsrs	r0, r0, #16
 80121a4:	4463      	add	r3, ip
 80121a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80121aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80121b4:	4576      	cmp	r6, lr
 80121b6:	f849 3b04 	str.w	r3, [r9], #4
 80121ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80121be:	d8e5      	bhi.n	801218c <__mdiff+0x88>
 80121c0:	1b33      	subs	r3, r6, r4
 80121c2:	3b15      	subs	r3, #21
 80121c4:	f023 0303 	bic.w	r3, r3, #3
 80121c8:	3415      	adds	r4, #21
 80121ca:	3304      	adds	r3, #4
 80121cc:	42a6      	cmp	r6, r4
 80121ce:	bf38      	it	cc
 80121d0:	2304      	movcc	r3, #4
 80121d2:	441d      	add	r5, r3
 80121d4:	445b      	add	r3, fp
 80121d6:	461e      	mov	r6, r3
 80121d8:	462c      	mov	r4, r5
 80121da:	4544      	cmp	r4, r8
 80121dc:	d30e      	bcc.n	80121fc <__mdiff+0xf8>
 80121de:	f108 0103 	add.w	r1, r8, #3
 80121e2:	1b49      	subs	r1, r1, r5
 80121e4:	f021 0103 	bic.w	r1, r1, #3
 80121e8:	3d03      	subs	r5, #3
 80121ea:	45a8      	cmp	r8, r5
 80121ec:	bf38      	it	cc
 80121ee:	2100      	movcc	r1, #0
 80121f0:	440b      	add	r3, r1
 80121f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80121f6:	b191      	cbz	r1, 801221e <__mdiff+0x11a>
 80121f8:	6117      	str	r7, [r2, #16]
 80121fa:	e79d      	b.n	8012138 <__mdiff+0x34>
 80121fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8012200:	46e6      	mov	lr, ip
 8012202:	0c08      	lsrs	r0, r1, #16
 8012204:	fa1c fc81 	uxtah	ip, ip, r1
 8012208:	4471      	add	r1, lr
 801220a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801220e:	b289      	uxth	r1, r1
 8012210:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012214:	f846 1b04 	str.w	r1, [r6], #4
 8012218:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801221c:	e7dd      	b.n	80121da <__mdiff+0xd6>
 801221e:	3f01      	subs	r7, #1
 8012220:	e7e7      	b.n	80121f2 <__mdiff+0xee>
 8012222:	bf00      	nop
 8012224:	080169df 	.word	0x080169df
 8012228:	080169f0 	.word	0x080169f0

0801222c <__d2b>:
 801222c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012230:	460f      	mov	r7, r1
 8012232:	2101      	movs	r1, #1
 8012234:	ec59 8b10 	vmov	r8, r9, d0
 8012238:	4616      	mov	r6, r2
 801223a:	f7ff fcd5 	bl	8011be8 <_Balloc>
 801223e:	4604      	mov	r4, r0
 8012240:	b930      	cbnz	r0, 8012250 <__d2b+0x24>
 8012242:	4602      	mov	r2, r0
 8012244:	4b23      	ldr	r3, [pc, #140]	@ (80122d4 <__d2b+0xa8>)
 8012246:	4824      	ldr	r0, [pc, #144]	@ (80122d8 <__d2b+0xac>)
 8012248:	f240 310f 	movw	r1, #783	@ 0x30f
 801224c:	f000 fb06 	bl	801285c <__assert_func>
 8012250:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012254:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012258:	b10d      	cbz	r5, 801225e <__d2b+0x32>
 801225a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801225e:	9301      	str	r3, [sp, #4]
 8012260:	f1b8 0300 	subs.w	r3, r8, #0
 8012264:	d023      	beq.n	80122ae <__d2b+0x82>
 8012266:	4668      	mov	r0, sp
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	f7ff fd84 	bl	8011d76 <__lo0bits>
 801226e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012272:	b1d0      	cbz	r0, 80122aa <__d2b+0x7e>
 8012274:	f1c0 0320 	rsb	r3, r0, #32
 8012278:	fa02 f303 	lsl.w	r3, r2, r3
 801227c:	430b      	orrs	r3, r1
 801227e:	40c2      	lsrs	r2, r0
 8012280:	6163      	str	r3, [r4, #20]
 8012282:	9201      	str	r2, [sp, #4]
 8012284:	9b01      	ldr	r3, [sp, #4]
 8012286:	61a3      	str	r3, [r4, #24]
 8012288:	2b00      	cmp	r3, #0
 801228a:	bf0c      	ite	eq
 801228c:	2201      	moveq	r2, #1
 801228e:	2202      	movne	r2, #2
 8012290:	6122      	str	r2, [r4, #16]
 8012292:	b1a5      	cbz	r5, 80122be <__d2b+0x92>
 8012294:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012298:	4405      	add	r5, r0
 801229a:	603d      	str	r5, [r7, #0]
 801229c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80122a0:	6030      	str	r0, [r6, #0]
 80122a2:	4620      	mov	r0, r4
 80122a4:	b003      	add	sp, #12
 80122a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80122aa:	6161      	str	r1, [r4, #20]
 80122ac:	e7ea      	b.n	8012284 <__d2b+0x58>
 80122ae:	a801      	add	r0, sp, #4
 80122b0:	f7ff fd61 	bl	8011d76 <__lo0bits>
 80122b4:	9b01      	ldr	r3, [sp, #4]
 80122b6:	6163      	str	r3, [r4, #20]
 80122b8:	3020      	adds	r0, #32
 80122ba:	2201      	movs	r2, #1
 80122bc:	e7e8      	b.n	8012290 <__d2b+0x64>
 80122be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80122c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80122c6:	6038      	str	r0, [r7, #0]
 80122c8:	6918      	ldr	r0, [r3, #16]
 80122ca:	f7ff fd35 	bl	8011d38 <__hi0bits>
 80122ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80122d2:	e7e5      	b.n	80122a0 <__d2b+0x74>
 80122d4:	080169df 	.word	0x080169df
 80122d8:	080169f0 	.word	0x080169f0

080122dc <__ascii_wctomb>:
 80122dc:	4603      	mov	r3, r0
 80122de:	4608      	mov	r0, r1
 80122e0:	b141      	cbz	r1, 80122f4 <__ascii_wctomb+0x18>
 80122e2:	2aff      	cmp	r2, #255	@ 0xff
 80122e4:	d904      	bls.n	80122f0 <__ascii_wctomb+0x14>
 80122e6:	228a      	movs	r2, #138	@ 0x8a
 80122e8:	601a      	str	r2, [r3, #0]
 80122ea:	f04f 30ff 	mov.w	r0, #4294967295
 80122ee:	4770      	bx	lr
 80122f0:	700a      	strb	r2, [r1, #0]
 80122f2:	2001      	movs	r0, #1
 80122f4:	4770      	bx	lr

080122f6 <__sfputc_r>:
 80122f6:	6893      	ldr	r3, [r2, #8]
 80122f8:	3b01      	subs	r3, #1
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	b410      	push	{r4}
 80122fe:	6093      	str	r3, [r2, #8]
 8012300:	da08      	bge.n	8012314 <__sfputc_r+0x1e>
 8012302:	6994      	ldr	r4, [r2, #24]
 8012304:	42a3      	cmp	r3, r4
 8012306:	db01      	blt.n	801230c <__sfputc_r+0x16>
 8012308:	290a      	cmp	r1, #10
 801230a:	d103      	bne.n	8012314 <__sfputc_r+0x1e>
 801230c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012310:	f7fe bc65 	b.w	8010bde <__swbuf_r>
 8012314:	6813      	ldr	r3, [r2, #0]
 8012316:	1c58      	adds	r0, r3, #1
 8012318:	6010      	str	r0, [r2, #0]
 801231a:	7019      	strb	r1, [r3, #0]
 801231c:	4608      	mov	r0, r1
 801231e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012322:	4770      	bx	lr

08012324 <__sfputs_r>:
 8012324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012326:	4606      	mov	r6, r0
 8012328:	460f      	mov	r7, r1
 801232a:	4614      	mov	r4, r2
 801232c:	18d5      	adds	r5, r2, r3
 801232e:	42ac      	cmp	r4, r5
 8012330:	d101      	bne.n	8012336 <__sfputs_r+0x12>
 8012332:	2000      	movs	r0, #0
 8012334:	e007      	b.n	8012346 <__sfputs_r+0x22>
 8012336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801233a:	463a      	mov	r2, r7
 801233c:	4630      	mov	r0, r6
 801233e:	f7ff ffda 	bl	80122f6 <__sfputc_r>
 8012342:	1c43      	adds	r3, r0, #1
 8012344:	d1f3      	bne.n	801232e <__sfputs_r+0xa>
 8012346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012348 <_vfiprintf_r>:
 8012348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801234c:	460d      	mov	r5, r1
 801234e:	b09d      	sub	sp, #116	@ 0x74
 8012350:	4614      	mov	r4, r2
 8012352:	4698      	mov	r8, r3
 8012354:	4606      	mov	r6, r0
 8012356:	b118      	cbz	r0, 8012360 <_vfiprintf_r+0x18>
 8012358:	6a03      	ldr	r3, [r0, #32]
 801235a:	b90b      	cbnz	r3, 8012360 <_vfiprintf_r+0x18>
 801235c:	f7fe fb4e 	bl	80109fc <__sinit>
 8012360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012362:	07d9      	lsls	r1, r3, #31
 8012364:	d405      	bmi.n	8012372 <_vfiprintf_r+0x2a>
 8012366:	89ab      	ldrh	r3, [r5, #12]
 8012368:	059a      	lsls	r2, r3, #22
 801236a:	d402      	bmi.n	8012372 <_vfiprintf_r+0x2a>
 801236c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801236e:	f7fe fd6e 	bl	8010e4e <__retarget_lock_acquire_recursive>
 8012372:	89ab      	ldrh	r3, [r5, #12]
 8012374:	071b      	lsls	r3, r3, #28
 8012376:	d501      	bpl.n	801237c <_vfiprintf_r+0x34>
 8012378:	692b      	ldr	r3, [r5, #16]
 801237a:	b99b      	cbnz	r3, 80123a4 <_vfiprintf_r+0x5c>
 801237c:	4629      	mov	r1, r5
 801237e:	4630      	mov	r0, r6
 8012380:	f7fe fc6c 	bl	8010c5c <__swsetup_r>
 8012384:	b170      	cbz	r0, 80123a4 <_vfiprintf_r+0x5c>
 8012386:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012388:	07dc      	lsls	r4, r3, #31
 801238a:	d504      	bpl.n	8012396 <_vfiprintf_r+0x4e>
 801238c:	f04f 30ff 	mov.w	r0, #4294967295
 8012390:	b01d      	add	sp, #116	@ 0x74
 8012392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012396:	89ab      	ldrh	r3, [r5, #12]
 8012398:	0598      	lsls	r0, r3, #22
 801239a:	d4f7      	bmi.n	801238c <_vfiprintf_r+0x44>
 801239c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801239e:	f7fe fd57 	bl	8010e50 <__retarget_lock_release_recursive>
 80123a2:	e7f3      	b.n	801238c <_vfiprintf_r+0x44>
 80123a4:	2300      	movs	r3, #0
 80123a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80123a8:	2320      	movs	r3, #32
 80123aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80123ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80123b2:	2330      	movs	r3, #48	@ 0x30
 80123b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012564 <_vfiprintf_r+0x21c>
 80123b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80123bc:	f04f 0901 	mov.w	r9, #1
 80123c0:	4623      	mov	r3, r4
 80123c2:	469a      	mov	sl, r3
 80123c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80123c8:	b10a      	cbz	r2, 80123ce <_vfiprintf_r+0x86>
 80123ca:	2a25      	cmp	r2, #37	@ 0x25
 80123cc:	d1f9      	bne.n	80123c2 <_vfiprintf_r+0x7a>
 80123ce:	ebba 0b04 	subs.w	fp, sl, r4
 80123d2:	d00b      	beq.n	80123ec <_vfiprintf_r+0xa4>
 80123d4:	465b      	mov	r3, fp
 80123d6:	4622      	mov	r2, r4
 80123d8:	4629      	mov	r1, r5
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ff ffa2 	bl	8012324 <__sfputs_r>
 80123e0:	3001      	adds	r0, #1
 80123e2:	f000 80a7 	beq.w	8012534 <_vfiprintf_r+0x1ec>
 80123e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123e8:	445a      	add	r2, fp
 80123ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80123ec:	f89a 3000 	ldrb.w	r3, [sl]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	f000 809f 	beq.w	8012534 <_vfiprintf_r+0x1ec>
 80123f6:	2300      	movs	r3, #0
 80123f8:	f04f 32ff 	mov.w	r2, #4294967295
 80123fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012400:	f10a 0a01 	add.w	sl, sl, #1
 8012404:	9304      	str	r3, [sp, #16]
 8012406:	9307      	str	r3, [sp, #28]
 8012408:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801240c:	931a      	str	r3, [sp, #104]	@ 0x68
 801240e:	4654      	mov	r4, sl
 8012410:	2205      	movs	r2, #5
 8012412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012416:	4853      	ldr	r0, [pc, #332]	@ (8012564 <_vfiprintf_r+0x21c>)
 8012418:	f7ed feb2 	bl	8000180 <memchr>
 801241c:	9a04      	ldr	r2, [sp, #16]
 801241e:	b9d8      	cbnz	r0, 8012458 <_vfiprintf_r+0x110>
 8012420:	06d1      	lsls	r1, r2, #27
 8012422:	bf44      	itt	mi
 8012424:	2320      	movmi	r3, #32
 8012426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801242a:	0713      	lsls	r3, r2, #28
 801242c:	bf44      	itt	mi
 801242e:	232b      	movmi	r3, #43	@ 0x2b
 8012430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012434:	f89a 3000 	ldrb.w	r3, [sl]
 8012438:	2b2a      	cmp	r3, #42	@ 0x2a
 801243a:	d015      	beq.n	8012468 <_vfiprintf_r+0x120>
 801243c:	9a07      	ldr	r2, [sp, #28]
 801243e:	4654      	mov	r4, sl
 8012440:	2000      	movs	r0, #0
 8012442:	f04f 0c0a 	mov.w	ip, #10
 8012446:	4621      	mov	r1, r4
 8012448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801244c:	3b30      	subs	r3, #48	@ 0x30
 801244e:	2b09      	cmp	r3, #9
 8012450:	d94b      	bls.n	80124ea <_vfiprintf_r+0x1a2>
 8012452:	b1b0      	cbz	r0, 8012482 <_vfiprintf_r+0x13a>
 8012454:	9207      	str	r2, [sp, #28]
 8012456:	e014      	b.n	8012482 <_vfiprintf_r+0x13a>
 8012458:	eba0 0308 	sub.w	r3, r0, r8
 801245c:	fa09 f303 	lsl.w	r3, r9, r3
 8012460:	4313      	orrs	r3, r2
 8012462:	9304      	str	r3, [sp, #16]
 8012464:	46a2      	mov	sl, r4
 8012466:	e7d2      	b.n	801240e <_vfiprintf_r+0xc6>
 8012468:	9b03      	ldr	r3, [sp, #12]
 801246a:	1d19      	adds	r1, r3, #4
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	9103      	str	r1, [sp, #12]
 8012470:	2b00      	cmp	r3, #0
 8012472:	bfbb      	ittet	lt
 8012474:	425b      	neglt	r3, r3
 8012476:	f042 0202 	orrlt.w	r2, r2, #2
 801247a:	9307      	strge	r3, [sp, #28]
 801247c:	9307      	strlt	r3, [sp, #28]
 801247e:	bfb8      	it	lt
 8012480:	9204      	strlt	r2, [sp, #16]
 8012482:	7823      	ldrb	r3, [r4, #0]
 8012484:	2b2e      	cmp	r3, #46	@ 0x2e
 8012486:	d10a      	bne.n	801249e <_vfiprintf_r+0x156>
 8012488:	7863      	ldrb	r3, [r4, #1]
 801248a:	2b2a      	cmp	r3, #42	@ 0x2a
 801248c:	d132      	bne.n	80124f4 <_vfiprintf_r+0x1ac>
 801248e:	9b03      	ldr	r3, [sp, #12]
 8012490:	1d1a      	adds	r2, r3, #4
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	9203      	str	r2, [sp, #12]
 8012496:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801249a:	3402      	adds	r4, #2
 801249c:	9305      	str	r3, [sp, #20]
 801249e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012574 <_vfiprintf_r+0x22c>
 80124a2:	7821      	ldrb	r1, [r4, #0]
 80124a4:	2203      	movs	r2, #3
 80124a6:	4650      	mov	r0, sl
 80124a8:	f7ed fe6a 	bl	8000180 <memchr>
 80124ac:	b138      	cbz	r0, 80124be <_vfiprintf_r+0x176>
 80124ae:	9b04      	ldr	r3, [sp, #16]
 80124b0:	eba0 000a 	sub.w	r0, r0, sl
 80124b4:	2240      	movs	r2, #64	@ 0x40
 80124b6:	4082      	lsls	r2, r0
 80124b8:	4313      	orrs	r3, r2
 80124ba:	3401      	adds	r4, #1
 80124bc:	9304      	str	r3, [sp, #16]
 80124be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124c2:	4829      	ldr	r0, [pc, #164]	@ (8012568 <_vfiprintf_r+0x220>)
 80124c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80124c8:	2206      	movs	r2, #6
 80124ca:	f7ed fe59 	bl	8000180 <memchr>
 80124ce:	2800      	cmp	r0, #0
 80124d0:	d03f      	beq.n	8012552 <_vfiprintf_r+0x20a>
 80124d2:	4b26      	ldr	r3, [pc, #152]	@ (801256c <_vfiprintf_r+0x224>)
 80124d4:	bb1b      	cbnz	r3, 801251e <_vfiprintf_r+0x1d6>
 80124d6:	9b03      	ldr	r3, [sp, #12]
 80124d8:	3307      	adds	r3, #7
 80124da:	f023 0307 	bic.w	r3, r3, #7
 80124de:	3308      	adds	r3, #8
 80124e0:	9303      	str	r3, [sp, #12]
 80124e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80124e4:	443b      	add	r3, r7
 80124e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80124e8:	e76a      	b.n	80123c0 <_vfiprintf_r+0x78>
 80124ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80124ee:	460c      	mov	r4, r1
 80124f0:	2001      	movs	r0, #1
 80124f2:	e7a8      	b.n	8012446 <_vfiprintf_r+0xfe>
 80124f4:	2300      	movs	r3, #0
 80124f6:	3401      	adds	r4, #1
 80124f8:	9305      	str	r3, [sp, #20]
 80124fa:	4619      	mov	r1, r3
 80124fc:	f04f 0c0a 	mov.w	ip, #10
 8012500:	4620      	mov	r0, r4
 8012502:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012506:	3a30      	subs	r2, #48	@ 0x30
 8012508:	2a09      	cmp	r2, #9
 801250a:	d903      	bls.n	8012514 <_vfiprintf_r+0x1cc>
 801250c:	2b00      	cmp	r3, #0
 801250e:	d0c6      	beq.n	801249e <_vfiprintf_r+0x156>
 8012510:	9105      	str	r1, [sp, #20]
 8012512:	e7c4      	b.n	801249e <_vfiprintf_r+0x156>
 8012514:	fb0c 2101 	mla	r1, ip, r1, r2
 8012518:	4604      	mov	r4, r0
 801251a:	2301      	movs	r3, #1
 801251c:	e7f0      	b.n	8012500 <_vfiprintf_r+0x1b8>
 801251e:	ab03      	add	r3, sp, #12
 8012520:	9300      	str	r3, [sp, #0]
 8012522:	462a      	mov	r2, r5
 8012524:	4b12      	ldr	r3, [pc, #72]	@ (8012570 <_vfiprintf_r+0x228>)
 8012526:	a904      	add	r1, sp, #16
 8012528:	4630      	mov	r0, r6
 801252a:	f7fd fe25 	bl	8010178 <_printf_float>
 801252e:	4607      	mov	r7, r0
 8012530:	1c78      	adds	r0, r7, #1
 8012532:	d1d6      	bne.n	80124e2 <_vfiprintf_r+0x19a>
 8012534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012536:	07d9      	lsls	r1, r3, #31
 8012538:	d405      	bmi.n	8012546 <_vfiprintf_r+0x1fe>
 801253a:	89ab      	ldrh	r3, [r5, #12]
 801253c:	059a      	lsls	r2, r3, #22
 801253e:	d402      	bmi.n	8012546 <_vfiprintf_r+0x1fe>
 8012540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012542:	f7fe fc85 	bl	8010e50 <__retarget_lock_release_recursive>
 8012546:	89ab      	ldrh	r3, [r5, #12]
 8012548:	065b      	lsls	r3, r3, #25
 801254a:	f53f af1f 	bmi.w	801238c <_vfiprintf_r+0x44>
 801254e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012550:	e71e      	b.n	8012390 <_vfiprintf_r+0x48>
 8012552:	ab03      	add	r3, sp, #12
 8012554:	9300      	str	r3, [sp, #0]
 8012556:	462a      	mov	r2, r5
 8012558:	4b05      	ldr	r3, [pc, #20]	@ (8012570 <_vfiprintf_r+0x228>)
 801255a:	a904      	add	r1, sp, #16
 801255c:	4630      	mov	r0, r6
 801255e:	f7fe f8a3 	bl	80106a8 <_printf_i>
 8012562:	e7e4      	b.n	801252e <_vfiprintf_r+0x1e6>
 8012564:	08016a49 	.word	0x08016a49
 8012568:	08016a53 	.word	0x08016a53
 801256c:	08010179 	.word	0x08010179
 8012570:	08012325 	.word	0x08012325
 8012574:	08016a4f 	.word	0x08016a4f

08012578 <__sflush_r>:
 8012578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801257c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012580:	0716      	lsls	r6, r2, #28
 8012582:	4605      	mov	r5, r0
 8012584:	460c      	mov	r4, r1
 8012586:	d454      	bmi.n	8012632 <__sflush_r+0xba>
 8012588:	684b      	ldr	r3, [r1, #4]
 801258a:	2b00      	cmp	r3, #0
 801258c:	dc02      	bgt.n	8012594 <__sflush_r+0x1c>
 801258e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012590:	2b00      	cmp	r3, #0
 8012592:	dd48      	ble.n	8012626 <__sflush_r+0xae>
 8012594:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012596:	2e00      	cmp	r6, #0
 8012598:	d045      	beq.n	8012626 <__sflush_r+0xae>
 801259a:	2300      	movs	r3, #0
 801259c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80125a0:	682f      	ldr	r7, [r5, #0]
 80125a2:	6a21      	ldr	r1, [r4, #32]
 80125a4:	602b      	str	r3, [r5, #0]
 80125a6:	d030      	beq.n	801260a <__sflush_r+0x92>
 80125a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80125aa:	89a3      	ldrh	r3, [r4, #12]
 80125ac:	0759      	lsls	r1, r3, #29
 80125ae:	d505      	bpl.n	80125bc <__sflush_r+0x44>
 80125b0:	6863      	ldr	r3, [r4, #4]
 80125b2:	1ad2      	subs	r2, r2, r3
 80125b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80125b6:	b10b      	cbz	r3, 80125bc <__sflush_r+0x44>
 80125b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80125ba:	1ad2      	subs	r2, r2, r3
 80125bc:	2300      	movs	r3, #0
 80125be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80125c0:	6a21      	ldr	r1, [r4, #32]
 80125c2:	4628      	mov	r0, r5
 80125c4:	47b0      	blx	r6
 80125c6:	1c43      	adds	r3, r0, #1
 80125c8:	89a3      	ldrh	r3, [r4, #12]
 80125ca:	d106      	bne.n	80125da <__sflush_r+0x62>
 80125cc:	6829      	ldr	r1, [r5, #0]
 80125ce:	291d      	cmp	r1, #29
 80125d0:	d82b      	bhi.n	801262a <__sflush_r+0xb2>
 80125d2:	4a2a      	ldr	r2, [pc, #168]	@ (801267c <__sflush_r+0x104>)
 80125d4:	40ca      	lsrs	r2, r1
 80125d6:	07d6      	lsls	r6, r2, #31
 80125d8:	d527      	bpl.n	801262a <__sflush_r+0xb2>
 80125da:	2200      	movs	r2, #0
 80125dc:	6062      	str	r2, [r4, #4]
 80125de:	04d9      	lsls	r1, r3, #19
 80125e0:	6922      	ldr	r2, [r4, #16]
 80125e2:	6022      	str	r2, [r4, #0]
 80125e4:	d504      	bpl.n	80125f0 <__sflush_r+0x78>
 80125e6:	1c42      	adds	r2, r0, #1
 80125e8:	d101      	bne.n	80125ee <__sflush_r+0x76>
 80125ea:	682b      	ldr	r3, [r5, #0]
 80125ec:	b903      	cbnz	r3, 80125f0 <__sflush_r+0x78>
 80125ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80125f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125f2:	602f      	str	r7, [r5, #0]
 80125f4:	b1b9      	cbz	r1, 8012626 <__sflush_r+0xae>
 80125f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125fa:	4299      	cmp	r1, r3
 80125fc:	d002      	beq.n	8012604 <__sflush_r+0x8c>
 80125fe:	4628      	mov	r0, r5
 8012600:	f7ff fa96 	bl	8011b30 <_free_r>
 8012604:	2300      	movs	r3, #0
 8012606:	6363      	str	r3, [r4, #52]	@ 0x34
 8012608:	e00d      	b.n	8012626 <__sflush_r+0xae>
 801260a:	2301      	movs	r3, #1
 801260c:	4628      	mov	r0, r5
 801260e:	47b0      	blx	r6
 8012610:	4602      	mov	r2, r0
 8012612:	1c50      	adds	r0, r2, #1
 8012614:	d1c9      	bne.n	80125aa <__sflush_r+0x32>
 8012616:	682b      	ldr	r3, [r5, #0]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d0c6      	beq.n	80125aa <__sflush_r+0x32>
 801261c:	2b1d      	cmp	r3, #29
 801261e:	d001      	beq.n	8012624 <__sflush_r+0xac>
 8012620:	2b16      	cmp	r3, #22
 8012622:	d11e      	bne.n	8012662 <__sflush_r+0xea>
 8012624:	602f      	str	r7, [r5, #0]
 8012626:	2000      	movs	r0, #0
 8012628:	e022      	b.n	8012670 <__sflush_r+0xf8>
 801262a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801262e:	b21b      	sxth	r3, r3
 8012630:	e01b      	b.n	801266a <__sflush_r+0xf2>
 8012632:	690f      	ldr	r7, [r1, #16]
 8012634:	2f00      	cmp	r7, #0
 8012636:	d0f6      	beq.n	8012626 <__sflush_r+0xae>
 8012638:	0793      	lsls	r3, r2, #30
 801263a:	680e      	ldr	r6, [r1, #0]
 801263c:	bf08      	it	eq
 801263e:	694b      	ldreq	r3, [r1, #20]
 8012640:	600f      	str	r7, [r1, #0]
 8012642:	bf18      	it	ne
 8012644:	2300      	movne	r3, #0
 8012646:	eba6 0807 	sub.w	r8, r6, r7
 801264a:	608b      	str	r3, [r1, #8]
 801264c:	f1b8 0f00 	cmp.w	r8, #0
 8012650:	dde9      	ble.n	8012626 <__sflush_r+0xae>
 8012652:	6a21      	ldr	r1, [r4, #32]
 8012654:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012656:	4643      	mov	r3, r8
 8012658:	463a      	mov	r2, r7
 801265a:	4628      	mov	r0, r5
 801265c:	47b0      	blx	r6
 801265e:	2800      	cmp	r0, #0
 8012660:	dc08      	bgt.n	8012674 <__sflush_r+0xfc>
 8012662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801266a:	81a3      	strh	r3, [r4, #12]
 801266c:	f04f 30ff 	mov.w	r0, #4294967295
 8012670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012674:	4407      	add	r7, r0
 8012676:	eba8 0800 	sub.w	r8, r8, r0
 801267a:	e7e7      	b.n	801264c <__sflush_r+0xd4>
 801267c:	20400001 	.word	0x20400001

08012680 <_fflush_r>:
 8012680:	b538      	push	{r3, r4, r5, lr}
 8012682:	690b      	ldr	r3, [r1, #16]
 8012684:	4605      	mov	r5, r0
 8012686:	460c      	mov	r4, r1
 8012688:	b913      	cbnz	r3, 8012690 <_fflush_r+0x10>
 801268a:	2500      	movs	r5, #0
 801268c:	4628      	mov	r0, r5
 801268e:	bd38      	pop	{r3, r4, r5, pc}
 8012690:	b118      	cbz	r0, 801269a <_fflush_r+0x1a>
 8012692:	6a03      	ldr	r3, [r0, #32]
 8012694:	b90b      	cbnz	r3, 801269a <_fflush_r+0x1a>
 8012696:	f7fe f9b1 	bl	80109fc <__sinit>
 801269a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d0f3      	beq.n	801268a <_fflush_r+0xa>
 80126a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80126a4:	07d0      	lsls	r0, r2, #31
 80126a6:	d404      	bmi.n	80126b2 <_fflush_r+0x32>
 80126a8:	0599      	lsls	r1, r3, #22
 80126aa:	d402      	bmi.n	80126b2 <_fflush_r+0x32>
 80126ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126ae:	f7fe fbce 	bl	8010e4e <__retarget_lock_acquire_recursive>
 80126b2:	4628      	mov	r0, r5
 80126b4:	4621      	mov	r1, r4
 80126b6:	f7ff ff5f 	bl	8012578 <__sflush_r>
 80126ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80126bc:	07da      	lsls	r2, r3, #31
 80126be:	4605      	mov	r5, r0
 80126c0:	d4e4      	bmi.n	801268c <_fflush_r+0xc>
 80126c2:	89a3      	ldrh	r3, [r4, #12]
 80126c4:	059b      	lsls	r3, r3, #22
 80126c6:	d4e1      	bmi.n	801268c <_fflush_r+0xc>
 80126c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80126ca:	f7fe fbc1 	bl	8010e50 <__retarget_lock_release_recursive>
 80126ce:	e7dd      	b.n	801268c <_fflush_r+0xc>

080126d0 <__swhatbuf_r>:
 80126d0:	b570      	push	{r4, r5, r6, lr}
 80126d2:	460c      	mov	r4, r1
 80126d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126d8:	2900      	cmp	r1, #0
 80126da:	b096      	sub	sp, #88	@ 0x58
 80126dc:	4615      	mov	r5, r2
 80126de:	461e      	mov	r6, r3
 80126e0:	da0d      	bge.n	80126fe <__swhatbuf_r+0x2e>
 80126e2:	89a3      	ldrh	r3, [r4, #12]
 80126e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80126e8:	f04f 0100 	mov.w	r1, #0
 80126ec:	bf14      	ite	ne
 80126ee:	2340      	movne	r3, #64	@ 0x40
 80126f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80126f4:	2000      	movs	r0, #0
 80126f6:	6031      	str	r1, [r6, #0]
 80126f8:	602b      	str	r3, [r5, #0]
 80126fa:	b016      	add	sp, #88	@ 0x58
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
 80126fe:	466a      	mov	r2, sp
 8012700:	f000 f88a 	bl	8012818 <_fstat_r>
 8012704:	2800      	cmp	r0, #0
 8012706:	dbec      	blt.n	80126e2 <__swhatbuf_r+0x12>
 8012708:	9901      	ldr	r1, [sp, #4]
 801270a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801270e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012712:	4259      	negs	r1, r3
 8012714:	4159      	adcs	r1, r3
 8012716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801271a:	e7eb      	b.n	80126f4 <__swhatbuf_r+0x24>

0801271c <__smakebuf_r>:
 801271c:	898b      	ldrh	r3, [r1, #12]
 801271e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012720:	079d      	lsls	r5, r3, #30
 8012722:	4606      	mov	r6, r0
 8012724:	460c      	mov	r4, r1
 8012726:	d507      	bpl.n	8012738 <__smakebuf_r+0x1c>
 8012728:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801272c:	6023      	str	r3, [r4, #0]
 801272e:	6123      	str	r3, [r4, #16]
 8012730:	2301      	movs	r3, #1
 8012732:	6163      	str	r3, [r4, #20]
 8012734:	b003      	add	sp, #12
 8012736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012738:	ab01      	add	r3, sp, #4
 801273a:	466a      	mov	r2, sp
 801273c:	f7ff ffc8 	bl	80126d0 <__swhatbuf_r>
 8012740:	9f00      	ldr	r7, [sp, #0]
 8012742:	4605      	mov	r5, r0
 8012744:	4639      	mov	r1, r7
 8012746:	4630      	mov	r0, r6
 8012748:	f7fd fbea 	bl	800ff20 <_malloc_r>
 801274c:	b948      	cbnz	r0, 8012762 <__smakebuf_r+0x46>
 801274e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012752:	059a      	lsls	r2, r3, #22
 8012754:	d4ee      	bmi.n	8012734 <__smakebuf_r+0x18>
 8012756:	f023 0303 	bic.w	r3, r3, #3
 801275a:	f043 0302 	orr.w	r3, r3, #2
 801275e:	81a3      	strh	r3, [r4, #12]
 8012760:	e7e2      	b.n	8012728 <__smakebuf_r+0xc>
 8012762:	89a3      	ldrh	r3, [r4, #12]
 8012764:	6020      	str	r0, [r4, #0]
 8012766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801276a:	81a3      	strh	r3, [r4, #12]
 801276c:	9b01      	ldr	r3, [sp, #4]
 801276e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012772:	b15b      	cbz	r3, 801278c <__smakebuf_r+0x70>
 8012774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012778:	4630      	mov	r0, r6
 801277a:	f000 f85f 	bl	801283c <_isatty_r>
 801277e:	b128      	cbz	r0, 801278c <__smakebuf_r+0x70>
 8012780:	89a3      	ldrh	r3, [r4, #12]
 8012782:	f023 0303 	bic.w	r3, r3, #3
 8012786:	f043 0301 	orr.w	r3, r3, #1
 801278a:	81a3      	strh	r3, [r4, #12]
 801278c:	89a3      	ldrh	r3, [r4, #12]
 801278e:	431d      	orrs	r5, r3
 8012790:	81a5      	strh	r5, [r4, #12]
 8012792:	e7cf      	b.n	8012734 <__smakebuf_r+0x18>

08012794 <_putc_r>:
 8012794:	b570      	push	{r4, r5, r6, lr}
 8012796:	460d      	mov	r5, r1
 8012798:	4614      	mov	r4, r2
 801279a:	4606      	mov	r6, r0
 801279c:	b118      	cbz	r0, 80127a6 <_putc_r+0x12>
 801279e:	6a03      	ldr	r3, [r0, #32]
 80127a0:	b90b      	cbnz	r3, 80127a6 <_putc_r+0x12>
 80127a2:	f7fe f92b 	bl	80109fc <__sinit>
 80127a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127a8:	07d8      	lsls	r0, r3, #31
 80127aa:	d405      	bmi.n	80127b8 <_putc_r+0x24>
 80127ac:	89a3      	ldrh	r3, [r4, #12]
 80127ae:	0599      	lsls	r1, r3, #22
 80127b0:	d402      	bmi.n	80127b8 <_putc_r+0x24>
 80127b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127b4:	f7fe fb4b 	bl	8010e4e <__retarget_lock_acquire_recursive>
 80127b8:	68a3      	ldr	r3, [r4, #8]
 80127ba:	3b01      	subs	r3, #1
 80127bc:	2b00      	cmp	r3, #0
 80127be:	60a3      	str	r3, [r4, #8]
 80127c0:	da05      	bge.n	80127ce <_putc_r+0x3a>
 80127c2:	69a2      	ldr	r2, [r4, #24]
 80127c4:	4293      	cmp	r3, r2
 80127c6:	db12      	blt.n	80127ee <_putc_r+0x5a>
 80127c8:	b2eb      	uxtb	r3, r5
 80127ca:	2b0a      	cmp	r3, #10
 80127cc:	d00f      	beq.n	80127ee <_putc_r+0x5a>
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	1c5a      	adds	r2, r3, #1
 80127d2:	6022      	str	r2, [r4, #0]
 80127d4:	701d      	strb	r5, [r3, #0]
 80127d6:	b2ed      	uxtb	r5, r5
 80127d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80127da:	07da      	lsls	r2, r3, #31
 80127dc:	d405      	bmi.n	80127ea <_putc_r+0x56>
 80127de:	89a3      	ldrh	r3, [r4, #12]
 80127e0:	059b      	lsls	r3, r3, #22
 80127e2:	d402      	bmi.n	80127ea <_putc_r+0x56>
 80127e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80127e6:	f7fe fb33 	bl	8010e50 <__retarget_lock_release_recursive>
 80127ea:	4628      	mov	r0, r5
 80127ec:	bd70      	pop	{r4, r5, r6, pc}
 80127ee:	4629      	mov	r1, r5
 80127f0:	4622      	mov	r2, r4
 80127f2:	4630      	mov	r0, r6
 80127f4:	f7fe f9f3 	bl	8010bde <__swbuf_r>
 80127f8:	4605      	mov	r5, r0
 80127fa:	e7ed      	b.n	80127d8 <_putc_r+0x44>

080127fc <strchr>:
 80127fc:	b2c9      	uxtb	r1, r1
 80127fe:	4603      	mov	r3, r0
 8012800:	4618      	mov	r0, r3
 8012802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012806:	b112      	cbz	r2, 801280e <strchr+0x12>
 8012808:	428a      	cmp	r2, r1
 801280a:	d1f9      	bne.n	8012800 <strchr+0x4>
 801280c:	4770      	bx	lr
 801280e:	2900      	cmp	r1, #0
 8012810:	bf18      	it	ne
 8012812:	2000      	movne	r0, #0
 8012814:	4770      	bx	lr
	...

08012818 <_fstat_r>:
 8012818:	b538      	push	{r3, r4, r5, lr}
 801281a:	4d07      	ldr	r5, [pc, #28]	@ (8012838 <_fstat_r+0x20>)
 801281c:	2300      	movs	r3, #0
 801281e:	4604      	mov	r4, r0
 8012820:	4608      	mov	r0, r1
 8012822:	4611      	mov	r1, r2
 8012824:	602b      	str	r3, [r5, #0]
 8012826:	f7f0 fc1d 	bl	8003064 <_fstat>
 801282a:	1c43      	adds	r3, r0, #1
 801282c:	d102      	bne.n	8012834 <_fstat_r+0x1c>
 801282e:	682b      	ldr	r3, [r5, #0]
 8012830:	b103      	cbz	r3, 8012834 <_fstat_r+0x1c>
 8012832:	6023      	str	r3, [r4, #0]
 8012834:	bd38      	pop	{r3, r4, r5, pc}
 8012836:	bf00      	nop
 8012838:	200032f8 	.word	0x200032f8

0801283c <_isatty_r>:
 801283c:	b538      	push	{r3, r4, r5, lr}
 801283e:	4d06      	ldr	r5, [pc, #24]	@ (8012858 <_isatty_r+0x1c>)
 8012840:	2300      	movs	r3, #0
 8012842:	4604      	mov	r4, r0
 8012844:	4608      	mov	r0, r1
 8012846:	602b      	str	r3, [r5, #0]
 8012848:	f7f0 fc1c 	bl	8003084 <_isatty>
 801284c:	1c43      	adds	r3, r0, #1
 801284e:	d102      	bne.n	8012856 <_isatty_r+0x1a>
 8012850:	682b      	ldr	r3, [r5, #0]
 8012852:	b103      	cbz	r3, 8012856 <_isatty_r+0x1a>
 8012854:	6023      	str	r3, [r4, #0]
 8012856:	bd38      	pop	{r3, r4, r5, pc}
 8012858:	200032f8 	.word	0x200032f8

0801285c <__assert_func>:
 801285c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801285e:	4614      	mov	r4, r2
 8012860:	461a      	mov	r2, r3
 8012862:	4b09      	ldr	r3, [pc, #36]	@ (8012888 <__assert_func+0x2c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4605      	mov	r5, r0
 8012868:	68d8      	ldr	r0, [r3, #12]
 801286a:	b14c      	cbz	r4, 8012880 <__assert_func+0x24>
 801286c:	4b07      	ldr	r3, [pc, #28]	@ (801288c <__assert_func+0x30>)
 801286e:	9100      	str	r1, [sp, #0]
 8012870:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012874:	4906      	ldr	r1, [pc, #24]	@ (8012890 <__assert_func+0x34>)
 8012876:	462b      	mov	r3, r5
 8012878:	f000 f822 	bl	80128c0 <fiprintf>
 801287c:	f000 f832 	bl	80128e4 <abort>
 8012880:	4b04      	ldr	r3, [pc, #16]	@ (8012894 <__assert_func+0x38>)
 8012882:	461c      	mov	r4, r3
 8012884:	e7f3      	b.n	801286e <__assert_func+0x12>
 8012886:	bf00      	nop
 8012888:	200001ec 	.word	0x200001ec
 801288c:	08016a5a 	.word	0x08016a5a
 8012890:	08016a67 	.word	0x08016a67
 8012894:	08016a95 	.word	0x08016a95

08012898 <_calloc_r>:
 8012898:	b570      	push	{r4, r5, r6, lr}
 801289a:	fba1 5402 	umull	r5, r4, r1, r2
 801289e:	b934      	cbnz	r4, 80128ae <_calloc_r+0x16>
 80128a0:	4629      	mov	r1, r5
 80128a2:	f7fd fb3d 	bl	800ff20 <_malloc_r>
 80128a6:	4606      	mov	r6, r0
 80128a8:	b928      	cbnz	r0, 80128b6 <_calloc_r+0x1e>
 80128aa:	4630      	mov	r0, r6
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	220c      	movs	r2, #12
 80128b0:	6002      	str	r2, [r0, #0]
 80128b2:	2600      	movs	r6, #0
 80128b4:	e7f9      	b.n	80128aa <_calloc_r+0x12>
 80128b6:	462a      	mov	r2, r5
 80128b8:	4621      	mov	r1, r4
 80128ba:	f7fe fa25 	bl	8010d08 <memset>
 80128be:	e7f4      	b.n	80128aa <_calloc_r+0x12>

080128c0 <fiprintf>:
 80128c0:	b40e      	push	{r1, r2, r3}
 80128c2:	b503      	push	{r0, r1, lr}
 80128c4:	4601      	mov	r1, r0
 80128c6:	ab03      	add	r3, sp, #12
 80128c8:	4805      	ldr	r0, [pc, #20]	@ (80128e0 <fiprintf+0x20>)
 80128ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ce:	6800      	ldr	r0, [r0, #0]
 80128d0:	9301      	str	r3, [sp, #4]
 80128d2:	f7ff fd39 	bl	8012348 <_vfiprintf_r>
 80128d6:	b002      	add	sp, #8
 80128d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80128dc:	b003      	add	sp, #12
 80128de:	4770      	bx	lr
 80128e0:	200001ec 	.word	0x200001ec

080128e4 <abort>:
 80128e4:	b508      	push	{r3, lr}
 80128e6:	2006      	movs	r0, #6
 80128e8:	f000 f82c 	bl	8012944 <raise>
 80128ec:	2001      	movs	r0, #1
 80128ee:	f7f0 fb85 	bl	8002ffc <_exit>

080128f2 <_raise_r>:
 80128f2:	291f      	cmp	r1, #31
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4605      	mov	r5, r0
 80128f8:	460c      	mov	r4, r1
 80128fa:	d904      	bls.n	8012906 <_raise_r+0x14>
 80128fc:	2316      	movs	r3, #22
 80128fe:	6003      	str	r3, [r0, #0]
 8012900:	f04f 30ff 	mov.w	r0, #4294967295
 8012904:	bd38      	pop	{r3, r4, r5, pc}
 8012906:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012908:	b112      	cbz	r2, 8012910 <_raise_r+0x1e>
 801290a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801290e:	b94b      	cbnz	r3, 8012924 <_raise_r+0x32>
 8012910:	4628      	mov	r0, r5
 8012912:	f000 f831 	bl	8012978 <_getpid_r>
 8012916:	4622      	mov	r2, r4
 8012918:	4601      	mov	r1, r0
 801291a:	4628      	mov	r0, r5
 801291c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012920:	f000 b818 	b.w	8012954 <_kill_r>
 8012924:	2b01      	cmp	r3, #1
 8012926:	d00a      	beq.n	801293e <_raise_r+0x4c>
 8012928:	1c59      	adds	r1, r3, #1
 801292a:	d103      	bne.n	8012934 <_raise_r+0x42>
 801292c:	2316      	movs	r3, #22
 801292e:	6003      	str	r3, [r0, #0]
 8012930:	2001      	movs	r0, #1
 8012932:	e7e7      	b.n	8012904 <_raise_r+0x12>
 8012934:	2100      	movs	r1, #0
 8012936:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801293a:	4620      	mov	r0, r4
 801293c:	4798      	blx	r3
 801293e:	2000      	movs	r0, #0
 8012940:	e7e0      	b.n	8012904 <_raise_r+0x12>
	...

08012944 <raise>:
 8012944:	4b02      	ldr	r3, [pc, #8]	@ (8012950 <raise+0xc>)
 8012946:	4601      	mov	r1, r0
 8012948:	6818      	ldr	r0, [r3, #0]
 801294a:	f7ff bfd2 	b.w	80128f2 <_raise_r>
 801294e:	bf00      	nop
 8012950:	200001ec 	.word	0x200001ec

08012954 <_kill_r>:
 8012954:	b538      	push	{r3, r4, r5, lr}
 8012956:	4d07      	ldr	r5, [pc, #28]	@ (8012974 <_kill_r+0x20>)
 8012958:	2300      	movs	r3, #0
 801295a:	4604      	mov	r4, r0
 801295c:	4608      	mov	r0, r1
 801295e:	4611      	mov	r1, r2
 8012960:	602b      	str	r3, [r5, #0]
 8012962:	f7f0 fb3b 	bl	8002fdc <_kill>
 8012966:	1c43      	adds	r3, r0, #1
 8012968:	d102      	bne.n	8012970 <_kill_r+0x1c>
 801296a:	682b      	ldr	r3, [r5, #0]
 801296c:	b103      	cbz	r3, 8012970 <_kill_r+0x1c>
 801296e:	6023      	str	r3, [r4, #0]
 8012970:	bd38      	pop	{r3, r4, r5, pc}
 8012972:	bf00      	nop
 8012974:	200032f8 	.word	0x200032f8

08012978 <_getpid_r>:
 8012978:	f7f0 bb28 	b.w	8002fcc <_getpid>

0801297c <expf>:
 801297c:	b508      	push	{r3, lr}
 801297e:	ed2d 8b02 	vpush	{d8}
 8012982:	eef0 8a40 	vmov.f32	s17, s0
 8012986:	f000 f8c3 	bl	8012b10 <__ieee754_expf>
 801298a:	eeb0 8a40 	vmov.f32	s16, s0
 801298e:	eeb0 0a68 	vmov.f32	s0, s17
 8012992:	f000 f875 	bl	8012a80 <finitef>
 8012996:	b160      	cbz	r0, 80129b2 <expf+0x36>
 8012998:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80129d8 <expf+0x5c>
 801299c:	eef4 8ae7 	vcmpe.f32	s17, s15
 80129a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a4:	dd0a      	ble.n	80129bc <expf+0x40>
 80129a6:	f7fe fa27 	bl	8010df8 <__errno>
 80129aa:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80129dc <expf+0x60>
 80129ae:	2322      	movs	r3, #34	@ 0x22
 80129b0:	6003      	str	r3, [r0, #0]
 80129b2:	eeb0 0a48 	vmov.f32	s0, s16
 80129b6:	ecbd 8b02 	vpop	{d8}
 80129ba:	bd08      	pop	{r3, pc}
 80129bc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80129e0 <expf+0x64>
 80129c0:	eef4 8ae7 	vcmpe.f32	s17, s15
 80129c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c8:	d5f3      	bpl.n	80129b2 <expf+0x36>
 80129ca:	f7fe fa15 	bl	8010df8 <__errno>
 80129ce:	2322      	movs	r3, #34	@ 0x22
 80129d0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80129e4 <expf+0x68>
 80129d4:	6003      	str	r3, [r0, #0]
 80129d6:	e7ec      	b.n	80129b2 <expf+0x36>
 80129d8:	42b17217 	.word	0x42b17217
 80129dc:	7f800000 	.word	0x7f800000
 80129e0:	c2cff1b5 	.word	0xc2cff1b5
 80129e4:	00000000 	.word	0x00000000

080129e8 <logf>:
 80129e8:	b508      	push	{r3, lr}
 80129ea:	ed2d 8b02 	vpush	{d8}
 80129ee:	eeb0 8a40 	vmov.f32	s16, s0
 80129f2:	f000 f95b 	bl	8012cac <__ieee754_logf>
 80129f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80129fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129fe:	d60f      	bvs.n	8012a20 <logf+0x38>
 8012a00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a08:	dc0a      	bgt.n	8012a20 <logf+0x38>
 8012a0a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a12:	d108      	bne.n	8012a26 <logf+0x3e>
 8012a14:	f7fe f9f0 	bl	8010df8 <__errno>
 8012a18:	2322      	movs	r3, #34	@ 0x22
 8012a1a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012a3c <logf+0x54>
 8012a1e:	6003      	str	r3, [r0, #0]
 8012a20:	ecbd 8b02 	vpop	{d8}
 8012a24:	bd08      	pop	{r3, pc}
 8012a26:	f7fe f9e7 	bl	8010df8 <__errno>
 8012a2a:	ecbd 8b02 	vpop	{d8}
 8012a2e:	2321      	movs	r3, #33	@ 0x21
 8012a30:	6003      	str	r3, [r0, #0]
 8012a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012a36:	4802      	ldr	r0, [pc, #8]	@ (8012a40 <logf+0x58>)
 8012a38:	f7fe ba1a 	b.w	8010e70 <nanf>
 8012a3c:	ff800000 	.word	0xff800000
 8012a40:	08016a95 	.word	0x08016a95

08012a44 <sqrtf>:
 8012a44:	b508      	push	{r3, lr}
 8012a46:	ed2d 8b02 	vpush	{d8}
 8012a4a:	eeb0 8a40 	vmov.f32	s16, s0
 8012a4e:	f000 f85b 	bl	8012b08 <__ieee754_sqrtf>
 8012a52:	eeb4 8a48 	vcmp.f32	s16, s16
 8012a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a5a:	d60c      	bvs.n	8012a76 <sqrtf+0x32>
 8012a5c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012a7c <sqrtf+0x38>
 8012a60:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a68:	d505      	bpl.n	8012a76 <sqrtf+0x32>
 8012a6a:	f7fe f9c5 	bl	8010df8 <__errno>
 8012a6e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012a72:	2321      	movs	r3, #33	@ 0x21
 8012a74:	6003      	str	r3, [r0, #0]
 8012a76:	ecbd 8b02 	vpop	{d8}
 8012a7a:	bd08      	pop	{r3, pc}
 8012a7c:	00000000 	.word	0x00000000

08012a80 <finitef>:
 8012a80:	ee10 3a10 	vmov	r3, s0
 8012a84:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8012a88:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8012a8c:	bfac      	ite	ge
 8012a8e:	2000      	movge	r0, #0
 8012a90:	2001      	movlt	r0, #1
 8012a92:	4770      	bx	lr

08012a94 <fminf>:
 8012a94:	b508      	push	{r3, lr}
 8012a96:	ed2d 8b02 	vpush	{d8}
 8012a9a:	eeb0 8a40 	vmov.f32	s16, s0
 8012a9e:	eef0 8a60 	vmov.f32	s17, s1
 8012aa2:	f000 f815 	bl	8012ad0 <__fpclassifyf>
 8012aa6:	b930      	cbnz	r0, 8012ab6 <fminf+0x22>
 8012aa8:	eeb0 8a68 	vmov.f32	s16, s17
 8012aac:	eeb0 0a48 	vmov.f32	s0, s16
 8012ab0:	ecbd 8b02 	vpop	{d8}
 8012ab4:	bd08      	pop	{r3, pc}
 8012ab6:	eeb0 0a68 	vmov.f32	s0, s17
 8012aba:	f000 f809 	bl	8012ad0 <__fpclassifyf>
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d0f4      	beq.n	8012aac <fminf+0x18>
 8012ac2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aca:	d5ed      	bpl.n	8012aa8 <fminf+0x14>
 8012acc:	e7ee      	b.n	8012aac <fminf+0x18>
	...

08012ad0 <__fpclassifyf>:
 8012ad0:	ee10 3a10 	vmov	r3, s0
 8012ad4:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8012ad8:	d00d      	beq.n	8012af6 <__fpclassifyf+0x26>
 8012ada:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012ade:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012ae2:	d30a      	bcc.n	8012afa <__fpclassifyf+0x2a>
 8012ae4:	4b07      	ldr	r3, [pc, #28]	@ (8012b04 <__fpclassifyf+0x34>)
 8012ae6:	1e42      	subs	r2, r0, #1
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d908      	bls.n	8012afe <__fpclassifyf+0x2e>
 8012aec:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012af0:	4258      	negs	r0, r3
 8012af2:	4158      	adcs	r0, r3
 8012af4:	4770      	bx	lr
 8012af6:	2002      	movs	r0, #2
 8012af8:	4770      	bx	lr
 8012afa:	2004      	movs	r0, #4
 8012afc:	4770      	bx	lr
 8012afe:	2003      	movs	r0, #3
 8012b00:	4770      	bx	lr
 8012b02:	bf00      	nop
 8012b04:	007ffffe 	.word	0x007ffffe

08012b08 <__ieee754_sqrtf>:
 8012b08:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012b0c:	4770      	bx	lr
	...

08012b10 <__ieee754_expf>:
 8012b10:	ee10 2a10 	vmov	r2, s0
 8012b14:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8012b18:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012b1c:	d902      	bls.n	8012b24 <__ieee754_expf+0x14>
 8012b1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012b22:	4770      	bx	lr
 8012b24:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8012b28:	d106      	bne.n	8012b38 <__ieee754_expf+0x28>
 8012b2a:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8012c64 <__ieee754_expf+0x154>
 8012b2e:	2900      	cmp	r1, #0
 8012b30:	bf18      	it	ne
 8012b32:	eeb0 0a67 	vmovne.f32	s0, s15
 8012b36:	4770      	bx	lr
 8012b38:	484b      	ldr	r0, [pc, #300]	@ (8012c68 <__ieee754_expf+0x158>)
 8012b3a:	4282      	cmp	r2, r0
 8012b3c:	dd02      	ble.n	8012b44 <__ieee754_expf+0x34>
 8012b3e:	2000      	movs	r0, #0
 8012b40:	f000 b9c6 	b.w	8012ed0 <__math_oflowf>
 8012b44:	2a00      	cmp	r2, #0
 8012b46:	da05      	bge.n	8012b54 <__ieee754_expf+0x44>
 8012b48:	4a48      	ldr	r2, [pc, #288]	@ (8012c6c <__ieee754_expf+0x15c>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d902      	bls.n	8012b54 <__ieee754_expf+0x44>
 8012b4e:	2000      	movs	r0, #0
 8012b50:	f000 b9b8 	b.w	8012ec4 <__math_uflowf>
 8012b54:	4a46      	ldr	r2, [pc, #280]	@ (8012c70 <__ieee754_expf+0x160>)
 8012b56:	4293      	cmp	r3, r2
 8012b58:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8012b5c:	d952      	bls.n	8012c04 <__ieee754_expf+0xf4>
 8012b5e:	4a45      	ldr	r2, [pc, #276]	@ (8012c74 <__ieee754_expf+0x164>)
 8012b60:	4293      	cmp	r3, r2
 8012b62:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8012b66:	d834      	bhi.n	8012bd2 <__ieee754_expf+0xc2>
 8012b68:	4b43      	ldr	r3, [pc, #268]	@ (8012c78 <__ieee754_expf+0x168>)
 8012b6a:	4413      	add	r3, r2
 8012b6c:	ed93 7a00 	vldr	s14, [r3]
 8012b70:	4b42      	ldr	r3, [pc, #264]	@ (8012c7c <__ieee754_expf+0x16c>)
 8012b72:	4413      	add	r3, r2
 8012b74:	ee30 7a47 	vsub.f32	s14, s0, s14
 8012b78:	f081 0201 	eor.w	r2, r1, #1
 8012b7c:	edd3 7a00 	vldr	s15, [r3]
 8012b80:	1a52      	subs	r2, r2, r1
 8012b82:	ee37 0a67 	vsub.f32	s0, s14, s15
 8012b86:	ee20 6a00 	vmul.f32	s12, s0, s0
 8012b8a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8012c80 <__ieee754_expf+0x170>
 8012b8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8012c84 <__ieee754_expf+0x174>
 8012b92:	eee6 6a05 	vfma.f32	s13, s12, s10
 8012b96:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8012c88 <__ieee754_expf+0x178>
 8012b9a:	eea6 5a86 	vfma.f32	s10, s13, s12
 8012b9e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012c8c <__ieee754_expf+0x17c>
 8012ba2:	eee5 6a06 	vfma.f32	s13, s10, s12
 8012ba6:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8012c90 <__ieee754_expf+0x180>
 8012baa:	eea6 5a86 	vfma.f32	s10, s13, s12
 8012bae:	eef0 6a40 	vmov.f32	s13, s0
 8012bb2:	eee5 6a46 	vfms.f32	s13, s10, s12
 8012bb6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012bba:	ee20 5a26 	vmul.f32	s10, s0, s13
 8012bbe:	bb92      	cbnz	r2, 8012c26 <__ieee754_expf+0x116>
 8012bc0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8012bc4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8012bc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012bcc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8012bd0:	4770      	bx	lr
 8012bd2:	4b30      	ldr	r3, [pc, #192]	@ (8012c94 <__ieee754_expf+0x184>)
 8012bd4:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8012c98 <__ieee754_expf+0x188>
 8012bd8:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8012c9c <__ieee754_expf+0x18c>
 8012bdc:	4413      	add	r3, r2
 8012bde:	edd3 7a00 	vldr	s15, [r3]
 8012be2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012be6:	eeb0 7a40 	vmov.f32	s14, s0
 8012bea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012bee:	ee17 2a90 	vmov	r2, s15
 8012bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bf6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012bfa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8012ca0 <__ieee754_expf+0x190>
 8012bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012c02:	e7be      	b.n	8012b82 <__ieee754_expf+0x72>
 8012c04:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8012c08:	d20b      	bcs.n	8012c22 <__ieee754_expf+0x112>
 8012c0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8012ca4 <__ieee754_expf+0x194>
 8012c0e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8012c12:	eef4 6ae5 	vcmpe.f32	s13, s11
 8012c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1a:	dd02      	ble.n	8012c22 <__ieee754_expf+0x112>
 8012c1c:	ee30 0a25 	vadd.f32	s0, s0, s11
 8012c20:	4770      	bx	lr
 8012c22:	2200      	movs	r2, #0
 8012c24:	e7af      	b.n	8012b86 <__ieee754_expf+0x76>
 8012c26:	ee36 6a66 	vsub.f32	s12, s12, s13
 8012c2a:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8012c2e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8012c32:	bfb8      	it	lt
 8012c34:	3264      	addlt	r2, #100	@ 0x64
 8012c36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012c3e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8012c42:	ee17 3a90 	vmov	r3, s15
 8012c46:	bfab      	itete	ge
 8012c48:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8012c4c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8012c50:	ee00 3a10 	vmovge	s0, r3
 8012c54:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8012ca8 <__ieee754_expf+0x198>
 8012c58:	bfbc      	itt	lt
 8012c5a:	ee00 3a10 	vmovlt	s0, r3
 8012c5e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8012c62:	4770      	bx	lr
 8012c64:	00000000 	.word	0x00000000
 8012c68:	42b17217 	.word	0x42b17217
 8012c6c:	42cff1b5 	.word	0x42cff1b5
 8012c70:	3eb17218 	.word	0x3eb17218
 8012c74:	3f851591 	.word	0x3f851591
 8012c78:	08016ba0 	.word	0x08016ba0
 8012c7c:	08016b98 	.word	0x08016b98
 8012c80:	3331bb4c 	.word	0x3331bb4c
 8012c84:	b5ddea0e 	.word	0xb5ddea0e
 8012c88:	388ab355 	.word	0x388ab355
 8012c8c:	bb360b61 	.word	0xbb360b61
 8012c90:	3e2aaaab 	.word	0x3e2aaaab
 8012c94:	08016ba8 	.word	0x08016ba8
 8012c98:	3fb8aa3b 	.word	0x3fb8aa3b
 8012c9c:	3f317180 	.word	0x3f317180
 8012ca0:	3717f7d1 	.word	0x3717f7d1
 8012ca4:	7149f2ca 	.word	0x7149f2ca
 8012ca8:	0d800000 	.word	0x0d800000

08012cac <__ieee754_logf>:
 8012cac:	ee10 3a10 	vmov	r3, s0
 8012cb0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012cb4:	d106      	bne.n	8012cc4 <__ieee754_logf+0x18>
 8012cb6:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8012e50 <__ieee754_logf+0x1a4>
 8012cba:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8012e54 <__ieee754_logf+0x1a8>
 8012cbe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8012cc2:	4770      	bx	lr
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	da02      	bge.n	8012cd0 <__ieee754_logf+0x24>
 8012cca:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012cce:	e7f4      	b.n	8012cba <__ieee754_logf+0xe>
 8012cd0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012cd4:	db02      	blt.n	8012cdc <__ieee754_logf+0x30>
 8012cd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012cda:	4770      	bx	lr
 8012cdc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012ce0:	bfb8      	it	lt
 8012ce2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8012e58 <__ieee754_logf+0x1ac>
 8012ce6:	485d      	ldr	r0, [pc, #372]	@ (8012e5c <__ieee754_logf+0x1b0>)
 8012ce8:	bfbe      	ittt	lt
 8012cea:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8012cee:	f06f 0118 	mvnlt.w	r1, #24
 8012cf2:	ee17 2a90 	vmovlt	r2, s15
 8012cf6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8012cfa:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8012cfe:	4410      	add	r0, r2
 8012d00:	bfa8      	it	ge
 8012d02:	2100      	movge	r1, #0
 8012d04:	3b7f      	subs	r3, #127	@ 0x7f
 8012d06:	440b      	add	r3, r1
 8012d08:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8012d0c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8012d10:	4311      	orrs	r1, r2
 8012d12:	ee00 1a10 	vmov	s0, r1
 8012d16:	4952      	ldr	r1, [pc, #328]	@ (8012e60 <__ieee754_logf+0x1b4>)
 8012d18:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8012d1c:	f102 000f 	add.w	r0, r2, #15
 8012d20:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012d24:	4001      	ands	r1, r0
 8012d26:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012d2a:	bb89      	cbnz	r1, 8012d90 <__ieee754_logf+0xe4>
 8012d2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8012d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d34:	d10f      	bne.n	8012d56 <__ieee754_logf+0xaa>
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	f000 8087 	beq.w	8012e4a <__ieee754_logf+0x19e>
 8012d3c:	ee07 3a90 	vmov	s15, r3
 8012d40:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8012e64 <__ieee754_logf+0x1b8>
 8012d44:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8012e68 <__ieee754_logf+0x1bc>
 8012d48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d4c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d50:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012d54:	4770      	bx	lr
 8012d56:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8012e6c <__ieee754_logf+0x1c0>
 8012d5a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012d5e:	eee0 7a66 	vfms.f32	s15, s0, s13
 8012d62:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d6a:	b913      	cbnz	r3, 8012d72 <__ieee754_logf+0xc6>
 8012d6c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012d70:	4770      	bx	lr
 8012d72:	ee07 3a90 	vmov	s15, r3
 8012d76:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8012e64 <__ieee754_logf+0x1b8>
 8012d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012d7e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8012d82:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012d86:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8012e68 <__ieee754_logf+0x1bc>
 8012d8a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8012d8e:	4770      	bx	lr
 8012d90:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8012d94:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012d98:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8012e70 <__ieee754_logf+0x1c4>
 8012d9c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8012e74 <__ieee754_logf+0x1c8>
 8012da0:	4935      	ldr	r1, [pc, #212]	@ (8012e78 <__ieee754_logf+0x1cc>)
 8012da2:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8012da6:	4411      	add	r1, r2
 8012da8:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8012dac:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8012db0:	430a      	orrs	r2, r1
 8012db2:	2a00      	cmp	r2, #0
 8012db4:	ee07 3a90 	vmov	s15, r3
 8012db8:	ee26 5a06 	vmul.f32	s10, s12, s12
 8012dbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012dc0:	ee25 7a05 	vmul.f32	s14, s10, s10
 8012dc4:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8012e7c <__ieee754_logf+0x1d0>
 8012dc8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8012dcc:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8012e80 <__ieee754_logf+0x1d4>
 8012dd0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8012dd4:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8012e84 <__ieee754_logf+0x1d8>
 8012dd8:	eee7 7a24 	vfma.f32	s15, s14, s9
 8012ddc:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8012e88 <__ieee754_logf+0x1dc>
 8012de0:	eee7 4a87 	vfma.f32	s9, s15, s14
 8012de4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8012e8c <__ieee754_logf+0x1e0>
 8012de8:	eee4 7a87 	vfma.f32	s15, s9, s14
 8012dec:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012df0:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012df4:	dd1a      	ble.n	8012e2c <__ieee754_logf+0x180>
 8012df6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8012dfa:	ee20 7a07 	vmul.f32	s14, s0, s14
 8012dfe:	ee27 7a00 	vmul.f32	s14, s14, s0
 8012e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e06:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012e0a:	b913      	cbnz	r3, 8012e12 <__ieee754_logf+0x166>
 8012e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e10:	e7ac      	b.n	8012d6c <__ieee754_logf+0xc0>
 8012e12:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8012e64 <__ieee754_logf+0x1b8>
 8012e16:	eee6 7a86 	vfma.f32	s15, s13, s12
 8012e1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012e1e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8012e22:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8012e68 <__ieee754_logf+0x1bc>
 8012e26:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8012e2a:	4770      	bx	lr
 8012e2c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012e30:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012e34:	b913      	cbnz	r3, 8012e3c <__ieee754_logf+0x190>
 8012e36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012e3a:	4770      	bx	lr
 8012e3c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8012e64 <__ieee754_logf+0x1b8>
 8012e40:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8012e44:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8012e48:	e7eb      	b.n	8012e22 <__ieee754_logf+0x176>
 8012e4a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8012e54 <__ieee754_logf+0x1a8>
 8012e4e:	4770      	bx	lr
 8012e50:	cc000000 	.word	0xcc000000
 8012e54:	00000000 	.word	0x00000000
 8012e58:	4c000000 	.word	0x4c000000
 8012e5c:	004afb20 	.word	0x004afb20
 8012e60:	007ffff0 	.word	0x007ffff0
 8012e64:	3717f7d1 	.word	0x3717f7d1
 8012e68:	3f317180 	.word	0x3f317180
 8012e6c:	3eaaaaab 	.word	0x3eaaaaab
 8012e70:	3e1cd04f 	.word	0x3e1cd04f
 8012e74:	3e178897 	.word	0x3e178897
 8012e78:	ffcf5c30 	.word	0xffcf5c30
 8012e7c:	3e638e29 	.word	0x3e638e29
 8012e80:	3ecccccd 	.word	0x3ecccccd
 8012e84:	3e3a3325 	.word	0x3e3a3325
 8012e88:	3e924925 	.word	0x3e924925
 8012e8c:	3f2aaaab 	.word	0x3f2aaaab

08012e90 <with_errnof>:
 8012e90:	b510      	push	{r4, lr}
 8012e92:	ed2d 8b02 	vpush	{d8}
 8012e96:	eeb0 8a40 	vmov.f32	s16, s0
 8012e9a:	4604      	mov	r4, r0
 8012e9c:	f7fd ffac 	bl	8010df8 <__errno>
 8012ea0:	eeb0 0a48 	vmov.f32	s0, s16
 8012ea4:	ecbd 8b02 	vpop	{d8}
 8012ea8:	6004      	str	r4, [r0, #0]
 8012eaa:	bd10      	pop	{r4, pc}

08012eac <xflowf>:
 8012eac:	b130      	cbz	r0, 8012ebc <xflowf+0x10>
 8012eae:	eef1 7a40 	vneg.f32	s15, s0
 8012eb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012eb6:	2022      	movs	r0, #34	@ 0x22
 8012eb8:	f7ff bfea 	b.w	8012e90 <with_errnof>
 8012ebc:	eef0 7a40 	vmov.f32	s15, s0
 8012ec0:	e7f7      	b.n	8012eb2 <xflowf+0x6>
	...

08012ec4 <__math_uflowf>:
 8012ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012ecc <__math_uflowf+0x8>
 8012ec8:	f7ff bff0 	b.w	8012eac <xflowf>
 8012ecc:	10000000 	.word	0x10000000

08012ed0 <__math_oflowf>:
 8012ed0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012ed8 <__math_oflowf+0x8>
 8012ed4:	f7ff bfea 	b.w	8012eac <xflowf>
 8012ed8:	70000000 	.word	0x70000000

08012edc <_init>:
 8012edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ede:	bf00      	nop
 8012ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ee2:	bc08      	pop	{r3}
 8012ee4:	469e      	mov	lr, r3
 8012ee6:	4770      	bx	lr

08012ee8 <_fini>:
 8012ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eea:	bf00      	nop
 8012eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eee:	bc08      	pop	{r3}
 8012ef0:	469e      	mov	lr, r3
 8012ef2:	4770      	bx	lr
