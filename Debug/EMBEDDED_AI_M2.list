
EMBEDDED_AI_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf14  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0800d058  0800d058  0000e058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e020  0800e020  0000f020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e028  0800e028  0000f028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e02c  0800e02c  0000f02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000008  0800e030  00010008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cac8  200001f8  0800e220  000101f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ccc0  0800e220  00010cc0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001abb0  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003a06  00000000  00000000  0002add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c40  00000000  00000000  0002e7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000015ba  00000000  00000000  00030420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000250bc  00000000  00000000  000319da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ed12  00000000  00000000  00056a96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000de8f0  00000000  00000000  000757a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00154098  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008928  00000000  00000000  001540dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  0015ca04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f8 	.word	0x200001f8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d03c 	.word	0x0800d03c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001fc 	.word	0x200001fc
 800017c:	0800d03c 	.word	0x0800d03c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e70:	e000      	b.n	8000e74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e009      	b.n	8000eee <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffb0 	bl	8000e48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbf1      	blt.n	8000eda <_write+0x12>
	}
	return len;
 8000ef6:	687b      	ldr	r3, [r7, #4]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <InitializeISM330DHCX2>:
}



void InitializeISM330DHCX2(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
    uint8_t config[2];
    HAL_StatusTypeDef status;

    // Step 1: Enable Register Auto-Increment & BDU (CTRL3_C)
    config[0] = 0x12; // CTRL3_C register
 8000f06:	2312      	movs	r3, #18
 8000f08:	713b      	strb	r3, [r7, #4]
    config[1] = 0x44; // 0b01000100: IF_INC = 1 (Auto-Increment), BDU = 1
 8000f0a:	2344      	movs	r3, #68	@ 0x44
 8000f0c:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8000f0e:	1d3a      	adds	r2, r7, #4
 8000f10:	2364      	movs	r3, #100	@ 0x64
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2302      	movs	r3, #2
 8000f16:	21d6      	movs	r1, #214	@ 0xd6
 8000f18:	484e      	ldr	r0, [pc, #312]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000f1a:	f001 fb93 	bl	8002644 <HAL_I2C_Master_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL3_C setup failed\n");
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d002      	beq.n	8000f2e <InitializeISM330DHCX2+0x2e>
 8000f28:	484b      	ldr	r0, [pc, #300]	@ (8001058 <InitializeISM330DHCX2+0x158>)
 8000f2a:	f009 ff3b 	bl	800ada4 <puts>

    HAL_Delay(10);
 8000f2e:	200a      	movs	r0, #10
 8000f30:	f000 ffc4 	bl	8001ebc <HAL_Delay>

    // Step 2: Enable Accelerometer (CTRL1_XL) - 104Hz ODR, ±2g Full Scale, High-Performance Mode
    config[0] = 0x10; // CTRL1_XL register
 8000f34:	2310      	movs	r3, #16
 8000f36:	713b      	strb	r3, [r7, #4]
    config[1] = 0x50; // 0b01010000: ODR = 104Hz, ±2g, High-Performance Mode
 8000f38:	2350      	movs	r3, #80	@ 0x50
 8000f3a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8000f3c:	1d3a      	adds	r2, r7, #4
 8000f3e:	2364      	movs	r3, #100	@ 0x64
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	21d6      	movs	r1, #214	@ 0xd6
 8000f46:	4843      	ldr	r0, [pc, #268]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000f48:	f001 fb7c 	bl	8002644 <HAL_I2C_Master_Transmit>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL1_XL setup failed\n");
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d002      	beq.n	8000f5c <InitializeISM330DHCX2+0x5c>
 8000f56:	4841      	ldr	r0, [pc, #260]	@ (800105c <InitializeISM330DHCX2+0x15c>)
 8000f58:	f009 ff24 	bl	800ada4 <puts>

    HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f000 ffad 	bl	8001ebc <HAL_Delay>

    // Step 3: Enable Gyroscope (CTRL2_G) - 104Hz ODR, ±1000 dps Full Scale
    config[0] = 0x11; // CTRL2_G register
 8000f62:	2311      	movs	r3, #17
 8000f64:	713b      	strb	r3, [r7, #4]
    config[1] = 0x48; // 0b01001000: ODR = 104Hz, ±1000 dps
 8000f66:	2348      	movs	r3, #72	@ 0x48
 8000f68:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8000f6a:	1d3a      	adds	r2, r7, #4
 8000f6c:	2364      	movs	r3, #100	@ 0x64
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2302      	movs	r3, #2
 8000f72:	21d6      	movs	r1, #214	@ 0xd6
 8000f74:	4837      	ldr	r0, [pc, #220]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000f76:	f001 fb65 	bl	8002644 <HAL_I2C_Master_Transmit>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL2_G setup failed\n");
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <InitializeISM330DHCX2+0x8a>
 8000f84:	4836      	ldr	r0, [pc, #216]	@ (8001060 <InitializeISM330DHCX2+0x160>)
 8000f86:	f009 ff0d 	bl	800ada4 <puts>

    HAL_Delay(10);
 8000f8a:	200a      	movs	r0, #10
 8000f8c:	f000 ff96 	bl	8001ebc <HAL_Delay>

    // Step 4: Enable High-Performance Mode for Accelerometer & Gyroscope (CTRL6_C)
    config[0] = 0x15; // CTRL6_C register
 8000f90:	2315      	movs	r3, #21
 8000f92:	713b      	strb	r3, [r7, #4]
    config[1] = 0x00; // 0b00000000: High-Performance Mode enabled
 8000f94:	2300      	movs	r3, #0
 8000f96:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8000f98:	1d3a      	adds	r2, r7, #4
 8000f9a:	2364      	movs	r3, #100	@ 0x64
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	21d6      	movs	r1, #214	@ 0xd6
 8000fa2:	482c      	ldr	r0, [pc, #176]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000fa4:	f001 fb4e 	bl	8002644 <HAL_I2C_Master_Transmit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL6_C setup failed\n");
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <InitializeISM330DHCX2+0xb8>
 8000fb2:	482c      	ldr	r0, [pc, #176]	@ (8001064 <InitializeISM330DHCX2+0x164>)
 8000fb4:	f009 fef6 	bl	800ada4 <puts>

    HAL_Delay(10);
 8000fb8:	200a      	movs	r0, #10
 8000fba:	f000 ff7f 	bl	8001ebc <HAL_Delay>

    // Step 5: Read Back Register Values for Debugging
    uint8_t ctrl1_xl, ctrl2_g, ctrl3_c, ctrl6_c;
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
 8000fbe:	2364      	movs	r3, #100	@ 0x64
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1cfb      	adds	r3, r7, #3
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	2210      	movs	r2, #16
 8000fce:	21d6      	movs	r1, #214	@ 0xd6
 8000fd0:	4820      	ldr	r0, [pc, #128]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000fd2:	f001 fc4f 	bl	8002874 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
 8000fd6:	2364      	movs	r3, #100	@ 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	1cbb      	adds	r3, r7, #2
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	2211      	movs	r2, #17
 8000fe6:	21d6      	movs	r1, #214	@ 0xd6
 8000fe8:	481a      	ldr	r0, [pc, #104]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8000fea:	f001 fc43 	bl	8002874 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x12, I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
 8000fee:	2364      	movs	r3, #100	@ 0x64
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	1c7b      	adds	r3, r7, #1
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	2212      	movs	r2, #18
 8000ffe:	21d6      	movs	r1, #214	@ 0xd6
 8001000:	4814      	ldr	r0, [pc, #80]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 8001002:	f001 fc37 	bl	8002874 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x15, I2C_MEMADD_SIZE_8BIT, &ctrl6_c, 1, 100);
 8001006:	2364      	movs	r3, #100	@ 0x64
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	463b      	mov	r3, r7
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	2215      	movs	r2, #21
 8001016:	21d6      	movs	r1, #214	@ 0xd6
 8001018:	480e      	ldr	r0, [pc, #56]	@ (8001054 <InitializeISM330DHCX2+0x154>)
 800101a:	f001 fc2b 	bl	8002874 <HAL_I2C_Mem_Read>

    printf("CTRL1_XL = 0x%02X (Should be 0x50)\n", ctrl1_xl);
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	4619      	mov	r1, r3
 8001022:	4811      	ldr	r0, [pc, #68]	@ (8001068 <InitializeISM330DHCX2+0x168>)
 8001024:	f009 fe56 	bl	800acd4 <iprintf>
    printf("CTRL2_G  = 0x%02X (Should be 0x48)\n", ctrl2_g);
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <InitializeISM330DHCX2+0x16c>)
 800102e:	f009 fe51 	bl	800acd4 <iprintf>
    printf("CTRL3_C  = 0x%02X (Should be 0x44)\n", ctrl3_c);
 8001032:	787b      	ldrb	r3, [r7, #1]
 8001034:	4619      	mov	r1, r3
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <InitializeISM330DHCX2+0x170>)
 8001038:	f009 fe4c 	bl	800acd4 <iprintf>
    printf("CTRL6_C  = 0x%02X (Should be 0x00)\n", ctrl6_c);
 800103c:	783b      	ldrb	r3, [r7, #0]
 800103e:	4619      	mov	r1, r3
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <InitializeISM330DHCX2+0x174>)
 8001042:	f009 fe47 	bl	800acd4 <iprintf>

    printf("ISM330DHCX initialization complete\n");
 8001046:	480c      	ldr	r0, [pc, #48]	@ (8001078 <InitializeISM330DHCX2+0x178>)
 8001048:	f009 feac 	bl	800ada4 <puts>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000214 	.word	0x20000214
 8001058:	0800d2ac 	.word	0x0800d2ac
 800105c:	0800d2c8 	.word	0x0800d2c8
 8001060:	0800d2e8 	.word	0x0800d2e8
 8001064:	0800d304 	.word	0x0800d304
 8001068:	0800d320 	.word	0x0800d320
 800106c:	0800d344 	.word	0x0800d344
 8001070:	0800d368 	.word	0x0800d368
 8001074:	0800d38c 	.word	0x0800d38c
 8001078:	0800d3b0 	.word	0x0800d3b0

0800107c <WriteIMUDataToSD>:
//    printf("✅ IMU sample written to SD card: %s", buffer);
//}



void WriteIMUDataToSD(AccelerometerData *accelData, GyroscopeData *gyroData) {
 800107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800107e:	b08d      	sub	sp, #52	@ 0x34
 8001080:	af06      	add	r7, sp, #24
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
//    printf("📌 Sample %d -> ax=%d, ay=%d, az=%d, gx=%d, gy=%d, gz=%d\n",
//           sample_count, accelData->x, accelData->y, accelData->z,
//           gyroData->x, gyroData->y, gyroData->z);

    // 🔥 Check if buffer has enough space before writing
    if (offset + 50 >= sizeof(buffer)) {
 8001086:	4b60      	ldr	r3, [pc, #384]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3332      	adds	r3, #50	@ 0x32
 800108c:	461a      	mov	r2, r3
 800108e:	f24c 334f 	movw	r3, #49999	@ 0xc34f
 8001092:	429a      	cmp	r2, r3
 8001094:	d906      	bls.n	80010a4 <WriteIMUDataToSD+0x28>
        printf("❌ Buffer overflow prevented! Flushing data early.\n");
 8001096:	485d      	ldr	r0, [pc, #372]	@ (800120c <WriteIMUDataToSD+0x190>)
 8001098:	f009 fe84 	bl	800ada4 <puts>
        sample_count = SAMPLE_WINDOW;  // Force writing to SD
 800109c:	4b5c      	ldr	r3, [pc, #368]	@ (8001210 <WriteIMUDataToSD+0x194>)
 800109e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010a2:	601a      	str	r2, [r3, #0]
    }

    // 🔥 Append new IMU sample to buffer
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010a4:	4b58      	ldr	r3, [pc, #352]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001214 <WriteIMUDataToSD+0x198>)
 80010ac:	18d0      	adds	r0, r2, r3
 80010ae:	4b56      	ldr	r3, [pc, #344]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f5c3 4143 	rsb	r1, r3, #49920	@ 0xc300
 80010b6:	3150      	adds	r1, #80	@ 0x50
                                 accelData->x, accelData->y, accelData->z,
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 3000 	ldrsh.w	r3, [r3]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010be:	469c      	mov	ip, r3
                                 accelData->x, accelData->y, accelData->z,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010c6:	461a      	mov	r2, r3
                                 accelData->x, accelData->y, accelData->z,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010ce:	461c      	mov	r4, r3
                                 gyroData->x, gyroData->y, gyroData->z);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010d6:	461d      	mov	r5, r3
                                 gyroData->x, gyroData->y, gyroData->z);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010de:	461e      	mov	r6, r3
                                 gyroData->x, gyroData->y, gyroData->z);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    int bytes_written = snprintf(buffer + offset, sizeof(buffer) - offset, "%d,%d,%d,%d,%d,%d,",
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	9603      	str	r6, [sp, #12]
 80010ea:	9502      	str	r5, [sp, #8]
 80010ec:	9401      	str	r4, [sp, #4]
 80010ee:	9200      	str	r2, [sp, #0]
 80010f0:	4663      	mov	r3, ip
 80010f2:	4a49      	ldr	r2, [pc, #292]	@ (8001218 <WriteIMUDataToSD+0x19c>)
 80010f4:	f009 fe5e 	bl	800adb4 <sniprintf>
 80010f8:	6138      	str	r0, [r7, #16]
    if (bytes_written < 0) {
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	da03      	bge.n	8001108 <WriteIMUDataToSD+0x8c>
        printf("❌ Error formatting IMU data!\n");
 8001100:	4846      	ldr	r0, [pc, #280]	@ (800121c <WriteIMUDataToSD+0x1a0>)
 8001102:	f009 fe4f 	bl	800ada4 <puts>
        return;
 8001106:	e07c      	b.n	8001202 <WriteIMUDataToSD+0x186>
    }
    offset += bytes_written;
 8001108:	4b3f      	ldr	r3, [pc, #252]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4413      	add	r3, r2
 8001110:	4a3d      	ldr	r2, [pc, #244]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 8001112:	6013      	str	r3, [r2, #0]
    sample_count++;
 8001114:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <WriteIMUDataToSD+0x194>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a3d      	ldr	r2, [pc, #244]	@ (8001210 <WriteIMUDataToSD+0x194>)
 800111c:	6013      	str	r3, [r2, #0]

    // 🔥 Once we have `SAMPLE_WINDOW` samples, write to SD card
    if (sample_count >= SAMPLE_WINDOW) {
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <WriteIMUDataToSD+0x194>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2bff      	cmp	r3, #255	@ 0xff
 8001124:	dd6d      	ble.n	8001202 <WriteIMUDataToSD+0x186>
        buffer[offset - 1] = '\n';  // Replace last comma with newline
 8001126:	4b38      	ldr	r3, [pc, #224]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	3b01      	subs	r3, #1
 800112c:	4a39      	ldr	r2, [pc, #228]	@ (8001214 <WriteIMUDataToSD+0x198>)
 800112e:	210a      	movs	r1, #10
 8001130:	54d1      	strb	r1, [r2, r3]

        // 🔥 Print the full formatted buffer before writing
    //    printf("\n🔍 Full formatted buffer before writing to SD:\n%s\n", buffer);

        // 🔥 Retry SD Card Mounting up to 3 times
        int retries = 3;
 8001132:	2303      	movs	r3, #3
 8001134:	617b      	str	r3, [r7, #20]
        while (retries-- > 0) {
 8001136:	e00b      	b.n	8001150 <WriteIMUDataToSD+0xd4>
            if (f_mount(&FatFs, "", 1) == FR_OK) {
 8001138:	2201      	movs	r2, #1
 800113a:	4939      	ldr	r1, [pc, #228]	@ (8001220 <WriteIMUDataToSD+0x1a4>)
 800113c:	4839      	ldr	r0, [pc, #228]	@ (8001224 <WriteIMUDataToSD+0x1a8>)
 800113e:	f008 fa2f 	bl	80095a0 <f_mount>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d009      	beq.n	800115c <WriteIMUDataToSD+0xe0>
      //          printf("✅ SD card mounted successfully.\n");
                break;
            }
            printf("❌ Retry mounting SD card... (%d attempts left)\n", retries);
 8001148:	6979      	ldr	r1, [r7, #20]
 800114a:	4837      	ldr	r0, [pc, #220]	@ (8001228 <WriteIMUDataToSD+0x1ac>)
 800114c:	f009 fdc2 	bl	800acd4 <iprintf>
        while (retries-- > 0) {
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	617a      	str	r2, [r7, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	dcee      	bgt.n	8001138 <WriteIMUDataToSD+0xbc>
 800115a:	e000      	b.n	800115e <WriteIMUDataToSD+0xe2>
                break;
 800115c:	bf00      	nop
        }
        if (retries == 0) {
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d103      	bne.n	800116c <WriteIMUDataToSD+0xf0>
            printf("❌ Failed to mount SD card! Skipping write.\n");
 8001164:	4831      	ldr	r0, [pc, #196]	@ (800122c <WriteIMUDataToSD+0x1b0>)
 8001166:	f009 fe1d 	bl	800ada4 <puts>
            return;
 800116a:	e04a      	b.n	8001202 <WriteIMUDataToSD+0x186>
        }

        // 🔥 Open file and check for errors
        res = f_open(&fil, "checkin.csv", FA_OPEN_ALWAYS | FA_WRITE);
 800116c:	2212      	movs	r2, #18
 800116e:	4930      	ldr	r1, [pc, #192]	@ (8001230 <WriteIMUDataToSD+0x1b4>)
 8001170:	4830      	ldr	r0, [pc, #192]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 8001172:	f008 fa5b 	bl	800962c <f_open>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b2f      	ldr	r3, [pc, #188]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 800117c:	701a      	strb	r2, [r3, #0]
        if (res != FR_OK) {
 800117e:	4b2e      	ldr	r3, [pc, #184]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <WriteIMUDataToSD+0x122>
            printf("❌ Error opening file! FATFS result: %d\n", res);
 8001186:	4b2c      	ldr	r3, [pc, #176]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	4619      	mov	r1, r3
 800118c:	482b      	ldr	r0, [pc, #172]	@ (800123c <WriteIMUDataToSD+0x1c0>)
 800118e:	f009 fda1 	bl	800acd4 <iprintf>
            f_mount(0, "", 0);
 8001192:	2200      	movs	r2, #0
 8001194:	4922      	ldr	r1, [pc, #136]	@ (8001220 <WriteIMUDataToSD+0x1a4>)
 8001196:	2000      	movs	r0, #0
 8001198:	f008 fa02 	bl	80095a0 <f_mount>
            return;
 800119c:	e031      	b.n	8001202 <WriteIMUDataToSD+0x186>
        }

        // 🔥 Move to end of file
        f_lseek(&fil, f_size(&fil));
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4823      	ldr	r0, [pc, #140]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 80011a6:	f008 fe18 	bl	8009dda <f_lseek>

        // 🔥 Write data and check for errors
        UINT bytesWritten;
        res = f_write(&fil, buffer, strlen(buffer), &bytesWritten);
 80011aa:	481a      	ldr	r0, [pc, #104]	@ (8001214 <WriteIMUDataToSD+0x198>)
 80011ac:	f7ff f838 	bl	8000220 <strlen>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f107 030c 	add.w	r3, r7, #12
 80011b6:	4917      	ldr	r1, [pc, #92]	@ (8001214 <WriteIMUDataToSD+0x198>)
 80011b8:	481e      	ldr	r0, [pc, #120]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 80011ba:	f008 fbf1 	bl	80099a0 <f_write>
 80011be:	4603      	mov	r3, r0
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 80011c4:	701a      	strb	r2, [r3, #0]
        if (res != FR_OK || bytesWritten == 0) {
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <WriteIMUDataToSD+0x158>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d105      	bne.n	80011e0 <WriteIMUDataToSD+0x164>
            printf("❌ Error writing to file! FATFS result: %d\n", res);
 80011d4:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <WriteIMUDataToSD+0x1bc>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	4819      	ldr	r0, [pc, #100]	@ (8001240 <WriteIMUDataToSD+0x1c4>)
 80011dc:	f009 fd7a 	bl	800acd4 <iprintf>
        } else {
         //   printf("✅ Successfully wrote %d bytes to SD card.\n", bytesWritten);
        }

        // 🔥 Ensure data is written immediately
        f_sync(&fil);
 80011e0:	4814      	ldr	r0, [pc, #80]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 80011e2:	f008 fd52 	bl	8009c8a <f_sync>
        f_close(&fil);
 80011e6:	4813      	ldr	r0, [pc, #76]	@ (8001234 <WriteIMUDataToSD+0x1b8>)
 80011e8:	f008 fdcd 	bl	8009d86 <f_close>
        f_mount(0, "", 0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	490c      	ldr	r1, [pc, #48]	@ (8001220 <WriteIMUDataToSD+0x1a4>)
 80011f0:	2000      	movs	r0, #0
 80011f2:	f008 f9d5 	bl	80095a0 <f_mount>
      //  printf("✅ SD card unmounted.\n");

        // Reset buffer for next batch
        offset = 0;
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <WriteIMUDataToSD+0x18c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
        sample_count = 0;
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <WriteIMUDataToSD+0x194>)
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
    }
}
 8001202:	371c      	adds	r7, #28
 8001204:	46bd      	mov	sp, r7
 8001206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001208:	200007c4 	.word	0x200007c4
 800120c:	0800d768 	.word	0x0800d768
 8001210:	200007c8 	.word	0x200007c8
 8001214:	200007cc 	.word	0x200007cc
 8001218:	0800d79c 	.word	0x0800d79c
 800121c:	0800d7b0 	.word	0x0800d7b0
 8001220:	0800d494 	.word	0x0800d494
 8001224:	20000360 	.word	0x20000360
 8001228:	0800d7d0 	.word	0x0800d7d0
 800122c:	0800d804 	.word	0x0800d804
 8001230:	0800d834 	.word	0x0800d834
 8001234:	20000590 	.word	0x20000590
 8001238:	200007c0 	.word	0x200007c0
 800123c:	0800d840 	.word	0x0800d840
 8001240:	0800d86c 	.word	0x0800d86c

08001244 <ReadIMUData>:



void ReadIMUData() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	@ 0x30
 8001248:	af04      	add	r7, sp, #16
    AccelerometerData accelData;
    GyroscopeData gyroData;
    uint8_t accelDataRaw[6] = {0};
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	2300      	movs	r3, #0
 8001250:	81bb      	strh	r3, [r7, #12]
    uint8_t gyroDataRaw[6] = {0};
 8001252:	2300      	movs	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status;

    // Read Gyroscope Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x22, I2C_MEMADD_SIZE_8BIT, gyroDataRaw, 6, 100);
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	2306      	movs	r3, #6
 8001260:	9301      	str	r3, [sp, #4]
 8001262:	463b      	mov	r3, r7
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2301      	movs	r3, #1
 8001268:	2222      	movs	r2, #34	@ 0x22
 800126a:	21d6      	movs	r1, #214	@ 0xd6
 800126c:	4832      	ldr	r0, [pc, #200]	@ (8001338 <ReadIMUData+0xf4>)
 800126e:	f001 fb01 	bl	8002874 <HAL_I2C_Mem_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 8001276:	7ffb      	ldrb	r3, [r7, #31]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d118      	bne.n	80012ae <ReadIMUData+0x6a>
        gyroData.x = (int16_t)((gyroDataRaw[1] << 8) | gyroDataRaw[0]);
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	783b      	ldrb	r3, [r7, #0]
 8001284:	b21b      	sxth	r3, r3
 8001286:	4313      	orrs	r3, r2
 8001288:	b21b      	sxth	r3, r3
 800128a:	823b      	strh	r3, [r7, #16]
        gyroData.y = (int16_t)((gyroDataRaw[3] << 8) | gyroDataRaw[2]);
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	b21a      	sxth	r2, r3
 8001292:	78bb      	ldrb	r3, [r7, #2]
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	b21b      	sxth	r3, r3
 800129a:	827b      	strh	r3, [r7, #18]
        gyroData.z = (int16_t)((gyroDataRaw[5] << 8) | gyroDataRaw[4]);
 800129c:	797b      	ldrb	r3, [r7, #5]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	793b      	ldrb	r3, [r7, #4]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	82bb      	strh	r3, [r7, #20]
 80012ac:	e004      	b.n	80012b8 <ReadIMUData+0x74>
    } else {
        printf("❌ Error reading gyroscope data! Status: %d\n", status);
 80012ae:	7ffb      	ldrb	r3, [r7, #31]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4822      	ldr	r0, [pc, #136]	@ (800133c <ReadIMUData+0xf8>)
 80012b4:	f009 fd0e 	bl	800acd4 <iprintf>
    }

    // Read Accelerometer Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x28, I2C_MEMADD_SIZE_8BIT, accelDataRaw, 6, 100);
 80012b8:	2364      	movs	r3, #100	@ 0x64
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	2306      	movs	r3, #6
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	f107 0308 	add.w	r3, r7, #8
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2301      	movs	r3, #1
 80012c8:	2228      	movs	r2, #40	@ 0x28
 80012ca:	21d6      	movs	r1, #214	@ 0xd6
 80012cc:	481a      	ldr	r0, [pc, #104]	@ (8001338 <ReadIMUData+0xf4>)
 80012ce:	f001 fad1 	bl	8002874 <HAL_I2C_Mem_Read>
 80012d2:	4603      	mov	r3, r0
 80012d4:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d118      	bne.n	800130e <ReadIMUData+0xca>
        accelData.x = (int16_t)((accelDataRaw[1] << 8) | accelDataRaw[0]);
 80012dc:	7a7b      	ldrb	r3, [r7, #9]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	7a3b      	ldrb	r3, [r7, #8]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	833b      	strh	r3, [r7, #24]
        accelData.y = (int16_t)((accelDataRaw[3] << 8) | accelDataRaw[2]);
 80012ec:	7afb      	ldrb	r3, [r7, #11]
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	7abb      	ldrb	r3, [r7, #10]
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	837b      	strh	r3, [r7, #26]
        accelData.z = (int16_t)((accelDataRaw[5] << 8) | accelDataRaw[4]);
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	021b      	lsls	r3, r3, #8
 8001300:	b21a      	sxth	r2, r3
 8001302:	7b3b      	ldrb	r3, [r7, #12]
 8001304:	b21b      	sxth	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b21b      	sxth	r3, r3
 800130a:	83bb      	strh	r3, [r7, #28]
 800130c:	e004      	b.n	8001318 <ReadIMUData+0xd4>
    } else {
        printf("❌ Error reading accelerometer data! Status: %d\n", status);
 800130e:	7ffb      	ldrb	r3, [r7, #31]
 8001310:	4619      	mov	r1, r3
 8001312:	480b      	ldr	r0, [pc, #44]	@ (8001340 <ReadIMUData+0xfc>)
 8001314:	f009 fcde 	bl	800acd4 <iprintf>
    }

    // 🔥 Write data to SD card immediately after reading
    WriteIMUDataToSD(&accelData, &gyroData);
 8001318:	f107 0210 	add.w	r2, r7, #16
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff feaa 	bl	800107c <WriteIMUDataToSD>

    // Delay for next reading
    HAL_Delay(10); // Adjust based on your sampling rate
 8001328:	200a      	movs	r0, #10
 800132a:	f000 fdc7 	bl	8001ebc <HAL_Delay>
}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000214 	.word	0x20000214
 800133c:	0800d89c 	.word	0x0800d89c
 8001340:	0800d8cc 	.word	0x0800d8cc

08001344 <WaitForStart>:





void WaitForStart() {
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
    static uint32_t startTime = 0;
    static uint8_t readyToStart = 0;
    static uint8_t readingIMU = 0;
    static int lastPrintedSecond = -1;  // Track last printed second

    if (!readyToStart) {
 800134a:	4b2c      	ldr	r3, [pc, #176]	@ (80013fc <WaitForStart+0xb8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d137      	bne.n	80013c2 <WaitForStart+0x7e>
        if (startTime == 0) {
 8001352:	4b2b      	ldr	r3, [pc, #172]	@ (8001400 <WaitForStart+0xbc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <WaitForStart+0x26>
            startTime = HAL_GetTick();  // Capture start time
 800135a:	f000 fd97 	bl	8001e8c <HAL_GetTick>
 800135e:	4603      	mov	r3, r0
 8001360:	4a27      	ldr	r2, [pc, #156]	@ (8001400 <WaitForStart+0xbc>)
 8001362:	6013      	str	r3, [r2, #0]
            printf("⏳ Waiting 30 seconds before starting IMU acquisition...\n");
 8001364:	4827      	ldr	r0, [pc, #156]	@ (8001404 <WaitForStart+0xc0>)
 8001366:	f009 fd1d 	bl	800ada4 <puts>
        }

        // Calculate elapsed time
        uint32_t elapsedTime = HAL_GetTick() - startTime;
 800136a:	f000 fd8f 	bl	8001e8c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	4b23      	ldr	r3, [pc, #140]	@ (8001400 <WaitForStart+0xbc>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	607b      	str	r3, [r7, #4]
        int elapsedSeconds = elapsedTime / 1000;  // Convert to seconds
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <WaitForStart+0xc4>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	603b      	str	r3, [r7, #0]

        // Print countdown every second
        if (elapsedSeconds != lastPrintedSecond) {
 8001384:	4b21      	ldr	r3, [pc, #132]	@ (800140c <WaitForStart+0xc8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d006      	beq.n	800139c <WaitForStart+0x58>
            printf("⏳ Time not elapsed yet: %d / 30 sec\n", elapsedSeconds);
 800138e:	6839      	ldr	r1, [r7, #0]
 8001390:	481f      	ldr	r0, [pc, #124]	@ (8001410 <WaitForStart+0xcc>)
 8001392:	f009 fc9f 	bl	800acd4 <iprintf>
            lastPrintedSecond = elapsedSeconds;
 8001396:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <WaitForStart+0xc8>)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	6013      	str	r3, [r2, #0]
        }

        // Check if 30 seconds have passed
        if (elapsedTime >= START_DELAY) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f247 522f 	movw	r2, #29999	@ 0x752f
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d90d      	bls.n	80013c2 <WaitForStart+0x7e>
            readyToStart = 1;
 80013a6:	4b15      	ldr	r3, [pc, #84]	@ (80013fc <WaitForStart+0xb8>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
            readingIMU = 1;
 80013ac:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <WaitForStart+0xd0>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	701a      	strb	r2, [r3, #0]
            startTime = HAL_GetTick();  // Reset timer for 3-minute countdown
 80013b2:	f000 fd6b 	bl	8001e8c <HAL_GetTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <WaitForStart+0xbc>)
 80013ba:	6013      	str	r3, [r2, #0]
            printf("✅ 30 seconds elapsed! Starting 3-minute IMU acquisition...\n");
 80013bc:	4816      	ldr	r0, [pc, #88]	@ (8001418 <WaitForStart+0xd4>)
 80013be:	f009 fcf1 	bl	800ada4 <puts>
        }
    }

    // If 3-minute window is active, collect data
    if (readyToStart && readingIMU) {
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <WaitForStart+0xb8>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d014      	beq.n	80013f4 <WaitForStart+0xb0>
 80013ca:	4b12      	ldr	r3, [pc, #72]	@ (8001414 <WaitForStart+0xd0>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d010      	beq.n	80013f4 <WaitForStart+0xb0>
        ReadIMUData();  // Collect IMU data
 80013d2:	f7ff ff37 	bl	8001244 <ReadIMUData>

        // Check if 3 minutes have passed
        if (HAL_GetTick() - startTime >= READ_DURATION) {
 80013d6:	f000 fd59 	bl	8001e8c <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <WaitForStart+0xbc>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <WaitForStart+0xd8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d905      	bls.n	80013f4 <WaitForStart+0xb0>
            readingIMU = 0;  // Stop data collection
 80013e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <WaitForStart+0xd0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
            printf("✅ 3-minute IMU acquisition complete. Stopping data collection.\n");
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <WaitForStart+0xdc>)
 80013f0:	f009 fcd8 	bl	800ada4 <puts>
        }
    }
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000cb1c 	.word	0x2000cb1c
 8001400:	2000cb20 	.word	0x2000cb20
 8001404:	0800d900 	.word	0x0800d900
 8001408:	10624dd3 	.word	0x10624dd3
 800140c:	20000008 	.word	0x20000008
 8001410:	0800d93c 	.word	0x0800d93c
 8001414:	2000cb24 	.word	0x2000cb24
 8001418:	0800d964 	.word	0x0800d964
 800141c:	0002bf1f 	.word	0x0002bf1f
 8001420:	0800d9a4 	.word	0x0800d9a4

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800142a:	f000 fcc1 	bl	8001db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142e:	f000 f881 	bl	8001534 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001432:	f000 f8d7 	bl	80015e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001436:	f000 f9bd 	bl	80017b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800143a:	f000 f8f1 	bl	8001620 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800143e:	f000 f92f 	bl	80016a0 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001442:	f000 f979 	bl	8001738 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001446:	f005 fe1f 	bl	8007088 <MX_FATFS_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <main+0x30>
    Error_Handler();
 8001450:	f000 f9f4 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001454:	2201      	movs	r2, #1
 8001456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800145a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145e:	f001 f83d 	bl	80024dc <HAL_GPIO_WritePin>

  HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1, LIS3DH_I2C_ADDRESS, 3, 100);
 8001462:	2364      	movs	r3, #100	@ 0x64
 8001464:	2203      	movs	r2, #3
 8001466:	2132      	movs	r1, #50	@ 0x32
 8001468:	482a      	ldr	r0, [pc, #168]	@ (8001514 <main+0xf0>)
 800146a:	f001 fb1d 	bl	8002aa8 <HAL_I2C_IsDeviceReady>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d103      	bne.n	8001480 <main+0x5c>
    {
        // Device is ready
        printf("LIS3DH is ready for communication.\n");
 8001478:	4827      	ldr	r0, [pc, #156]	@ (8001518 <main+0xf4>)
 800147a:	f009 fc93 	bl	800ada4 <puts>
 800147e:	e004      	b.n	800148a <main+0x66>
    }
    else
    {
        // Device not ready or communication failed
        printf("LIS3DH is not ready. HAL_StatusTypeDef: %d\n", status);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	4619      	mov	r1, r3
 8001484:	4825      	ldr	r0, [pc, #148]	@ (800151c <main+0xf8>)
 8001486:	f009 fc25 	bl	800acd4 <iprintf>
    }




status = HAL_I2C_IsDeviceReady(&hi2c1, ISM330DHCX_I2C_ADDRESS, 3, 100);
 800148a:	2364      	movs	r3, #100	@ 0x64
 800148c:	2203      	movs	r2, #3
 800148e:	21d6      	movs	r1, #214	@ 0xd6
 8001490:	4820      	ldr	r0, [pc, #128]	@ (8001514 <main+0xf0>)
 8001492:	f001 fb09 	bl	8002aa8 <HAL_I2C_IsDeviceReady>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]

	    if (status == HAL_OK)
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d103      	bne.n	80014a8 <main+0x84>
	    {
	        // Device is ready
	        printf("Gyro is ready for communication.\n");
 80014a0:	481f      	ldr	r0, [pc, #124]	@ (8001520 <main+0xfc>)
 80014a2:	f009 fc7f 	bl	800ada4 <puts>
 80014a6:	e004      	b.n	80014b2 <main+0x8e>
	    }
	    else
	    {
	        // Device not ready or communication failed
	        printf("Gyro is not ready. HAL_StatusTypeDef: %d\n", status);
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	4619      	mov	r1, r3
 80014ac:	481d      	ldr	r0, [pc, #116]	@ (8001524 <main+0x100>)
 80014ae:	f009 fc11 	bl	800acd4 <iprintf>


	   // InitializeLIS3DH_HighPrecision();
//    InitializeLIS3DH();
   // InitializeISM330DHCX();
    InitializeISM330DHCX2();
 80014b2:	f7ff fd25 	bl	8000f00 <InitializeISM330DHCX2>
//  LIS3DH_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_I2C_Mem_Read(&hi2c1, LIS3DH_I2C_ADDRESS, 0x0F, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
 80014b6:	2364      	movs	r3, #100	@ 0x64
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <main+0x104>)
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	220f      	movs	r2, #15
 80014c6:	2132      	movs	r1, #50	@ 0x32
 80014c8:	4812      	ldr	r0, [pc, #72]	@ (8001514 <main+0xf0>)
 80014ca:	f001 f9d3 	bl	8002874 <HAL_I2C_Mem_Read>
    HAL_Delay(500);
 80014ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014d2:	f000 fcf3 	bl	8001ebc <HAL_Delay>
    printf(" LIS3DH WHO_AM_I: 0x%02X\n", who_am_i); // should get  0x33
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <main+0x104>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	4619      	mov	r1, r3
 80014dc:	4813      	ldr	r0, [pc, #76]	@ (800152c <main+0x108>)
 80014de:	f009 fbf9 	bl	800acd4 <iprintf>

    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x0F, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
 80014e2:	2364      	movs	r3, #100	@ 0x64
 80014e4:	9302      	str	r3, [sp, #8]
 80014e6:	2301      	movs	r3, #1
 80014e8:	9301      	str	r3, [sp, #4]
 80014ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <main+0x104>)
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2301      	movs	r3, #1
 80014f0:	220f      	movs	r2, #15
 80014f2:	21d6      	movs	r1, #214	@ 0xd6
 80014f4:	4807      	ldr	r0, [pc, #28]	@ (8001514 <main+0xf0>)
 80014f6:	f001 f9bd 	bl	8002874 <HAL_I2C_Mem_Read>
    HAL_Delay(500);
 80014fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014fe:	f000 fcdd 	bl	8001ebc <HAL_Delay>
    printf("ISM330DHCX WHO_AM_I: 0x%02X\n", who_am_i); // should get  0x6B
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <main+0x104>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4619      	mov	r1, r3
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <main+0x10c>)
 800150a:	f009 fbe3 	bl	800acd4 <iprintf>





	  WaitForStart();
 800150e:	f7ff ff19 	bl	8001344 <WaitForStart>
 8001512:	e7fc      	b.n	800150e <main+0xea>
 8001514:	20000214 	.word	0x20000214
 8001518:	0800d9e8 	.word	0x0800d9e8
 800151c:	0800da0c 	.word	0x0800da0c
 8001520:	0800da38 	.word	0x0800da38
 8001524:	0800da5c 	.word	0x0800da5c
 8001528:	200007c1 	.word	0x200007c1
 800152c:	0800da88 	.word	0x0800da88
 8001530:	0800daa4 	.word	0x0800daa4

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09a      	sub	sp, #104	@ 0x68
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2248      	movs	r2, #72	@ 0x48
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f009 fd42 	bl	800afcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	611a      	str	r2, [r3, #16]
 8001556:	615a      	str	r2, [r3, #20]
 8001558:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155a:	4b21      	ldr	r3, [pc, #132]	@ (80015e0 <SystemClock_Config+0xac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001562:	4a1f      	ldr	r2, [pc, #124]	@ (80015e0 <SystemClock_Config+0xac>)
 8001564:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <SystemClock_Config+0xac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001576:	2322      	movs	r3, #34	@ 0x22
 8001578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800157e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001580:	2301      	movs	r3, #1
 8001582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001584:	2340      	movs	r3, #64	@ 0x40
 8001586:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001588:	2300      	movs	r3, #0
 800158a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800158c:	23a0      	movs	r3, #160	@ 0xa0
 800158e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001590:	2300      	movs	r3, #0
 8001592:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 0320 	add.w	r3, r7, #32
 8001598:	4618      	mov	r0, r3
 800159a:	f002 ffe3 	bl	8004564 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015a4:	f000 f94a 	bl	800183c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015a8:	236f      	movs	r3, #111	@ 0x6f
 80015aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fb3f 	bl	8004c4c <HAL_RCC_ClockConfig>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80015d4:	f000 f932 	bl	800183c <Error_Handler>
  }
}
 80015d8:	bf00      	nop
 80015da:	3768      	adds	r7, #104	@ 0x68
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58000400 	.word	0x58000400

080015e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b094      	sub	sp, #80	@ 0x50
 80015e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2250      	movs	r2, #80	@ 0x50
 80015ee:	2100      	movs	r1, #0
 80015f0:	4618      	mov	r0, r3
 80015f2:	f009 fceb 	bl	800afcc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80015f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fa:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80015fc:	2300      	movs	r3, #0
 80015fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001600:	2310      	movs	r3, #16
 8001602:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4618      	mov	r0, r3
 8001608:	f003 ff5f 	bl	80054ca <HAL_RCCEx_PeriphCLKConfig>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001612:	f000 f913 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001616:	bf00      	nop
 8001618:	3750      	adds	r7, #80	@ 0x50
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001626:	4a1c      	ldr	r2, [pc, #112]	@ (8001698 <MX_I2C1_Init+0x78>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800162a:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_I2C1_Init+0x74>)
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <MX_I2C1_Init+0x7c>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001630:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001648:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <MX_I2C1_Init+0x74>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <MX_I2C1_Init+0x74>)
 800165c:	f000 ff56 	bl	800250c <HAL_I2C_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001666:	f000 f8e9 	bl	800183c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	4809      	ldr	r0, [pc, #36]	@ (8001694 <MX_I2C1_Init+0x74>)
 800166e:	f002 fb4d 	bl	8003d0c <HAL_I2CEx_ConfigAnalogFilter>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001678:	f000 f8e0 	bl	800183c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800167c:	2100      	movs	r1, #0
 800167e:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_I2C1_Init+0x74>)
 8001680:	f002 fb8f 	bl	8003da2 <HAL_I2CEx_ConfigDigitalFilter>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 f8d7 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000214 	.word	0x20000214
 8001698:	40005400 	.word	0x40005400
 800169c:	00b07cb4 	.word	0x00b07cb4

080016a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016a4:	4b22      	ldr	r3, [pc, #136]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <MX_LPUART1_UART_Init+0x94>)
 80016a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016be:	4b1c      	ldr	r3, [pc, #112]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ca:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016d6:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016d8:	2200      	movs	r2, #0
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016de:	2200      	movs	r2, #0
 80016e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80016e2:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016e8:	4811      	ldr	r0, [pc, #68]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016ea:	f004 ff33 	bl	8006554 <HAL_UART_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80016f4:	f000 f8a2 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 80016fc:	f005 fbfa 	bl	8006ef4 <HAL_UARTEx_SetTxFifoThreshold>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001706:	f000 f899 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4808      	ldr	r0, [pc, #32]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 800170e:	f005 fc2f 	bl	8006f70 <HAL_UARTEx_SetRxFifoThreshold>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001718:	f000 f890 	bl	800183c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <MX_LPUART1_UART_Init+0x90>)
 800171e:	f005 fbb0 	bl	8006e82 <HAL_UARTEx_DisableFifoMode>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001728:	f000 f888 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000268 	.word	0x20000268
 8001734:	40008000 	.word	0x40008000

08001738 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800173c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ac <MX_SPI1_Init+0x74>)
 800173e:	4a1c      	ldr	r2, [pc, #112]	@ (80017b0 <MX_SPI1_Init+0x78>)
 8001740:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001744:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001748:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_SPI1_Init+0x74>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001750:	4b16      	ldr	r3, [pc, #88]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001752:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001756:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <MX_SPI1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800175e:	4b13      	ldr	r3, [pc, #76]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001766:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800176c:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <MX_SPI1_Init+0x74>)
 800176e:	2230      	movs	r2, #48	@ 0x30
 8001770:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001772:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <MX_SPI1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001786:	2207      	movs	r2, #7
 8001788:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800178a:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <MX_SPI1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001792:	2208      	movs	r2, #8
 8001794:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_SPI1_Init+0x74>)
 8001798:	f004 f91e 	bl	80059d8 <HAL_SPI_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017a2:	f000 f84b 	bl	800183c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200002fc 	.word	0x200002fc
 80017b0:	40013000 	.word	0x40013000

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff fb64 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fb61 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d4:	2004      	movs	r0, #4
 80017d6:	f7ff fb5e 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|SA0_Pin, GPIO_PIN_RESET);
 80017da:	2200      	movs	r2, #0
 80017dc:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e4:	f000 fe7a 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017ee:	4812      	ldr	r0, [pc, #72]	@ (8001838 <MX_GPIO_Init+0x84>)
 80017f0:	f000 fe74 	bl	80024dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SA0_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SA0_Pin;
 80017f4:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 80017f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	4619      	mov	r1, r3
 800180a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800180e:	f000 fcf5 	bl	80021fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001812:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001816:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4803      	ldr	r0, [pc, #12]	@ (8001838 <MX_GPIO_Init+0x84>)
 800182a:	f000 fce7 	bl	80021fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	48000800 	.word	0x48000800

0800183c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001840:	b672      	cpsid	i
}
 8001842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <Error_Handler+0x8>

08001848 <LL_AHB2_GRP1_EnableClock>:
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001856:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4313      	orrs	r3, r2
 800185e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800186c:	68fb      	ldr	r3, [r7, #12]
}
 800186e:	bf00      	nop
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80018b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80018c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	bf00      	nop
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018ea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4013      	ands	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b09c      	sub	sp, #112	@ 0x70
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2250      	movs	r2, #80	@ 0x50
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f009 fb43 	bl	800afcc <memset>
  if(hi2c->Instance==I2C1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1f      	ldr	r2, [pc, #124]	@ (80019c8 <HAL_I2C_MspInit+0xa8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d136      	bne.n	80019be <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001950:	2304      	movs	r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001954:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fdb3 	bl	80054ca <HAL_RCCEx_PeriphCLKConfig>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800196a:	f7ff ff67 	bl	800183c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2002      	movs	r0, #2
 8001970:	f7ff ff6a 	bl	8001848 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001974:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001978:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001986:	2304      	movs	r3, #4
 8001988:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800198e:	4619      	mov	r1, r3
 8001990:	480e      	ldr	r0, [pc, #56]	@ (80019cc <HAL_I2C_MspInit+0xac>)
 8001992:	f000 fc33 	bl	80021fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001996:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800199a:	f7ff ff6e 	bl	800187a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	201e      	movs	r0, #30
 80019a4:	f000 fb89 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019a8:	201e      	movs	r0, #30
 80019aa:	f000 fba0 	bl	80020ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2100      	movs	r1, #0
 80019b2:	201f      	movs	r0, #31
 80019b4:	f000 fb81 	bl	80020ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019b8:	201f      	movs	r0, #31
 80019ba:	f000 fb98 	bl	80020ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80019be:	bf00      	nop
 80019c0:	3770      	adds	r7, #112	@ 0x70
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40005400 	.word	0x40005400
 80019cc:	48000400 	.word	0x48000400

080019d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b09c      	sub	sp, #112	@ 0x70
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e8:	f107 030c 	add.w	r3, r7, #12
 80019ec:	2250      	movs	r2, #80	@ 0x50
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f009 faeb 	bl	800afcc <memset>
  if(huart->Instance==LPUART1)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a16      	ldr	r2, [pc, #88]	@ (8001a54 <HAL_UART_MspInit+0x84>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d124      	bne.n	8001a4a <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f003 fd5c 	bl	80054ca <HAL_RCCEx_PeriphCLKConfig>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a18:	f7ff ff10 	bl	800183c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff ff45 	bl	80018ac <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2002      	movs	r0, #2
 8001a24:	f7ff ff10 	bl	8001848 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <HAL_UART_MspInit+0x88>)
 8001a46:	f000 fbd9 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3770      	adds	r7, #112	@ 0x70
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40008000 	.word	0x40008000
 8001a58:	48000400 	.word	0x48000400

08001a5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b088      	sub	sp, #32
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab8 <HAL_SPI_MspInit+0x5c>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d117      	bne.n	8001aae <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001a82:	f7ff ff2c 	bl	80018de <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fede 	bl	8001848 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001a8c:	23c2      	movs	r3, #194	@ 0xc2
 8001a8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a9c:	2305      	movs	r3, #5
 8001a9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001aaa:	f000 fba7 	bl	80021fc <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40013000 	.word	0x40013000

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <HardFault_Handler+0x4>

08001acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <MemManage_Handler+0x4>

08001ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad8:	bf00      	nop
 8001ada:	e7fd      	b.n	8001ad8 <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	bf00      	nop
 8001ae2:	e7fd      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b12:	f000 f9a7 	bl	8001e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <I2C1_EV_IRQHandler+0x10>)
 8001b22:	f001 f8ad 	bl	8002c80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000214 	.word	0x20000214

08001b30 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b34:	4802      	ldr	r0, [pc, #8]	@ (8001b40 <I2C1_ER_IRQHandler+0x10>)
 8001b36:	f001 f8bd 	bl	8002cb4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000214 	.word	0x20000214

08001b44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return 1;
 8001b48:	2301      	movs	r3, #1
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_kill>:

int _kill(int pid, int sig)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b5e:	f009 fa87 	bl	800b070 <__errno>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2216      	movs	r2, #22
 8001b66:	601a      	str	r2, [r3, #0]
  return -1;
 8001b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <_exit>:

void _exit (int status)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff ffe7 	bl	8001b54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b86:	bf00      	nop
 8001b88:	e7fd      	b.n	8001b86 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bec:	605a      	str	r2, [r3, #4]
  return 0;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_isatty>:

int _isatty(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c04:	2301      	movs	r3, #1
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b085      	sub	sp, #20
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c34:	4a14      	ldr	r2, [pc, #80]	@ (8001c88 <_sbrk+0x5c>)
 8001c36:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <_sbrk+0x60>)
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <_sbrk+0x64>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d102      	bne.n	8001c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c48:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <_sbrk+0x64>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	@ (8001c94 <_sbrk+0x68>)
 8001c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d207      	bcs.n	8001c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c5c:	f009 fa08 	bl	800b070 <__errno>
 8001c60:	4603      	mov	r3, r0
 8001c62:	220c      	movs	r2, #12
 8001c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	e009      	b.n	8001c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <_sbrk+0x64>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c72:	4b07      	ldr	r3, [pc, #28]	@ (8001c90 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <_sbrk+0x64>)
 8001c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3718      	adds	r7, #24
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20030000 	.word	0x20030000
 8001c8c:	00000400 	.word	0x00000400
 8001c90:	2000cb28 	.word	0x2000cb28
 8001c94:	2000ccc0 	.word	0x2000ccc0

08001c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001c9c:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <SystemInit+0x98>)
 8001c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ca2:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <SystemInit+0x98>)
 8001ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <SystemInit+0x9c>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ce2:	f023 0305 	bic.w	r3, r3, #5
 8001ce6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cf2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cf6:	f023 0301 	bic.w	r3, r3, #1
 8001cfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d02:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <SystemInit+0xa0>)
 8001d04:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d38 <SystemInit+0xa0>)
 8001d0c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00
 8001d34:	faf6fefb 	.word	0xfaf6fefb
 8001d38:	22041000 	.word	0x22041000

08001d3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001d3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d40:	3304      	adds	r3, #4

08001d42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001d46:	d3f9      	bcc.n	8001d3c <CopyDataInit>
  bx lr
 8001d48:	4770      	bx	lr

08001d4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001d4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001d4c:	3004      	adds	r0, #4

08001d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001d4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001d50:	d3fb      	bcc.n	8001d4a <FillZerobss>
  bx lr
 8001d52:	4770      	bx	lr

08001d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d54:	480c      	ldr	r0, [pc, #48]	@ (8001d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d58:	f7ff ff9e 	bl	8001c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001d5c:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <LoopForever+0x6>)
 8001d5e:	490c      	ldr	r1, [pc, #48]	@ (8001d90 <LoopForever+0xa>)
 8001d60:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <LoopForever+0xe>)
 8001d62:	2300      	movs	r3, #0
 8001d64:	f7ff ffed 	bl	8001d42 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d68:	480b      	ldr	r0, [pc, #44]	@ (8001d98 <LoopForever+0x12>)
 8001d6a:	490c      	ldr	r1, [pc, #48]	@ (8001d9c <LoopForever+0x16>)
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <LoopForever+0x1a>)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f7ff ffe7 	bl	8001d42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001d74:	480b      	ldr	r0, [pc, #44]	@ (8001da4 <LoopForever+0x1e>)
 8001d76:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <LoopForever+0x22>)
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f7ff ffe8 	bl	8001d4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d7e:	f009 f97d 	bl	800b07c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d82:	f7ff fb4f 	bl	8001424 <main>

08001d86 <LoopForever>:

LoopForever:
  b LoopForever
 8001d86:	e7fe      	b.n	8001d86 <LoopForever>
  ldr   r0, =_estack
 8001d88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	200001f8 	.word	0x200001f8
 8001d94:	0800e030 	.word	0x0800e030
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001d98:	20030000 	.word	0x20030000
 8001d9c:	20030000 	.word	0x20030000
 8001da0:	0800e220 	.word	0x0800e220
  INIT_BSS _sbss, _ebss
 8001da4:	200001f8 	.word	0x200001f8
 8001da8:	2000ccc0 	.word	0x2000ccc0

08001dac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dac:	e7fe      	b.n	8001dac <ADC1_IRQHandler>
	...

08001db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dba:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <HAL_Init+0x3c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001dec <HAL_Init+0x3c>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f000 f96c 	bl	80020a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dcc:	200f      	movs	r0, #15
 8001dce:	f000 f80f 	bl	8001df0 <HAL_InitTick>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	71fb      	strb	r3, [r7, #7]
 8001ddc:	e001      	b.n	8001de2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dde:	f7ff fd97 	bl	8001910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001de2:	79fb      	ldrb	r3, [r7, #7]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58004000 	.word	0x58004000

08001df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d024      	beq.n	8001e4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e04:	f003 f8d0 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_InitTick+0x6c>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f974 	bl	800210a <HAL_SYSTICK_Config>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10f      	bne.n	8001e48 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b0f      	cmp	r3, #15
 8001e2c:	d809      	bhi.n	8001e42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	f04f 30ff 	mov.w	r0, #4294967295
 8001e36:	f000 f940 	bl	80020ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_InitTick+0x70>)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	73fb      	strb	r3, [r7, #15]
 8001e46:	e004      	b.n	8001e52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000014 	.word	0x20000014
 8001e60:	20000010 	.word	0x20000010

08001e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_IncTick+0x20>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b06      	ldr	r3, [pc, #24]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4413      	add	r3, r2
 8001e74:	4a04      	ldr	r2, [pc, #16]	@ (8001e88 <HAL_IncTick+0x24>)
 8001e76:	6013      	str	r3, [r2, #0]
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	20000014 	.word	0x20000014
 8001e88:	2000cb2c 	.word	0x2000cb2c

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b03      	ldr	r3, [pc, #12]	@ (8001ea0 <HAL_GetTick+0x14>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	2000cb2c 	.word	0x2000cb2c

08001ea4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTickPrio+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20000010 	.word	0x20000010

08001ebc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec4:	f7ff ffe2 	bl	8001e8c <HAL_GetTick>
 8001ec8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed4:	d005      	beq.n	8001ee2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f00 <HAL_Delay+0x44>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	bf00      	nop
 8001ee4:	f7ff ffd2 	bl	8001e8c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d8f7      	bhi.n	8001ee4 <HAL_Delay+0x28>
  {
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000014 	.word	0x20000014

08001f04 <__NVIC_SetPriorityGrouping>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f1a:	68ba      	ldr	r2, [r7, #8]
 8001f1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f20:	4013      	ands	r3, r2
 8001f22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f36:	4a04      	ldr	r2, [pc, #16]	@ (8001f48 <__NVIC_SetPriorityGrouping+0x44>)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	60d3      	str	r3, [r2, #12]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <__NVIC_GetPriorityGrouping>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f50:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <__NVIC_GetPriorityGrouping+0x18>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	0a1b      	lsrs	r3, r3, #8
 8001f56:	f003 0307 	and.w	r3, r3, #7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_EnableIRQ>:
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	db0b      	blt.n	8001f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	4907      	ldr	r1, [pc, #28]	@ (8001fa0 <__NVIC_EnableIRQ+0x38>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	095b      	lsrs	r3, r3, #5
 8001f88:	2001      	movs	r0, #1
 8001f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000e100 	.word	0xe000e100

08001fa4 <__NVIC_SetPriority>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	6039      	str	r1, [r7, #0]
 8001fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	db0a      	blt.n	8001fce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	490c      	ldr	r1, [pc, #48]	@ (8001ff0 <__NVIC_SetPriority+0x4c>)
 8001fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc2:	0112      	lsls	r2, r2, #4
 8001fc4:	b2d2      	uxtb	r2, r2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001fcc:	e00a      	b.n	8001fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	b2da      	uxtb	r2, r3
 8001fd2:	4908      	ldr	r1, [pc, #32]	@ (8001ff4 <__NVIC_SetPriority+0x50>)
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	3b04      	subs	r3, #4
 8001fdc:	0112      	lsls	r2, r2, #4
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	761a      	strb	r2, [r3, #24]
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <NVIC_EncodePriority>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	f1c3 0307 	rsb	r3, r3, #7
 8002012:	2b04      	cmp	r3, #4
 8002014:	bf28      	it	cs
 8002016:	2304      	movcs	r3, #4
 8002018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3304      	adds	r3, #4
 800201e:	2b06      	cmp	r3, #6
 8002020:	d902      	bls.n	8002028 <NVIC_EncodePriority+0x30>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3b03      	subs	r3, #3
 8002026:	e000      	b.n	800202a <NVIC_EncodePriority+0x32>
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800202c:	f04f 32ff 	mov.w	r2, #4294967295
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	401a      	ands	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002040:	f04f 31ff 	mov.w	r1, #4294967295
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43d9      	mvns	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	4313      	orrs	r3, r2
}
 8002052:	4618      	mov	r0, r3
 8002054:	3724      	adds	r7, #36	@ 0x24
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <SysTick_Config>:
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002070:	d301      	bcc.n	8002076 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002072:	2301      	movs	r3, #1
 8002074:	e00f      	b.n	8002096 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <SysTick_Config+0x40>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800207e:	210f      	movs	r1, #15
 8002080:	f04f 30ff 	mov.w	r0, #4294967295
 8002084:	f7ff ff8e 	bl	8001fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002088:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <SysTick_Config+0x40>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800208e:	4b04      	ldr	r3, [pc, #16]	@ (80020a0 <SysTick_Config+0x40>)
 8002090:	2207      	movs	r2, #7
 8002092:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	e000e010 	.word	0xe000e010

080020a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff29 	bl	8001f04 <__NVIC_SetPriorityGrouping>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b086      	sub	sp, #24
 80020be:	af00      	add	r7, sp, #0
 80020c0:	4603      	mov	r3, r0
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020c8:	f7ff ff40 	bl	8001f4c <__NVIC_GetPriorityGrouping>
 80020cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	68b9      	ldr	r1, [r7, #8]
 80020d2:	6978      	ldr	r0, [r7, #20]
 80020d4:	f7ff ff90 	bl	8001ff8 <NVIC_EncodePriority>
 80020d8:	4602      	mov	r2, r0
 80020da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff5f 	bl	8001fa4 <__NVIC_SetPriority>
}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	4603      	mov	r3, r0
 80020f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff33 	bl	8001f68 <__NVIC_EnableIRQ>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ffa4 	bl	8002060 <SysTick_Config>
 8002118:	4603      	mov	r3, r0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212a:	2300      	movs	r3, #0
 800212c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d005      	beq.n	8002146 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e047      	b.n	80021d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020e 	bic.w	r2, r2, #14
 8002154:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0201 	bic.w	r2, r2, #1
 8002164:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002174:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217a:	f003 021c 	and.w	r2, r3, #28
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	2101      	movs	r1, #1
 8002184:	fa01 f202 	lsl.w	r2, r1, r2
 8002188:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002192:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00c      	beq.n	80021b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80021aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	4798      	blx	r3
    }
  }
  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80021ee:	b2db      	uxtb	r3, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b087      	sub	sp, #28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800220a:	e14c      	b.n	80024a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2101      	movs	r1, #1
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fa01 f303 	lsl.w	r3, r1, r3
 8002218:	4013      	ands	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 813e 	beq.w	80024a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d005      	beq.n	800223c <HAL_GPIO_Init+0x40>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d130      	bne.n	800229e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4013      	ands	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002272:	2201      	movs	r2, #1
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	4013      	ands	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	091b      	lsrs	r3, r3, #4
 8002288:	f003 0201 	and.w	r2, r3, #1
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d017      	beq.n	80022da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	693a      	ldr	r2, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d123      	bne.n	800232e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	220f      	movs	r2, #15
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4013      	ands	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	08da      	lsrs	r2, r3, #3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3208      	adds	r2, #8
 8002328:	6939      	ldr	r1, [r7, #16]
 800232a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	2203      	movs	r2, #3
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8098 	beq.w	80024a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002370:	4a54      	ldr	r2, [pc, #336]	@ (80024c4 <HAL_GPIO_Init+0x2c8>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4013      	ands	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800239a:	d019      	beq.n	80023d0 <HAL_GPIO_Init+0x1d4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a4a      	ldr	r2, [pc, #296]	@ (80024c8 <HAL_GPIO_Init+0x2cc>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1d0>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a49      	ldr	r2, [pc, #292]	@ (80024cc <HAL_GPIO_Init+0x2d0>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1cc>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a48      	ldr	r2, [pc, #288]	@ (80024d0 <HAL_GPIO_Init+0x2d4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1c8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a47      	ldr	r2, [pc, #284]	@ (80024d4 <HAL_GPIO_Init+0x2d8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1c4>
 80023bc:	2304      	movs	r3, #4
 80023be:	e008      	b.n	80023d2 <HAL_GPIO_Init+0x1d6>
 80023c0:	2307      	movs	r3, #7
 80023c2:	e006      	b.n	80023d2 <HAL_GPIO_Init+0x1d6>
 80023c4:	2303      	movs	r3, #3
 80023c6:	e004      	b.n	80023d2 <HAL_GPIO_Init+0x1d6>
 80023c8:	2302      	movs	r3, #2
 80023ca:	e002      	b.n	80023d2 <HAL_GPIO_Init+0x1d6>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <HAL_GPIO_Init+0x1d6>
 80023d0:	2300      	movs	r3, #0
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	f002 0203 	and.w	r2, r2, #3
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	4093      	lsls	r3, r2
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023e2:	4938      	ldr	r1, [pc, #224]	@ (80024c4 <HAL_GPIO_Init+0x2c8>)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3302      	adds	r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023f0:	4b39      	ldr	r3, [pc, #228]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002414:	4a30      	ldr	r2, [pc, #192]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800241a:	4b2f      	ldr	r3, [pc, #188]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800243e:	4a26      	ldr	r2, [pc, #152]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 8002446:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800246a:	4a1b      	ldr	r2, [pc, #108]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 8002474:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	43db      	mvns	r3, r3
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002498:	4a0f      	ldr	r2, [pc, #60]	@ (80024d8 <HAL_GPIO_Init+0x2dc>)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f47f aeab 	bne.w	800220c <HAL_GPIO_Init+0x10>
  }
}
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	40010000 	.word	0x40010000
 80024c8:	48000400 	.word	0x48000400
 80024cc:	48000800 	.word	0x48000800
 80024d0:	48000c00 	.word	0x48000c00
 80024d4:	48001000 	.word	0x48001000
 80024d8:	58000800 	.word	0x58000800

080024dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	807b      	strh	r3, [r7, #2]
 80024e8:	4613      	mov	r3, r2
 80024ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ec:	787b      	ldrb	r3, [r7, #1]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f8:	e002      	b.n	8002500 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e08d      	b.n	800263a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff f9f4 	bl	8001920 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	@ 0x24
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800255c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800256c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e006      	b.n	8002594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d108      	bne.n	80025ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e007      	b.n	80025be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69d9      	ldr	r1, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	817b      	strh	r3, [r7, #10]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b20      	cmp	r3, #32
 8002662:	f040 80fd 	bne.w	8002860 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x30>
 8002670:	2302      	movs	r3, #2
 8002672:	e0f6      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800267c:	f7ff fc06 	bl	8001e8c <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	2319      	movs	r3, #25
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f001 f8e9 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e0e1      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2221      	movs	r2, #33	@ 0x21
 80026a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2210      	movs	r2, #16
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	893a      	ldrh	r2, [r7, #8]
 80026be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2bff      	cmp	r3, #255	@ 0xff
 80026ce:	d906      	bls.n	80026de <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	22ff      	movs	r2, #255	@ 0xff
 80026d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80026d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	e007      	b.n	80026ee <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80026e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d024      	beq.n	8002740 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	8979      	ldrh	r1, [r7, #10]
 8002732:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <HAL_I2C_Master_Transmit+0x228>)
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 fa57 	bl	8003bec <I2C_TransferConfig>
 800273e:	e066      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	b2da      	uxtb	r2, r3
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	4b48      	ldr	r3, [pc, #288]	@ (800286c <HAL_I2C_Master_Transmit+0x228>)
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f001 fa4c 	bl	8003bec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002754:	e05b      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	6a39      	ldr	r1, [r7, #32]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f001 f8dc 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07b      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	781a      	ldrb	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277a:	1c5a      	adds	r2, r3, #1
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d034      	beq.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d130      	bne.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	2200      	movs	r2, #0
 80027b4:	2180      	movs	r1, #128	@ 0x80
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f001 f855 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e04d      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	2bff      	cmp	r3, #255	@ 0xff
 80027ce:	d90e      	bls.n	80027ee <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	@ 0xff
 80027d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f001 fa00 	bl	8003bec <I2C_TransferConfig>
 80027ec:	e00f      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f001 f9ef 	bl	8003bec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d19e      	bne.n	8002756 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	6a39      	ldr	r1, [r7, #32]
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f001 f8c2 	bl	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e01a      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_I2C_Master_Transmit+0x22c>)
 8002840:	400b      	ands	r3, r1
 8002842:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	e000      	b.n	8002862 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
  }
}
 8002862:	4618      	mov	r0, r3
 8002864:	3718      	adds	r7, #24
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	80002000 	.word	0x80002000
 8002870:	fe00e800 	.word	0xfe00e800

08002874 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	4608      	mov	r0, r1
 800287e:	4611      	mov	r1, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4603      	mov	r3, r0
 8002884:	817b      	strh	r3, [r7, #10]
 8002886:	460b      	mov	r3, r1
 8002888:	813b      	strh	r3, [r7, #8]
 800288a:	4613      	mov	r3, r2
 800288c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	f040 80fd 	bne.w	8002a96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_I2C_Mem_Read+0x34>
 80028a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0f1      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d101      	bne.n	80028c2 <HAL_I2C_Mem_Read+0x4e>
 80028be:	2302      	movs	r3, #2
 80028c0:	e0ea      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2201      	movs	r2, #1
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80028ca:	f7ff fadf 	bl	8001e8c <HAL_GetTick>
 80028ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2319      	movs	r3, #25
 80028d6:	2201      	movs	r2, #1
 80028d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 ffc2 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0d5      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2222      	movs	r2, #34	@ 0x22
 80028f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a3a      	ldr	r2, [r7, #32]
 8002906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800290c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002914:	88f8      	ldrh	r0, [r7, #6]
 8002916:	893a      	ldrh	r2, [r7, #8]
 8002918:	8979      	ldrh	r1, [r7, #10]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4603      	mov	r3, r0
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fb59 	bl	8002fdc <I2C_RequestMemoryRead>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0ad      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2bff      	cmp	r3, #255	@ 0xff
 8002944:	d90e      	bls.n	8002964 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	22ff      	movs	r2, #255	@ 0xff
 800294a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	b2da      	uxtb	r2, r3
 8002952:	8979      	ldrh	r1, [r7, #10]
 8002954:	4b52      	ldr	r3, [pc, #328]	@ (8002aa0 <HAL_I2C_Mem_Read+0x22c>)
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f001 f945 	bl	8003bec <I2C_TransferConfig>
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <HAL_I2C_Mem_Read+0x22c>)
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f001 f934 	bl	8003bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	2200      	movs	r2, #0
 800298c:	2104      	movs	r1, #4
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 ff69 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e07c      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d034      	beq.n	8002a44 <HAL_I2C_Mem_Read+0x1d0>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d130      	bne.n	8002a44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e8:	2200      	movs	r2, #0
 80029ea:	2180      	movs	r1, #128	@ 0x80
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 ff3a 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e04d      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2bff      	cmp	r3, #255	@ 0xff
 8002a04:	d90e      	bls.n	8002a24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	22ff      	movs	r2, #255	@ 0xff
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	8979      	ldrh	r1, [r7, #10]
 8002a14:	2300      	movs	r3, #0
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f001 f8e5 	bl	8003bec <I2C_TransferConfig>
 8002a22:	e00f      	b.n	8002a44 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	b2da      	uxtb	r2, r3
 8002a34:	8979      	ldrh	r1, [r7, #10]
 8002a36:	2300      	movs	r3, #0
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f001 f8d4 	bl	8003bec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d19a      	bne.n	8002984 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 ffa7 	bl	80039a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e01a      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2220      	movs	r2, #32
 8002a68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_I2C_Mem_Read+0x230>)
 8002a76:	400b      	ands	r3, r1
 8002a78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2220      	movs	r2, #32
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e000      	b.n	8002a98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a96:	2302      	movs	r3, #2
  }
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	80002400 	.word	0x80002400
 8002aa4:	fe00e800 	.word	0xfe00e800

08002aa8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	@ 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	f040 80d6 	bne.w	8002c76 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ad8:	d101      	bne.n	8002ade <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002ada:	2302      	movs	r3, #2
 8002adc:	e0cc      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_I2C_IsDeviceReady+0x44>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e0c5      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2224      	movs	r2, #36	@ 0x24
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_I2C_IsDeviceReady+0x72>
 8002b0a:	897b      	ldrh	r3, [r7, #10]
 8002b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b14:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b18:	e006      	b.n	8002b28 <HAL_I2C_IsDeviceReady+0x80>
 8002b1a:	897b      	ldrh	r3, [r7, #10]
 8002b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b24:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002b2e:	f7ff f9ad 	bl	8001e8c <HAL_GetTick>
 8002b32:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	bf0c      	ite	eq
 8002b42:	2301      	moveq	r3, #1
 8002b44:	2300      	movne	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0310 	and.w	r3, r3, #16
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002b60:	e034      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d01a      	beq.n	8002ba0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b6a:	f7ff f98f 	bl	8001e8c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <HAL_I2C_IsDeviceReady+0xd8>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8c:	f043 0220 	orr.w	r2, r3, #32
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e06b      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	f003 0320 	and.w	r3, r3, #32
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	bf0c      	ite	eq
 8002bae:	2301      	moveq	r3, #1
 8002bb0:	2300      	movne	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d102      	bne.n	8002bd8 <HAL_I2C_IsDeviceReady+0x130>
 8002bd2:	7fbb      	ldrb	r3, [r7, #30]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d0c4      	beq.n	8002b62 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d01a      	beq.n	8002c1c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	2120      	movs	r1, #32
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 fe38 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e03b      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2220      	movs	r2, #32
 8002c06:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e02d      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	2120      	movs	r1, #32
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fe1d 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e020      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2210      	movs	r2, #16
 8002c3c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2220      	movs	r2, #32
 8002c44:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	f63f af56 	bhi.w	8002b02 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f043 0220 	orr.w	r2, r3, #32
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002c76:	2302      	movs	r3, #2
  }
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3720      	adds	r7, #32
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
  }
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00f      	beq.n	8002cf6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce4:	f043 0201 	orr.w	r2, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cf4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d1e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00f      	beq.n	8002d4a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d38:	f043 0202 	orr.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 030b 	and.w	r3, r3, #11
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fc29 	bl	80035b4 <I2C_ITError>
  }
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	70fb      	strb	r3, [r7, #3]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <I2C_Slave_ISR_IT+0x24>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e0e2      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x1ea>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d009      	beq.n	8002e34 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d004      	beq.n	8002e34 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e2a:	6939      	ldr	r1, [r7, #16]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fa09 	bl	8003244 <I2C_ITSlaveCplt>
 8002e32:	e0ca      	b.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04b      	beq.n	8002ed6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d046      	beq.n	8002ed6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d128      	bne.n	8002ea4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b28      	cmp	r3, #40	@ 0x28
 8002e5c:	d108      	bne.n	8002e70 <I2C_Slave_ISR_IT+0x86>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e64:	d104      	bne.n	8002e70 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 fb4f 	bl	800350c <I2C_ITListenCplt>
 8002e6e:	e031      	b.n	8002ed4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b29      	cmp	r3, #41	@ 0x29
 8002e7a:	d10e      	bne.n	8002e9a <I2C_Slave_ISR_IT+0xb0>
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e82:	d00a      	beq.n	8002e9a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2210      	movs	r2, #16
 8002e8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fca8 	bl	80037e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 f97a 	bl	800318c <I2C_ITSlaveSeqCplt>
 8002e98:	e01c      	b.n	8002ed4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2210      	movs	r2, #16
 8002ea0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ea2:	e08f      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <I2C_Slave_ISR_IT+0xdc>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ec4:	d17e      	bne.n	8002fc4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	4619      	mov	r1, r3
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 fb71 	bl	80035b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ed2:	e077      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x1da>
 8002ed4:	e076      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d02f      	beq.n	8002f40 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d02a      	beq.n	8002f40 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d018      	beq.n	8002f26 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d14b      	bne.n	8002fc8 <I2C_Slave_ISR_IT+0x1de>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f36:	d047      	beq.n	8002fc8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f927 	bl	800318c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f3e:	e043      	b.n	8002fc8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f894 	bl	8003084 <I2C_ITAddrCplt>
 8002f5c:	e035      	b.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d030      	beq.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d02b      	beq.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d018      	beq.n	8002fae <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002fac:	e00d      	b.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fb4:	d002      	beq.n	8002fbc <I2C_Slave_ISR_IT+0x1d2>
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f8e5 	bl	800318c <I2C_ITSlaveSeqCplt>
 8002fc2:	e002      	b.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002fc8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	4608      	mov	r0, r1
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	817b      	strh	r3, [r7, #10]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	813b      	strh	r3, [r7, #8]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	4b20      	ldr	r3, [pc, #128]	@ (8003080 <I2C_RequestMemoryRead+0xa4>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2300      	movs	r3, #0
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fdf2 	bl	8003bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	69b9      	ldr	r1, [r7, #24]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fc83 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e02c      	b.n	8003076 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d105      	bne.n	800302e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003022:	893b      	ldrh	r3, [r7, #8]
 8003024:	b2da      	uxtb	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	629a      	str	r2, [r3, #40]	@ 0x28
 800302c:	e015      	b.n	800305a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800302e:	893b      	ldrh	r3, [r7, #8]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	b29b      	uxth	r3, r3
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fc69 	bl	8003918 <I2C_WaitOnTXISFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e012      	b.n	8003076 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003050:	893b      	ldrh	r3, [r7, #8]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2200      	movs	r2, #0
 8003062:	2140      	movs	r1, #64	@ 0x40
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 fbfe 	bl	8003866 <I2C_WaitOnFlagUntilTimeout>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	80002000 	.word	0x80002000

08003084 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800309a:	2b28      	cmp	r3, #40	@ 0x28
 800309c:	d16a      	bne.n	8003174 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030bc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80030d8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d138      	bne.n	8003154 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030e2:	897b      	ldrh	r3, [r7, #10]
 80030e4:	09db      	lsrs	r3, r3, #7
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	89bb      	ldrh	r3, [r7, #12]
 80030ea:	4053      	eors	r3, r2
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f003 0306 	and.w	r3, r3, #6
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11c      	bne.n	8003130 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80030f6:	897b      	ldrh	r3, [r7, #10]
 80030f8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003108:	2b02      	cmp	r3, #2
 800310a:	d13b      	bne.n	8003184 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2208      	movs	r2, #8
 8003118:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003122:	89ba      	ldrh	r2, [r7, #12]
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	4619      	mov	r1, r3
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f7ff fe32 	bl	8002d92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800312e:	e029      	b.n	8003184 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003130:	893b      	ldrh	r3, [r7, #8]
 8003132:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 fd89 	bl	8003c50 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003146:	89ba      	ldrh	r2, [r7, #12]
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	4619      	mov	r1, r3
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f7ff fe20 	bl	8002d92 <HAL_I2C_AddrCallback>
}
 8003152:	e017      	b.n	8003184 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003154:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fd79 	bl	8003c50 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003166:	89ba      	ldrh	r2, [r7, #12]
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe10 	bl	8002d92 <HAL_I2C_AddrCallback>
}
 8003172:	e007      	b.n	8003184 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d008      	beq.n	80031c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00c      	b.n	80031da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031d8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b29      	cmp	r3, #41	@ 0x29
 80031e4:	d112      	bne.n	800320c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2228      	movs	r2, #40	@ 0x28
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2221      	movs	r2, #33	@ 0x21
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031f4:	2101      	movs	r1, #1
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fd2a 	bl	8003c50 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fdb0 	bl	8002d6a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800320a:	e017      	b.n	800323c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b2a      	cmp	r3, #42	@ 0x2a
 8003216:	d111      	bne.n	800323c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2228      	movs	r2, #40	@ 0x28
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2222      	movs	r2, #34	@ 0x22
 8003224:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003226:	2102      	movs	r1, #2
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fd11 	bl	8003c50 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fda1 	bl	8002d7e <HAL_I2C_SlaveRxCpltCallback>
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003266:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2220      	movs	r2, #32
 800326e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003270:	7afb      	ldrb	r3, [r7, #11]
 8003272:	2b21      	cmp	r3, #33	@ 0x21
 8003274:	d002      	beq.n	800327c <I2C_ITSlaveCplt+0x38>
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	2b29      	cmp	r3, #41	@ 0x29
 800327a:	d108      	bne.n	800328e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800327c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 fce5 	bl	8003c50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2221      	movs	r2, #33	@ 0x21
 800328a:	631a      	str	r2, [r3, #48]	@ 0x30
 800328c:	e019      	b.n	80032c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	2b22      	cmp	r3, #34	@ 0x22
 8003292:	d002      	beq.n	800329a <I2C_ITSlaveCplt+0x56>
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	2b2a      	cmp	r3, #42	@ 0x2a
 8003298:	d108      	bne.n	80032ac <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800329a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fcd6 	bl	8003c50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2222      	movs	r2, #34	@ 0x22
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032aa:	e00a      	b.n	80032c2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80032ac:	7afb      	ldrb	r3, [r7, #11]
 80032ae:	2b28      	cmp	r3, #40	@ 0x28
 80032b0:	d107      	bne.n	80032c2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80032b2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fcca 	bl	8003c50 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032d0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	4b89      	ldr	r3, [pc, #548]	@ (8003504 <I2C_ITSlaveCplt+0x2c0>)
 80032de:	400b      	ands	r3, r1
 80032e0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 fa7d 	bl	80037e2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d013      	beq.n	800331a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003300:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	d01f      	beq.n	800334a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b29a      	uxth	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003318:	e017      	b.n	800334a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003332:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d006      	beq.n	800334a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	b29a      	uxth	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0304 	bic.w	r3, r3, #4
 800335a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00c      	beq.n	8003396 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	f043 0204 	orr.w	r2, r3, #4
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d049      	beq.n	800344a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d044      	beq.n	800344a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d128      	bne.n	800341c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b28      	cmp	r3, #40	@ 0x28
 80033d4:	d108      	bne.n	80033e8 <I2C_ITSlaveCplt+0x1a4>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80033dc:	d104      	bne.n	80033e8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033de:	6979      	ldr	r1, [r7, #20]
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f893 	bl	800350c <I2C_ITListenCplt>
 80033e6:	e030      	b.n	800344a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b29      	cmp	r3, #41	@ 0x29
 80033f2:	d10e      	bne.n	8003412 <I2C_ITSlaveCplt+0x1ce>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033fa:	d00a      	beq.n	8003412 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2210      	movs	r2, #16
 8003402:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f9ec 	bl	80037e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff febe 	bl	800318c <I2C_ITSlaveSeqCplt>
 8003410:	e01b      	b.n	800344a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2210      	movs	r2, #16
 8003418:	61da      	str	r2, [r3, #28]
 800341a:	e016      	b.n	800344a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2210      	movs	r2, #16
 8003422:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <I2C_ITSlaveCplt+0x1fa>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d105      	bne.n	800344a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 f8b5 	bl	80035b4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8a4 	bl	80035b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b28      	cmp	r3, #40	@ 0x28
 8003476:	d141      	bne.n	80034fc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003478:	6979      	ldr	r1, [r7, #20]
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f846 	bl	800350c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003480:	e03c      	b.n	80034fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800348a:	d014      	beq.n	80034b6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f7ff fe7d 	bl	800318c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <I2C_ITSlaveCplt+0x2c4>)
 8003496:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff fc7d 	bl	8002dae <HAL_I2C_ListenCpltCallback>
}
 80034b4:	e022      	b.n	80034fc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b22      	cmp	r3, #34	@ 0x22
 80034c0:	d10e      	bne.n	80034e0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f7ff fc50 	bl	8002d7e <HAL_I2C_SlaveRxCpltCallback>
}
 80034de:	e00d      	b.n	80034fc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff fc37 	bl	8002d6a <HAL_I2C_SlaveTxCpltCallback>
}
 80034fc:	bf00      	nop
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	fe00e800 	.word	0xfe00e800
 8003508:	ffff0000 	.word	0xffff0000

0800350c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a25      	ldr	r2, [pc, #148]	@ (80035b0 <I2C_ITListenCplt+0xa4>)
 800351a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d022      	beq.n	8003588 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d012      	beq.n	8003588 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003580:	f043 0204 	orr.w	r2, r3, #4
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003588:	f248 0103 	movw	r1, #32771	@ 0x8003
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 fb5f 	bl	8003c50 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2210      	movs	r2, #16
 8003598:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff fc03 	bl	8002dae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	ffff0000 	.word	0xffff0000

080035b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a6d      	ldr	r2, [pc, #436]	@ (8003788 <I2C_ITError+0x1d4>)
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	2b28      	cmp	r3, #40	@ 0x28
 80035ea:	d005      	beq.n	80035f8 <I2C_ITError+0x44>
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b29      	cmp	r3, #41	@ 0x29
 80035f0:	d002      	beq.n	80035f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80035f2:	7bfb      	ldrb	r3, [r7, #15]
 80035f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035f6:	d10b      	bne.n	8003610 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80035f8:	2103      	movs	r1, #3
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fb28 	bl	8003c50 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2228      	movs	r2, #40	@ 0x28
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a60      	ldr	r2, [pc, #384]	@ (800378c <I2C_ITError+0x1d8>)
 800360c:	635a      	str	r2, [r3, #52]	@ 0x34
 800360e:	e030      	b.n	8003672 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003610:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 fb1b 	bl	8003c50 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f8e1 	bl	80037e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b60      	cmp	r3, #96	@ 0x60
 800362a:	d01f      	beq.n	800366c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d114      	bne.n	800366c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d109      	bne.n	8003664 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365c:	f043 0204 	orr.w	r2, r3, #4
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2220      	movs	r2, #32
 800366a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003676:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	2b00      	cmp	r3, #0
 800367e:	d039      	beq.n	80036f4 <I2C_ITError+0x140>
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b11      	cmp	r3, #17
 8003684:	d002      	beq.n	800368c <I2C_ITError+0xd8>
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b21      	cmp	r3, #33	@ 0x21
 800368a:	d133      	bne.n	80036f4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003696:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800369a:	d107      	bne.n	80036ac <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fd95 	bl	80021e0 <HAL_DMA_GetState>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d017      	beq.n	80036ec <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	4a33      	ldr	r2, [pc, #204]	@ (8003790 <I2C_ITError+0x1dc>)
 80036c2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe fd26 	bl	8002122 <HAL_DMA_Abort_IT>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d04d      	beq.n	8003778 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80036e6:	4610      	mov	r0, r2
 80036e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036ea:	e045      	b.n	8003778 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f851 	bl	8003794 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80036f2:	e041      	b.n	8003778 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d039      	beq.n	8003770 <I2C_ITError+0x1bc>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b12      	cmp	r3, #18
 8003700:	d002      	beq.n	8003708 <I2C_ITError+0x154>
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	2b22      	cmp	r3, #34	@ 0x22
 8003706:	d133      	bne.n	8003770 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003712:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003716:	d107      	bne.n	8003728 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003726:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	4618      	mov	r0, r3
 800372e:	f7fe fd57 	bl	80021e0 <HAL_DMA_GetState>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d017      	beq.n	8003768 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	4a14      	ldr	r2, [pc, #80]	@ (8003790 <I2C_ITError+0x1dc>)
 800373e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe fce8 	bl	8002122 <HAL_DMA_Abort_IT>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d011      	beq.n	800377c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003762:	4610      	mov	r0, r2
 8003764:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003766:	e009      	b.n	800377c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f813 	bl	8003794 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800376e:	e005      	b.n	800377c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f80f 	bl	8003794 <I2C_TreatErrorCallback>
  }
}
 8003776:	e002      	b.n	800377e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003778:	bf00      	nop
 800377a:	e000      	b.n	800377e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800377c:	bf00      	nop
}
 800377e:	bf00      	nop
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	ffff0000 	.word	0xffff0000
 800378c:	08002deb 	.word	0x08002deb
 8003790:	0800382b 	.word	0x0800382b

08003794 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b60      	cmp	r3, #96	@ 0x60
 80037a6:	d10e      	bne.n	80037c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff fb09 	bl	8002dd6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037c4:	e009      	b.n	80037da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff faf4 	bl	8002dc2 <HAL_I2C_ErrorCallback>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d103      	bne.n	8003800 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2200      	movs	r2, #0
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d007      	beq.n	800381e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	619a      	str	r2, [r3, #24]
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003844:	2200      	movs	r2, #0
 8003846:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003854:	2200      	movs	r2, #0
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003858:	68f8      	ldr	r0, [r7, #12]
 800385a:	f7ff ff9b 	bl	8003794 <I2C_TreatErrorCallback>
}
 800385e:	bf00      	nop
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003876:	e03b      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f8d5 	bl	8003a2c <I2C_IsErrorOccurred>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e041      	b.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003892:	d02d      	beq.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7fe fafa 	bl	8001e8c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d302      	bcc.n	80038aa <I2C_WaitOnFlagUntilTimeout+0x44>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d122      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	4013      	ands	r3, r2
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	bf0c      	ite	eq
 80038ba:	2301      	moveq	r3, #1
 80038bc:	2300      	movne	r3, #0
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d113      	bne.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00f      	b.n	8003910 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	429a      	cmp	r2, r3
 800390c:	d0b4      	beq.n	8003878 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003924:	e033      	b.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 f87e 	bl	8003a2c <I2C_IsErrorOccurred>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e031      	b.n	800399e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d025      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003942:	f7fe faa3 	bl	8001e8c <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	d302      	bcc.n	8003958 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11a      	bne.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d013      	beq.n	800398e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e007      	b.n	800399e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d1c4      	bne.n	8003926 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
 80039ae:	60b9      	str	r1, [r7, #8]
 80039b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039b2:	e02f      	b.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68b9      	ldr	r1, [r7, #8]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f837 	bl	8003a2c <I2C_IsErrorOccurred>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e02d      	b.n	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fe fa60 	bl	8001e8c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	68ba      	ldr	r2, [r7, #8]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11a      	bne.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d013      	beq.n	8003a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f0:	f043 0220 	orr.w	r2, r3, #32
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e007      	b.n	8003a24 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d1c8      	bne.n	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	f003 0310 	and.w	r3, r3, #16
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d068      	beq.n	8003b2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a60:	e049      	b.n	8003af6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d045      	beq.n	8003af6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a6a:	f7fe fa0f 	bl	8001e8c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <I2C_IsErrorOccurred+0x54>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d13a      	bne.n	8003af6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa2:	d121      	bne.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003aaa:	d01d      	beq.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d01a      	beq.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ac0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ac2:	f7fe f9e3 	bl	8001e8c <HAL_GetTick>
 8003ac6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ac8:	e00e      	b.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003aca:	f7fe f9df 	bl	8001e8c <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b19      	cmp	r3, #25
 8003ad6:	d907      	bls.n	8003ae8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f043 0320 	orr.w	r3, r3, #32
 8003ade:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003ae6:	e006      	b.n	8003af6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d1e9      	bne.n	8003aca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0320 	and.w	r3, r3, #32
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	d003      	beq.n	8003b0c <I2C_IsErrorOccurred+0xe0>
 8003b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d0aa      	beq.n	8003a62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d103      	bne.n	8003b1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	f043 0304 	orr.w	r3, r3, #4
 8003b22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	f043 0301 	orr.w	r3, r3, #1
 8003b42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	f043 0308 	orr.w	r3, r3, #8
 8003b64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff fe1e 	bl	80037e2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003be8 <I2C_IsErrorOccurred+0x1bc>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3728      	adds	r7, #40	@ 0x28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	fe00e800 	.word	0xfe00e800

08003bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c04:	7a7b      	ldrb	r3, [r7, #9]
 8003c06:	041b      	lsls	r3, r3, #16
 8003c08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003c1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0d5b      	lsrs	r3, r3, #21
 8003c26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003c2a:	4b08      	ldr	r3, [pc, #32]	@ (8003c4c <I2C_TransferConfig+0x60>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	ea02 0103 	and.w	r1, r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003c3e:	bf00      	nop
 8003c40:	371c      	adds	r7, #28
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	03ff63ff 	.word	0x03ff63ff

08003c50 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c60:	887b      	ldrh	r3, [r7, #2]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003c70:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003c7e:	2b28      	cmp	r3, #40	@ 0x28
 8003c80:	d003      	beq.n	8003c8a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003c88:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c8a:	887b      	ldrh	r3, [r7, #2]
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00f      	beq.n	8003cb4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003c9a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ca8:	2b28      	cmp	r3, #40	@ 0x28
 8003caa:	d003      	beq.n	8003cb4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003cb2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da03      	bge.n	8003cc4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003cc4:	887b      	ldrh	r3, [r7, #2]
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d103      	bne.n	8003cd2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003cd0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d103      	bne.n	8003ce0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f043 0320 	orr.w	r3, r3, #32
 8003cde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	2b40      	cmp	r3, #64	@ 0x40
 8003ce4:	d103      	bne.n	8003cee <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	43da      	mvns	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b20      	cmp	r3, #32
 8003d20:	d138      	bne.n	8003d94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e032      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2224      	movs	r2, #36	@ 0x24
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0201 	bic.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6819      	ldr	r1, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e000      	b.n	8003d96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d94:	2302      	movs	r3, #2
  }
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b085      	sub	sp, #20
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d139      	bne.n	8003e2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e033      	b.n	8003e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2224      	movs	r2, #36	@ 0x24
 8003dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0201 	bic.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003df4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	021b      	lsls	r3, r3, #8
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0201 	orr.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	e000      	b.n	8003e2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e2c:	2302      	movs	r3, #2
  }
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a04      	ldr	r2, [pc, #16]	@ (8003e58 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	58000400 	.word	0x58000400

08003e5c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	58000400 	.word	0x58000400

08003e78 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e8a:	d101      	bne.n	8003e90 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003eea:	d101      	bne.n	8003ef0 <LL_RCC_HSE_IsReady+0x18>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <LL_RCC_HSE_IsReady+0x1a>
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f2c:	6013      	str	r3, [r2, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f4a:	d101      	bne.n	8003f50 <LL_RCC_HSI_IsReady+0x18>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <LL_RCC_HSI_IsReady+0x1a>
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	061b      	lsls	r3, r3, #24
 8003f72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f76:	4313      	orrs	r3, r2
 8003f78:	604b      	str	r3, [r1, #4]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003f86:	b480      	push	{r7}
 8003f88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003f9e:	bf00      	nop
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fb8:	f023 0301 	bic.w	r3, r3, #1
 8003fbc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d101      	bne.n	8003fe2 <LL_RCC_HSI48_IsReady+0x18>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <LL_RCC_HSI48_IsReady+0x1a>
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004020:	f023 0301 	bic.w	r3, r3, #1
 8004024:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004028:	bf00      	nop
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800407a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d101      	bne.n	800408e <LL_RCC_LSE_IsReady+0x18>
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <LL_RCC_LSE_IsReady+0x1a>
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800409e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040cc:	f023 0301 	bic.w	r3, r3, #1
 80040d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80040de:	b480      	push	{r7}
 80040e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ea:	f003 0302 	and.w	r3, r3, #2
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d101      	bne.n	80040f6 <LL_RCC_LSI1_IsReady+0x18>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <LL_RCC_LSI1_IsReady+0x1a>
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8004102:	b480      	push	{r7}
 8004104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800410a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800410e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004112:	f043 0304 	orr.w	r3, r3, #4
 8004116:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800411a:	bf00      	nop
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800413c:	bf00      	nop
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d101      	bne.n	800415e <LL_RCC_LSI2_IsReady+0x18>
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <LL_RCC_LSI2_IsReady+0x1a>
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800416a:	b480      	push	{r7}
 800416c:	b083      	sub	sp, #12
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041a6:	f043 0301 	orr.w	r3, r3, #1
 80041aa:	6013      	str	r3, [r2, #0]
}
 80041ac:	bf00      	nop
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041c4:	f023 0301 	bic.w	r3, r3, #1
 80041c8:	6013      	str	r3, [r2, #0]
}
 80041ca:	bf00      	nop
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80041d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d101      	bne.n	80041ea <LL_RCC_MSI_IsReady+0x16>
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <LL_RCC_MSI_IsReady+0x18>
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b083      	sub	sp, #12
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80041fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4313      	orrs	r3, r2
 8004210:	600b      	str	r3, [r1, #0]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800422e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2bb0      	cmp	r3, #176	@ 0xb0
 8004234:	d901      	bls.n	800423a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004236:	23b0      	movs	r3, #176	@ 0xb0
 8004238:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800423a:	687b      	ldr	r3, [r7, #4]
}
 800423c:	4618      	mov	r0, r3
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	021b      	lsls	r3, r3, #8
 800425e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 0203 	bic.w	r2, r3, #3
 8004284:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr

080042da <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80042e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80042ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004312:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004316:	f023 020f 	bic.w	r2, r3, #15
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800433c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4313      	orrs	r3, r2
 800434e:	608b      	str	r3, [r1, #8]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800436e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4313      	orrs	r3, r2
 8004376:	608b      	str	r3, [r1, #8]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80043a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80043bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80043d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80043de:	4618      	mov	r0, r3
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80043ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	6013      	str	r3, [r2, #0]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004406:	b480      	push	{r7}
 8004408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800440a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004414:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004418:	6013      	str	r3, [r2, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004436:	d101      	bne.n	800443c <LL_RCC_PLL_IsReady+0x18>
 8004438:	2301      	movs	r3, #1
 800443a:	e000      	b.n	800443e <LL_RCC_PLL_IsReady+0x1a>
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800444c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	0a1b      	lsrs	r3, r3, #8
 8004454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004458:	4618      	mov	r0, r3
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004462:	b480      	push	{r7}
 8004464:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800447a:	b480      	push	{r7}
 800447c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800447e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 0303 	and.w	r3, r3, #3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d101      	bne.n	80044c2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e2:	d101      	bne.n	80044e8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e000      	b.n	80044ea <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d101      	bne.n	800450e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800451e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800452c:	d101      	bne.n	8004532 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800454c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004550:	d101      	bne.n	8004556 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b08d      	sub	sp, #52	@ 0x34
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e363      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 808d 	beq.w	800469e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004584:	f7ff fe89 	bl	800429a <LL_RCC_GetSysClkSource>
 8004588:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800458a:	f7ff ff82 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 800458e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <HAL_RCC_OscConfig+0x3e>
 8004596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004598:	2b0c      	cmp	r3, #12
 800459a:	d147      	bne.n	800462c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800459c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d144      	bne.n	800462c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e347      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80045b2:	f7ff fe34 	bl	800421e <LL_RCC_MSI_GetRange>
 80045b6:	4603      	mov	r3, r0
 80045b8:	429c      	cmp	r4, r3
 80045ba:	d914      	bls.n	80045e6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd31 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e336      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe0e 	bl	80041f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fe32 	bl	8004248 <LL_RCC_MSI_SetCalibTrimming>
 80045e4:	e013      	b.n	800460e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff fe03 	bl	80041f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fe27 	bl	8004248 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fd12 	bl	8005028 <RCC_SetFlashLatencyFromMSIRange>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e317      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800460e:	f000 fccb 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004612:	4603      	mov	r3, r0
 8004614:	4aa4      	ldr	r2, [pc, #656]	@ (80048a8 <HAL_RCC_OscConfig+0x344>)
 8004616:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004618:	4ba4      	ldr	r3, [pc, #656]	@ (80048ac <HAL_RCC_OscConfig+0x348>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fbe7 	bl	8001df0 <HAL_InitTick>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d039      	beq.n	800469c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e308      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01e      	beq.n	8004672 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004634:	f7ff fdb0 	bl	8004198 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004638:	f7fd fc28 	bl	8001e8c <HAL_GetTick>
 800463c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004640:	f7fd fc24 	bl	8001e8c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e2f5      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004652:	f7ff fdbf 	bl	80041d4 <LL_RCC_MSI_IsReady>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f1      	beq.n	8004640 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff fdc8 	bl	80041f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fdec 	bl	8004248 <LL_RCC_MSI_SetCalibTrimming>
 8004670:	e015      	b.n	800469e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004672:	f7ff fda0 	bl	80041b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004676:	f7fd fc09 	bl	8001e8c <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467e:	f7fd fc05 	bl	8001e8c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e2d6      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004690:	f7ff fda0 	bl	80041d4 <LL_RCC_MSI_IsReady>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f1      	bne.n	800467e <HAL_RCC_OscConfig+0x11a>
 800469a:	e000      	b.n	800469e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800469c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d047      	beq.n	800473a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046aa:	f7ff fdf6 	bl	800429a <LL_RCC_GetSysClkSource>
 80046ae:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046b0:	f7ff feef 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 80046b4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d005      	beq.n	80046c8 <HAL_RCC_OscConfig+0x164>
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	2b0c      	cmp	r3, #12
 80046c0:	d108      	bne.n	80046d4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d134      	bne.n	800473a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e2b4      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046dc:	d102      	bne.n	80046e4 <HAL_RCC_OscConfig+0x180>
 80046de:	f7ff fbdd 	bl	8003e9c <LL_RCC_HSE_Enable>
 80046e2:	e001      	b.n	80046e8 <HAL_RCC_OscConfig+0x184>
 80046e4:	f7ff fbe9 	bl	8003eba <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d012      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fd fbcc 	bl	8001e8c <HAL_GetTick>
 80046f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046f8:	f7fd fbc8 	bl	8001e8c <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b64      	cmp	r3, #100	@ 0x64
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e299      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800470a:	f7ff fbe5 	bl	8003ed8 <LL_RCC_HSE_IsReady>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f1      	beq.n	80046f8 <HAL_RCC_OscConfig+0x194>
 8004714:	e011      	b.n	800473a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004716:	f7fd fbb9 	bl	8001e8c <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800471e:	f7fd fbb5 	bl	8001e8c <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b64      	cmp	r3, #100	@ 0x64
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e286      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004730:	f7ff fbd2 	bl	8003ed8 <LL_RCC_HSE_IsReady>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f1      	bne.n	800471e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d04c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004746:	f7ff fda8 	bl	800429a <LL_RCC_GetSysClkSource>
 800474a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474c:	f7ff fea1 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 8004750:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b04      	cmp	r3, #4
 8004756:	d005      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d10e      	bne.n	800477c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d10b      	bne.n	800477c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e266      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fbf1 	bl	8003f5c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800477a:	e031      	b.n	80047e0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d019      	beq.n	80047b8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004784:	f7ff fbba 	bl	8003efc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fd fb80 	bl	8001e8c <HAL_GetTick>
 800478c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004790:	f7fd fb7c 	bl	8001e8c <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e24d      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047a2:	f7ff fbc9 	bl	8003f38 <LL_RCC_HSI_IsReady>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f1      	beq.n	8004790 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff fbd3 	bl	8003f5c <LL_RCC_HSI_SetCalibTrimming>
 80047b6:	e013      	b.n	80047e0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b8:	f7ff fbaf 	bl	8003f1a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047bc:	f7fd fb66 	bl	8001e8c <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c4:	f7fd fb62 	bl	8001e8c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e233      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80047d6:	f7ff fbaf 	bl	8003f38 <LL_RCC_HSI_IsReady>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f1      	bne.n	80047c4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a3 	beq.w	8004940 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d076      	beq.n	80048f0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	d046      	beq.n	800489c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800480e:	f7ff fc66 	bl	80040de <LL_RCC_LSI1_IsReady>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d113      	bne.n	8004840 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004818:	f7ff fc3f 	bl	800409a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800481c:	f7fd fb36 	bl	8001e8c <HAL_GetTick>
 8004820:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004824:	f7fd fb32 	bl	8001e8c <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e203      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004836:	f7ff fc52 	bl	80040de <LL_RCC_LSI1_IsReady>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f1      	beq.n	8004824 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004840:	f7ff fc5f 	bl	8004102 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fd fb22 	bl	8001e8c <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800484c:	f7fd fb1e 	bl	8001e8c <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b03      	cmp	r3, #3
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e1ef      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800485e:	f7ff fc72 	bl	8004146 <LL_RCC_LSI2_IsReady>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f1      	beq.n	800484c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fc7c 	bl	800416a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004872:	f7ff fc23 	bl	80040bc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004876:	f7fd fb09 	bl	8001e8c <HAL_GetTick>
 800487a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800487c:	e008      	b.n	8004890 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800487e:	f7fd fb05 	bl	8001e8c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e1d6      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004890:	f7ff fc25 	bl	80040de <LL_RCC_LSI1_IsReady>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1f1      	bne.n	800487e <HAL_RCC_OscConfig+0x31a>
 800489a:	e051      	b.n	8004940 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800489c:	f7ff fbfd 	bl	800409a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fd faf4 	bl	8001e8c <HAL_GetTick>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048a6:	e00c      	b.n	80048c2 <HAL_RCC_OscConfig+0x35e>
 80048a8:	2000000c 	.word	0x2000000c
 80048ac:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048b0:	f7fd faec 	bl	8001e8c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1bd      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048c2:	f7ff fc0c 	bl	80040de <LL_RCC_LSI1_IsReady>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0f1      	beq.n	80048b0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80048cc:	f7ff fc2a 	bl	8004124 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048d2:	f7fd fadb 	bl	8001e8c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e1ac      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80048e4:	f7ff fc2f 	bl	8004146 <LL_RCC_LSI2_IsReady>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1f1      	bne.n	80048d2 <HAL_RCC_OscConfig+0x36e>
 80048ee:	e027      	b.n	8004940 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80048f0:	f7ff fc18 	bl	8004124 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd faca 	bl	8001e8c <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80048fc:	f7fd fac6 	bl	8001e8c <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b03      	cmp	r3, #3
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e197      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800490e:	f7ff fc1a 	bl	8004146 <LL_RCC_LSI2_IsReady>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d1f1      	bne.n	80048fc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004918:	f7ff fbd0 	bl	80040bc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491c:	f7fd fab6 	bl	8001e8c <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004924:	f7fd fab2 	bl	8001e8c <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e183      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004936:	f7ff fbd2 	bl	80040de <LL_RCC_LSI1_IsReady>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1f1      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800494c:	4ba7      	ldr	r3, [pc, #668]	@ (8004bec <HAL_RCC_OscConfig+0x688>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d114      	bne.n	8004982 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004958:	f7ff fa70 	bl	8003e3c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495c:	f7fd fa96 	bl	8001e8c <HAL_GetTick>
 8004960:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004964:	f7fd fa92 	bl	8001e8c <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e163      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004976:	4b9d      	ldr	r3, [pc, #628]	@ (8004bec <HAL_RCC_OscConfig+0x688>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d102      	bne.n	8004990 <HAL_RCC_OscConfig+0x42c>
 800498a:	f7ff fb30 	bl	8003fee <LL_RCC_LSE_Enable>
 800498e:	e00c      	b.n	80049aa <HAL_RCC_OscConfig+0x446>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b05      	cmp	r3, #5
 8004996:	d104      	bne.n	80049a2 <HAL_RCC_OscConfig+0x43e>
 8004998:	f7ff fb4b 	bl	8004032 <LL_RCC_LSE_EnableBypass>
 800499c:	f7ff fb27 	bl	8003fee <LL_RCC_LSE_Enable>
 80049a0:	e003      	b.n	80049aa <HAL_RCC_OscConfig+0x446>
 80049a2:	f7ff fb35 	bl	8004010 <LL_RCC_LSE_Disable>
 80049a6:	f7ff fb55 	bl	8004054 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d014      	beq.n	80049dc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b2:	f7fd fa6b 	bl	8001e8c <HAL_GetTick>
 80049b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049b8:	e00a      	b.n	80049d0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ba:	f7fd fa67 	bl	8001e8c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e136      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80049d0:	f7ff fb51 	bl	8004076 <LL_RCC_LSE_IsReady>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0ef      	beq.n	80049ba <HAL_RCC_OscConfig+0x456>
 80049da:	e013      	b.n	8004a04 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fa56 	bl	8001e8c <HAL_GetTick>
 80049e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e4:	f7fd fa52 	bl	8001e8c <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e121      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80049fa:	f7ff fb3c 	bl	8004076 <LL_RCC_LSE_IsReady>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1ef      	bne.n	80049e4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02c      	beq.n	8004a6a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d014      	beq.n	8004a42 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a18:	f7ff fab5 	bl	8003f86 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a1c:	f7fd fa36 	bl	8001e8c <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a24:	f7fd fa32 	bl	8001e8c <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e103      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a36:	f7ff fac8 	bl	8003fca <LL_RCC_HSI48_IsReady>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f1      	beq.n	8004a24 <HAL_RCC_OscConfig+0x4c0>
 8004a40:	e013      	b.n	8004a6a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a42:	f7ff fab1 	bl	8003fa8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a46:	f7fd fa21 	bl	8001e8c <HAL_GetTick>
 8004a4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a4c:	e008      	b.n	8004a60 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a4e:	f7fd fa1d 	bl	8001e8c <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e0ee      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a60:	f7ff fab3 	bl	8003fca <LL_RCC_HSI48_IsReady>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f1      	bne.n	8004a4e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 80e4 	beq.w	8004c3c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a74:	f7ff fc11 	bl	800429a <LL_RCC_GetSysClkSource>
 8004a78:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	f040 80b4 	bne.w	8004bf4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f003 0203 	and.w	r2, r3, #3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d123      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d11c      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d114      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d10d      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d05d      	beq.n	8004b9e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b0c      	cmp	r3, #12
 8004ae6:	d058      	beq.n	8004b9a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0a1      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004afa:	f7ff fc84 	bl	8004406 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004afe:	f7fd f9c5 	bl	8001e8c <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fd f9c1 	bl	8001e8c <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e092      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ef      	bne.n	8004b06 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <HAL_RCC_OscConfig+0x68c>)
 8004b2e:	4013      	ands	r3, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b38:	4311      	orrs	r1, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b3e:	0212      	lsls	r2, r2, #8
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b46:	4311      	orrs	r1, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004b4c:	4311      	orrs	r1, r2
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004b52:	430a      	orrs	r2, r1
 8004b54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b5c:	f7ff fc44 	bl	80043e8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b70:	f7fd f98c 	bl	8001e8c <HAL_GetTick>
 8004b74:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b78:	f7fd f988 	bl	8001e8c <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e059      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d0ef      	beq.n	8004b78 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b98:	e050      	b.n	8004c3c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e04f      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d147      	bne.n	8004c3c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bac:	f7ff fc1c 	bl	80043e8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bc0:	f7fd f964 	bl	8001e8c <HAL_GetTick>
 8004bc4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc8:	f7fd f960 	bl	8001e8c <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e031      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0ef      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x664>
 8004be8:	e028      	b.n	8004c3c <HAL_RCC_OscConfig+0x6d8>
 8004bea:	bf00      	nop
 8004bec:	58000400 	.word	0x58000400
 8004bf0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	d01e      	beq.n	8004c38 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfa:	f7ff fc04 	bl	8004406 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfe:	f7fd f945 	bl	8001e8c <HAL_GetTick>
 8004c02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c06:	f7fd f941 	bl	8001e8c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e012      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1ef      	bne.n	8004c06 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_OscConfig+0x6e4>)
 8004c32:	4013      	ands	r3, r2
 8004c34:	60cb      	str	r3, [r1, #12]
 8004c36:	e001      	b.n	8004c3c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3734      	adds	r7, #52	@ 0x34
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd90      	pop	{r4, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	eefefffc 	.word	0xeefefffc

08004c4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e12d      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c60:	4b98      	ldr	r3, [pc, #608]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0307 	and.w	r3, r3, #7
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d91b      	bls.n	8004ca6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b95      	ldr	r3, [pc, #596]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f023 0207 	bic.w	r2, r3, #7
 8004c76:	4993      	ldr	r1, [pc, #588]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7e:	f7fd f905 	bl	8001e8c <HAL_GetTick>
 8004c82:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c86:	f7fd f901 	bl	8001e8c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e111      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c98:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d1ef      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d016      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fafb 	bl	80042b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cbc:	f7fd f8e6 	bl	8001e8c <HAL_GetTick>
 8004cc0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cc4:	f7fd f8e2 	bl	8001e8c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0f2      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cd6:	f7ff fbe8 	bl	80044aa <LL_RCC_IsActiveFlag_HPRE>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f1      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d016      	beq.n	8004d1a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff faf2 	bl	80042da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cf6:	f7fd f8c9 	bl	8001e8c <HAL_GetTick>
 8004cfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cfe:	f7fd f8c5 	bl	8001e8c <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0d5      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d10:	f7ff fbdd 	bl	80044ce <LL_RCC_IsActiveFlag_C2HPRE>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f1      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff faeb 	bl	8004306 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d30:	f7fd f8ac 	bl	8001e8c <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d36:	e008      	b.n	8004d4a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d38:	f7fd f8a8 	bl	8001e8c <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e0b8      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d4a:	f7ff fbd3 	bl	80044f4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f1      	beq.n	8004d38 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fae5 	bl	8004334 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d6a:	f7fd f88f 	bl	8001e8c <HAL_GetTick>
 8004d6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d70:	e008      	b.n	8004d84 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d72:	f7fd f88b 	bl	8001e8c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e09b      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004d84:	f7ff fbc9 	bl	800451a <LL_RCC_IsActiveFlag_PPRE1>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0f1      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fadb 	bl	800435c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004da6:	f7fd f871 	bl	8001e8c <HAL_GetTick>
 8004daa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004dac:	e008      	b.n	8004dc0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dae:	f7fd f86d 	bl	8001e8c <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e07d      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004dc0:	f7ff fbbd 	bl	800453e <LL_RCC_IsActiveFlag_PPRE2>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f1      	beq.n	8004dae <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d043      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d106      	bne.n	8004dec <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004dde:	f7ff f87b 	bl	8003ed8 <LL_RCC_HSE_IsReady>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11e      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e067      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b03      	cmp	r3, #3
 8004df2:	d106      	bne.n	8004e02 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004df4:	f7ff fb16 	bl	8004424 <LL_RCC_PLL_IsReady>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d113      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e05c      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e0a:	f7ff f9e3 	bl	80041d4 <LL_RCC_MSI_IsReady>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e051      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e18:	f7ff f88e 	bl	8003f38 <LL_RCC_HSI_IsReady>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e04a      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fa21 	bl	8004272 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fd f82c 	bl	8001e8c <HAL_GetTick>
 8004e34:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e38:	f7fd f828 	bl	8001e8c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e036      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e4e:	f7ff fa24 	bl	800429a <LL_RCC_GetSysClkSource>
 8004e52:	4602      	mov	r2, r0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d1ec      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d21b      	bcs.n	8004ea4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e6c:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 0207 	bic.w	r2, r3, #7
 8004e74:	4913      	ldr	r1, [pc, #76]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7c:	f7fd f806 	bl	8001e8c <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e84:	f7fd f802 	bl	8001e8c <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e012      	b.n	8004ebc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_RCC_ClockConfig+0x278>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0307 	and.w	r3, r3, #7
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1ef      	bne.n	8004e84 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ea4:	f000 f880 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a07      	ldr	r2, [pc, #28]	@ (8004ec8 <HAL_RCC_ClockConfig+0x27c>)
 8004eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004eae:	f7fc fff9 	bl	8001ea4 <HAL_GetTickPrio>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fc ff9b 	bl	8001df0 <HAL_InitTick>
 8004eba:	4603      	mov	r3, r0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	58004000 	.word	0x58004000
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ecc:	b590      	push	{r4, r7, lr}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed2:	f7ff f9e2 	bl	800429a <LL_RCC_GetSysClkSource>
 8004ed6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ede:	f7ff f99e 	bl	800421e <LL_RCC_MSI_GetRange>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	4a2b      	ldr	r2, [pc, #172]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	e04b      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d102      	bne.n	8004f00 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004efa:	4b28      	ldr	r3, [pc, #160]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e045      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b08      	cmp	r3, #8
 8004f04:	d10a      	bne.n	8004f1c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f06:	f7fe ffb7 	bl	8003e78 <LL_RCC_HSE_IsEnabledDiv2>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f10:	4b23      	ldr	r3, [pc, #140]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e03a      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f16:	4b23      	ldr	r3, [pc, #140]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e037      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f1c:	f7ff fab9 	bl	8004492 <LL_RCC_PLL_GetMainSource>
 8004f20:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d003      	beq.n	8004f30 <HAL_RCC_GetSysClockFreq+0x64>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d003      	beq.n	8004f36 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f2e:	e00d      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f30:	4b1a      	ldr	r3, [pc, #104]	@ (8004f9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f32:	60bb      	str	r3, [r7, #8]
        break;
 8004f34:	e015      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f36:	f7fe ff9f 	bl	8003e78 <LL_RCC_HSE_IsEnabledDiv2>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f40:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f42:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f44:	e00d      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f46:	4b17      	ldr	r3, [pc, #92]	@ (8004fa4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004f48:	60bb      	str	r3, [r7, #8]
        break;
 8004f4a:	e00a      	b.n	8004f62 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f4c:	f7ff f967 	bl	800421e <LL_RCC_MSI_GetRange>
 8004f50:	4603      	mov	r3, r0
 8004f52:	091b      	lsrs	r3, r3, #4
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	4a0f      	ldr	r2, [pc, #60]	@ (8004f98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5e:	60bb      	str	r3, [r7, #8]
        break;
 8004f60:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004f62:	f7ff fa71 	bl	8004448 <LL_RCC_PLL_GetN>
 8004f66:	4602      	mov	r2, r0
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	fb03 f402 	mul.w	r4, r3, r2
 8004f6e:	f7ff fa84 	bl	800447a <LL_RCC_PLL_GetDivider>
 8004f72:	4603      	mov	r3, r0
 8004f74:	091b      	lsrs	r3, r3, #4
 8004f76:	3301      	adds	r3, #1
 8004f78:	fbb4 f4f3 	udiv	r4, r4, r3
 8004f7c:	f7ff fa71 	bl	8004462 <LL_RCC_PLL_GetR>
 8004f80:	4603      	mov	r3, r0
 8004f82:	0f5b      	lsrs	r3, r3, #29
 8004f84:	3301      	adds	r3, #1
 8004f86:	fbb4 f3f3 	udiv	r3, r4, r3
 8004f8a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd90      	pop	{r4, r7, pc}
 8004f96:	bf00      	nop
 8004f98:	0800dbc4 	.word	0x0800dbc4
 8004f9c:	00f42400 	.word	0x00f42400
 8004fa0:	003d0900 	.word	0x003d0900
 8004fa4:	007a1200 	.word	0x007a1200

08004fa8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fa8:	b598      	push	{r3, r4, r7, lr}
 8004faa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fac:	f7ff ff8e 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	f7ff f9e7 	bl	8004384 <LL_RCC_GetAHBPrescaler>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	4a03      	ldr	r2, [pc, #12]	@ (8004fcc <HAL_RCC_GetHCLKFreq+0x24>)
 8004fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd98      	pop	{r3, r4, r7, pc}
 8004fcc:	0800db64 	.word	0x0800db64

08004fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fd0:	b598      	push	{r3, r4, r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004fd4:	f7ff ffe8 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8004fd8:	4604      	mov	r4, r0
 8004fda:	f7ff f9ed 	bl	80043b8 <LL_RCC_GetAPB1Prescaler>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	0a1b      	lsrs	r3, r3, #8
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd98      	pop	{r3, r4, r7, pc}
 8004ff8:	0800dba4 	.word	0x0800dba4

08004ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ffc:	b598      	push	{r3, r4, r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005000:	f7ff ffd2 	bl	8004fa8 <HAL_RCC_GetHCLKFreq>
 8005004:	4604      	mov	r4, r0
 8005006:	f7ff f9e3 	bl	80043d0 <LL_RCC_GetAPB2Prescaler>
 800500a:	4603      	mov	r3, r0
 800500c:	0adb      	lsrs	r3, r3, #11
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	4a04      	ldr	r2, [pc, #16]	@ (8005024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005018:	f003 031f 	and.w	r3, r3, #31
 800501c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005020:	4618      	mov	r0, r3
 8005022:	bd98      	pop	{r3, r4, r7, pc}
 8005024:	0800dba4 	.word	0x0800dba4

08005028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2bb0      	cmp	r3, #176	@ 0xb0
 8005034:	d903      	bls.n	800503e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005036:	4b15      	ldr	r3, [pc, #84]	@ (800508c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e007      	b.n	800504e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	4a11      	ldr	r2, [pc, #68]	@ (800508c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800504e:	f7ff f9a5 	bl	800439c <LL_RCC_GetAHB4Prescaler>
 8005052:	4603      	mov	r3, r0
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	4a0d      	ldr	r2, [pc, #52]	@ (8005090 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800505c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	fbb2 f3f3 	udiv	r3, r2, r3
 8005066:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4a0a      	ldr	r2, [pc, #40]	@ (8005094 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	0c9c      	lsrs	r4, r3, #18
 8005072:	f7fe fef3 	bl	8003e5c <HAL_PWREx_GetVoltageRange>
 8005076:	4603      	mov	r3, r0
 8005078:	4619      	mov	r1, r3
 800507a:	4620      	mov	r0, r4
 800507c:	f000 f80c 	bl	8005098 <RCC_SetFlashLatency>
 8005080:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	bf00      	nop
 800508c:	0800dbc4 	.word	0x0800dbc4
 8005090:	0800db64 	.word	0x0800db64
 8005094:	431bde83 	.word	0x431bde83

08005098 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005098:	b590      	push	{r4, r7, lr}
 800509a:	b093      	sub	sp, #76	@ 0x4c
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80050a2:	4b37      	ldr	r3, [pc, #220]	@ (8005180 <RCC_SetFlashLatency+0xe8>)
 80050a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80050a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80050ae:	4a35      	ldr	r2, [pc, #212]	@ (8005184 <RCC_SetFlashLatency+0xec>)
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80050b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80050ba:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <RCC_SetFlashLatency+0xf0>)
 80050bc:	f107 040c 	add.w	r4, r7, #12
 80050c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80050c6:	2300      	movs	r3, #0
 80050c8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050d0:	d11a      	bne.n	8005108 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80050d6:	e013      	b.n	8005100 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	3348      	adds	r3, #72	@ 0x48
 80050de:	443b      	add	r3, r7
 80050e0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d807      	bhi.n	80050fa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	3348      	adds	r3, #72	@ 0x48
 80050f0:	443b      	add	r3, r7
 80050f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050f6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80050f8:	e020      	b.n	800513c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050fc:	3301      	adds	r3, #1
 80050fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005102:	2b03      	cmp	r3, #3
 8005104:	d9e8      	bls.n	80050d8 <RCC_SetFlashLatency+0x40>
 8005106:	e019      	b.n	800513c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005108:	2300      	movs	r3, #0
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800510c:	e013      	b.n	8005136 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800510e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	3348      	adds	r3, #72	@ 0x48
 8005114:	443b      	add	r3, r7
 8005116:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	d807      	bhi.n	8005130 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	3348      	adds	r3, #72	@ 0x48
 8005126:	443b      	add	r3, r7
 8005128:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800512e:	e005      	b.n	800513c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	3301      	adds	r3, #1
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005138:	2b02      	cmp	r3, #2
 800513a:	d9e8      	bls.n	800510e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800513c:	4b13      	ldr	r3, [pc, #76]	@ (800518c <RCC_SetFlashLatency+0xf4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f023 0207 	bic.w	r2, r3, #7
 8005144:	4911      	ldr	r1, [pc, #68]	@ (800518c <RCC_SetFlashLatency+0xf4>)
 8005146:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005148:	4313      	orrs	r3, r2
 800514a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800514c:	f7fc fe9e 	bl	8001e8c <HAL_GetTick>
 8005150:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005152:	e008      	b.n	8005166 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005154:	f7fc fe9a 	bl	8001e8c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e007      	b.n	8005176 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005166:	4b09      	ldr	r3, [pc, #36]	@ (800518c <RCC_SetFlashLatency+0xf4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005170:	429a      	cmp	r2, r3
 8005172:	d1ef      	bne.n	8005154 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	374c      	adds	r7, #76	@ 0x4c
 800517a:	46bd      	mov	sp, r7
 800517c:	bd90      	pop	{r4, r7, pc}
 800517e:	bf00      	nop
 8005180:	0800daf4 	.word	0x0800daf4
 8005184:	0800db04 	.word	0x0800db04
 8005188:	0800db10 	.word	0x0800db10
 800518c:	58004000 	.word	0x58004000

08005190 <LL_RCC_LSE_IsEnabled>:
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <LL_RCC_LSE_IsEnabled+0x18>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <LL_RCC_LSE_IsEnabled+0x1a>
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <LL_RCC_LSE_IsReady>:
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80051b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d101      	bne.n	80051cc <LL_RCC_LSE_IsReady+0x18>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <LL_RCC_LSE_IsReady+0x1a>
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_SetRFWKPClockSource>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <LL_RCC_SetSMPSClockSource>:
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800520c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	f023 0203 	bic.w	r2, r3, #3
 8005216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4313      	orrs	r3, r2
 800521e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <LL_RCC_SetSMPSPrescaler>:
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800523e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4313      	orrs	r3, r2
 8005246:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_RCC_SetUSARTClockSource>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005264:	f023 0203 	bic.w	r2, r3, #3
 8005268:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_SetLPUARTClockSource>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005290:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005294:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <LL_RCC_SetI2CClockSource>:
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	091b      	lsrs	r3, r3, #4
 80052c0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80052c4:	43db      	mvns	r3, r3
 80052c6:	401a      	ands	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80052d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052d4:	4313      	orrs	r3, r2
 80052d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80052da:	bf00      	nop
 80052dc:	370c      	adds	r7, #12
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <LL_RCC_SetLPTIMClockSource>:
{
 80052e6:	b480      	push	{r7}
 80052e8:	b083      	sub	sp, #12
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0c1b      	lsrs	r3, r3, #16
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	43db      	mvns	r3, r3
 80052fe:	401a      	ands	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	041b      	lsls	r3, r3, #16
 8005304:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_RCC_SetSAIClockSource>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800532a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800532e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetRNGClockSource>:
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005356:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800535a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetCLK48ClockSource>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <LL_RCC_SetUSBClockSource>:
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b082      	sub	sp, #8
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f7ff ffe3 	bl	8005372 <LL_RCC_SetCLK48ClockSource>
}
 80053ac:	bf00      	nop
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <LL_RCC_SetADCClockSource>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80053c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_SetRTCClockSource>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <LL_RCC_GetRTCClockSource>:
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800541c:	4618      	mov	r0, r3
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <LL_RCC_ForceBackupDomainReset>:
{
 8005426:	b480      	push	{r7}
 8005428:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800542a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800543e:	bf00      	nop
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005454:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005460:	bf00      	nop
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <LL_RCC_PLLSAI1_Enable>:
{
 800546a:	b480      	push	{r7}
 800546c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800546e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005478:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800547c:	6013      	str	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_RCC_PLLSAI1_Disable>:
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800548c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <LL_RCC_PLLSAI1_IsReady>:
{
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80054aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054b8:	d101      	bne.n	80054be <LL_RCC_PLLSAI1_IsReady+0x18>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b088      	sub	sp, #32
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80054d2:	2300      	movs	r3, #0
 80054d4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80054d6:	2300      	movs	r3, #0
 80054d8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d034      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054ee:	d021      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80054f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054f4:	d81b      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054fa:	d01d      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005500:	d815      	bhi.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005506:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550a:	d110      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800551a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800551c:	e00d      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f947 	bl	80057b6 <RCCEx_PLLSAI1_ConfigNP>
 8005528:	4603      	mov	r3, r0
 800552a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800552c:	e005      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	77fb      	strb	r3, [r7, #31]
        break;
 8005532:	e002      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	7ffb      	ldrb	r3, [r7, #31]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d105      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fee8 	bl	800531a <LL_RCC_SetSAIClockSource>
 800554a:	e001      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554c:	7ffb      	ldrb	r3, [r7, #31]
 800554e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005558:	2b00      	cmp	r3, #0
 800555a:	d046      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800555c:	f7ff ff56 	bl	800540c <LL_RCC_GetRTCClockSource>
 8005560:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	429a      	cmp	r2, r3
 800556a:	d03c      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800556c:	f7fe fc66 	bl	8003e3c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d105      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	4618      	mov	r0, r3
 800557c:	f7ff ff30 	bl	80053e0 <LL_RCC_SetRTCClockSource>
 8005580:	e02e      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800558c:	f7ff ff4b 	bl	8005426 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005590:	f7ff ff5a 	bl	8005448 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80055a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80055ac:	f7ff fdf0 	bl	8005190 <LL_RCC_LSE_IsEnabled>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d114      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055b6:	f7fc fc69 	bl	8001e8c <HAL_GetTick>
 80055ba:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80055bc:	e00b      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055be:	f7fc fc65 	bl	8001e8c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d902      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	77fb      	strb	r3, [r7, #31]
              break;
 80055d4:	e004      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80055d6:	f7ff fded 	bl	80051b4 <LL_RCC_LSE_IsReady>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d1ee      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80055e0:	7ffb      	ldrb	r3, [r7, #31]
 80055e2:	77bb      	strb	r3, [r7, #30]
 80055e4:	e001      	b.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fe2a 	bl	8005254 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0302 	and.w	r3, r3, #2
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fe35 	bl	8005280 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fe5d 	bl	80052e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fe52 	bl	80052e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe2a 	bl	80052ac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fe1f 	bl	80052ac <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d022      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fe8d 	bl	800539e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800568c:	d107      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005698:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800569c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80056a6:	d10b      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f8dd 	bl	800586c <RCCEx_PLLSAI1_ConfigNQ>
 80056b2:	4603      	mov	r3, r0
 80056b4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80056b6:	7ffb      	ldrb	r3, [r7, #31]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80056bc:	7ffb      	ldrb	r3, [r7, #31]
 80056be:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d02b      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d4:	d008      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056de:	d003      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fe2a 	bl	8005346 <LL_RCC_SetRNGClockSource>
 80056f2:	e00a      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x240>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	2000      	movs	r0, #0
 8005700:	f7ff fe21 	bl	8005346 <LL_RCC_SetRNGClockSource>
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fe34 	bl	8005372 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005712:	d107      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800571e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005722:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800572c:	2b00      	cmp	r3, #0
 800572e:	d022      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe3d 	bl	80053b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005742:	d107      	bne.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800574e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005752:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800575c:	d10b      	bne.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3304      	adds	r3, #4
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f8dd 	bl	8005922 <RCCEx_PLLSAI1_ConfigNR>
 8005768:	4603      	mov	r3, r0
 800576a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800576c:	7ffb      	ldrb	r3, [r7, #31]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005772:	7ffb      	ldrb	r3, [r7, #31]
 8005774:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff fd26 	bl	80051d8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d009      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800579c:	4618      	mov	r0, r3
 800579e:	f7ff fd45 	bl	800522c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff fd2c 	bl	8005204 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80057ac:	7fbb      	ldrb	r3, [r7, #30]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3720      	adds	r7, #32
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b084      	sub	sp, #16
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80057c2:	f7ff fe61 	bl	8005488 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057c6:	f7fc fb61 	bl	8001e8c <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057cc:	e009      	b.n	80057e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057ce:	f7fc fb5d 	bl	8001e8c <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d902      	bls.n	80057e2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	73fb      	strb	r3, [r7, #15]
      break;
 80057e0:	e004      	b.n	80057ec <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057e2:	f7ff fe60 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f0      	bne.n	80057ce <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d137      	bne.n	8005862 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800580a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800581c:	4313      	orrs	r3, r2
 800581e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005820:	f7ff fe23 	bl	800546a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005824:	f7fc fb32 	bl	8001e8c <HAL_GetTick>
 8005828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800582a:	e009      	b.n	8005840 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800582c:	f7fc fb2e 	bl	8001e8c <HAL_GetTick>
 8005830:	4602      	mov	r2, r0
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	1ad3      	subs	r3, r2, r3
 8005836:	2b02      	cmp	r3, #2
 8005838:	d902      	bls.n	8005840 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	73fb      	strb	r3, [r7, #15]
        break;
 800583e:	e004      	b.n	800584a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005840:	f7ff fe31 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d1f0      	bne.n	800582c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005854:	691a      	ldr	r2, [r3, #16]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800585e:	4313      	orrs	r3, r2
 8005860:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005874:	2300      	movs	r3, #0
 8005876:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005878:	f7ff fe06 	bl	8005488 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800587c:	f7fc fb06 	bl	8001e8c <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005882:	e009      	b.n	8005898 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005884:	f7fc fb02 	bl	8001e8c <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d902      	bls.n	8005898 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	73fb      	strb	r3, [r7, #15]
      break;
 8005896:	e004      	b.n	80058a2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005898:	f7ff fe05 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d137      	bne.n	8005918 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058bc:	4313      	orrs	r3, r2
 80058be:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80058c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058d2:	4313      	orrs	r3, r2
 80058d4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058d6:	f7ff fdc8 	bl	800546a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058da:	f7fc fad7 	bl	8001e8c <HAL_GetTick>
 80058de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058e0:	e009      	b.n	80058f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058e2:	f7fc fad3 	bl	8001e8c <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d902      	bls.n	80058f6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	73fb      	strb	r3, [r7, #15]
        break;
 80058f4:	e004      	b.n	8005900 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058f6:	f7ff fdd6 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d1f0      	bne.n	80058e2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005914:	4313      	orrs	r3, r2
 8005916:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b084      	sub	sp, #16
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800592e:	f7ff fdab 	bl	8005488 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005932:	f7fc faab 	bl	8001e8c <HAL_GetTick>
 8005936:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005938:	e009      	b.n	800594e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800593a:	f7fc faa7 	bl	8001e8c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d902      	bls.n	800594e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	73fb      	strb	r3, [r7, #15]
      break;
 800594c:	e004      	b.n	8005958 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800594e:	f7ff fdaa 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f0      	bne.n	800593a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005958:	7bfb      	ldrb	r3, [r7, #15]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d137      	bne.n	80059ce <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800595e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	021b      	lsls	r3, r3, #8
 800596e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005972:	4313      	orrs	r3, r2
 8005974:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005988:	4313      	orrs	r3, r2
 800598a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800598c:	f7ff fd6d 	bl	800546a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005990:	f7fc fa7c 	bl	8001e8c <HAL_GetTick>
 8005994:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005996:	e009      	b.n	80059ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005998:	f7fc fa78 	bl	8001e8c <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d902      	bls.n	80059ac <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	73fb      	strb	r3, [r7, #15]
        break;
 80059aa:	e004      	b.n	80059b6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80059ac:	f7ff fd7b 	bl	80054a6 <LL_RCC_PLLSAI1_IsReady>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d1f0      	bne.n	8005998 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80059bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059ca:	4313      	orrs	r3, r2
 80059cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e095      	b.n	8005b16 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d108      	bne.n	8005a04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059fa:	d009      	beq.n	8005a10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	61da      	str	r2, [r3, #28]
 8005a02:	e005      	b.n	8005a10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d106      	bne.n	8005a30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fc f816 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a46:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a50:	d902      	bls.n	8005a58 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	e002      	b.n	8005a5e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a5c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68db      	ldr	r3, [r3, #12]
 8005a62:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005a66:	d007      	beq.n	8005a78 <HAL_SPI_Init+0xa0>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a70:	d002      	beq.n	8005a78 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a88:	431a      	orrs	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aba:	ea42 0103 	orr.w	r1, r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	0c1b      	lsrs	r3, r3, #16
 8005ad4:	f003 0204 	and.w	r2, r3, #4
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	f003 0310 	and.w	r3, r3, #16
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005af4:	ea42 0103 	orr.w	r1, r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b088      	sub	sp, #32
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	60f8      	str	r0, [r7, #12]
 8005b26:	60b9      	str	r1, [r7, #8]
 8005b28:	603b      	str	r3, [r7, #0]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_SPI_Transmit+0x22>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e15f      	b.n	8005e00 <HAL_SPI_Transmit+0x2e2>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b48:	f7fc f9a0 	bl	8001e8c <HAL_GetTick>
 8005b4c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b62:	e148      	b.n	8005df6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d002      	beq.n	8005b70 <HAL_SPI_Transmit+0x52>
 8005b6a:	88fb      	ldrh	r3, [r7, #6]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b74:	e13f      	b.n	8005df6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2203      	movs	r2, #3
 8005b7a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	88fa      	ldrh	r2, [r7, #6]
 8005b8e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	88fa      	ldrh	r2, [r7, #6]
 8005b94:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc0:	d10f      	bne.n	8005be2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	d007      	beq.n	8005c00 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c08:	d94f      	bls.n	8005caa <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_SPI_Transmit+0xfa>
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d142      	bne.n	8005c9e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c1c:	881a      	ldrh	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c3c:	e02f      	b.n	8005c9e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d112      	bne.n	8005c72 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c70:	e015      	b.n	8005c9e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c72:	f7fc f90b 	bl	8001e8c <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d803      	bhi.n	8005c8a <HAL_SPI_Transmit+0x16c>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Transmit+0x172>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005c9c:	e0ab      	b.n	8005df6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ca      	bne.n	8005c3e <HAL_SPI_Transmit+0x120>
 8005ca8:	e080      	b.n	8005dac <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x19a>
 8005cb2:	8afb      	ldrh	r3, [r7, #22]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d174      	bne.n	8005da2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d912      	bls.n	8005ce8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc6:	881a      	ldrh	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd2:	1c9a      	adds	r2, r3, #2
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b02      	subs	r3, #2
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ce6:	e05c      	b.n	8005da2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	7812      	ldrb	r2, [r2, #0]
 8005cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d0e:	e048      	b.n	8005da2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d12b      	bne.n	8005d76 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d912      	bls.n	8005d4e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b02      	subs	r3, #2
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d4c:	e029      	b.n	8005da2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	7812      	ldrb	r2, [r2, #0]
 8005d5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	1c5a      	adds	r2, r3, #1
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d74:	e015      	b.n	8005da2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d76:	f7fc f889 	bl	8001e8c <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d803      	bhi.n	8005d8e <HAL_SPI_Transmit+0x270>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8c:	d102      	bne.n	8005d94 <HAL_SPI_Transmit+0x276>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d106      	bne.n	8005da2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005da0:	e029      	b.n	8005df6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1b1      	bne.n	8005d10 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fb69 	bl	8006488 <SPI_EndRxTxTransaction>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e003      	b.n	8005df6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005dfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3720      	adds	r7, #32
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08a      	sub	sp, #40	@ 0x28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e16:	2301      	movs	r3, #1
 8005e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d101      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x26>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	e20a      	b.n	8006244 <HAL_SPI_TransmitReceive+0x43c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e36:	f7fc f829 	bl	8001e8c <HAL_GetTick>
 8005e3a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e42:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e4a:	887b      	ldrh	r3, [r7, #2]
 8005e4c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e4e:	887b      	ldrh	r3, [r7, #2]
 8005e50:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e52:	7efb      	ldrb	r3, [r7, #27]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d00e      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x6e>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e5e:	d106      	bne.n	8005e6e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <HAL_SPI_TransmitReceive+0x66>
 8005e68:	7efb      	ldrb	r3, [r7, #27]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d003      	beq.n	8005e76 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005e74:	e1e0      	b.n	8006238 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x80>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x80>
 8005e82:	887b      	ldrh	r3, [r7, #2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005e8e:	e1d3      	b.n	8006238 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d003      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2205      	movs	r2, #5
 8005ea0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	887a      	ldrh	r2, [r7, #2]
 8005eb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	887a      	ldrh	r2, [r7, #2]
 8005ebc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	887a      	ldrh	r2, [r7, #2]
 8005eca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	887a      	ldrh	r2, [r7, #2]
 8005ed0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ee6:	d802      	bhi.n	8005eee <HAL_SPI_TransmitReceive+0xe6>
 8005ee8:	8a3b      	ldrh	r3, [r7, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d908      	bls.n	8005f00 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	e007      	b.n	8005f10 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f0e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d007      	beq.n	8005f2e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f36:	f240 8081 	bls.w	800603c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x140>
 8005f42:	8a7b      	ldrh	r3, [r7, #18]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d16d      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f58:	1c9a      	adds	r2, r3, #2
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f6c:	e05a      	b.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1ac>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d016      	beq.n	8005fb4 <HAL_SPI_TransmitReceive+0x1ac>
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d113      	bne.n	8005fb4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	881a      	ldrh	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	1c9a      	adds	r2, r3, #2
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d11c      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x1f4>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d016      	beq.n	8005ffc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68da      	ldr	r2, [r3, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	b292      	uxth	r2, r2
 8005fda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	1c9a      	adds	r2, r3, #2
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ffc:	f7fb ff46 	bl	8001e8c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006008:	429a      	cmp	r2, r3
 800600a:	d80b      	bhi.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
 800600c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006012:	d007      	beq.n	8006024 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006022:	e109      	b.n	8006238 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d19f      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x166>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d199      	bne.n	8005f6e <HAL_SPI_TransmitReceive+0x166>
 800603a:	e0e3      	b.n	8006204 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_SPI_TransmitReceive+0x244>
 8006044:	8a7b      	ldrh	r3, [r7, #18]
 8006046:	2b01      	cmp	r3, #1
 8006048:	f040 80cf 	bne.w	80061ea <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b01      	cmp	r3, #1
 8006054:	d912      	bls.n	800607c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605a:	881a      	ldrh	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006066:	1c9a      	adds	r2, r3, #2
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b02      	subs	r3, #2
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800607a:	e0b6      	b.n	80061ea <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	330c      	adds	r3, #12
 8006086:	7812      	ldrb	r2, [r2, #0]
 8006088:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006098:	b29b      	uxth	r3, r3
 800609a:	3b01      	subs	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060a2:	e0a2      	b.n	80061ea <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d134      	bne.n	800611c <HAL_SPI_TransmitReceive+0x314>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d02f      	beq.n	800611c <HAL_SPI_TransmitReceive+0x314>
 80060bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d12c      	bne.n	800611c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d912      	bls.n	80060f2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060dc:	1c9a      	adds	r2, r3, #2
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b02      	subs	r3, #2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060f0:	e012      	b.n	8006118 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	330c      	adds	r3, #12
 80060fc:	7812      	ldrb	r2, [r2, #0]
 80060fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	2b01      	cmp	r3, #1
 8006128:	d148      	bne.n	80061bc <HAL_SPI_TransmitReceive+0x3b4>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d042      	beq.n	80061bc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b01      	cmp	r3, #1
 8006140:	d923      	bls.n	800618a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006154:	1c9a      	adds	r2, r3, #2
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006160:	b29b      	uxth	r3, r3
 8006162:	3b02      	subs	r3, #2
 8006164:	b29a      	uxth	r2, r3
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	d81f      	bhi.n	80061b8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006186:	605a      	str	r2, [r3, #4]
 8006188:	e016      	b.n	80061b8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f103 020c 	add.w	r2, r3, #12
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	7812      	ldrb	r2, [r2, #0]
 8006198:	b2d2      	uxtb	r2, r2
 800619a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	3b01      	subs	r3, #1
 80061b0:	b29a      	uxth	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061b8:	2301      	movs	r3, #1
 80061ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061bc:	f7fb fe66 	bl	8001e8c <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d803      	bhi.n	80061d4 <HAL_SPI_TransmitReceive+0x3cc>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d2:	d102      	bne.n	80061da <HAL_SPI_TransmitReceive+0x3d2>
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80061e8:	e026      	b.n	8006238 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af57 	bne.w	80060a4 <HAL_SPI_TransmitReceive+0x29c>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f47f af50 	bne.w	80060a4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f93d 	bl	8006488 <SPI_EndRxTxTransaction>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622e:	e003      	b.n	8006238 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006244:	4618      	mov	r0, r3
 8006246:	3728      	adds	r7, #40	@ 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	4613      	mov	r3, r2
 800625a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800625c:	f7fb fe16 	bl	8001e8c <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	4413      	add	r3, r2
 800626a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800626c:	f7fb fe0e 	bl	8001e8c <HAL_GetTick>
 8006270:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006272:	4b39      	ldr	r3, [pc, #228]	@ (8006358 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	015b      	lsls	r3, r3, #5
 8006278:	0d1b      	lsrs	r3, r3, #20
 800627a:	69fa      	ldr	r2, [r7, #28]
 800627c:	fb02 f303 	mul.w	r3, r2, r3
 8006280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006282:	e054      	b.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d050      	beq.n	800632e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800628c:	f7fb fdfe 	bl	8001e8c <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	429a      	cmp	r2, r3
 800629a:	d902      	bls.n	80062a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d13d      	bne.n	800631e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ba:	d111      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062c4:	d004      	beq.n	80062d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ce:	d107      	bne.n	80062e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e8:	d10f      	bne.n	800630a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006308:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e017      	b.n	800634e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3b01      	subs	r3, #1
 800632c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d19b      	bne.n	8006284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3720      	adds	r7, #32
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	2000000c 	.word	0x2000000c

0800635c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	@ 0x28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800636a:	2300      	movs	r3, #0
 800636c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800636e:	f7fb fd8d 	bl	8001e8c <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	4413      	add	r3, r2
 800637c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800637e:	f7fb fd85 	bl	8001e8c <HAL_GetTick>
 8006382:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800638c:	4b3d      	ldr	r3, [pc, #244]	@ (8006484 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	4613      	mov	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	4413      	add	r3, r2
 8006396:	00da      	lsls	r2, r3, #3
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	0d1b      	lsrs	r3, r3, #20
 800639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80063a4:	e060      	b.n	8006468 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80063ac:	d107      	bne.n	80063be <SPI_WaitFifoStateUntilTimeout+0x62>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d050      	beq.n	8006468 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063c6:	f7fb fd61 	bl	8001e8c <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d902      	bls.n	80063dc <SPI_WaitFifoStateUntilTimeout+0x80>
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d13d      	bne.n	8006458 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80063ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063f4:	d111      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0xbe>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063fe:	d004      	beq.n	800640a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006408:	d107      	bne.n	800641a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006418:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006422:	d10f      	bne.n	8006444 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006442:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e010      	b.n	800647a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	3b01      	subs	r3, #1
 8006466:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	4013      	ands	r3, r2
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d196      	bne.n	80063a6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3728      	adds	r7, #40	@ 0x28
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000000c 	.word	0x2000000c

08006488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af02      	add	r7, sp, #8
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	9300      	str	r3, [sp, #0]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2200      	movs	r2, #0
 800649c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff ff5b 	bl	800635c <SPI_WaitFifoStateUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d007      	beq.n	80064bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e027      	b.n	800650c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2200      	movs	r2, #0
 80064c4:	2180      	movs	r1, #128	@ 0x80
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7ff fec0 	bl	800624c <SPI_WaitFlagStateUntilTimeout>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d007      	beq.n	80064e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d6:	f043 0220 	orr.w	r2, r3, #32
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e014      	b.n	800650c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff ff34 	bl	800635c <SPI_WaitFifoStateUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064fe:	f043 0220 	orr.w	r2, r3, #32
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e000      	b.n	800650c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3710      	adds	r7, #16
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <LL_RCC_GetUSARTClockSource>:
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800651c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006520:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4013      	ands	r3, r2
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <LL_RCC_GetLPUARTClockSource>:
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800653c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006540:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4013      	ands	r3, r2
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e042      	b.n	80065ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fb fa29 	bl	80019d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2224      	movs	r2, #36	@ 0x24
 8006582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa50 	bl	8006a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f825 	bl	80065f4 <UART_SetConfig>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d101      	bne.n	80065b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e01b      	b.n	80065ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80065c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80065d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 facf 	bl	8006b88 <UART_CheckIdleState>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f8:	b08c      	sub	sp, #48	@ 0x30
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	431a      	orrs	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	431a      	orrs	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	4313      	orrs	r3, r2
 800661a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4baf      	ldr	r3, [pc, #700]	@ (80068e0 <UART_SetConfig+0x2ec>)
 8006624:	4013      	ands	r3, r2
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800662c:	430b      	orrs	r3, r1
 800662e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	68da      	ldr	r2, [r3, #12]
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4aa4      	ldr	r2, [pc, #656]	@ (80068e4 <UART_SetConfig+0x2f0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d004      	beq.n	8006660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800665c:	4313      	orrs	r3, r2
 800665e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800666a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	6812      	ldr	r2, [r2, #0]
 8006672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006674:	430b      	orrs	r3, r1
 8006676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	f023 010f 	bic.w	r1, r3, #15
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a95      	ldr	r2, [pc, #596]	@ (80068e8 <UART_SetConfig+0x2f4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d125      	bne.n	80066e4 <UART_SetConfig+0xf0>
 8006698:	2003      	movs	r0, #3
 800669a:	f7ff ff3b 	bl	8006514 <LL_RCC_GetUSARTClockSource>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d81b      	bhi.n	80066dc <UART_SetConfig+0xe8>
 80066a4:	a201      	add	r2, pc, #4	@ (adr r2, 80066ac <UART_SetConfig+0xb8>)
 80066a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080066bd 	.word	0x080066bd
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	080066c5 	.word	0x080066c5
 80066b8:	080066d5 	.word	0x080066d5
 80066bc:	2301      	movs	r3, #1
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e042      	b.n	800674a <UART_SetConfig+0x156>
 80066c4:	2302      	movs	r3, #2
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e03e      	b.n	800674a <UART_SetConfig+0x156>
 80066cc:	2304      	movs	r3, #4
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	e03a      	b.n	800674a <UART_SetConfig+0x156>
 80066d4:	2308      	movs	r3, #8
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066da:	e036      	b.n	800674a <UART_SetConfig+0x156>
 80066dc:	2310      	movs	r3, #16
 80066de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066e2:	e032      	b.n	800674a <UART_SetConfig+0x156>
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7e      	ldr	r2, [pc, #504]	@ (80068e4 <UART_SetConfig+0x2f0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d12a      	bne.n	8006744 <UART_SetConfig+0x150>
 80066ee:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80066f2:	f7ff ff1f 	bl	8006534 <LL_RCC_GetLPUARTClockSource>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80066fc:	d01a      	beq.n	8006734 <UART_SetConfig+0x140>
 80066fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006702:	d81b      	bhi.n	800673c <UART_SetConfig+0x148>
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d00c      	beq.n	8006724 <UART_SetConfig+0x130>
 800670a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800670e:	d815      	bhi.n	800673c <UART_SetConfig+0x148>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <UART_SetConfig+0x128>
 8006714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006718:	d008      	beq.n	800672c <UART_SetConfig+0x138>
 800671a:	e00f      	b.n	800673c <UART_SetConfig+0x148>
 800671c:	2300      	movs	r3, #0
 800671e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006722:	e012      	b.n	800674a <UART_SetConfig+0x156>
 8006724:	2302      	movs	r3, #2
 8006726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800672a:	e00e      	b.n	800674a <UART_SetConfig+0x156>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006732:	e00a      	b.n	800674a <UART_SetConfig+0x156>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800673a:	e006      	b.n	800674a <UART_SetConfig+0x156>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006742:	e002      	b.n	800674a <UART_SetConfig+0x156>
 8006744:	2310      	movs	r3, #16
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a65      	ldr	r2, [pc, #404]	@ (80068e4 <UART_SetConfig+0x2f0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	f040 8097 	bne.w	8006884 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006756:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800675a:	2b08      	cmp	r3, #8
 800675c:	d823      	bhi.n	80067a6 <UART_SetConfig+0x1b2>
 800675e:	a201      	add	r2, pc, #4	@ (adr r2, 8006764 <UART_SetConfig+0x170>)
 8006760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006764:	08006789 	.word	0x08006789
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006791 	.word	0x08006791
 8006770:	080067a7 	.word	0x080067a7
 8006774:	08006797 	.word	0x08006797
 8006778:	080067a7 	.word	0x080067a7
 800677c:	080067a7 	.word	0x080067a7
 8006780:	080067a7 	.word	0x080067a7
 8006784:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006788:	f7fe fc22 	bl	8004fd0 <HAL_RCC_GetPCLK1Freq>
 800678c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800678e:	e010      	b.n	80067b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b56      	ldr	r3, [pc, #344]	@ (80068ec <UART_SetConfig+0x2f8>)
 8006792:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fe fb99 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 800679a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 812b 	beq.w	8006a10 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	4a4c      	ldr	r2, [pc, #304]	@ (80068f0 <UART_SetConfig+0x2fc>)
 80067c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d305      	bcc.n	80067ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e4:	69ba      	ldr	r2, [r7, #24]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d903      	bls.n	80067f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067f0:	e10e      	b.n	8006a10 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	2200      	movs	r2, #0
 80067f6:	60bb      	str	r3, [r7, #8]
 80067f8:	60fa      	str	r2, [r7, #12]
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fe:	4a3c      	ldr	r2, [pc, #240]	@ (80068f0 <UART_SetConfig+0x2fc>)
 8006800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006804:	b29b      	uxth	r3, r3
 8006806:	2200      	movs	r2, #0
 8006808:	603b      	str	r3, [r7, #0]
 800680a:	607a      	str	r2, [r7, #4]
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006814:	f7fa f9a0 	bl	8000b58 <__aeabi_uldivmod>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	020b      	lsls	r3, r1, #8
 800682a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800682e:	0202      	lsls	r2, r0, #8
 8006830:	6979      	ldr	r1, [r7, #20]
 8006832:	6849      	ldr	r1, [r1, #4]
 8006834:	0849      	lsrs	r1, r1, #1
 8006836:	2000      	movs	r0, #0
 8006838:	460c      	mov	r4, r1
 800683a:	4605      	mov	r5, r0
 800683c:	eb12 0804 	adds.w	r8, r2, r4
 8006840:	eb43 0905 	adc.w	r9, r3, r5
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	469a      	mov	sl, r3
 800684c:	4693      	mov	fp, r2
 800684e:	4652      	mov	r2, sl
 8006850:	465b      	mov	r3, fp
 8006852:	4640      	mov	r0, r8
 8006854:	4649      	mov	r1, r9
 8006856:	f7fa f97f 	bl	8000b58 <__aeabi_uldivmod>
 800685a:	4602      	mov	r2, r0
 800685c:	460b      	mov	r3, r1
 800685e:	4613      	mov	r3, r2
 8006860:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006868:	d308      	bcc.n	800687c <UART_SetConfig+0x288>
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006870:	d204      	bcs.n	800687c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6a3a      	ldr	r2, [r7, #32]
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	e0c9      	b.n	8006a10 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006882:	e0c5      	b.n	8006a10 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800688c:	d16d      	bne.n	800696a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800688e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006892:	3b01      	subs	r3, #1
 8006894:	2b07      	cmp	r3, #7
 8006896:	d82d      	bhi.n	80068f4 <UART_SetConfig+0x300>
 8006898:	a201      	add	r2, pc, #4	@ (adr r2, 80068a0 <UART_SetConfig+0x2ac>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068c1 	.word	0x080068c1
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068f5 	.word	0x080068f5
 80068ac:	080068cf 	.word	0x080068cf
 80068b0:	080068f5 	.word	0x080068f5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068f5 	.word	0x080068f5
 80068bc:	080068d7 	.word	0x080068d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068c0:	f7fe fb9c 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068c6:	e01b      	b.n	8006900 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c8:	4b08      	ldr	r3, [pc, #32]	@ (80068ec <UART_SetConfig+0x2f8>)
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068cc:	e018      	b.n	8006900 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ce:	f7fe fafd 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 80068d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80068d4:	e014      	b.n	8006900 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80068dc:	e010      	b.n	8006900 <UART_SetConfig+0x30c>
 80068de:	bf00      	nop
 80068e0:	cfff69f3 	.word	0xcfff69f3
 80068e4:	40008000 	.word	0x40008000
 80068e8:	40013800 	.word	0x40013800
 80068ec:	00f42400 	.word	0x00f42400
 80068f0:	0800dc04 	.word	0x0800dc04
      default:
        pclk = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80068fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 8084 	beq.w	8006a10 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	4a4b      	ldr	r2, [pc, #300]	@ (8006a3c <UART_SetConfig+0x448>)
 800690e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006912:	461a      	mov	r2, r3
 8006914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006916:	fbb3 f3f2 	udiv	r3, r3, r2
 800691a:	005a      	lsls	r2, r3, #1
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	085b      	lsrs	r3, r3, #1
 8006922:	441a      	add	r2, r3
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	2b0f      	cmp	r3, #15
 8006932:	d916      	bls.n	8006962 <UART_SetConfig+0x36e>
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800693a:	d212      	bcs.n	8006962 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	b29b      	uxth	r3, r3
 8006940:	f023 030f 	bic.w	r3, r3, #15
 8006944:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	085b      	lsrs	r3, r3, #1
 800694a:	b29b      	uxth	r3, r3
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	b29a      	uxth	r2, r3
 8006952:	8bfb      	ldrh	r3, [r7, #30]
 8006954:	4313      	orrs	r3, r2
 8006956:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	8bfa      	ldrh	r2, [r7, #30]
 800695e:	60da      	str	r2, [r3, #12]
 8006960:	e056      	b.n	8006a10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006968:	e052      	b.n	8006a10 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800696a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800696e:	3b01      	subs	r3, #1
 8006970:	2b07      	cmp	r3, #7
 8006972:	d822      	bhi.n	80069ba <UART_SetConfig+0x3c6>
 8006974:	a201      	add	r2, pc, #4	@ (adr r2, 800697c <UART_SetConfig+0x388>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	0800699d 	.word	0x0800699d
 8006980:	080069a5 	.word	0x080069a5
 8006984:	080069bb 	.word	0x080069bb
 8006988:	080069ab 	.word	0x080069ab
 800698c:	080069bb 	.word	0x080069bb
 8006990:	080069bb 	.word	0x080069bb
 8006994:	080069bb 	.word	0x080069bb
 8006998:	080069b3 	.word	0x080069b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800699c:	f7fe fb2e 	bl	8004ffc <HAL_RCC_GetPCLK2Freq>
 80069a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069a2:	e010      	b.n	80069c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069a4:	4b26      	ldr	r3, [pc, #152]	@ (8006a40 <UART_SetConfig+0x44c>)
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a8:	e00d      	b.n	80069c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069aa:	f7fe fa8f 	bl	8004ecc <HAL_RCC_GetSysClockFreq>
 80069ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80069b0:	e009      	b.n	80069c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069b8:	e005      	b.n	80069c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069c4:	bf00      	nop
    }

    if (pclk != 0U)
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d021      	beq.n	8006a10 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a3c <UART_SetConfig+0x448>)
 80069d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d6:	461a      	mov	r2, r3
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	fbb3 f2f2 	udiv	r2, r3, r2
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	441a      	add	r2, r3
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b0f      	cmp	r3, #15
 80069f4:	d909      	bls.n	8006a0a <UART_SetConfig+0x416>
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069fc:	d205      	bcs.n	8006a0a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	60da      	str	r2, [r3, #12]
 8006a08:	e002      	b.n	8006a10 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2200      	movs	r2, #0
 8006a24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006a2c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3730      	adds	r7, #48	@ 0x30
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	0800dc04 	.word	0x0800dc04
 8006a40:	00f42400 	.word	0x00f42400

08006a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	f003 0302 	and.w	r3, r3, #2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab6:	f003 0304 	and.w	r3, r3, #4
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d01a      	beq.n	8006b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b42:	d10a      	bne.n	8006b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b098      	sub	sp, #96	@ 0x60
 8006b8c:	af02      	add	r7, sp, #8
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b98:	f7fb f978 	bl	8001e8c <HAL_GetTick>
 8006b9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0308 	and.w	r3, r3, #8
 8006ba8:	2b08      	cmp	r3, #8
 8006baa:	d12f      	bne.n	8006c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f88e 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d022      	beq.n	8006c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	e853 3f00 	ldrex	r3, [r3]
 8006bd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006be4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006be6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006bea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e6      	bne.n	8006bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e063      	b.n	8006cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0304 	and.w	r3, r3, #4
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d149      	bne.n	8006cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c1a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c22:	2200      	movs	r2, #0
 8006c24:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f857 	bl	8006cdc <UART_WaitOnFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d03c      	beq.n	8006cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	e853 3f00 	ldrex	r3, [r3]
 8006c40:	623b      	str	r3, [r7, #32]
   return(result);
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c54:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c5a:	e841 2300 	strex	r3, r2, [r1]
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1e6      	bne.n	8006c34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3308      	adds	r3, #8
 8006c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	e853 3f00 	ldrex	r3, [r3]
 8006c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 0301 	bic.w	r3, r3, #1
 8006c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3308      	adds	r3, #8
 8006c84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c86:	61fa      	str	r2, [r7, #28]
 8006c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8a:	69b9      	ldr	r1, [r7, #24]
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	e841 2300 	strex	r3, r2, [r1]
 8006c92:	617b      	str	r3, [r7, #20]
   return(result);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1e5      	bne.n	8006c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e012      	b.n	8006cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3758      	adds	r7, #88	@ 0x58
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cec:	e04f      	b.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf4:	d04b      	beq.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cf6:	f7fb f8c9 	bl	8001e8c <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d302      	bcc.n	8006d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e04e      	b.n	8006dae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0304 	and.w	r3, r3, #4
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d037      	beq.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2b80      	cmp	r3, #128	@ 0x80
 8006d22:	d034      	beq.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	2b40      	cmp	r3, #64	@ 0x40
 8006d28:	d031      	beq.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d110      	bne.n	8006d5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2208      	movs	r2, #8
 8006d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f838 	bl	8006db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2208      	movs	r2, #8
 8006d4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e029      	b.n	8006dae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d68:	d111      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 f81e 	bl	8006db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e00f      	b.n	8006dae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	4013      	ands	r3, r2
 8006d98:	68ba      	ldr	r2, [r7, #8]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d0a0      	beq.n	8006cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b095      	sub	sp, #84	@ 0x54
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dde:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006de2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e6      	bne.n	8006dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a3b      	ldr	r3, [r7, #32]
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e06:	f023 0301 	bic.w	r3, r3, #1
 8006e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e3      	bne.n	8006df0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d118      	bne.n	8006e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f023 0310 	bic.w	r3, r3, #16
 8006e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4e:	61bb      	str	r3, [r7, #24]
 8006e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6979      	ldr	r1, [r7, #20]
 8006e54:	69ba      	ldr	r2, [r7, #24]
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006e76:	bf00      	nop
 8006e78:	3754      	adds	r7, #84	@ 0x54
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b085      	sub	sp, #20
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_UARTEx_DisableFifoMode+0x16>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e027      	b.n	8006ee8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2224      	movs	r2, #36	@ 0x24
 8006ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f022 0201 	bic.w	r2, r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ec6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d101      	bne.n	8006f0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f08:	2302      	movs	r3, #2
 8006f0a:	e02d      	b.n	8006f68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2224      	movs	r2, #36	@ 0x24
 8006f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0201 	bic.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	430a      	orrs	r2, r1
 8006f46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 f84f 	bl	8006fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e02d      	b.n	8006fe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2224      	movs	r2, #36	@ 0x24
 8006f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	683a      	ldr	r2, [r7, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f811 	bl	8006fec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d108      	bne.n	800700e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800700c:	e031      	b.n	8007072 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800700e:	2308      	movs	r3, #8
 8007010:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007012:	2308      	movs	r3, #8
 8007014:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	0e5b      	lsrs	r3, r3, #25
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	0f5b      	lsrs	r3, r3, #29
 800702e:	b2db      	uxtb	r3, r3
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	7b3a      	ldrb	r2, [r7, #12]
 800703a:	4911      	ldr	r1, [pc, #68]	@ (8007080 <UARTEx_SetNbDataToProcess+0x94>)
 800703c:	5c8a      	ldrb	r2, [r1, r2]
 800703e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007042:	7b3a      	ldrb	r2, [r7, #12]
 8007044:	490f      	ldr	r1, [pc, #60]	@ (8007084 <UARTEx_SetNbDataToProcess+0x98>)
 8007046:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007048:	fb93 f3f2 	sdiv	r3, r3, r2
 800704c:	b29a      	uxth	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	7b7a      	ldrb	r2, [r7, #13]
 8007058:	4909      	ldr	r1, [pc, #36]	@ (8007080 <UARTEx_SetNbDataToProcess+0x94>)
 800705a:	5c8a      	ldrb	r2, [r1, r2]
 800705c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007060:	7b7a      	ldrb	r2, [r7, #13]
 8007062:	4908      	ldr	r1, [pc, #32]	@ (8007084 <UARTEx_SetNbDataToProcess+0x98>)
 8007064:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007066:	fb93 f3f2 	sdiv	r3, r3, r2
 800706a:	b29a      	uxth	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007072:	bf00      	nop
 8007074:	3714      	adds	r7, #20
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	0800dc1c 	.word	0x0800dc1c
 8007084:	0800dc24 	.word	0x0800dc24

08007088 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800708c:	4907      	ldr	r1, [pc, #28]	@ (80070ac <MX_FATFS_Init+0x24>)
 800708e:	4808      	ldr	r0, [pc, #32]	@ (80070b0 <MX_FATFS_Init+0x28>)
 8007090:	f003 f8f8 	bl	800a284 <FATFS_LinkDriver>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d002      	beq.n	80070a0 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800709a:	f04f 33ff 	mov.w	r3, #4294967295
 800709e:	e003      	b.n	80070a8 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80070a0:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <MX_FATFS_Init+0x2c>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 80070a6:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000cb30 	.word	0x2000cb30
 80070b0:	20000018 	.word	0x20000018
 80070b4:	2000cb34 	.word	0x2000cb34

080070b8 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80070bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80070be:	4618      	mov	r0, r3
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
	return USER_SPI_initialize(pdrv);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f9d3 	bl	8007480 <USER_SPI_initialize>
 80070da:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return USER_SPI_status(pdrv);
 80070ee:	79fb      	ldrb	r3, [r7, #7]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f000 fab1 	bl	8007658 <USER_SPI_status>
 80070f6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	607a      	str	r2, [r7, #4]
 800710a:	603b      	str	r3, [r7, #0]
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8007110:	7bf8      	ldrb	r0, [r7, #15]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	68b9      	ldr	r1, [r7, #8]
 8007118:	f000 fab4 	bl	8007684 <USER_SPI_read>
 800711c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b084      	sub	sp, #16
 800712a:	af00      	add	r7, sp, #0
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	603b      	str	r3, [r7, #0]
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8007136:	7bf8      	ldrb	r0, [r7, #15]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	f000 fb07 	bl	8007750 <USER_SPI_write>
 8007142:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	603a      	str	r2, [r7, #0]
 8007156:	71fb      	strb	r3, [r7, #7]
 8007158:	460b      	mov	r3, r1
 800715a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8007160:	79b9      	ldrb	r1, [r7, #6]
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	683a      	ldr	r2, [r7, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f000 fb6e 	bl	8007848 <USER_SPI_ioctl>
 800716c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007180:	f7fa fe84 	bl	8001e8c <HAL_GetTick>
 8007184:	4603      	mov	r3, r0
 8007186:	4a04      	ldr	r2, [pc, #16]	@ (8007198 <SPI_Timer_On+0x20>)
 8007188:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800718a:	4a04      	ldr	r2, [pc, #16]	@ (800719c <SPI_Timer_On+0x24>)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	2000cb38 	.word	0x2000cb38
 800719c:	2000cb3c 	.word	0x2000cb3c

080071a0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80071a4:	f7fa fe72 	bl	8001e8c <HAL_GetTick>
 80071a8:	4602      	mov	r2, r0
 80071aa:	4b06      	ldr	r3, [pc, #24]	@ (80071c4 <SPI_Timer_Status+0x24>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	4b05      	ldr	r3, [pc, #20]	@ (80071c8 <SPI_Timer_Status+0x28>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	bf34      	ite	cc
 80071b8:	2301      	movcc	r3, #1
 80071ba:	2300      	movcs	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
}
 80071be:	4618      	mov	r0, r3
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	2000cb38 	.word	0x2000cb38
 80071c8:	2000cb3c 	.word	0x2000cb3c

080071cc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	4603      	mov	r3, r0
 80071d4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80071d6:	f107 020f 	add.w	r2, r7, #15
 80071da:	1df9      	adds	r1, r7, #7
 80071dc:	2332      	movs	r3, #50	@ 0x32
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	2301      	movs	r3, #1
 80071e2:	4804      	ldr	r0, [pc, #16]	@ (80071f4 <xchg_spi+0x28>)
 80071e4:	f7fe fe10 	bl	8005e08 <HAL_SPI_TransmitReceive>
    return rxDat;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	200002fc 	.word	0x200002fc

080071f8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80071f8:	b590      	push	{r4, r7, lr}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	e00a      	b.n	800721e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	18d4      	adds	r4, r2, r3
 800720e:	20ff      	movs	r0, #255	@ 0xff
 8007210:	f7ff ffdc 	bl	80071cc <xchg_spi>
 8007214:	4603      	mov	r3, r0
 8007216:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d3f0      	bcc.n	8007208 <rcvr_spi_multi+0x10>
	}
}
 8007226:	bf00      	nop
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bd90      	pop	{r4, r7, pc}

08007230 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4803      	ldr	r0, [pc, #12]	@ (8007254 <xmit_spi_multi+0x24>)
 8007246:	f7fe fc6a 	bl	8005b1e <HAL_SPI_Transmit>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	200002fc 	.word	0x200002fc

08007258 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8007260:	f7fa fe14 	bl	8001e8c <HAL_GetTick>
 8007264:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800726a:	20ff      	movs	r0, #255	@ 0xff
 800726c:	f7ff ffae 	bl	80071cc <xchg_spi>
 8007270:	4603      	mov	r3, r0
 8007272:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2bff      	cmp	r3, #255	@ 0xff
 8007278:	d007      	beq.n	800728a <wait_ready+0x32>
 800727a:	f7fa fe07 	bl	8001e8c <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d8ef      	bhi.n	800726a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
 800728c:	2bff      	cmp	r3, #255	@ 0xff
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80072a2:	2201      	movs	r2, #1
 80072a4:	2110      	movs	r1, #16
 80072a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072aa:	f7fb f917 	bl	80024dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80072ae:	20ff      	movs	r0, #255	@ 0xff
 80072b0:	f7ff ff8c 	bl	80071cc <xchg_spi>

}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80072bc:	2200      	movs	r2, #0
 80072be:	2110      	movs	r1, #16
 80072c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80072c4:	f7fb f90a 	bl	80024dc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80072c8:	20ff      	movs	r0, #255	@ 0xff
 80072ca:	f7ff ff7f 	bl	80071cc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80072ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80072d2:	f7ff ffc1 	bl	8007258 <wait_ready>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <spiselect+0x28>
 80072dc:	2301      	movs	r3, #1
 80072de:	e002      	b.n	80072e6 <spiselect+0x2e>

	despiselect();
 80072e0:	f7ff ffdd 	bl	800729e <despiselect>
	return 0;	/* Timeout */
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	bd80      	pop	{r7, pc}

080072ea <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80072f4:	20c8      	movs	r0, #200	@ 0xc8
 80072f6:	f7ff ff3f 	bl	8007178 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80072fa:	20ff      	movs	r0, #255	@ 0xff
 80072fc:	f7ff ff66 	bl	80071cc <xchg_spi>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2bff      	cmp	r3, #255	@ 0xff
 8007308:	d104      	bne.n	8007314 <rcvr_datablock+0x2a>
 800730a:	f7ff ff49 	bl	80071a0 <SPI_Timer_Status>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f2      	bne.n	80072fa <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007314:	7bfb      	ldrb	r3, [r7, #15]
 8007316:	2bfe      	cmp	r3, #254	@ 0xfe
 8007318:	d001      	beq.n	800731e <rcvr_datablock+0x34>
 800731a:	2300      	movs	r3, #0
 800731c:	e00a      	b.n	8007334 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff69 	bl	80071f8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007326:	20ff      	movs	r0, #255	@ 0xff
 8007328:	f7ff ff50 	bl	80071cc <xchg_spi>
 800732c:	20ff      	movs	r0, #255	@ 0xff
 800732e:	f7ff ff4d 	bl	80071cc <xchg_spi>

	return 1;						/* Function succeeded */
 8007332:	2301      	movs	r3, #1
}
 8007334:	4618      	mov	r0, r3
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	460b      	mov	r3, r1
 8007346:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007348:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800734c:	f7ff ff84 	bl	8007258 <wait_ready>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <xmit_datablock+0x1e>
 8007356:	2300      	movs	r3, #0
 8007358:	e01e      	b.n	8007398 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff35 	bl	80071cc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	2bfd      	cmp	r3, #253	@ 0xfd
 8007366:	d016      	beq.n	8007396 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007368:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff ff5f 	bl	8007230 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007372:	20ff      	movs	r0, #255	@ 0xff
 8007374:	f7ff ff2a 	bl	80071cc <xchg_spi>
 8007378:	20ff      	movs	r0, #255	@ 0xff
 800737a:	f7ff ff27 	bl	80071cc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800737e:	20ff      	movs	r0, #255	@ 0xff
 8007380:	f7ff ff24 	bl	80071cc <xchg_spi>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	f003 031f 	and.w	r3, r3, #31
 800738e:	2b05      	cmp	r3, #5
 8007390:	d001      	beq.n	8007396 <xmit_datablock+0x5a>
 8007392:	2300      	movs	r3, #0
 8007394:	e000      	b.n	8007398 <xmit_datablock+0x5c>
	}
	return 1;
 8007396:	2301      	movs	r3, #1
}
 8007398:	4618      	mov	r0, r3
 800739a:	3710      	adds	r7, #16
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}

080073a0 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	4603      	mov	r3, r0
 80073a8:	6039      	str	r1, [r7, #0]
 80073aa:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80073ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	da0e      	bge.n	80073d2 <send_cmd+0x32>
		cmd &= 0x7F;
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ba:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80073bc:	2100      	movs	r1, #0
 80073be:	2037      	movs	r0, #55	@ 0x37
 80073c0:	f7ff ffee 	bl	80073a0 <send_cmd>
 80073c4:	4603      	mov	r3, r0
 80073c6:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d901      	bls.n	80073d2 <send_cmd+0x32>
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	e051      	b.n	8007476 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	2b0c      	cmp	r3, #12
 80073d6:	d008      	beq.n	80073ea <send_cmd+0x4a>
		despiselect();
 80073d8:	f7ff ff61 	bl	800729e <despiselect>
		if (!spiselect()) return 0xFF;
 80073dc:	f7ff ff6c 	bl	80072b8 <spiselect>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <send_cmd+0x4a>
 80073e6:	23ff      	movs	r3, #255	@ 0xff
 80073e8:	e045      	b.n	8007476 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7ff feea 	bl	80071cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	0e1b      	lsrs	r3, r3, #24
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff fee4 	bl	80071cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	0c1b      	lsrs	r3, r3, #16
 8007408:	b2db      	uxtb	r3, r3
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fede 	bl	80071cc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	0a1b      	lsrs	r3, r3, #8
 8007414:	b2db      	uxtb	r3, r3
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fed8 	bl	80071cc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff fed3 	bl	80071cc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800742a:	79fb      	ldrb	r3, [r7, #7]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <send_cmd+0x94>
 8007430:	2395      	movs	r3, #149	@ 0x95
 8007432:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	2b08      	cmp	r3, #8
 8007438:	d101      	bne.n	800743e <send_cmd+0x9e>
 800743a:	2387      	movs	r3, #135	@ 0x87
 800743c:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	4618      	mov	r0, r3
 8007442:	f7ff fec3 	bl	80071cc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007446:	79fb      	ldrb	r3, [r7, #7]
 8007448:	2b0c      	cmp	r3, #12
 800744a:	d102      	bne.n	8007452 <send_cmd+0xb2>
 800744c:	20ff      	movs	r0, #255	@ 0xff
 800744e:	f7ff febd 	bl	80071cc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007452:	230a      	movs	r3, #10
 8007454:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007456:	20ff      	movs	r0, #255	@ 0xff
 8007458:	f7ff feb8 	bl	80071cc <xchg_spi>
 800745c:	4603      	mov	r3, r0
 800745e:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007464:	2b00      	cmp	r3, #0
 8007466:	da05      	bge.n	8007474 <send_cmd+0xd4>
 8007468:	7bfb      	ldrb	r3, [r7, #15]
 800746a:	3b01      	subs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
 800746e:	7bfb      	ldrb	r3, [r7, #15]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d1f0      	bne.n	8007456 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007474:	7bbb      	ldrb	r3, [r7, #14]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007480:	b590      	push	{r4, r7, lr}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	4603      	mov	r3, r0
 8007488:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800748a:	79fb      	ldrb	r3, [r7, #7]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <USER_SPI_initialize+0x14>
 8007490:	2301      	movs	r3, #1
 8007492:	e0d6      	b.n	8007642 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007494:	4b6d      	ldr	r3, [pc, #436]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <USER_SPI_initialize+0x2a>
 80074a2:	4b6a      	ldr	r3, [pc, #424]	@ (800764c <USER_SPI_initialize+0x1cc>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	e0cb      	b.n	8007642 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80074aa:	4b69      	ldr	r3, [pc, #420]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80074b4:	4b66      	ldr	r3, [pc, #408]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80074bc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80074be:	230a      	movs	r3, #10
 80074c0:	73fb      	strb	r3, [r7, #15]
 80074c2:	e005      	b.n	80074d0 <USER_SPI_initialize+0x50>
 80074c4:	20ff      	movs	r0, #255	@ 0xff
 80074c6:	f7ff fe81 	bl	80071cc <xchg_spi>
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1f6      	bne.n	80074c4 <USER_SPI_initialize+0x44>

	ty = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80074da:	2100      	movs	r1, #0
 80074dc:	2000      	movs	r0, #0
 80074de:	f7ff ff5f 	bl	80073a0 <send_cmd>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	f040 808b 	bne.w	8007600 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80074ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80074ee:	f7ff fe43 	bl	8007178 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80074f2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80074f6:	2008      	movs	r0, #8
 80074f8:	f7ff ff52 	bl	80073a0 <send_cmd>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d151      	bne.n	80075a6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	e00d      	b.n	8007524 <USER_SPI_initialize+0xa4>
 8007508:	7bfc      	ldrb	r4, [r7, #15]
 800750a:	20ff      	movs	r0, #255	@ 0xff
 800750c:	f7ff fe5e 	bl	80071cc <xchg_spi>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	f104 0310 	add.w	r3, r4, #16
 8007518:	443b      	add	r3, r7
 800751a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	3301      	adds	r3, #1
 8007522:	73fb      	strb	r3, [r7, #15]
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b03      	cmp	r3, #3
 8007528:	d9ee      	bls.n	8007508 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800752a:	7abb      	ldrb	r3, [r7, #10]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d167      	bne.n	8007600 <USER_SPI_initialize+0x180>
 8007530:	7afb      	ldrb	r3, [r7, #11]
 8007532:	2baa      	cmp	r3, #170	@ 0xaa
 8007534:	d164      	bne.n	8007600 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007536:	bf00      	nop
 8007538:	f7ff fe32 	bl	80071a0 <SPI_Timer_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <USER_SPI_initialize+0xd2>
 8007542:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007546:	20a9      	movs	r0, #169	@ 0xa9
 8007548:	f7ff ff2a 	bl	80073a0 <send_cmd>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f2      	bne.n	8007538 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007552:	f7ff fe25 	bl	80071a0 <SPI_Timer_Status>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d051      	beq.n	8007600 <USER_SPI_initialize+0x180>
 800755c:	2100      	movs	r1, #0
 800755e:	203a      	movs	r0, #58	@ 0x3a
 8007560:	f7ff ff1e 	bl	80073a0 <send_cmd>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d14a      	bne.n	8007600 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	e00d      	b.n	800758c <USER_SPI_initialize+0x10c>
 8007570:	7bfc      	ldrb	r4, [r7, #15]
 8007572:	20ff      	movs	r0, #255	@ 0xff
 8007574:	f7ff fe2a 	bl	80071cc <xchg_spi>
 8007578:	4603      	mov	r3, r0
 800757a:	461a      	mov	r2, r3
 800757c:	f104 0310 	add.w	r3, r4, #16
 8007580:	443b      	add	r3, r7
 8007582:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	3301      	adds	r3, #1
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b03      	cmp	r3, #3
 8007590:	d9ee      	bls.n	8007570 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007592:	7a3b      	ldrb	r3, [r7, #8]
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <USER_SPI_initialize+0x120>
 800759c:	230c      	movs	r3, #12
 800759e:	e000      	b.n	80075a2 <USER_SPI_initialize+0x122>
 80075a0:	2304      	movs	r3, #4
 80075a2:	737b      	strb	r3, [r7, #13]
 80075a4:	e02c      	b.n	8007600 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80075a6:	2100      	movs	r1, #0
 80075a8:	20a9      	movs	r0, #169	@ 0xa9
 80075aa:	f7ff fef9 	bl	80073a0 <send_cmd>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d804      	bhi.n	80075be <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80075b4:	2302      	movs	r3, #2
 80075b6:	737b      	strb	r3, [r7, #13]
 80075b8:	23a9      	movs	r3, #169	@ 0xa9
 80075ba:	73bb      	strb	r3, [r7, #14]
 80075bc:	e003      	b.n	80075c6 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80075be:	2301      	movs	r3, #1
 80075c0:	737b      	strb	r3, [r7, #13]
 80075c2:	2301      	movs	r3, #1
 80075c4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80075c6:	bf00      	nop
 80075c8:	f7ff fdea 	bl	80071a0 <SPI_Timer_Status>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <USER_SPI_initialize+0x162>
 80075d2:	7bbb      	ldrb	r3, [r7, #14]
 80075d4:	2100      	movs	r1, #0
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fee2 	bl	80073a0 <send_cmd>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1f2      	bne.n	80075c8 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80075e2:	f7ff fddd 	bl	80071a0 <SPI_Timer_Status>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <USER_SPI_initialize+0x17c>
 80075ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80075f0:	2010      	movs	r0, #16
 80075f2:	f7ff fed5 	bl	80073a0 <send_cmd>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USER_SPI_initialize+0x180>
				ty = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007600:	4a14      	ldr	r2, [pc, #80]	@ (8007654 <USER_SPI_initialize+0x1d4>)
 8007602:	7b7b      	ldrb	r3, [r7, #13]
 8007604:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007606:	f7ff fe4a 	bl	800729e <despiselect>

	if (ty) {			/* OK */
 800760a:	7b7b      	ldrb	r3, [r7, #13]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007610:	4b0f      	ldr	r3, [pc, #60]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800761a:	4b0d      	ldr	r3, [pc, #52]	@ (8007650 <USER_SPI_initialize+0x1d0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f042 0210 	orr.w	r2, r2, #16
 8007622:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007624:	4b09      	ldr	r3, [pc, #36]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	b2da      	uxtb	r2, r3
 8007630:	4b06      	ldr	r3, [pc, #24]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	e002      	b.n	800763c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007636:	4b05      	ldr	r3, [pc, #20]	@ (800764c <USER_SPI_initialize+0x1cc>)
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800763c:	4b03      	ldr	r3, [pc, #12]	@ (800764c <USER_SPI_initialize+0x1cc>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	b2db      	uxtb	r3, r3
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	bd90      	pop	{r4, r7, pc}
 800764a:	bf00      	nop
 800764c:	2000002c 	.word	0x2000002c
 8007650:	200002fc 	.word	0x200002fc
 8007654:	2000cb35 	.word	0x2000cb35

08007658 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <USER_SPI_status+0x14>
 8007668:	2301      	movs	r3, #1
 800766a:	e002      	b.n	8007672 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800766c:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <USER_SPI_status+0x28>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	b2db      	uxtb	r3, r3
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	2000002c 	.word	0x2000002c

08007684 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60b9      	str	r1, [r7, #8]
 800768c:	607a      	str	r2, [r7, #4]
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007694:	7bfb      	ldrb	r3, [r7, #15]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <USER_SPI_read+0x1c>
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USER_SPI_read+0x20>
 80076a0:	2304      	movs	r3, #4
 80076a2:	e04d      	b.n	8007740 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80076a4:	4b28      	ldr	r3, [pc, #160]	@ (8007748 <USER_SPI_read+0xc4>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <USER_SPI_read+0x32>
 80076b2:	2303      	movs	r3, #3
 80076b4:	e044      	b.n	8007740 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80076b6:	4b25      	ldr	r3, [pc, #148]	@ (800774c <USER_SPI_read+0xc8>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	f003 0308 	and.w	r3, r3, #8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d102      	bne.n	80076c8 <USER_SPI_read+0x44>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	025b      	lsls	r3, r3, #9
 80076c6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d111      	bne.n	80076f2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	2011      	movs	r0, #17
 80076d2:	f7ff fe65 	bl	80073a0 <send_cmd>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d129      	bne.n	8007730 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80076dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80076e0:	68b8      	ldr	r0, [r7, #8]
 80076e2:	f7ff fe02 	bl	80072ea <rcvr_datablock>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d021      	beq.n	8007730 <USER_SPI_read+0xac>
			count = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	603b      	str	r3, [r7, #0]
 80076f0:	e01e      	b.n	8007730 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	2012      	movs	r0, #18
 80076f6:	f7ff fe53 	bl	80073a0 <send_cmd>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d117      	bne.n	8007730 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	f7ff fdf0 	bl	80072ea <rcvr_datablock>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <USER_SPI_read+0xa2>
				buff += 512;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007716:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	3b01      	subs	r3, #1
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ed      	bne.n	8007700 <USER_SPI_read+0x7c>
 8007724:	e000      	b.n	8007728 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007726:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007728:	2100      	movs	r1, #0
 800772a:	200c      	movs	r0, #12
 800772c:	f7ff fe38 	bl	80073a0 <send_cmd>
		}
	}
	despiselect();
 8007730:	f7ff fdb5 	bl	800729e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	bf14      	ite	ne
 800773a:	2301      	movne	r3, #1
 800773c:	2300      	moveq	r3, #0
 800773e:	b2db      	uxtb	r3, r3
}
 8007740:	4618      	mov	r0, r3
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	2000002c 	.word	0x2000002c
 800774c:	2000cb35 	.word	0x2000cb35

08007750 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <USER_SPI_write+0x1c>
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <USER_SPI_write+0x20>
 800776c:	2304      	movs	r3, #4
 800776e:	e063      	b.n	8007838 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007770:	4b33      	ldr	r3, [pc, #204]	@ (8007840 <USER_SPI_write+0xf0>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	b2db      	uxtb	r3, r3
 8007776:	f003 0301 	and.w	r3, r3, #1
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <USER_SPI_write+0x32>
 800777e:	2303      	movs	r3, #3
 8007780:	e05a      	b.n	8007838 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007782:	4b2f      	ldr	r3, [pc, #188]	@ (8007840 <USER_SPI_write+0xf0>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b2db      	uxtb	r3, r3
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USER_SPI_write+0x44>
 8007790:	2302      	movs	r3, #2
 8007792:	e051      	b.n	8007838 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007794:	4b2b      	ldr	r3, [pc, #172]	@ (8007844 <USER_SPI_write+0xf4>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f003 0308 	and.w	r3, r3, #8
 800779c:	2b00      	cmp	r3, #0
 800779e:	d102      	bne.n	80077a6 <USER_SPI_write+0x56>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	025b      	lsls	r3, r3, #9
 80077a4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d110      	bne.n	80077ce <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80077ac:	6879      	ldr	r1, [r7, #4]
 80077ae:	2018      	movs	r0, #24
 80077b0:	f7ff fdf6 	bl	80073a0 <send_cmd>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d136      	bne.n	8007828 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80077ba:	21fe      	movs	r1, #254	@ 0xfe
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f7ff fdbd 	bl	800733c <xmit_datablock>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d02f      	beq.n	8007828 <USER_SPI_write+0xd8>
			count = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e02c      	b.n	8007828 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80077ce:	4b1d      	ldr	r3, [pc, #116]	@ (8007844 <USER_SPI_write+0xf4>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0306 	and.w	r3, r3, #6
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <USER_SPI_write+0x92>
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	2097      	movs	r0, #151	@ 0x97
 80077de:	f7ff fddf 	bl	80073a0 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	2019      	movs	r0, #25
 80077e6:	f7ff fddb 	bl	80073a0 <send_cmd>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d11b      	bne.n	8007828 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80077f0:	21fc      	movs	r1, #252	@ 0xfc
 80077f2:	68b8      	ldr	r0, [r7, #8]
 80077f4:	f7ff fda2 	bl	800733c <xmit_datablock>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <USER_SPI_write+0xc4>
				buff += 512;
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007804:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	3b01      	subs	r3, #1
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ee      	bne.n	80077f0 <USER_SPI_write+0xa0>
 8007812:	e000      	b.n	8007816 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007814:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007816:	21fd      	movs	r1, #253	@ 0xfd
 8007818:	2000      	movs	r0, #0
 800781a:	f7ff fd8f 	bl	800733c <xmit_datablock>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <USER_SPI_write+0xd8>
 8007824:	2301      	movs	r3, #1
 8007826:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007828:	f7ff fd39 	bl	800729e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bf14      	ite	ne
 8007832:	2301      	movne	r3, #1
 8007834:	2300      	moveq	r3, #0
 8007836:	b2db      	uxtb	r3, r3
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}
 8007840:	2000002c 	.word	0x2000002c
 8007844:	2000cb35 	.word	0x2000cb35

08007848 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08c      	sub	sp, #48	@ 0x30
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	603a      	str	r2, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
 8007854:	460b      	mov	r3, r1
 8007856:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <USER_SPI_ioctl+0x1a>
 800785e:	2304      	movs	r3, #4
 8007860:	e15a      	b.n	8007b18 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007862:	4baf      	ldr	r3, [pc, #700]	@ (8007b20 <USER_SPI_ioctl+0x2d8>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <USER_SPI_ioctl+0x2c>
 8007870:	2303      	movs	r3, #3
 8007872:	e151      	b.n	8007b18 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800787a:	79bb      	ldrb	r3, [r7, #6]
 800787c:	2b04      	cmp	r3, #4
 800787e:	f200 8136 	bhi.w	8007aee <USER_SPI_ioctl+0x2a6>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <USER_SPI_ioctl+0x40>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	0800789d 	.word	0x0800789d
 800788c:	080078b1 	.word	0x080078b1
 8007890:	08007aef 	.word	0x08007aef
 8007894:	0800795d 	.word	0x0800795d
 8007898:	08007a53 	.word	0x08007a53
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800789c:	f7ff fd0c 	bl	80072b8 <spiselect>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 8127 	beq.w	8007af6 <USER_SPI_ioctl+0x2ae>
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80078ae:	e122      	b.n	8007af6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80078b0:	2100      	movs	r1, #0
 80078b2:	2009      	movs	r0, #9
 80078b4:	f7ff fd74 	bl	80073a0 <send_cmd>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f040 811d 	bne.w	8007afa <USER_SPI_ioctl+0x2b2>
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	2110      	movs	r1, #16
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff fd0f 	bl	80072ea <rcvr_datablock>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f000 8113 	beq.w	8007afa <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80078d4:	7b3b      	ldrb	r3, [r7, #12]
 80078d6:	099b      	lsrs	r3, r3, #6
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d111      	bne.n	8007902 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80078de:	7d7b      	ldrb	r3, [r7, #21]
 80078e0:	461a      	mov	r2, r3
 80078e2:	7d3b      	ldrb	r3, [r7, #20]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	4413      	add	r3, r2
 80078e8:	461a      	mov	r2, r3
 80078ea:	7cfb      	ldrb	r3, [r7, #19]
 80078ec:	041b      	lsls	r3, r3, #16
 80078ee:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 80078f2:	4413      	add	r3, r2
 80078f4:	3301      	adds	r3, #1
 80078f6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	029a      	lsls	r2, r3, #10
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	e028      	b.n	8007954 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007902:	7c7b      	ldrb	r3, [r7, #17]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	b2da      	uxtb	r2, r3
 800790a:	7dbb      	ldrb	r3, [r7, #22]
 800790c:	09db      	lsrs	r3, r3, #7
 800790e:	b2db      	uxtb	r3, r3
 8007910:	4413      	add	r3, r2
 8007912:	b2da      	uxtb	r2, r3
 8007914:	7d7b      	ldrb	r3, [r7, #21]
 8007916:	005b      	lsls	r3, r3, #1
 8007918:	b2db      	uxtb	r3, r3
 800791a:	f003 0306 	and.w	r3, r3, #6
 800791e:	b2db      	uxtb	r3, r3
 8007920:	4413      	add	r3, r2
 8007922:	b2db      	uxtb	r3, r3
 8007924:	3302      	adds	r3, #2
 8007926:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800792a:	7d3b      	ldrb	r3, [r7, #20]
 800792c:	099b      	lsrs	r3, r3, #6
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	7cfb      	ldrb	r3, [r7, #19]
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	441a      	add	r2, r3
 8007938:	7cbb      	ldrb	r3, [r7, #18]
 800793a:	029b      	lsls	r3, r3, #10
 800793c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007940:	4413      	add	r3, r2
 8007942:	3301      	adds	r3, #1
 8007944:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007946:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800794a:	3b09      	subs	r3, #9
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	409a      	lsls	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800795a:	e0ce      	b.n	8007afa <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800795c:	4b71      	ldr	r3, [pc, #452]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 0304 	and.w	r3, r3, #4
 8007964:	2b00      	cmp	r3, #0
 8007966:	d031      	beq.n	80079cc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007968:	2100      	movs	r1, #0
 800796a:	208d      	movs	r0, #141	@ 0x8d
 800796c:	f7ff fd18 	bl	80073a0 <send_cmd>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 80c3 	bne.w	8007afe <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007978:	20ff      	movs	r0, #255	@ 0xff
 800797a:	f7ff fc27 	bl	80071cc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800797e:	f107 030c 	add.w	r3, r7, #12
 8007982:	2110      	movs	r1, #16
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fcb0 	bl	80072ea <rcvr_datablock>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80b6 	beq.w	8007afe <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007992:	2330      	movs	r3, #48	@ 0x30
 8007994:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007998:	e007      	b.n	80079aa <USER_SPI_ioctl+0x162>
 800799a:	20ff      	movs	r0, #255	@ 0xff
 800799c:	f7ff fc16 	bl	80071cc <xchg_spi>
 80079a0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079a4:	3b01      	subs	r3, #1
 80079a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80079aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f3      	bne.n	800799a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	091b      	lsrs	r3, r3, #4
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	461a      	mov	r2, r3
 80079ba:	2310      	movs	r3, #16
 80079bc:	fa03 f202 	lsl.w	r2, r3, r2
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80079ca:	e098      	b.n	8007afe <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80079cc:	2100      	movs	r1, #0
 80079ce:	2009      	movs	r0, #9
 80079d0:	f7ff fce6 	bl	80073a0 <send_cmd>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f040 8091 	bne.w	8007afe <USER_SPI_ioctl+0x2b6>
 80079dc:	f107 030c 	add.w	r3, r7, #12
 80079e0:	2110      	movs	r1, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fc81 	bl	80072ea <rcvr_datablock>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	f000 8087 	beq.w	8007afe <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80079f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d012      	beq.n	8007a22 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80079fc:	7dbb      	ldrb	r3, [r7, #22]
 80079fe:	005b      	lsls	r3, r3, #1
 8007a00:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007a04:	7dfa      	ldrb	r2, [r7, #23]
 8007a06:	09d2      	lsrs	r2, r2, #7
 8007a08:	b2d2      	uxtb	r2, r2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	7e7b      	ldrb	r3, [r7, #25]
 8007a10:	099b      	lsrs	r3, r3, #6
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	e013      	b.n	8007a4a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007a22:	7dbb      	ldrb	r3, [r7, #22]
 8007a24:	109b      	asrs	r3, r3, #2
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f003 031f 	and.w	r3, r3, #31
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	7dfa      	ldrb	r2, [r7, #23]
 8007a30:	00d2      	lsls	r2, r2, #3
 8007a32:	f002 0218 	and.w	r2, r2, #24
 8007a36:	7df9      	ldrb	r1, [r7, #23]
 8007a38:	0949      	lsrs	r1, r1, #5
 8007a3a:	b2c9      	uxtb	r1, r1
 8007a3c:	440a      	add	r2, r1
 8007a3e:	3201      	adds	r2, #1
 8007a40:	fb02 f303 	mul.w	r3, r2, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007a50:	e055      	b.n	8007afe <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007a52:	4b34      	ldr	r3, [pc, #208]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	f003 0306 	and.w	r3, r3, #6
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d051      	beq.n	8007b02 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007a5e:	f107 020c 	add.w	r2, r7, #12
 8007a62:	79fb      	ldrb	r3, [r7, #7]
 8007a64:	210b      	movs	r1, #11
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff feee 	bl	8007848 <USER_SPI_ioctl>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d149      	bne.n	8007b06 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007a72:	7b3b      	ldrb	r3, [r7, #12]
 8007a74:	099b      	lsrs	r3, r3, #6
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USER_SPI_ioctl+0x23e>
 8007a7c:	7dbb      	ldrb	r3, [r7, #22]
 8007a7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d041      	beq.n	8007b0a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a90:	6a3b      	ldr	r3, [r7, #32]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007a96:	4b23      	ldr	r3, [pc, #140]	@ (8007b24 <USER_SPI_ioctl+0x2dc>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	f003 0308 	and.w	r3, r3, #8
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d105      	bne.n	8007aae <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	025b      	lsls	r3, r3, #9
 8007aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aaa:	025b      	lsls	r3, r3, #9
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007aae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ab0:	2020      	movs	r0, #32
 8007ab2:	f7ff fc75 	bl	80073a0 <send_cmd>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d128      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007abe:	2021      	movs	r0, #33	@ 0x21
 8007ac0:	f7ff fc6e 	bl	80073a0 <send_cmd>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d121      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007aca:	2100      	movs	r1, #0
 8007acc:	2026      	movs	r0, #38	@ 0x26
 8007ace:	f7ff fc67 	bl	80073a0 <send_cmd>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d11a      	bne.n	8007b0e <USER_SPI_ioctl+0x2c6>
 8007ad8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007adc:	f7ff fbbc 	bl	8007258 <wait_ready>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d013      	beq.n	8007b0e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007aec:	e00f      	b.n	8007b0e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007aee:	2304      	movs	r3, #4
 8007af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007af4:	e00c      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007af6:	bf00      	nop
 8007af8:	e00a      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007afa:	bf00      	nop
 8007afc:	e008      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007afe:	bf00      	nop
 8007b00:	e006      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007b02:	bf00      	nop
 8007b04:	e004      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007b06:	bf00      	nop
 8007b08:	e002      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007b0a:	bf00      	nop
 8007b0c:	e000      	b.n	8007b10 <USER_SPI_ioctl+0x2c8>
		break;
 8007b0e:	bf00      	nop
	}

	despiselect();
 8007b10:	f7ff fbc5 	bl	800729e <despiselect>

	return res;
 8007b14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3730      	adds	r7, #48	@ 0x30
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	2000002c 	.word	0x2000002c
 8007b24:	2000cb35 	.word	0x2000cb35

08007b28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	4a08      	ldr	r2, [pc, #32]	@ (8007b58 <disk_status+0x30>)
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	79fa      	ldrb	r2, [r7, #7]
 8007b40:	4905      	ldr	r1, [pc, #20]	@ (8007b58 <disk_status+0x30>)
 8007b42:	440a      	add	r2, r1
 8007b44:	7a12      	ldrb	r2, [r2, #8]
 8007b46:	4610      	mov	r0, r2
 8007b48:	4798      	blx	r3
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2000cb68 	.word	0x2000cb68

08007b5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	4603      	mov	r3, r0
 8007b64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8007ba8 <disk_initialize+0x4c>)
 8007b6e:	5cd3      	ldrb	r3, [r2, r3]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d114      	bne.n	8007b9e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba8 <disk_initialize+0x4c>)
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	4413      	add	r3, r2
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	79fa      	ldrb	r2, [r7, #7]
 8007b82:	4909      	ldr	r1, [pc, #36]	@ (8007ba8 <disk_initialize+0x4c>)
 8007b84:	440a      	add	r2, r1
 8007b86:	7a12      	ldrb	r2, [r2, #8]
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	4a03      	ldr	r2, [pc, #12]	@ (8007ba8 <disk_initialize+0x4c>)
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	2000cb68 	.word	0x2000cb68

08007bac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007bac:	b590      	push	{r4, r7, lr}
 8007bae:	b087      	sub	sp, #28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8007be8 <disk_read+0x3c>)
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	689c      	ldr	r4, [r3, #8]
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	4a07      	ldr	r2, [pc, #28]	@ (8007be8 <disk_read+0x3c>)
 8007bcc:	4413      	add	r3, r2
 8007bce:	7a18      	ldrb	r0, [r3, #8]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	47a0      	blx	r4
 8007bd8:	4603      	mov	r3, r0
 8007bda:	75fb      	strb	r3, [r7, #23]
  return res;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd90      	pop	{r4, r7, pc}
 8007be6:	bf00      	nop
 8007be8:	2000cb68 	.word	0x2000cb68

08007bec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
 8007bf6:	603b      	str	r3, [r7, #0]
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007c28 <disk_write+0x3c>)
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68dc      	ldr	r4, [r3, #12]
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	4a07      	ldr	r2, [pc, #28]	@ (8007c28 <disk_write+0x3c>)
 8007c0c:	4413      	add	r3, r2
 8007c0e:	7a18      	ldrb	r0, [r3, #8]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	47a0      	blx	r4
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd90      	pop	{r4, r7, pc}
 8007c26:	bf00      	nop
 8007c28:	2000cb68 	.word	0x2000cb68

08007c2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	4603      	mov	r3, r0
 8007c34:	603a      	str	r2, [r7, #0]
 8007c36:	71fb      	strb	r3, [r7, #7]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	4a09      	ldr	r2, [pc, #36]	@ (8007c64 <disk_ioctl+0x38>)
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	79fa      	ldrb	r2, [r7, #7]
 8007c4a:	4906      	ldr	r1, [pc, #24]	@ (8007c64 <disk_ioctl+0x38>)
 8007c4c:	440a      	add	r2, r1
 8007c4e:	7a10      	ldrb	r0, [r2, #8]
 8007c50:	79b9      	ldrb	r1, [r7, #6]
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4798      	blx	r3
 8007c56:	4603      	mov	r3, r0
 8007c58:	73fb      	strb	r3, [r7, #15]
  return res;
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	2000cb68 	.word	0x2000cb68

08007c68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3301      	adds	r3, #1
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007c78:	89fb      	ldrh	r3, [r7, #14]
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	b21a      	sxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	b21b      	sxth	r3, r3
 8007c84:	4313      	orrs	r3, r2
 8007c86:	b21b      	sxth	r3, r3
 8007c88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007c8a:	89fb      	ldrh	r3, [r7, #14]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	3202      	adds	r2, #2
 8007cb0:	7812      	ldrb	r2, [r2, #0]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	3201      	adds	r2, #1
 8007cbe:	7812      	ldrb	r2, [r2, #0]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7812      	ldrb	r2, [r2, #0]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
	return rv;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b083      	sub	sp, #12
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	1c5a      	adds	r2, r3, #1
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	887a      	ldrh	r2, [r7, #2]
 8007cf2:	b2d2      	uxtb	r2, r2
 8007cf4:	701a      	strb	r2, [r3, #0]
 8007cf6:	887b      	ldrh	r3, [r7, #2]
 8007cf8:	0a1b      	lsrs	r3, r3, #8
 8007cfa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	1c5a      	adds	r2, r3, #1
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	887a      	ldrh	r2, [r7, #2]
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	701a      	strb	r2, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	1c5a      	adds	r2, r3, #1
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	b2d2      	uxtb	r2, r2
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	0a1b      	lsrs	r3, r3, #8
 8007d2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	1c5a      	adds	r2, r3, #1
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	0a1b      	lsrs	r3, r3, #8
 8007d40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	607a      	str	r2, [r7, #4]
 8007d48:	683a      	ldr	r2, [r7, #0]
 8007d4a:	b2d2      	uxtb	r2, r2
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	0a1b      	lsrs	r3, r3, #8
 8007d52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	701a      	strb	r2, [r3, #0]
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00d      	beq.n	8007da2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	1c53      	adds	r3, r2, #1
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	1c59      	adds	r1, r3, #1
 8007d90:	6179      	str	r1, [r7, #20]
 8007d92:	7812      	ldrb	r2, [r2, #0]
 8007d94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	607b      	str	r3, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f1      	bne.n	8007d86 <mem_cpy+0x1a>
	}
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007dae:	b480      	push	{r7}
 8007db0:	b087      	sub	sp, #28
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	617a      	str	r2, [r7, #20]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	b2d2      	uxtb	r2, r2
 8007dc8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1f3      	bne.n	8007dbe <mem_set+0x10>
}
 8007dd6:	bf00      	nop
 8007dd8:	bf00      	nop
 8007dda:	371c      	adds	r7, #28
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007de4:	b480      	push	{r7}
 8007de6:	b089      	sub	sp, #36	@ 0x24
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	60b9      	str	r1, [r7, #8]
 8007dee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	61fb      	str	r3, [r7, #28]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	61fa      	str	r2, [r7, #28]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	1c5a      	adds	r2, r3, #1
 8007e0a:	61ba      	str	r2, [r7, #24]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	1acb      	subs	r3, r1, r3
 8007e10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	607b      	str	r3, [r7, #4]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d002      	beq.n	8007e24 <mem_cmp+0x40>
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d0eb      	beq.n	8007dfc <mem_cmp+0x18>

	return r;
 8007e24:	697b      	ldr	r3, [r7, #20]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3724      	adds	r7, #36	@ 0x24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr

08007e32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007e3c:	e002      	b.n	8007e44 <chk_chr+0x12>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3301      	adds	r3, #1
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <chk_chr+0x26>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	461a      	mov	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d1f2      	bne.n	8007e3e <chk_chr+0xc>
	return *str;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007e72:	2300      	movs	r3, #0
 8007e74:	60bb      	str	r3, [r7, #8]
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	e029      	b.n	8007ed0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007e7c:	4a27      	ldr	r2, [pc, #156]	@ (8007f1c <chk_lock+0xb4>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	4413      	add	r3, r2
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01d      	beq.n	8007ec6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007e8a:	4a24      	ldr	r2, [pc, #144]	@ (8007f1c <chk_lock+0xb4>)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	011b      	lsls	r3, r3, #4
 8007e90:	4413      	add	r3, r2
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d116      	bne.n	8007eca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8007f1c <chk_lock+0xb4>)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d10c      	bne.n	8007eca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007eb0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f1c <chk_lock+0xb4>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	011b      	lsls	r3, r3, #4
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3308      	adds	r3, #8
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d102      	bne.n	8007eca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007ec4:	e007      	b.n	8007ed6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d9d2      	bls.n	8007e7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b02      	cmp	r3, #2
 8007eda:	d109      	bne.n	8007ef0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <chk_lock+0x80>
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d101      	bne.n	8007eec <chk_lock+0x84>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	e010      	b.n	8007f0e <chk_lock+0xa6>
 8007eec:	2312      	movs	r3, #18
 8007eee:	e00e      	b.n	8007f0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d108      	bne.n	8007f08 <chk_lock+0xa0>
 8007ef6:	4a09      	ldr	r2, [pc, #36]	@ (8007f1c <chk_lock+0xb4>)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	4413      	add	r3, r2
 8007efe:	330c      	adds	r3, #12
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f06:	d101      	bne.n	8007f0c <chk_lock+0xa4>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	e000      	b.n	8007f0e <chk_lock+0xa6>
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	2000cb48 	.word	0x2000cb48

08007f20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007f26:	2300      	movs	r3, #0
 8007f28:	607b      	str	r3, [r7, #4]
 8007f2a:	e002      	b.n	8007f32 <enq_lock+0x12>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	607b      	str	r3, [r7, #4]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d806      	bhi.n	8007f46 <enq_lock+0x26>
 8007f38:	4a09      	ldr	r2, [pc, #36]	@ (8007f60 <enq_lock+0x40>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	011b      	lsls	r3, r3, #4
 8007f3e:	4413      	add	r3, r2
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1f2      	bne.n	8007f2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	bf14      	ite	ne
 8007f4c:	2301      	movne	r3, #1
 8007f4e:	2300      	moveq	r3, #0
 8007f50:	b2db      	uxtb	r3, r3
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	2000cb48 	.word	0x2000cb48

08007f64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007f6e:	2300      	movs	r3, #0
 8007f70:	60fb      	str	r3, [r7, #12]
 8007f72:	e01f      	b.n	8007fb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007f74:	4a41      	ldr	r2, [pc, #260]	@ (800807c <inc_lock+0x118>)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	4413      	add	r3, r2
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d113      	bne.n	8007fae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007f86:	4a3d      	ldr	r2, [pc, #244]	@ (800807c <inc_lock+0x118>)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d109      	bne.n	8007fae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007f9a:	4a38      	ldr	r2, [pc, #224]	@ (800807c <inc_lock+0x118>)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	011b      	lsls	r3, r3, #4
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d006      	beq.n	8007fbc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d9dc      	bls.n	8007f74 <inc_lock+0x10>
 8007fba:	e000      	b.n	8007fbe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007fbc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d132      	bne.n	800802a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	e002      	b.n	8007fd0 <inc_lock+0x6c>
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d806      	bhi.n	8007fe4 <inc_lock+0x80>
 8007fd6:	4a29      	ldr	r2, [pc, #164]	@ (800807c <inc_lock+0x118>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4413      	add	r3, r2
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f2      	bne.n	8007fca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d101      	bne.n	8007fee <inc_lock+0x8a>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e040      	b.n	8008070 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	4922      	ldr	r1, [pc, #136]	@ (800807c <inc_lock+0x118>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	440b      	add	r3, r1
 8007ffa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	491e      	ldr	r1, [pc, #120]	@ (800807c <inc_lock+0x118>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	440b      	add	r3, r1
 8008008:	3304      	adds	r3, #4
 800800a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	695a      	ldr	r2, [r3, #20]
 8008010:	491a      	ldr	r1, [pc, #104]	@ (800807c <inc_lock+0x118>)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	440b      	add	r3, r1
 8008018:	3308      	adds	r3, #8
 800801a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800801c:	4a17      	ldr	r2, [pc, #92]	@ (800807c <inc_lock+0x118>)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	4413      	add	r3, r2
 8008024:	330c      	adds	r3, #12
 8008026:	2200      	movs	r2, #0
 8008028:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d009      	beq.n	8008044 <inc_lock+0xe0>
 8008030:	4a12      	ldr	r2, [pc, #72]	@ (800807c <inc_lock+0x118>)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	011b      	lsls	r3, r3, #4
 8008036:	4413      	add	r3, r2
 8008038:	330c      	adds	r3, #12
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <inc_lock+0xe0>
 8008040:	2300      	movs	r3, #0
 8008042:	e015      	b.n	8008070 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d108      	bne.n	800805c <inc_lock+0xf8>
 800804a:	4a0c      	ldr	r2, [pc, #48]	@ (800807c <inc_lock+0x118>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	011b      	lsls	r3, r3, #4
 8008050:	4413      	add	r3, r2
 8008052:	330c      	adds	r3, #12
 8008054:	881b      	ldrh	r3, [r3, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	b29a      	uxth	r2, r3
 800805a:	e001      	b.n	8008060 <inc_lock+0xfc>
 800805c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008060:	4906      	ldr	r1, [pc, #24]	@ (800807c <inc_lock+0x118>)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	011b      	lsls	r3, r3, #4
 8008066:	440b      	add	r3, r1
 8008068:	330c      	adds	r3, #12
 800806a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	2000cb48 	.word	0x2000cb48

08008080 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3b01      	subs	r3, #1
 800808c:	607b      	str	r3, [r7, #4]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b01      	cmp	r3, #1
 8008092:	d825      	bhi.n	80080e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008094:	4a17      	ldr	r2, [pc, #92]	@ (80080f4 <dec_lock+0x74>)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	4413      	add	r3, r2
 800809c:	330c      	adds	r3, #12
 800809e:	881b      	ldrh	r3, [r3, #0]
 80080a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80080a2:	89fb      	ldrh	r3, [r7, #14]
 80080a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080a8:	d101      	bne.n	80080ae <dec_lock+0x2e>
 80080aa:	2300      	movs	r3, #0
 80080ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80080ae:	89fb      	ldrh	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d002      	beq.n	80080ba <dec_lock+0x3a>
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80080ba:	4a0e      	ldr	r2, [pc, #56]	@ (80080f4 <dec_lock+0x74>)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	011b      	lsls	r3, r3, #4
 80080c0:	4413      	add	r3, r2
 80080c2:	330c      	adds	r3, #12
 80080c4:	89fa      	ldrh	r2, [r7, #14]
 80080c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80080c8:	89fb      	ldrh	r3, [r7, #14]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d105      	bne.n	80080da <dec_lock+0x5a>
 80080ce:	4a09      	ldr	r2, [pc, #36]	@ (80080f4 <dec_lock+0x74>)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	4413      	add	r3, r2
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	737b      	strb	r3, [r7, #13]
 80080de:	e001      	b.n	80080e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80080e0:	2302      	movs	r3, #2
 80080e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80080e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	2000cb48 	.word	0x2000cb48

080080f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	e010      	b.n	8008128 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008106:	4a0d      	ldr	r2, [pc, #52]	@ (800813c <clear_lock+0x44>)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	4413      	add	r3, r2
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	429a      	cmp	r2, r3
 8008114:	d105      	bne.n	8008122 <clear_lock+0x2a>
 8008116:	4a09      	ldr	r2, [pc, #36]	@ (800813c <clear_lock+0x44>)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	011b      	lsls	r3, r3, #4
 800811c:	4413      	add	r3, r2
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d9eb      	bls.n	8008106 <clear_lock+0xe>
	}
}
 800812e:	bf00      	nop
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	2000cb48 	.word	0x2000cb48

08008140 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008148:	2300      	movs	r3, #0
 800814a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	78db      	ldrb	r3, [r3, #3]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d034      	beq.n	80081be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008158:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	7858      	ldrb	r0, [r3, #1]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008164:	2301      	movs	r3, #1
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	f7ff fd40 	bl	8007bec <disk_write>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
 8008176:	e022      	b.n	80081be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	1ad2      	subs	r2, r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	429a      	cmp	r2, r3
 800818c:	d217      	bcs.n	80081be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	789b      	ldrb	r3, [r3, #2]
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e010      	b.n	80081b8 <sync_window+0x78>
					wsect += fs->fsize;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4413      	add	r3, r2
 800819e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	7858      	ldrb	r0, [r3, #1]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081aa:	2301      	movs	r3, #1
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	f7ff fd1d 	bl	8007bec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d8eb      	bhi.n	8008196 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d01b      	beq.n	8008218 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ffad 	bl	8008140 <sync_window>
 80081e6:	4603      	mov	r3, r0
 80081e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80081ea:	7bfb      	ldrb	r3, [r7, #15]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d113      	bne.n	8008218 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7858      	ldrb	r0, [r3, #1]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80081fa:	2301      	movs	r3, #1
 80081fc:	683a      	ldr	r2, [r7, #0]
 80081fe:	f7ff fcd5 	bl	8007bac <disk_read>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d004      	beq.n	8008212 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008208:	f04f 33ff 	mov.w	r3, #4294967295
 800820c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800820e:	2301      	movs	r3, #1
 8008210:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008218:	7bfb      	ldrb	r3, [r7, #15]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ff87 	bl	8008140 <sync_window>
 8008232:	4603      	mov	r3, r0
 8008234:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d158      	bne.n	80082ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d148      	bne.n	80082d6 <sync_fs+0xb2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	791b      	ldrb	r3, [r3, #4]
 8008248:	2b01      	cmp	r3, #1
 800824a:	d144      	bne.n	80082d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3330      	adds	r3, #48	@ 0x30
 8008250:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008254:	2100      	movs	r1, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f7ff fda9 	bl	8007dae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	3330      	adds	r3, #48	@ 0x30
 8008260:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008264:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008268:	4618      	mov	r0, r3
 800826a:	f7ff fd38 	bl	8007cde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	3330      	adds	r3, #48	@ 0x30
 8008272:	4921      	ldr	r1, [pc, #132]	@ (80082f8 <sync_fs+0xd4>)
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fd4d 	bl	8007d14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3330      	adds	r3, #48	@ 0x30
 800827e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008282:	491e      	ldr	r1, [pc, #120]	@ (80082fc <sync_fs+0xd8>)
 8008284:	4618      	mov	r0, r3
 8008286:	f7ff fd45 	bl	8007d14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	3330      	adds	r3, #48	@ 0x30
 800828e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7ff fd3b 	bl	8007d14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	3330      	adds	r3, #48	@ 0x30
 80082a2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7ff fd31 	bl	8007d14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	69db      	ldr	r3, [r3, #28]
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7858      	ldrb	r0, [r3, #1]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ca:	2301      	movs	r3, #1
 80082cc:	f7ff fc8e 	bl	8007bec <disk_write>
			fs->fsi_flag = 0;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	785b      	ldrb	r3, [r3, #1]
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fca4 	bl	8007c2c <disk_ioctl>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <sync_fs+0xca>
 80082ea:	2301      	movs	r3, #1
 80082ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	41615252 	.word	0x41615252
 80082fc:	61417272 	.word	0x61417272

08008300 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	3b02      	subs	r3, #2
 800830e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	3b02      	subs	r3, #2
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	429a      	cmp	r2, r3
 800831a:	d301      	bcc.n	8008320 <clust2sect+0x20>
 800831c:	2300      	movs	r3, #0
 800831e:	e008      	b.n	8008332 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	895b      	ldrh	r3, [r3, #10]
 8008324:	461a      	mov	r2, r3
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	fb03 f202 	mul.w	r2, r3, r2
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008330:	4413      	add	r3, r2
}
 8008332:	4618      	mov	r0, r3
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b086      	sub	sp, #24
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d904      	bls.n	800835e <get_fat+0x20>
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	429a      	cmp	r2, r3
 800835c:	d302      	bcc.n	8008364 <get_fat+0x26>
		val = 1;	/* Internal error */
 800835e:	2301      	movs	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
 8008362:	e08e      	b.n	8008482 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008364:	f04f 33ff 	mov.w	r3, #4294967295
 8008368:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d061      	beq.n	8008436 <get_fat+0xf8>
 8008372:	2b03      	cmp	r3, #3
 8008374:	dc7b      	bgt.n	800846e <get_fat+0x130>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d002      	beq.n	8008380 <get_fat+0x42>
 800837a:	2b02      	cmp	r3, #2
 800837c:	d041      	beq.n	8008402 <get_fat+0xc4>
 800837e:	e076      	b.n	800846e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	60fb      	str	r3, [r7, #12]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	085b      	lsrs	r3, r3, #1
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4413      	add	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	0a5b      	lsrs	r3, r3, #9
 8008396:	4413      	add	r3, r2
 8008398:	4619      	mov	r1, r3
 800839a:	6938      	ldr	r0, [r7, #16]
 800839c:	f7ff ff14 	bl	80081c8 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d166      	bne.n	8008474 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	60fa      	str	r2, [r7, #12]
 80083ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4413      	add	r3, r2
 80083b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	0a5b      	lsrs	r3, r3, #9
 80083c2:	4413      	add	r3, r2
 80083c4:	4619      	mov	r1, r3
 80083c6:	6938      	ldr	r0, [r7, #16]
 80083c8:	f7ff fefe 	bl	80081c8 <move_window>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d152      	bne.n	8008478 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4413      	add	r3, r2
 80083dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80083e0:	021b      	lsls	r3, r3, #8
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <get_fat+0xba>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	e002      	b.n	80083fe <get_fat+0xc0>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083fe:	617b      	str	r3, [r7, #20]
			break;
 8008400:	e03f      	b.n	8008482 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	6a1a      	ldr	r2, [r3, #32]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	0a1b      	lsrs	r3, r3, #8
 800840a:	4413      	add	r3, r2
 800840c:	4619      	mov	r1, r3
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f7ff feda 	bl	80081c8 <move_window>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d130      	bne.n	800847c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8008428:	4413      	add	r3, r2
 800842a:	4618      	mov	r0, r3
 800842c:	f7ff fc1c 	bl	8007c68 <ld_word>
 8008430:	4603      	mov	r3, r0
 8008432:	617b      	str	r3, [r7, #20]
			break;
 8008434:	e025      	b.n	8008482 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6a1a      	ldr	r2, [r3, #32]
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	09db      	lsrs	r3, r3, #7
 800843e:	4413      	add	r3, r2
 8008440:	4619      	mov	r1, r3
 8008442:	6938      	ldr	r0, [r7, #16]
 8008444:	f7ff fec0 	bl	80081c8 <move_window>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d118      	bne.n	8008480 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800845c:	4413      	add	r3, r2
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fc1a 	bl	8007c98 <ld_dword>
 8008464:	4603      	mov	r3, r0
 8008466:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800846a:	617b      	str	r3, [r7, #20]
			break;
 800846c:	e009      	b.n	8008482 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800846e:	2301      	movs	r3, #1
 8008470:	617b      	str	r3, [r7, #20]
 8008472:	e006      	b.n	8008482 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008474:	bf00      	nop
 8008476:	e004      	b.n	8008482 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008478:	bf00      	nop
 800847a:	e002      	b.n	8008482 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800847c:	bf00      	nop
 800847e:	e000      	b.n	8008482 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008480:	bf00      	nop
		}
	}

	return val;
 8008482:	697b      	ldr	r3, [r7, #20]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3718      	adds	r7, #24
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800848c:	b590      	push	{r4, r7, lr}
 800848e:	b089      	sub	sp, #36	@ 0x24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008498:	2302      	movs	r3, #2
 800849a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b01      	cmp	r3, #1
 80084a0:	f240 80d9 	bls.w	8008656 <put_fat+0x1ca>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	695b      	ldr	r3, [r3, #20]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	f080 80d3 	bcs.w	8008656 <put_fat+0x1ca>
		switch (fs->fs_type) {
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	2b03      	cmp	r3, #3
 80084b6:	f000 8096 	beq.w	80085e6 <put_fat+0x15a>
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	f300 80cb 	bgt.w	8008656 <put_fat+0x1ca>
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d002      	beq.n	80084ca <put_fat+0x3e>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d06e      	beq.n	80085a6 <put_fat+0x11a>
 80084c8:	e0c5      	b.n	8008656 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	085b      	lsrs	r3, r3, #1
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	4413      	add	r3, r2
 80084d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1a      	ldr	r2, [r3, #32]
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	0a5b      	lsrs	r3, r3, #9
 80084e0:	4413      	add	r3, r2
 80084e2:	4619      	mov	r1, r3
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7ff fe6f 	bl	80081c8 <move_window>
 80084ea:	4603      	mov	r3, r0
 80084ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80084ee:	7ffb      	ldrb	r3, [r7, #31]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 80a9 	bne.w	8008648 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	1c59      	adds	r1, r3, #1
 8008500:	61b9      	str	r1, [r7, #24]
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	4413      	add	r3, r2
 8008508:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00d      	beq.n	8008530 <put_fat+0xa4>
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	b25b      	sxtb	r3, r3
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	b25a      	sxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	b25b      	sxtb	r3, r3
 8008528:	4313      	orrs	r3, r2
 800852a:	b25b      	sxtb	r3, r3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	e001      	b.n	8008534 <put_fat+0xa8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	697a      	ldr	r2, [r7, #20]
 8008536:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1a      	ldr	r2, [r3, #32]
 8008542:	69bb      	ldr	r3, [r7, #24]
 8008544:	0a5b      	lsrs	r3, r3, #9
 8008546:	4413      	add	r3, r2
 8008548:	4619      	mov	r1, r3
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f7ff fe3c 	bl	80081c8 <move_window>
 8008550:	4603      	mov	r3, r0
 8008552:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008554:	7ffb      	ldrb	r3, [r7, #31]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d178      	bne.n	800864c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	4413      	add	r3, r2
 8008568:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <put_fat+0xf0>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	091b      	lsrs	r3, r3, #4
 8008578:	b2db      	uxtb	r3, r3
 800857a:	e00e      	b.n	800859a <put_fat+0x10e>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	b25b      	sxtb	r3, r3
 8008582:	f023 030f 	bic.w	r3, r3, #15
 8008586:	b25a      	sxtb	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	b25b      	sxtb	r3, r3
 800858e:	f003 030f 	and.w	r3, r3, #15
 8008592:	b25b      	sxtb	r3, r3
 8008594:	4313      	orrs	r3, r2
 8008596:	b25b      	sxtb	r3, r3
 8008598:	b2db      	uxtb	r3, r3
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	70da      	strb	r2, [r3, #3]
			break;
 80085a4:	e057      	b.n	8008656 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	4413      	add	r3, r2
 80085b0:	4619      	mov	r1, r3
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7ff fe08 	bl	80081c8 <move_window>
 80085b8:	4603      	mov	r3, r0
 80085ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085bc:	7ffb      	ldrb	r3, [r7, #31]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d146      	bne.n	8008650 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80085d0:	4413      	add	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	b292      	uxth	r2, r2
 80085d6:	4611      	mov	r1, r2
 80085d8:	4618      	mov	r0, r3
 80085da:	f7ff fb80 	bl	8007cde <st_word>
			fs->wflag = 1;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2201      	movs	r2, #1
 80085e2:	70da      	strb	r2, [r3, #3]
			break;
 80085e4:	e037      	b.n	8008656 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1a      	ldr	r2, [r3, #32]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	09db      	lsrs	r3, r3, #7
 80085ee:	4413      	add	r3, r2
 80085f0:	4619      	mov	r1, r3
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f7ff fde8 	bl	80081c8 <move_window>
 80085f8:	4603      	mov	r3, r0
 80085fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80085fc:	7ffb      	ldrb	r3, [r7, #31]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d128      	bne.n	8008654 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008616:	4413      	add	r3, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff fb3d 	bl	8007c98 <ld_dword>
 800861e:	4603      	mov	r3, r0
 8008620:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8008624:	4323      	orrs	r3, r4
 8008626:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8008636:	4413      	add	r3, r2
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	4618      	mov	r0, r3
 800863c:	f7ff fb6a 	bl	8007d14 <st_dword>
			fs->wflag = 1;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2201      	movs	r2, #1
 8008644:	70da      	strb	r2, [r3, #3]
			break;
 8008646:	e006      	b.n	8008656 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008648:	bf00      	nop
 800864a:	e004      	b.n	8008656 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800864c:	bf00      	nop
 800864e:	e002      	b.n	8008656 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008650:	bf00      	nop
 8008652:	e000      	b.n	8008656 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8008654:	bf00      	nop
		}
	}
	return res;
 8008656:	7ffb      	ldrb	r3, [r7, #31]
}
 8008658:	4618      	mov	r0, r3
 800865a:	3724      	adds	r7, #36	@ 0x24
 800865c:	46bd      	mov	sp, r7
 800865e:	bd90      	pop	{r4, r7, pc}

08008660 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800866c:	2300      	movs	r3, #0
 800866e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d904      	bls.n	8008686 <remove_chain+0x26>
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	695b      	ldr	r3, [r3, #20]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	429a      	cmp	r2, r3
 8008684:	d301      	bcc.n	800868a <remove_chain+0x2a>
 8008686:	2302      	movs	r3, #2
 8008688:	e04b      	b.n	8008722 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00c      	beq.n	80086aa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008690:	f04f 32ff 	mov.w	r2, #4294967295
 8008694:	6879      	ldr	r1, [r7, #4]
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f7ff fef8 	bl	800848c <put_fat>
 800869c:	4603      	mov	r3, r0
 800869e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <remove_chain+0x4a>
 80086a6:	7ffb      	ldrb	r3, [r7, #31]
 80086a8:	e03b      	b.n	8008722 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80086aa:	68b9      	ldr	r1, [r7, #8]
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fe46 	bl	800833e <get_fat>
 80086b2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d031      	beq.n	800871e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d101      	bne.n	80086c4 <remove_chain+0x64>
 80086c0:	2302      	movs	r3, #2
 80086c2:	e02e      	b.n	8008722 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d101      	bne.n	80086d0 <remove_chain+0x70>
 80086cc:	2301      	movs	r3, #1
 80086ce:	e028      	b.n	8008722 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80086d0:	2200      	movs	r2, #0
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	69b8      	ldr	r0, [r7, #24]
 80086d6:	f7ff fed9 	bl	800848c <put_fat>
 80086da:	4603      	mov	r3, r0
 80086dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80086de:	7ffb      	ldrb	r3, [r7, #31]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <remove_chain+0x88>
 80086e4:	7ffb      	ldrb	r3, [r7, #31]
 80086e6:	e01c      	b.n	8008722 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	691a      	ldr	r2, [r3, #16]
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	3b02      	subs	r3, #2
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d20b      	bcs.n	800870e <remove_chain+0xae>
			fs->free_clst++;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	791b      	ldrb	r3, [r3, #4]
 8008704:	f043 0301 	orr.w	r3, r3, #1
 8008708:	b2da      	uxtb	r2, r3
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	429a      	cmp	r2, r3
 800871a:	d3c6      	bcc.n	80086aa <remove_chain+0x4a>
 800871c:	e000      	b.n	8008720 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800871e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3720      	adds	r7, #32
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b088      	sub	sp, #32
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10d      	bne.n	800875c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d004      	beq.n	8008756 <create_chain+0x2c>
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	429a      	cmp	r2, r3
 8008754:	d31b      	bcc.n	800878e <create_chain+0x64>
 8008756:	2301      	movs	r3, #1
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e018      	b.n	800878e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff fded 	bl	800833e <get_fat>
 8008764:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d801      	bhi.n	8008770 <create_chain+0x46>
 800876c:	2301      	movs	r3, #1
 800876e:	e070      	b.n	8008852 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008776:	d101      	bne.n	800877c <create_chain+0x52>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	e06a      	b.n	8008852 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	429a      	cmp	r2, r3
 8008784:	d201      	bcs.n	800878a <create_chain+0x60>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	e063      	b.n	8008852 <create_chain+0x128>
		scl = clst;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	3301      	adds	r3, #1
 8008796:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	69fa      	ldr	r2, [r7, #28]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d307      	bcc.n	80087b2 <create_chain+0x88>
				ncl = 2;
 80087a2:	2302      	movs	r3, #2
 80087a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d901      	bls.n	80087b2 <create_chain+0x88>
 80087ae:	2300      	movs	r3, #0
 80087b0:	e04f      	b.n	8008852 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80087b2:	69f9      	ldr	r1, [r7, #28]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff fdc2 	bl	800833e <get_fat>
 80087ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d003      	beq.n	80087d0 <create_chain+0xa6>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ce:	d101      	bne.n	80087d4 <create_chain+0xaa>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	e03e      	b.n	8008852 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d1da      	bne.n	8008792 <create_chain+0x68>
 80087dc:	2300      	movs	r3, #0
 80087de:	e038      	b.n	8008852 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80087e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80087e2:	f04f 32ff 	mov.w	r2, #4294967295
 80087e6:	69f9      	ldr	r1, [r7, #28]
 80087e8:	6938      	ldr	r0, [r7, #16]
 80087ea:	f7ff fe4f 	bl	800848c <put_fat>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d109      	bne.n	800880c <create_chain+0xe2>
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d006      	beq.n	800880c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80087fe:	69fa      	ldr	r2, [r7, #28]
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6938      	ldr	r0, [r7, #16]
 8008804:	f7ff fe42 	bl	800848c <put_fat>
 8008808:	4603      	mov	r3, r0
 800880a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800880c:	7dfb      	ldrb	r3, [r7, #23]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d116      	bne.n	8008840 <create_chain+0x116>
		fs->last_clst = ncl;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	69fa      	ldr	r2, [r7, #28]
 8008816:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	3b02      	subs	r3, #2
 8008822:	429a      	cmp	r2, r3
 8008824:	d804      	bhi.n	8008830 <create_chain+0x106>
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	1e5a      	subs	r2, r3, #1
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	791b      	ldrb	r3, [r3, #4]
 8008834:	f043 0301 	orr.w	r3, r3, #1
 8008838:	b2da      	uxtb	r2, r3
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	711a      	strb	r2, [r3, #4]
 800883e:	e007      	b.n	8008850 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008840:	7dfb      	ldrb	r3, [r7, #23]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d102      	bne.n	800884c <create_chain+0x122>
 8008846:	f04f 33ff 	mov.w	r3, #4294967295
 800884a:	e000      	b.n	800884e <create_chain+0x124>
 800884c:	2301      	movs	r3, #1
 800884e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008850:	69fb      	ldr	r3, [r7, #28]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800885a:	b480      	push	{r7}
 800885c:	b087      	sub	sp, #28
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800886e:	3304      	adds	r3, #4
 8008870:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	0a5b      	lsrs	r3, r3, #9
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	8952      	ldrh	r2, [r2, #10]
 800887a:	fbb3 f3f2 	udiv	r3, r3, r2
 800887e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	613a      	str	r2, [r7, #16]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <clmt_clust+0x3a>
 8008890:	2300      	movs	r3, #0
 8008892:	e010      	b.n	80088b6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008894:	697a      	ldr	r2, [r7, #20]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	429a      	cmp	r2, r3
 800889a:	d307      	bcc.n	80088ac <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	3304      	adds	r3, #4
 80088a8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088aa:	e7e9      	b.n	8008880 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80088ac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	4413      	add	r3, r2
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b086      	sub	sp, #24
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80088d8:	d204      	bcs.n	80088e4 <dir_sdi+0x22>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	f003 031f 	and.w	r3, r3, #31
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80088e4:	2302      	movs	r3, #2
 80088e6:	e063      	b.n	80089b0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d106      	bne.n	8008908 <dir_sdi+0x46>
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d902      	bls.n	8008908 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008906:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10c      	bne.n	8008928 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	693a      	ldr	r2, [r7, #16]
 8008914:	8912      	ldrh	r2, [r2, #8]
 8008916:	4293      	cmp	r3, r2
 8008918:	d301      	bcc.n	800891e <dir_sdi+0x5c>
 800891a:	2302      	movs	r3, #2
 800891c:	e048      	b.n	80089b0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	61da      	str	r2, [r3, #28]
 8008926:	e029      	b.n	800897c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	895b      	ldrh	r3, [r3, #10]
 800892c:	025b      	lsls	r3, r3, #9
 800892e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008930:	e019      	b.n	8008966 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6979      	ldr	r1, [r7, #20]
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff fd01 	bl	800833e <get_fat>
 800893c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d101      	bne.n	800894a <dir_sdi+0x88>
 8008946:	2301      	movs	r3, #1
 8008948:	e032      	b.n	80089b0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d904      	bls.n	800895a <dir_sdi+0x98>
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	429a      	cmp	r2, r3
 8008958:	d301      	bcc.n	800895e <dir_sdi+0x9c>
 800895a:	2302      	movs	r3, #2
 800895c:	e028      	b.n	80089b0 <dir_sdi+0xee>
			ofs -= csz;
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	1ad3      	subs	r3, r2, r3
 8008964:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	429a      	cmp	r2, r3
 800896c:	d2e1      	bcs.n	8008932 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	6938      	ldr	r0, [r7, #16]
 8008972:	f7ff fcc5 	bl	8008300 <clust2sect>
 8008976:	4602      	mov	r2, r0
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <dir_sdi+0xcc>
 800898a:	2302      	movs	r3, #2
 800898c:	e010      	b.n	80089b0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	0a5b      	lsrs	r3, r3, #9
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089a8:	441a      	add	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3718      	adds	r7, #24
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b086      	sub	sp, #24
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	695b      	ldr	r3, [r3, #20]
 80089cc:	3320      	adds	r3, #32
 80089ce:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	69db      	ldr	r3, [r3, #28]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d003      	beq.n	80089e0 <dir_next+0x28>
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80089de:	d301      	bcc.n	80089e4 <dir_next+0x2c>
 80089e0:	2304      	movs	r3, #4
 80089e2:	e0aa      	b.n	8008b3a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f040 8098 	bne.w	8008b20 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	095b      	lsrs	r3, r3, #5
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	8912      	ldrh	r2, [r2, #8]
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	f0c0 8088 	bcc.w	8008b20 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	61da      	str	r2, [r3, #28]
 8008a16:	2304      	movs	r3, #4
 8008a18:	e08f      	b.n	8008b3a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	0a5b      	lsrs	r3, r3, #9
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	8952      	ldrh	r2, [r2, #10]
 8008a22:	3a01      	subs	r2, #1
 8008a24:	4013      	ands	r3, r2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d17a      	bne.n	8008b20 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7ff fc83 	bl	800833e <get_fat>
 8008a38:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d801      	bhi.n	8008a44 <dir_next+0x8c>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e07a      	b.n	8008b3a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4a:	d101      	bne.n	8008a50 <dir_next+0x98>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	e074      	b.n	8008b3a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d358      	bcc.n	8008b0c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	61da      	str	r2, [r3, #28]
 8008a66:	2304      	movs	r3, #4
 8008a68:	e067      	b.n	8008b3a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	4619      	mov	r1, r3
 8008a72:	4610      	mov	r0, r2
 8008a74:	f7ff fe59 	bl	800872a <create_chain>
 8008a78:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <dir_next+0xcc>
 8008a80:	2307      	movs	r3, #7
 8008a82:	e05a      	b.n	8008b3a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d101      	bne.n	8008a8e <dir_next+0xd6>
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	e055      	b.n	8008b3a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a94:	d101      	bne.n	8008a9a <dir_next+0xe2>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e04f      	b.n	8008b3a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7ff fb50 	bl	8008140 <sync_window>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <dir_next+0xf2>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e047      	b.n	8008b3a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	3330      	adds	r3, #48	@ 0x30
 8008aae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f7ff f97a 	bl	8007dae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	6979      	ldr	r1, [r7, #20]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f7ff fc1d 	bl	8008300 <clust2sect>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008acc:	e012      	b.n	8008af4 <dir_next+0x13c>
						fs->wflag = 1;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f7ff fb33 	bl	8008140 <sync_window>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <dir_next+0x12c>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e02a      	b.n	8008b3a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aee:	1c5a      	adds	r2, r3, #1
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	895b      	ldrh	r3, [r3, #10]
 8008af8:	461a      	mov	r2, r3
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d3e6      	bcc.n	8008ace <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008b12:	6979      	ldr	r1, [r7, #20]
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff fbf3 	bl	8008300 <clust2sect>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	441a      	add	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b086      	sub	sp, #24
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7ff feb4 	bl	80088c2 <dir_sdi>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d12b      	bne.n	8008bbc <dir_alloc+0x7a>
		n = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fb2a 	bl	80081c8 <move_window>
 8008b74:	4603      	mov	r3, r0
 8008b76:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d11d      	bne.n	8008bba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2be5      	cmp	r3, #229	@ 0xe5
 8008b86:	d004      	beq.n	8008b92 <dir_alloc+0x50>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6a1b      	ldr	r3, [r3, #32]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d107      	bne.n	8008ba2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	3301      	adds	r3, #1
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d102      	bne.n	8008ba6 <dir_alloc+0x64>
 8008ba0:	e00c      	b.n	8008bbc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008ba6:	2101      	movs	r1, #1
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff ff05 	bl	80089b8 <dir_next>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d0d7      	beq.n	8008b68 <dir_alloc+0x26>
 8008bb8:	e000      	b.n	8008bbc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008bba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d101      	bne.n	8008bc6 <dir_alloc+0x84>
 8008bc2:	2307      	movs	r3, #7
 8008bc4:	75fb      	strb	r3, [r7, #23]
	return res;
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	331a      	adds	r3, #26
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7ff f842 	bl	8007c68 <ld_word>
 8008be4:	4603      	mov	r3, r0
 8008be6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d109      	bne.n	8008c04 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	3314      	adds	r3, #20
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff f837 	bl	8007c68 <ld_word>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	041b      	lsls	r3, r3, #16
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008c04:	68fb      	ldr	r3, [r7, #12]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	331a      	adds	r3, #26
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	b292      	uxth	r2, r2
 8008c22:	4611      	mov	r1, r2
 8008c24:	4618      	mov	r0, r3
 8008c26:	f7ff f85a 	bl	8007cde <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d109      	bne.n	8008c46 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f103 0214 	add.w	r2, r3, #20
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	0c1b      	lsrs	r3, r3, #16
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f7ff f84c 	bl	8007cde <st_word>
	}
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b086      	sub	sp, #24
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7ff fe2f 	bl	80088c2 <dir_sdi>
 8008c64:	4603      	mov	r3, r0
 8008c66:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <dir_find+0x24>
 8008c6e:	7dfb      	ldrb	r3, [r7, #23]
 8008c70:	e03e      	b.n	8008cf0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6938      	ldr	r0, [r7, #16]
 8008c7a:	f7ff faa5 	bl	80081c8 <move_window>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d12f      	bne.n	8008ce8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d102      	bne.n	8008c9c <dir_find+0x4e>
 8008c96:	2304      	movs	r3, #4
 8008c98:	75fb      	strb	r3, [r7, #23]
 8008c9a:	e028      	b.n	8008cee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	330b      	adds	r3, #11
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	330b      	adds	r3, #11
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	f003 0308 	and.w	r3, r3, #8
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10a      	bne.n	8008cd4 <dir_find+0x86>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a18      	ldr	r0, [r3, #32]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3324      	adds	r3, #36	@ 0x24
 8008cc6:	220b      	movs	r2, #11
 8008cc8:	4619      	mov	r1, r3
 8008cca:	f7ff f88b 	bl	8007de4 <mem_cmp>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008cd4:	2100      	movs	r1, #0
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f7ff fe6e 	bl	80089b8 <dir_next>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c5      	beq.n	8008c72 <dir_find+0x24>
 8008ce6:	e002      	b.n	8008cee <dir_find+0xa0>
		if (res != FR_OK) break;
 8008ce8:	bf00      	nop
 8008cea:	e000      	b.n	8008cee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008cec:	bf00      	nop

	return res;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008d06:	2101      	movs	r1, #1
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff ff1a 	bl	8008b42 <dir_alloc>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11c      	bne.n	8008d52 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	69db      	ldr	r3, [r3, #28]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	68b8      	ldr	r0, [r7, #8]
 8008d20:	f7ff fa52 	bl	80081c8 <move_window>
 8008d24:	4603      	mov	r3, r0
 8008d26:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d111      	bne.n	8008d52 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	2220      	movs	r2, #32
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff f839 	bl	8007dae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6a18      	ldr	r0, [r3, #32]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	3324      	adds	r3, #36	@ 0x24
 8008d44:	220b      	movs	r2, #11
 8008d46:	4619      	mov	r1, r3
 8008d48:	f7ff f810 	bl	8007d6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b088      	sub	sp, #32
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	3324      	adds	r3, #36	@ 0x24
 8008d70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008d72:	220b      	movs	r2, #11
 8008d74:	2120      	movs	r1, #32
 8008d76:	68b8      	ldr	r0, [r7, #8]
 8008d78:	f7ff f819 	bl	8007dae <mem_set>
	si = i = 0; ni = 8;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	613b      	str	r3, [r7, #16]
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	2308      	movs	r3, #8
 8008d86:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	1c5a      	adds	r2, r3, #1
 8008d8c:	61fa      	str	r2, [r7, #28]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4413      	add	r3, r2
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008d96:	7efb      	ldrb	r3, [r7, #27]
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d94e      	bls.n	8008e3a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008d9c:	7efb      	ldrb	r3, [r7, #27]
 8008d9e:	2b2f      	cmp	r3, #47	@ 0x2f
 8008da0:	d006      	beq.n	8008db0 <create_name+0x54>
 8008da2:	7efb      	ldrb	r3, [r7, #27]
 8008da4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008da6:	d110      	bne.n	8008dca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008da8:	e002      	b.n	8008db0 <create_name+0x54>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	3301      	adds	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	4413      	add	r3, r2
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b2f      	cmp	r3, #47	@ 0x2f
 8008dba:	d0f6      	beq.n	8008daa <create_name+0x4e>
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	2b5c      	cmp	r3, #92	@ 0x5c
 8008dc6:	d0f0      	beq.n	8008daa <create_name+0x4e>
			break;
 8008dc8:	e038      	b.n	8008e3c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008dca:	7efb      	ldrb	r3, [r7, #27]
 8008dcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dce:	d003      	beq.n	8008dd8 <create_name+0x7c>
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d30c      	bcc.n	8008df2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	2b0b      	cmp	r3, #11
 8008ddc:	d002      	beq.n	8008de4 <create_name+0x88>
 8008dde:	7efb      	ldrb	r3, [r7, #27]
 8008de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008de2:	d001      	beq.n	8008de8 <create_name+0x8c>
 8008de4:	2306      	movs	r3, #6
 8008de6:	e044      	b.n	8008e72 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008de8:	2308      	movs	r3, #8
 8008dea:	613b      	str	r3, [r7, #16]
 8008dec:	230b      	movs	r3, #11
 8008dee:	617b      	str	r3, [r7, #20]
			continue;
 8008df0:	e022      	b.n	8008e38 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008df2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	da04      	bge.n	8008e04 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008dfa:	7efb      	ldrb	r3, [r7, #27]
 8008dfc:	3b80      	subs	r3, #128	@ 0x80
 8008dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008e7c <create_name+0x120>)
 8008e00:	5cd3      	ldrb	r3, [r2, r3]
 8008e02:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008e04:	7efb      	ldrb	r3, [r7, #27]
 8008e06:	4619      	mov	r1, r3
 8008e08:	481d      	ldr	r0, [pc, #116]	@ (8008e80 <create_name+0x124>)
 8008e0a:	f7ff f812 	bl	8007e32 <chk_chr>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <create_name+0xbc>
 8008e14:	2306      	movs	r3, #6
 8008e16:	e02c      	b.n	8008e72 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008e18:	7efb      	ldrb	r3, [r7, #27]
 8008e1a:	2b60      	cmp	r3, #96	@ 0x60
 8008e1c:	d905      	bls.n	8008e2a <create_name+0xce>
 8008e1e:	7efb      	ldrb	r3, [r7, #27]
 8008e20:	2b7a      	cmp	r3, #122	@ 0x7a
 8008e22:	d802      	bhi.n	8008e2a <create_name+0xce>
 8008e24:	7efb      	ldrb	r3, [r7, #27]
 8008e26:	3b20      	subs	r3, #32
 8008e28:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	613a      	str	r2, [r7, #16]
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	4413      	add	r3, r2
 8008e34:	7efa      	ldrb	r2, [r7, #27]
 8008e36:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008e38:	e7a6      	b.n	8008d88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008e3a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	69fb      	ldr	r3, [r7, #28]
 8008e40:	441a      	add	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <create_name+0xf4>
 8008e4c:	2306      	movs	r3, #6
 8008e4e:	e010      	b.n	8008e72 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	2be5      	cmp	r3, #229	@ 0xe5
 8008e56:	d102      	bne.n	8008e5e <create_name+0x102>
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2205      	movs	r2, #5
 8008e5c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008e5e:	7efb      	ldrb	r3, [r7, #27]
 8008e60:	2b20      	cmp	r3, #32
 8008e62:	d801      	bhi.n	8008e68 <create_name+0x10c>
 8008e64:	2204      	movs	r2, #4
 8008e66:	e000      	b.n	8008e6a <create_name+0x10e>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	330b      	adds	r3, #11
 8008e6e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008e70:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3720      	adds	r7, #32
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800dc2c 	.word	0x0800dc2c
 8008e80:	0800db20 	.word	0x0800db20

08008e84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008e98:	e002      	b.n	8008ea0 <follow_path+0x1c>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	603b      	str	r3, [r7, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b2f      	cmp	r3, #47	@ 0x2f
 8008ea6:	d0f8      	beq.n	8008e9a <follow_path+0x16>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b5c      	cmp	r3, #92	@ 0x5c
 8008eae:	d0f4      	beq.n	8008e9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	2b1f      	cmp	r3, #31
 8008ebc:	d80a      	bhi.n	8008ed4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2280      	movs	r2, #128	@ 0x80
 8008ec2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f7ff fcfa 	bl	80088c2 <dir_sdi>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	75fb      	strb	r3, [r7, #23]
 8008ed2:	e043      	b.n	8008f5c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7ff ff3f 	bl	8008d5c <create_name>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008ee2:	7dfb      	ldrb	r3, [r7, #23]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d134      	bne.n	8008f52 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff feb0 	bl	8008c4e <dir_find>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008ef8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d127      	bne.n	8008f56 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008f06:	7afb      	ldrb	r3, [r7, #11]
 8008f08:	f003 0304 	and.w	r3, r3, #4
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d122      	bne.n	8008f56 <follow_path+0xd2>
 8008f10:	2305      	movs	r3, #5
 8008f12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008f14:	e01f      	b.n	8008f56 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f16:	7afb      	ldrb	r3, [r7, #11]
 8008f18:	f003 0304 	and.w	r3, r3, #4
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d11c      	bne.n	8008f5a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	799b      	ldrb	r3, [r3, #6]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008f2c:	2305      	movs	r3, #5
 8008f2e:	75fb      	strb	r3, [r7, #23]
 8008f30:	e014      	b.n	8008f5c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	4413      	add	r3, r2
 8008f42:	4619      	mov	r1, r3
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f7ff fe43 	bl	8008bd0 <ld_clust>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008f50:	e7c0      	b.n	8008ed4 <follow_path+0x50>
			if (res != FR_OK) break;
 8008f52:	bf00      	nop
 8008f54:	e002      	b.n	8008f5c <follow_path+0xd8>
				break;
 8008f56:	bf00      	nop
 8008f58:	e000      	b.n	8008f5c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008f5a:	bf00      	nop
			}
		}
	}

	return res;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b087      	sub	sp, #28
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f72:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d031      	beq.n	8008fe0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	617b      	str	r3, [r7, #20]
 8008f82:	e002      	b.n	8008f8a <get_ldnumber+0x24>
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	3301      	adds	r3, #1
 8008f88:	617b      	str	r3, [r7, #20]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b20      	cmp	r3, #32
 8008f90:	d903      	bls.n	8008f9a <get_ldnumber+0x34>
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	2b3a      	cmp	r3, #58	@ 0x3a
 8008f98:	d1f4      	bne.n	8008f84 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b3a      	cmp	r3, #58	@ 0x3a
 8008fa0:	d11c      	bne.n	8008fdc <get_ldnumber+0x76>
			tp = *path;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	60fa      	str	r2, [r7, #12]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	3b30      	subs	r3, #48	@ 0x30
 8008fb2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d80e      	bhi.n	8008fd8 <get_ldnumber+0x72>
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d10a      	bne.n	8008fd8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d107      	bne.n	8008fd8 <get_ldnumber+0x72>
					vol = (int)i;
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	617b      	str	r3, [r7, #20]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	e002      	b.n	8008fe2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008fdc:	2300      	movs	r3, #0
 8008fde:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008fe0:	693b      	ldr	r3, [r7, #16]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	70da      	strb	r2, [r3, #3]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f04f 32ff 	mov.w	r2, #4294967295
 8009006:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7ff f8dc 	bl	80081c8 <move_window>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <check_fs+0x2a>
 8009016:	2304      	movs	r3, #4
 8009018:	e038      	b.n	800908c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	3330      	adds	r3, #48	@ 0x30
 800901e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009022:	4618      	mov	r0, r3
 8009024:	f7fe fe20 	bl	8007c68 <ld_word>
 8009028:	4603      	mov	r3, r0
 800902a:	461a      	mov	r2, r3
 800902c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009030:	429a      	cmp	r2, r3
 8009032:	d001      	beq.n	8009038 <check_fs+0x48>
 8009034:	2303      	movs	r3, #3
 8009036:	e029      	b.n	800908c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800903e:	2be9      	cmp	r3, #233	@ 0xe9
 8009040:	d009      	beq.n	8009056 <check_fs+0x66>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009048:	2beb      	cmp	r3, #235	@ 0xeb
 800904a:	d11e      	bne.n	800908a <check_fs+0x9a>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009052:	2b90      	cmp	r3, #144	@ 0x90
 8009054:	d119      	bne.n	800908a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3330      	adds	r3, #48	@ 0x30
 800905a:	3336      	adds	r3, #54	@ 0x36
 800905c:	4618      	mov	r0, r3
 800905e:	f7fe fe1b 	bl	8007c98 <ld_dword>
 8009062:	4603      	mov	r3, r0
 8009064:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009068:	4a0a      	ldr	r2, [pc, #40]	@ (8009094 <check_fs+0xa4>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d101      	bne.n	8009072 <check_fs+0x82>
 800906e:	2300      	movs	r3, #0
 8009070:	e00c      	b.n	800908c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	3330      	adds	r3, #48	@ 0x30
 8009076:	3352      	adds	r3, #82	@ 0x52
 8009078:	4618      	mov	r0, r3
 800907a:	f7fe fe0d 	bl	8007c98 <ld_dword>
 800907e:	4603      	mov	r3, r0
 8009080:	4a05      	ldr	r2, [pc, #20]	@ (8009098 <check_fs+0xa8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d101      	bne.n	800908a <check_fs+0x9a>
 8009086:	2300      	movs	r3, #0
 8009088:	e000      	b.n	800908c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800908a:	2302      	movs	r3, #2
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}
 8009094:	00544146 	.word	0x00544146
 8009098:	33544146 	.word	0x33544146

0800909c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b096      	sub	sp, #88	@ 0x58
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	4613      	mov	r3, r2
 80090a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f7ff ff58 	bl	8008f66 <get_ldnumber>
 80090b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da01      	bge.n	80090c2 <find_volume+0x26>
 80090be:	230b      	movs	r3, #11
 80090c0:	e22d      	b.n	800951e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80090c2:	4aa1      	ldr	r2, [pc, #644]	@ (8009348 <find_volume+0x2ac>)
 80090c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80090cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <find_volume+0x3a>
 80090d2:	230c      	movs	r3, #12
 80090d4:	e223      	b.n	800951e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	f023 0301 	bic.w	r3, r3, #1
 80090e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80090e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01a      	beq.n	8009122 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80090ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ee:	785b      	ldrb	r3, [r3, #1]
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fd19 	bl	8007b28 <disk_status>
 80090f6:	4603      	mov	r3, r0
 80090f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80090fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009108:	79fb      	ldrb	r3, [r7, #7]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d007      	beq.n	800911e <find_volume+0x82>
 800910e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009112:	f003 0304 	and.w	r3, r3, #4
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800911a:	230a      	movs	r3, #10
 800911c:	e1ff      	b.n	800951e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800911e:	2300      	movs	r3, #0
 8009120:	e1fd      	b.n	800951e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912a:	b2da      	uxtb	r2, r3
 800912c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009132:	785b      	ldrb	r3, [r3, #1]
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe fd11 	bl	8007b5c <disk_initialize>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009140:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009144:	f003 0301 	and.w	r3, r3, #1
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800914c:	2303      	movs	r3, #3
 800914e:	e1e6      	b.n	800951e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d007      	beq.n	8009166 <find_volume+0xca>
 8009156:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009162:	230a      	movs	r3, #10
 8009164:	e1db      	b.n	800951e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800916a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800916c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800916e:	f7ff ff3f 	bl	8008ff0 <check_fs>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009178:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800917c:	2b02      	cmp	r3, #2
 800917e:	d149      	bne.n	8009214 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009180:	2300      	movs	r3, #0
 8009182:	643b      	str	r3, [r7, #64]	@ 0x40
 8009184:	e01e      	b.n	80091c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009188:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800918c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918e:	011b      	lsls	r3, r3, #4
 8009190:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009194:	4413      	add	r3, r2
 8009196:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	3304      	adds	r3, #4
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d006      	beq.n	80091b0 <find_volume+0x114>
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	3308      	adds	r3, #8
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fe fd76 	bl	8007c98 <ld_dword>
 80091ac:	4602      	mov	r2, r0
 80091ae:	e000      	b.n	80091b2 <find_volume+0x116>
 80091b0:	2200      	movs	r2, #0
 80091b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	3358      	adds	r3, #88	@ 0x58
 80091b8:	443b      	add	r3, r7
 80091ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80091be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091c0:	3301      	adds	r3, #1
 80091c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80091c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d9dd      	bls.n	8009186 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80091ca:	2300      	movs	r3, #0
 80091cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80091ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d002      	beq.n	80091da <find_volume+0x13e>
 80091d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091d6:	3b01      	subs	r3, #1
 80091d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80091da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	3358      	adds	r3, #88	@ 0x58
 80091e0:	443b      	add	r3, r7
 80091e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80091e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80091e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d005      	beq.n	80091fa <find_volume+0x15e>
 80091ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091f2:	f7ff fefd 	bl	8008ff0 <check_fs>
 80091f6:	4603      	mov	r3, r0
 80091f8:	e000      	b.n	80091fc <find_volume+0x160>
 80091fa:	2303      	movs	r3, #3
 80091fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009200:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009204:	2b01      	cmp	r3, #1
 8009206:	d905      	bls.n	8009214 <find_volume+0x178>
 8009208:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800920a:	3301      	adds	r3, #1
 800920c:	643b      	str	r3, [r7, #64]	@ 0x40
 800920e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009210:	2b03      	cmp	r3, #3
 8009212:	d9e2      	bls.n	80091da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009214:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009218:	2b04      	cmp	r3, #4
 800921a:	d101      	bne.n	8009220 <find_volume+0x184>
 800921c:	2301      	movs	r3, #1
 800921e:	e17e      	b.n	800951e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009220:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009224:	2b01      	cmp	r3, #1
 8009226:	d901      	bls.n	800922c <find_volume+0x190>
 8009228:	230d      	movs	r3, #13
 800922a:	e178      	b.n	800951e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	3330      	adds	r3, #48	@ 0x30
 8009230:	330b      	adds	r3, #11
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe fd18 	bl	8007c68 <ld_word>
 8009238:	4603      	mov	r3, r0
 800923a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800923e:	d001      	beq.n	8009244 <find_volume+0x1a8>
 8009240:	230d      	movs	r3, #13
 8009242:	e16c      	b.n	800951e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009246:	3330      	adds	r3, #48	@ 0x30
 8009248:	3316      	adds	r3, #22
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fd0c 	bl	8007c68 <ld_word>
 8009250:	4603      	mov	r3, r0
 8009252:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <find_volume+0x1cc>
 800925a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800925c:	3330      	adds	r3, #48	@ 0x30
 800925e:	3324      	adds	r3, #36	@ 0x24
 8009260:	4618      	mov	r0, r3
 8009262:	f7fe fd19 	bl	8007c98 <ld_dword>
 8009266:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800926c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800926e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009270:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009276:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800927a:	789b      	ldrb	r3, [r3, #2]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d005      	beq.n	800928c <find_volume+0x1f0>
 8009280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009282:	789b      	ldrb	r3, [r3, #2]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d001      	beq.n	800928c <find_volume+0x1f0>
 8009288:	230d      	movs	r3, #13
 800928a:	e148      	b.n	800951e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800928c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800928e:	789b      	ldrb	r3, [r3, #2]
 8009290:	461a      	mov	r2, r3
 8009292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009294:	fb02 f303 	mul.w	r3, r2, r3
 8009298:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092a0:	461a      	mov	r2, r3
 80092a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80092a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092a8:	895b      	ldrh	r3, [r3, #10]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d008      	beq.n	80092c0 <find_volume+0x224>
 80092ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b0:	895b      	ldrh	r3, [r3, #10]
 80092b2:	461a      	mov	r2, r3
 80092b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092b6:	895b      	ldrh	r3, [r3, #10]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	4013      	ands	r3, r2
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <find_volume+0x228>
 80092c0:	230d      	movs	r3, #13
 80092c2:	e12c      	b.n	800951e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80092c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092c6:	3330      	adds	r3, #48	@ 0x30
 80092c8:	3311      	adds	r3, #17
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe fccc 	bl	8007c68 <ld_word>
 80092d0:	4603      	mov	r3, r0
 80092d2:	461a      	mov	r2, r3
 80092d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80092d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092da:	891b      	ldrh	r3, [r3, #8]
 80092dc:	f003 030f 	and.w	r3, r3, #15
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <find_volume+0x24e>
 80092e6:	230d      	movs	r3, #13
 80092e8:	e119      	b.n	800951e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80092ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ec:	3330      	adds	r3, #48	@ 0x30
 80092ee:	3313      	adds	r3, #19
 80092f0:	4618      	mov	r0, r3
 80092f2:	f7fe fcb9 	bl	8007c68 <ld_word>
 80092f6:	4603      	mov	r3, r0
 80092f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80092fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <find_volume+0x272>
 8009300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009302:	3330      	adds	r3, #48	@ 0x30
 8009304:	3320      	adds	r3, #32
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fcc6 	bl	8007c98 <ld_dword>
 800930c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800930e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009310:	3330      	adds	r3, #48	@ 0x30
 8009312:	330e      	adds	r3, #14
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fca7 	bl	8007c68 <ld_word>
 800931a:	4603      	mov	r3, r0
 800931c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800931e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009320:	2b00      	cmp	r3, #0
 8009322:	d101      	bne.n	8009328 <find_volume+0x28c>
 8009324:	230d      	movs	r3, #13
 8009326:	e0fa      	b.n	800951e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009328:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800932a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800932c:	4413      	add	r3, r2
 800932e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009330:	8912      	ldrh	r2, [r2, #8]
 8009332:	0912      	lsrs	r2, r2, #4
 8009334:	b292      	uxth	r2, r2
 8009336:	4413      	add	r3, r2
 8009338:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800933a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800933c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933e:	429a      	cmp	r2, r3
 8009340:	d204      	bcs.n	800934c <find_volume+0x2b0>
 8009342:	230d      	movs	r3, #13
 8009344:	e0eb      	b.n	800951e <find_volume+0x482>
 8009346:	bf00      	nop
 8009348:	2000cb40 	.word	0x2000cb40
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800934c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800934e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009354:	8952      	ldrh	r2, [r2, #10]
 8009356:	fbb3 f3f2 	udiv	r3, r3, r2
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d101      	bne.n	8009366 <find_volume+0x2ca>
 8009362:	230d      	movs	r3, #13
 8009364:	e0db      	b.n	800951e <find_volume+0x482>
		fmt = FS_FAT32;
 8009366:	2303      	movs	r3, #3
 8009368:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009372:	4293      	cmp	r3, r2
 8009374:	d802      	bhi.n	800937c <find_volume+0x2e0>
 8009376:	2302      	movs	r3, #2
 8009378:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009382:	4293      	cmp	r3, r2
 8009384:	d802      	bhi.n	800938c <find_volume+0x2f0>
 8009386:	2301      	movs	r3, #1
 8009388:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800938c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800938e:	1c9a      	adds	r2, r3, #2
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009396:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009398:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800939a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800939c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800939e:	441a      	add	r2, r3
 80093a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80093a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	441a      	add	r2, r3
 80093aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ac:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 80093ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	d11e      	bne.n	80093f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80093b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b8:	3330      	adds	r3, #48	@ 0x30
 80093ba:	332a      	adds	r3, #42	@ 0x2a
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe fc53 	bl	8007c68 <ld_word>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <find_volume+0x330>
 80093c8:	230d      	movs	r3, #13
 80093ca:	e0a8      	b.n	800951e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80093cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ce:	891b      	ldrh	r3, [r3, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <find_volume+0x33c>
 80093d4:	230d      	movs	r3, #13
 80093d6:	e0a2      	b.n	800951e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80093d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093da:	3330      	adds	r3, #48	@ 0x30
 80093dc:	332c      	adds	r3, #44	@ 0x2c
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fe fc5a 	bl	8007c98 <ld_dword>
 80093e4:	4602      	mov	r2, r0
 80093e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093e8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80093ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f2:	e01f      	b.n	8009434 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80093f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f6:	891b      	ldrh	r3, [r3, #8]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <find_volume+0x364>
 80093fc:	230d      	movs	r3, #13
 80093fe:	e08e      	b.n	800951e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009402:	6a1a      	ldr	r2, [r3, #32]
 8009404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009406:	441a      	add	r2, r3
 8009408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800940c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009410:	2b02      	cmp	r3, #2
 8009412:	d103      	bne.n	800941c <find_volume+0x380>
 8009414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009416:	695b      	ldr	r3, [r3, #20]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	e00a      	b.n	8009432 <find_volume+0x396>
 800941c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800941e:	695a      	ldr	r2, [r3, #20]
 8009420:	4613      	mov	r3, r2
 8009422:	005b      	lsls	r3, r3, #1
 8009424:	4413      	add	r3, r2
 8009426:	085a      	lsrs	r2, r3, #1
 8009428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009432:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800943a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800943e:	0a5b      	lsrs	r3, r3, #9
 8009440:	429a      	cmp	r2, r3
 8009442:	d201      	bcs.n	8009448 <find_volume+0x3ac>
 8009444:	230d      	movs	r3, #13
 8009446:	e06a      	b.n	800951e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944a:	f04f 32ff 	mov.w	r2, #4294967295
 800944e:	611a      	str	r2, [r3, #16]
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009456:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800945a:	2280      	movs	r2, #128	@ 0x80
 800945c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800945e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009462:	2b03      	cmp	r3, #3
 8009464:	d149      	bne.n	80094fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009468:	3330      	adds	r3, #48	@ 0x30
 800946a:	3330      	adds	r3, #48	@ 0x30
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fbfb 	bl	8007c68 <ld_word>
 8009472:	4603      	mov	r3, r0
 8009474:	2b01      	cmp	r3, #1
 8009476:	d140      	bne.n	80094fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800947a:	3301      	adds	r3, #1
 800947c:	4619      	mov	r1, r3
 800947e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009480:	f7fe fea2 	bl	80081c8 <move_window>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d137      	bne.n	80094fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800948a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800948c:	2200      	movs	r2, #0
 800948e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009492:	3330      	adds	r3, #48	@ 0x30
 8009494:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009498:	4618      	mov	r0, r3
 800949a:	f7fe fbe5 	bl	8007c68 <ld_word>
 800949e:	4603      	mov	r3, r0
 80094a0:	461a      	mov	r2, r3
 80094a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d127      	bne.n	80094fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	3330      	adds	r3, #48	@ 0x30
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fbf2 	bl	8007c98 <ld_dword>
 80094b4:	4603      	mov	r3, r0
 80094b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009528 <find_volume+0x48c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d11e      	bne.n	80094fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	3330      	adds	r3, #48	@ 0x30
 80094c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fbe7 	bl	8007c98 <ld_dword>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4a17      	ldr	r2, [pc, #92]	@ (800952c <find_volume+0x490>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d113      	bne.n	80094fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80094d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094d4:	3330      	adds	r3, #48	@ 0x30
 80094d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fbdc 	bl	8007c98 <ld_dword>
 80094e0:	4602      	mov	r2, r0
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80094e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e8:	3330      	adds	r3, #48	@ 0x30
 80094ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7fe fbd2 	bl	8007c98 <ld_dword>
 80094f4:	4602      	mov	r2, r0
 80094f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80094fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009500:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009502:	4b0b      	ldr	r3, [pc, #44]	@ (8009530 <find_volume+0x494>)
 8009504:	881b      	ldrh	r3, [r3, #0]
 8009506:	3301      	adds	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	4b09      	ldr	r3, [pc, #36]	@ (8009530 <find_volume+0x494>)
 800950c:	801a      	strh	r2, [r3, #0]
 800950e:	4b08      	ldr	r3, [pc, #32]	@ (8009530 <find_volume+0x494>)
 8009510:	881a      	ldrh	r2, [r3, #0]
 8009512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009514:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009516:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009518:	f7fe fdee 	bl	80080f8 <clear_lock>
#endif
	return FR_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3758      	adds	r7, #88	@ 0x58
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	41615252 	.word	0x41615252
 800952c:	61417272 	.word	0x61417272
 8009530:	2000cb44 	.word	0x2000cb44

08009534 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800953e:	2309      	movs	r3, #9
 8009540:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01c      	beq.n	8009582 <validate+0x4e>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d018      	beq.n	8009582 <validate+0x4e>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d013      	beq.n	8009582 <validate+0x4e>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	889a      	ldrh	r2, [r3, #4]
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	88db      	ldrh	r3, [r3, #6]
 8009564:	429a      	cmp	r2, r3
 8009566:	d10c      	bne.n	8009582 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	785b      	ldrb	r3, [r3, #1]
 800956e:	4618      	mov	r0, r3
 8009570:	f7fe fada 	bl	8007b28 <disk_status>
 8009574:	4603      	mov	r3, r0
 8009576:	f003 0301 	and.w	r3, r3, #1
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <validate+0x4e>
			res = FR_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d102      	bne.n	800958e <validate+0x5a>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	e000      	b.n	8009590 <validate+0x5c>
 800958e:	2300      	movs	r3, #0
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	6013      	str	r3, [r2, #0]
	return res;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
	...

080095a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	60b9      	str	r1, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095b2:	f107 0310 	add.w	r3, r7, #16
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fcd5 	bl	8008f66 <get_ldnumber>
 80095bc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	da01      	bge.n	80095c8 <f_mount+0x28>
 80095c4:	230b      	movs	r3, #11
 80095c6:	e02b      	b.n	8009620 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095c8:	4a17      	ldr	r2, [pc, #92]	@ (8009628 <f_mount+0x88>)
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80095d8:	69b8      	ldr	r0, [r7, #24]
 80095da:	f7fe fd8d 	bl	80080f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80095de:	69bb      	ldr	r3, [r7, #24]
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d002      	beq.n	80095f0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	490d      	ldr	r1, [pc, #52]	@ (8009628 <f_mount+0x88>)
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d002      	beq.n	8009606 <f_mount+0x66>
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d001      	beq.n	800960a <f_mount+0x6a>
 8009606:	2300      	movs	r3, #0
 8009608:	e00a      	b.n	8009620 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800960a:	f107 010c 	add.w	r1, r7, #12
 800960e:	f107 0308 	add.w	r3, r7, #8
 8009612:	2200      	movs	r2, #0
 8009614:	4618      	mov	r0, r3
 8009616:	f7ff fd41 	bl	800909c <find_volume>
 800961a:	4603      	mov	r3, r0
 800961c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800961e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3720      	adds	r7, #32
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	2000cb40 	.word	0x2000cb40

0800962c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b098      	sub	sp, #96	@ 0x60
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <f_open+0x18>
 8009640:	2309      	movs	r3, #9
 8009642:	e1a9      	b.n	8009998 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009644:	79fb      	ldrb	r3, [r7, #7]
 8009646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800964a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800964c:	79fa      	ldrb	r2, [r7, #7]
 800964e:	f107 0110 	add.w	r1, r7, #16
 8009652:	f107 0308 	add.w	r3, r7, #8
 8009656:	4618      	mov	r0, r3
 8009658:	f7ff fd20 	bl	800909c <find_volume>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8009662:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 818d 	bne.w	8009986 <f_open+0x35a>
		dj.obj.fs = fs;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	f107 0314 	add.w	r3, r7, #20
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff fc03 	bl	8008e84 <follow_path>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009684:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009688:	2b00      	cmp	r3, #0
 800968a:	d118      	bne.n	80096be <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800968c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009690:	b25b      	sxtb	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	da03      	bge.n	800969e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009696:	2306      	movs	r3, #6
 8009698:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800969c:	e00f      	b.n	80096be <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	bf8c      	ite	hi
 80096a4:	2301      	movhi	r3, #1
 80096a6:	2300      	movls	r3, #0
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	461a      	mov	r2, r3
 80096ac:	f107 0314 	add.w	r3, r7, #20
 80096b0:	4611      	mov	r1, r2
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fe fbd8 	bl	8007e68 <chk_lock>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	f003 031c 	and.w	r3, r3, #28
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d07f      	beq.n	80097c8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80096c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d017      	beq.n	8009700 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d10e      	bne.n	80096f6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096d8:	f7fe fc22 	bl	8007f20 <enq_lock>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d006      	beq.n	80096f0 <f_open+0xc4>
 80096e2:	f107 0314 	add.w	r3, r7, #20
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fb06 	bl	8008cf8 <dir_register>
 80096ec:	4603      	mov	r3, r0
 80096ee:	e000      	b.n	80096f2 <f_open+0xc6>
 80096f0:	2312      	movs	r3, #18
 80096f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096f6:	79fb      	ldrb	r3, [r7, #7]
 80096f8:	f043 0308 	orr.w	r3, r3, #8
 80096fc:	71fb      	strb	r3, [r7, #7]
 80096fe:	e010      	b.n	8009722 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009700:	7ebb      	ldrb	r3, [r7, #26]
 8009702:	f003 0311 	and.w	r3, r3, #17
 8009706:	2b00      	cmp	r3, #0
 8009708:	d003      	beq.n	8009712 <f_open+0xe6>
					res = FR_DENIED;
 800970a:	2307      	movs	r3, #7
 800970c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009710:	e007      	b.n	8009722 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009712:	79fb      	ldrb	r3, [r7, #7]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d002      	beq.n	8009722 <f_open+0xf6>
 800971c:	2308      	movs	r3, #8
 800971e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009722:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009726:	2b00      	cmp	r3, #0
 8009728:	d168      	bne.n	80097fc <f_open+0x1d0>
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d063      	beq.n	80097fc <f_open+0x1d0>
				dw = GET_FATTIME();
 8009734:	f7fd fcc0 	bl	80070b8 <get_fattime>
 8009738:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800973a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800973c:	330e      	adds	r3, #14
 800973e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe fae7 	bl	8007d14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009748:	3316      	adds	r3, #22
 800974a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fae1 	bl	8007d14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009754:	330b      	adds	r3, #11
 8009756:	2220      	movs	r2, #32
 8009758:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f7ff fa35 	bl	8008bd0 <ld_clust>
 8009766:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800976c:	2200      	movs	r2, #0
 800976e:	4618      	mov	r0, r3
 8009770:	f7ff fa4d 	bl	8008c0e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009776:	331c      	adds	r3, #28
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe faca 	bl	8007d14 <st_dword>
					fs->wflag = 1;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	2201      	movs	r2, #1
 8009784:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009788:	2b00      	cmp	r3, #0
 800978a:	d037      	beq.n	80097fc <f_open+0x1d0>
						dw = fs->winsect;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009790:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009792:	f107 0314 	add.w	r3, r7, #20
 8009796:	2200      	movs	r2, #0
 8009798:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800979a:	4618      	mov	r0, r3
 800979c:	f7fe ff60 	bl	8008660 <remove_chain>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 80097a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d126      	bne.n	80097fc <f_open+0x1d0>
							res = move_window(fs, dw);
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fe fd08 	bl	80081c8 <move_window>
 80097b8:	4603      	mov	r3, r0
 80097ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80097c2:	3a01      	subs	r2, #1
 80097c4:	60da      	str	r2, [r3, #12]
 80097c6:	e019      	b.n	80097fc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d115      	bne.n	80097fc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097d0:	7ebb      	ldrb	r3, [r7, #26]
 80097d2:	f003 0310 	and.w	r3, r3, #16
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <f_open+0x1b6>
					res = FR_NO_FILE;
 80097da:	2304      	movs	r3, #4
 80097dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80097e0:	e00c      	b.n	80097fc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d007      	beq.n	80097fc <f_open+0x1d0>
 80097ec:	7ebb      	ldrb	r3, [r7, #26]
 80097ee:	f003 0301 	and.w	r3, r3, #1
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d002      	beq.n	80097fc <f_open+0x1d0>
						res = FR_DENIED;
 80097f6:	2307      	movs	r3, #7
 80097f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80097fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009800:	2b00      	cmp	r3, #0
 8009802:	d126      	bne.n	8009852 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d003      	beq.n	8009816 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800980e:	79fb      	ldrb	r3, [r7, #7]
 8009810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009814:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800981e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b01      	cmp	r3, #1
 8009828:	bf8c      	ite	hi
 800982a:	2301      	movhi	r3, #1
 800982c:	2300      	movls	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	461a      	mov	r2, r3
 8009832:	f107 0314 	add.w	r3, r7, #20
 8009836:	4611      	mov	r1, r2
 8009838:	4618      	mov	r0, r3
 800983a:	f7fe fb93 	bl	8007f64 <inc_lock>
 800983e:	4602      	mov	r2, r0
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d102      	bne.n	8009852 <f_open+0x226>
 800984c:	2302      	movs	r3, #2
 800984e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009852:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 8095 	bne.w	8009986 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009860:	4611      	mov	r1, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff f9b4 	bl	8008bd0 <ld_clust>
 8009868:	4602      	mov	r2, r0
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800986e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009870:	331c      	adds	r3, #28
 8009872:	4618      	mov	r0, r3
 8009874:	f7fe fa10 	bl	8007c98 <ld_dword>
 8009878:	4602      	mov	r2, r0
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009884:	693a      	ldr	r2, [r7, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	88da      	ldrh	r2, [r3, #6]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	79fa      	ldrb	r2, [r7, #7]
 8009896:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2200      	movs	r2, #0
 80098a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3330      	adds	r3, #48	@ 0x30
 80098ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80098b2:	2100      	movs	r1, #0
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fe fa7a 	bl	8007dae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	f003 0320 	and.w	r3, r3, #32
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d060      	beq.n	8009986 <f_open+0x35a>
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d05c      	beq.n	8009986 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	68da      	ldr	r2, [r3, #12]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	895b      	ldrh	r3, [r3, #10]
 80098d8:	025b      	lsls	r3, r3, #9
 80098da:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80098e8:	e016      	b.n	8009918 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fd25 	bl	800833e <get_fat>
 80098f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80098f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d802      	bhi.n	8009902 <f_open+0x2d6>
 80098fc:	2302      	movs	r3, #2
 80098fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009902:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009908:	d102      	bne.n	8009910 <f_open+0x2e4>
 800990a:	2301      	movs	r3, #1
 800990c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009910:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009914:	1ad3      	subs	r3, r2, r3
 8009916:	657b      	str	r3, [r7, #84]	@ 0x54
 8009918:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800991c:	2b00      	cmp	r3, #0
 800991e:	d103      	bne.n	8009928 <f_open+0x2fc>
 8009920:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009924:	429a      	cmp	r2, r3
 8009926:	d8e0      	bhi.n	80098ea <f_open+0x2be>
				}
				fp->clust = clst;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800992c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800992e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009932:	2b00      	cmp	r3, #0
 8009934:	d127      	bne.n	8009986 <f_open+0x35a>
 8009936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800993c:	2b00      	cmp	r3, #0
 800993e:	d022      	beq.n	8009986 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8009944:	4618      	mov	r0, r3
 8009946:	f7fe fcdb 	bl	8008300 <clust2sect>
 800994a:	6478      	str	r0, [r7, #68]	@ 0x44
 800994c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800994e:	2b00      	cmp	r3, #0
 8009950:	d103      	bne.n	800995a <f_open+0x32e>
						res = FR_INT_ERR;
 8009952:	2302      	movs	r3, #2
 8009954:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009958:	e015      	b.n	8009986 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800995a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800995c:	0a5a      	lsrs	r2, r3, #9
 800995e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009960:	441a      	add	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	7858      	ldrb	r0, [r3, #1]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6a1a      	ldr	r2, [r3, #32]
 8009974:	2301      	movs	r3, #1
 8009976:	f7fe f919 	bl	8007bac <disk_read>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <f_open+0x35a>
 8009980:	2301      	movs	r3, #1
 8009982:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009986:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <f_open+0x368>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009994:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8009998:	4618      	mov	r0, r3
 800999a:	3760      	adds	r7, #96	@ 0x60
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08c      	sub	sp, #48	@ 0x30
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f107 0210 	add.w	r2, r7, #16
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fdb7 	bl	8009534 <validate>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d107      	bne.n	80099e4 <f_write+0x44>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	7d5b      	ldrb	r3, [r3, #21]
 80099d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80099dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <f_write+0x4a>
 80099e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099e8:	e14b      	b.n	8009c82 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	7d1b      	ldrb	r3, [r3, #20]
 80099ee:	f003 0302 	and.w	r3, r3, #2
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <f_write+0x5a>
 80099f6:	2307      	movs	r3, #7
 80099f8:	e143      	b.n	8009c82 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	699a      	ldr	r2, [r3, #24]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	441a      	add	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	699b      	ldr	r3, [r3, #24]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	f080 812d 	bcs.w	8009c66 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	43db      	mvns	r3, r3
 8009a12:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a14:	e127      	b.n	8009c66 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	f040 80e3 	bne.w	8009bea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	0a5b      	lsrs	r3, r3, #9
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	8952      	ldrh	r2, [r2, #10]
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	4013      	ands	r3, r2
 8009a32:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d143      	bne.n	8009ac2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10c      	bne.n	8009a5c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d11a      	bne.n	8009a84 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2100      	movs	r1, #0
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe fe69 	bl	800872a <create_chain>
 8009a58:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a5a:	e013      	b.n	8009a84 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7fe fef5 	bl	800885a <clmt_clust>
 8009a70:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a72:	e007      	b.n	8009a84 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	69db      	ldr	r3, [r3, #28]
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fe fe54 	bl	800872a <create_chain>
 8009a82:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	f000 80f2 	beq.w	8009c70 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d104      	bne.n	8009a9c <f_write+0xfc>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2202      	movs	r2, #2
 8009a96:	755a      	strb	r2, [r3, #21]
 8009a98:	2302      	movs	r3, #2
 8009a9a:	e0f2      	b.n	8009c82 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa2:	d104      	bne.n	8009aae <f_write+0x10e>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	755a      	strb	r2, [r3, #21]
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e0e9      	b.n	8009c82 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ab2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d102      	bne.n	8009ac2 <f_write+0x122>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ac0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	7d1b      	ldrb	r3, [r3, #20]
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da18      	bge.n	8009afe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	7858      	ldrb	r0, [r3, #1]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6a1a      	ldr	r2, [r3, #32]
 8009ada:	2301      	movs	r3, #1
 8009adc:	f7fe f886 	bl	8007bec <disk_write>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d004      	beq.n	8009af0 <f_write+0x150>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2201      	movs	r2, #1
 8009aea:	755a      	strb	r2, [r3, #21]
 8009aec:	2301      	movs	r3, #1
 8009aee:	e0c8      	b.n	8009c82 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	7d1b      	ldrb	r3, [r3, #20]
 8009af4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	69db      	ldr	r3, [r3, #28]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fe fbfa 	bl	8008300 <clust2sect>
 8009b0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <f_write+0x17e>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2202      	movs	r2, #2
 8009b18:	755a      	strb	r2, [r3, #21]
 8009b1a:	2302      	movs	r3, #2
 8009b1c:	e0b1      	b.n	8009c82 <f_write+0x2e2>
			sect += csect;
 8009b1e:	697a      	ldr	r2, [r7, #20]
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	4413      	add	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	0a5b      	lsrs	r3, r3, #9
 8009b2a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d03c      	beq.n	8009bac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	6a3b      	ldr	r3, [r7, #32]
 8009b36:	4413      	add	r3, r2
 8009b38:	693a      	ldr	r2, [r7, #16]
 8009b3a:	8952      	ldrh	r2, [r2, #10]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d905      	bls.n	8009b4c <f_write+0x1ac>
					cc = fs->csize - csect;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	895b      	ldrh	r3, [r3, #10]
 8009b44:	461a      	mov	r2, r3
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	7858      	ldrb	r0, [r3, #1]
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	69f9      	ldr	r1, [r7, #28]
 8009b56:	f7fe f849 	bl	8007bec <disk_write>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d004      	beq.n	8009b6a <f_write+0x1ca>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2201      	movs	r2, #1
 8009b64:	755a      	strb	r2, [r3, #21]
 8009b66:	2301      	movs	r3, #1
 8009b68:	e08b      	b.n	8009c82 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1a      	ldr	r2, [r3, #32]
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	6a3a      	ldr	r2, [r7, #32]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d915      	bls.n	8009ba4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1a      	ldr	r2, [r3, #32]
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	025b      	lsls	r3, r3, #9
 8009b88:	69fa      	ldr	r2, [r7, #28]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b90:	4619      	mov	r1, r3
 8009b92:	f7fe f8eb 	bl	8007d6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	7d1b      	ldrb	r3, [r3, #20]
 8009b9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	025b      	lsls	r3, r3, #9
 8009ba8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009baa:	e03f      	b.n	8009c2c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6a1b      	ldr	r3, [r3, #32]
 8009bb0:	697a      	ldr	r2, [r7, #20]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d016      	beq.n	8009be4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	699a      	ldr	r2, [r3, #24]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d210      	bcs.n	8009be4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	7858      	ldrb	r0, [r3, #1]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009bcc:	2301      	movs	r3, #1
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	f7fd ffec 	bl	8007bac <disk_read>
 8009bd4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	755a      	strb	r2, [r3, #21]
 8009be0:	2301      	movs	r3, #1
 8009be2:	e04e      	b.n	8009c82 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bf2:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009bf6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d901      	bls.n	8009c04 <f_write+0x264>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	699b      	ldr	r3, [r3, #24]
 8009c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c12:	4413      	add	r3, r2
 8009c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c16:	69f9      	ldr	r1, [r7, #28]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe f8a7 	bl	8007d6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	7d1b      	ldrb	r3, [r3, #20]
 8009c22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c2c:	69fa      	ldr	r2, [r7, #28]
 8009c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c30:	4413      	add	r3, r2
 8009c32:	61fb      	str	r3, [r7, #28]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	699a      	ldr	r2, [r3, #24]
 8009c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3a:	441a      	add	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	619a      	str	r2, [r3, #24]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68da      	ldr	r2, [r3, #12]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	bf38      	it	cc
 8009c4c:	461a      	movcc	r2, r3
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	60da      	str	r2, [r3, #12]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	441a      	add	r2, r3
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	601a      	str	r2, [r3, #0]
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f47f aed4 	bne.w	8009a16 <f_write+0x76>
 8009c6e:	e000      	b.n	8009c72 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009c70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	7d1b      	ldrb	r3, [r3, #20]
 8009c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009c80:	2300      	movs	r3, #0
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3730      	adds	r7, #48	@ 0x30
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b086      	sub	sp, #24
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f107 0208 	add.w	r2, r7, #8
 8009c98:	4611      	mov	r1, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fc4a 	bl	8009534 <validate>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d168      	bne.n	8009d7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	7d1b      	ldrb	r3, [r3, #20]
 8009cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d062      	beq.n	8009d7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7d1b      	ldrb	r3, [r3, #20]
 8009cba:	b25b      	sxtb	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da15      	bge.n	8009cec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	7858      	ldrb	r0, [r3, #1]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a1a      	ldr	r2, [r3, #32]
 8009cce:	2301      	movs	r3, #1
 8009cd0:	f7fd ff8c 	bl	8007bec <disk_write>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <f_sync+0x54>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e04f      	b.n	8009d7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7d1b      	ldrb	r3, [r3, #20]
 8009ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ce6:	b2da      	uxtb	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009cec:	f7fd f9e4 	bl	80070b8 <get_fattime>
 8009cf0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009cf2:	68ba      	ldr	r2, [r7, #8]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	4610      	mov	r0, r2
 8009cfc:	f7fe fa64 	bl	80081c8 <move_window>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009d04:	7dfb      	ldrb	r3, [r7, #23]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d138      	bne.n	8009d7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	330b      	adds	r3, #11
 8009d14:	781a      	ldrb	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	330b      	adds	r3, #11
 8009d1a:	f042 0220 	orr.w	r2, r2, #32
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6818      	ldr	r0, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	f7fe ff6e 	bl	8008c0e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f103 021c 	add.w	r2, r3, #28
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	f7fd ffe8 	bl	8007d14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3316      	adds	r3, #22
 8009d48:	6939      	ldr	r1, [r7, #16]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fd ffe2 	bl	8007d14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3312      	adds	r3, #18
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd ffc1 	bl	8007cde <st_word>
					fs->wflag = 1;
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fe fa5d 	bl	8008224 <sync_fs>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7d1b      	ldrb	r3, [r3, #20]
 8009d72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d76:	b2da      	uxtb	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b084      	sub	sp, #16
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff ff7b 	bl	8009c8a <f_sync>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d118      	bne.n	8009dd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f107 0208 	add.w	r2, r7, #8
 8009da4:	4611      	mov	r1, r2
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fbc4 	bl	8009534 <validate>
 8009dac:	4603      	mov	r3, r0
 8009dae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10c      	bne.n	8009dd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe f960 	bl	8008080 <dec_lock>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b090      	sub	sp, #64	@ 0x40
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f107 0208 	add.w	r2, r7, #8
 8009dea:	4611      	mov	r1, r2
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7ff fba1 	bl	8009534 <validate>
 8009df2:	4603      	mov	r3, r0
 8009df4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009df8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d103      	bne.n	8009e08 <f_lseek+0x2e>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	7d5b      	ldrb	r3, [r3, #21]
 8009e04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009e08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d002      	beq.n	8009e16 <f_lseek+0x3c>
 8009e10:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e14:	e1e6      	b.n	800a1e4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 80d1 	beq.w	8009fc2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e26:	d15a      	bne.n	8009ede <f_lseek+0x104>
			tbl = fp->cltbl;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e30:	1d1a      	adds	r2, r3, #4
 8009e32:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	2302      	movs	r3, #2
 8009e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d03a      	beq.n	8009ebe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e4a:	613b      	str	r3, [r7, #16]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e52:	3302      	adds	r3, #2
 8009e54:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe fa6a 	bl	800833e <get_fat>
 8009e6a:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d804      	bhi.n	8009e7c <f_lseek+0xa2>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2202      	movs	r2, #2
 8009e76:	755a      	strb	r2, [r3, #21]
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e1b3      	b.n	800a1e4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e82:	d104      	bne.n	8009e8e <f_lseek+0xb4>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	755a      	strb	r2, [r3, #21]
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e1aa      	b.n	800a1e4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d0de      	beq.n	8009e56 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d809      	bhi.n	8009eb4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	1d1a      	adds	r2, r3, #4
 8009ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eac:	1d1a      	adds	r2, r3, #4
 8009eae:	627a      	str	r2, [r7, #36]	@ 0x24
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	695b      	ldr	r3, [r3, #20]
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d3c4      	bcc.n	8009e48 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ec4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009ec6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d803      	bhi.n	8009ed6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	e184      	b.n	800a1e0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009ed6:	2311      	movs	r3, #17
 8009ed8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009edc:	e180      	b.n	800a1e0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d902      	bls.n	8009eee <f_lseek+0x114>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 8172 	beq.w	800a1e0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	3b01      	subs	r3, #1
 8009f00:	4619      	mov	r1, r3
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f7fe fca9 	bl	800885a <clmt_clust>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7fe f9f2 	bl	8008300 <clust2sect>
 8009f1c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d104      	bne.n	8009f2e <f_lseek+0x154>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	755a      	strb	r2, [r3, #21]
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e15a      	b.n	800a1e4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	0a5b      	lsrs	r3, r3, #9
 8009f34:	68ba      	ldr	r2, [r7, #8]
 8009f36:	8952      	ldrh	r2, [r2, #10]
 8009f38:	3a01      	subs	r2, #1
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	4413      	add	r3, r2
 8009f40:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8148 	beq.w	800a1e0 <f_lseek+0x406>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	69ba      	ldr	r2, [r7, #24]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	f000 8142 	beq.w	800a1e0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	7d1b      	ldrb	r3, [r3, #20]
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da18      	bge.n	8009f98 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	7858      	ldrb	r0, [r3, #1]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a1a      	ldr	r2, [r3, #32]
 8009f74:	2301      	movs	r3, #1
 8009f76:	f7fd fe39 	bl	8007bec <disk_write>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d004      	beq.n	8009f8a <f_lseek+0x1b0>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2201      	movs	r2, #1
 8009f84:	755a      	strb	r2, [r3, #21]
 8009f86:	2301      	movs	r3, #1
 8009f88:	e12c      	b.n	800a1e4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	7d1b      	ldrb	r3, [r3, #20]
 8009f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f92:	b2da      	uxtb	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	7858      	ldrb	r0, [r3, #1]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	69ba      	ldr	r2, [r7, #24]
 8009fa6:	f7fd fe01 	bl	8007bac <disk_read>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d004      	beq.n	8009fba <f_lseek+0x1e0>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	755a      	strb	r2, [r3, #21]
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e114      	b.n	800a1e4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	69ba      	ldr	r2, [r7, #24]
 8009fbe:	621a      	str	r2, [r3, #32]
 8009fc0:	e10e      	b.n	800a1e0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d908      	bls.n	8009fde <f_lseek+0x204>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	7d1b      	ldrb	r3, [r3, #20]
 8009fd0:	f003 0302 	and.w	r3, r3, #2
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d102      	bne.n	8009fde <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	699b      	ldr	r3, [r3, #24]
 8009fe2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009fec:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f000 80a7 	beq.w	800a144 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	895b      	ldrh	r3, [r3, #10]
 8009ffa:	025b      	lsls	r3, r3, #9
 8009ffc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d01b      	beq.n	800a03c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	fbb2 f2f3 	udiv	r2, r2, r3
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	1e59      	subs	r1, r3, #1
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a018:	429a      	cmp	r2, r3
 800a01a:	d30f      	bcc.n	800a03c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	1e5a      	subs	r2, r3, #1
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	425b      	negs	r3, r3
 800a024:	401a      	ands	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a03a:	e022      	b.n	800a082 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a044:	2b00      	cmp	r3, #0
 800a046:	d119      	bne.n	800a07c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2100      	movs	r1, #0
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fb6c 	bl	800872a <create_chain>
 800a052:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a056:	2b01      	cmp	r3, #1
 800a058:	d104      	bne.n	800a064 <f_lseek+0x28a>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2202      	movs	r2, #2
 800a05e:	755a      	strb	r2, [r3, #21]
 800a060:	2302      	movs	r3, #2
 800a062:	e0bf      	b.n	800a1e4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06a:	d104      	bne.n	800a076 <f_lseek+0x29c>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	755a      	strb	r2, [r3, #21]
 800a072:	2301      	movs	r3, #1
 800a074:	e0b6      	b.n	800a1e4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a07a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a080:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a084:	2b00      	cmp	r3, #0
 800a086:	d05d      	beq.n	800a144 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800a088:	e03a      	b.n	800a100 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	1ad3      	subs	r3, r2, r3
 800a090:	603b      	str	r3, [r7, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699a      	ldr	r2, [r3, #24]
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	441a      	add	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	7d1b      	ldrb	r3, [r3, #20]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00b      	beq.n	800a0c2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe fb3b 	bl	800872a <create_chain>
 800a0b4:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a0b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d108      	bne.n	800a0ce <f_lseek+0x2f4>
							ofs = 0; break;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	603b      	str	r3, [r7, #0]
 800a0c0:	e022      	b.n	800a108 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7fe f939 	bl	800833e <get_fat>
 800a0cc:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d4:	d104      	bne.n	800a0e0 <f_lseek+0x306>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	755a      	strb	r2, [r3, #21]
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e081      	b.n	800a1e4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d904      	bls.n	800a0f0 <f_lseek+0x316>
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d304      	bcc.n	800a0fa <f_lseek+0x320>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	755a      	strb	r2, [r3, #21]
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	e074      	b.n	800a1e4 <f_lseek+0x40a>
					fp->clust = clst;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0fe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a100:	683a      	ldr	r2, [r7, #0]
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	429a      	cmp	r2, r3
 800a106:	d8c0      	bhi.n	800a08a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	699a      	ldr	r2, [r3, #24]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	441a      	add	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d012      	beq.n	800a144 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a122:	4618      	mov	r0, r3
 800a124:	f7fe f8ec 	bl	8008300 <clust2sect>
 800a128:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d104      	bne.n	800a13a <f_lseek+0x360>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2202      	movs	r2, #2
 800a134:	755a      	strb	r2, [r3, #21]
 800a136:	2302      	movs	r3, #2
 800a138:	e054      	b.n	800a1e4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	0a5b      	lsrs	r3, r3, #9
 800a13e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a140:	4413      	add	r3, r2
 800a142:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	699a      	ldr	r2, [r3, #24]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d90a      	bls.n	800a166 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	699a      	ldr	r2, [r3, #24]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a160:	b2da      	uxtb	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d036      	beq.n	800a1e0 <f_lseek+0x406>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a178:	429a      	cmp	r2, r3
 800a17a:	d031      	beq.n	800a1e0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	7d1b      	ldrb	r3, [r3, #20]
 800a180:	b25b      	sxtb	r3, r3
 800a182:	2b00      	cmp	r3, #0
 800a184:	da18      	bge.n	800a1b8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	7858      	ldrb	r0, [r3, #1]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a1a      	ldr	r2, [r3, #32]
 800a194:	2301      	movs	r3, #1
 800a196:	f7fd fd29 	bl	8007bec <disk_write>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d004      	beq.n	800a1aa <f_lseek+0x3d0>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	755a      	strb	r2, [r3, #21]
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e01c      	b.n	800a1e4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	7d1b      	ldrb	r3, [r3, #20]
 800a1ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a1b2:	b2da      	uxtb	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	7858      	ldrb	r0, [r3, #1]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1c6:	f7fd fcf1 	bl	8007bac <disk_read>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d004      	beq.n	800a1da <f_lseek+0x400>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	755a      	strb	r2, [r3, #21]
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e004      	b.n	800a1e4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a1e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3740      	adds	r7, #64	@ 0x40
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b087      	sub	sp, #28
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a202:	4b1f      	ldr	r3, [pc, #124]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a204:	7a5b      	ldrb	r3, [r3, #9]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d131      	bne.n	800a270 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a20c:	4b1c      	ldr	r3, [pc, #112]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a20e:	7a5b      	ldrb	r3, [r3, #9]
 800a210:	b2db      	uxtb	r3, r3
 800a212:	461a      	mov	r2, r3
 800a214:	4b1a      	ldr	r3, [pc, #104]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a216:	2100      	movs	r1, #0
 800a218:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a21a:	4b19      	ldr	r3, [pc, #100]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a21c:	7a5b      	ldrb	r3, [r3, #9]
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	4a17      	ldr	r2, [pc, #92]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a22a:	4b15      	ldr	r3, [pc, #84]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a22c:	7a5b      	ldrb	r3, [r3, #9]
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	461a      	mov	r2, r3
 800a232:	4b13      	ldr	r3, [pc, #76]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a234:	4413      	add	r3, r2
 800a236:	79fa      	ldrb	r2, [r7, #7]
 800a238:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a23a:	4b11      	ldr	r3, [pc, #68]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a23c:	7a5b      	ldrb	r3, [r3, #9]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	1c5a      	adds	r2, r3, #1
 800a242:	b2d1      	uxtb	r1, r2
 800a244:	4a0e      	ldr	r2, [pc, #56]	@ (800a280 <FATFS_LinkDriverEx+0x94>)
 800a246:	7251      	strb	r1, [r2, #9]
 800a248:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a24a:	7dbb      	ldrb	r3, [r7, #22]
 800a24c:	3330      	adds	r3, #48	@ 0x30
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	3301      	adds	r3, #1
 800a258:	223a      	movs	r2, #58	@ 0x3a
 800a25a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	3302      	adds	r3, #2
 800a260:	222f      	movs	r2, #47	@ 0x2f
 800a262:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	3303      	adds	r3, #3
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
}
 800a272:	4618      	mov	r0, r3
 800a274:	371c      	adds	r7, #28
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
 800a27e:	bf00      	nop
 800a280:	2000cb68 	.word	0x2000cb68

0800a284 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a28e:	2200      	movs	r2, #0
 800a290:	6839      	ldr	r1, [r7, #0]
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff ffaa 	bl	800a1ec <FATFS_LinkDriverEx>
 800a298:	4603      	mov	r3, r0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3708      	adds	r7, #8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <__cvt>:
 800a2a2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a6:	ec57 6b10 	vmov	r6, r7, d0
 800a2aa:	2f00      	cmp	r7, #0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	463b      	mov	r3, r7
 800a2b2:	bfbb      	ittet	lt
 800a2b4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a2b8:	461f      	movlt	r7, r3
 800a2ba:	2300      	movge	r3, #0
 800a2bc:	232d      	movlt	r3, #45	@ 0x2d
 800a2be:	700b      	strb	r3, [r1, #0]
 800a2c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2c2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2c6:	4691      	mov	r9, r2
 800a2c8:	f023 0820 	bic.w	r8, r3, #32
 800a2cc:	bfbc      	itt	lt
 800a2ce:	4632      	movlt	r2, r6
 800a2d0:	4616      	movlt	r6, r2
 800a2d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2d6:	d005      	beq.n	800a2e4 <__cvt+0x42>
 800a2d8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a2dc:	d100      	bne.n	800a2e0 <__cvt+0x3e>
 800a2de:	3401      	adds	r4, #1
 800a2e0:	2102      	movs	r1, #2
 800a2e2:	e000      	b.n	800a2e6 <__cvt+0x44>
 800a2e4:	2103      	movs	r1, #3
 800a2e6:	ab03      	add	r3, sp, #12
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	ab02      	add	r3, sp, #8
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	ec47 6b10 	vmov	d0, r6, r7
 800a2f2:	4653      	mov	r3, sl
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	f000 ff73 	bl	800b1e0 <_dtoa_r>
 800a2fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2fe:	4605      	mov	r5, r0
 800a300:	d119      	bne.n	800a336 <__cvt+0x94>
 800a302:	f019 0f01 	tst.w	r9, #1
 800a306:	d00e      	beq.n	800a326 <__cvt+0x84>
 800a308:	eb00 0904 	add.w	r9, r0, r4
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4630      	mov	r0, r6
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 fbb0 	bl	8000a78 <__aeabi_dcmpeq>
 800a318:	b108      	cbz	r0, 800a31e <__cvt+0x7c>
 800a31a:	f8cd 900c 	str.w	r9, [sp, #12]
 800a31e:	2230      	movs	r2, #48	@ 0x30
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	454b      	cmp	r3, r9
 800a324:	d31e      	bcc.n	800a364 <__cvt+0xc2>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a32a:	1b5b      	subs	r3, r3, r5
 800a32c:	4628      	mov	r0, r5
 800a32e:	6013      	str	r3, [r2, #0]
 800a330:	b004      	add	sp, #16
 800a332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a336:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a33a:	eb00 0904 	add.w	r9, r0, r4
 800a33e:	d1e5      	bne.n	800a30c <__cvt+0x6a>
 800a340:	7803      	ldrb	r3, [r0, #0]
 800a342:	2b30      	cmp	r3, #48	@ 0x30
 800a344:	d10a      	bne.n	800a35c <__cvt+0xba>
 800a346:	2200      	movs	r2, #0
 800a348:	2300      	movs	r3, #0
 800a34a:	4630      	mov	r0, r6
 800a34c:	4639      	mov	r1, r7
 800a34e:	f7f6 fb93 	bl	8000a78 <__aeabi_dcmpeq>
 800a352:	b918      	cbnz	r0, 800a35c <__cvt+0xba>
 800a354:	f1c4 0401 	rsb	r4, r4, #1
 800a358:	f8ca 4000 	str.w	r4, [sl]
 800a35c:	f8da 3000 	ldr.w	r3, [sl]
 800a360:	4499      	add	r9, r3
 800a362:	e7d3      	b.n	800a30c <__cvt+0x6a>
 800a364:	1c59      	adds	r1, r3, #1
 800a366:	9103      	str	r1, [sp, #12]
 800a368:	701a      	strb	r2, [r3, #0]
 800a36a:	e7d9      	b.n	800a320 <__cvt+0x7e>

0800a36c <__exponent>:
 800a36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a36e:	2900      	cmp	r1, #0
 800a370:	bfba      	itte	lt
 800a372:	4249      	neglt	r1, r1
 800a374:	232d      	movlt	r3, #45	@ 0x2d
 800a376:	232b      	movge	r3, #43	@ 0x2b
 800a378:	2909      	cmp	r1, #9
 800a37a:	7002      	strb	r2, [r0, #0]
 800a37c:	7043      	strb	r3, [r0, #1]
 800a37e:	dd29      	ble.n	800a3d4 <__exponent+0x68>
 800a380:	f10d 0307 	add.w	r3, sp, #7
 800a384:	461d      	mov	r5, r3
 800a386:	270a      	movs	r7, #10
 800a388:	461a      	mov	r2, r3
 800a38a:	fbb1 f6f7 	udiv	r6, r1, r7
 800a38e:	fb07 1416 	mls	r4, r7, r6, r1
 800a392:	3430      	adds	r4, #48	@ 0x30
 800a394:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a398:	460c      	mov	r4, r1
 800a39a:	2c63      	cmp	r4, #99	@ 0x63
 800a39c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3a0:	4631      	mov	r1, r6
 800a3a2:	dcf1      	bgt.n	800a388 <__exponent+0x1c>
 800a3a4:	3130      	adds	r1, #48	@ 0x30
 800a3a6:	1e94      	subs	r4, r2, #2
 800a3a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3ac:	1c41      	adds	r1, r0, #1
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	d30a      	bcc.n	800a3ca <__exponent+0x5e>
 800a3b4:	f10d 0309 	add.w	r3, sp, #9
 800a3b8:	1a9b      	subs	r3, r3, r2
 800a3ba:	42ac      	cmp	r4, r5
 800a3bc:	bf88      	it	hi
 800a3be:	2300      	movhi	r3, #0
 800a3c0:	3302      	adds	r3, #2
 800a3c2:	4403      	add	r3, r0
 800a3c4:	1a18      	subs	r0, r3, r0
 800a3c6:	b003      	add	sp, #12
 800a3c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3d2:	e7ed      	b.n	800a3b0 <__exponent+0x44>
 800a3d4:	2330      	movs	r3, #48	@ 0x30
 800a3d6:	3130      	adds	r1, #48	@ 0x30
 800a3d8:	7083      	strb	r3, [r0, #2]
 800a3da:	70c1      	strb	r1, [r0, #3]
 800a3dc:	1d03      	adds	r3, r0, #4
 800a3de:	e7f1      	b.n	800a3c4 <__exponent+0x58>

0800a3e0 <_printf_float>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	b08d      	sub	sp, #52	@ 0x34
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3ec:	4616      	mov	r6, r2
 800a3ee:	461f      	mov	r7, r3
 800a3f0:	4605      	mov	r5, r0
 800a3f2:	f000 fdf3 	bl	800afdc <_localeconv_r>
 800a3f6:	6803      	ldr	r3, [r0, #0]
 800a3f8:	9304      	str	r3, [sp, #16]
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7f5 ff10 	bl	8000220 <strlen>
 800a400:	2300      	movs	r3, #0
 800a402:	930a      	str	r3, [sp, #40]	@ 0x28
 800a404:	f8d8 3000 	ldr.w	r3, [r8]
 800a408:	9005      	str	r0, [sp, #20]
 800a40a:	3307      	adds	r3, #7
 800a40c:	f023 0307 	bic.w	r3, r3, #7
 800a410:	f103 0208 	add.w	r2, r3, #8
 800a414:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a418:	f8d4 b000 	ldr.w	fp, [r4]
 800a41c:	f8c8 2000 	str.w	r2, [r8]
 800a420:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a424:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a428:	9307      	str	r3, [sp, #28]
 800a42a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a42e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a432:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a436:	4b9c      	ldr	r3, [pc, #624]	@ (800a6a8 <_printf_float+0x2c8>)
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	f7f6 fb4e 	bl	8000adc <__aeabi_dcmpun>
 800a440:	bb70      	cbnz	r0, 800a4a0 <_printf_float+0xc0>
 800a442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a446:	4b98      	ldr	r3, [pc, #608]	@ (800a6a8 <_printf_float+0x2c8>)
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	f7f6 fb28 	bl	8000aa0 <__aeabi_dcmple>
 800a450:	bb30      	cbnz	r0, 800a4a0 <_printf_float+0xc0>
 800a452:	2200      	movs	r2, #0
 800a454:	2300      	movs	r3, #0
 800a456:	4640      	mov	r0, r8
 800a458:	4649      	mov	r1, r9
 800a45a:	f7f6 fb17 	bl	8000a8c <__aeabi_dcmplt>
 800a45e:	b110      	cbz	r0, 800a466 <_printf_float+0x86>
 800a460:	232d      	movs	r3, #45	@ 0x2d
 800a462:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a466:	4a91      	ldr	r2, [pc, #580]	@ (800a6ac <_printf_float+0x2cc>)
 800a468:	4b91      	ldr	r3, [pc, #580]	@ (800a6b0 <_printf_float+0x2d0>)
 800a46a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a46e:	bf94      	ite	ls
 800a470:	4690      	movls	r8, r2
 800a472:	4698      	movhi	r8, r3
 800a474:	2303      	movs	r3, #3
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	f02b 0304 	bic.w	r3, fp, #4
 800a47c:	6023      	str	r3, [r4, #0]
 800a47e:	f04f 0900 	mov.w	r9, #0
 800a482:	9700      	str	r7, [sp, #0]
 800a484:	4633      	mov	r3, r6
 800a486:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a488:	4621      	mov	r1, r4
 800a48a:	4628      	mov	r0, r5
 800a48c:	f000 f9d2 	bl	800a834 <_printf_common>
 800a490:	3001      	adds	r0, #1
 800a492:	f040 808d 	bne.w	800a5b0 <_printf_float+0x1d0>
 800a496:	f04f 30ff 	mov.w	r0, #4294967295
 800a49a:	b00d      	add	sp, #52	@ 0x34
 800a49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4a0:	4642      	mov	r2, r8
 800a4a2:	464b      	mov	r3, r9
 800a4a4:	4640      	mov	r0, r8
 800a4a6:	4649      	mov	r1, r9
 800a4a8:	f7f6 fb18 	bl	8000adc <__aeabi_dcmpun>
 800a4ac:	b140      	cbz	r0, 800a4c0 <_printf_float+0xe0>
 800a4ae:	464b      	mov	r3, r9
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bfbc      	itt	lt
 800a4b4:	232d      	movlt	r3, #45	@ 0x2d
 800a4b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a4ba:	4a7e      	ldr	r2, [pc, #504]	@ (800a6b4 <_printf_float+0x2d4>)
 800a4bc:	4b7e      	ldr	r3, [pc, #504]	@ (800a6b8 <_printf_float+0x2d8>)
 800a4be:	e7d4      	b.n	800a46a <_printf_float+0x8a>
 800a4c0:	6863      	ldr	r3, [r4, #4]
 800a4c2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a4c6:	9206      	str	r2, [sp, #24]
 800a4c8:	1c5a      	adds	r2, r3, #1
 800a4ca:	d13b      	bne.n	800a544 <_printf_float+0x164>
 800a4cc:	2306      	movs	r3, #6
 800a4ce:	6063      	str	r3, [r4, #4]
 800a4d0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	6022      	str	r2, [r4, #0]
 800a4d8:	9303      	str	r3, [sp, #12]
 800a4da:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4dc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4e0:	ab09      	add	r3, sp, #36	@ 0x24
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	6861      	ldr	r1, [r4, #4]
 800a4e6:	ec49 8b10 	vmov	d0, r8, r9
 800a4ea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	f7ff fed7 	bl	800a2a2 <__cvt>
 800a4f4:	9b06      	ldr	r3, [sp, #24]
 800a4f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4f8:	2b47      	cmp	r3, #71	@ 0x47
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	d129      	bne.n	800a552 <_printf_float+0x172>
 800a4fe:	1cc8      	adds	r0, r1, #3
 800a500:	db02      	blt.n	800a508 <_printf_float+0x128>
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	4299      	cmp	r1, r3
 800a506:	dd41      	ble.n	800a58c <_printf_float+0x1ac>
 800a508:	f1aa 0a02 	sub.w	sl, sl, #2
 800a50c:	fa5f fa8a 	uxtb.w	sl, sl
 800a510:	3901      	subs	r1, #1
 800a512:	4652      	mov	r2, sl
 800a514:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a518:	9109      	str	r1, [sp, #36]	@ 0x24
 800a51a:	f7ff ff27 	bl	800a36c <__exponent>
 800a51e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a520:	1813      	adds	r3, r2, r0
 800a522:	2a01      	cmp	r2, #1
 800a524:	4681      	mov	r9, r0
 800a526:	6123      	str	r3, [r4, #16]
 800a528:	dc02      	bgt.n	800a530 <_printf_float+0x150>
 800a52a:	6822      	ldr	r2, [r4, #0]
 800a52c:	07d2      	lsls	r2, r2, #31
 800a52e:	d501      	bpl.n	800a534 <_printf_float+0x154>
 800a530:	3301      	adds	r3, #1
 800a532:	6123      	str	r3, [r4, #16]
 800a534:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0a2      	beq.n	800a482 <_printf_float+0xa2>
 800a53c:	232d      	movs	r3, #45	@ 0x2d
 800a53e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a542:	e79e      	b.n	800a482 <_printf_float+0xa2>
 800a544:	9a06      	ldr	r2, [sp, #24]
 800a546:	2a47      	cmp	r2, #71	@ 0x47
 800a548:	d1c2      	bne.n	800a4d0 <_printf_float+0xf0>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1c0      	bne.n	800a4d0 <_printf_float+0xf0>
 800a54e:	2301      	movs	r3, #1
 800a550:	e7bd      	b.n	800a4ce <_printf_float+0xee>
 800a552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a556:	d9db      	bls.n	800a510 <_printf_float+0x130>
 800a558:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a55c:	d118      	bne.n	800a590 <_printf_float+0x1b0>
 800a55e:	2900      	cmp	r1, #0
 800a560:	6863      	ldr	r3, [r4, #4]
 800a562:	dd0b      	ble.n	800a57c <_printf_float+0x19c>
 800a564:	6121      	str	r1, [r4, #16]
 800a566:	b913      	cbnz	r3, 800a56e <_printf_float+0x18e>
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	07d0      	lsls	r0, r2, #31
 800a56c:	d502      	bpl.n	800a574 <_printf_float+0x194>
 800a56e:	3301      	adds	r3, #1
 800a570:	440b      	add	r3, r1
 800a572:	6123      	str	r3, [r4, #16]
 800a574:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a576:	f04f 0900 	mov.w	r9, #0
 800a57a:	e7db      	b.n	800a534 <_printf_float+0x154>
 800a57c:	b913      	cbnz	r3, 800a584 <_printf_float+0x1a4>
 800a57e:	6822      	ldr	r2, [r4, #0]
 800a580:	07d2      	lsls	r2, r2, #31
 800a582:	d501      	bpl.n	800a588 <_printf_float+0x1a8>
 800a584:	3302      	adds	r3, #2
 800a586:	e7f4      	b.n	800a572 <_printf_float+0x192>
 800a588:	2301      	movs	r3, #1
 800a58a:	e7f2      	b.n	800a572 <_printf_float+0x192>
 800a58c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a592:	4299      	cmp	r1, r3
 800a594:	db05      	blt.n	800a5a2 <_printf_float+0x1c2>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	6121      	str	r1, [r4, #16]
 800a59a:	07d8      	lsls	r0, r3, #31
 800a59c:	d5ea      	bpl.n	800a574 <_printf_float+0x194>
 800a59e:	1c4b      	adds	r3, r1, #1
 800a5a0:	e7e7      	b.n	800a572 <_printf_float+0x192>
 800a5a2:	2900      	cmp	r1, #0
 800a5a4:	bfd4      	ite	le
 800a5a6:	f1c1 0202 	rsble	r2, r1, #2
 800a5aa:	2201      	movgt	r2, #1
 800a5ac:	4413      	add	r3, r2
 800a5ae:	e7e0      	b.n	800a572 <_printf_float+0x192>
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	055a      	lsls	r2, r3, #21
 800a5b4:	d407      	bmi.n	800a5c6 <_printf_float+0x1e6>
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d12b      	bne.n	800a61c <_printf_float+0x23c>
 800a5c4:	e767      	b.n	800a496 <_printf_float+0xb6>
 800a5c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5ca:	f240 80dd 	bls.w	800a788 <_printf_float+0x3a8>
 800a5ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f7f6 fa4f 	bl	8000a78 <__aeabi_dcmpeq>
 800a5da:	2800      	cmp	r0, #0
 800a5dc:	d033      	beq.n	800a646 <_printf_float+0x266>
 800a5de:	4a37      	ldr	r2, [pc, #220]	@ (800a6bc <_printf_float+0x2dc>)
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4631      	mov	r1, r6
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	47b8      	blx	r7
 800a5e8:	3001      	adds	r0, #1
 800a5ea:	f43f af54 	beq.w	800a496 <_printf_float+0xb6>
 800a5ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5f2:	4543      	cmp	r3, r8
 800a5f4:	db02      	blt.n	800a5fc <_printf_float+0x21c>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	07d8      	lsls	r0, r3, #31
 800a5fa:	d50f      	bpl.n	800a61c <_printf_float+0x23c>
 800a5fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a600:	4631      	mov	r1, r6
 800a602:	4628      	mov	r0, r5
 800a604:	47b8      	blx	r7
 800a606:	3001      	adds	r0, #1
 800a608:	f43f af45 	beq.w	800a496 <_printf_float+0xb6>
 800a60c:	f04f 0900 	mov.w	r9, #0
 800a610:	f108 38ff 	add.w	r8, r8, #4294967295
 800a614:	f104 0a1a 	add.w	sl, r4, #26
 800a618:	45c8      	cmp	r8, r9
 800a61a:	dc09      	bgt.n	800a630 <_printf_float+0x250>
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	079b      	lsls	r3, r3, #30
 800a620:	f100 8103 	bmi.w	800a82a <_printf_float+0x44a>
 800a624:	68e0      	ldr	r0, [r4, #12]
 800a626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a628:	4298      	cmp	r0, r3
 800a62a:	bfb8      	it	lt
 800a62c:	4618      	movlt	r0, r3
 800a62e:	e734      	b.n	800a49a <_printf_float+0xba>
 800a630:	2301      	movs	r3, #1
 800a632:	4652      	mov	r2, sl
 800a634:	4631      	mov	r1, r6
 800a636:	4628      	mov	r0, r5
 800a638:	47b8      	blx	r7
 800a63a:	3001      	adds	r0, #1
 800a63c:	f43f af2b 	beq.w	800a496 <_printf_float+0xb6>
 800a640:	f109 0901 	add.w	r9, r9, #1
 800a644:	e7e8      	b.n	800a618 <_printf_float+0x238>
 800a646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dc39      	bgt.n	800a6c0 <_printf_float+0x2e0>
 800a64c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6bc <_printf_float+0x2dc>)
 800a64e:	2301      	movs	r3, #1
 800a650:	4631      	mov	r1, r6
 800a652:	4628      	mov	r0, r5
 800a654:	47b8      	blx	r7
 800a656:	3001      	adds	r0, #1
 800a658:	f43f af1d 	beq.w	800a496 <_printf_float+0xb6>
 800a65c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a660:	ea59 0303 	orrs.w	r3, r9, r3
 800a664:	d102      	bne.n	800a66c <_printf_float+0x28c>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	07d9      	lsls	r1, r3, #31
 800a66a:	d5d7      	bpl.n	800a61c <_printf_float+0x23c>
 800a66c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a670:	4631      	mov	r1, r6
 800a672:	4628      	mov	r0, r5
 800a674:	47b8      	blx	r7
 800a676:	3001      	adds	r0, #1
 800a678:	f43f af0d 	beq.w	800a496 <_printf_float+0xb6>
 800a67c:	f04f 0a00 	mov.w	sl, #0
 800a680:	f104 0b1a 	add.w	fp, r4, #26
 800a684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a686:	425b      	negs	r3, r3
 800a688:	4553      	cmp	r3, sl
 800a68a:	dc01      	bgt.n	800a690 <_printf_float+0x2b0>
 800a68c:	464b      	mov	r3, r9
 800a68e:	e793      	b.n	800a5b8 <_printf_float+0x1d8>
 800a690:	2301      	movs	r3, #1
 800a692:	465a      	mov	r2, fp
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f aefb 	beq.w	800a496 <_printf_float+0xb6>
 800a6a0:	f10a 0a01 	add.w	sl, sl, #1
 800a6a4:	e7ee      	b.n	800a684 <_printf_float+0x2a4>
 800a6a6:	bf00      	nop
 800a6a8:	7fefffff 	.word	0x7fefffff
 800a6ac:	0800dcac 	.word	0x0800dcac
 800a6b0:	0800dcb0 	.word	0x0800dcb0
 800a6b4:	0800dcb4 	.word	0x0800dcb4
 800a6b8:	0800dcb8 	.word	0x0800dcb8
 800a6bc:	0800dcbc 	.word	0x0800dcbc
 800a6c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6c2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6c6:	4553      	cmp	r3, sl
 800a6c8:	bfa8      	it	ge
 800a6ca:	4653      	movge	r3, sl
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	4699      	mov	r9, r3
 800a6d0:	dc36      	bgt.n	800a740 <_printf_float+0x360>
 800a6d2:	f04f 0b00 	mov.w	fp, #0
 800a6d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6da:	f104 021a 	add.w	r2, r4, #26
 800a6de:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6e0:	9306      	str	r3, [sp, #24]
 800a6e2:	eba3 0309 	sub.w	r3, r3, r9
 800a6e6:	455b      	cmp	r3, fp
 800a6e8:	dc31      	bgt.n	800a74e <_printf_float+0x36e>
 800a6ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ec:	459a      	cmp	sl, r3
 800a6ee:	dc3a      	bgt.n	800a766 <_printf_float+0x386>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	07da      	lsls	r2, r3, #31
 800a6f4:	d437      	bmi.n	800a766 <_printf_float+0x386>
 800a6f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f8:	ebaa 0903 	sub.w	r9, sl, r3
 800a6fc:	9b06      	ldr	r3, [sp, #24]
 800a6fe:	ebaa 0303 	sub.w	r3, sl, r3
 800a702:	4599      	cmp	r9, r3
 800a704:	bfa8      	it	ge
 800a706:	4699      	movge	r9, r3
 800a708:	f1b9 0f00 	cmp.w	r9, #0
 800a70c:	dc33      	bgt.n	800a776 <_printf_float+0x396>
 800a70e:	f04f 0800 	mov.w	r8, #0
 800a712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a716:	f104 0b1a 	add.w	fp, r4, #26
 800a71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71c:	ebaa 0303 	sub.w	r3, sl, r3
 800a720:	eba3 0309 	sub.w	r3, r3, r9
 800a724:	4543      	cmp	r3, r8
 800a726:	f77f af79 	ble.w	800a61c <_printf_float+0x23c>
 800a72a:	2301      	movs	r3, #1
 800a72c:	465a      	mov	r2, fp
 800a72e:	4631      	mov	r1, r6
 800a730:	4628      	mov	r0, r5
 800a732:	47b8      	blx	r7
 800a734:	3001      	adds	r0, #1
 800a736:	f43f aeae 	beq.w	800a496 <_printf_float+0xb6>
 800a73a:	f108 0801 	add.w	r8, r8, #1
 800a73e:	e7ec      	b.n	800a71a <_printf_float+0x33a>
 800a740:	4642      	mov	r2, r8
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	d1c2      	bne.n	800a6d2 <_printf_float+0x2f2>
 800a74c:	e6a3      	b.n	800a496 <_printf_float+0xb6>
 800a74e:	2301      	movs	r3, #1
 800a750:	4631      	mov	r1, r6
 800a752:	4628      	mov	r0, r5
 800a754:	9206      	str	r2, [sp, #24]
 800a756:	47b8      	blx	r7
 800a758:	3001      	adds	r0, #1
 800a75a:	f43f ae9c 	beq.w	800a496 <_printf_float+0xb6>
 800a75e:	9a06      	ldr	r2, [sp, #24]
 800a760:	f10b 0b01 	add.w	fp, fp, #1
 800a764:	e7bb      	b.n	800a6de <_printf_float+0x2fe>
 800a766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a76a:	4631      	mov	r1, r6
 800a76c:	4628      	mov	r0, r5
 800a76e:	47b8      	blx	r7
 800a770:	3001      	adds	r0, #1
 800a772:	d1c0      	bne.n	800a6f6 <_printf_float+0x316>
 800a774:	e68f      	b.n	800a496 <_printf_float+0xb6>
 800a776:	9a06      	ldr	r2, [sp, #24]
 800a778:	464b      	mov	r3, r9
 800a77a:	4442      	add	r2, r8
 800a77c:	4631      	mov	r1, r6
 800a77e:	4628      	mov	r0, r5
 800a780:	47b8      	blx	r7
 800a782:	3001      	adds	r0, #1
 800a784:	d1c3      	bne.n	800a70e <_printf_float+0x32e>
 800a786:	e686      	b.n	800a496 <_printf_float+0xb6>
 800a788:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a78c:	f1ba 0f01 	cmp.w	sl, #1
 800a790:	dc01      	bgt.n	800a796 <_printf_float+0x3b6>
 800a792:	07db      	lsls	r3, r3, #31
 800a794:	d536      	bpl.n	800a804 <_printf_float+0x424>
 800a796:	2301      	movs	r3, #1
 800a798:	4642      	mov	r2, r8
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	f43f ae78 	beq.w	800a496 <_printf_float+0xb6>
 800a7a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	f43f ae70 	beq.w	800a496 <_printf_float+0xb6>
 800a7b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7c2:	f7f6 f959 	bl	8000a78 <__aeabi_dcmpeq>
 800a7c6:	b9c0      	cbnz	r0, 800a7fa <_printf_float+0x41a>
 800a7c8:	4653      	mov	r3, sl
 800a7ca:	f108 0201 	add.w	r2, r8, #1
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4628      	mov	r0, r5
 800a7d2:	47b8      	blx	r7
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	d10c      	bne.n	800a7f2 <_printf_float+0x412>
 800a7d8:	e65d      	b.n	800a496 <_printf_float+0xb6>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	465a      	mov	r2, fp
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b8      	blx	r7
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	f43f ae56 	beq.w	800a496 <_printf_float+0xb6>
 800a7ea:	f108 0801 	add.w	r8, r8, #1
 800a7ee:	45d0      	cmp	r8, sl
 800a7f0:	dbf3      	blt.n	800a7da <_printf_float+0x3fa>
 800a7f2:	464b      	mov	r3, r9
 800a7f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7f8:	e6df      	b.n	800a5ba <_printf_float+0x1da>
 800a7fa:	f04f 0800 	mov.w	r8, #0
 800a7fe:	f104 0b1a 	add.w	fp, r4, #26
 800a802:	e7f4      	b.n	800a7ee <_printf_float+0x40e>
 800a804:	2301      	movs	r3, #1
 800a806:	4642      	mov	r2, r8
 800a808:	e7e1      	b.n	800a7ce <_printf_float+0x3ee>
 800a80a:	2301      	movs	r3, #1
 800a80c:	464a      	mov	r2, r9
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f ae3e 	beq.w	800a496 <_printf_float+0xb6>
 800a81a:	f108 0801 	add.w	r8, r8, #1
 800a81e:	68e3      	ldr	r3, [r4, #12]
 800a820:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a822:	1a5b      	subs	r3, r3, r1
 800a824:	4543      	cmp	r3, r8
 800a826:	dcf0      	bgt.n	800a80a <_printf_float+0x42a>
 800a828:	e6fc      	b.n	800a624 <_printf_float+0x244>
 800a82a:	f04f 0800 	mov.w	r8, #0
 800a82e:	f104 0919 	add.w	r9, r4, #25
 800a832:	e7f4      	b.n	800a81e <_printf_float+0x43e>

0800a834 <_printf_common>:
 800a834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a838:	4616      	mov	r6, r2
 800a83a:	4698      	mov	r8, r3
 800a83c:	688a      	ldr	r2, [r1, #8]
 800a83e:	690b      	ldr	r3, [r1, #16]
 800a840:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a844:	4293      	cmp	r3, r2
 800a846:	bfb8      	it	lt
 800a848:	4613      	movlt	r3, r2
 800a84a:	6033      	str	r3, [r6, #0]
 800a84c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a850:	4607      	mov	r7, r0
 800a852:	460c      	mov	r4, r1
 800a854:	b10a      	cbz	r2, 800a85a <_printf_common+0x26>
 800a856:	3301      	adds	r3, #1
 800a858:	6033      	str	r3, [r6, #0]
 800a85a:	6823      	ldr	r3, [r4, #0]
 800a85c:	0699      	lsls	r1, r3, #26
 800a85e:	bf42      	ittt	mi
 800a860:	6833      	ldrmi	r3, [r6, #0]
 800a862:	3302      	addmi	r3, #2
 800a864:	6033      	strmi	r3, [r6, #0]
 800a866:	6825      	ldr	r5, [r4, #0]
 800a868:	f015 0506 	ands.w	r5, r5, #6
 800a86c:	d106      	bne.n	800a87c <_printf_common+0x48>
 800a86e:	f104 0a19 	add.w	sl, r4, #25
 800a872:	68e3      	ldr	r3, [r4, #12]
 800a874:	6832      	ldr	r2, [r6, #0]
 800a876:	1a9b      	subs	r3, r3, r2
 800a878:	42ab      	cmp	r3, r5
 800a87a:	dc26      	bgt.n	800a8ca <_printf_common+0x96>
 800a87c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a880:	6822      	ldr	r2, [r4, #0]
 800a882:	3b00      	subs	r3, #0
 800a884:	bf18      	it	ne
 800a886:	2301      	movne	r3, #1
 800a888:	0692      	lsls	r2, r2, #26
 800a88a:	d42b      	bmi.n	800a8e4 <_printf_common+0xb0>
 800a88c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a890:	4641      	mov	r1, r8
 800a892:	4638      	mov	r0, r7
 800a894:	47c8      	blx	r9
 800a896:	3001      	adds	r0, #1
 800a898:	d01e      	beq.n	800a8d8 <_printf_common+0xa4>
 800a89a:	6823      	ldr	r3, [r4, #0]
 800a89c:	6922      	ldr	r2, [r4, #16]
 800a89e:	f003 0306 	and.w	r3, r3, #6
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	bf02      	ittt	eq
 800a8a6:	68e5      	ldreq	r5, [r4, #12]
 800a8a8:	6833      	ldreq	r3, [r6, #0]
 800a8aa:	1aed      	subeq	r5, r5, r3
 800a8ac:	68a3      	ldr	r3, [r4, #8]
 800a8ae:	bf0c      	ite	eq
 800a8b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8b4:	2500      	movne	r5, #0
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	bfc4      	itt	gt
 800a8ba:	1a9b      	subgt	r3, r3, r2
 800a8bc:	18ed      	addgt	r5, r5, r3
 800a8be:	2600      	movs	r6, #0
 800a8c0:	341a      	adds	r4, #26
 800a8c2:	42b5      	cmp	r5, r6
 800a8c4:	d11a      	bne.n	800a8fc <_printf_common+0xc8>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	e008      	b.n	800a8dc <_printf_common+0xa8>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4652      	mov	r2, sl
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	47c8      	blx	r9
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	d103      	bne.n	800a8e0 <_printf_common+0xac>
 800a8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	e7c6      	b.n	800a872 <_printf_common+0x3e>
 800a8e4:	18e1      	adds	r1, r4, r3
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	2030      	movs	r0, #48	@ 0x30
 800a8ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8ee:	4422      	add	r2, r4
 800a8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8f8:	3302      	adds	r3, #2
 800a8fa:	e7c7      	b.n	800a88c <_printf_common+0x58>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	4622      	mov	r2, r4
 800a900:	4641      	mov	r1, r8
 800a902:	4638      	mov	r0, r7
 800a904:	47c8      	blx	r9
 800a906:	3001      	adds	r0, #1
 800a908:	d0e6      	beq.n	800a8d8 <_printf_common+0xa4>
 800a90a:	3601      	adds	r6, #1
 800a90c:	e7d9      	b.n	800a8c2 <_printf_common+0x8e>
	...

0800a910 <_printf_i>:
 800a910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a914:	7e0f      	ldrb	r7, [r1, #24]
 800a916:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a918:	2f78      	cmp	r7, #120	@ 0x78
 800a91a:	4691      	mov	r9, r2
 800a91c:	4680      	mov	r8, r0
 800a91e:	460c      	mov	r4, r1
 800a920:	469a      	mov	sl, r3
 800a922:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a926:	d807      	bhi.n	800a938 <_printf_i+0x28>
 800a928:	2f62      	cmp	r7, #98	@ 0x62
 800a92a:	d80a      	bhi.n	800a942 <_printf_i+0x32>
 800a92c:	2f00      	cmp	r7, #0
 800a92e:	f000 80d2 	beq.w	800aad6 <_printf_i+0x1c6>
 800a932:	2f58      	cmp	r7, #88	@ 0x58
 800a934:	f000 80b9 	beq.w	800aaaa <_printf_i+0x19a>
 800a938:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a93c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a940:	e03a      	b.n	800a9b8 <_printf_i+0xa8>
 800a942:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a946:	2b15      	cmp	r3, #21
 800a948:	d8f6      	bhi.n	800a938 <_printf_i+0x28>
 800a94a:	a101      	add	r1, pc, #4	@ (adr r1, 800a950 <_printf_i+0x40>)
 800a94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a950:	0800a9a9 	.word	0x0800a9a9
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a939 	.word	0x0800a939
 800a95c:	0800a939 	.word	0x0800a939
 800a960:	0800a939 	.word	0x0800a939
 800a964:	0800a939 	.word	0x0800a939
 800a968:	0800a9bd 	.word	0x0800a9bd
 800a96c:	0800a939 	.word	0x0800a939
 800a970:	0800a939 	.word	0x0800a939
 800a974:	0800a939 	.word	0x0800a939
 800a978:	0800a939 	.word	0x0800a939
 800a97c:	0800aabd 	.word	0x0800aabd
 800a980:	0800a9e7 	.word	0x0800a9e7
 800a984:	0800aa77 	.word	0x0800aa77
 800a988:	0800a939 	.word	0x0800a939
 800a98c:	0800a939 	.word	0x0800a939
 800a990:	0800aadf 	.word	0x0800aadf
 800a994:	0800a939 	.word	0x0800a939
 800a998:	0800a9e7 	.word	0x0800a9e7
 800a99c:	0800a939 	.word	0x0800a939
 800a9a0:	0800a939 	.word	0x0800a939
 800a9a4:	0800aa7f 	.word	0x0800aa7f
 800a9a8:	6833      	ldr	r3, [r6, #0]
 800a9aa:	1d1a      	adds	r2, r3, #4
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	6032      	str	r2, [r6, #0]
 800a9b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e09d      	b.n	800aaf8 <_printf_i+0x1e8>
 800a9bc:	6833      	ldr	r3, [r6, #0]
 800a9be:	6820      	ldr	r0, [r4, #0]
 800a9c0:	1d19      	adds	r1, r3, #4
 800a9c2:	6031      	str	r1, [r6, #0]
 800a9c4:	0606      	lsls	r6, r0, #24
 800a9c6:	d501      	bpl.n	800a9cc <_printf_i+0xbc>
 800a9c8:	681d      	ldr	r5, [r3, #0]
 800a9ca:	e003      	b.n	800a9d4 <_printf_i+0xc4>
 800a9cc:	0645      	lsls	r5, r0, #25
 800a9ce:	d5fb      	bpl.n	800a9c8 <_printf_i+0xb8>
 800a9d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9d4:	2d00      	cmp	r5, #0
 800a9d6:	da03      	bge.n	800a9e0 <_printf_i+0xd0>
 800a9d8:	232d      	movs	r3, #45	@ 0x2d
 800a9da:	426d      	negs	r5, r5
 800a9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9e0:	4859      	ldr	r0, [pc, #356]	@ (800ab48 <_printf_i+0x238>)
 800a9e2:	230a      	movs	r3, #10
 800a9e4:	e011      	b.n	800aa0a <_printf_i+0xfa>
 800a9e6:	6821      	ldr	r1, [r4, #0]
 800a9e8:	6833      	ldr	r3, [r6, #0]
 800a9ea:	0608      	lsls	r0, r1, #24
 800a9ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9f0:	d402      	bmi.n	800a9f8 <_printf_i+0xe8>
 800a9f2:	0649      	lsls	r1, r1, #25
 800a9f4:	bf48      	it	mi
 800a9f6:	b2ad      	uxthmi	r5, r5
 800a9f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9fa:	4853      	ldr	r0, [pc, #332]	@ (800ab48 <_printf_i+0x238>)
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	bf14      	ite	ne
 800aa00:	230a      	movne	r3, #10
 800aa02:	2308      	moveq	r3, #8
 800aa04:	2100      	movs	r1, #0
 800aa06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa0a:	6866      	ldr	r6, [r4, #4]
 800aa0c:	60a6      	str	r6, [r4, #8]
 800aa0e:	2e00      	cmp	r6, #0
 800aa10:	bfa2      	ittt	ge
 800aa12:	6821      	ldrge	r1, [r4, #0]
 800aa14:	f021 0104 	bicge.w	r1, r1, #4
 800aa18:	6021      	strge	r1, [r4, #0]
 800aa1a:	b90d      	cbnz	r5, 800aa20 <_printf_i+0x110>
 800aa1c:	2e00      	cmp	r6, #0
 800aa1e:	d04b      	beq.n	800aab8 <_printf_i+0x1a8>
 800aa20:	4616      	mov	r6, r2
 800aa22:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa26:	fb03 5711 	mls	r7, r3, r1, r5
 800aa2a:	5dc7      	ldrb	r7, [r0, r7]
 800aa2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa30:	462f      	mov	r7, r5
 800aa32:	42bb      	cmp	r3, r7
 800aa34:	460d      	mov	r5, r1
 800aa36:	d9f4      	bls.n	800aa22 <_printf_i+0x112>
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d10b      	bne.n	800aa54 <_printf_i+0x144>
 800aa3c:	6823      	ldr	r3, [r4, #0]
 800aa3e:	07df      	lsls	r7, r3, #31
 800aa40:	d508      	bpl.n	800aa54 <_printf_i+0x144>
 800aa42:	6923      	ldr	r3, [r4, #16]
 800aa44:	6861      	ldr	r1, [r4, #4]
 800aa46:	4299      	cmp	r1, r3
 800aa48:	bfde      	ittt	le
 800aa4a:	2330      	movle	r3, #48	@ 0x30
 800aa4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa50:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aa54:	1b92      	subs	r2, r2, r6
 800aa56:	6122      	str	r2, [r4, #16]
 800aa58:	f8cd a000 	str.w	sl, [sp]
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	aa03      	add	r2, sp, #12
 800aa60:	4621      	mov	r1, r4
 800aa62:	4640      	mov	r0, r8
 800aa64:	f7ff fee6 	bl	800a834 <_printf_common>
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d14a      	bne.n	800ab02 <_printf_i+0x1f2>
 800aa6c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa70:	b004      	add	sp, #16
 800aa72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa76:	6823      	ldr	r3, [r4, #0]
 800aa78:	f043 0320 	orr.w	r3, r3, #32
 800aa7c:	6023      	str	r3, [r4, #0]
 800aa7e:	4833      	ldr	r0, [pc, #204]	@ (800ab4c <_printf_i+0x23c>)
 800aa80:	2778      	movs	r7, #120	@ 0x78
 800aa82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	6831      	ldr	r1, [r6, #0]
 800aa8a:	061f      	lsls	r7, r3, #24
 800aa8c:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa90:	d402      	bmi.n	800aa98 <_printf_i+0x188>
 800aa92:	065f      	lsls	r7, r3, #25
 800aa94:	bf48      	it	mi
 800aa96:	b2ad      	uxthmi	r5, r5
 800aa98:	6031      	str	r1, [r6, #0]
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	bf44      	itt	mi
 800aa9e:	f043 0320 	orrmi.w	r3, r3, #32
 800aaa2:	6023      	strmi	r3, [r4, #0]
 800aaa4:	b11d      	cbz	r5, 800aaae <_printf_i+0x19e>
 800aaa6:	2310      	movs	r3, #16
 800aaa8:	e7ac      	b.n	800aa04 <_printf_i+0xf4>
 800aaaa:	4827      	ldr	r0, [pc, #156]	@ (800ab48 <_printf_i+0x238>)
 800aaac:	e7e9      	b.n	800aa82 <_printf_i+0x172>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	f023 0320 	bic.w	r3, r3, #32
 800aab4:	6023      	str	r3, [r4, #0]
 800aab6:	e7f6      	b.n	800aaa6 <_printf_i+0x196>
 800aab8:	4616      	mov	r6, r2
 800aaba:	e7bd      	b.n	800aa38 <_printf_i+0x128>
 800aabc:	6833      	ldr	r3, [r6, #0]
 800aabe:	6825      	ldr	r5, [r4, #0]
 800aac0:	6961      	ldr	r1, [r4, #20]
 800aac2:	1d18      	adds	r0, r3, #4
 800aac4:	6030      	str	r0, [r6, #0]
 800aac6:	062e      	lsls	r6, r5, #24
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	d501      	bpl.n	800aad0 <_printf_i+0x1c0>
 800aacc:	6019      	str	r1, [r3, #0]
 800aace:	e002      	b.n	800aad6 <_printf_i+0x1c6>
 800aad0:	0668      	lsls	r0, r5, #25
 800aad2:	d5fb      	bpl.n	800aacc <_printf_i+0x1bc>
 800aad4:	8019      	strh	r1, [r3, #0]
 800aad6:	2300      	movs	r3, #0
 800aad8:	6123      	str	r3, [r4, #16]
 800aada:	4616      	mov	r6, r2
 800aadc:	e7bc      	b.n	800aa58 <_printf_i+0x148>
 800aade:	6833      	ldr	r3, [r6, #0]
 800aae0:	1d1a      	adds	r2, r3, #4
 800aae2:	6032      	str	r2, [r6, #0]
 800aae4:	681e      	ldr	r6, [r3, #0]
 800aae6:	6862      	ldr	r2, [r4, #4]
 800aae8:	2100      	movs	r1, #0
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7f5 fb48 	bl	8000180 <memchr>
 800aaf0:	b108      	cbz	r0, 800aaf6 <_printf_i+0x1e6>
 800aaf2:	1b80      	subs	r0, r0, r6
 800aaf4:	6060      	str	r0, [r4, #4]
 800aaf6:	6863      	ldr	r3, [r4, #4]
 800aaf8:	6123      	str	r3, [r4, #16]
 800aafa:	2300      	movs	r3, #0
 800aafc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab00:	e7aa      	b.n	800aa58 <_printf_i+0x148>
 800ab02:	6923      	ldr	r3, [r4, #16]
 800ab04:	4632      	mov	r2, r6
 800ab06:	4649      	mov	r1, r9
 800ab08:	4640      	mov	r0, r8
 800ab0a:	47d0      	blx	sl
 800ab0c:	3001      	adds	r0, #1
 800ab0e:	d0ad      	beq.n	800aa6c <_printf_i+0x15c>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	079b      	lsls	r3, r3, #30
 800ab14:	d413      	bmi.n	800ab3e <_printf_i+0x22e>
 800ab16:	68e0      	ldr	r0, [r4, #12]
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	4298      	cmp	r0, r3
 800ab1c:	bfb8      	it	lt
 800ab1e:	4618      	movlt	r0, r3
 800ab20:	e7a6      	b.n	800aa70 <_printf_i+0x160>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4632      	mov	r2, r6
 800ab26:	4649      	mov	r1, r9
 800ab28:	4640      	mov	r0, r8
 800ab2a:	47d0      	blx	sl
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	d09d      	beq.n	800aa6c <_printf_i+0x15c>
 800ab30:	3501      	adds	r5, #1
 800ab32:	68e3      	ldr	r3, [r4, #12]
 800ab34:	9903      	ldr	r1, [sp, #12]
 800ab36:	1a5b      	subs	r3, r3, r1
 800ab38:	42ab      	cmp	r3, r5
 800ab3a:	dcf2      	bgt.n	800ab22 <_printf_i+0x212>
 800ab3c:	e7eb      	b.n	800ab16 <_printf_i+0x206>
 800ab3e:	2500      	movs	r5, #0
 800ab40:	f104 0619 	add.w	r6, r4, #25
 800ab44:	e7f5      	b.n	800ab32 <_printf_i+0x222>
 800ab46:	bf00      	nop
 800ab48:	0800dcbe 	.word	0x0800dcbe
 800ab4c:	0800dccf 	.word	0x0800dccf

0800ab50 <std>:
 800ab50:	2300      	movs	r3, #0
 800ab52:	b510      	push	{r4, lr}
 800ab54:	4604      	mov	r4, r0
 800ab56:	e9c0 3300 	strd	r3, r3, [r0]
 800ab5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab5e:	6083      	str	r3, [r0, #8]
 800ab60:	8181      	strh	r1, [r0, #12]
 800ab62:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab64:	81c2      	strh	r2, [r0, #14]
 800ab66:	6183      	str	r3, [r0, #24]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	2208      	movs	r2, #8
 800ab6c:	305c      	adds	r0, #92	@ 0x5c
 800ab6e:	f000 fa2d 	bl	800afcc <memset>
 800ab72:	4b0d      	ldr	r3, [pc, #52]	@ (800aba8 <std+0x58>)
 800ab74:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab76:	4b0d      	ldr	r3, [pc, #52]	@ (800abac <std+0x5c>)
 800ab78:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab7a:	4b0d      	ldr	r3, [pc, #52]	@ (800abb0 <std+0x60>)
 800ab7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab7e:	4b0d      	ldr	r3, [pc, #52]	@ (800abb4 <std+0x64>)
 800ab80:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab82:	4b0d      	ldr	r3, [pc, #52]	@ (800abb8 <std+0x68>)
 800ab84:	6224      	str	r4, [r4, #32]
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d006      	beq.n	800ab98 <std+0x48>
 800ab8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab8e:	4294      	cmp	r4, r2
 800ab90:	d002      	beq.n	800ab98 <std+0x48>
 800ab92:	33d0      	adds	r3, #208	@ 0xd0
 800ab94:	429c      	cmp	r4, r3
 800ab96:	d105      	bne.n	800aba4 <std+0x54>
 800ab98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba0:	f000 ba90 	b.w	800b0c4 <__retarget_lock_init_recursive>
 800aba4:	bd10      	pop	{r4, pc}
 800aba6:	bf00      	nop
 800aba8:	0800ae1d 	.word	0x0800ae1d
 800abac:	0800ae3f 	.word	0x0800ae3f
 800abb0:	0800ae77 	.word	0x0800ae77
 800abb4:	0800ae9b 	.word	0x0800ae9b
 800abb8:	2000cb74 	.word	0x2000cb74

0800abbc <stdio_exit_handler>:
 800abbc:	4a02      	ldr	r2, [pc, #8]	@ (800abc8 <stdio_exit_handler+0xc>)
 800abbe:	4903      	ldr	r1, [pc, #12]	@ (800abcc <stdio_exit_handler+0x10>)
 800abc0:	4803      	ldr	r0, [pc, #12]	@ (800abd0 <stdio_exit_handler+0x14>)
 800abc2:	f000 b869 	b.w	800ac98 <_fwalk_sglue>
 800abc6:	bf00      	nop
 800abc8:	20000030 	.word	0x20000030
 800abcc:	0800cca9 	.word	0x0800cca9
 800abd0:	20000040 	.word	0x20000040

0800abd4 <cleanup_stdio>:
 800abd4:	6841      	ldr	r1, [r0, #4]
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <cleanup_stdio+0x34>)
 800abd8:	4299      	cmp	r1, r3
 800abda:	b510      	push	{r4, lr}
 800abdc:	4604      	mov	r4, r0
 800abde:	d001      	beq.n	800abe4 <cleanup_stdio+0x10>
 800abe0:	f002 f862 	bl	800cca8 <_fflush_r>
 800abe4:	68a1      	ldr	r1, [r4, #8]
 800abe6:	4b09      	ldr	r3, [pc, #36]	@ (800ac0c <cleanup_stdio+0x38>)
 800abe8:	4299      	cmp	r1, r3
 800abea:	d002      	beq.n	800abf2 <cleanup_stdio+0x1e>
 800abec:	4620      	mov	r0, r4
 800abee:	f002 f85b 	bl	800cca8 <_fflush_r>
 800abf2:	68e1      	ldr	r1, [r4, #12]
 800abf4:	4b06      	ldr	r3, [pc, #24]	@ (800ac10 <cleanup_stdio+0x3c>)
 800abf6:	4299      	cmp	r1, r3
 800abf8:	d004      	beq.n	800ac04 <cleanup_stdio+0x30>
 800abfa:	4620      	mov	r0, r4
 800abfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac00:	f002 b852 	b.w	800cca8 <_fflush_r>
 800ac04:	bd10      	pop	{r4, pc}
 800ac06:	bf00      	nop
 800ac08:	2000cb74 	.word	0x2000cb74
 800ac0c:	2000cbdc 	.word	0x2000cbdc
 800ac10:	2000cc44 	.word	0x2000cc44

0800ac14 <global_stdio_init.part.0>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	4b0b      	ldr	r3, [pc, #44]	@ (800ac44 <global_stdio_init.part.0+0x30>)
 800ac18:	4c0b      	ldr	r4, [pc, #44]	@ (800ac48 <global_stdio_init.part.0+0x34>)
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac4c <global_stdio_init.part.0+0x38>)
 800ac1c:	601a      	str	r2, [r3, #0]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	2200      	movs	r2, #0
 800ac22:	2104      	movs	r1, #4
 800ac24:	f7ff ff94 	bl	800ab50 <std>
 800ac28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	2109      	movs	r1, #9
 800ac30:	f7ff ff8e 	bl	800ab50 <std>
 800ac34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac38:	2202      	movs	r2, #2
 800ac3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac3e:	2112      	movs	r1, #18
 800ac40:	f7ff bf86 	b.w	800ab50 <std>
 800ac44:	2000ccac 	.word	0x2000ccac
 800ac48:	2000cb74 	.word	0x2000cb74
 800ac4c:	0800abbd 	.word	0x0800abbd

0800ac50 <__sfp_lock_acquire>:
 800ac50:	4801      	ldr	r0, [pc, #4]	@ (800ac58 <__sfp_lock_acquire+0x8>)
 800ac52:	f000 ba38 	b.w	800b0c6 <__retarget_lock_acquire_recursive>
 800ac56:	bf00      	nop
 800ac58:	2000ccb5 	.word	0x2000ccb5

0800ac5c <__sfp_lock_release>:
 800ac5c:	4801      	ldr	r0, [pc, #4]	@ (800ac64 <__sfp_lock_release+0x8>)
 800ac5e:	f000 ba33 	b.w	800b0c8 <__retarget_lock_release_recursive>
 800ac62:	bf00      	nop
 800ac64:	2000ccb5 	.word	0x2000ccb5

0800ac68 <__sinit>:
 800ac68:	b510      	push	{r4, lr}
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	f7ff fff0 	bl	800ac50 <__sfp_lock_acquire>
 800ac70:	6a23      	ldr	r3, [r4, #32]
 800ac72:	b11b      	cbz	r3, 800ac7c <__sinit+0x14>
 800ac74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac78:	f7ff bff0 	b.w	800ac5c <__sfp_lock_release>
 800ac7c:	4b04      	ldr	r3, [pc, #16]	@ (800ac90 <__sinit+0x28>)
 800ac7e:	6223      	str	r3, [r4, #32]
 800ac80:	4b04      	ldr	r3, [pc, #16]	@ (800ac94 <__sinit+0x2c>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1f5      	bne.n	800ac74 <__sinit+0xc>
 800ac88:	f7ff ffc4 	bl	800ac14 <global_stdio_init.part.0>
 800ac8c:	e7f2      	b.n	800ac74 <__sinit+0xc>
 800ac8e:	bf00      	nop
 800ac90:	0800abd5 	.word	0x0800abd5
 800ac94:	2000ccac 	.word	0x2000ccac

0800ac98 <_fwalk_sglue>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	4607      	mov	r7, r0
 800ac9e:	4688      	mov	r8, r1
 800aca0:	4614      	mov	r4, r2
 800aca2:	2600      	movs	r6, #0
 800aca4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aca8:	f1b9 0901 	subs.w	r9, r9, #1
 800acac:	d505      	bpl.n	800acba <_fwalk_sglue+0x22>
 800acae:	6824      	ldr	r4, [r4, #0]
 800acb0:	2c00      	cmp	r4, #0
 800acb2:	d1f7      	bne.n	800aca4 <_fwalk_sglue+0xc>
 800acb4:	4630      	mov	r0, r6
 800acb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acba:	89ab      	ldrh	r3, [r5, #12]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d907      	bls.n	800acd0 <_fwalk_sglue+0x38>
 800acc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acc4:	3301      	adds	r3, #1
 800acc6:	d003      	beq.n	800acd0 <_fwalk_sglue+0x38>
 800acc8:	4629      	mov	r1, r5
 800acca:	4638      	mov	r0, r7
 800accc:	47c0      	blx	r8
 800acce:	4306      	orrs	r6, r0
 800acd0:	3568      	adds	r5, #104	@ 0x68
 800acd2:	e7e9      	b.n	800aca8 <_fwalk_sglue+0x10>

0800acd4 <iprintf>:
 800acd4:	b40f      	push	{r0, r1, r2, r3}
 800acd6:	b507      	push	{r0, r1, r2, lr}
 800acd8:	4906      	ldr	r1, [pc, #24]	@ (800acf4 <iprintf+0x20>)
 800acda:	ab04      	add	r3, sp, #16
 800acdc:	6808      	ldr	r0, [r1, #0]
 800acde:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace2:	6881      	ldr	r1, [r0, #8]
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	f001 fe43 	bl	800c970 <_vfiprintf_r>
 800acea:	b003      	add	sp, #12
 800acec:	f85d eb04 	ldr.w	lr, [sp], #4
 800acf0:	b004      	add	sp, #16
 800acf2:	4770      	bx	lr
 800acf4:	2000003c 	.word	0x2000003c

0800acf8 <_puts_r>:
 800acf8:	6a03      	ldr	r3, [r0, #32]
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	6884      	ldr	r4, [r0, #8]
 800acfe:	4605      	mov	r5, r0
 800ad00:	460e      	mov	r6, r1
 800ad02:	b90b      	cbnz	r3, 800ad08 <_puts_r+0x10>
 800ad04:	f7ff ffb0 	bl	800ac68 <__sinit>
 800ad08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad0a:	07db      	lsls	r3, r3, #31
 800ad0c:	d405      	bmi.n	800ad1a <_puts_r+0x22>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	0598      	lsls	r0, r3, #22
 800ad12:	d402      	bmi.n	800ad1a <_puts_r+0x22>
 800ad14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad16:	f000 f9d6 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	0719      	lsls	r1, r3, #28
 800ad1e:	d502      	bpl.n	800ad26 <_puts_r+0x2e>
 800ad20:	6923      	ldr	r3, [r4, #16]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d135      	bne.n	800ad92 <_puts_r+0x9a>
 800ad26:	4621      	mov	r1, r4
 800ad28:	4628      	mov	r0, r5
 800ad2a:	f000 f8f9 	bl	800af20 <__swsetup_r>
 800ad2e:	b380      	cbz	r0, 800ad92 <_puts_r+0x9a>
 800ad30:	f04f 35ff 	mov.w	r5, #4294967295
 800ad34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad36:	07da      	lsls	r2, r3, #31
 800ad38:	d405      	bmi.n	800ad46 <_puts_r+0x4e>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	059b      	lsls	r3, r3, #22
 800ad3e:	d402      	bmi.n	800ad46 <_puts_r+0x4e>
 800ad40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad42:	f000 f9c1 	bl	800b0c8 <__retarget_lock_release_recursive>
 800ad46:	4628      	mov	r0, r5
 800ad48:	bd70      	pop	{r4, r5, r6, pc}
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	da04      	bge.n	800ad58 <_puts_r+0x60>
 800ad4e:	69a2      	ldr	r2, [r4, #24]
 800ad50:	429a      	cmp	r2, r3
 800ad52:	dc17      	bgt.n	800ad84 <_puts_r+0x8c>
 800ad54:	290a      	cmp	r1, #10
 800ad56:	d015      	beq.n	800ad84 <_puts_r+0x8c>
 800ad58:	6823      	ldr	r3, [r4, #0]
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	6022      	str	r2, [r4, #0]
 800ad5e:	7019      	strb	r1, [r3, #0]
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ad66:	3b01      	subs	r3, #1
 800ad68:	60a3      	str	r3, [r4, #8]
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	d1ed      	bne.n	800ad4a <_puts_r+0x52>
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	da11      	bge.n	800ad96 <_puts_r+0x9e>
 800ad72:	4622      	mov	r2, r4
 800ad74:	210a      	movs	r1, #10
 800ad76:	4628      	mov	r0, r5
 800ad78:	f000 f893 	bl	800aea2 <__swbuf_r>
 800ad7c:	3001      	adds	r0, #1
 800ad7e:	d0d7      	beq.n	800ad30 <_puts_r+0x38>
 800ad80:	250a      	movs	r5, #10
 800ad82:	e7d7      	b.n	800ad34 <_puts_r+0x3c>
 800ad84:	4622      	mov	r2, r4
 800ad86:	4628      	mov	r0, r5
 800ad88:	f000 f88b 	bl	800aea2 <__swbuf_r>
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d1e7      	bne.n	800ad60 <_puts_r+0x68>
 800ad90:	e7ce      	b.n	800ad30 <_puts_r+0x38>
 800ad92:	3e01      	subs	r6, #1
 800ad94:	e7e4      	b.n	800ad60 <_puts_r+0x68>
 800ad96:	6823      	ldr	r3, [r4, #0]
 800ad98:	1c5a      	adds	r2, r3, #1
 800ad9a:	6022      	str	r2, [r4, #0]
 800ad9c:	220a      	movs	r2, #10
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	e7ee      	b.n	800ad80 <_puts_r+0x88>
	...

0800ada4 <puts>:
 800ada4:	4b02      	ldr	r3, [pc, #8]	@ (800adb0 <puts+0xc>)
 800ada6:	4601      	mov	r1, r0
 800ada8:	6818      	ldr	r0, [r3, #0]
 800adaa:	f7ff bfa5 	b.w	800acf8 <_puts_r>
 800adae:	bf00      	nop
 800adb0:	2000003c 	.word	0x2000003c

0800adb4 <sniprintf>:
 800adb4:	b40c      	push	{r2, r3}
 800adb6:	b530      	push	{r4, r5, lr}
 800adb8:	4b17      	ldr	r3, [pc, #92]	@ (800ae18 <sniprintf+0x64>)
 800adba:	1e0c      	subs	r4, r1, #0
 800adbc:	681d      	ldr	r5, [r3, #0]
 800adbe:	b09d      	sub	sp, #116	@ 0x74
 800adc0:	da08      	bge.n	800add4 <sniprintf+0x20>
 800adc2:	238b      	movs	r3, #139	@ 0x8b
 800adc4:	602b      	str	r3, [r5, #0]
 800adc6:	f04f 30ff 	mov.w	r0, #4294967295
 800adca:	b01d      	add	sp, #116	@ 0x74
 800adcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800add0:	b002      	add	sp, #8
 800add2:	4770      	bx	lr
 800add4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800add8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800addc:	bf14      	ite	ne
 800adde:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ade2:	4623      	moveq	r3, r4
 800ade4:	9304      	str	r3, [sp, #16]
 800ade6:	9307      	str	r3, [sp, #28]
 800ade8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adec:	9002      	str	r0, [sp, #8]
 800adee:	9006      	str	r0, [sp, #24]
 800adf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800adf6:	ab21      	add	r3, sp, #132	@ 0x84
 800adf8:	a902      	add	r1, sp, #8
 800adfa:	4628      	mov	r0, r5
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	f001 fc91 	bl	800c724 <_svfiprintf_r>
 800ae02:	1c43      	adds	r3, r0, #1
 800ae04:	bfbc      	itt	lt
 800ae06:	238b      	movlt	r3, #139	@ 0x8b
 800ae08:	602b      	strlt	r3, [r5, #0]
 800ae0a:	2c00      	cmp	r4, #0
 800ae0c:	d0dd      	beq.n	800adca <sniprintf+0x16>
 800ae0e:	9b02      	ldr	r3, [sp, #8]
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
 800ae14:	e7d9      	b.n	800adca <sniprintf+0x16>
 800ae16:	bf00      	nop
 800ae18:	2000003c 	.word	0x2000003c

0800ae1c <__sread>:
 800ae1c:	b510      	push	{r4, lr}
 800ae1e:	460c      	mov	r4, r1
 800ae20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae24:	f000 f900 	bl	800b028 <_read_r>
 800ae28:	2800      	cmp	r0, #0
 800ae2a:	bfab      	itete	ge
 800ae2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ae30:	181b      	addge	r3, r3, r0
 800ae32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae36:	bfac      	ite	ge
 800ae38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae3a:	81a3      	strhlt	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__swrite>:
 800ae3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae42:	461f      	mov	r7, r3
 800ae44:	898b      	ldrh	r3, [r1, #12]
 800ae46:	05db      	lsls	r3, r3, #23
 800ae48:	4605      	mov	r5, r0
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	4616      	mov	r6, r2
 800ae4e:	d505      	bpl.n	800ae5c <__swrite+0x1e>
 800ae50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae54:	2302      	movs	r3, #2
 800ae56:	2200      	movs	r2, #0
 800ae58:	f000 f8d4 	bl	800b004 <_lseek_r>
 800ae5c:	89a3      	ldrh	r3, [r4, #12]
 800ae5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae66:	81a3      	strh	r3, [r4, #12]
 800ae68:	4632      	mov	r2, r6
 800ae6a:	463b      	mov	r3, r7
 800ae6c:	4628      	mov	r0, r5
 800ae6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae72:	f000 b8eb 	b.w	800b04c <_write_r>

0800ae76 <__sseek>:
 800ae76:	b510      	push	{r4, lr}
 800ae78:	460c      	mov	r4, r1
 800ae7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7e:	f000 f8c1 	bl	800b004 <_lseek_r>
 800ae82:	1c43      	adds	r3, r0, #1
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	bf15      	itete	ne
 800ae88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae92:	81a3      	strheq	r3, [r4, #12]
 800ae94:	bf18      	it	ne
 800ae96:	81a3      	strhne	r3, [r4, #12]
 800ae98:	bd10      	pop	{r4, pc}

0800ae9a <__sclose>:
 800ae9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae9e:	f000 b8a1 	b.w	800afe4 <_close_r>

0800aea2 <__swbuf_r>:
 800aea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aea4:	460e      	mov	r6, r1
 800aea6:	4614      	mov	r4, r2
 800aea8:	4605      	mov	r5, r0
 800aeaa:	b118      	cbz	r0, 800aeb4 <__swbuf_r+0x12>
 800aeac:	6a03      	ldr	r3, [r0, #32]
 800aeae:	b90b      	cbnz	r3, 800aeb4 <__swbuf_r+0x12>
 800aeb0:	f7ff feda 	bl	800ac68 <__sinit>
 800aeb4:	69a3      	ldr	r3, [r4, #24]
 800aeb6:	60a3      	str	r3, [r4, #8]
 800aeb8:	89a3      	ldrh	r3, [r4, #12]
 800aeba:	071a      	lsls	r2, r3, #28
 800aebc:	d501      	bpl.n	800aec2 <__swbuf_r+0x20>
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	b943      	cbnz	r3, 800aed4 <__swbuf_r+0x32>
 800aec2:	4621      	mov	r1, r4
 800aec4:	4628      	mov	r0, r5
 800aec6:	f000 f82b 	bl	800af20 <__swsetup_r>
 800aeca:	b118      	cbz	r0, 800aed4 <__swbuf_r+0x32>
 800aecc:	f04f 37ff 	mov.w	r7, #4294967295
 800aed0:	4638      	mov	r0, r7
 800aed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	6922      	ldr	r2, [r4, #16]
 800aed8:	1a98      	subs	r0, r3, r2
 800aeda:	6963      	ldr	r3, [r4, #20]
 800aedc:	b2f6      	uxtb	r6, r6
 800aede:	4283      	cmp	r3, r0
 800aee0:	4637      	mov	r7, r6
 800aee2:	dc05      	bgt.n	800aef0 <__swbuf_r+0x4e>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4628      	mov	r0, r5
 800aee8:	f001 fede 	bl	800cca8 <_fflush_r>
 800aeec:	2800      	cmp	r0, #0
 800aeee:	d1ed      	bne.n	800aecc <__swbuf_r+0x2a>
 800aef0:	68a3      	ldr	r3, [r4, #8]
 800aef2:	3b01      	subs	r3, #1
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	6022      	str	r2, [r4, #0]
 800aefc:	701e      	strb	r6, [r3, #0]
 800aefe:	6962      	ldr	r2, [r4, #20]
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	429a      	cmp	r2, r3
 800af04:	d004      	beq.n	800af10 <__swbuf_r+0x6e>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	07db      	lsls	r3, r3, #31
 800af0a:	d5e1      	bpl.n	800aed0 <__swbuf_r+0x2e>
 800af0c:	2e0a      	cmp	r6, #10
 800af0e:	d1df      	bne.n	800aed0 <__swbuf_r+0x2e>
 800af10:	4621      	mov	r1, r4
 800af12:	4628      	mov	r0, r5
 800af14:	f001 fec8 	bl	800cca8 <_fflush_r>
 800af18:	2800      	cmp	r0, #0
 800af1a:	d0d9      	beq.n	800aed0 <__swbuf_r+0x2e>
 800af1c:	e7d6      	b.n	800aecc <__swbuf_r+0x2a>
	...

0800af20 <__swsetup_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4b29      	ldr	r3, [pc, #164]	@ (800afc8 <__swsetup_r+0xa8>)
 800af24:	4605      	mov	r5, r0
 800af26:	6818      	ldr	r0, [r3, #0]
 800af28:	460c      	mov	r4, r1
 800af2a:	b118      	cbz	r0, 800af34 <__swsetup_r+0x14>
 800af2c:	6a03      	ldr	r3, [r0, #32]
 800af2e:	b90b      	cbnz	r3, 800af34 <__swsetup_r+0x14>
 800af30:	f7ff fe9a 	bl	800ac68 <__sinit>
 800af34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af38:	0719      	lsls	r1, r3, #28
 800af3a:	d422      	bmi.n	800af82 <__swsetup_r+0x62>
 800af3c:	06da      	lsls	r2, r3, #27
 800af3e:	d407      	bmi.n	800af50 <__swsetup_r+0x30>
 800af40:	2209      	movs	r2, #9
 800af42:	602a      	str	r2, [r5, #0]
 800af44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	f04f 30ff 	mov.w	r0, #4294967295
 800af4e:	e033      	b.n	800afb8 <__swsetup_r+0x98>
 800af50:	0758      	lsls	r0, r3, #29
 800af52:	d512      	bpl.n	800af7a <__swsetup_r+0x5a>
 800af54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af56:	b141      	cbz	r1, 800af6a <__swsetup_r+0x4a>
 800af58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af5c:	4299      	cmp	r1, r3
 800af5e:	d002      	beq.n	800af66 <__swsetup_r+0x46>
 800af60:	4628      	mov	r0, r5
 800af62:	f000 ff01 	bl	800bd68 <_free_r>
 800af66:	2300      	movs	r3, #0
 800af68:	6363      	str	r3, [r4, #52]	@ 0x34
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	2300      	movs	r3, #0
 800af74:	6063      	str	r3, [r4, #4]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f043 0308 	orr.w	r3, r3, #8
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	b94b      	cbnz	r3, 800af9a <__swsetup_r+0x7a>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af90:	d003      	beq.n	800af9a <__swsetup_r+0x7a>
 800af92:	4621      	mov	r1, r4
 800af94:	4628      	mov	r0, r5
 800af96:	f001 fed5 	bl	800cd44 <__smakebuf_r>
 800af9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af9e:	f013 0201 	ands.w	r2, r3, #1
 800afa2:	d00a      	beq.n	800afba <__swsetup_r+0x9a>
 800afa4:	2200      	movs	r2, #0
 800afa6:	60a2      	str	r2, [r4, #8]
 800afa8:	6962      	ldr	r2, [r4, #20]
 800afaa:	4252      	negs	r2, r2
 800afac:	61a2      	str	r2, [r4, #24]
 800afae:	6922      	ldr	r2, [r4, #16]
 800afb0:	b942      	cbnz	r2, 800afc4 <__swsetup_r+0xa4>
 800afb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afb6:	d1c5      	bne.n	800af44 <__swsetup_r+0x24>
 800afb8:	bd38      	pop	{r3, r4, r5, pc}
 800afba:	0799      	lsls	r1, r3, #30
 800afbc:	bf58      	it	pl
 800afbe:	6962      	ldrpl	r2, [r4, #20]
 800afc0:	60a2      	str	r2, [r4, #8]
 800afc2:	e7f4      	b.n	800afae <__swsetup_r+0x8e>
 800afc4:	2000      	movs	r0, #0
 800afc6:	e7f7      	b.n	800afb8 <__swsetup_r+0x98>
 800afc8:	2000003c 	.word	0x2000003c

0800afcc <memset>:
 800afcc:	4402      	add	r2, r0
 800afce:	4603      	mov	r3, r0
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d100      	bne.n	800afd6 <memset+0xa>
 800afd4:	4770      	bx	lr
 800afd6:	f803 1b01 	strb.w	r1, [r3], #1
 800afda:	e7f9      	b.n	800afd0 <memset+0x4>

0800afdc <_localeconv_r>:
 800afdc:	4800      	ldr	r0, [pc, #0]	@ (800afe0 <_localeconv_r+0x4>)
 800afde:	4770      	bx	lr
 800afe0:	2000017c 	.word	0x2000017c

0800afe4 <_close_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d06      	ldr	r5, [pc, #24]	@ (800b000 <_close_r+0x1c>)
 800afe8:	2300      	movs	r3, #0
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7f6 fde8 	bl	8001bc4 <_close>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_close_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_close_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	2000ccb0 	.word	0x2000ccb0

0800b004 <_lseek_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	4d07      	ldr	r5, [pc, #28]	@ (800b024 <_lseek_r+0x20>)
 800b008:	4604      	mov	r4, r0
 800b00a:	4608      	mov	r0, r1
 800b00c:	4611      	mov	r1, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	602a      	str	r2, [r5, #0]
 800b012:	461a      	mov	r2, r3
 800b014:	f7f6 fdfd 	bl	8001c12 <_lseek>
 800b018:	1c43      	adds	r3, r0, #1
 800b01a:	d102      	bne.n	800b022 <_lseek_r+0x1e>
 800b01c:	682b      	ldr	r3, [r5, #0]
 800b01e:	b103      	cbz	r3, 800b022 <_lseek_r+0x1e>
 800b020:	6023      	str	r3, [r4, #0]
 800b022:	bd38      	pop	{r3, r4, r5, pc}
 800b024:	2000ccb0 	.word	0x2000ccb0

0800b028 <_read_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	4d07      	ldr	r5, [pc, #28]	@ (800b048 <_read_r+0x20>)
 800b02c:	4604      	mov	r4, r0
 800b02e:	4608      	mov	r0, r1
 800b030:	4611      	mov	r1, r2
 800b032:	2200      	movs	r2, #0
 800b034:	602a      	str	r2, [r5, #0]
 800b036:	461a      	mov	r2, r3
 800b038:	f7f6 fda7 	bl	8001b8a <_read>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d102      	bne.n	800b046 <_read_r+0x1e>
 800b040:	682b      	ldr	r3, [r5, #0]
 800b042:	b103      	cbz	r3, 800b046 <_read_r+0x1e>
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	bd38      	pop	{r3, r4, r5, pc}
 800b048:	2000ccb0 	.word	0x2000ccb0

0800b04c <_write_r>:
 800b04c:	b538      	push	{r3, r4, r5, lr}
 800b04e:	4d07      	ldr	r5, [pc, #28]	@ (800b06c <_write_r+0x20>)
 800b050:	4604      	mov	r4, r0
 800b052:	4608      	mov	r0, r1
 800b054:	4611      	mov	r1, r2
 800b056:	2200      	movs	r2, #0
 800b058:	602a      	str	r2, [r5, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f7f5 ff34 	bl	8000ec8 <_write>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d102      	bne.n	800b06a <_write_r+0x1e>
 800b064:	682b      	ldr	r3, [r5, #0]
 800b066:	b103      	cbz	r3, 800b06a <_write_r+0x1e>
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	bd38      	pop	{r3, r4, r5, pc}
 800b06c:	2000ccb0 	.word	0x2000ccb0

0800b070 <__errno>:
 800b070:	4b01      	ldr	r3, [pc, #4]	@ (800b078 <__errno+0x8>)
 800b072:	6818      	ldr	r0, [r3, #0]
 800b074:	4770      	bx	lr
 800b076:	bf00      	nop
 800b078:	2000003c 	.word	0x2000003c

0800b07c <__libc_init_array>:
 800b07c:	b570      	push	{r4, r5, r6, lr}
 800b07e:	4d0d      	ldr	r5, [pc, #52]	@ (800b0b4 <__libc_init_array+0x38>)
 800b080:	4c0d      	ldr	r4, [pc, #52]	@ (800b0b8 <__libc_init_array+0x3c>)
 800b082:	1b64      	subs	r4, r4, r5
 800b084:	10a4      	asrs	r4, r4, #2
 800b086:	2600      	movs	r6, #0
 800b088:	42a6      	cmp	r6, r4
 800b08a:	d109      	bne.n	800b0a0 <__libc_init_array+0x24>
 800b08c:	4d0b      	ldr	r5, [pc, #44]	@ (800b0bc <__libc_init_array+0x40>)
 800b08e:	4c0c      	ldr	r4, [pc, #48]	@ (800b0c0 <__libc_init_array+0x44>)
 800b090:	f001 ffd4 	bl	800d03c <_init>
 800b094:	1b64      	subs	r4, r4, r5
 800b096:	10a4      	asrs	r4, r4, #2
 800b098:	2600      	movs	r6, #0
 800b09a:	42a6      	cmp	r6, r4
 800b09c:	d105      	bne.n	800b0aa <__libc_init_array+0x2e>
 800b09e:	bd70      	pop	{r4, r5, r6, pc}
 800b0a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a4:	4798      	blx	r3
 800b0a6:	3601      	adds	r6, #1
 800b0a8:	e7ee      	b.n	800b088 <__libc_init_array+0xc>
 800b0aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0ae:	4798      	blx	r3
 800b0b0:	3601      	adds	r6, #1
 800b0b2:	e7f2      	b.n	800b09a <__libc_init_array+0x1e>
 800b0b4:	0800e028 	.word	0x0800e028
 800b0b8:	0800e028 	.word	0x0800e028
 800b0bc:	0800e028 	.word	0x0800e028
 800b0c0:	0800e02c 	.word	0x0800e02c

0800b0c4 <__retarget_lock_init_recursive>:
 800b0c4:	4770      	bx	lr

0800b0c6 <__retarget_lock_acquire_recursive>:
 800b0c6:	4770      	bx	lr

0800b0c8 <__retarget_lock_release_recursive>:
 800b0c8:	4770      	bx	lr

0800b0ca <quorem>:
 800b0ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ce:	6903      	ldr	r3, [r0, #16]
 800b0d0:	690c      	ldr	r4, [r1, #16]
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	db7e      	blt.n	800b1d6 <quorem+0x10c>
 800b0d8:	3c01      	subs	r4, #1
 800b0da:	f101 0814 	add.w	r8, r1, #20
 800b0de:	00a3      	lsls	r3, r4, #2
 800b0e0:	f100 0514 	add.w	r5, r0, #20
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0ea:	9301      	str	r3, [sp, #4]
 800b0ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b0f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b0fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800b100:	d32e      	bcc.n	800b160 <quorem+0x96>
 800b102:	f04f 0a00 	mov.w	sl, #0
 800b106:	46c4      	mov	ip, r8
 800b108:	46ae      	mov	lr, r5
 800b10a:	46d3      	mov	fp, sl
 800b10c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b110:	b298      	uxth	r0, r3
 800b112:	fb06 a000 	mla	r0, r6, r0, sl
 800b116:	0c02      	lsrs	r2, r0, #16
 800b118:	0c1b      	lsrs	r3, r3, #16
 800b11a:	fb06 2303 	mla	r3, r6, r3, r2
 800b11e:	f8de 2000 	ldr.w	r2, [lr]
 800b122:	b280      	uxth	r0, r0
 800b124:	b292      	uxth	r2, r2
 800b126:	1a12      	subs	r2, r2, r0
 800b128:	445a      	add	r2, fp
 800b12a:	f8de 0000 	ldr.w	r0, [lr]
 800b12e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b132:	b29b      	uxth	r3, r3
 800b134:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b138:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b13c:	b292      	uxth	r2, r2
 800b13e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b142:	45e1      	cmp	r9, ip
 800b144:	f84e 2b04 	str.w	r2, [lr], #4
 800b148:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b14c:	d2de      	bcs.n	800b10c <quorem+0x42>
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	58eb      	ldr	r3, [r5, r3]
 800b152:	b92b      	cbnz	r3, 800b160 <quorem+0x96>
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	3b04      	subs	r3, #4
 800b158:	429d      	cmp	r5, r3
 800b15a:	461a      	mov	r2, r3
 800b15c:	d32f      	bcc.n	800b1be <quorem+0xf4>
 800b15e:	613c      	str	r4, [r7, #16]
 800b160:	4638      	mov	r0, r7
 800b162:	f001 f97b 	bl	800c45c <__mcmp>
 800b166:	2800      	cmp	r0, #0
 800b168:	db25      	blt.n	800b1b6 <quorem+0xec>
 800b16a:	4629      	mov	r1, r5
 800b16c:	2000      	movs	r0, #0
 800b16e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b172:	f8d1 c000 	ldr.w	ip, [r1]
 800b176:	fa1f fe82 	uxth.w	lr, r2
 800b17a:	fa1f f38c 	uxth.w	r3, ip
 800b17e:	eba3 030e 	sub.w	r3, r3, lr
 800b182:	4403      	add	r3, r0
 800b184:	0c12      	lsrs	r2, r2, #16
 800b186:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b18a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b18e:	b29b      	uxth	r3, r3
 800b190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b194:	45c1      	cmp	r9, r8
 800b196:	f841 3b04 	str.w	r3, [r1], #4
 800b19a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b19e:	d2e6      	bcs.n	800b16e <quorem+0xa4>
 800b1a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1a8:	b922      	cbnz	r2, 800b1b4 <quorem+0xea>
 800b1aa:	3b04      	subs	r3, #4
 800b1ac:	429d      	cmp	r5, r3
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	d30b      	bcc.n	800b1ca <quorem+0x100>
 800b1b2:	613c      	str	r4, [r7, #16]
 800b1b4:	3601      	adds	r6, #1
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	b003      	add	sp, #12
 800b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1be:	6812      	ldr	r2, [r2, #0]
 800b1c0:	3b04      	subs	r3, #4
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	d1cb      	bne.n	800b15e <quorem+0x94>
 800b1c6:	3c01      	subs	r4, #1
 800b1c8:	e7c6      	b.n	800b158 <quorem+0x8e>
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	3b04      	subs	r3, #4
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	d1ef      	bne.n	800b1b2 <quorem+0xe8>
 800b1d2:	3c01      	subs	r4, #1
 800b1d4:	e7ea      	b.n	800b1ac <quorem+0xe2>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	e7ee      	b.n	800b1b8 <quorem+0xee>
 800b1da:	0000      	movs	r0, r0
 800b1dc:	0000      	movs	r0, r0
	...

0800b1e0 <_dtoa_r>:
 800b1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	69c7      	ldr	r7, [r0, #28]
 800b1e6:	b099      	sub	sp, #100	@ 0x64
 800b1e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b1ec:	ec55 4b10 	vmov	r4, r5, d0
 800b1f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b1f2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b1f4:	4683      	mov	fp, r0
 800b1f6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b1fa:	b97f      	cbnz	r7, 800b21c <_dtoa_r+0x3c>
 800b1fc:	2010      	movs	r0, #16
 800b1fe:	f000 fdfd 	bl	800bdfc <malloc>
 800b202:	4602      	mov	r2, r0
 800b204:	f8cb 001c 	str.w	r0, [fp, #28]
 800b208:	b920      	cbnz	r0, 800b214 <_dtoa_r+0x34>
 800b20a:	4ba7      	ldr	r3, [pc, #668]	@ (800b4a8 <_dtoa_r+0x2c8>)
 800b20c:	21ef      	movs	r1, #239	@ 0xef
 800b20e:	48a7      	ldr	r0, [pc, #668]	@ (800b4ac <_dtoa_r+0x2cc>)
 800b210:	f001 fe2e 	bl	800ce70 <__assert_func>
 800b214:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b218:	6007      	str	r7, [r0, #0]
 800b21a:	60c7      	str	r7, [r0, #12]
 800b21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b220:	6819      	ldr	r1, [r3, #0]
 800b222:	b159      	cbz	r1, 800b23c <_dtoa_r+0x5c>
 800b224:	685a      	ldr	r2, [r3, #4]
 800b226:	604a      	str	r2, [r1, #4]
 800b228:	2301      	movs	r3, #1
 800b22a:	4093      	lsls	r3, r2
 800b22c:	608b      	str	r3, [r1, #8]
 800b22e:	4658      	mov	r0, fp
 800b230:	f000 feda 	bl	800bfe8 <_Bfree>
 800b234:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b238:	2200      	movs	r2, #0
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	1e2b      	subs	r3, r5, #0
 800b23e:	bfb9      	ittee	lt
 800b240:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b244:	9303      	strlt	r3, [sp, #12]
 800b246:	2300      	movge	r3, #0
 800b248:	6033      	strge	r3, [r6, #0]
 800b24a:	9f03      	ldr	r7, [sp, #12]
 800b24c:	4b98      	ldr	r3, [pc, #608]	@ (800b4b0 <_dtoa_r+0x2d0>)
 800b24e:	bfbc      	itt	lt
 800b250:	2201      	movlt	r2, #1
 800b252:	6032      	strlt	r2, [r6, #0]
 800b254:	43bb      	bics	r3, r7
 800b256:	d112      	bne.n	800b27e <_dtoa_r+0x9e>
 800b258:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b25a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b264:	4323      	orrs	r3, r4
 800b266:	f000 854d 	beq.w	800bd04 <_dtoa_r+0xb24>
 800b26a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b26c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b4c4 <_dtoa_r+0x2e4>
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 854f 	beq.w	800bd14 <_dtoa_r+0xb34>
 800b276:	f10a 0303 	add.w	r3, sl, #3
 800b27a:	f000 bd49 	b.w	800bd10 <_dtoa_r+0xb30>
 800b27e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b282:	2200      	movs	r2, #0
 800b284:	ec51 0b17 	vmov	r0, r1, d7
 800b288:	2300      	movs	r3, #0
 800b28a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b28e:	f7f5 fbf3 	bl	8000a78 <__aeabi_dcmpeq>
 800b292:	4680      	mov	r8, r0
 800b294:	b158      	cbz	r0, 800b2ae <_dtoa_r+0xce>
 800b296:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b298:	2301      	movs	r3, #1
 800b29a:	6013      	str	r3, [r2, #0]
 800b29c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b29e:	b113      	cbz	r3, 800b2a6 <_dtoa_r+0xc6>
 800b2a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b2a2:	4b84      	ldr	r3, [pc, #528]	@ (800b4b4 <_dtoa_r+0x2d4>)
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b4c8 <_dtoa_r+0x2e8>
 800b2aa:	f000 bd33 	b.w	800bd14 <_dtoa_r+0xb34>
 800b2ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b2b2:	aa16      	add	r2, sp, #88	@ 0x58
 800b2b4:	a917      	add	r1, sp, #92	@ 0x5c
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	f001 f980 	bl	800c5bc <__d2b>
 800b2bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2c0:	4681      	mov	r9, r0
 800b2c2:	2e00      	cmp	r6, #0
 800b2c4:	d077      	beq.n	800b3b6 <_dtoa_r+0x1d6>
 800b2c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b2cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	4b74      	ldr	r3, [pc, #464]	@ (800b4b8 <_dtoa_r+0x2d8>)
 800b2e6:	f7f4 ffa7 	bl	8000238 <__aeabi_dsub>
 800b2ea:	a369      	add	r3, pc, #420	@ (adr r3, 800b490 <_dtoa_r+0x2b0>)
 800b2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f0:	f7f5 f95a 	bl	80005a8 <__aeabi_dmul>
 800b2f4:	a368      	add	r3, pc, #416	@ (adr r3, 800b498 <_dtoa_r+0x2b8>)
 800b2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fa:	f7f4 ff9f 	bl	800023c <__adddf3>
 800b2fe:	4604      	mov	r4, r0
 800b300:	4630      	mov	r0, r6
 800b302:	460d      	mov	r5, r1
 800b304:	f7f5 f8e6 	bl	80004d4 <__aeabi_i2d>
 800b308:	a365      	add	r3, pc, #404	@ (adr r3, 800b4a0 <_dtoa_r+0x2c0>)
 800b30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30e:	f7f5 f94b 	bl	80005a8 <__aeabi_dmul>
 800b312:	4602      	mov	r2, r0
 800b314:	460b      	mov	r3, r1
 800b316:	4620      	mov	r0, r4
 800b318:	4629      	mov	r1, r5
 800b31a:	f7f4 ff8f 	bl	800023c <__adddf3>
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f7f5 fbf1 	bl	8000b08 <__aeabi_d2iz>
 800b326:	2200      	movs	r2, #0
 800b328:	4607      	mov	r7, r0
 800b32a:	2300      	movs	r3, #0
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f5 fbac 	bl	8000a8c <__aeabi_dcmplt>
 800b334:	b140      	cbz	r0, 800b348 <_dtoa_r+0x168>
 800b336:	4638      	mov	r0, r7
 800b338:	f7f5 f8cc 	bl	80004d4 <__aeabi_i2d>
 800b33c:	4622      	mov	r2, r4
 800b33e:	462b      	mov	r3, r5
 800b340:	f7f5 fb9a 	bl	8000a78 <__aeabi_dcmpeq>
 800b344:	b900      	cbnz	r0, 800b348 <_dtoa_r+0x168>
 800b346:	3f01      	subs	r7, #1
 800b348:	2f16      	cmp	r7, #22
 800b34a:	d851      	bhi.n	800b3f0 <_dtoa_r+0x210>
 800b34c:	4b5b      	ldr	r3, [pc, #364]	@ (800b4bc <_dtoa_r+0x2dc>)
 800b34e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b35a:	f7f5 fb97 	bl	8000a8c <__aeabi_dcmplt>
 800b35e:	2800      	cmp	r0, #0
 800b360:	d048      	beq.n	800b3f4 <_dtoa_r+0x214>
 800b362:	3f01      	subs	r7, #1
 800b364:	2300      	movs	r3, #0
 800b366:	9312      	str	r3, [sp, #72]	@ 0x48
 800b368:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b36a:	1b9b      	subs	r3, r3, r6
 800b36c:	1e5a      	subs	r2, r3, #1
 800b36e:	bf44      	itt	mi
 800b370:	f1c3 0801 	rsbmi	r8, r3, #1
 800b374:	2300      	movmi	r3, #0
 800b376:	9208      	str	r2, [sp, #32]
 800b378:	bf54      	ite	pl
 800b37a:	f04f 0800 	movpl.w	r8, #0
 800b37e:	9308      	strmi	r3, [sp, #32]
 800b380:	2f00      	cmp	r7, #0
 800b382:	db39      	blt.n	800b3f8 <_dtoa_r+0x218>
 800b384:	9b08      	ldr	r3, [sp, #32]
 800b386:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b388:	443b      	add	r3, r7
 800b38a:	9308      	str	r3, [sp, #32]
 800b38c:	2300      	movs	r3, #0
 800b38e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b390:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b392:	2b09      	cmp	r3, #9
 800b394:	d864      	bhi.n	800b460 <_dtoa_r+0x280>
 800b396:	2b05      	cmp	r3, #5
 800b398:	bfc4      	itt	gt
 800b39a:	3b04      	subgt	r3, #4
 800b39c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	f1a3 0302 	sub.w	r3, r3, #2
 800b3a4:	bfcc      	ite	gt
 800b3a6:	2400      	movgt	r4, #0
 800b3a8:	2401      	movle	r4, #1
 800b3aa:	2b03      	cmp	r3, #3
 800b3ac:	d863      	bhi.n	800b476 <_dtoa_r+0x296>
 800b3ae:	e8df f003 	tbb	[pc, r3]
 800b3b2:	372a      	.short	0x372a
 800b3b4:	5535      	.short	0x5535
 800b3b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b3ba:	441e      	add	r6, r3
 800b3bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3c0:	2b20      	cmp	r3, #32
 800b3c2:	bfc1      	itttt	gt
 800b3c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3c8:	409f      	lslgt	r7, r3
 800b3ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3d2:	bfd6      	itet	le
 800b3d4:	f1c3 0320 	rsble	r3, r3, #32
 800b3d8:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3dc:	fa04 f003 	lslle.w	r0, r4, r3
 800b3e0:	f7f5 f868 	bl	80004b4 <__aeabi_ui2d>
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b3ea:	3e01      	subs	r6, #1
 800b3ec:	9214      	str	r2, [sp, #80]	@ 0x50
 800b3ee:	e777      	b.n	800b2e0 <_dtoa_r+0x100>
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	e7b8      	b.n	800b366 <_dtoa_r+0x186>
 800b3f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800b3f6:	e7b7      	b.n	800b368 <_dtoa_r+0x188>
 800b3f8:	427b      	negs	r3, r7
 800b3fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	eba8 0807 	sub.w	r8, r8, r7
 800b402:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b404:	e7c4      	b.n	800b390 <_dtoa_r+0x1b0>
 800b406:	2300      	movs	r3, #0
 800b408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b40a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dc35      	bgt.n	800b47c <_dtoa_r+0x29c>
 800b410:	2301      	movs	r3, #1
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	9307      	str	r3, [sp, #28]
 800b416:	461a      	mov	r2, r3
 800b418:	920e      	str	r2, [sp, #56]	@ 0x38
 800b41a:	e00b      	b.n	800b434 <_dtoa_r+0x254>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e7f3      	b.n	800b408 <_dtoa_r+0x228>
 800b420:	2300      	movs	r3, #0
 800b422:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b424:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b426:	18fb      	adds	r3, r7, r3
 800b428:	9300      	str	r3, [sp, #0]
 800b42a:	3301      	adds	r3, #1
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	bfb8      	it	lt
 800b432:	2301      	movlt	r3, #1
 800b434:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b438:	2100      	movs	r1, #0
 800b43a:	2204      	movs	r2, #4
 800b43c:	f102 0514 	add.w	r5, r2, #20
 800b440:	429d      	cmp	r5, r3
 800b442:	d91f      	bls.n	800b484 <_dtoa_r+0x2a4>
 800b444:	6041      	str	r1, [r0, #4]
 800b446:	4658      	mov	r0, fp
 800b448:	f000 fd8e 	bl	800bf68 <_Balloc>
 800b44c:	4682      	mov	sl, r0
 800b44e:	2800      	cmp	r0, #0
 800b450:	d13c      	bne.n	800b4cc <_dtoa_r+0x2ec>
 800b452:	4b1b      	ldr	r3, [pc, #108]	@ (800b4c0 <_dtoa_r+0x2e0>)
 800b454:	4602      	mov	r2, r0
 800b456:	f240 11af 	movw	r1, #431	@ 0x1af
 800b45a:	e6d8      	b.n	800b20e <_dtoa_r+0x2e>
 800b45c:	2301      	movs	r3, #1
 800b45e:	e7e0      	b.n	800b422 <_dtoa_r+0x242>
 800b460:	2401      	movs	r4, #1
 800b462:	2300      	movs	r3, #0
 800b464:	9309      	str	r3, [sp, #36]	@ 0x24
 800b466:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b468:	f04f 33ff 	mov.w	r3, #4294967295
 800b46c:	9300      	str	r3, [sp, #0]
 800b46e:	9307      	str	r3, [sp, #28]
 800b470:	2200      	movs	r2, #0
 800b472:	2312      	movs	r3, #18
 800b474:	e7d0      	b.n	800b418 <_dtoa_r+0x238>
 800b476:	2301      	movs	r3, #1
 800b478:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b47a:	e7f5      	b.n	800b468 <_dtoa_r+0x288>
 800b47c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	9307      	str	r3, [sp, #28]
 800b482:	e7d7      	b.n	800b434 <_dtoa_r+0x254>
 800b484:	3101      	adds	r1, #1
 800b486:	0052      	lsls	r2, r2, #1
 800b488:	e7d8      	b.n	800b43c <_dtoa_r+0x25c>
 800b48a:	bf00      	nop
 800b48c:	f3af 8000 	nop.w
 800b490:	636f4361 	.word	0x636f4361
 800b494:	3fd287a7 	.word	0x3fd287a7
 800b498:	8b60c8b3 	.word	0x8b60c8b3
 800b49c:	3fc68a28 	.word	0x3fc68a28
 800b4a0:	509f79fb 	.word	0x509f79fb
 800b4a4:	3fd34413 	.word	0x3fd34413
 800b4a8:	0800dced 	.word	0x0800dced
 800b4ac:	0800dd04 	.word	0x0800dd04
 800b4b0:	7ff00000 	.word	0x7ff00000
 800b4b4:	0800dcbd 	.word	0x0800dcbd
 800b4b8:	3ff80000 	.word	0x3ff80000
 800b4bc:	0800de00 	.word	0x0800de00
 800b4c0:	0800dd5c 	.word	0x0800dd5c
 800b4c4:	0800dce9 	.word	0x0800dce9
 800b4c8:	0800dcbc 	.word	0x0800dcbc
 800b4cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b4d0:	6018      	str	r0, [r3, #0]
 800b4d2:	9b07      	ldr	r3, [sp, #28]
 800b4d4:	2b0e      	cmp	r3, #14
 800b4d6:	f200 80a4 	bhi.w	800b622 <_dtoa_r+0x442>
 800b4da:	2c00      	cmp	r4, #0
 800b4dc:	f000 80a1 	beq.w	800b622 <_dtoa_r+0x442>
 800b4e0:	2f00      	cmp	r7, #0
 800b4e2:	dd33      	ble.n	800b54c <_dtoa_r+0x36c>
 800b4e4:	4bad      	ldr	r3, [pc, #692]	@ (800b79c <_dtoa_r+0x5bc>)
 800b4e6:	f007 020f 	and.w	r2, r7, #15
 800b4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ee:	ed93 7b00 	vldr	d7, [r3]
 800b4f2:	05f8      	lsls	r0, r7, #23
 800b4f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b4f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b4fc:	d516      	bpl.n	800b52c <_dtoa_r+0x34c>
 800b4fe:	4ba8      	ldr	r3, [pc, #672]	@ (800b7a0 <_dtoa_r+0x5c0>)
 800b500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b504:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b508:	f7f5 f978 	bl	80007fc <__aeabi_ddiv>
 800b50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b510:	f004 040f 	and.w	r4, r4, #15
 800b514:	2603      	movs	r6, #3
 800b516:	4da2      	ldr	r5, [pc, #648]	@ (800b7a0 <_dtoa_r+0x5c0>)
 800b518:	b954      	cbnz	r4, 800b530 <_dtoa_r+0x350>
 800b51a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b522:	f7f5 f96b 	bl	80007fc <__aeabi_ddiv>
 800b526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b52a:	e028      	b.n	800b57e <_dtoa_r+0x39e>
 800b52c:	2602      	movs	r6, #2
 800b52e:	e7f2      	b.n	800b516 <_dtoa_r+0x336>
 800b530:	07e1      	lsls	r1, r4, #31
 800b532:	d508      	bpl.n	800b546 <_dtoa_r+0x366>
 800b534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b538:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b53c:	f7f5 f834 	bl	80005a8 <__aeabi_dmul>
 800b540:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b544:	3601      	adds	r6, #1
 800b546:	1064      	asrs	r4, r4, #1
 800b548:	3508      	adds	r5, #8
 800b54a:	e7e5      	b.n	800b518 <_dtoa_r+0x338>
 800b54c:	f000 80d2 	beq.w	800b6f4 <_dtoa_r+0x514>
 800b550:	427c      	negs	r4, r7
 800b552:	4b92      	ldr	r3, [pc, #584]	@ (800b79c <_dtoa_r+0x5bc>)
 800b554:	4d92      	ldr	r5, [pc, #584]	@ (800b7a0 <_dtoa_r+0x5c0>)
 800b556:	f004 020f 	and.w	r2, r4, #15
 800b55a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b566:	f7f5 f81f 	bl	80005a8 <__aeabi_dmul>
 800b56a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b56e:	1124      	asrs	r4, r4, #4
 800b570:	2300      	movs	r3, #0
 800b572:	2602      	movs	r6, #2
 800b574:	2c00      	cmp	r4, #0
 800b576:	f040 80b2 	bne.w	800b6de <_dtoa_r+0x4fe>
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1d3      	bne.n	800b526 <_dtoa_r+0x346>
 800b57e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b580:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80b7 	beq.w	800b6f8 <_dtoa_r+0x518>
 800b58a:	4b86      	ldr	r3, [pc, #536]	@ (800b7a4 <_dtoa_r+0x5c4>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	4620      	mov	r0, r4
 800b590:	4629      	mov	r1, r5
 800b592:	f7f5 fa7b 	bl	8000a8c <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	f000 80ae 	beq.w	800b6f8 <_dtoa_r+0x518>
 800b59c:	9b07      	ldr	r3, [sp, #28]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 80aa 	beq.w	800b6f8 <_dtoa_r+0x518>
 800b5a4:	9b00      	ldr	r3, [sp, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	dd37      	ble.n	800b61a <_dtoa_r+0x43a>
 800b5aa:	1e7b      	subs	r3, r7, #1
 800b5ac:	9304      	str	r3, [sp, #16]
 800b5ae:	4620      	mov	r0, r4
 800b5b0:	4b7d      	ldr	r3, [pc, #500]	@ (800b7a8 <_dtoa_r+0x5c8>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	f7f4 fff7 	bl	80005a8 <__aeabi_dmul>
 800b5ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b5be:	9c00      	ldr	r4, [sp, #0]
 800b5c0:	3601      	adds	r6, #1
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f7f4 ff86 	bl	80004d4 <__aeabi_i2d>
 800b5c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5cc:	f7f4 ffec 	bl	80005a8 <__aeabi_dmul>
 800b5d0:	4b76      	ldr	r3, [pc, #472]	@ (800b7ac <_dtoa_r+0x5cc>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f7f4 fe32 	bl	800023c <__adddf3>
 800b5d8:	4605      	mov	r5, r0
 800b5da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b5de:	2c00      	cmp	r4, #0
 800b5e0:	f040 808d 	bne.w	800b6fe <_dtoa_r+0x51e>
 800b5e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5e8:	4b71      	ldr	r3, [pc, #452]	@ (800b7b0 <_dtoa_r+0x5d0>)
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f7f4 fe24 	bl	8000238 <__aeabi_dsub>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4633      	mov	r3, r6
 800b5fc:	f7f5 fa64 	bl	8000ac8 <__aeabi_dcmpgt>
 800b600:	2800      	cmp	r0, #0
 800b602:	f040 828b 	bne.w	800bb1c <_dtoa_r+0x93c>
 800b606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b60a:	462a      	mov	r2, r5
 800b60c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b610:	f7f5 fa3c 	bl	8000a8c <__aeabi_dcmplt>
 800b614:	2800      	cmp	r0, #0
 800b616:	f040 8128 	bne.w	800b86a <_dtoa_r+0x68a>
 800b61a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b61e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b624:	2b00      	cmp	r3, #0
 800b626:	f2c0 815a 	blt.w	800b8de <_dtoa_r+0x6fe>
 800b62a:	2f0e      	cmp	r7, #14
 800b62c:	f300 8157 	bgt.w	800b8de <_dtoa_r+0x6fe>
 800b630:	4b5a      	ldr	r3, [pc, #360]	@ (800b79c <_dtoa_r+0x5bc>)
 800b632:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b636:	ed93 7b00 	vldr	d7, [r3]
 800b63a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	ed8d 7b00 	vstr	d7, [sp]
 800b642:	da03      	bge.n	800b64c <_dtoa_r+0x46c>
 800b644:	9b07      	ldr	r3, [sp, #28]
 800b646:	2b00      	cmp	r3, #0
 800b648:	f340 8101 	ble.w	800b84e <_dtoa_r+0x66e>
 800b64c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b650:	4656      	mov	r6, sl
 800b652:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b656:	4620      	mov	r0, r4
 800b658:	4629      	mov	r1, r5
 800b65a:	f7f5 f8cf 	bl	80007fc <__aeabi_ddiv>
 800b65e:	f7f5 fa53 	bl	8000b08 <__aeabi_d2iz>
 800b662:	4680      	mov	r8, r0
 800b664:	f7f4 ff36 	bl	80004d4 <__aeabi_i2d>
 800b668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b66c:	f7f4 ff9c 	bl	80005a8 <__aeabi_dmul>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4620      	mov	r0, r4
 800b676:	4629      	mov	r1, r5
 800b678:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b67c:	f7f4 fddc 	bl	8000238 <__aeabi_dsub>
 800b680:	f806 4b01 	strb.w	r4, [r6], #1
 800b684:	9d07      	ldr	r5, [sp, #28]
 800b686:	eba6 040a 	sub.w	r4, r6, sl
 800b68a:	42a5      	cmp	r5, r4
 800b68c:	4602      	mov	r2, r0
 800b68e:	460b      	mov	r3, r1
 800b690:	f040 8117 	bne.w	800b8c2 <_dtoa_r+0x6e2>
 800b694:	f7f4 fdd2 	bl	800023c <__adddf3>
 800b698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b69c:	4604      	mov	r4, r0
 800b69e:	460d      	mov	r5, r1
 800b6a0:	f7f5 fa12 	bl	8000ac8 <__aeabi_dcmpgt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	f040 80f9 	bne.w	800b89c <_dtoa_r+0x6bc>
 800b6aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	f7f5 f9e1 	bl	8000a78 <__aeabi_dcmpeq>
 800b6b6:	b118      	cbz	r0, 800b6c0 <_dtoa_r+0x4e0>
 800b6b8:	f018 0f01 	tst.w	r8, #1
 800b6bc:	f040 80ee 	bne.w	800b89c <_dtoa_r+0x6bc>
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4658      	mov	r0, fp
 800b6c4:	f000 fc90 	bl	800bfe8 <_Bfree>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	7033      	strb	r3, [r6, #0]
 800b6cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b6ce:	3701      	adds	r7, #1
 800b6d0:	601f      	str	r7, [r3, #0]
 800b6d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	f000 831d 	beq.w	800bd14 <_dtoa_r+0xb34>
 800b6da:	601e      	str	r6, [r3, #0]
 800b6dc:	e31a      	b.n	800bd14 <_dtoa_r+0xb34>
 800b6de:	07e2      	lsls	r2, r4, #31
 800b6e0:	d505      	bpl.n	800b6ee <_dtoa_r+0x50e>
 800b6e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6e6:	f7f4 ff5f 	bl	80005a8 <__aeabi_dmul>
 800b6ea:	3601      	adds	r6, #1
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	1064      	asrs	r4, r4, #1
 800b6f0:	3508      	adds	r5, #8
 800b6f2:	e73f      	b.n	800b574 <_dtoa_r+0x394>
 800b6f4:	2602      	movs	r6, #2
 800b6f6:	e742      	b.n	800b57e <_dtoa_r+0x39e>
 800b6f8:	9c07      	ldr	r4, [sp, #28]
 800b6fa:	9704      	str	r7, [sp, #16]
 800b6fc:	e761      	b.n	800b5c2 <_dtoa_r+0x3e2>
 800b6fe:	4b27      	ldr	r3, [pc, #156]	@ (800b79c <_dtoa_r+0x5bc>)
 800b700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b702:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b706:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b70a:	4454      	add	r4, sl
 800b70c:	2900      	cmp	r1, #0
 800b70e:	d053      	beq.n	800b7b8 <_dtoa_r+0x5d8>
 800b710:	4928      	ldr	r1, [pc, #160]	@ (800b7b4 <_dtoa_r+0x5d4>)
 800b712:	2000      	movs	r0, #0
 800b714:	f7f5 f872 	bl	80007fc <__aeabi_ddiv>
 800b718:	4633      	mov	r3, r6
 800b71a:	462a      	mov	r2, r5
 800b71c:	f7f4 fd8c 	bl	8000238 <__aeabi_dsub>
 800b720:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b724:	4656      	mov	r6, sl
 800b726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b72a:	f7f5 f9ed 	bl	8000b08 <__aeabi_d2iz>
 800b72e:	4605      	mov	r5, r0
 800b730:	f7f4 fed0 	bl	80004d4 <__aeabi_i2d>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b73c:	f7f4 fd7c 	bl	8000238 <__aeabi_dsub>
 800b740:	3530      	adds	r5, #48	@ 0x30
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b74a:	f806 5b01 	strb.w	r5, [r6], #1
 800b74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b752:	f7f5 f99b 	bl	8000a8c <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	d171      	bne.n	800b83e <_dtoa_r+0x65e>
 800b75a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b75e:	4911      	ldr	r1, [pc, #68]	@ (800b7a4 <_dtoa_r+0x5c4>)
 800b760:	2000      	movs	r0, #0
 800b762:	f7f4 fd69 	bl	8000238 <__aeabi_dsub>
 800b766:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b76a:	f7f5 f98f 	bl	8000a8c <__aeabi_dcmplt>
 800b76e:	2800      	cmp	r0, #0
 800b770:	f040 8095 	bne.w	800b89e <_dtoa_r+0x6be>
 800b774:	42a6      	cmp	r6, r4
 800b776:	f43f af50 	beq.w	800b61a <_dtoa_r+0x43a>
 800b77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b77e:	4b0a      	ldr	r3, [pc, #40]	@ (800b7a8 <_dtoa_r+0x5c8>)
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 ff11 	bl	80005a8 <__aeabi_dmul>
 800b786:	4b08      	ldr	r3, [pc, #32]	@ (800b7a8 <_dtoa_r+0x5c8>)
 800b788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b78c:	2200      	movs	r2, #0
 800b78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b792:	f7f4 ff09 	bl	80005a8 <__aeabi_dmul>
 800b796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b79a:	e7c4      	b.n	800b726 <_dtoa_r+0x546>
 800b79c:	0800de00 	.word	0x0800de00
 800b7a0:	0800ddd8 	.word	0x0800ddd8
 800b7a4:	3ff00000 	.word	0x3ff00000
 800b7a8:	40240000 	.word	0x40240000
 800b7ac:	401c0000 	.word	0x401c0000
 800b7b0:	40140000 	.word	0x40140000
 800b7b4:	3fe00000 	.word	0x3fe00000
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f7f4 fef4 	bl	80005a8 <__aeabi_dmul>
 800b7c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b7c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b7c6:	4656      	mov	r6, sl
 800b7c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7cc:	f7f5 f99c 	bl	8000b08 <__aeabi_d2iz>
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	f7f4 fe7f 	bl	80004d4 <__aeabi_i2d>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	460b      	mov	r3, r1
 800b7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7de:	f7f4 fd2b 	bl	8000238 <__aeabi_dsub>
 800b7e2:	3530      	adds	r5, #48	@ 0x30
 800b7e4:	f806 5b01 	strb.w	r5, [r6], #1
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	42a6      	cmp	r6, r4
 800b7ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b7f2:	f04f 0200 	mov.w	r2, #0
 800b7f6:	d124      	bne.n	800b842 <_dtoa_r+0x662>
 800b7f8:	4bac      	ldr	r3, [pc, #688]	@ (800baac <_dtoa_r+0x8cc>)
 800b7fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b7fe:	f7f4 fd1d 	bl	800023c <__adddf3>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b80a:	f7f5 f95d 	bl	8000ac8 <__aeabi_dcmpgt>
 800b80e:	2800      	cmp	r0, #0
 800b810:	d145      	bne.n	800b89e <_dtoa_r+0x6be>
 800b812:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b816:	49a5      	ldr	r1, [pc, #660]	@ (800baac <_dtoa_r+0x8cc>)
 800b818:	2000      	movs	r0, #0
 800b81a:	f7f4 fd0d 	bl	8000238 <__aeabi_dsub>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b826:	f7f5 f931 	bl	8000a8c <__aeabi_dcmplt>
 800b82a:	2800      	cmp	r0, #0
 800b82c:	f43f aef5 	beq.w	800b61a <_dtoa_r+0x43a>
 800b830:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b832:	1e73      	subs	r3, r6, #1
 800b834:	9315      	str	r3, [sp, #84]	@ 0x54
 800b836:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b83a:	2b30      	cmp	r3, #48	@ 0x30
 800b83c:	d0f8      	beq.n	800b830 <_dtoa_r+0x650>
 800b83e:	9f04      	ldr	r7, [sp, #16]
 800b840:	e73e      	b.n	800b6c0 <_dtoa_r+0x4e0>
 800b842:	4b9b      	ldr	r3, [pc, #620]	@ (800bab0 <_dtoa_r+0x8d0>)
 800b844:	f7f4 feb0 	bl	80005a8 <__aeabi_dmul>
 800b848:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b84c:	e7bc      	b.n	800b7c8 <_dtoa_r+0x5e8>
 800b84e:	d10c      	bne.n	800b86a <_dtoa_r+0x68a>
 800b850:	4b98      	ldr	r3, [pc, #608]	@ (800bab4 <_dtoa_r+0x8d4>)
 800b852:	2200      	movs	r2, #0
 800b854:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b858:	f7f4 fea6 	bl	80005a8 <__aeabi_dmul>
 800b85c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b860:	f7f5 f928 	bl	8000ab4 <__aeabi_dcmpge>
 800b864:	2800      	cmp	r0, #0
 800b866:	f000 8157 	beq.w	800bb18 <_dtoa_r+0x938>
 800b86a:	2400      	movs	r4, #0
 800b86c:	4625      	mov	r5, r4
 800b86e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b870:	43db      	mvns	r3, r3
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	4656      	mov	r6, sl
 800b876:	2700      	movs	r7, #0
 800b878:	4621      	mov	r1, r4
 800b87a:	4658      	mov	r0, fp
 800b87c:	f000 fbb4 	bl	800bfe8 <_Bfree>
 800b880:	2d00      	cmp	r5, #0
 800b882:	d0dc      	beq.n	800b83e <_dtoa_r+0x65e>
 800b884:	b12f      	cbz	r7, 800b892 <_dtoa_r+0x6b2>
 800b886:	42af      	cmp	r7, r5
 800b888:	d003      	beq.n	800b892 <_dtoa_r+0x6b2>
 800b88a:	4639      	mov	r1, r7
 800b88c:	4658      	mov	r0, fp
 800b88e:	f000 fbab 	bl	800bfe8 <_Bfree>
 800b892:	4629      	mov	r1, r5
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fba7 	bl	800bfe8 <_Bfree>
 800b89a:	e7d0      	b.n	800b83e <_dtoa_r+0x65e>
 800b89c:	9704      	str	r7, [sp, #16]
 800b89e:	4633      	mov	r3, r6
 800b8a0:	461e      	mov	r6, r3
 800b8a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8a6:	2a39      	cmp	r2, #57	@ 0x39
 800b8a8:	d107      	bne.n	800b8ba <_dtoa_r+0x6da>
 800b8aa:	459a      	cmp	sl, r3
 800b8ac:	d1f8      	bne.n	800b8a0 <_dtoa_r+0x6c0>
 800b8ae:	9a04      	ldr	r2, [sp, #16]
 800b8b0:	3201      	adds	r2, #1
 800b8b2:	9204      	str	r2, [sp, #16]
 800b8b4:	2230      	movs	r2, #48	@ 0x30
 800b8b6:	f88a 2000 	strb.w	r2, [sl]
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	3201      	adds	r2, #1
 800b8be:	701a      	strb	r2, [r3, #0]
 800b8c0:	e7bd      	b.n	800b83e <_dtoa_r+0x65e>
 800b8c2:	4b7b      	ldr	r3, [pc, #492]	@ (800bab0 <_dtoa_r+0x8d0>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f7f4 fe6f 	bl	80005a8 <__aeabi_dmul>
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	f7f5 f8d1 	bl	8000a78 <__aeabi_dcmpeq>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f43f aebb 	beq.w	800b652 <_dtoa_r+0x472>
 800b8dc:	e6f0      	b.n	800b6c0 <_dtoa_r+0x4e0>
 800b8de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	f000 80db 	beq.w	800ba9c <_dtoa_r+0x8bc>
 800b8e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8e8:	2a01      	cmp	r2, #1
 800b8ea:	f300 80bf 	bgt.w	800ba6c <_dtoa_r+0x88c>
 800b8ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b8f0:	2a00      	cmp	r2, #0
 800b8f2:	f000 80b7 	beq.w	800ba64 <_dtoa_r+0x884>
 800b8f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b8fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b8fc:	4646      	mov	r6, r8
 800b8fe:	9a08      	ldr	r2, [sp, #32]
 800b900:	2101      	movs	r1, #1
 800b902:	441a      	add	r2, r3
 800b904:	4658      	mov	r0, fp
 800b906:	4498      	add	r8, r3
 800b908:	9208      	str	r2, [sp, #32]
 800b90a:	f000 fc21 	bl	800c150 <__i2b>
 800b90e:	4605      	mov	r5, r0
 800b910:	b15e      	cbz	r6, 800b92a <_dtoa_r+0x74a>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	2b00      	cmp	r3, #0
 800b916:	dd08      	ble.n	800b92a <_dtoa_r+0x74a>
 800b918:	42b3      	cmp	r3, r6
 800b91a:	9a08      	ldr	r2, [sp, #32]
 800b91c:	bfa8      	it	ge
 800b91e:	4633      	movge	r3, r6
 800b920:	eba8 0803 	sub.w	r8, r8, r3
 800b924:	1af6      	subs	r6, r6, r3
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	9308      	str	r3, [sp, #32]
 800b92a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b92c:	b1f3      	cbz	r3, 800b96c <_dtoa_r+0x78c>
 800b92e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b930:	2b00      	cmp	r3, #0
 800b932:	f000 80b7 	beq.w	800baa4 <_dtoa_r+0x8c4>
 800b936:	b18c      	cbz	r4, 800b95c <_dtoa_r+0x77c>
 800b938:	4629      	mov	r1, r5
 800b93a:	4622      	mov	r2, r4
 800b93c:	4658      	mov	r0, fp
 800b93e:	f000 fcc7 	bl	800c2d0 <__pow5mult>
 800b942:	464a      	mov	r2, r9
 800b944:	4601      	mov	r1, r0
 800b946:	4605      	mov	r5, r0
 800b948:	4658      	mov	r0, fp
 800b94a:	f000 fc17 	bl	800c17c <__multiply>
 800b94e:	4649      	mov	r1, r9
 800b950:	9004      	str	r0, [sp, #16]
 800b952:	4658      	mov	r0, fp
 800b954:	f000 fb48 	bl	800bfe8 <_Bfree>
 800b958:	9b04      	ldr	r3, [sp, #16]
 800b95a:	4699      	mov	r9, r3
 800b95c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b95e:	1b1a      	subs	r2, r3, r4
 800b960:	d004      	beq.n	800b96c <_dtoa_r+0x78c>
 800b962:	4649      	mov	r1, r9
 800b964:	4658      	mov	r0, fp
 800b966:	f000 fcb3 	bl	800c2d0 <__pow5mult>
 800b96a:	4681      	mov	r9, r0
 800b96c:	2101      	movs	r1, #1
 800b96e:	4658      	mov	r0, fp
 800b970:	f000 fbee 	bl	800c150 <__i2b>
 800b974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b976:	4604      	mov	r4, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	f000 81cf 	beq.w	800bd1c <_dtoa_r+0xb3c>
 800b97e:	461a      	mov	r2, r3
 800b980:	4601      	mov	r1, r0
 800b982:	4658      	mov	r0, fp
 800b984:	f000 fca4 	bl	800c2d0 <__pow5mult>
 800b988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	4604      	mov	r4, r0
 800b98e:	f300 8095 	bgt.w	800babc <_dtoa_r+0x8dc>
 800b992:	9b02      	ldr	r3, [sp, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f040 8087 	bne.w	800baa8 <_dtoa_r+0x8c8>
 800b99a:	9b03      	ldr	r3, [sp, #12]
 800b99c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 8089 	bne.w	800bab8 <_dtoa_r+0x8d8>
 800b9a6:	9b03      	ldr	r3, [sp, #12]
 800b9a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9ac:	0d1b      	lsrs	r3, r3, #20
 800b9ae:	051b      	lsls	r3, r3, #20
 800b9b0:	b12b      	cbz	r3, 800b9be <_dtoa_r+0x7de>
 800b9b2:	9b08      	ldr	r3, [sp, #32]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	9308      	str	r3, [sp, #32]
 800b9b8:	f108 0801 	add.w	r8, r8, #1
 800b9bc:	2301      	movs	r3, #1
 800b9be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 81b0 	beq.w	800bd28 <_dtoa_r+0xb48>
 800b9c8:	6923      	ldr	r3, [r4, #16]
 800b9ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9ce:	6918      	ldr	r0, [r3, #16]
 800b9d0:	f000 fb72 	bl	800c0b8 <__hi0bits>
 800b9d4:	f1c0 0020 	rsb	r0, r0, #32
 800b9d8:	9b08      	ldr	r3, [sp, #32]
 800b9da:	4418      	add	r0, r3
 800b9dc:	f010 001f 	ands.w	r0, r0, #31
 800b9e0:	d077      	beq.n	800bad2 <_dtoa_r+0x8f2>
 800b9e2:	f1c0 0320 	rsb	r3, r0, #32
 800b9e6:	2b04      	cmp	r3, #4
 800b9e8:	dd6b      	ble.n	800bac2 <_dtoa_r+0x8e2>
 800b9ea:	9b08      	ldr	r3, [sp, #32]
 800b9ec:	f1c0 001c 	rsb	r0, r0, #28
 800b9f0:	4403      	add	r3, r0
 800b9f2:	4480      	add	r8, r0
 800b9f4:	4406      	add	r6, r0
 800b9f6:	9308      	str	r3, [sp, #32]
 800b9f8:	f1b8 0f00 	cmp.w	r8, #0
 800b9fc:	dd05      	ble.n	800ba0a <_dtoa_r+0x82a>
 800b9fe:	4649      	mov	r1, r9
 800ba00:	4642      	mov	r2, r8
 800ba02:	4658      	mov	r0, fp
 800ba04:	f000 fcbe 	bl	800c384 <__lshift>
 800ba08:	4681      	mov	r9, r0
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	dd05      	ble.n	800ba1c <_dtoa_r+0x83c>
 800ba10:	4621      	mov	r1, r4
 800ba12:	461a      	mov	r2, r3
 800ba14:	4658      	mov	r0, fp
 800ba16:	f000 fcb5 	bl	800c384 <__lshift>
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d059      	beq.n	800bad6 <_dtoa_r+0x8f6>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4648      	mov	r0, r9
 800ba26:	f000 fd19 	bl	800c45c <__mcmp>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	da53      	bge.n	800bad6 <_dtoa_r+0x8f6>
 800ba2e:	1e7b      	subs	r3, r7, #1
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	4649      	mov	r1, r9
 800ba34:	2300      	movs	r3, #0
 800ba36:	220a      	movs	r2, #10
 800ba38:	4658      	mov	r0, fp
 800ba3a:	f000 faf7 	bl	800c02c <__multadd>
 800ba3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba40:	4681      	mov	r9, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f000 8172 	beq.w	800bd2c <_dtoa_r+0xb4c>
 800ba48:	2300      	movs	r3, #0
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	220a      	movs	r2, #10
 800ba4e:	4658      	mov	r0, fp
 800ba50:	f000 faec 	bl	800c02c <__multadd>
 800ba54:	9b00      	ldr	r3, [sp, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	4605      	mov	r5, r0
 800ba5a:	dc67      	bgt.n	800bb2c <_dtoa_r+0x94c>
 800ba5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	dc41      	bgt.n	800bae6 <_dtoa_r+0x906>
 800ba62:	e063      	b.n	800bb2c <_dtoa_r+0x94c>
 800ba64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ba66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba6a:	e746      	b.n	800b8fa <_dtoa_r+0x71a>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	1e5c      	subs	r4, r3, #1
 800ba70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba72:	42a3      	cmp	r3, r4
 800ba74:	bfbf      	itttt	lt
 800ba76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ba78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ba7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ba7c:	1ae3      	sublt	r3, r4, r3
 800ba7e:	bfb4      	ite	lt
 800ba80:	18d2      	addlt	r2, r2, r3
 800ba82:	1b1c      	subge	r4, r3, r4
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	bfbc      	itt	lt
 800ba88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ba8a:	2400      	movlt	r4, #0
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	bfb5      	itete	lt
 800ba90:	eba8 0603 	sublt.w	r6, r8, r3
 800ba94:	9b07      	ldrge	r3, [sp, #28]
 800ba96:	2300      	movlt	r3, #0
 800ba98:	4646      	movge	r6, r8
 800ba9a:	e730      	b.n	800b8fe <_dtoa_r+0x71e>
 800ba9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ba9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800baa0:	4646      	mov	r6, r8
 800baa2:	e735      	b.n	800b910 <_dtoa_r+0x730>
 800baa4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800baa6:	e75c      	b.n	800b962 <_dtoa_r+0x782>
 800baa8:	2300      	movs	r3, #0
 800baaa:	e788      	b.n	800b9be <_dtoa_r+0x7de>
 800baac:	3fe00000 	.word	0x3fe00000
 800bab0:	40240000 	.word	0x40240000
 800bab4:	40140000 	.word	0x40140000
 800bab8:	9b02      	ldr	r3, [sp, #8]
 800baba:	e780      	b.n	800b9be <_dtoa_r+0x7de>
 800babc:	2300      	movs	r3, #0
 800babe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac0:	e782      	b.n	800b9c8 <_dtoa_r+0x7e8>
 800bac2:	d099      	beq.n	800b9f8 <_dtoa_r+0x818>
 800bac4:	9a08      	ldr	r2, [sp, #32]
 800bac6:	331c      	adds	r3, #28
 800bac8:	441a      	add	r2, r3
 800baca:	4498      	add	r8, r3
 800bacc:	441e      	add	r6, r3
 800bace:	9208      	str	r2, [sp, #32]
 800bad0:	e792      	b.n	800b9f8 <_dtoa_r+0x818>
 800bad2:	4603      	mov	r3, r0
 800bad4:	e7f6      	b.n	800bac4 <_dtoa_r+0x8e4>
 800bad6:	9b07      	ldr	r3, [sp, #28]
 800bad8:	9704      	str	r7, [sp, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	dc20      	bgt.n	800bb20 <_dtoa_r+0x940>
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bae2:	2b02      	cmp	r3, #2
 800bae4:	dd1e      	ble.n	800bb24 <_dtoa_r+0x944>
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	f47f aec0 	bne.w	800b86e <_dtoa_r+0x68e>
 800baee:	4621      	mov	r1, r4
 800baf0:	2205      	movs	r2, #5
 800baf2:	4658      	mov	r0, fp
 800baf4:	f000 fa9a 	bl	800c02c <__multadd>
 800baf8:	4601      	mov	r1, r0
 800bafa:	4604      	mov	r4, r0
 800bafc:	4648      	mov	r0, r9
 800bafe:	f000 fcad 	bl	800c45c <__mcmp>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	f77f aeb3 	ble.w	800b86e <_dtoa_r+0x68e>
 800bb08:	4656      	mov	r6, sl
 800bb0a:	2331      	movs	r3, #49	@ 0x31
 800bb0c:	f806 3b01 	strb.w	r3, [r6], #1
 800bb10:	9b04      	ldr	r3, [sp, #16]
 800bb12:	3301      	adds	r3, #1
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	e6ae      	b.n	800b876 <_dtoa_r+0x696>
 800bb18:	9c07      	ldr	r4, [sp, #28]
 800bb1a:	9704      	str	r7, [sp, #16]
 800bb1c:	4625      	mov	r5, r4
 800bb1e:	e7f3      	b.n	800bb08 <_dtoa_r+0x928>
 800bb20:	9b07      	ldr	r3, [sp, #28]
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f000 8104 	beq.w	800bd34 <_dtoa_r+0xb54>
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	dd05      	ble.n	800bb3c <_dtoa_r+0x95c>
 800bb30:	4629      	mov	r1, r5
 800bb32:	4632      	mov	r2, r6
 800bb34:	4658      	mov	r0, fp
 800bb36:	f000 fc25 	bl	800c384 <__lshift>
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d05a      	beq.n	800bbf8 <_dtoa_r+0xa18>
 800bb42:	6869      	ldr	r1, [r5, #4]
 800bb44:	4658      	mov	r0, fp
 800bb46:	f000 fa0f 	bl	800bf68 <_Balloc>
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	b928      	cbnz	r0, 800bb5a <_dtoa_r+0x97a>
 800bb4e:	4b84      	ldr	r3, [pc, #528]	@ (800bd60 <_dtoa_r+0xb80>)
 800bb50:	4602      	mov	r2, r0
 800bb52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb56:	f7ff bb5a 	b.w	800b20e <_dtoa_r+0x2e>
 800bb5a:	692a      	ldr	r2, [r5, #16]
 800bb5c:	3202      	adds	r2, #2
 800bb5e:	0092      	lsls	r2, r2, #2
 800bb60:	f105 010c 	add.w	r1, r5, #12
 800bb64:	300c      	adds	r0, #12
 800bb66:	f001 f975 	bl	800ce54 <memcpy>
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4658      	mov	r0, fp
 800bb70:	f000 fc08 	bl	800c384 <__lshift>
 800bb74:	f10a 0301 	add.w	r3, sl, #1
 800bb78:	9307      	str	r3, [sp, #28]
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	4453      	add	r3, sl
 800bb7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	462f      	mov	r7, r5
 800bb88:	930a      	str	r3, [sp, #40]	@ 0x28
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	9b07      	ldr	r3, [sp, #28]
 800bb8e:	4621      	mov	r1, r4
 800bb90:	3b01      	subs	r3, #1
 800bb92:	4648      	mov	r0, r9
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	f7ff fa98 	bl	800b0ca <quorem>
 800bb9a:	4639      	mov	r1, r7
 800bb9c:	9002      	str	r0, [sp, #8]
 800bb9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bba2:	4648      	mov	r0, r9
 800bba4:	f000 fc5a 	bl	800c45c <__mcmp>
 800bba8:	462a      	mov	r2, r5
 800bbaa:	9008      	str	r0, [sp, #32]
 800bbac:	4621      	mov	r1, r4
 800bbae:	4658      	mov	r0, fp
 800bbb0:	f000 fc70 	bl	800c494 <__mdiff>
 800bbb4:	68c2      	ldr	r2, [r0, #12]
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	bb02      	cbnz	r2, 800bbfc <_dtoa_r+0xa1c>
 800bbba:	4601      	mov	r1, r0
 800bbbc:	4648      	mov	r0, r9
 800bbbe:	f000 fc4d 	bl	800c45c <__mcmp>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4631      	mov	r1, r6
 800bbc6:	4658      	mov	r0, fp
 800bbc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800bbca:	f000 fa0d 	bl	800bfe8 <_Bfree>
 800bbce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bbd2:	9e07      	ldr	r6, [sp, #28]
 800bbd4:	ea43 0102 	orr.w	r1, r3, r2
 800bbd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbda:	4319      	orrs	r1, r3
 800bbdc:	d110      	bne.n	800bc00 <_dtoa_r+0xa20>
 800bbde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bbe2:	d029      	beq.n	800bc38 <_dtoa_r+0xa58>
 800bbe4:	9b08      	ldr	r3, [sp, #32]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	dd02      	ble.n	800bbf0 <_dtoa_r+0xa10>
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bbf0:	9b00      	ldr	r3, [sp, #0]
 800bbf2:	f883 8000 	strb.w	r8, [r3]
 800bbf6:	e63f      	b.n	800b878 <_dtoa_r+0x698>
 800bbf8:	4628      	mov	r0, r5
 800bbfa:	e7bb      	b.n	800bb74 <_dtoa_r+0x994>
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	e7e1      	b.n	800bbc4 <_dtoa_r+0x9e4>
 800bc00:	9b08      	ldr	r3, [sp, #32]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	db04      	blt.n	800bc10 <_dtoa_r+0xa30>
 800bc06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bc08:	430b      	orrs	r3, r1
 800bc0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bc0c:	430b      	orrs	r3, r1
 800bc0e:	d120      	bne.n	800bc52 <_dtoa_r+0xa72>
 800bc10:	2a00      	cmp	r2, #0
 800bc12:	dded      	ble.n	800bbf0 <_dtoa_r+0xa10>
 800bc14:	4649      	mov	r1, r9
 800bc16:	2201      	movs	r2, #1
 800bc18:	4658      	mov	r0, fp
 800bc1a:	f000 fbb3 	bl	800c384 <__lshift>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4681      	mov	r9, r0
 800bc22:	f000 fc1b 	bl	800c45c <__mcmp>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	dc03      	bgt.n	800bc32 <_dtoa_r+0xa52>
 800bc2a:	d1e1      	bne.n	800bbf0 <_dtoa_r+0xa10>
 800bc2c:	f018 0f01 	tst.w	r8, #1
 800bc30:	d0de      	beq.n	800bbf0 <_dtoa_r+0xa10>
 800bc32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc36:	d1d8      	bne.n	800bbea <_dtoa_r+0xa0a>
 800bc38:	9a00      	ldr	r2, [sp, #0]
 800bc3a:	2339      	movs	r3, #57	@ 0x39
 800bc3c:	7013      	strb	r3, [r2, #0]
 800bc3e:	4633      	mov	r3, r6
 800bc40:	461e      	mov	r6, r3
 800bc42:	3b01      	subs	r3, #1
 800bc44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc48:	2a39      	cmp	r2, #57	@ 0x39
 800bc4a:	d052      	beq.n	800bcf2 <_dtoa_r+0xb12>
 800bc4c:	3201      	adds	r2, #1
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	e612      	b.n	800b878 <_dtoa_r+0x698>
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	dd07      	ble.n	800bc66 <_dtoa_r+0xa86>
 800bc56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bc5a:	d0ed      	beq.n	800bc38 <_dtoa_r+0xa58>
 800bc5c:	9a00      	ldr	r2, [sp, #0]
 800bc5e:	f108 0301 	add.w	r3, r8, #1
 800bc62:	7013      	strb	r3, [r2, #0]
 800bc64:	e608      	b.n	800b878 <_dtoa_r+0x698>
 800bc66:	9b07      	ldr	r3, [sp, #28]
 800bc68:	9a07      	ldr	r2, [sp, #28]
 800bc6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bc6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d028      	beq.n	800bcc6 <_dtoa_r+0xae6>
 800bc74:	4649      	mov	r1, r9
 800bc76:	2300      	movs	r3, #0
 800bc78:	220a      	movs	r2, #10
 800bc7a:	4658      	mov	r0, fp
 800bc7c:	f000 f9d6 	bl	800c02c <__multadd>
 800bc80:	42af      	cmp	r7, r5
 800bc82:	4681      	mov	r9, r0
 800bc84:	f04f 0300 	mov.w	r3, #0
 800bc88:	f04f 020a 	mov.w	r2, #10
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	4658      	mov	r0, fp
 800bc90:	d107      	bne.n	800bca2 <_dtoa_r+0xac2>
 800bc92:	f000 f9cb 	bl	800c02c <__multadd>
 800bc96:	4607      	mov	r7, r0
 800bc98:	4605      	mov	r5, r0
 800bc9a:	9b07      	ldr	r3, [sp, #28]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	9307      	str	r3, [sp, #28]
 800bca0:	e774      	b.n	800bb8c <_dtoa_r+0x9ac>
 800bca2:	f000 f9c3 	bl	800c02c <__multadd>
 800bca6:	4629      	mov	r1, r5
 800bca8:	4607      	mov	r7, r0
 800bcaa:	2300      	movs	r3, #0
 800bcac:	220a      	movs	r2, #10
 800bcae:	4658      	mov	r0, fp
 800bcb0:	f000 f9bc 	bl	800c02c <__multadd>
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	e7f0      	b.n	800bc9a <_dtoa_r+0xaba>
 800bcb8:	9b00      	ldr	r3, [sp, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	bfcc      	ite	gt
 800bcbe:	461e      	movgt	r6, r3
 800bcc0:	2601      	movle	r6, #1
 800bcc2:	4456      	add	r6, sl
 800bcc4:	2700      	movs	r7, #0
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	2201      	movs	r2, #1
 800bcca:	4658      	mov	r0, fp
 800bccc:	f000 fb5a 	bl	800c384 <__lshift>
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	4681      	mov	r9, r0
 800bcd4:	f000 fbc2 	bl	800c45c <__mcmp>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	dcb0      	bgt.n	800bc3e <_dtoa_r+0xa5e>
 800bcdc:	d102      	bne.n	800bce4 <_dtoa_r+0xb04>
 800bcde:	f018 0f01 	tst.w	r8, #1
 800bce2:	d1ac      	bne.n	800bc3e <_dtoa_r+0xa5e>
 800bce4:	4633      	mov	r3, r6
 800bce6:	461e      	mov	r6, r3
 800bce8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcec:	2a30      	cmp	r2, #48	@ 0x30
 800bcee:	d0fa      	beq.n	800bce6 <_dtoa_r+0xb06>
 800bcf0:	e5c2      	b.n	800b878 <_dtoa_r+0x698>
 800bcf2:	459a      	cmp	sl, r3
 800bcf4:	d1a4      	bne.n	800bc40 <_dtoa_r+0xa60>
 800bcf6:	9b04      	ldr	r3, [sp, #16]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	9304      	str	r3, [sp, #16]
 800bcfc:	2331      	movs	r3, #49	@ 0x31
 800bcfe:	f88a 3000 	strb.w	r3, [sl]
 800bd02:	e5b9      	b.n	800b878 <_dtoa_r+0x698>
 800bd04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bd06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bd64 <_dtoa_r+0xb84>
 800bd0a:	b11b      	cbz	r3, 800bd14 <_dtoa_r+0xb34>
 800bd0c:	f10a 0308 	add.w	r3, sl, #8
 800bd10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bd12:	6013      	str	r3, [r2, #0]
 800bd14:	4650      	mov	r0, sl
 800bd16:	b019      	add	sp, #100	@ 0x64
 800bd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	f77f ae37 	ble.w	800b992 <_dtoa_r+0x7b2>
 800bd24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd26:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd28:	2001      	movs	r0, #1
 800bd2a:	e655      	b.n	800b9d8 <_dtoa_r+0x7f8>
 800bd2c:	9b00      	ldr	r3, [sp, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f77f aed6 	ble.w	800bae0 <_dtoa_r+0x900>
 800bd34:	4656      	mov	r6, sl
 800bd36:	4621      	mov	r1, r4
 800bd38:	4648      	mov	r0, r9
 800bd3a:	f7ff f9c6 	bl	800b0ca <quorem>
 800bd3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bd42:	f806 8b01 	strb.w	r8, [r6], #1
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	eba6 020a 	sub.w	r2, r6, sl
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	ddb3      	ble.n	800bcb8 <_dtoa_r+0xad8>
 800bd50:	4649      	mov	r1, r9
 800bd52:	2300      	movs	r3, #0
 800bd54:	220a      	movs	r2, #10
 800bd56:	4658      	mov	r0, fp
 800bd58:	f000 f968 	bl	800c02c <__multadd>
 800bd5c:	4681      	mov	r9, r0
 800bd5e:	e7ea      	b.n	800bd36 <_dtoa_r+0xb56>
 800bd60:	0800dd5c 	.word	0x0800dd5c
 800bd64:	0800dce0 	.word	0x0800dce0

0800bd68 <_free_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	2900      	cmp	r1, #0
 800bd6e:	d041      	beq.n	800bdf4 <_free_r+0x8c>
 800bd70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd74:	1f0c      	subs	r4, r1, #4
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	bfb8      	it	lt
 800bd7a:	18e4      	addlt	r4, r4, r3
 800bd7c:	f000 f8e8 	bl	800bf50 <__malloc_lock>
 800bd80:	4a1d      	ldr	r2, [pc, #116]	@ (800bdf8 <_free_r+0x90>)
 800bd82:	6813      	ldr	r3, [r2, #0]
 800bd84:	b933      	cbnz	r3, 800bd94 <_free_r+0x2c>
 800bd86:	6063      	str	r3, [r4, #4]
 800bd88:	6014      	str	r4, [r2, #0]
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd90:	f000 b8e4 	b.w	800bf5c <__malloc_unlock>
 800bd94:	42a3      	cmp	r3, r4
 800bd96:	d908      	bls.n	800bdaa <_free_r+0x42>
 800bd98:	6820      	ldr	r0, [r4, #0]
 800bd9a:	1821      	adds	r1, r4, r0
 800bd9c:	428b      	cmp	r3, r1
 800bd9e:	bf01      	itttt	eq
 800bda0:	6819      	ldreq	r1, [r3, #0]
 800bda2:	685b      	ldreq	r3, [r3, #4]
 800bda4:	1809      	addeq	r1, r1, r0
 800bda6:	6021      	streq	r1, [r4, #0]
 800bda8:	e7ed      	b.n	800bd86 <_free_r+0x1e>
 800bdaa:	461a      	mov	r2, r3
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	b10b      	cbz	r3, 800bdb4 <_free_r+0x4c>
 800bdb0:	42a3      	cmp	r3, r4
 800bdb2:	d9fa      	bls.n	800bdaa <_free_r+0x42>
 800bdb4:	6811      	ldr	r1, [r2, #0]
 800bdb6:	1850      	adds	r0, r2, r1
 800bdb8:	42a0      	cmp	r0, r4
 800bdba:	d10b      	bne.n	800bdd4 <_free_r+0x6c>
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	4401      	add	r1, r0
 800bdc0:	1850      	adds	r0, r2, r1
 800bdc2:	4283      	cmp	r3, r0
 800bdc4:	6011      	str	r1, [r2, #0]
 800bdc6:	d1e0      	bne.n	800bd8a <_free_r+0x22>
 800bdc8:	6818      	ldr	r0, [r3, #0]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	6053      	str	r3, [r2, #4]
 800bdce:	4408      	add	r0, r1
 800bdd0:	6010      	str	r0, [r2, #0]
 800bdd2:	e7da      	b.n	800bd8a <_free_r+0x22>
 800bdd4:	d902      	bls.n	800bddc <_free_r+0x74>
 800bdd6:	230c      	movs	r3, #12
 800bdd8:	602b      	str	r3, [r5, #0]
 800bdda:	e7d6      	b.n	800bd8a <_free_r+0x22>
 800bddc:	6820      	ldr	r0, [r4, #0]
 800bdde:	1821      	adds	r1, r4, r0
 800bde0:	428b      	cmp	r3, r1
 800bde2:	bf04      	itt	eq
 800bde4:	6819      	ldreq	r1, [r3, #0]
 800bde6:	685b      	ldreq	r3, [r3, #4]
 800bde8:	6063      	str	r3, [r4, #4]
 800bdea:	bf04      	itt	eq
 800bdec:	1809      	addeq	r1, r1, r0
 800bdee:	6021      	streq	r1, [r4, #0]
 800bdf0:	6054      	str	r4, [r2, #4]
 800bdf2:	e7ca      	b.n	800bd8a <_free_r+0x22>
 800bdf4:	bd38      	pop	{r3, r4, r5, pc}
 800bdf6:	bf00      	nop
 800bdf8:	2000ccbc 	.word	0x2000ccbc

0800bdfc <malloc>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	@ (800be08 <malloc+0xc>)
 800bdfe:	4601      	mov	r1, r0
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f000 b825 	b.w	800be50 <_malloc_r>
 800be06:	bf00      	nop
 800be08:	2000003c 	.word	0x2000003c

0800be0c <sbrk_aligned>:
 800be0c:	b570      	push	{r4, r5, r6, lr}
 800be0e:	4e0f      	ldr	r6, [pc, #60]	@ (800be4c <sbrk_aligned+0x40>)
 800be10:	460c      	mov	r4, r1
 800be12:	6831      	ldr	r1, [r6, #0]
 800be14:	4605      	mov	r5, r0
 800be16:	b911      	cbnz	r1, 800be1e <sbrk_aligned+0x12>
 800be18:	f001 f80c 	bl	800ce34 <_sbrk_r>
 800be1c:	6030      	str	r0, [r6, #0]
 800be1e:	4621      	mov	r1, r4
 800be20:	4628      	mov	r0, r5
 800be22:	f001 f807 	bl	800ce34 <_sbrk_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d103      	bne.n	800be32 <sbrk_aligned+0x26>
 800be2a:	f04f 34ff 	mov.w	r4, #4294967295
 800be2e:	4620      	mov	r0, r4
 800be30:	bd70      	pop	{r4, r5, r6, pc}
 800be32:	1cc4      	adds	r4, r0, #3
 800be34:	f024 0403 	bic.w	r4, r4, #3
 800be38:	42a0      	cmp	r0, r4
 800be3a:	d0f8      	beq.n	800be2e <sbrk_aligned+0x22>
 800be3c:	1a21      	subs	r1, r4, r0
 800be3e:	4628      	mov	r0, r5
 800be40:	f000 fff8 	bl	800ce34 <_sbrk_r>
 800be44:	3001      	adds	r0, #1
 800be46:	d1f2      	bne.n	800be2e <sbrk_aligned+0x22>
 800be48:	e7ef      	b.n	800be2a <sbrk_aligned+0x1e>
 800be4a:	bf00      	nop
 800be4c:	2000ccb8 	.word	0x2000ccb8

0800be50 <_malloc_r>:
 800be50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be54:	1ccd      	adds	r5, r1, #3
 800be56:	f025 0503 	bic.w	r5, r5, #3
 800be5a:	3508      	adds	r5, #8
 800be5c:	2d0c      	cmp	r5, #12
 800be5e:	bf38      	it	cc
 800be60:	250c      	movcc	r5, #12
 800be62:	2d00      	cmp	r5, #0
 800be64:	4606      	mov	r6, r0
 800be66:	db01      	blt.n	800be6c <_malloc_r+0x1c>
 800be68:	42a9      	cmp	r1, r5
 800be6a:	d904      	bls.n	800be76 <_malloc_r+0x26>
 800be6c:	230c      	movs	r3, #12
 800be6e:	6033      	str	r3, [r6, #0]
 800be70:	2000      	movs	r0, #0
 800be72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf4c <_malloc_r+0xfc>
 800be7a:	f000 f869 	bl	800bf50 <__malloc_lock>
 800be7e:	f8d8 3000 	ldr.w	r3, [r8]
 800be82:	461c      	mov	r4, r3
 800be84:	bb44      	cbnz	r4, 800bed8 <_malloc_r+0x88>
 800be86:	4629      	mov	r1, r5
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff ffbf 	bl	800be0c <sbrk_aligned>
 800be8e:	1c43      	adds	r3, r0, #1
 800be90:	4604      	mov	r4, r0
 800be92:	d158      	bne.n	800bf46 <_malloc_r+0xf6>
 800be94:	f8d8 4000 	ldr.w	r4, [r8]
 800be98:	4627      	mov	r7, r4
 800be9a:	2f00      	cmp	r7, #0
 800be9c:	d143      	bne.n	800bf26 <_malloc_r+0xd6>
 800be9e:	2c00      	cmp	r4, #0
 800bea0:	d04b      	beq.n	800bf3a <_malloc_r+0xea>
 800bea2:	6823      	ldr	r3, [r4, #0]
 800bea4:	4639      	mov	r1, r7
 800bea6:	4630      	mov	r0, r6
 800bea8:	eb04 0903 	add.w	r9, r4, r3
 800beac:	f000 ffc2 	bl	800ce34 <_sbrk_r>
 800beb0:	4581      	cmp	r9, r0
 800beb2:	d142      	bne.n	800bf3a <_malloc_r+0xea>
 800beb4:	6821      	ldr	r1, [r4, #0]
 800beb6:	1a6d      	subs	r5, r5, r1
 800beb8:	4629      	mov	r1, r5
 800beba:	4630      	mov	r0, r6
 800bebc:	f7ff ffa6 	bl	800be0c <sbrk_aligned>
 800bec0:	3001      	adds	r0, #1
 800bec2:	d03a      	beq.n	800bf3a <_malloc_r+0xea>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	442b      	add	r3, r5
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	f8d8 3000 	ldr.w	r3, [r8]
 800bece:	685a      	ldr	r2, [r3, #4]
 800bed0:	bb62      	cbnz	r2, 800bf2c <_malloc_r+0xdc>
 800bed2:	f8c8 7000 	str.w	r7, [r8]
 800bed6:	e00f      	b.n	800bef8 <_malloc_r+0xa8>
 800bed8:	6822      	ldr	r2, [r4, #0]
 800beda:	1b52      	subs	r2, r2, r5
 800bedc:	d420      	bmi.n	800bf20 <_malloc_r+0xd0>
 800bede:	2a0b      	cmp	r2, #11
 800bee0:	d917      	bls.n	800bf12 <_malloc_r+0xc2>
 800bee2:	1961      	adds	r1, r4, r5
 800bee4:	42a3      	cmp	r3, r4
 800bee6:	6025      	str	r5, [r4, #0]
 800bee8:	bf18      	it	ne
 800beea:	6059      	strne	r1, [r3, #4]
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	bf08      	it	eq
 800bef0:	f8c8 1000 	streq.w	r1, [r8]
 800bef4:	5162      	str	r2, [r4, r5]
 800bef6:	604b      	str	r3, [r1, #4]
 800bef8:	4630      	mov	r0, r6
 800befa:	f000 f82f 	bl	800bf5c <__malloc_unlock>
 800befe:	f104 000b 	add.w	r0, r4, #11
 800bf02:	1d23      	adds	r3, r4, #4
 800bf04:	f020 0007 	bic.w	r0, r0, #7
 800bf08:	1ac2      	subs	r2, r0, r3
 800bf0a:	bf1c      	itt	ne
 800bf0c:	1a1b      	subne	r3, r3, r0
 800bf0e:	50a3      	strne	r3, [r4, r2]
 800bf10:	e7af      	b.n	800be72 <_malloc_r+0x22>
 800bf12:	6862      	ldr	r2, [r4, #4]
 800bf14:	42a3      	cmp	r3, r4
 800bf16:	bf0c      	ite	eq
 800bf18:	f8c8 2000 	streq.w	r2, [r8]
 800bf1c:	605a      	strne	r2, [r3, #4]
 800bf1e:	e7eb      	b.n	800bef8 <_malloc_r+0xa8>
 800bf20:	4623      	mov	r3, r4
 800bf22:	6864      	ldr	r4, [r4, #4]
 800bf24:	e7ae      	b.n	800be84 <_malloc_r+0x34>
 800bf26:	463c      	mov	r4, r7
 800bf28:	687f      	ldr	r7, [r7, #4]
 800bf2a:	e7b6      	b.n	800be9a <_malloc_r+0x4a>
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	42a3      	cmp	r3, r4
 800bf32:	d1fb      	bne.n	800bf2c <_malloc_r+0xdc>
 800bf34:	2300      	movs	r3, #0
 800bf36:	6053      	str	r3, [r2, #4]
 800bf38:	e7de      	b.n	800bef8 <_malloc_r+0xa8>
 800bf3a:	230c      	movs	r3, #12
 800bf3c:	6033      	str	r3, [r6, #0]
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f000 f80c 	bl	800bf5c <__malloc_unlock>
 800bf44:	e794      	b.n	800be70 <_malloc_r+0x20>
 800bf46:	6005      	str	r5, [r0, #0]
 800bf48:	e7d6      	b.n	800bef8 <_malloc_r+0xa8>
 800bf4a:	bf00      	nop
 800bf4c:	2000ccbc 	.word	0x2000ccbc

0800bf50 <__malloc_lock>:
 800bf50:	4801      	ldr	r0, [pc, #4]	@ (800bf58 <__malloc_lock+0x8>)
 800bf52:	f7ff b8b8 	b.w	800b0c6 <__retarget_lock_acquire_recursive>
 800bf56:	bf00      	nop
 800bf58:	2000ccb4 	.word	0x2000ccb4

0800bf5c <__malloc_unlock>:
 800bf5c:	4801      	ldr	r0, [pc, #4]	@ (800bf64 <__malloc_unlock+0x8>)
 800bf5e:	f7ff b8b3 	b.w	800b0c8 <__retarget_lock_release_recursive>
 800bf62:	bf00      	nop
 800bf64:	2000ccb4 	.word	0x2000ccb4

0800bf68 <_Balloc>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	69c6      	ldr	r6, [r0, #28]
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	460d      	mov	r5, r1
 800bf70:	b976      	cbnz	r6, 800bf90 <_Balloc+0x28>
 800bf72:	2010      	movs	r0, #16
 800bf74:	f7ff ff42 	bl	800bdfc <malloc>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	61e0      	str	r0, [r4, #28]
 800bf7c:	b920      	cbnz	r0, 800bf88 <_Balloc+0x20>
 800bf7e:	4b18      	ldr	r3, [pc, #96]	@ (800bfe0 <_Balloc+0x78>)
 800bf80:	4818      	ldr	r0, [pc, #96]	@ (800bfe4 <_Balloc+0x7c>)
 800bf82:	216b      	movs	r1, #107	@ 0x6b
 800bf84:	f000 ff74 	bl	800ce70 <__assert_func>
 800bf88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf8c:	6006      	str	r6, [r0, #0]
 800bf8e:	60c6      	str	r6, [r0, #12]
 800bf90:	69e6      	ldr	r6, [r4, #28]
 800bf92:	68f3      	ldr	r3, [r6, #12]
 800bf94:	b183      	cbz	r3, 800bfb8 <_Balloc+0x50>
 800bf96:	69e3      	ldr	r3, [r4, #28]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf9e:	b9b8      	cbnz	r0, 800bfd0 <_Balloc+0x68>
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	fa01 f605 	lsl.w	r6, r1, r5
 800bfa6:	1d72      	adds	r2, r6, #5
 800bfa8:	0092      	lsls	r2, r2, #2
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 ff7e 	bl	800ceac <_calloc_r>
 800bfb0:	b160      	cbz	r0, 800bfcc <_Balloc+0x64>
 800bfb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfb6:	e00e      	b.n	800bfd6 <_Balloc+0x6e>
 800bfb8:	2221      	movs	r2, #33	@ 0x21
 800bfba:	2104      	movs	r1, #4
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 ff75 	bl	800ceac <_calloc_r>
 800bfc2:	69e3      	ldr	r3, [r4, #28]
 800bfc4:	60f0      	str	r0, [r6, #12]
 800bfc6:	68db      	ldr	r3, [r3, #12]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1e4      	bne.n	800bf96 <_Balloc+0x2e>
 800bfcc:	2000      	movs	r0, #0
 800bfce:	bd70      	pop	{r4, r5, r6, pc}
 800bfd0:	6802      	ldr	r2, [r0, #0]
 800bfd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfdc:	e7f7      	b.n	800bfce <_Balloc+0x66>
 800bfde:	bf00      	nop
 800bfe0:	0800dced 	.word	0x0800dced
 800bfe4:	0800dd6d 	.word	0x0800dd6d

0800bfe8 <_Bfree>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	69c6      	ldr	r6, [r0, #28]
 800bfec:	4605      	mov	r5, r0
 800bfee:	460c      	mov	r4, r1
 800bff0:	b976      	cbnz	r6, 800c010 <_Bfree+0x28>
 800bff2:	2010      	movs	r0, #16
 800bff4:	f7ff ff02 	bl	800bdfc <malloc>
 800bff8:	4602      	mov	r2, r0
 800bffa:	61e8      	str	r0, [r5, #28]
 800bffc:	b920      	cbnz	r0, 800c008 <_Bfree+0x20>
 800bffe:	4b09      	ldr	r3, [pc, #36]	@ (800c024 <_Bfree+0x3c>)
 800c000:	4809      	ldr	r0, [pc, #36]	@ (800c028 <_Bfree+0x40>)
 800c002:	218f      	movs	r1, #143	@ 0x8f
 800c004:	f000 ff34 	bl	800ce70 <__assert_func>
 800c008:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c00c:	6006      	str	r6, [r0, #0]
 800c00e:	60c6      	str	r6, [r0, #12]
 800c010:	b13c      	cbz	r4, 800c022 <_Bfree+0x3a>
 800c012:	69eb      	ldr	r3, [r5, #28]
 800c014:	6862      	ldr	r2, [r4, #4]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c01c:	6021      	str	r1, [r4, #0]
 800c01e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c022:	bd70      	pop	{r4, r5, r6, pc}
 800c024:	0800dced 	.word	0x0800dced
 800c028:	0800dd6d 	.word	0x0800dd6d

0800c02c <__multadd>:
 800c02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c030:	690d      	ldr	r5, [r1, #16]
 800c032:	4607      	mov	r7, r0
 800c034:	460c      	mov	r4, r1
 800c036:	461e      	mov	r6, r3
 800c038:	f101 0c14 	add.w	ip, r1, #20
 800c03c:	2000      	movs	r0, #0
 800c03e:	f8dc 3000 	ldr.w	r3, [ip]
 800c042:	b299      	uxth	r1, r3
 800c044:	fb02 6101 	mla	r1, r2, r1, r6
 800c048:	0c1e      	lsrs	r6, r3, #16
 800c04a:	0c0b      	lsrs	r3, r1, #16
 800c04c:	fb02 3306 	mla	r3, r2, r6, r3
 800c050:	b289      	uxth	r1, r1
 800c052:	3001      	adds	r0, #1
 800c054:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c058:	4285      	cmp	r5, r0
 800c05a:	f84c 1b04 	str.w	r1, [ip], #4
 800c05e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c062:	dcec      	bgt.n	800c03e <__multadd+0x12>
 800c064:	b30e      	cbz	r6, 800c0aa <__multadd+0x7e>
 800c066:	68a3      	ldr	r3, [r4, #8]
 800c068:	42ab      	cmp	r3, r5
 800c06a:	dc19      	bgt.n	800c0a0 <__multadd+0x74>
 800c06c:	6861      	ldr	r1, [r4, #4]
 800c06e:	4638      	mov	r0, r7
 800c070:	3101      	adds	r1, #1
 800c072:	f7ff ff79 	bl	800bf68 <_Balloc>
 800c076:	4680      	mov	r8, r0
 800c078:	b928      	cbnz	r0, 800c086 <__multadd+0x5a>
 800c07a:	4602      	mov	r2, r0
 800c07c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b0 <__multadd+0x84>)
 800c07e:	480d      	ldr	r0, [pc, #52]	@ (800c0b4 <__multadd+0x88>)
 800c080:	21ba      	movs	r1, #186	@ 0xba
 800c082:	f000 fef5 	bl	800ce70 <__assert_func>
 800c086:	6922      	ldr	r2, [r4, #16]
 800c088:	3202      	adds	r2, #2
 800c08a:	f104 010c 	add.w	r1, r4, #12
 800c08e:	0092      	lsls	r2, r2, #2
 800c090:	300c      	adds	r0, #12
 800c092:	f000 fedf 	bl	800ce54 <memcpy>
 800c096:	4621      	mov	r1, r4
 800c098:	4638      	mov	r0, r7
 800c09a:	f7ff ffa5 	bl	800bfe8 <_Bfree>
 800c09e:	4644      	mov	r4, r8
 800c0a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0a4:	3501      	adds	r5, #1
 800c0a6:	615e      	str	r6, [r3, #20]
 800c0a8:	6125      	str	r5, [r4, #16]
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b0:	0800dd5c 	.word	0x0800dd5c
 800c0b4:	0800dd6d 	.word	0x0800dd6d

0800c0b8 <__hi0bits>:
 800c0b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0bc:	4603      	mov	r3, r0
 800c0be:	bf36      	itet	cc
 800c0c0:	0403      	lslcc	r3, r0, #16
 800c0c2:	2000      	movcs	r0, #0
 800c0c4:	2010      	movcc	r0, #16
 800c0c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ca:	bf3c      	itt	cc
 800c0cc:	021b      	lslcc	r3, r3, #8
 800c0ce:	3008      	addcc	r0, #8
 800c0d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0d4:	bf3c      	itt	cc
 800c0d6:	011b      	lslcc	r3, r3, #4
 800c0d8:	3004      	addcc	r0, #4
 800c0da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0de:	bf3c      	itt	cc
 800c0e0:	009b      	lslcc	r3, r3, #2
 800c0e2:	3002      	addcc	r0, #2
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	db05      	blt.n	800c0f4 <__hi0bits+0x3c>
 800c0e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0ec:	f100 0001 	add.w	r0, r0, #1
 800c0f0:	bf08      	it	eq
 800c0f2:	2020      	moveq	r0, #32
 800c0f4:	4770      	bx	lr

0800c0f6 <__lo0bits>:
 800c0f6:	6803      	ldr	r3, [r0, #0]
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	f013 0007 	ands.w	r0, r3, #7
 800c0fe:	d00b      	beq.n	800c118 <__lo0bits+0x22>
 800c100:	07d9      	lsls	r1, r3, #31
 800c102:	d421      	bmi.n	800c148 <__lo0bits+0x52>
 800c104:	0798      	lsls	r0, r3, #30
 800c106:	bf49      	itett	mi
 800c108:	085b      	lsrmi	r3, r3, #1
 800c10a:	089b      	lsrpl	r3, r3, #2
 800c10c:	2001      	movmi	r0, #1
 800c10e:	6013      	strmi	r3, [r2, #0]
 800c110:	bf5c      	itt	pl
 800c112:	6013      	strpl	r3, [r2, #0]
 800c114:	2002      	movpl	r0, #2
 800c116:	4770      	bx	lr
 800c118:	b299      	uxth	r1, r3
 800c11a:	b909      	cbnz	r1, 800c120 <__lo0bits+0x2a>
 800c11c:	0c1b      	lsrs	r3, r3, #16
 800c11e:	2010      	movs	r0, #16
 800c120:	b2d9      	uxtb	r1, r3
 800c122:	b909      	cbnz	r1, 800c128 <__lo0bits+0x32>
 800c124:	3008      	adds	r0, #8
 800c126:	0a1b      	lsrs	r3, r3, #8
 800c128:	0719      	lsls	r1, r3, #28
 800c12a:	bf04      	itt	eq
 800c12c:	091b      	lsreq	r3, r3, #4
 800c12e:	3004      	addeq	r0, #4
 800c130:	0799      	lsls	r1, r3, #30
 800c132:	bf04      	itt	eq
 800c134:	089b      	lsreq	r3, r3, #2
 800c136:	3002      	addeq	r0, #2
 800c138:	07d9      	lsls	r1, r3, #31
 800c13a:	d403      	bmi.n	800c144 <__lo0bits+0x4e>
 800c13c:	085b      	lsrs	r3, r3, #1
 800c13e:	f100 0001 	add.w	r0, r0, #1
 800c142:	d003      	beq.n	800c14c <__lo0bits+0x56>
 800c144:	6013      	str	r3, [r2, #0]
 800c146:	4770      	bx	lr
 800c148:	2000      	movs	r0, #0
 800c14a:	4770      	bx	lr
 800c14c:	2020      	movs	r0, #32
 800c14e:	4770      	bx	lr

0800c150 <__i2b>:
 800c150:	b510      	push	{r4, lr}
 800c152:	460c      	mov	r4, r1
 800c154:	2101      	movs	r1, #1
 800c156:	f7ff ff07 	bl	800bf68 <_Balloc>
 800c15a:	4602      	mov	r2, r0
 800c15c:	b928      	cbnz	r0, 800c16a <__i2b+0x1a>
 800c15e:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <__i2b+0x24>)
 800c160:	4805      	ldr	r0, [pc, #20]	@ (800c178 <__i2b+0x28>)
 800c162:	f240 1145 	movw	r1, #325	@ 0x145
 800c166:	f000 fe83 	bl	800ce70 <__assert_func>
 800c16a:	2301      	movs	r3, #1
 800c16c:	6144      	str	r4, [r0, #20]
 800c16e:	6103      	str	r3, [r0, #16]
 800c170:	bd10      	pop	{r4, pc}
 800c172:	bf00      	nop
 800c174:	0800dd5c 	.word	0x0800dd5c
 800c178:	0800dd6d 	.word	0x0800dd6d

0800c17c <__multiply>:
 800c17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c180:	4614      	mov	r4, r2
 800c182:	690a      	ldr	r2, [r1, #16]
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	bfa8      	it	ge
 800c18a:	4623      	movge	r3, r4
 800c18c:	460f      	mov	r7, r1
 800c18e:	bfa4      	itt	ge
 800c190:	460c      	movge	r4, r1
 800c192:	461f      	movge	r7, r3
 800c194:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c198:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c19c:	68a3      	ldr	r3, [r4, #8]
 800c19e:	6861      	ldr	r1, [r4, #4]
 800c1a0:	eb0a 0609 	add.w	r6, sl, r9
 800c1a4:	42b3      	cmp	r3, r6
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	bfb8      	it	lt
 800c1aa:	3101      	addlt	r1, #1
 800c1ac:	f7ff fedc 	bl	800bf68 <_Balloc>
 800c1b0:	b930      	cbnz	r0, 800c1c0 <__multiply+0x44>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	4b44      	ldr	r3, [pc, #272]	@ (800c2c8 <__multiply+0x14c>)
 800c1b6:	4845      	ldr	r0, [pc, #276]	@ (800c2cc <__multiply+0x150>)
 800c1b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1bc:	f000 fe58 	bl	800ce70 <__assert_func>
 800c1c0:	f100 0514 	add.w	r5, r0, #20
 800c1c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1c8:	462b      	mov	r3, r5
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	4543      	cmp	r3, r8
 800c1ce:	d321      	bcc.n	800c214 <__multiply+0x98>
 800c1d0:	f107 0114 	add.w	r1, r7, #20
 800c1d4:	f104 0214 	add.w	r2, r4, #20
 800c1d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1e0:	9302      	str	r3, [sp, #8]
 800c1e2:	1b13      	subs	r3, r2, r4
 800c1e4:	3b15      	subs	r3, #21
 800c1e6:	f023 0303 	bic.w	r3, r3, #3
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	f104 0715 	add.w	r7, r4, #21
 800c1f0:	42ba      	cmp	r2, r7
 800c1f2:	bf38      	it	cc
 800c1f4:	2304      	movcc	r3, #4
 800c1f6:	9301      	str	r3, [sp, #4]
 800c1f8:	9b02      	ldr	r3, [sp, #8]
 800c1fa:	9103      	str	r1, [sp, #12]
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	d80c      	bhi.n	800c21a <__multiply+0x9e>
 800c200:	2e00      	cmp	r6, #0
 800c202:	dd03      	ble.n	800c20c <__multiply+0x90>
 800c204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d05b      	beq.n	800c2c4 <__multiply+0x148>
 800c20c:	6106      	str	r6, [r0, #16]
 800c20e:	b005      	add	sp, #20
 800c210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c214:	f843 2b04 	str.w	r2, [r3], #4
 800c218:	e7d8      	b.n	800c1cc <__multiply+0x50>
 800c21a:	f8b1 a000 	ldrh.w	sl, [r1]
 800c21e:	f1ba 0f00 	cmp.w	sl, #0
 800c222:	d024      	beq.n	800c26e <__multiply+0xf2>
 800c224:	f104 0e14 	add.w	lr, r4, #20
 800c228:	46a9      	mov	r9, r5
 800c22a:	f04f 0c00 	mov.w	ip, #0
 800c22e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c232:	f8d9 3000 	ldr.w	r3, [r9]
 800c236:	fa1f fb87 	uxth.w	fp, r7
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c240:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c244:	f8d9 7000 	ldr.w	r7, [r9]
 800c248:	4463      	add	r3, ip
 800c24a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c24e:	fb0a c70b 	mla	r7, sl, fp, ip
 800c252:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c256:	b29b      	uxth	r3, r3
 800c258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c25c:	4572      	cmp	r2, lr
 800c25e:	f849 3b04 	str.w	r3, [r9], #4
 800c262:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c266:	d8e2      	bhi.n	800c22e <__multiply+0xb2>
 800c268:	9b01      	ldr	r3, [sp, #4]
 800c26a:	f845 c003 	str.w	ip, [r5, r3]
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c274:	3104      	adds	r1, #4
 800c276:	f1b9 0f00 	cmp.w	r9, #0
 800c27a:	d021      	beq.n	800c2c0 <__multiply+0x144>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	f104 0c14 	add.w	ip, r4, #20
 800c282:	46ae      	mov	lr, r5
 800c284:	f04f 0a00 	mov.w	sl, #0
 800c288:	f8bc b000 	ldrh.w	fp, [ip]
 800c28c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c290:	fb09 770b 	mla	r7, r9, fp, r7
 800c294:	4457      	add	r7, sl
 800c296:	b29b      	uxth	r3, r3
 800c298:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c29c:	f84e 3b04 	str.w	r3, [lr], #4
 800c2a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2a8:	f8be 3000 	ldrh.w	r3, [lr]
 800c2ac:	fb09 330a 	mla	r3, r9, sl, r3
 800c2b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2b4:	4562      	cmp	r2, ip
 800c2b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ba:	d8e5      	bhi.n	800c288 <__multiply+0x10c>
 800c2bc:	9f01      	ldr	r7, [sp, #4]
 800c2be:	51eb      	str	r3, [r5, r7]
 800c2c0:	3504      	adds	r5, #4
 800c2c2:	e799      	b.n	800c1f8 <__multiply+0x7c>
 800c2c4:	3e01      	subs	r6, #1
 800c2c6:	e79b      	b.n	800c200 <__multiply+0x84>
 800c2c8:	0800dd5c 	.word	0x0800dd5c
 800c2cc:	0800dd6d 	.word	0x0800dd6d

0800c2d0 <__pow5mult>:
 800c2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	f012 0203 	ands.w	r2, r2, #3
 800c2da:	4607      	mov	r7, r0
 800c2dc:	460e      	mov	r6, r1
 800c2de:	d007      	beq.n	800c2f0 <__pow5mult+0x20>
 800c2e0:	4c25      	ldr	r4, [pc, #148]	@ (800c378 <__pow5mult+0xa8>)
 800c2e2:	3a01      	subs	r2, #1
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2ea:	f7ff fe9f 	bl	800c02c <__multadd>
 800c2ee:	4606      	mov	r6, r0
 800c2f0:	10ad      	asrs	r5, r5, #2
 800c2f2:	d03d      	beq.n	800c370 <__pow5mult+0xa0>
 800c2f4:	69fc      	ldr	r4, [r7, #28]
 800c2f6:	b97c      	cbnz	r4, 800c318 <__pow5mult+0x48>
 800c2f8:	2010      	movs	r0, #16
 800c2fa:	f7ff fd7f 	bl	800bdfc <malloc>
 800c2fe:	4602      	mov	r2, r0
 800c300:	61f8      	str	r0, [r7, #28]
 800c302:	b928      	cbnz	r0, 800c310 <__pow5mult+0x40>
 800c304:	4b1d      	ldr	r3, [pc, #116]	@ (800c37c <__pow5mult+0xac>)
 800c306:	481e      	ldr	r0, [pc, #120]	@ (800c380 <__pow5mult+0xb0>)
 800c308:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c30c:	f000 fdb0 	bl	800ce70 <__assert_func>
 800c310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c314:	6004      	str	r4, [r0, #0]
 800c316:	60c4      	str	r4, [r0, #12]
 800c318:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c31c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c320:	b94c      	cbnz	r4, 800c336 <__pow5mult+0x66>
 800c322:	f240 2171 	movw	r1, #625	@ 0x271
 800c326:	4638      	mov	r0, r7
 800c328:	f7ff ff12 	bl	800c150 <__i2b>
 800c32c:	2300      	movs	r3, #0
 800c32e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c332:	4604      	mov	r4, r0
 800c334:	6003      	str	r3, [r0, #0]
 800c336:	f04f 0900 	mov.w	r9, #0
 800c33a:	07eb      	lsls	r3, r5, #31
 800c33c:	d50a      	bpl.n	800c354 <__pow5mult+0x84>
 800c33e:	4631      	mov	r1, r6
 800c340:	4622      	mov	r2, r4
 800c342:	4638      	mov	r0, r7
 800c344:	f7ff ff1a 	bl	800c17c <__multiply>
 800c348:	4631      	mov	r1, r6
 800c34a:	4680      	mov	r8, r0
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff fe4b 	bl	800bfe8 <_Bfree>
 800c352:	4646      	mov	r6, r8
 800c354:	106d      	asrs	r5, r5, #1
 800c356:	d00b      	beq.n	800c370 <__pow5mult+0xa0>
 800c358:	6820      	ldr	r0, [r4, #0]
 800c35a:	b938      	cbnz	r0, 800c36c <__pow5mult+0x9c>
 800c35c:	4622      	mov	r2, r4
 800c35e:	4621      	mov	r1, r4
 800c360:	4638      	mov	r0, r7
 800c362:	f7ff ff0b 	bl	800c17c <__multiply>
 800c366:	6020      	str	r0, [r4, #0]
 800c368:	f8c0 9000 	str.w	r9, [r0]
 800c36c:	4604      	mov	r4, r0
 800c36e:	e7e4      	b.n	800c33a <__pow5mult+0x6a>
 800c370:	4630      	mov	r0, r6
 800c372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c376:	bf00      	nop
 800c378:	0800ddc8 	.word	0x0800ddc8
 800c37c:	0800dced 	.word	0x0800dced
 800c380:	0800dd6d 	.word	0x0800dd6d

0800c384 <__lshift>:
 800c384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c388:	460c      	mov	r4, r1
 800c38a:	6849      	ldr	r1, [r1, #4]
 800c38c:	6923      	ldr	r3, [r4, #16]
 800c38e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c392:	68a3      	ldr	r3, [r4, #8]
 800c394:	4607      	mov	r7, r0
 800c396:	4691      	mov	r9, r2
 800c398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c39c:	f108 0601 	add.w	r6, r8, #1
 800c3a0:	42b3      	cmp	r3, r6
 800c3a2:	db0b      	blt.n	800c3bc <__lshift+0x38>
 800c3a4:	4638      	mov	r0, r7
 800c3a6:	f7ff fddf 	bl	800bf68 <_Balloc>
 800c3aa:	4605      	mov	r5, r0
 800c3ac:	b948      	cbnz	r0, 800c3c2 <__lshift+0x3e>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	4b28      	ldr	r3, [pc, #160]	@ (800c454 <__lshift+0xd0>)
 800c3b2:	4829      	ldr	r0, [pc, #164]	@ (800c458 <__lshift+0xd4>)
 800c3b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3b8:	f000 fd5a 	bl	800ce70 <__assert_func>
 800c3bc:	3101      	adds	r1, #1
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	e7ee      	b.n	800c3a0 <__lshift+0x1c>
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f100 0114 	add.w	r1, r0, #20
 800c3c8:	f100 0210 	add.w	r2, r0, #16
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	4553      	cmp	r3, sl
 800c3d0:	db33      	blt.n	800c43a <__lshift+0xb6>
 800c3d2:	6920      	ldr	r0, [r4, #16]
 800c3d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3d8:	f104 0314 	add.w	r3, r4, #20
 800c3dc:	f019 091f 	ands.w	r9, r9, #31
 800c3e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3e8:	d02b      	beq.n	800c442 <__lshift+0xbe>
 800c3ea:	f1c9 0e20 	rsb	lr, r9, #32
 800c3ee:	468a      	mov	sl, r1
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	6818      	ldr	r0, [r3, #0]
 800c3f4:	fa00 f009 	lsl.w	r0, r0, r9
 800c3f8:	4310      	orrs	r0, r2
 800c3fa:	f84a 0b04 	str.w	r0, [sl], #4
 800c3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c402:	459c      	cmp	ip, r3
 800c404:	fa22 f20e 	lsr.w	r2, r2, lr
 800c408:	d8f3      	bhi.n	800c3f2 <__lshift+0x6e>
 800c40a:	ebac 0304 	sub.w	r3, ip, r4
 800c40e:	3b15      	subs	r3, #21
 800c410:	f023 0303 	bic.w	r3, r3, #3
 800c414:	3304      	adds	r3, #4
 800c416:	f104 0015 	add.w	r0, r4, #21
 800c41a:	4584      	cmp	ip, r0
 800c41c:	bf38      	it	cc
 800c41e:	2304      	movcc	r3, #4
 800c420:	50ca      	str	r2, [r1, r3]
 800c422:	b10a      	cbz	r2, 800c428 <__lshift+0xa4>
 800c424:	f108 0602 	add.w	r6, r8, #2
 800c428:	3e01      	subs	r6, #1
 800c42a:	4638      	mov	r0, r7
 800c42c:	612e      	str	r6, [r5, #16]
 800c42e:	4621      	mov	r1, r4
 800c430:	f7ff fdda 	bl	800bfe8 <_Bfree>
 800c434:	4628      	mov	r0, r5
 800c436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c43e:	3301      	adds	r3, #1
 800c440:	e7c5      	b.n	800c3ce <__lshift+0x4a>
 800c442:	3904      	subs	r1, #4
 800c444:	f853 2b04 	ldr.w	r2, [r3], #4
 800c448:	f841 2f04 	str.w	r2, [r1, #4]!
 800c44c:	459c      	cmp	ip, r3
 800c44e:	d8f9      	bhi.n	800c444 <__lshift+0xc0>
 800c450:	e7ea      	b.n	800c428 <__lshift+0xa4>
 800c452:	bf00      	nop
 800c454:	0800dd5c 	.word	0x0800dd5c
 800c458:	0800dd6d 	.word	0x0800dd6d

0800c45c <__mcmp>:
 800c45c:	690a      	ldr	r2, [r1, #16]
 800c45e:	4603      	mov	r3, r0
 800c460:	6900      	ldr	r0, [r0, #16]
 800c462:	1a80      	subs	r0, r0, r2
 800c464:	b530      	push	{r4, r5, lr}
 800c466:	d10e      	bne.n	800c486 <__mcmp+0x2a>
 800c468:	3314      	adds	r3, #20
 800c46a:	3114      	adds	r1, #20
 800c46c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c470:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c474:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c478:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c47c:	4295      	cmp	r5, r2
 800c47e:	d003      	beq.n	800c488 <__mcmp+0x2c>
 800c480:	d205      	bcs.n	800c48e <__mcmp+0x32>
 800c482:	f04f 30ff 	mov.w	r0, #4294967295
 800c486:	bd30      	pop	{r4, r5, pc}
 800c488:	42a3      	cmp	r3, r4
 800c48a:	d3f3      	bcc.n	800c474 <__mcmp+0x18>
 800c48c:	e7fb      	b.n	800c486 <__mcmp+0x2a>
 800c48e:	2001      	movs	r0, #1
 800c490:	e7f9      	b.n	800c486 <__mcmp+0x2a>
	...

0800c494 <__mdiff>:
 800c494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c498:	4689      	mov	r9, r1
 800c49a:	4606      	mov	r6, r0
 800c49c:	4611      	mov	r1, r2
 800c49e:	4648      	mov	r0, r9
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	f7ff ffdb 	bl	800c45c <__mcmp>
 800c4a6:	1e05      	subs	r5, r0, #0
 800c4a8:	d112      	bne.n	800c4d0 <__mdiff+0x3c>
 800c4aa:	4629      	mov	r1, r5
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f7ff fd5b 	bl	800bf68 <_Balloc>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	b928      	cbnz	r0, 800c4c2 <__mdiff+0x2e>
 800c4b6:	4b3f      	ldr	r3, [pc, #252]	@ (800c5b4 <__mdiff+0x120>)
 800c4b8:	f240 2137 	movw	r1, #567	@ 0x237
 800c4bc:	483e      	ldr	r0, [pc, #248]	@ (800c5b8 <__mdiff+0x124>)
 800c4be:	f000 fcd7 	bl	800ce70 <__assert_func>
 800c4c2:	2301      	movs	r3, #1
 800c4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	b003      	add	sp, #12
 800c4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d0:	bfbc      	itt	lt
 800c4d2:	464b      	movlt	r3, r9
 800c4d4:	46a1      	movlt	r9, r4
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4dc:	bfba      	itte	lt
 800c4de:	461c      	movlt	r4, r3
 800c4e0:	2501      	movlt	r5, #1
 800c4e2:	2500      	movge	r5, #0
 800c4e4:	f7ff fd40 	bl	800bf68 <_Balloc>
 800c4e8:	4602      	mov	r2, r0
 800c4ea:	b918      	cbnz	r0, 800c4f4 <__mdiff+0x60>
 800c4ec:	4b31      	ldr	r3, [pc, #196]	@ (800c5b4 <__mdiff+0x120>)
 800c4ee:	f240 2145 	movw	r1, #581	@ 0x245
 800c4f2:	e7e3      	b.n	800c4bc <__mdiff+0x28>
 800c4f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4f8:	6926      	ldr	r6, [r4, #16]
 800c4fa:	60c5      	str	r5, [r0, #12]
 800c4fc:	f109 0310 	add.w	r3, r9, #16
 800c500:	f109 0514 	add.w	r5, r9, #20
 800c504:	f104 0e14 	add.w	lr, r4, #20
 800c508:	f100 0b14 	add.w	fp, r0, #20
 800c50c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c510:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c514:	9301      	str	r3, [sp, #4]
 800c516:	46d9      	mov	r9, fp
 800c518:	f04f 0c00 	mov.w	ip, #0
 800c51c:	9b01      	ldr	r3, [sp, #4]
 800c51e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c522:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c526:	9301      	str	r3, [sp, #4]
 800c528:	fa1f f38a 	uxth.w	r3, sl
 800c52c:	4619      	mov	r1, r3
 800c52e:	b283      	uxth	r3, r0
 800c530:	1acb      	subs	r3, r1, r3
 800c532:	0c00      	lsrs	r0, r0, #16
 800c534:	4463      	add	r3, ip
 800c536:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c53a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c53e:	b29b      	uxth	r3, r3
 800c540:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c544:	4576      	cmp	r6, lr
 800c546:	f849 3b04 	str.w	r3, [r9], #4
 800c54a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c54e:	d8e5      	bhi.n	800c51c <__mdiff+0x88>
 800c550:	1b33      	subs	r3, r6, r4
 800c552:	3b15      	subs	r3, #21
 800c554:	f023 0303 	bic.w	r3, r3, #3
 800c558:	3415      	adds	r4, #21
 800c55a:	3304      	adds	r3, #4
 800c55c:	42a6      	cmp	r6, r4
 800c55e:	bf38      	it	cc
 800c560:	2304      	movcc	r3, #4
 800c562:	441d      	add	r5, r3
 800c564:	445b      	add	r3, fp
 800c566:	461e      	mov	r6, r3
 800c568:	462c      	mov	r4, r5
 800c56a:	4544      	cmp	r4, r8
 800c56c:	d30e      	bcc.n	800c58c <__mdiff+0xf8>
 800c56e:	f108 0103 	add.w	r1, r8, #3
 800c572:	1b49      	subs	r1, r1, r5
 800c574:	f021 0103 	bic.w	r1, r1, #3
 800c578:	3d03      	subs	r5, #3
 800c57a:	45a8      	cmp	r8, r5
 800c57c:	bf38      	it	cc
 800c57e:	2100      	movcc	r1, #0
 800c580:	440b      	add	r3, r1
 800c582:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c586:	b191      	cbz	r1, 800c5ae <__mdiff+0x11a>
 800c588:	6117      	str	r7, [r2, #16]
 800c58a:	e79d      	b.n	800c4c8 <__mdiff+0x34>
 800c58c:	f854 1b04 	ldr.w	r1, [r4], #4
 800c590:	46e6      	mov	lr, ip
 800c592:	0c08      	lsrs	r0, r1, #16
 800c594:	fa1c fc81 	uxtah	ip, ip, r1
 800c598:	4471      	add	r1, lr
 800c59a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c59e:	b289      	uxth	r1, r1
 800c5a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5a4:	f846 1b04 	str.w	r1, [r6], #4
 800c5a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5ac:	e7dd      	b.n	800c56a <__mdiff+0xd6>
 800c5ae:	3f01      	subs	r7, #1
 800c5b0:	e7e7      	b.n	800c582 <__mdiff+0xee>
 800c5b2:	bf00      	nop
 800c5b4:	0800dd5c 	.word	0x0800dd5c
 800c5b8:	0800dd6d 	.word	0x0800dd6d

0800c5bc <__d2b>:
 800c5bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5c0:	460f      	mov	r7, r1
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	ec59 8b10 	vmov	r8, r9, d0
 800c5c8:	4616      	mov	r6, r2
 800c5ca:	f7ff fccd 	bl	800bf68 <_Balloc>
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	b930      	cbnz	r0, 800c5e0 <__d2b+0x24>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	4b23      	ldr	r3, [pc, #140]	@ (800c664 <__d2b+0xa8>)
 800c5d6:	4824      	ldr	r0, [pc, #144]	@ (800c668 <__d2b+0xac>)
 800c5d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5dc:	f000 fc48 	bl	800ce70 <__assert_func>
 800c5e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5e8:	b10d      	cbz	r5, 800c5ee <__d2b+0x32>
 800c5ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5ee:	9301      	str	r3, [sp, #4]
 800c5f0:	f1b8 0300 	subs.w	r3, r8, #0
 800c5f4:	d023      	beq.n	800c63e <__d2b+0x82>
 800c5f6:	4668      	mov	r0, sp
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	f7ff fd7c 	bl	800c0f6 <__lo0bits>
 800c5fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c602:	b1d0      	cbz	r0, 800c63a <__d2b+0x7e>
 800c604:	f1c0 0320 	rsb	r3, r0, #32
 800c608:	fa02 f303 	lsl.w	r3, r2, r3
 800c60c:	430b      	orrs	r3, r1
 800c60e:	40c2      	lsrs	r2, r0
 800c610:	6163      	str	r3, [r4, #20]
 800c612:	9201      	str	r2, [sp, #4]
 800c614:	9b01      	ldr	r3, [sp, #4]
 800c616:	61a3      	str	r3, [r4, #24]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	bf0c      	ite	eq
 800c61c:	2201      	moveq	r2, #1
 800c61e:	2202      	movne	r2, #2
 800c620:	6122      	str	r2, [r4, #16]
 800c622:	b1a5      	cbz	r5, 800c64e <__d2b+0x92>
 800c624:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c628:	4405      	add	r5, r0
 800c62a:	603d      	str	r5, [r7, #0]
 800c62c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c630:	6030      	str	r0, [r6, #0]
 800c632:	4620      	mov	r0, r4
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c63a:	6161      	str	r1, [r4, #20]
 800c63c:	e7ea      	b.n	800c614 <__d2b+0x58>
 800c63e:	a801      	add	r0, sp, #4
 800c640:	f7ff fd59 	bl	800c0f6 <__lo0bits>
 800c644:	9b01      	ldr	r3, [sp, #4]
 800c646:	6163      	str	r3, [r4, #20]
 800c648:	3020      	adds	r0, #32
 800c64a:	2201      	movs	r2, #1
 800c64c:	e7e8      	b.n	800c620 <__d2b+0x64>
 800c64e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c652:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c656:	6038      	str	r0, [r7, #0]
 800c658:	6918      	ldr	r0, [r3, #16]
 800c65a:	f7ff fd2d 	bl	800c0b8 <__hi0bits>
 800c65e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c662:	e7e5      	b.n	800c630 <__d2b+0x74>
 800c664:	0800dd5c 	.word	0x0800dd5c
 800c668:	0800dd6d 	.word	0x0800dd6d

0800c66c <__ssputs_r>:
 800c66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c670:	688e      	ldr	r6, [r1, #8]
 800c672:	461f      	mov	r7, r3
 800c674:	42be      	cmp	r6, r7
 800c676:	680b      	ldr	r3, [r1, #0]
 800c678:	4682      	mov	sl, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	4690      	mov	r8, r2
 800c67e:	d82d      	bhi.n	800c6dc <__ssputs_r+0x70>
 800c680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c684:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c688:	d026      	beq.n	800c6d8 <__ssputs_r+0x6c>
 800c68a:	6965      	ldr	r5, [r4, #20]
 800c68c:	6909      	ldr	r1, [r1, #16]
 800c68e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c692:	eba3 0901 	sub.w	r9, r3, r1
 800c696:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c69a:	1c7b      	adds	r3, r7, #1
 800c69c:	444b      	add	r3, r9
 800c69e:	106d      	asrs	r5, r5, #1
 800c6a0:	429d      	cmp	r5, r3
 800c6a2:	bf38      	it	cc
 800c6a4:	461d      	movcc	r5, r3
 800c6a6:	0553      	lsls	r3, r2, #21
 800c6a8:	d527      	bpl.n	800c6fa <__ssputs_r+0x8e>
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	f7ff fbd0 	bl	800be50 <_malloc_r>
 800c6b0:	4606      	mov	r6, r0
 800c6b2:	b360      	cbz	r0, 800c70e <__ssputs_r+0xa2>
 800c6b4:	6921      	ldr	r1, [r4, #16]
 800c6b6:	464a      	mov	r2, r9
 800c6b8:	f000 fbcc 	bl	800ce54 <memcpy>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	6126      	str	r6, [r4, #16]
 800c6ca:	6165      	str	r5, [r4, #20]
 800c6cc:	444e      	add	r6, r9
 800c6ce:	eba5 0509 	sub.w	r5, r5, r9
 800c6d2:	6026      	str	r6, [r4, #0]
 800c6d4:	60a5      	str	r5, [r4, #8]
 800c6d6:	463e      	mov	r6, r7
 800c6d8:	42be      	cmp	r6, r7
 800c6da:	d900      	bls.n	800c6de <__ssputs_r+0x72>
 800c6dc:	463e      	mov	r6, r7
 800c6de:	6820      	ldr	r0, [r4, #0]
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	4641      	mov	r1, r8
 800c6e4:	f000 fb6a 	bl	800cdbc <memmove>
 800c6e8:	68a3      	ldr	r3, [r4, #8]
 800c6ea:	1b9b      	subs	r3, r3, r6
 800c6ec:	60a3      	str	r3, [r4, #8]
 800c6ee:	6823      	ldr	r3, [r4, #0]
 800c6f0:	4433      	add	r3, r6
 800c6f2:	6023      	str	r3, [r4, #0]
 800c6f4:	2000      	movs	r0, #0
 800c6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fa:	462a      	mov	r2, r5
 800c6fc:	f000 fbfc 	bl	800cef8 <_realloc_r>
 800c700:	4606      	mov	r6, r0
 800c702:	2800      	cmp	r0, #0
 800c704:	d1e0      	bne.n	800c6c8 <__ssputs_r+0x5c>
 800c706:	6921      	ldr	r1, [r4, #16]
 800c708:	4650      	mov	r0, sl
 800c70a:	f7ff fb2d 	bl	800bd68 <_free_r>
 800c70e:	230c      	movs	r3, #12
 800c710:	f8ca 3000 	str.w	r3, [sl]
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295
 800c720:	e7e9      	b.n	800c6f6 <__ssputs_r+0x8a>
	...

0800c724 <_svfiprintf_r>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	4698      	mov	r8, r3
 800c72a:	898b      	ldrh	r3, [r1, #12]
 800c72c:	061b      	lsls	r3, r3, #24
 800c72e:	b09d      	sub	sp, #116	@ 0x74
 800c730:	4607      	mov	r7, r0
 800c732:	460d      	mov	r5, r1
 800c734:	4614      	mov	r4, r2
 800c736:	d510      	bpl.n	800c75a <_svfiprintf_r+0x36>
 800c738:	690b      	ldr	r3, [r1, #16]
 800c73a:	b973      	cbnz	r3, 800c75a <_svfiprintf_r+0x36>
 800c73c:	2140      	movs	r1, #64	@ 0x40
 800c73e:	f7ff fb87 	bl	800be50 <_malloc_r>
 800c742:	6028      	str	r0, [r5, #0]
 800c744:	6128      	str	r0, [r5, #16]
 800c746:	b930      	cbnz	r0, 800c756 <_svfiprintf_r+0x32>
 800c748:	230c      	movs	r3, #12
 800c74a:	603b      	str	r3, [r7, #0]
 800c74c:	f04f 30ff 	mov.w	r0, #4294967295
 800c750:	b01d      	add	sp, #116	@ 0x74
 800c752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c756:	2340      	movs	r3, #64	@ 0x40
 800c758:	616b      	str	r3, [r5, #20]
 800c75a:	2300      	movs	r3, #0
 800c75c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c75e:	2320      	movs	r3, #32
 800c760:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c764:	f8cd 800c 	str.w	r8, [sp, #12]
 800c768:	2330      	movs	r3, #48	@ 0x30
 800c76a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c908 <_svfiprintf_r+0x1e4>
 800c76e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c772:	f04f 0901 	mov.w	r9, #1
 800c776:	4623      	mov	r3, r4
 800c778:	469a      	mov	sl, r3
 800c77a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c77e:	b10a      	cbz	r2, 800c784 <_svfiprintf_r+0x60>
 800c780:	2a25      	cmp	r2, #37	@ 0x25
 800c782:	d1f9      	bne.n	800c778 <_svfiprintf_r+0x54>
 800c784:	ebba 0b04 	subs.w	fp, sl, r4
 800c788:	d00b      	beq.n	800c7a2 <_svfiprintf_r+0x7e>
 800c78a:	465b      	mov	r3, fp
 800c78c:	4622      	mov	r2, r4
 800c78e:	4629      	mov	r1, r5
 800c790:	4638      	mov	r0, r7
 800c792:	f7ff ff6b 	bl	800c66c <__ssputs_r>
 800c796:	3001      	adds	r0, #1
 800c798:	f000 80a7 	beq.w	800c8ea <_svfiprintf_r+0x1c6>
 800c79c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c79e:	445a      	add	r2, fp
 800c7a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7a2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f000 809f 	beq.w	800c8ea <_svfiprintf_r+0x1c6>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7b6:	f10a 0a01 	add.w	sl, sl, #1
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	9307      	str	r3, [sp, #28]
 800c7be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7c4:	4654      	mov	r4, sl
 800c7c6:	2205      	movs	r2, #5
 800c7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7cc:	484e      	ldr	r0, [pc, #312]	@ (800c908 <_svfiprintf_r+0x1e4>)
 800c7ce:	f7f3 fcd7 	bl	8000180 <memchr>
 800c7d2:	9a04      	ldr	r2, [sp, #16]
 800c7d4:	b9d8      	cbnz	r0, 800c80e <_svfiprintf_r+0xea>
 800c7d6:	06d0      	lsls	r0, r2, #27
 800c7d8:	bf44      	itt	mi
 800c7da:	2320      	movmi	r3, #32
 800c7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7e0:	0711      	lsls	r1, r2, #28
 800c7e2:	bf44      	itt	mi
 800c7e4:	232b      	movmi	r3, #43	@ 0x2b
 800c7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7f0:	d015      	beq.n	800c81e <_svfiprintf_r+0xfa>
 800c7f2:	9a07      	ldr	r2, [sp, #28]
 800c7f4:	4654      	mov	r4, sl
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f04f 0c0a 	mov.w	ip, #10
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c802:	3b30      	subs	r3, #48	@ 0x30
 800c804:	2b09      	cmp	r3, #9
 800c806:	d94b      	bls.n	800c8a0 <_svfiprintf_r+0x17c>
 800c808:	b1b0      	cbz	r0, 800c838 <_svfiprintf_r+0x114>
 800c80a:	9207      	str	r2, [sp, #28]
 800c80c:	e014      	b.n	800c838 <_svfiprintf_r+0x114>
 800c80e:	eba0 0308 	sub.w	r3, r0, r8
 800c812:	fa09 f303 	lsl.w	r3, r9, r3
 800c816:	4313      	orrs	r3, r2
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	46a2      	mov	sl, r4
 800c81c:	e7d2      	b.n	800c7c4 <_svfiprintf_r+0xa0>
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	1d19      	adds	r1, r3, #4
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	9103      	str	r1, [sp, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	bfbb      	ittet	lt
 800c82a:	425b      	neglt	r3, r3
 800c82c:	f042 0202 	orrlt.w	r2, r2, #2
 800c830:	9307      	strge	r3, [sp, #28]
 800c832:	9307      	strlt	r3, [sp, #28]
 800c834:	bfb8      	it	lt
 800c836:	9204      	strlt	r2, [sp, #16]
 800c838:	7823      	ldrb	r3, [r4, #0]
 800c83a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c83c:	d10a      	bne.n	800c854 <_svfiprintf_r+0x130>
 800c83e:	7863      	ldrb	r3, [r4, #1]
 800c840:	2b2a      	cmp	r3, #42	@ 0x2a
 800c842:	d132      	bne.n	800c8aa <_svfiprintf_r+0x186>
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	1d1a      	adds	r2, r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	9203      	str	r2, [sp, #12]
 800c84c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c850:	3402      	adds	r4, #2
 800c852:	9305      	str	r3, [sp, #20]
 800c854:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c918 <_svfiprintf_r+0x1f4>
 800c858:	7821      	ldrb	r1, [r4, #0]
 800c85a:	2203      	movs	r2, #3
 800c85c:	4650      	mov	r0, sl
 800c85e:	f7f3 fc8f 	bl	8000180 <memchr>
 800c862:	b138      	cbz	r0, 800c874 <_svfiprintf_r+0x150>
 800c864:	9b04      	ldr	r3, [sp, #16]
 800c866:	eba0 000a 	sub.w	r0, r0, sl
 800c86a:	2240      	movs	r2, #64	@ 0x40
 800c86c:	4082      	lsls	r2, r0
 800c86e:	4313      	orrs	r3, r2
 800c870:	3401      	adds	r4, #1
 800c872:	9304      	str	r3, [sp, #16]
 800c874:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c878:	4824      	ldr	r0, [pc, #144]	@ (800c90c <_svfiprintf_r+0x1e8>)
 800c87a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c87e:	2206      	movs	r2, #6
 800c880:	f7f3 fc7e 	bl	8000180 <memchr>
 800c884:	2800      	cmp	r0, #0
 800c886:	d036      	beq.n	800c8f6 <_svfiprintf_r+0x1d2>
 800c888:	4b21      	ldr	r3, [pc, #132]	@ (800c910 <_svfiprintf_r+0x1ec>)
 800c88a:	bb1b      	cbnz	r3, 800c8d4 <_svfiprintf_r+0x1b0>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	3307      	adds	r3, #7
 800c890:	f023 0307 	bic.w	r3, r3, #7
 800c894:	3308      	adds	r3, #8
 800c896:	9303      	str	r3, [sp, #12]
 800c898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89a:	4433      	add	r3, r6
 800c89c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c89e:	e76a      	b.n	800c776 <_svfiprintf_r+0x52>
 800c8a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	e7a8      	b.n	800c7fc <_svfiprintf_r+0xd8>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	3401      	adds	r4, #1
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	4619      	mov	r1, r3
 800c8b2:	f04f 0c0a 	mov.w	ip, #10
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8bc:	3a30      	subs	r2, #48	@ 0x30
 800c8be:	2a09      	cmp	r2, #9
 800c8c0:	d903      	bls.n	800c8ca <_svfiprintf_r+0x1a6>
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0c6      	beq.n	800c854 <_svfiprintf_r+0x130>
 800c8c6:	9105      	str	r1, [sp, #20]
 800c8c8:	e7c4      	b.n	800c854 <_svfiprintf_r+0x130>
 800c8ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e7f0      	b.n	800c8b6 <_svfiprintf_r+0x192>
 800c8d4:	ab03      	add	r3, sp, #12
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	462a      	mov	r2, r5
 800c8da:	4b0e      	ldr	r3, [pc, #56]	@ (800c914 <_svfiprintf_r+0x1f0>)
 800c8dc:	a904      	add	r1, sp, #16
 800c8de:	4638      	mov	r0, r7
 800c8e0:	f7fd fd7e 	bl	800a3e0 <_printf_float>
 800c8e4:	1c42      	adds	r2, r0, #1
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	d1d6      	bne.n	800c898 <_svfiprintf_r+0x174>
 800c8ea:	89ab      	ldrh	r3, [r5, #12]
 800c8ec:	065b      	lsls	r3, r3, #25
 800c8ee:	f53f af2d 	bmi.w	800c74c <_svfiprintf_r+0x28>
 800c8f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8f4:	e72c      	b.n	800c750 <_svfiprintf_r+0x2c>
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4b05      	ldr	r3, [pc, #20]	@ (800c914 <_svfiprintf_r+0x1f0>)
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4638      	mov	r0, r7
 800c902:	f7fe f805 	bl	800a910 <_printf_i>
 800c906:	e7ed      	b.n	800c8e4 <_svfiprintf_r+0x1c0>
 800c908:	0800dec8 	.word	0x0800dec8
 800c90c:	0800ded2 	.word	0x0800ded2
 800c910:	0800a3e1 	.word	0x0800a3e1
 800c914:	0800c66d 	.word	0x0800c66d
 800c918:	0800dece 	.word	0x0800dece

0800c91c <__sfputc_r>:
 800c91c:	6893      	ldr	r3, [r2, #8]
 800c91e:	3b01      	subs	r3, #1
 800c920:	2b00      	cmp	r3, #0
 800c922:	b410      	push	{r4}
 800c924:	6093      	str	r3, [r2, #8]
 800c926:	da08      	bge.n	800c93a <__sfputc_r+0x1e>
 800c928:	6994      	ldr	r4, [r2, #24]
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	db01      	blt.n	800c932 <__sfputc_r+0x16>
 800c92e:	290a      	cmp	r1, #10
 800c930:	d103      	bne.n	800c93a <__sfputc_r+0x1e>
 800c932:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c936:	f7fe bab4 	b.w	800aea2 <__swbuf_r>
 800c93a:	6813      	ldr	r3, [r2, #0]
 800c93c:	1c58      	adds	r0, r3, #1
 800c93e:	6010      	str	r0, [r2, #0]
 800c940:	7019      	strb	r1, [r3, #0]
 800c942:	4608      	mov	r0, r1
 800c944:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <__sfputs_r>:
 800c94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
 800c950:	4614      	mov	r4, r2
 800c952:	18d5      	adds	r5, r2, r3
 800c954:	42ac      	cmp	r4, r5
 800c956:	d101      	bne.n	800c95c <__sfputs_r+0x12>
 800c958:	2000      	movs	r0, #0
 800c95a:	e007      	b.n	800c96c <__sfputs_r+0x22>
 800c95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c960:	463a      	mov	r2, r7
 800c962:	4630      	mov	r0, r6
 800c964:	f7ff ffda 	bl	800c91c <__sfputc_r>
 800c968:	1c43      	adds	r3, r0, #1
 800c96a:	d1f3      	bne.n	800c954 <__sfputs_r+0xa>
 800c96c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c970 <_vfiprintf_r>:
 800c970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c974:	460d      	mov	r5, r1
 800c976:	b09d      	sub	sp, #116	@ 0x74
 800c978:	4614      	mov	r4, r2
 800c97a:	4698      	mov	r8, r3
 800c97c:	4606      	mov	r6, r0
 800c97e:	b118      	cbz	r0, 800c988 <_vfiprintf_r+0x18>
 800c980:	6a03      	ldr	r3, [r0, #32]
 800c982:	b90b      	cbnz	r3, 800c988 <_vfiprintf_r+0x18>
 800c984:	f7fe f970 	bl	800ac68 <__sinit>
 800c988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c98a:	07d9      	lsls	r1, r3, #31
 800c98c:	d405      	bmi.n	800c99a <_vfiprintf_r+0x2a>
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	059a      	lsls	r2, r3, #22
 800c992:	d402      	bmi.n	800c99a <_vfiprintf_r+0x2a>
 800c994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c996:	f7fe fb96 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800c99a:	89ab      	ldrh	r3, [r5, #12]
 800c99c:	071b      	lsls	r3, r3, #28
 800c99e:	d501      	bpl.n	800c9a4 <_vfiprintf_r+0x34>
 800c9a0:	692b      	ldr	r3, [r5, #16]
 800c9a2:	b99b      	cbnz	r3, 800c9cc <_vfiprintf_r+0x5c>
 800c9a4:	4629      	mov	r1, r5
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	f7fe faba 	bl	800af20 <__swsetup_r>
 800c9ac:	b170      	cbz	r0, 800c9cc <_vfiprintf_r+0x5c>
 800c9ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9b0:	07dc      	lsls	r4, r3, #31
 800c9b2:	d504      	bpl.n	800c9be <_vfiprintf_r+0x4e>
 800c9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b8:	b01d      	add	sp, #116	@ 0x74
 800c9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9be:	89ab      	ldrh	r3, [r5, #12]
 800c9c0:	0598      	lsls	r0, r3, #22
 800c9c2:	d4f7      	bmi.n	800c9b4 <_vfiprintf_r+0x44>
 800c9c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9c6:	f7fe fb7f 	bl	800b0c8 <__retarget_lock_release_recursive>
 800c9ca:	e7f3      	b.n	800c9b4 <_vfiprintf_r+0x44>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9d0:	2320      	movs	r3, #32
 800c9d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9da:	2330      	movs	r3, #48	@ 0x30
 800c9dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cb8c <_vfiprintf_r+0x21c>
 800c9e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c9e4:	f04f 0901 	mov.w	r9, #1
 800c9e8:	4623      	mov	r3, r4
 800c9ea:	469a      	mov	sl, r3
 800c9ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f0:	b10a      	cbz	r2, 800c9f6 <_vfiprintf_r+0x86>
 800c9f2:	2a25      	cmp	r2, #37	@ 0x25
 800c9f4:	d1f9      	bne.n	800c9ea <_vfiprintf_r+0x7a>
 800c9f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c9fa:	d00b      	beq.n	800ca14 <_vfiprintf_r+0xa4>
 800c9fc:	465b      	mov	r3, fp
 800c9fe:	4622      	mov	r2, r4
 800ca00:	4629      	mov	r1, r5
 800ca02:	4630      	mov	r0, r6
 800ca04:	f7ff ffa1 	bl	800c94a <__sfputs_r>
 800ca08:	3001      	adds	r0, #1
 800ca0a:	f000 80a7 	beq.w	800cb5c <_vfiprintf_r+0x1ec>
 800ca0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca10:	445a      	add	r2, fp
 800ca12:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca14:	f89a 3000 	ldrb.w	r3, [sl]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	f000 809f 	beq.w	800cb5c <_vfiprintf_r+0x1ec>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	f04f 32ff 	mov.w	r2, #4294967295
 800ca24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca28:	f10a 0a01 	add.w	sl, sl, #1
 800ca2c:	9304      	str	r3, [sp, #16]
 800ca2e:	9307      	str	r3, [sp, #28]
 800ca30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca34:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca36:	4654      	mov	r4, sl
 800ca38:	2205      	movs	r2, #5
 800ca3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca3e:	4853      	ldr	r0, [pc, #332]	@ (800cb8c <_vfiprintf_r+0x21c>)
 800ca40:	f7f3 fb9e 	bl	8000180 <memchr>
 800ca44:	9a04      	ldr	r2, [sp, #16]
 800ca46:	b9d8      	cbnz	r0, 800ca80 <_vfiprintf_r+0x110>
 800ca48:	06d1      	lsls	r1, r2, #27
 800ca4a:	bf44      	itt	mi
 800ca4c:	2320      	movmi	r3, #32
 800ca4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca52:	0713      	lsls	r3, r2, #28
 800ca54:	bf44      	itt	mi
 800ca56:	232b      	movmi	r3, #43	@ 0x2b
 800ca58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca62:	d015      	beq.n	800ca90 <_vfiprintf_r+0x120>
 800ca64:	9a07      	ldr	r2, [sp, #28]
 800ca66:	4654      	mov	r4, sl
 800ca68:	2000      	movs	r0, #0
 800ca6a:	f04f 0c0a 	mov.w	ip, #10
 800ca6e:	4621      	mov	r1, r4
 800ca70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca74:	3b30      	subs	r3, #48	@ 0x30
 800ca76:	2b09      	cmp	r3, #9
 800ca78:	d94b      	bls.n	800cb12 <_vfiprintf_r+0x1a2>
 800ca7a:	b1b0      	cbz	r0, 800caaa <_vfiprintf_r+0x13a>
 800ca7c:	9207      	str	r2, [sp, #28]
 800ca7e:	e014      	b.n	800caaa <_vfiprintf_r+0x13a>
 800ca80:	eba0 0308 	sub.w	r3, r0, r8
 800ca84:	fa09 f303 	lsl.w	r3, r9, r3
 800ca88:	4313      	orrs	r3, r2
 800ca8a:	9304      	str	r3, [sp, #16]
 800ca8c:	46a2      	mov	sl, r4
 800ca8e:	e7d2      	b.n	800ca36 <_vfiprintf_r+0xc6>
 800ca90:	9b03      	ldr	r3, [sp, #12]
 800ca92:	1d19      	adds	r1, r3, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	9103      	str	r1, [sp, #12]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	bfbb      	ittet	lt
 800ca9c:	425b      	neglt	r3, r3
 800ca9e:	f042 0202 	orrlt.w	r2, r2, #2
 800caa2:	9307      	strge	r3, [sp, #28]
 800caa4:	9307      	strlt	r3, [sp, #28]
 800caa6:	bfb8      	it	lt
 800caa8:	9204      	strlt	r2, [sp, #16]
 800caaa:	7823      	ldrb	r3, [r4, #0]
 800caac:	2b2e      	cmp	r3, #46	@ 0x2e
 800caae:	d10a      	bne.n	800cac6 <_vfiprintf_r+0x156>
 800cab0:	7863      	ldrb	r3, [r4, #1]
 800cab2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cab4:	d132      	bne.n	800cb1c <_vfiprintf_r+0x1ac>
 800cab6:	9b03      	ldr	r3, [sp, #12]
 800cab8:	1d1a      	adds	r2, r3, #4
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	9203      	str	r2, [sp, #12]
 800cabe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cac2:	3402      	adds	r4, #2
 800cac4:	9305      	str	r3, [sp, #20]
 800cac6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cb9c <_vfiprintf_r+0x22c>
 800caca:	7821      	ldrb	r1, [r4, #0]
 800cacc:	2203      	movs	r2, #3
 800cace:	4650      	mov	r0, sl
 800cad0:	f7f3 fb56 	bl	8000180 <memchr>
 800cad4:	b138      	cbz	r0, 800cae6 <_vfiprintf_r+0x176>
 800cad6:	9b04      	ldr	r3, [sp, #16]
 800cad8:	eba0 000a 	sub.w	r0, r0, sl
 800cadc:	2240      	movs	r2, #64	@ 0x40
 800cade:	4082      	lsls	r2, r0
 800cae0:	4313      	orrs	r3, r2
 800cae2:	3401      	adds	r4, #1
 800cae4:	9304      	str	r3, [sp, #16]
 800cae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caea:	4829      	ldr	r0, [pc, #164]	@ (800cb90 <_vfiprintf_r+0x220>)
 800caec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caf0:	2206      	movs	r2, #6
 800caf2:	f7f3 fb45 	bl	8000180 <memchr>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d03f      	beq.n	800cb7a <_vfiprintf_r+0x20a>
 800cafa:	4b26      	ldr	r3, [pc, #152]	@ (800cb94 <_vfiprintf_r+0x224>)
 800cafc:	bb1b      	cbnz	r3, 800cb46 <_vfiprintf_r+0x1d6>
 800cafe:	9b03      	ldr	r3, [sp, #12]
 800cb00:	3307      	adds	r3, #7
 800cb02:	f023 0307 	bic.w	r3, r3, #7
 800cb06:	3308      	adds	r3, #8
 800cb08:	9303      	str	r3, [sp, #12]
 800cb0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb0c:	443b      	add	r3, r7
 800cb0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb10:	e76a      	b.n	800c9e8 <_vfiprintf_r+0x78>
 800cb12:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb16:	460c      	mov	r4, r1
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e7a8      	b.n	800ca6e <_vfiprintf_r+0xfe>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	3401      	adds	r4, #1
 800cb20:	9305      	str	r3, [sp, #20]
 800cb22:	4619      	mov	r1, r3
 800cb24:	f04f 0c0a 	mov.w	ip, #10
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb2e:	3a30      	subs	r2, #48	@ 0x30
 800cb30:	2a09      	cmp	r2, #9
 800cb32:	d903      	bls.n	800cb3c <_vfiprintf_r+0x1cc>
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d0c6      	beq.n	800cac6 <_vfiprintf_r+0x156>
 800cb38:	9105      	str	r1, [sp, #20]
 800cb3a:	e7c4      	b.n	800cac6 <_vfiprintf_r+0x156>
 800cb3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb40:	4604      	mov	r4, r0
 800cb42:	2301      	movs	r3, #1
 800cb44:	e7f0      	b.n	800cb28 <_vfiprintf_r+0x1b8>
 800cb46:	ab03      	add	r3, sp, #12
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	4b12      	ldr	r3, [pc, #72]	@ (800cb98 <_vfiprintf_r+0x228>)
 800cb4e:	a904      	add	r1, sp, #16
 800cb50:	4630      	mov	r0, r6
 800cb52:	f7fd fc45 	bl	800a3e0 <_printf_float>
 800cb56:	4607      	mov	r7, r0
 800cb58:	1c78      	adds	r0, r7, #1
 800cb5a:	d1d6      	bne.n	800cb0a <_vfiprintf_r+0x19a>
 800cb5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb5e:	07d9      	lsls	r1, r3, #31
 800cb60:	d405      	bmi.n	800cb6e <_vfiprintf_r+0x1fe>
 800cb62:	89ab      	ldrh	r3, [r5, #12]
 800cb64:	059a      	lsls	r2, r3, #22
 800cb66:	d402      	bmi.n	800cb6e <_vfiprintf_r+0x1fe>
 800cb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb6a:	f7fe faad 	bl	800b0c8 <__retarget_lock_release_recursive>
 800cb6e:	89ab      	ldrh	r3, [r5, #12]
 800cb70:	065b      	lsls	r3, r3, #25
 800cb72:	f53f af1f 	bmi.w	800c9b4 <_vfiprintf_r+0x44>
 800cb76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb78:	e71e      	b.n	800c9b8 <_vfiprintf_r+0x48>
 800cb7a:	ab03      	add	r3, sp, #12
 800cb7c:	9300      	str	r3, [sp, #0]
 800cb7e:	462a      	mov	r2, r5
 800cb80:	4b05      	ldr	r3, [pc, #20]	@ (800cb98 <_vfiprintf_r+0x228>)
 800cb82:	a904      	add	r1, sp, #16
 800cb84:	4630      	mov	r0, r6
 800cb86:	f7fd fec3 	bl	800a910 <_printf_i>
 800cb8a:	e7e4      	b.n	800cb56 <_vfiprintf_r+0x1e6>
 800cb8c:	0800dec8 	.word	0x0800dec8
 800cb90:	0800ded2 	.word	0x0800ded2
 800cb94:	0800a3e1 	.word	0x0800a3e1
 800cb98:	0800c94b 	.word	0x0800c94b
 800cb9c:	0800dece 	.word	0x0800dece

0800cba0 <__sflush_r>:
 800cba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba8:	0716      	lsls	r6, r2, #28
 800cbaa:	4605      	mov	r5, r0
 800cbac:	460c      	mov	r4, r1
 800cbae:	d454      	bmi.n	800cc5a <__sflush_r+0xba>
 800cbb0:	684b      	ldr	r3, [r1, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	dc02      	bgt.n	800cbbc <__sflush_r+0x1c>
 800cbb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dd48      	ble.n	800cc4e <__sflush_r+0xae>
 800cbbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbbe:	2e00      	cmp	r6, #0
 800cbc0:	d045      	beq.n	800cc4e <__sflush_r+0xae>
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbc8:	682f      	ldr	r7, [r5, #0]
 800cbca:	6a21      	ldr	r1, [r4, #32]
 800cbcc:	602b      	str	r3, [r5, #0]
 800cbce:	d030      	beq.n	800cc32 <__sflush_r+0x92>
 800cbd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	0759      	lsls	r1, r3, #29
 800cbd6:	d505      	bpl.n	800cbe4 <__sflush_r+0x44>
 800cbd8:	6863      	ldr	r3, [r4, #4]
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbde:	b10b      	cbz	r3, 800cbe4 <__sflush_r+0x44>
 800cbe0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cbe2:	1ad2      	subs	r2, r2, r3
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbe8:	6a21      	ldr	r1, [r4, #32]
 800cbea:	4628      	mov	r0, r5
 800cbec:	47b0      	blx	r6
 800cbee:	1c43      	adds	r3, r0, #1
 800cbf0:	89a3      	ldrh	r3, [r4, #12]
 800cbf2:	d106      	bne.n	800cc02 <__sflush_r+0x62>
 800cbf4:	6829      	ldr	r1, [r5, #0]
 800cbf6:	291d      	cmp	r1, #29
 800cbf8:	d82b      	bhi.n	800cc52 <__sflush_r+0xb2>
 800cbfa:	4a2a      	ldr	r2, [pc, #168]	@ (800cca4 <__sflush_r+0x104>)
 800cbfc:	410a      	asrs	r2, r1
 800cbfe:	07d6      	lsls	r6, r2, #31
 800cc00:	d427      	bmi.n	800cc52 <__sflush_r+0xb2>
 800cc02:	2200      	movs	r2, #0
 800cc04:	6062      	str	r2, [r4, #4]
 800cc06:	04d9      	lsls	r1, r3, #19
 800cc08:	6922      	ldr	r2, [r4, #16]
 800cc0a:	6022      	str	r2, [r4, #0]
 800cc0c:	d504      	bpl.n	800cc18 <__sflush_r+0x78>
 800cc0e:	1c42      	adds	r2, r0, #1
 800cc10:	d101      	bne.n	800cc16 <__sflush_r+0x76>
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	b903      	cbnz	r3, 800cc18 <__sflush_r+0x78>
 800cc16:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc1a:	602f      	str	r7, [r5, #0]
 800cc1c:	b1b9      	cbz	r1, 800cc4e <__sflush_r+0xae>
 800cc1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc22:	4299      	cmp	r1, r3
 800cc24:	d002      	beq.n	800cc2c <__sflush_r+0x8c>
 800cc26:	4628      	mov	r0, r5
 800cc28:	f7ff f89e 	bl	800bd68 <_free_r>
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc30:	e00d      	b.n	800cc4e <__sflush_r+0xae>
 800cc32:	2301      	movs	r3, #1
 800cc34:	4628      	mov	r0, r5
 800cc36:	47b0      	blx	r6
 800cc38:	4602      	mov	r2, r0
 800cc3a:	1c50      	adds	r0, r2, #1
 800cc3c:	d1c9      	bne.n	800cbd2 <__sflush_r+0x32>
 800cc3e:	682b      	ldr	r3, [r5, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0c6      	beq.n	800cbd2 <__sflush_r+0x32>
 800cc44:	2b1d      	cmp	r3, #29
 800cc46:	d001      	beq.n	800cc4c <__sflush_r+0xac>
 800cc48:	2b16      	cmp	r3, #22
 800cc4a:	d11e      	bne.n	800cc8a <__sflush_r+0xea>
 800cc4c:	602f      	str	r7, [r5, #0]
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e022      	b.n	800cc98 <__sflush_r+0xf8>
 800cc52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc56:	b21b      	sxth	r3, r3
 800cc58:	e01b      	b.n	800cc92 <__sflush_r+0xf2>
 800cc5a:	690f      	ldr	r7, [r1, #16]
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	d0f6      	beq.n	800cc4e <__sflush_r+0xae>
 800cc60:	0793      	lsls	r3, r2, #30
 800cc62:	680e      	ldr	r6, [r1, #0]
 800cc64:	bf08      	it	eq
 800cc66:	694b      	ldreq	r3, [r1, #20]
 800cc68:	600f      	str	r7, [r1, #0]
 800cc6a:	bf18      	it	ne
 800cc6c:	2300      	movne	r3, #0
 800cc6e:	eba6 0807 	sub.w	r8, r6, r7
 800cc72:	608b      	str	r3, [r1, #8]
 800cc74:	f1b8 0f00 	cmp.w	r8, #0
 800cc78:	dde9      	ble.n	800cc4e <__sflush_r+0xae>
 800cc7a:	6a21      	ldr	r1, [r4, #32]
 800cc7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc7e:	4643      	mov	r3, r8
 800cc80:	463a      	mov	r2, r7
 800cc82:	4628      	mov	r0, r5
 800cc84:	47b0      	blx	r6
 800cc86:	2800      	cmp	r0, #0
 800cc88:	dc08      	bgt.n	800cc9c <__sflush_r+0xfc>
 800cc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc92:	81a3      	strh	r3, [r4, #12]
 800cc94:	f04f 30ff 	mov.w	r0, #4294967295
 800cc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc9c:	4407      	add	r7, r0
 800cc9e:	eba8 0800 	sub.w	r8, r8, r0
 800cca2:	e7e7      	b.n	800cc74 <__sflush_r+0xd4>
 800cca4:	dfbffffe 	.word	0xdfbffffe

0800cca8 <_fflush_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	690b      	ldr	r3, [r1, #16]
 800ccac:	4605      	mov	r5, r0
 800ccae:	460c      	mov	r4, r1
 800ccb0:	b913      	cbnz	r3, 800ccb8 <_fflush_r+0x10>
 800ccb2:	2500      	movs	r5, #0
 800ccb4:	4628      	mov	r0, r5
 800ccb6:	bd38      	pop	{r3, r4, r5, pc}
 800ccb8:	b118      	cbz	r0, 800ccc2 <_fflush_r+0x1a>
 800ccba:	6a03      	ldr	r3, [r0, #32]
 800ccbc:	b90b      	cbnz	r3, 800ccc2 <_fflush_r+0x1a>
 800ccbe:	f7fd ffd3 	bl	800ac68 <__sinit>
 800ccc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0f3      	beq.n	800ccb2 <_fflush_r+0xa>
 800ccca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cccc:	07d0      	lsls	r0, r2, #31
 800ccce:	d404      	bmi.n	800ccda <_fflush_r+0x32>
 800ccd0:	0599      	lsls	r1, r3, #22
 800ccd2:	d402      	bmi.n	800ccda <_fflush_r+0x32>
 800ccd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccd6:	f7fe f9f6 	bl	800b0c6 <__retarget_lock_acquire_recursive>
 800ccda:	4628      	mov	r0, r5
 800ccdc:	4621      	mov	r1, r4
 800ccde:	f7ff ff5f 	bl	800cba0 <__sflush_r>
 800cce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cce4:	07da      	lsls	r2, r3, #31
 800cce6:	4605      	mov	r5, r0
 800cce8:	d4e4      	bmi.n	800ccb4 <_fflush_r+0xc>
 800ccea:	89a3      	ldrh	r3, [r4, #12]
 800ccec:	059b      	lsls	r3, r3, #22
 800ccee:	d4e1      	bmi.n	800ccb4 <_fflush_r+0xc>
 800ccf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccf2:	f7fe f9e9 	bl	800b0c8 <__retarget_lock_release_recursive>
 800ccf6:	e7dd      	b.n	800ccb4 <_fflush_r+0xc>

0800ccf8 <__swhatbuf_r>:
 800ccf8:	b570      	push	{r4, r5, r6, lr}
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd00:	2900      	cmp	r1, #0
 800cd02:	b096      	sub	sp, #88	@ 0x58
 800cd04:	4615      	mov	r5, r2
 800cd06:	461e      	mov	r6, r3
 800cd08:	da0d      	bge.n	800cd26 <__swhatbuf_r+0x2e>
 800cd0a:	89a3      	ldrh	r3, [r4, #12]
 800cd0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd10:	f04f 0100 	mov.w	r1, #0
 800cd14:	bf14      	ite	ne
 800cd16:	2340      	movne	r3, #64	@ 0x40
 800cd18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd1c:	2000      	movs	r0, #0
 800cd1e:	6031      	str	r1, [r6, #0]
 800cd20:	602b      	str	r3, [r5, #0]
 800cd22:	b016      	add	sp, #88	@ 0x58
 800cd24:	bd70      	pop	{r4, r5, r6, pc}
 800cd26:	466a      	mov	r2, sp
 800cd28:	f000 f862 	bl	800cdf0 <_fstat_r>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	dbec      	blt.n	800cd0a <__swhatbuf_r+0x12>
 800cd30:	9901      	ldr	r1, [sp, #4]
 800cd32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cd36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cd3a:	4259      	negs	r1, r3
 800cd3c:	4159      	adcs	r1, r3
 800cd3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cd42:	e7eb      	b.n	800cd1c <__swhatbuf_r+0x24>

0800cd44 <__smakebuf_r>:
 800cd44:	898b      	ldrh	r3, [r1, #12]
 800cd46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd48:	079d      	lsls	r5, r3, #30
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	d507      	bpl.n	800cd60 <__smakebuf_r+0x1c>
 800cd50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	6123      	str	r3, [r4, #16]
 800cd58:	2301      	movs	r3, #1
 800cd5a:	6163      	str	r3, [r4, #20]
 800cd5c:	b003      	add	sp, #12
 800cd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd60:	ab01      	add	r3, sp, #4
 800cd62:	466a      	mov	r2, sp
 800cd64:	f7ff ffc8 	bl	800ccf8 <__swhatbuf_r>
 800cd68:	9f00      	ldr	r7, [sp, #0]
 800cd6a:	4605      	mov	r5, r0
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f7ff f86e 	bl	800be50 <_malloc_r>
 800cd74:	b948      	cbnz	r0, 800cd8a <__smakebuf_r+0x46>
 800cd76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd7a:	059a      	lsls	r2, r3, #22
 800cd7c:	d4ee      	bmi.n	800cd5c <__smakebuf_r+0x18>
 800cd7e:	f023 0303 	bic.w	r3, r3, #3
 800cd82:	f043 0302 	orr.w	r3, r3, #2
 800cd86:	81a3      	strh	r3, [r4, #12]
 800cd88:	e7e2      	b.n	800cd50 <__smakebuf_r+0xc>
 800cd8a:	89a3      	ldrh	r3, [r4, #12]
 800cd8c:	6020      	str	r0, [r4, #0]
 800cd8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd92:	81a3      	strh	r3, [r4, #12]
 800cd94:	9b01      	ldr	r3, [sp, #4]
 800cd96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cd9a:	b15b      	cbz	r3, 800cdb4 <__smakebuf_r+0x70>
 800cd9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cda0:	4630      	mov	r0, r6
 800cda2:	f000 f837 	bl	800ce14 <_isatty_r>
 800cda6:	b128      	cbz	r0, 800cdb4 <__smakebuf_r+0x70>
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	f023 0303 	bic.w	r3, r3, #3
 800cdae:	f043 0301 	orr.w	r3, r3, #1
 800cdb2:	81a3      	strh	r3, [r4, #12]
 800cdb4:	89a3      	ldrh	r3, [r4, #12]
 800cdb6:	431d      	orrs	r5, r3
 800cdb8:	81a5      	strh	r5, [r4, #12]
 800cdba:	e7cf      	b.n	800cd5c <__smakebuf_r+0x18>

0800cdbc <memmove>:
 800cdbc:	4288      	cmp	r0, r1
 800cdbe:	b510      	push	{r4, lr}
 800cdc0:	eb01 0402 	add.w	r4, r1, r2
 800cdc4:	d902      	bls.n	800cdcc <memmove+0x10>
 800cdc6:	4284      	cmp	r4, r0
 800cdc8:	4623      	mov	r3, r4
 800cdca:	d807      	bhi.n	800cddc <memmove+0x20>
 800cdcc:	1e43      	subs	r3, r0, #1
 800cdce:	42a1      	cmp	r1, r4
 800cdd0:	d008      	beq.n	800cde4 <memmove+0x28>
 800cdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdda:	e7f8      	b.n	800cdce <memmove+0x12>
 800cddc:	4402      	add	r2, r0
 800cdde:	4601      	mov	r1, r0
 800cde0:	428a      	cmp	r2, r1
 800cde2:	d100      	bne.n	800cde6 <memmove+0x2a>
 800cde4:	bd10      	pop	{r4, pc}
 800cde6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdee:	e7f7      	b.n	800cde0 <memmove+0x24>

0800cdf0 <_fstat_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	@ (800ce10 <_fstat_r+0x20>)
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	602b      	str	r3, [r5, #0]
 800cdfe:	f7f4 feed 	bl	8001bdc <_fstat>
 800ce02:	1c43      	adds	r3, r0, #1
 800ce04:	d102      	bne.n	800ce0c <_fstat_r+0x1c>
 800ce06:	682b      	ldr	r3, [r5, #0]
 800ce08:	b103      	cbz	r3, 800ce0c <_fstat_r+0x1c>
 800ce0a:	6023      	str	r3, [r4, #0]
 800ce0c:	bd38      	pop	{r3, r4, r5, pc}
 800ce0e:	bf00      	nop
 800ce10:	2000ccb0 	.word	0x2000ccb0

0800ce14 <_isatty_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	@ (800ce30 <_isatty_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f4 feec 	bl	8001bfc <_isatty>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_isatty_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_isatty_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	2000ccb0 	.word	0x2000ccb0

0800ce34 <_sbrk_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d06      	ldr	r5, [pc, #24]	@ (800ce50 <_sbrk_r+0x1c>)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	602b      	str	r3, [r5, #0]
 800ce40:	f7f4 fef4 	bl	8001c2c <_sbrk>
 800ce44:	1c43      	adds	r3, r0, #1
 800ce46:	d102      	bne.n	800ce4e <_sbrk_r+0x1a>
 800ce48:	682b      	ldr	r3, [r5, #0]
 800ce4a:	b103      	cbz	r3, 800ce4e <_sbrk_r+0x1a>
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	bd38      	pop	{r3, r4, r5, pc}
 800ce50:	2000ccb0 	.word	0x2000ccb0

0800ce54 <memcpy>:
 800ce54:	440a      	add	r2, r1
 800ce56:	4291      	cmp	r1, r2
 800ce58:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce5c:	d100      	bne.n	800ce60 <memcpy+0xc>
 800ce5e:	4770      	bx	lr
 800ce60:	b510      	push	{r4, lr}
 800ce62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce6a:	4291      	cmp	r1, r2
 800ce6c:	d1f9      	bne.n	800ce62 <memcpy+0xe>
 800ce6e:	bd10      	pop	{r4, pc}

0800ce70 <__assert_func>:
 800ce70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce72:	4614      	mov	r4, r2
 800ce74:	461a      	mov	r2, r3
 800ce76:	4b09      	ldr	r3, [pc, #36]	@ (800ce9c <__assert_func+0x2c>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	68d8      	ldr	r0, [r3, #12]
 800ce7e:	b954      	cbnz	r4, 800ce96 <__assert_func+0x26>
 800ce80:	4b07      	ldr	r3, [pc, #28]	@ (800cea0 <__assert_func+0x30>)
 800ce82:	461c      	mov	r4, r3
 800ce84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce88:	9100      	str	r1, [sp, #0]
 800ce8a:	462b      	mov	r3, r5
 800ce8c:	4905      	ldr	r1, [pc, #20]	@ (800cea4 <__assert_func+0x34>)
 800ce8e:	f000 f86f 	bl	800cf70 <fiprintf>
 800ce92:	f000 f87f 	bl	800cf94 <abort>
 800ce96:	4b04      	ldr	r3, [pc, #16]	@ (800cea8 <__assert_func+0x38>)
 800ce98:	e7f4      	b.n	800ce84 <__assert_func+0x14>
 800ce9a:	bf00      	nop
 800ce9c:	2000003c 	.word	0x2000003c
 800cea0:	0800df1e 	.word	0x0800df1e
 800cea4:	0800def0 	.word	0x0800def0
 800cea8:	0800dee3 	.word	0x0800dee3

0800ceac <_calloc_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	fba1 5402 	umull	r5, r4, r1, r2
 800ceb2:	b93c      	cbnz	r4, 800cec4 <_calloc_r+0x18>
 800ceb4:	4629      	mov	r1, r5
 800ceb6:	f7fe ffcb 	bl	800be50 <_malloc_r>
 800ceba:	4606      	mov	r6, r0
 800cebc:	b928      	cbnz	r0, 800ceca <_calloc_r+0x1e>
 800cebe:	2600      	movs	r6, #0
 800cec0:	4630      	mov	r0, r6
 800cec2:	bd70      	pop	{r4, r5, r6, pc}
 800cec4:	220c      	movs	r2, #12
 800cec6:	6002      	str	r2, [r0, #0]
 800cec8:	e7f9      	b.n	800cebe <_calloc_r+0x12>
 800ceca:	462a      	mov	r2, r5
 800cecc:	4621      	mov	r1, r4
 800cece:	f7fe f87d 	bl	800afcc <memset>
 800ced2:	e7f5      	b.n	800cec0 <_calloc_r+0x14>

0800ced4 <__ascii_mbtowc>:
 800ced4:	b082      	sub	sp, #8
 800ced6:	b901      	cbnz	r1, 800ceda <__ascii_mbtowc+0x6>
 800ced8:	a901      	add	r1, sp, #4
 800ceda:	b142      	cbz	r2, 800ceee <__ascii_mbtowc+0x1a>
 800cedc:	b14b      	cbz	r3, 800cef2 <__ascii_mbtowc+0x1e>
 800cede:	7813      	ldrb	r3, [r2, #0]
 800cee0:	600b      	str	r3, [r1, #0]
 800cee2:	7812      	ldrb	r2, [r2, #0]
 800cee4:	1e10      	subs	r0, r2, #0
 800cee6:	bf18      	it	ne
 800cee8:	2001      	movne	r0, #1
 800ceea:	b002      	add	sp, #8
 800ceec:	4770      	bx	lr
 800ceee:	4610      	mov	r0, r2
 800cef0:	e7fb      	b.n	800ceea <__ascii_mbtowc+0x16>
 800cef2:	f06f 0001 	mvn.w	r0, #1
 800cef6:	e7f8      	b.n	800ceea <__ascii_mbtowc+0x16>

0800cef8 <_realloc_r>:
 800cef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cefc:	4680      	mov	r8, r0
 800cefe:	4615      	mov	r5, r2
 800cf00:	460c      	mov	r4, r1
 800cf02:	b921      	cbnz	r1, 800cf0e <_realloc_r+0x16>
 800cf04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf08:	4611      	mov	r1, r2
 800cf0a:	f7fe bfa1 	b.w	800be50 <_malloc_r>
 800cf0e:	b92a      	cbnz	r2, 800cf1c <_realloc_r+0x24>
 800cf10:	f7fe ff2a 	bl	800bd68 <_free_r>
 800cf14:	2400      	movs	r4, #0
 800cf16:	4620      	mov	r0, r4
 800cf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf1c:	f000 f841 	bl	800cfa2 <_malloc_usable_size_r>
 800cf20:	4285      	cmp	r5, r0
 800cf22:	4606      	mov	r6, r0
 800cf24:	d802      	bhi.n	800cf2c <_realloc_r+0x34>
 800cf26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cf2a:	d8f4      	bhi.n	800cf16 <_realloc_r+0x1e>
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	4640      	mov	r0, r8
 800cf30:	f7fe ff8e 	bl	800be50 <_malloc_r>
 800cf34:	4607      	mov	r7, r0
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d0ec      	beq.n	800cf14 <_realloc_r+0x1c>
 800cf3a:	42b5      	cmp	r5, r6
 800cf3c:	462a      	mov	r2, r5
 800cf3e:	4621      	mov	r1, r4
 800cf40:	bf28      	it	cs
 800cf42:	4632      	movcs	r2, r6
 800cf44:	f7ff ff86 	bl	800ce54 <memcpy>
 800cf48:	4621      	mov	r1, r4
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	f7fe ff0c 	bl	800bd68 <_free_r>
 800cf50:	463c      	mov	r4, r7
 800cf52:	e7e0      	b.n	800cf16 <_realloc_r+0x1e>

0800cf54 <__ascii_wctomb>:
 800cf54:	4603      	mov	r3, r0
 800cf56:	4608      	mov	r0, r1
 800cf58:	b141      	cbz	r1, 800cf6c <__ascii_wctomb+0x18>
 800cf5a:	2aff      	cmp	r2, #255	@ 0xff
 800cf5c:	d904      	bls.n	800cf68 <__ascii_wctomb+0x14>
 800cf5e:	228a      	movs	r2, #138	@ 0x8a
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	f04f 30ff 	mov.w	r0, #4294967295
 800cf66:	4770      	bx	lr
 800cf68:	700a      	strb	r2, [r1, #0]
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	4770      	bx	lr
	...

0800cf70 <fiprintf>:
 800cf70:	b40e      	push	{r1, r2, r3}
 800cf72:	b503      	push	{r0, r1, lr}
 800cf74:	4601      	mov	r1, r0
 800cf76:	ab03      	add	r3, sp, #12
 800cf78:	4805      	ldr	r0, [pc, #20]	@ (800cf90 <fiprintf+0x20>)
 800cf7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf7e:	6800      	ldr	r0, [r0, #0]
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	f7ff fcf5 	bl	800c970 <_vfiprintf_r>
 800cf86:	b002      	add	sp, #8
 800cf88:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf8c:	b003      	add	sp, #12
 800cf8e:	4770      	bx	lr
 800cf90:	2000003c 	.word	0x2000003c

0800cf94 <abort>:
 800cf94:	b508      	push	{r3, lr}
 800cf96:	2006      	movs	r0, #6
 800cf98:	f000 f834 	bl	800d004 <raise>
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	f7f4 fde9 	bl	8001b74 <_exit>

0800cfa2 <_malloc_usable_size_r>:
 800cfa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfa6:	1f18      	subs	r0, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bfbc      	itt	lt
 800cfac:	580b      	ldrlt	r3, [r1, r0]
 800cfae:	18c0      	addlt	r0, r0, r3
 800cfb0:	4770      	bx	lr

0800cfb2 <_raise_r>:
 800cfb2:	291f      	cmp	r1, #31
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4605      	mov	r5, r0
 800cfb8:	460c      	mov	r4, r1
 800cfba:	d904      	bls.n	800cfc6 <_raise_r+0x14>
 800cfbc:	2316      	movs	r3, #22
 800cfbe:	6003      	str	r3, [r0, #0]
 800cfc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc4:	bd38      	pop	{r3, r4, r5, pc}
 800cfc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cfc8:	b112      	cbz	r2, 800cfd0 <_raise_r+0x1e>
 800cfca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfce:	b94b      	cbnz	r3, 800cfe4 <_raise_r+0x32>
 800cfd0:	4628      	mov	r0, r5
 800cfd2:	f000 f831 	bl	800d038 <_getpid_r>
 800cfd6:	4622      	mov	r2, r4
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4628      	mov	r0, r5
 800cfdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfe0:	f000 b818 	b.w	800d014 <_kill_r>
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d00a      	beq.n	800cffe <_raise_r+0x4c>
 800cfe8:	1c59      	adds	r1, r3, #1
 800cfea:	d103      	bne.n	800cff4 <_raise_r+0x42>
 800cfec:	2316      	movs	r3, #22
 800cfee:	6003      	str	r3, [r0, #0]
 800cff0:	2001      	movs	r0, #1
 800cff2:	e7e7      	b.n	800cfc4 <_raise_r+0x12>
 800cff4:	2100      	movs	r1, #0
 800cff6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cffa:	4620      	mov	r0, r4
 800cffc:	4798      	blx	r3
 800cffe:	2000      	movs	r0, #0
 800d000:	e7e0      	b.n	800cfc4 <_raise_r+0x12>
	...

0800d004 <raise>:
 800d004:	4b02      	ldr	r3, [pc, #8]	@ (800d010 <raise+0xc>)
 800d006:	4601      	mov	r1, r0
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	f7ff bfd2 	b.w	800cfb2 <_raise_r>
 800d00e:	bf00      	nop
 800d010:	2000003c 	.word	0x2000003c

0800d014 <_kill_r>:
 800d014:	b538      	push	{r3, r4, r5, lr}
 800d016:	4d07      	ldr	r5, [pc, #28]	@ (800d034 <_kill_r+0x20>)
 800d018:	2300      	movs	r3, #0
 800d01a:	4604      	mov	r4, r0
 800d01c:	4608      	mov	r0, r1
 800d01e:	4611      	mov	r1, r2
 800d020:	602b      	str	r3, [r5, #0]
 800d022:	f7f4 fd97 	bl	8001b54 <_kill>
 800d026:	1c43      	adds	r3, r0, #1
 800d028:	d102      	bne.n	800d030 <_kill_r+0x1c>
 800d02a:	682b      	ldr	r3, [r5, #0]
 800d02c:	b103      	cbz	r3, 800d030 <_kill_r+0x1c>
 800d02e:	6023      	str	r3, [r4, #0]
 800d030:	bd38      	pop	{r3, r4, r5, pc}
 800d032:	bf00      	nop
 800d034:	2000ccb0 	.word	0x2000ccb0

0800d038 <_getpid_r>:
 800d038:	f7f4 bd84 	b.w	8001b44 <_getpid>

0800d03c <_init>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	bf00      	nop
 800d040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d042:	bc08      	pop	{r3}
 800d044:	469e      	mov	lr, r3
 800d046:	4770      	bx	lr

0800d048 <_fini>:
 800d048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d04a:	bf00      	nop
 800d04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d04e:	bc08      	pop	{r3}
 800d050:	469e      	mov	lr, r3
 800d052:	4770      	bx	lr
