
EMBEDDED_AI_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f30  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002440  08013070  08013070  00014070  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080154b0  080154b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080154b8  080154b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080154bc  080154bc  000164bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  20000008  080154c0  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007cc  20000200  080156b8  00017200  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200009cc  080156b8  000179cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00017200  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024663  00000000  00000000  00017230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004dc2  00000000  00000000  0003b893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000026d0  00000000  00000000  00040658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001e54  00000000  00000000  00042d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00028ac2  00000000  00000000  00044b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002cc92  00000000  00000000  0006d63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000ec8f3  00000000  00000000  0009a2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000087  00000000  00000000  00186bc3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bd74  00000000  00000000  00186c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  001929c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000200 	.word	0x20000200
 800015c:	00000000 	.word	0x00000000
 8000160:	08013058 	.word	0x08013058

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000204 	.word	0x20000204
 800017c:	08013058 	.word	0x08013058

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	@ 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_d2uiz>:
 8000b78:	004a      	lsls	r2, r1, #1
 8000b7a:	d211      	bcs.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d211      	bcs.n	8000ba6 <__aeabi_d2uiz+0x2e>
 8000b82:	d50d      	bpl.n	8000ba0 <__aeabi_d2uiz+0x28>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d40e      	bmi.n	8000bac <__aeabi_d2uiz+0x34>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_d2uiz+0x3a>
 8000bac:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0000 	mov.w	r0, #0
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b9a0 	b.w	8000f10 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f83c 	bl	8000c54 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2lz>:
 8000be8:	b538      	push	{r3, r4, r5, lr}
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	4604      	mov	r4, r0
 8000bf0:	460d      	mov	r5, r1
 8000bf2:	f7ff ff5b 	bl	8000aac <__aeabi_dcmplt>
 8000bf6:	b928      	cbnz	r0, 8000c04 <__aeabi_d2lz+0x1c>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c00:	f000 b80a 	b.w	8000c18 <__aeabi_d2ulz>
 8000c04:	4620      	mov	r0, r4
 8000c06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c0a:	f000 f805 	bl	8000c18 <__aeabi_d2ulz>
 8000c0e:	4240      	negs	r0, r0
 8000c10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c14:	bd38      	pop	{r3, r4, r5, pc}
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2ulz>:
 8000c18:	b5d0      	push	{r4, r6, r7, lr}
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c4c <__aeabi_d2ulz+0x34>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4606      	mov	r6, r0
 8000c20:	460f      	mov	r7, r1
 8000c22:	f7ff fcd1 	bl	80005c8 <__aeabi_dmul>
 8000c26:	f7ff ffa7 	bl	8000b78 <__aeabi_d2uiz>
 8000c2a:	4604      	mov	r4, r0
 8000c2c:	f7ff fc52 	bl	80004d4 <__aeabi_ui2d>
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <__aeabi_d2ulz+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	f7ff fcc8 	bl	80005c8 <__aeabi_dmul>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	4630      	mov	r0, r6
 8000c3e:	4639      	mov	r1, r7
 8000c40:	f7ff fb0a 	bl	8000258 <__aeabi_dsub>
 8000c44:	f7ff ff98 	bl	8000b78 <__aeabi_d2uiz>
 8000c48:	4621      	mov	r1, r4
 8000c4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000c4c:	3df00000 	.word	0x3df00000
 8000c50:	41f00000 	.word	0x41f00000

08000c54 <__udivmoddi4>:
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c58:	9d08      	ldr	r5, [sp, #32]
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d14e      	bne.n	8000cfe <__udivmoddi4+0xaa>
 8000c60:	4694      	mov	ip, r2
 8000c62:	458c      	cmp	ip, r1
 8000c64:	4686      	mov	lr, r0
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	d962      	bls.n	8000d32 <__udivmoddi4+0xde>
 8000c6c:	b14a      	cbz	r2, 8000c82 <__udivmoddi4+0x2e>
 8000c6e:	f1c2 0320 	rsb	r3, r2, #32
 8000c72:	4091      	lsls	r1, r2
 8000c74:	fa20 f303 	lsr.w	r3, r0, r3
 8000c78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c7c:	4319      	orrs	r1, r3
 8000c7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f f68c 	uxth.w	r6, ip
 8000c8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c92:	fb07 1114 	mls	r1, r7, r4, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb04 f106 	mul.w	r1, r4, r6
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x64>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000caa:	f080 8112 	bcs.w	8000ed2 <__udivmoddi4+0x27e>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 810f 	bls.w	8000ed2 <__udivmoddi4+0x27e>
 8000cb4:	3c02      	subs	r4, #2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	1a59      	subs	r1, r3, r1
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000cc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cca:	fb00 f606 	mul.w	r6, r0, r6
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x94>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cda:	f080 80fc 	bcs.w	8000ed6 <__udivmoddi4+0x282>
 8000cde:	429e      	cmp	r6, r3
 8000ce0:	f240 80f9 	bls.w	8000ed6 <__udivmoddi4+0x282>
 8000ce4:	4463      	add	r3, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	1b9b      	subs	r3, r3, r6
 8000cea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11d      	cbz	r5, 8000cfa <__udivmoddi4+0xa6>
 8000cf2:	40d3      	lsrs	r3, r2
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d905      	bls.n	8000d0e <__udivmoddi4+0xba>
 8000d02:	b10d      	cbz	r5, 8000d08 <__udivmoddi4+0xb4>
 8000d04:	e9c5 0100 	strd	r0, r1, [r5]
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4608      	mov	r0, r1
 8000d0c:	e7f5      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d0e:	fab3 f183 	clz	r1, r3
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d146      	bne.n	8000da4 <__udivmoddi4+0x150>
 8000d16:	42a3      	cmp	r3, r4
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xcc>
 8000d1a:	4290      	cmp	r0, r2
 8000d1c:	f0c0 80f0 	bcc.w	8000f00 <__udivmoddi4+0x2ac>
 8000d20:	1a86      	subs	r6, r0, r2
 8000d22:	eb64 0303 	sbc.w	r3, r4, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	2d00      	cmp	r5, #0
 8000d2a:	d0e6      	beq.n	8000cfa <__udivmoddi4+0xa6>
 8000d2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d30:	e7e3      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000d32:	2a00      	cmp	r2, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x204>
 8000d38:	eba1 040c 	sub.w	r4, r1, ip
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	fa1f f78c 	uxth.w	r7, ip
 8000d44:	2101      	movs	r1, #1
 8000d46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb07 f006 	mul.w	r0, r7, r6
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x11c>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x11a>
 8000d68:	4298      	cmp	r0, r3
 8000d6a:	f200 80cd 	bhi.w	8000f08 <__udivmoddi4+0x2b4>
 8000d6e:	4626      	mov	r6, r4
 8000d70:	1a1c      	subs	r4, r3, r0
 8000d72:	fa1f f38e 	uxth.w	r3, lr
 8000d76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d82:	fb00 f707 	mul.w	r7, r0, r7
 8000d86:	429f      	cmp	r7, r3
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x148>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x146>
 8000d94:	429f      	cmp	r7, r3
 8000d96:	f200 80b0 	bhi.w	8000efa <__udivmoddi4+0x2a6>
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	1bdb      	subs	r3, r3, r7
 8000d9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000da2:	e7a5      	b.n	8000cf0 <__udivmoddi4+0x9c>
 8000da4:	f1c1 0620 	rsb	r6, r1, #32
 8000da8:	408b      	lsls	r3, r1
 8000daa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dae:	431f      	orrs	r7, r3
 8000db0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000db4:	fa04 f301 	lsl.w	r3, r4, r1
 8000db8:	ea43 030c 	orr.w	r3, r3, ip
 8000dbc:	40f4      	lsrs	r4, r6
 8000dbe:	fa00 f801 	lsl.w	r8, r0, r1
 8000dc2:	0c38      	lsrs	r0, r7, #16
 8000dc4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dc8:	fbb4 fef0 	udiv	lr, r4, r0
 8000dcc:	fa1f fc87 	uxth.w	ip, r7
 8000dd0:	fb00 441e 	mls	r4, r0, lr, r4
 8000dd4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ddc:	45a1      	cmp	r9, r4
 8000dde:	fa02 f201 	lsl.w	r2, r2, r1
 8000de2:	d90a      	bls.n	8000dfa <__udivmoddi4+0x1a6>
 8000de4:	193c      	adds	r4, r7, r4
 8000de6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dea:	f080 8084 	bcs.w	8000ef6 <__udivmoddi4+0x2a2>
 8000dee:	45a1      	cmp	r9, r4
 8000df0:	f240 8081 	bls.w	8000ef6 <__udivmoddi4+0x2a2>
 8000df4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	eba4 0409 	sub.w	r4, r4, r9
 8000dfe:	fa1f f983 	uxth.w	r9, r3
 8000e02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e06:	fb00 4413 	mls	r4, r0, r3, r4
 8000e0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e12:	45a4      	cmp	ip, r4
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x1d2>
 8000e16:	193c      	adds	r4, r7, r4
 8000e18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e1c:	d267      	bcs.n	8000eee <__udivmoddi4+0x29a>
 8000e1e:	45a4      	cmp	ip, r4
 8000e20:	d965      	bls.n	8000eee <__udivmoddi4+0x29a>
 8000e22:	3b02      	subs	r3, #2
 8000e24:	443c      	add	r4, r7
 8000e26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e2e:	eba4 040c 	sub.w	r4, r4, ip
 8000e32:	429c      	cmp	r4, r3
 8000e34:	46ce      	mov	lr, r9
 8000e36:	469c      	mov	ip, r3
 8000e38:	d351      	bcc.n	8000ede <__udivmoddi4+0x28a>
 8000e3a:	d04e      	beq.n	8000eda <__udivmoddi4+0x286>
 8000e3c:	b155      	cbz	r5, 8000e54 <__udivmoddi4+0x200>
 8000e3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e42:	eb64 040c 	sbc.w	r4, r4, ip
 8000e46:	fa04 f606 	lsl.w	r6, r4, r6
 8000e4a:	40cb      	lsrs	r3, r1
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	40cc      	lsrs	r4, r1
 8000e50:	e9c5 6400 	strd	r6, r4, [r5]
 8000e54:	2100      	movs	r1, #0
 8000e56:	e750      	b.n	8000cfa <__udivmoddi4+0xa6>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e64:	fa24 f303 	lsr.w	r3, r4, r3
 8000e68:	4094      	lsls	r4, r2
 8000e6a:	430c      	orrs	r4, r1
 8000e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e74:	fa1f f78c 	uxth.w	r7, ip
 8000e78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e80:	0c23      	lsrs	r3, r4, #16
 8000e82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e86:	fb00 f107 	mul.w	r1, r0, r7
 8000e8a:	4299      	cmp	r1, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x24c>
 8000e8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e96:	d22c      	bcs.n	8000ef2 <__udivmoddi4+0x29e>
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	d92a      	bls.n	8000ef2 <__udivmoddi4+0x29e>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ea8:	fb08 3311 	mls	r3, r8, r1, r3
 8000eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000eb0:	fb01 f307 	mul.w	r3, r1, r7
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x276>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ec0:	d213      	bcs.n	8000eea <__udivmoddi4+0x296>
 8000ec2:	42a3      	cmp	r3, r4
 8000ec4:	d911      	bls.n	8000eea <__udivmoddi4+0x296>
 8000ec6:	3902      	subs	r1, #2
 8000ec8:	4464      	add	r4, ip
 8000eca:	1ae4      	subs	r4, r4, r3
 8000ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ed0:	e739      	b.n	8000d46 <__udivmoddi4+0xf2>
 8000ed2:	4604      	mov	r4, r0
 8000ed4:	e6f0      	b.n	8000cb8 <__udivmoddi4+0x64>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e706      	b.n	8000ce8 <__udivmoddi4+0x94>
 8000eda:	45c8      	cmp	r8, r9
 8000edc:	d2ae      	bcs.n	8000e3c <__udivmoddi4+0x1e8>
 8000ede:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ee2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7a8      	b.n	8000e3c <__udivmoddi4+0x1e8>
 8000eea:	4631      	mov	r1, r6
 8000eec:	e7ed      	b.n	8000eca <__udivmoddi4+0x276>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	e799      	b.n	8000e26 <__udivmoddi4+0x1d2>
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	e7d4      	b.n	8000ea0 <__udivmoddi4+0x24c>
 8000ef6:	46d6      	mov	lr, sl
 8000ef8:	e77f      	b.n	8000dfa <__udivmoddi4+0x1a6>
 8000efa:	4463      	add	r3, ip
 8000efc:	3802      	subs	r0, #2
 8000efe:	e74d      	b.n	8000d9c <__udivmoddi4+0x148>
 8000f00:	4606      	mov	r6, r0
 8000f02:	4623      	mov	r3, r4
 8000f04:	4608      	mov	r0, r1
 8000f06:	e70f      	b.n	8000d28 <__udivmoddi4+0xd4>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	e730      	b.n	8000d70 <__udivmoddi4+0x11c>
 8000f0e:	bf00      	nop

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f1c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f2c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000f34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00b      	beq.n	8000f54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f3c:	e000      	b.n	8000f40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f40:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d0f9      	beq.n	8000f3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f4a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b085      	sub	sp, #20
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4013      	ands	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e009      	b.n	8000fba <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	60ba      	str	r2, [r7, #8]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffb0 	bl	8000f14 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf1      	blt.n	8000fa6 <_write+0x12>
	}
	return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <TestConfigLoop.0>:
	AccelerometerData accel;
	GyroscopeData gyro;


void TestConfigLoop(AccelerometerData *accelData,
        GyroscopeData *gyroData) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	f8c7 c004 	str.w	ip, [r7, #4]
    int sensor_enabled;

    // Write default configuration at startup: 500 ms sampling, sensor off.


    printf("Default configuration written: Sampling Frequency = 500 ms, Sensor Enabled = OFF\n");
 8000fda:	481f      	ldr	r0, [pc, #124]	@ (8001058 <TestConfigLoop.0+0x8c>)
 8000fdc:	f00e fe52 	bl	800fc84 <puts>



    while (1) {
        // Read the current configuration from the SD card.
        ReadConfigFromSD(&sampling_frequency, &sensor_enabled);
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f8b4 	bl	8002158 <ReadConfigFromSD>
        printf("Current Config: Sampling Frequency = %d ms, Sensor Enabled = %s\n",
 8000ff0:	6979      	ldr	r1, [r7, #20]
               sampling_frequency, sensor_enabled ? "ON" : "OFF");
 8000ff2:	693b      	ldr	r3, [r7, #16]
        printf("Current Config: Sampling Frequency = %d ms, Sensor Enabled = %s\n",
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <TestConfigLoop.0+0x30>
 8000ff8:	4b18      	ldr	r3, [pc, #96]	@ (800105c <TestConfigLoop.0+0x90>)
 8000ffa:	e000      	b.n	8000ffe <TestConfigLoop.0+0x32>
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <TestConfigLoop.0+0x94>)
 8000ffe:	461a      	mov	r2, r3
 8001000:	4818      	ldr	r0, [pc, #96]	@ (8001064 <TestConfigLoop.0+0x98>)
 8001002:	f00e fdd7 	bl	800fbb4 <iprintf>

        // Manage sensor reading based on the current configuration.
        // If sensor_enabled is true, the sensor will be woken up and data read.
        // Otherwise, it will be deinitialized to save power.
        ManageSensorReading(&accelData, &gyroData, sampling_frequency, sensor_enabled);
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f107 0108 	add.w	r1, r7, #8
 800100e:	f107 000c 	add.w	r0, r7, #12
 8001012:	f001 f811 	bl	8002038 <ManageSensorReading>
       // HAL_Delay(3000);

        // For testing: Toggle configuration values.
        // If sensor is OFF, change to 1000 ms sampling and turn sensor ON.
        // Otherwise, revert to the default values.
        if (sensor_enabled == 0) {
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <TestConfigLoop.0+0x5c>
            sampling_frequency = 1000;
 800101c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001020:	617b      	str	r3, [r7, #20]
            sensor_enabled = 1;
 8001022:	2301      	movs	r3, #1
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	e004      	b.n	8001032 <TestConfigLoop.0+0x66>
        } else {
            sampling_frequency = 500;
 8001028:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800102c:	617b      	str	r3, [r7, #20]
            sensor_enabled = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
        }

        // Update the configuration on the SD card with the new values.
        UpdateConfigOnSD(sampling_frequency, sensor_enabled);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f001 f9dd 	bl	80023f8 <UpdateConfigOnSD>
        printf("Updated Config: Sampling Frequency = %d ms, Sensor Enabled = %s\n",
 800103e:	6979      	ldr	r1, [r7, #20]
               sampling_frequency, sensor_enabled ? "ON" : "OFF");
 8001040:	693b      	ldr	r3, [r7, #16]
        printf("Updated Config: Sampling Frequency = %d ms, Sensor Enabled = %s\n",
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <TestConfigLoop.0+0x7e>
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <TestConfigLoop.0+0x90>)
 8001048:	e000      	b.n	800104c <TestConfigLoop.0+0x80>
 800104a:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <TestConfigLoop.0+0x94>)
 800104c:	461a      	mov	r2, r3
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <TestConfigLoop.0+0x9c>)
 8001050:	f00e fdb0 	bl	800fbb4 <iprintf>
    while (1) {
 8001054:	e7c4      	b.n	8000fe0 <TestConfigLoop.0+0x14>
 8001056:	bf00      	nop
 8001058:	08013070 	.word	0x08013070
 800105c:	080130c4 	.word	0x080130c4
 8001060:	080130c8 	.word	0x080130c8
 8001064:	080130cc 	.word	0x080130cc
 8001068:	08013110 	.word	0x08013110

0800106c <main>:
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09a      	sub	sp, #104	@ 0x68
 8001070:	af00      	add	r7, sp, #0
int main(void)
 8001072:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001076:	663b      	str	r3, [r7, #96]	@ 0x60
  HAL_Init();
 8001078:	f003 fcc2 	bl	8004a00 <HAL_Init>
  SystemClock_Config();
 800107c:	f000 f848 	bl	8001110 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001080:	f000 f89e 	bl	80011c0 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001084:	f000 f9d2 	bl	800142c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001088:	f000 f8b8 	bl	80011fc <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800108c:	f000 f8f6 	bl	800127c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8001090:	f000 f940 	bl	8001314 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8001094:	f009 fa44 	bl	800a520 <MX_FATFS_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <main+0x36>
    Error_Handler();
 800109e:	f000 fa09 	bl	80014b4 <Error_Handler>
  MX_TIM2_Init();
 80010a2:	f000 f975 	bl	8001390 <MX_TIM2_Init>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f004 f83c 	bl	800512c <HAL_GPIO_WritePin>
	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1,
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	2203      	movs	r2, #3
 80010b8:	21d6      	movs	r1, #214	@ 0xd6
 80010ba:	4812      	ldr	r0, [pc, #72]	@ (8001104 <main+0x98>)
 80010bc:	f004 fc30 	bl	8005920 <HAL_I2C_IsDeviceReady>
 80010c0:	4603      	mov	r3, r0
 80010c2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (status == HAL_OK) {
 80010c6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <main+0x6a>
		printf("ISM330DHCX is ready for communication.\n");
 80010ce:	480e      	ldr	r0, [pc, #56]	@ (8001108 <main+0x9c>)
 80010d0:	f00e fdd8 	bl	800fc84 <puts>
 80010d4:	e005      	b.n	80010e2 <main+0x76>
		printf("ISM330DHCX is not ready. HAL_StatusTypeDef: %d\n", status);
 80010d6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80010da:	4619      	mov	r1, r3
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <main+0xa0>)
 80010de:	f00e fd69 	bl	800fbb4 <iprintf>
	InitializeISM330DHCX2();
 80010e2:	f000 fcc9 	bl	8001a78 <InitializeISM330DHCX2>
	InitializeNanoEdgeAI();
 80010e6:	f000 fcaf 	bl	8001a48 <InitializeNanoEdgeAI>
	TMP1826_Init();
 80010ea:	f009 fa05 	bl	800a4f8 <TMP1826_Init>
//
//
//		           HAL_Delay(1000);  // Read temperature every 2 seconds


		TestConfigLoop(&accel,&gyro);
 80010ee:	1d3a      	adds	r2, r7, #4
 80010f0:	f107 0318 	add.w	r3, r7, #24
 80010f4:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80010f8:	468c      	mov	ip, r1
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff65 	bl	8000fcc <TestConfigLoop.0>
 8001102:	e7f4      	b.n	80010ee <main+0x82>
 8001104:	2000021c 	.word	0x2000021c
 8001108:	08013154 	.word	0x08013154
 800110c:	0801317c 	.word	0x0801317c

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09a      	sub	sp, #104	@ 0x68
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 0320 	add.w	r3, r7, #32
 800111a:	2248      	movs	r2, #72	@ 0x48
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f00e ff10 	bl	800ff44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	1d3b      	adds	r3, r7, #4
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <SystemClock_Config+0xac>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800113e:	4a1f      	ldr	r2, [pc, #124]	@ (80011bc <SystemClock_Config+0xac>)
 8001140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <SystemClock_Config+0xac>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001152:	2322      	movs	r3, #34	@ 0x22
 8001154:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001156:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2340      	movs	r3, #64	@ 0x40
 8001162:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001164:	2300      	movs	r3, #0
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001168:	23a0      	movs	r3, #160	@ 0xa0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4618      	mov	r0, r3
 8001176:	f006 f985 	bl	8007484 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001180:	f000 f998 	bl	80014b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001184:	236f      	movs	r3, #111	@ 0x6f
 8001186:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f006 fce1 	bl	8007b6c <HAL_RCC_ClockConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011b0:	f000 f980 	bl	80014b4 <Error_Handler>
  }
}
 80011b4:	bf00      	nop
 80011b6:	3768      	adds	r7, #104	@ 0x68
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	58000400 	.word	0x58000400

080011c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	@ 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2250      	movs	r2, #80	@ 0x50
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f00e feb9 	bl	800ff44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80011d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80011dc:	2310      	movs	r3, #16
 80011de:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 f901 	bl	80083ea <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80011ee:	f000 f961 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80011f2:	bf00      	nop
 80011f4:	3750      	adds	r7, #80	@ 0x50
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	@ (8001274 <MX_I2C1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001206:	4b1a      	ldr	r3, [pc, #104]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	@ (8001278 <MX_I2C1_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	@ (8001270 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	@ (8001270 <MX_I2C1_Init+0x74>)
 8001238:	f003 ff90 	bl	800515c <HAL_I2C_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 f937 	bl	80014b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	@ (8001270 <MX_I2C1_Init+0x74>)
 800124a:	f005 fcef 	bl	8006c2c <HAL_I2CEx_ConfigAnalogFilter>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f92e 	bl	80014b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_I2C1_Init+0x74>)
 800125c:	f005 fd31 	bl	8006cc2 <HAL_I2CEx_ConfigDigitalFilter>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f925 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000021c 	.word	0x2000021c
 8001274:	40005400 	.word	0x40005400
 8001278:	00b07cb4 	.word	0x00b07cb4

0800127c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 8001282:	4a23      	ldr	r2, [pc, #140]	@ (8001310 <MX_LPUART1_UART_Init+0x94>)
 8001284:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b1c      	ldr	r3, [pc, #112]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b8:	4b14      	ldr	r3, [pc, #80]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80012be:	4b13      	ldr	r3, [pc, #76]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012c6:	f008 fb61 	bl	800998c <HAL_UART_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80012d0:	f000 f8f0 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d4:	2100      	movs	r1, #0
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012d8:	f009 f828 	bl	800a32c <HAL_UARTEx_SetTxFifoThreshold>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012e2:	f000 f8e7 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e6:	2100      	movs	r1, #0
 80012e8:	4808      	ldr	r0, [pc, #32]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012ea:	f009 f85d 	bl	800a3a8 <HAL_UARTEx_SetRxFifoThreshold>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012f4:	f000 f8de 	bl	80014b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 80012fa:	f008 ffde 	bl	800a2ba <HAL_UARTEx_DisableFifoMode>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001304:	f000 f8d6 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000270 	.word	0x20000270
 8001310:	40008000 	.word	0x40008000

08001314 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <MX_SPI1_Init+0x74>)
 800131a:	4a1c      	ldr	r2, [pc, #112]	@ (800138c <MX_SPI1_Init+0x78>)
 800131c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131e:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001320:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001324:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800132c:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <MX_SPI1_Init+0x74>)
 800132e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001332:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133a:	4b13      	ldr	r3, [pc, #76]	@ (8001388 <MX_SPI1_Init+0x74>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001342:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001346:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <MX_SPI1_Init+0x74>)
 800134a:	2230      	movs	r2, #48	@ 0x30
 800134c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <MX_SPI1_Init+0x74>)
 800135c:	2200      	movs	r2, #0
 800135e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001360:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001362:	2207      	movs	r2, #7
 8001364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001366:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <MX_SPI1_Init+0x74>)
 800136e:	2208      	movs	r2, #8
 8001370:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	@ (8001388 <MX_SPI1_Init+0x74>)
 8001374:	f007 fac0 	bl	80088f8 <HAL_SPI_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800137e:	f000 f899 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000304 	.word	0x20000304
 800138c:	40013000 	.word	0x40013000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 80013b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013b8:	221f      	movs	r2, #31
 80013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d0:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d6:	4814      	ldr	r0, [pc, #80]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013d8:	f008 f82c 	bl	8009434 <HAL_TIM_Base_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013e2:	f000 f867 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_TIM2_Init+0x98>)
 80013f4:	f008 f875 	bl	80094e2 <HAL_TIM_ConfigClockSource>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fe:	f000 f859 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	@ (8001428 <MX_TIM2_Init+0x98>)
 8001410:	f008 fa3c 	bl	800988c <HAL_TIMEx_MasterConfigSynchronization>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800141a:	f000 f84b 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000368 	.word	0x20000368

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	2002      	movs	r0, #2
 8001442:	f7ff fd8e 	bl	8000f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2001      	movs	r0, #1
 8001448:	f7ff fd8b 	bl	8000f62 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800144c:	2004      	movs	r0, #4
 800144e:	f7ff fd88 	bl	8000f62 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|SA0_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001458:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800145c:	f003 fe66 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_io_GPIO_Port, temp_io_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001466:	4812      	ldr	r0, [pc, #72]	@ (80014b0 <MX_GPIO_Init+0x84>)
 8001468:	f003 fe60 	bl	800512c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SA0_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SA0_Pin;
 800146c:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001486:	f003 fce1 	bl	8004e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_io_Pin */
  GPIO_InitStruct.Pin = temp_io_Pin;
 800148a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001490:	2311      	movs	r3, #17
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001494:	2301      	movs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(temp_io_GPIO_Port, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	4803      	ldr	r0, [pc, #12]	@ (80014b0 <MX_GPIO_Init+0x84>)
 80014a2:	f003 fcd3 	bl	8004e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	48000800 	.word	0x48000800

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <LL_AHB2_GRP1_EnableClock>:
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014e4:	68fb      	ldr	r3, [r7, #12]
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4313      	orrs	r3, r2
 8001508:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800150a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001516:	68fb      	ldr	r3, [r7, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800152c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800153c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001540:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001548:	68fb      	ldr	r3, [r7, #12]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001556:	b480      	push	{r7}
 8001558:	b085      	sub	sp, #20
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800155e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001562:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001564:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001572:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4013      	ands	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800157a:	68fb      	ldr	r3, [r7, #12]
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b09c      	sub	sp, #112	@ 0x70
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2250      	movs	r2, #80	@ 0x50
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00e fcc3 	bl	800ff44 <memset>
  if(hi2c->Instance==I2C1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001640 <HAL_I2C_MspInit+0xa8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d136      	bne.n	8001636 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015c8:	2304      	movs	r3, #4
 80015ca:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015cc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80015d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 ff07 	bl	80083ea <HAL_RCCEx_PeriphCLKConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015e2:	f7ff ff67 	bl	80014b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2002      	movs	r0, #2
 80015e8:	f7ff ff6a 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f2:	2312      	movs	r3, #18
 80015f4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015fe:	2304      	movs	r3, #4
 8001600:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001606:	4619      	mov	r1, r3
 8001608:	480e      	ldr	r0, [pc, #56]	@ (8001644 <HAL_I2C_MspInit+0xac>)
 800160a:	f003 fc1f 	bl	8004e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800160e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001612:	f7ff ff6e 	bl	80014f2 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	201e      	movs	r0, #30
 800161c:	f003 fb75 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001620:	201e      	movs	r0, #30
 8001622:	f003 fb8c 	bl	8004d3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	201f      	movs	r0, #31
 800162c:	f003 fb6d 	bl	8004d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001630:	201f      	movs	r0, #31
 8001632:	f003 fb84 	bl	8004d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001636:	bf00      	nop
 8001638:	3770      	adds	r7, #112	@ 0x70
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40005400 	.word	0x40005400
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09c      	sub	sp, #112	@ 0x70
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2250      	movs	r2, #80	@ 0x50
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00e fc6b 	bl	800ff44 <memset>
  if(huart->Instance==LPUART1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <HAL_UART_MspInit+0x84>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d124      	bne.n	80016c2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001678:	2302      	movs	r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001680:	f107 030c 	add.w	r3, r7, #12
 8001684:	4618      	mov	r0, r3
 8001686:	f006 feb0 	bl	80083ea <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff ff10 	bl	80014b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff ff45 	bl	8001524 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff ff10 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80016a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	2300      	movs	r3, #0
 80016b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80016b2:	2308      	movs	r3, #8
 80016b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016ba:	4619      	mov	r1, r3
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <HAL_UART_MspInit+0x88>)
 80016be:	f003 fbc5 	bl	8004e4c <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3770      	adds	r7, #112	@ 0x70
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40008000 	.word	0x40008000
 80016d0:	48000400 	.word	0x48000400

080016d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001730 <HAL_SPI_MspInit+0x5c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d117      	bne.n	8001726 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016f6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80016fa:	f7ff ff2c 	bl	8001556 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fede 	bl	80014c0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8001704:	23c2      	movs	r3, #194	@ 0xc2
 8001706:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001714:	2305      	movs	r3, #5
 8001716:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001722:	f003 fb93 	bl	8004e4c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40013000 	.word	0x40013000

08001734 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001744:	d102      	bne.n	800174c <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001746:	2001      	movs	r0, #1
 8001748:	f7ff fed3 	bl	80014f2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <NMI_Handler+0x4>

0800175c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <HardFault_Handler+0x4>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <MemManage_Handler+0x4>

0800176c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <BusFault_Handler+0x4>

08001774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <UsageFault_Handler+0x4>

0800177c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017aa:	f003 f983 	bl	8004ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <I2C1_EV_IRQHandler+0x10>)
 80017ba:	f004 f99d 	bl	8005af8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000021c 	.word	0x2000021c

080017c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017cc:	4802      	ldr	r0, [pc, #8]	@ (80017d8 <I2C1_ER_IRQHandler+0x10>)
 80017ce:	f004 f9ad 	bl	8005b2c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000021c 	.word	0x2000021c

080017dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_kill>:

int _kill(int pid, int sig)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017f6:	f00e fc19 	bl	801002c <__errno>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2216      	movs	r2, #22
 80017fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <_exit>:

void _exit (int status)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff ffe7 	bl	80017ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800181e:	bf00      	nop
 8001820:	e7fd      	b.n	800181e <_exit+0x12>

08001822 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e00a      	b.n	800184a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001834:	f3af 8000 	nop.w
 8001838:	4601      	mov	r1, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	60ba      	str	r2, [r7, #8]
 8001840:	b2ca      	uxtb	r2, r1
 8001842:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	dbf0      	blt.n	8001834 <_read+0x12>
  }

  return len;
 8001852:	687b      	ldr	r3, [r7, #4]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <_close>:
  }
  return len;
}

int _close(int file)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001868:	4618      	mov	r0, r3
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001884:	605a      	str	r2, [r3, #4]
  return 0;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <_isatty>:

int _isatty(int file)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b085      	sub	sp, #20
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018cc:	4a14      	ldr	r2, [pc, #80]	@ (8001920 <_sbrk+0x5c>)
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <_sbrk+0x60>)
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d8:	4b13      	ldr	r3, [pc, #76]	@ (8001928 <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <_sbrk+0x64>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <_sbrk+0x68>)
 80018e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d207      	bcs.n	8001904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018f4:	f00e fb9a 	bl	801002c <__errno>
 80018f8:	4603      	mov	r3, r0
 80018fa:	220c      	movs	r2, #12
 80018fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e009      	b.n	8001918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001904:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800190a:	4b07      	ldr	r3, [pc, #28]	@ (8001928 <_sbrk+0x64>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4413      	add	r3, r2
 8001912:	4a05      	ldr	r2, [pc, #20]	@ (8001928 <_sbrk+0x64>)
 8001914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20030000 	.word	0x20030000
 8001924:	00000400 	.word	0x00000400
 8001928:	200003b4 	.word	0x200003b4
 800192c:	200009d0 	.word	0x200009d0

08001930 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001934:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <SystemInit+0x98>)
 8001936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800193a:	4a23      	ldr	r2, [pc, #140]	@ (80019c8 <SystemInit+0x98>)
 800193c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001940:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001958:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800195c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001968:	4b18      	ldr	r3, [pc, #96]	@ (80019cc <SystemInit+0x9c>)
 800196a:	4013      	ands	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001976:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800197a:	f023 0305 	bic.w	r3, r3, #5
 800197e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001986:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800198a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800198e:	f023 0301 	bic.w	r3, r3, #1
 8001992:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199a:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <SystemInit+0xa0>)
 800199c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800199e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019a2:	4a0b      	ldr	r2, [pc, #44]	@ (80019d0 <SystemInit+0xa0>)
 80019a4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00
 80019cc:	faf6fefb 	.word	0xfaf6fefb
 80019d0:	22041000 	.word	0x22041000

080019d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d8:	3304      	adds	r3, #4

080019da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019de:	d3f9      	bcc.n	80019d4 <CopyDataInit>
  bx lr
 80019e0:	4770      	bx	lr

080019e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019e4:	3004      	adds	r0, #4

080019e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019e8:	d3fb      	bcc.n	80019e2 <FillZerobss>
  bx lr
 80019ea:	4770      	bx	lr

080019ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f0:	f7ff ff9e 	bl	8001930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019f4:	480b      	ldr	r0, [pc, #44]	@ (8001a24 <LoopForever+0x6>)
 80019f6:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <LoopForever+0xa>)
 80019f8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a2c <LoopForever+0xe>)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f7ff ffed 	bl	80019da <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <LoopForever+0x12>)
 8001a02:	490c      	ldr	r1, [pc, #48]	@ (8001a34 <LoopForever+0x16>)
 8001a04:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <LoopForever+0x1a>)
 8001a06:	2300      	movs	r3, #0
 8001a08:	f7ff ffe7 	bl	80019da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001a0c:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <LoopForever+0x1e>)
 8001a0e:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <LoopForever+0x22>)
 8001a10:	2300      	movs	r3, #0
 8001a12:	f7ff ffe8 	bl	80019e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001a16:	f00e fb0f 	bl	8010038 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001a1a:	f7ff fb27 	bl	800106c <main>

08001a1e <LoopForever>:

LoopForever:
  b LoopForever
 8001a1e:	e7fe      	b.n	8001a1e <LoopForever>
  ldr   r0, =_estack
 8001a20:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000200 	.word	0x20000200
 8001a2c:	080154c0 	.word	0x080154c0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a30:	20030000 	.word	0x20030000
 8001a34:	20030000 	.word	0x20030000
 8001a38:	080156b8 	.word	0x080156b8
  INIT_BSS _sbss, _ebss
 8001a3c:	20000200 	.word	0x20000200
 8001a40:	200009cc 	.word	0x200009cc

08001a44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a44:	e7fe      	b.n	8001a44 <ADC1_IRQHandler>
	...

08001a48 <InitializeNanoEdgeAI>:

#include "AI.h"



void InitializeNanoEdgeAI(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    if (neai_classification_init(knowledge) != NEAI_OK) {
 8001a4c:	4807      	ldr	r0, [pc, #28]	@ (8001a6c <InitializeNanoEdgeAI+0x24>)
 8001a4e:	f00c fb9f 	bl	800e190 <neai_classification_init>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <InitializeNanoEdgeAI+0x18>
        printf(" NanoEdge AI Initialization Failed!\n");
 8001a58:	4805      	ldr	r0, [pc, #20]	@ (8001a70 <InitializeNanoEdgeAI+0x28>)
 8001a5a:	f00e f913 	bl	800fc84 <puts>
    } else {
        printf(" NanoEdge AI Model Loaded Successfully!\n");
    }
}
 8001a5e:	e002      	b.n	8001a66 <InitializeNanoEdgeAI+0x1e>
        printf(" NanoEdge AI Model Loaded Successfully!\n");
 8001a60:	4804      	ldr	r0, [pc, #16]	@ (8001a74 <InitializeNanoEdgeAI+0x2c>)
 8001a62:	f00e f90f 	bl	800fc84 <puts>
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	08013e6c 	.word	0x08013e6c
 8001a70:	08013220 	.word	0x08013220
 8001a74:	08013244 	.word	0x08013244

08001a78 <InitializeISM330DHCX2>:
//    printf(" CTRL7_G  = 0x%02X (Should be 0x00 - High-Perf Gyro Confirmed)\n", ctrl7_g);
//}


//added low pass filter
void InitializeISM330DHCX2(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af04      	add	r7, sp, #16
    uint8_t config[2];
    uint8_t readback;
    HAL_StatusTypeDef status;

    printf("Initializing ISM330DHCX...\n");
 8001a7e:	487d      	ldr	r0, [pc, #500]	@ (8001c74 <InitializeISM330DHCX2+0x1fc>)
 8001a80:	f00e f900 	bl	800fc84 <puts>

    // Step 1: Enable Register Auto-Increment & Block Data Update (CTRL3_C)
    config[0] = 0x12;
 8001a84:	2312      	movs	r3, #18
 8001a86:	713b      	strb	r3, [r7, #4]
    config[1] = 0x44; // IF_INC = 1, BDU = 1
 8001a88:	2344      	movs	r3, #68	@ 0x44
 8001a8a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001a8c:	1d3a      	adds	r2, r7, #4
 8001a8e:	2364      	movs	r3, #100	@ 0x64
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2302      	movs	r3, #2
 8001a94:	21d6      	movs	r1, #214	@ 0xd6
 8001a96:	4878      	ldr	r0, [pc, #480]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001a98:	f003 fbfc 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL3_C setup failed\n");
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <InitializeISM330DHCX2+0x34>
 8001aa6:	4875      	ldr	r0, [pc, #468]	@ (8001c7c <InitializeISM330DHCX2+0x204>)
 8001aa8:	f00e f8ec 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001aac:	200a      	movs	r0, #10
 8001aae:	f003 f82d 	bl	8004b0c <HAL_Delay>

    // Read back CTRL3_C to verify
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x12, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001ab2:	2364      	movs	r3, #100	@ 0x64
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	1cfb      	adds	r3, r7, #3
 8001abc:	9300      	str	r3, [sp, #0]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	2212      	movs	r2, #18
 8001ac2:	21d6      	movs	r1, #214	@ 0xd6
 8001ac4:	486c      	ldr	r0, [pc, #432]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001ac6:	f003 fe11 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL3_C Readback: 0x%02X (Expected: 0x44)\n", readback);
 8001aca:	78fb      	ldrb	r3, [r7, #3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	486c      	ldr	r0, [pc, #432]	@ (8001c80 <InitializeISM330DHCX2+0x208>)
 8001ad0:	f00e f870 	bl	800fbb4 <iprintf>

    // Step 2: Enable Accelerometer - 104Hz ODR, ±2g Full Scale, High-Performance Mode (CTRL1_XL)
    config[0] = 0x10;
 8001ad4:	2310      	movs	r3, #16
 8001ad6:	713b      	strb	r3, [r7, #4]
    config[1] = 0x50;
 8001ad8:	2350      	movs	r3, #80	@ 0x50
 8001ada:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001adc:	1d3a      	adds	r2, r7, #4
 8001ade:	2364      	movs	r3, #100	@ 0x64
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	21d6      	movs	r1, #214	@ 0xd6
 8001ae6:	4864      	ldr	r0, [pc, #400]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001ae8:	f003 fbd4 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL1_XL setup failed\n");
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d002      	beq.n	8001afc <InitializeISM330DHCX2+0x84>
 8001af6:	4863      	ldr	r0, [pc, #396]	@ (8001c84 <InitializeISM330DHCX2+0x20c>)
 8001af8:	f00e f8c4 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f003 f805 	bl	8004b0c <HAL_Delay>

    // Read back CTRL1_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001b02:	2364      	movs	r3, #100	@ 0x64
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2301      	movs	r3, #1
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	1cfb      	adds	r3, r7, #3
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2210      	movs	r2, #16
 8001b12:	21d6      	movs	r1, #214	@ 0xd6
 8001b14:	4858      	ldr	r0, [pc, #352]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001b16:	f003 fde9 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL1_XL Readback: 0x%02X (Expected: 0x50)\n", readback);
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	485a      	ldr	r0, [pc, #360]	@ (8001c88 <InitializeISM330DHCX2+0x210>)
 8001b20:	f00e f848 	bl	800fbb4 <iprintf>

    // Step 3: Enable Gyroscope - 104Hz ODR, ±1000 dps Full Scale (CTRL2_G)
    config[0] = 0x11;
 8001b24:	2311      	movs	r3, #17
 8001b26:	713b      	strb	r3, [r7, #4]
    config[1] = 0x48;
 8001b28:	2348      	movs	r3, #72	@ 0x48
 8001b2a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001b2c:	1d3a      	adds	r2, r7, #4
 8001b2e:	2364      	movs	r3, #100	@ 0x64
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2302      	movs	r3, #2
 8001b34:	21d6      	movs	r1, #214	@ 0xd6
 8001b36:	4850      	ldr	r0, [pc, #320]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001b38:	f003 fbac 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL2_G setup failed\n");
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <InitializeISM330DHCX2+0xd4>
 8001b46:	4851      	ldr	r0, [pc, #324]	@ (8001c8c <InitializeISM330DHCX2+0x214>)
 8001b48:	f00e f89c 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f002 ffdd 	bl	8004b0c <HAL_Delay>

    // Read back CTRL2_G
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001b52:	2364      	movs	r3, #100	@ 0x64
 8001b54:	9302      	str	r3, [sp, #8]
 8001b56:	2301      	movs	r3, #1
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	1cfb      	adds	r3, r7, #3
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	2211      	movs	r2, #17
 8001b62:	21d6      	movs	r1, #214	@ 0xd6
 8001b64:	4844      	ldr	r0, [pc, #272]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001b66:	f003 fdc1 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL2_G Readback: 0x%02X (Expected: 0x48)\n", readback);
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4848      	ldr	r0, [pc, #288]	@ (8001c90 <InitializeISM330DHCX2+0x218>)
 8001b70:	f00e f820 	bl	800fbb4 <iprintf>

    // Step 4: Enable LPF2 for Accelerometer & Set Cutoff Frequency to ODR/20
    config[0] = 0x17;  // CTRL8_XL register
 8001b74:	2317      	movs	r3, #23
 8001b76:	713b      	strb	r3, [r7, #4]
    config[1] = 0x82;  // LPF2_XL_EN = 1, HPCF_XL = 010 (ODR/20)
 8001b78:	2382      	movs	r3, #130	@ 0x82
 8001b7a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001b7c:	1d3a      	adds	r2, r7, #4
 8001b7e:	2364      	movs	r3, #100	@ 0x64
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2302      	movs	r3, #2
 8001b84:	21d6      	movs	r1, #214	@ 0xd6
 8001b86:	483c      	ldr	r0, [pc, #240]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001b88:	f003 fb84 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL8_XL setup failed\n");
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <InitializeISM330DHCX2+0x124>
 8001b96:	483f      	ldr	r0, [pc, #252]	@ (8001c94 <InitializeISM330DHCX2+0x21c>)
 8001b98:	f00e f874 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f002 ffb5 	bl	8004b0c <HAL_Delay>

    // Read back CTRL8_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x17, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001ba2:	2364      	movs	r3, #100	@ 0x64
 8001ba4:	9302      	str	r3, [sp, #8]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	1cfb      	adds	r3, r7, #3
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2217      	movs	r2, #23
 8001bb2:	21d6      	movs	r1, #214	@ 0xd6
 8001bb4:	4830      	ldr	r0, [pc, #192]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001bb6:	f003 fd99 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL8_XL Readback: 0x%02X (Expected: 0x82)\n", readback);
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4836      	ldr	r0, [pc, #216]	@ (8001c98 <InitializeISM330DHCX2+0x220>)
 8001bc0:	f00d fff8 	bl	800fbb4 <iprintf>

    // Step 5: Enable LPF1 for Gyroscope (CTRL4_C)
    config[0] = 0x13;
 8001bc4:	2313      	movs	r3, #19
 8001bc6:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // LPF1_SEL_G = 1 (Enable LPF1)
 8001bc8:	2302      	movs	r3, #2
 8001bca:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001bcc:	1d3a      	adds	r2, r7, #4
 8001bce:	2364      	movs	r3, #100	@ 0x64
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	21d6      	movs	r1, #214	@ 0xd6
 8001bd6:	4828      	ldr	r0, [pc, #160]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001bd8:	f003 fb5c 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL4_C setup failed\n");
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <InitializeISM330DHCX2+0x174>
 8001be6:	482d      	ldr	r0, [pc, #180]	@ (8001c9c <InitializeISM330DHCX2+0x224>)
 8001be8:	f00e f84c 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001bec:	200a      	movs	r0, #10
 8001bee:	f002 ff8d 	bl	8004b0c <HAL_Delay>

    // Read back CTRL4_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x13, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001bf2:	2364      	movs	r3, #100	@ 0x64
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	1cfb      	adds	r3, r7, #3
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2301      	movs	r3, #1
 8001c00:	2213      	movs	r2, #19
 8001c02:	21d6      	movs	r1, #214	@ 0xd6
 8001c04:	481c      	ldr	r0, [pc, #112]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001c06:	f003 fd71 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL4_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4824      	ldr	r0, [pc, #144]	@ (8001ca0 <InitializeISM330DHCX2+0x228>)
 8001c10:	f00d ffd0 	bl	800fbb4 <iprintf>

    // Step 6: Set Gyroscope Cutoff Frequency to ODR/10 (CTRL6_C)
    config[0] = 0x15;
 8001c14:	2315      	movs	r3, #21
 8001c16:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // FTYPE = 10 (ODR/10)
 8001c18:	2302      	movs	r3, #2
 8001c1a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001c1c:	1d3a      	adds	r2, r7, #4
 8001c1e:	2364      	movs	r3, #100	@ 0x64
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2302      	movs	r3, #2
 8001c24:	21d6      	movs	r1, #214	@ 0xd6
 8001c26:	4814      	ldr	r0, [pc, #80]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001c28:	f003 fb34 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL6_C setup failed\n");
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <InitializeISM330DHCX2+0x1c4>
 8001c36:	481b      	ldr	r0, [pc, #108]	@ (8001ca4 <InitializeISM330DHCX2+0x22c>)
 8001c38:	f00e f824 	bl	800fc84 <puts>

    HAL_Delay(10);
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f002 ff65 	bl	8004b0c <HAL_Delay>

    // Read back CTRL6_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x15, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001c42:	2364      	movs	r3, #100	@ 0x64
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	1cfb      	adds	r3, r7, #3
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	2215      	movs	r2, #21
 8001c52:	21d6      	movs	r1, #214	@ 0xd6
 8001c54:	4808      	ldr	r0, [pc, #32]	@ (8001c78 <InitializeISM330DHCX2+0x200>)
 8001c56:	f003 fd49 	bl	80056ec <HAL_I2C_Mem_Read>
    printf("CTRL6_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8001c5a:	78fb      	ldrb	r3, [r7, #3]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4812      	ldr	r0, [pc, #72]	@ (8001ca8 <InitializeISM330DHCX2+0x230>)
 8001c60:	f00d ffa8 	bl	800fbb4 <iprintf>

    printf("ISM330DHCX Initialization Complete with LPF Enabled!\n");
 8001c64:	4811      	ldr	r0, [pc, #68]	@ (8001cac <InitializeISM330DHCX2+0x234>)
 8001c66:	f00e f80d 	bl	800fc84 <puts>


}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	080132d0 	.word	0x080132d0
 8001c78:	2000021c 	.word	0x2000021c
 8001c7c:	080132ec 	.word	0x080132ec
 8001c80:	08013308 	.word	0x08013308
 8001c84:	08013334 	.word	0x08013334
 8001c88:	08013354 	.word	0x08013354
 8001c8c:	08013380 	.word	0x08013380
 8001c90:	0801339c 	.word	0x0801339c
 8001c94:	080133c8 	.word	0x080133c8
 8001c98:	080133e8 	.word	0x080133e8
 8001c9c:	08013414 	.word	0x08013414
 8001ca0:	08013430 	.word	0x08013430
 8001ca4:	0801345c 	.word	0x0801345c
 8001ca8:	08013478 	.word	0x08013478
 8001cac:	080134a4 	.word	0x080134a4

08001cb0 <SleepISM330DHCX2>:


void SleepISM330DHCX2(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af02      	add	r7, sp, #8
    uint8_t config[2];
    HAL_StatusTypeDef status;

    printf("Deinitializing ISM330DHCX...\n");
 8001cb6:	481c      	ldr	r0, [pc, #112]	@ (8001d28 <SleepISM330DHCX2+0x78>)
 8001cb8:	f00d ffe4 	bl	800fc84 <puts>

    // Disable Accelerometer by setting the ODR bits to 0 (CTRL1_XL)
    config[0] = 0x10; // Address of CTRL1_XL
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	713b      	strb	r3, [r7, #4]
    config[1] = 0x00; // Set ODR to 0 (power-down)
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001cc4:	1d3a      	adds	r2, r7, #4
 8001cc6:	2364      	movs	r3, #100	@ 0x64
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2302      	movs	r3, #2
 8001ccc:	21d6      	movs	r1, #214	@ 0xd6
 8001cce:	4817      	ldr	r0, [pc, #92]	@ (8001d2c <SleepISM330DHCX2+0x7c>)
 8001cd0:	f003 fae0 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <SleepISM330DHCX2+0x34>
        printf("Error: Failed to disable accelerometer (CTRL1_XL)!\n");
 8001cde:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <SleepISM330DHCX2+0x80>)
 8001ce0:	f00d ffd0 	bl	800fc84 <puts>
    }
    HAL_Delay(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f002 ff11 	bl	8004b0c <HAL_Delay>

    // Disable Gyroscope by setting the ODR bits to 0 (CTRL2_G)
    config[0] = 0x11; // Address of CTRL2_G
 8001cea:	2311      	movs	r3, #17
 8001cec:	713b      	strb	r3, [r7, #4]
    config[1] = 0x00; // Set ODR to 0 (power-down)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001cf2:	1d3a      	adds	r2, r7, #4
 8001cf4:	2364      	movs	r3, #100	@ 0x64
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	21d6      	movs	r1, #214	@ 0xd6
 8001cfc:	480b      	ldr	r0, [pc, #44]	@ (8001d2c <SleepISM330DHCX2+0x7c>)
 8001cfe:	f003 fac9 	bl	8005294 <HAL_I2C_Master_Transmit>
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <SleepISM330DHCX2+0x62>
        printf("Error: Failed to disable gyroscope (CTRL2_G)!\n");
 8001d0c:	4809      	ldr	r0, [pc, #36]	@ (8001d34 <SleepISM330DHCX2+0x84>)
 8001d0e:	f00d ffb9 	bl	800fc84 <puts>
    }
    HAL_Delay(10);
 8001d12:	200a      	movs	r0, #10
 8001d14:	f002 fefa 	bl	8004b0c <HAL_Delay>

    // Optionally, you can add other deinitialization steps if needed

    printf("ISM330DHCX Deinitialized successfully.\n");
 8001d18:	4807      	ldr	r0, [pc, #28]	@ (8001d38 <SleepISM330DHCX2+0x88>)
 8001d1a:	f00d ffb3 	bl	800fc84 <puts>
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	080134dc 	.word	0x080134dc
 8001d2c:	2000021c 	.word	0x2000021c
 8001d30:	080134fc 	.word	0x080134fc
 8001d34:	08013530 	.word	0x08013530
 8001d38:	08013560 	.word	0x08013560

08001d3c <WakeUpISM330DHCX2>:

void WakeUpISM330DHCX2(void) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af04      	add	r7, sp, #16
    uint8_t config;
    HAL_StatusTypeDef status;

    // Re-enable Accelerometer: 104Hz ODR, ±2g, High-performance mode (CTRL1_XL)
    config = 0x50;  // Same value you used in full init
 8001d42:	2350      	movs	r3, #80	@ 0x50
 8001d44:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &config, 1, 100);
 8001d46:	2364      	movs	r3, #100	@ 0x64
 8001d48:	9302      	str	r3, [sp, #8]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	1dbb      	adds	r3, r7, #6
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	2210      	movs	r2, #16
 8001d56:	21d6      	movs	r1, #214	@ 0xd6
 8001d58:	4816      	ldr	r0, [pc, #88]	@ (8001db4 <WakeUpISM330DHCX2+0x78>)
 8001d5a:	f003 fbb3 	bl	80054c4 <HAL_I2C_Mem_Write>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <WakeUpISM330DHCX2+0x32>
        printf("Error: Failed to re-enable accelerometer!\n");
 8001d68:	4813      	ldr	r0, [pc, #76]	@ (8001db8 <WakeUpISM330DHCX2+0x7c>)
 8001d6a:	f00d ff8b 	bl	800fc84 <puts>
    }
    HAL_Delay(10);
 8001d6e:	200a      	movs	r0, #10
 8001d70:	f002 fecc 	bl	8004b0c <HAL_Delay>

    // Re-enable Gyroscope: 104Hz ODR, ±1000 dps (CTRL2_G)
    config = 0x48;  // Same value as in full init
 8001d74:	2348      	movs	r3, #72	@ 0x48
 8001d76:	71bb      	strb	r3, [r7, #6]
    status = HAL_I2C_Mem_Write(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &config, 1, 100);
 8001d78:	2364      	movs	r3, #100	@ 0x64
 8001d7a:	9302      	str	r3, [sp, #8]
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	1dbb      	adds	r3, r7, #6
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	2211      	movs	r2, #17
 8001d88:	21d6      	movs	r1, #214	@ 0xd6
 8001d8a:	480a      	ldr	r0, [pc, #40]	@ (8001db4 <WakeUpISM330DHCX2+0x78>)
 8001d8c:	f003 fb9a 	bl	80054c4 <HAL_I2C_Mem_Write>
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <WakeUpISM330DHCX2+0x64>
        printf("Error: Failed to re-enable gyroscope!\n");
 8001d9a:	4808      	ldr	r0, [pc, #32]	@ (8001dbc <WakeUpISM330DHCX2+0x80>)
 8001d9c:	f00d ff72 	bl	800fc84 <puts>
    }
    HAL_Delay(10);
 8001da0:	200a      	movs	r0, #10
 8001da2:	f002 feb3 	bl	8004b0c <HAL_Delay>

    printf("ISM330DHCX wake-up complete by updating ODR registers.\n");
 8001da6:	4806      	ldr	r0, [pc, #24]	@ (8001dc0 <WakeUpISM330DHCX2+0x84>)
 8001da8:	f00d ff6c 	bl	800fc84 <puts>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000021c 	.word	0x2000021c
 8001db8:	08013588 	.word	0x08013588
 8001dbc:	080135b4 	.word	0x080135b4
 8001dc0:	080135dc 	.word	0x080135dc

08001dc4 <ReadIMUData2>:
  HAL_Delay(20);
   // ✅ Write converted data to SD
  // WriteIMUDataToSD(accelData, gyroData);
}

void ReadIMUData2(AccelerometerData *accelData, GyroscopeData *gyroData,uint32_t Delay) {
 8001dc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc8:	b092      	sub	sp, #72	@ 0x48
 8001dca:	af04      	add	r7, sp, #16
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
   uint8_t accelDataRaw[6] = {0};
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	83bb      	strh	r3, [r7, #28]
   uint8_t gyroDataRaw[6] = {0};
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	2300      	movs	r3, #0
 8001de0:	82bb      	strh	r3, [r7, #20]
   HAL_StatusTypeDef status;

   //  Read Gyroscope Data
   status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x22,
 8001de2:	2332      	movs	r3, #50	@ 0x32
 8001de4:	9302      	str	r3, [sp, #8]
 8001de6:	2306      	movs	r3, #6
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2301      	movs	r3, #1
 8001df2:	2222      	movs	r2, #34	@ 0x22
 8001df4:	21d6      	movs	r1, #214	@ 0xd6
 8001df6:	4888      	ldr	r0, [pc, #544]	@ (8002018 <ReadIMUData2+0x254>)
 8001df8:	f003 fc78 	bl	80056ec <HAL_I2C_Mem_Read>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              I2C_MEMADD_SIZE_8BIT, gyroDataRaw, 6, 50);
   if (status == HAL_OK) {
 8001e02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d16e      	bne.n	8001ee8 <ReadIMUData2+0x124>
       //  Convert from little-endian format
       int16_t rawGyroX = (int16_t)((gyroDataRaw[0]) | (gyroDataRaw[1] << 8));
 8001e0a:	7c3b      	ldrb	r3, [r7, #16]
 8001e0c:	b21a      	sxth	r2, r3
 8001e0e:	7c7b      	ldrb	r3, [r7, #17]
 8001e10:	021b      	lsls	r3, r3, #8
 8001e12:	b21b      	sxth	r3, r3
 8001e14:	4313      	orrs	r3, r2
 8001e16:	86bb      	strh	r3, [r7, #52]	@ 0x34
       int16_t rawGyroY = (int16_t)((gyroDataRaw[2]) | (gyroDataRaw[3] << 8));
 8001e18:	7cbb      	ldrb	r3, [r7, #18]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	7cfb      	ldrb	r3, [r7, #19]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	867b      	strh	r3, [r7, #50]	@ 0x32
       int16_t rawGyroZ = (int16_t)((gyroDataRaw[4]) | (gyroDataRaw[5] << 8));
 8001e26:	7d3b      	ldrb	r3, [r7, #20]
 8001e28:	b21a      	sxth	r2, r3
 8001e2a:	7d7b      	ldrb	r3, [r7, #21]
 8001e2c:	021b      	lsls	r3, r3, #8
 8001e2e:	b21b      	sxth	r3, r3
 8001e30:	4313      	orrs	r3, r2
 8001e32:	863b      	strh	r3, [r7, #48]	@ 0x30

       //  Convert to degrees per second (dps)
       float gyroSensitivity = 0.035f; // 35 mdps/LSB = 0.035 dps/LSB
 8001e34:	4b79      	ldr	r3, [pc, #484]	@ (800201c <ReadIMUData2+0x258>)
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
       gyroData->rawX = rawGyroX;
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001e3c:	801a      	strh	r2, [r3, #0]
       gyroData->rawY = rawGyroY;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8001e42:	805a      	strh	r2, [r3, #2]
       gyroData->rawZ = rawGyroZ;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001e48:	809a      	strh	r2, [r3, #4]

       gyroData->x = rawGyroX * gyroSensitivity;
 8001e4a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e56:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	edc3 7a02 	vstr	s15, [r3, #8]
       gyroData->y = rawGyroY * gyroSensitivity;
 8001e64:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001e68:	ee07 3a90 	vmov	s15, r3
 8001e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	edc3 7a03 	vstr	s15, [r3, #12]
       gyroData->z = rawGyroZ * gyroSensitivity;
 8001e7e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	edc3 7a04 	vstr	s15, [r3, #16]

       //  Debug Print - Gyroscope
//       printf("\n Gyroscope Data:");
       printf("\nRAW -> X: %d, Y: %d, Z: %d", rawGyroX, rawGyroY, rawGyroZ);
 8001e98:	f9b7 1034 	ldrsh.w	r1, [r7, #52]	@ 0x34
 8001e9c:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	@ 0x32
 8001ea0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001ea4:	485e      	ldr	r0, [pc, #376]	@ (8002020 <ReadIMUData2+0x25c>)
 8001ea6:	f00d fe85 	bl	800fbb4 <iprintf>
       printf("\nDPS -> X: %.6f, Y: %.6f, Z: %.6f\n", gyroData->x, gyroData->y, gyroData->z);
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fb32 	bl	8000518 <__aeabi_f2d>
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	4689      	mov	r9, r1
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb2b 	bl	8000518 <__aeabi_f2d>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	460d      	mov	r5, r1
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb24 	bl	8000518 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ed8:	e9cd 4500 	strd	r4, r5, [sp]
 8001edc:	4642      	mov	r2, r8
 8001ede:	464b      	mov	r3, r9
 8001ee0:	4850      	ldr	r0, [pc, #320]	@ (8002024 <ReadIMUData2+0x260>)
 8001ee2:	f00d fe67 	bl	800fbb4 <iprintf>
 8001ee6:	e005      	b.n	8001ef4 <ReadIMUData2+0x130>
   } else {
       printf(" [HIGH PRIORITY] Error reading gyroscope data! Status: %d\n", status);
 8001ee8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001eec:	4619      	mov	r1, r3
 8001eee:	484e      	ldr	r0, [pc, #312]	@ (8002028 <ReadIMUData2+0x264>)
 8001ef0:	f00d fe60 	bl	800fbb4 <iprintf>
   }

   //  Read Accelerometer Data
   status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x28,
 8001ef4:	2332      	movs	r3, #50	@ 0x32
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	2306      	movs	r3, #6
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	f107 0318 	add.w	r3, r7, #24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	2228      	movs	r2, #40	@ 0x28
 8001f06:	21d6      	movs	r1, #214	@ 0xd6
 8001f08:	4843      	ldr	r0, [pc, #268]	@ (8002018 <ReadIMUData2+0x254>)
 8001f0a:	f003 fbef 	bl	80056ec <HAL_I2C_Mem_Read>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                              I2C_MEMADD_SIZE_8BIT, accelDataRaw, 6, 50);
   if (status == HAL_OK) {
 8001f14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d16e      	bne.n	8001ffa <ReadIMUData2+0x236>
       //  Convert from little-endian format
       int16_t rawAccelX = (int16_t)((accelDataRaw[0]) | (accelDataRaw[1] << 8));
 8001f1c:	7e3b      	ldrb	r3, [r7, #24]
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	7e7b      	ldrb	r3, [r7, #25]
 8001f22:	021b      	lsls	r3, r3, #8
 8001f24:	b21b      	sxth	r3, r3
 8001f26:	4313      	orrs	r3, r2
 8001f28:	857b      	strh	r3, [r7, #42]	@ 0x2a
       int16_t rawAccelY = (int16_t)((accelDataRaw[2]) | (accelDataRaw[3] << 8));
 8001f2a:	7ebb      	ldrb	r3, [r7, #26]
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	021b      	lsls	r3, r3, #8
 8001f32:	b21b      	sxth	r3, r3
 8001f34:	4313      	orrs	r3, r2
 8001f36:	853b      	strh	r3, [r7, #40]	@ 0x28
       int16_t rawAccelZ = (int16_t)((accelDataRaw[4]) | (accelDataRaw[5] << 8));
 8001f38:	7f3b      	ldrb	r3, [r7, #28]
 8001f3a:	b21a      	sxth	r2, r3
 8001f3c:	7f7b      	ldrb	r3, [r7, #29]
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	4313      	orrs	r3, r2
 8001f44:	84fb      	strh	r3, [r7, #38]	@ 0x26

       //  Convert to g (acceleration)
       float accelSensitivity = 0.000061f; // 0.061 mg/LSB = 0.000061 g/LSB
 8001f46:	4b39      	ldr	r3, [pc, #228]	@ (800202c <ReadIMUData2+0x268>)
 8001f48:	623b      	str	r3, [r7, #32]
       accelData->rawX = rawAccelX;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001f4e:	801a      	strh	r2, [r3, #0]
       accelData->rawY = rawAccelY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f54:	805a      	strh	r2, [r3, #2]
       accelData->rawZ = rawAccelZ;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001f5a:	809a      	strh	r2, [r3, #4]

       accelData->x = rawAccelX * accelSensitivity;
 8001f5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001f60:	ee07 3a90 	vmov	s15, r3
 8001f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f68:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	edc3 7a02 	vstr	s15, [r3, #8]
       accelData->y = rawAccelY * accelSensitivity;
 8001f76:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	edc3 7a03 	vstr	s15, [r3, #12]
       accelData->z = rawAccelZ * accelSensitivity;
 8001f90:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001f94:	ee07 3a90 	vmov	s15, r3
 8001f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	edc3 7a04 	vstr	s15, [r3, #16]

       // 📢 Debug Print - Accelerometer
//       printf("\nAccelerometer Data:");
       printf("\nRAW -> X: %d, Y: %d, Z: %d", rawAccelX, rawAccelY, rawAccelZ);
 8001faa:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	@ 0x2a
 8001fae:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001fb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001fb6:	481a      	ldr	r0, [pc, #104]	@ (8002020 <ReadIMUData2+0x25c>)
 8001fb8:	f00d fdfc 	bl	800fbb4 <iprintf>
       printf("\nG  -> X: %.6f, Y: %.6f, Z: %.6f\n", accelData->x, accelData->y, accelData->z);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe faa9 	bl	8000518 <__aeabi_f2d>
 8001fc6:	4680      	mov	r8, r0
 8001fc8:	4689      	mov	r9, r1
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe faa2 	bl	8000518 <__aeabi_f2d>
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	460d      	mov	r5, r1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa9b 	bl	8000518 <__aeabi_f2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001fea:	e9cd 4500 	strd	r4, r5, [sp]
 8001fee:	4642      	mov	r2, r8
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	480f      	ldr	r0, [pc, #60]	@ (8002030 <ReadIMUData2+0x26c>)
 8001ff4:	f00d fdde 	bl	800fbb4 <iprintf>
 8001ff8:	e005      	b.n	8002006 <ReadIMUData2+0x242>
   } else {
       printf(" Error reading accelerometer data! Status: %d\n", status);
 8001ffa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001ffe:	4619      	mov	r1, r3
 8002000:	480c      	ldr	r0, [pc, #48]	@ (8002034 <ReadIMUData2+0x270>)
 8002002:	f00d fdd7 	bl	800fbb4 <iprintf>
   }


   HAL_Delay(Delay);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f002 fd80 	bl	8004b0c <HAL_Delay>
   // ✅ Write converted data to SD
  // WriteIMUDataToSD(accelData, gyroData);
}
 800200c:	bf00      	nop
 800200e:	3738      	adds	r7, #56	@ 0x38
 8002010:	46bd      	mov	sp, r7
 8002012:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002016:	bf00      	nop
 8002018:	2000021c 	.word	0x2000021c
 800201c:	3d0f5c29 	.word	0x3d0f5c29
 8002020:	08013614 	.word	0x08013614
 8002024:	08013630 	.word	0x08013630
 8002028:	08013654 	.word	0x08013654
 800202c:	387fda40 	.word	0x387fda40
 8002030:	08013690 	.word	0x08013690
 8002034:	080136b4 	.word	0x080136b4

08002038 <ManageSensorReading>:





void ManageSensorReading(AccelerometerData *accelData, GyroscopeData *gyroData, uint32_t delay, bool sensor_enabled) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	70fb      	strb	r3, [r7, #3]
    if (sensor_enabled) {
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00a      	beq.n	8002062 <ManageSensorReading+0x2a>
        // Initialize sensor if not already done


        	WakeUpISM330DHCX2();
 800204c:	f7ff fe76 	bl	8001d3c <WakeUpISM330DHCX2>
            // Replace with your sensor init function, e.g., Sensor_Init();

            printf("Sensor initialized and ready to go.\n");
 8002050:	4808      	ldr	r0, [pc, #32]	@ (8002074 <ManageSensorReading+0x3c>)
 8002052:	f00d fe17 	bl	800fc84 <puts>

        // Read sensor data based on delay
            ReadIMUData2(accelData, gyroData, delay);
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff feb2 	bl	8001dc4 <ReadIMUData2>





}
 8002060:	e004      	b.n	800206c <ManageSensorReading+0x34>
        	SleepISM330DHCX2();
 8002062:	f7ff fe25 	bl	8001cb0 <SleepISM330DHCX2>
            printf("Sensor deinitialized to save power.\n");
 8002066:	4804      	ldr	r0, [pc, #16]	@ (8002078 <ManageSensorReading+0x40>)
 8002068:	f00d fe0c 	bl	800fc84 <puts>
}
 800206c:	bf00      	nop
 800206e:	3710      	adds	r7, #16
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	080136e4 	.word	0x080136e4
 8002078:	08013708 	.word	0x08013708

0800207c <WriteConfigToSD>:
//    cJSON_Delete(config);
//}



void WriteConfigToSD(const char* filename, const char* json_string) {
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    // Parse the JSON string
    cJSON *parsed_json = cJSON_Parse(json_string);
 8002086:	6838      	ldr	r0, [r7, #0]
 8002088:	f001 faea 	bl	8003660 <cJSON_Parse>
 800208c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (parsed_json == NULL) {
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <WriteConfigToSD+0x20>
        printf("Error parsing JSON string!\n");
 8002094:	482b      	ldr	r0, [pc, #172]	@ (8002144 <WriteConfigToSD+0xc8>)
 8002096:	f00d fdf5 	bl	800fc84 <puts>
        return;
 800209a:	e050      	b.n	800213e <WriteConfigToSD+0xc2>
    }

    // Extract values from the parsed JSON
    cJSON *sampling_freq_item = cJSON_GetObjectItem(parsed_json, "sampling_frequency");
 800209c:	492a      	ldr	r1, [pc, #168]	@ (8002148 <WriteConfigToSD+0xcc>)
 800209e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020a0:	f002 f912 	bl	80042c8 <cJSON_GetObjectItem>
 80020a4:	6238      	str	r0, [r7, #32]
    cJSON *sensor_enabled_item = cJSON_GetObjectItem(parsed_json, "sensor_enabled");
 80020a6:	4929      	ldr	r1, [pc, #164]	@ (800214c <WriteConfigToSD+0xd0>)
 80020a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020aa:	f002 f90d 	bl	80042c8 <cJSON_GetObjectItem>
 80020ae:	61f8      	str	r0, [r7, #28]

    // Check if the items exist and are of the correct type
    if (!cJSON_IsNumber(sampling_freq_item) || !cJSON_IsBool(sensor_enabled_item)) {
 80020b0:	6a38      	ldr	r0, [r7, #32]
 80020b2:	f002 fb45 	bl	8004740 <cJSON_IsNumber>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <WriteConfigToSD+0x4c>
 80020bc:	69f8      	ldr	r0, [r7, #28]
 80020be:	f002 fb27 	bl	8004710 <cJSON_IsBool>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d106      	bne.n	80020d6 <WriteConfigToSD+0x5a>
        printf("Invalid JSON format!\n");
 80020c8:	4821      	ldr	r0, [pc, #132]	@ (8002150 <WriteConfigToSD+0xd4>)
 80020ca:	f00d fddb 	bl	800fc84 <puts>
        cJSON_Delete(parsed_json);
 80020ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020d0:	f000 fab2 	bl	8002638 <cJSON_Delete>
        return;
 80020d4:	e033      	b.n	800213e <WriteConfigToSD+0xc2>
    }

    // Declare and initialize variables
    int sampling_frequency = sampling_freq_item->valueint;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	61bb      	str	r3, [r7, #24]
    int sensor_enabled = sensor_enabled_item->valueint;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	617b      	str	r3, [r7, #20]

    // Clean up parsed JSON object
    cJSON_Delete(parsed_json);
 80020e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e4:	f000 faa8 	bl	8002638 <cJSON_Delete>

    // Create a new JSON object
    cJSON *config = cJSON_CreateObject();
 80020e8:	f002 fafe 	bl	80046e8 <cJSON_CreateObject>
 80020ec:	6138      	str	r0, [r7, #16]
    cJSON_AddNumberToObject(config, "sampling_frequency", sampling_frequency);
 80020ee:	69b8      	ldr	r0, [r7, #24]
 80020f0:	f7fe fa00 	bl	80004f4 <__aeabi_i2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ec43 2b10 	vmov	d0, r2, r3
 80020fc:	4912      	ldr	r1, [pc, #72]	@ (8002148 <WriteConfigToSD+0xcc>)
 80020fe:	6938      	ldr	r0, [r7, #16]
 8002100:	f002 f9ba 	bl	8004478 <cJSON_AddNumberToObject>
    cJSON_AddBoolToObject(config, "sensor_enabled", sensor_enabled);
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	4911      	ldr	r1, [pc, #68]	@ (800214c <WriteConfigToSD+0xd0>)
 8002108:	6938      	ldr	r0, [r7, #16]
 800210a:	f002 f993 	bl	8004434 <cJSON_AddBoolToObject>

    // Convert JSON object to string
    char *json_str = cJSON_Print(config);
 800210e:	6938      	ldr	r0, [r7, #16]
 8002110:	f001 fb3e 	bl	8003790 <cJSON_Print>
 8002114:	60f8      	str	r0, [r7, #12]
    if (json_str == NULL) {
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <WriteConfigToSD+0xae>
        printf("Error converting JSON to string!\n");
 800211c:	480d      	ldr	r0, [pc, #52]	@ (8002154 <WriteConfigToSD+0xd8>)
 800211e:	f00d fdb1 	bl	800fc84 <puts>
        cJSON_Delete(config);
 8002122:	6938      	ldr	r0, [r7, #16]
 8002124:	f000 fa88 	bl	8002638 <cJSON_Delete>
        return;
 8002128:	e009      	b.n	800213e <WriteConfigToSD+0xc2>
    }

    // Write the JSON string to SD card using your generic function
    WriteToSDCard(filename, json_str);
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f002 fbdb 	bl	80048e8 <WriteToSDCard>

    // Clean up
    free(json_str);
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f00c f928 	bl	800e388 <free>
    cJSON_Delete(config);
 8002138:	6938      	ldr	r0, [r7, #16]
 800213a:	f000 fa7d 	bl	8002638 <cJSON_Delete>
}
 800213e:	3728      	adds	r7, #40	@ 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	0801372c 	.word	0x0801372c
 8002148:	08013748 	.word	0x08013748
 800214c:	0801375c 	.word	0x0801375c
 8002150:	0801376c 	.word	0x0801376c
 8002154:	08013784 	.word	0x08013784

08002158 <ReadConfigFromSD>:


void ReadConfigFromSD(int *sampling_frequency, int *sensor_enabled) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b0de      	sub	sp, #376	@ 0x178
 800215c:	af00      	add	r7, sp, #0
 800215e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002162:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002166:	6018      	str	r0, [r3, #0]
 8002168:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800216c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002170:	6019      	str	r1, [r3, #0]
    FRESULT res;
    char fullPath[64];
    FILINFO fno;

    buildFullPath("config.json", fullPath, sizeof(fullPath));
 8002172:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	4619      	mov	r1, r3
 800217a:	4893      	ldr	r0, [pc, #588]	@ (80023c8 <ReadConfigFromSD+0x270>)
 800217c:	f002 fb08 	bl	8004790 <buildFullPath>

    // Mount SD card
    res = f_mount(&FatFs, "0:", 1);
 8002180:	2201      	movs	r2, #1
 8002182:	4992      	ldr	r1, [pc, #584]	@ (80023cc <ReadConfigFromSD+0x274>)
 8002184:	4892      	ldr	r0, [pc, #584]	@ (80023d0 <ReadConfigFromSD+0x278>)
 8002186:	f00b f911 	bl	800d3ac <f_mount>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
    if (res != FR_OK) {
 8002190:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <ReadConfigFromSD+0x6c>
         printf("Failed to mount SD card in ReadConfigFromSD! (Error code: %d)\n", res);
 8002198:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800219c:	4619      	mov	r1, r3
 800219e:	488d      	ldr	r0, [pc, #564]	@ (80023d4 <ReadConfigFromSD+0x27c>)
 80021a0:	f00d fd08 	bl	800fbb4 <iprintf>
         *sampling_frequency = 500;
 80021a4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021a8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021b2:	601a      	str	r2, [r3, #0]
         *sensor_enabled = 0;
 80021b4:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021b8:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
         return;
 80021c2:	e0fd      	b.n	80023c0 <ReadConfigFromSD+0x268>
    }

    // Check if the file exists
    res = f_stat(fullPath, &fno);
 80021c4:	f107 020c 	add.w	r2, r7, #12
 80021c8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f00b fe58 	bl	800de84 <f_stat>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
    if (res == FR_NO_FILE) {
 80021da:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d139      	bne.n	8002256 <ReadConfigFromSD+0xfe>
         printf("%s not found, creating default configuration.\n", fullPath);
 80021e2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80021e6:	4619      	mov	r1, r3
 80021e8:	487b      	ldr	r0, [pc, #492]	@ (80023d8 <ReadConfigFromSD+0x280>)
 80021ea:	f00d fce3 	bl	800fbb4 <iprintf>
         WriteConfigToSD("config.json", "{\"sampling_frequency\":500,\"sensor_enabled\":false}");
 80021ee:	497b      	ldr	r1, [pc, #492]	@ (80023dc <ReadConfigFromSD+0x284>)
 80021f0:	4875      	ldr	r0, [pc, #468]	@ (80023c8 <ReadConfigFromSD+0x270>)
 80021f2:	f7ff ff43 	bl	800207c <WriteConfigToSD>
         HAL_Delay(1000);  // Allow time for file creation
 80021f6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021fa:	f002 fc87 	bl	8004b0c <HAL_Delay>
         res = f_stat(fullPath, &fno);
 80021fe:	f107 020c 	add.w	r2, r7, #12
 8002202:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f00b fe3b 	bl	800de84 <f_stat>
 800220e:	4603      	mov	r3, r0
 8002210:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177
         if (res != FR_OK) {
 8002214:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 8002218:	2b00      	cmp	r3, #0
 800221a:	d03d      	beq.n	8002298 <ReadConfigFromSD+0x140>
              printf("Failed to create %s! (Error code: %d)\n", fullPath, res);
 800221c:	f897 2177 	ldrb.w	r2, [r7, #375]	@ 0x177
 8002220:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002224:	4619      	mov	r1, r3
 8002226:	486e      	ldr	r0, [pc, #440]	@ (80023e0 <ReadConfigFromSD+0x288>)
 8002228:	f00d fcc4 	bl	800fbb4 <iprintf>
              *sampling_frequency = 500;
 800222c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002230:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800223a:	601a      	str	r2, [r3, #0]
              *sensor_enabled = 0;
 800223c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002240:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
              f_mount(0, "0:", 0);
 800224a:	2200      	movs	r2, #0
 800224c:	495f      	ldr	r1, [pc, #380]	@ (80023cc <ReadConfigFromSD+0x274>)
 800224e:	2000      	movs	r0, #0
 8002250:	f00b f8ac 	bl	800d3ac <f_mount>
              return;
 8002254:	e0b4      	b.n	80023c0 <ReadConfigFromSD+0x268>
         }
    } else if (res != FR_OK) {
 8002256:	f897 3177 	ldrb.w	r3, [r7, #375]	@ 0x177
 800225a:	2b00      	cmp	r3, #0
 800225c:	d01c      	beq.n	8002298 <ReadConfigFromSD+0x140>
         printf("Error stating %s! (Error code: %d)\n", fullPath, res);
 800225e:	f897 2177 	ldrb.w	r2, [r7, #375]	@ 0x177
 8002262:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002266:	4619      	mov	r1, r3
 8002268:	485e      	ldr	r0, [pc, #376]	@ (80023e4 <ReadConfigFromSD+0x28c>)
 800226a:	f00d fca3 	bl	800fbb4 <iprintf>
         *sampling_frequency = 500;
 800226e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002272:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800227c:	601a      	str	r2, [r3, #0]
         *sensor_enabled = 0;
 800227e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002282:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
         f_mount(0, "0:", 0);
 800228c:	2200      	movs	r2, #0
 800228e:	494f      	ldr	r1, [pc, #316]	@ (80023cc <ReadConfigFromSD+0x274>)
 8002290:	2000      	movs	r0, #0
 8002292:	f00b f88b 	bl	800d3ac <f_mount>
         return;
 8002296:	e093      	b.n	80023c0 <ReadConfigFromSD+0x268>
    }

    char *buffer = ReadFileFromSD("config.json");
 8002298:	484b      	ldr	r0, [pc, #300]	@ (80023c8 <ReadConfigFromSD+0x270>)
 800229a:	f002 fa8b 	bl	80047b4 <ReadFileFromSD>
 800229e:	f8c7 0170 	str.w	r0, [r7, #368]	@ 0x170
    if (buffer == NULL) {
 80022a2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d115      	bne.n	80022d6 <ReadConfigFromSD+0x17e>
         printf("Failed to read %s!\n", fullPath);
 80022aa:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80022ae:	4619      	mov	r1, r3
 80022b0:	484d      	ldr	r0, [pc, #308]	@ (80023e8 <ReadConfigFromSD+0x290>)
 80022b2:	f00d fc7f 	bl	800fbb4 <iprintf>
         *sampling_frequency = 500;
 80022b6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80022c4:	601a      	str	r2, [r3, #0]
         *sensor_enabled = 0;
 80022c6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022ca:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
         return;
 80022d4:	e074      	b.n	80023c0 <ReadConfigFromSD+0x268>
    }

    cJSON *config = cJSON_Parse(buffer);
 80022d6:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 80022da:	f001 f9c1 	bl	8003660 <cJSON_Parse>
 80022de:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
    free(buffer);
 80022e2:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 80022e6:	f00c f84f 	bl	800e388 <free>
    if (config == NULL) {
 80022ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d115      	bne.n	800231e <ReadConfigFromSD+0x1c6>
         printf("Error parsing JSON configuration from %s!\n", fullPath);
 80022f2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80022f6:	4619      	mov	r1, r3
 80022f8:	483c      	ldr	r0, [pc, #240]	@ (80023ec <ReadConfigFromSD+0x294>)
 80022fa:	f00d fc5b 	bl	800fbb4 <iprintf>
         *sampling_frequency = 500;
 80022fe:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002302:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800230c:	601a      	str	r2, [r3, #0]
         *sensor_enabled = 0;
 800230e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002312:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
         return;
 800231c:	e050      	b.n	80023c0 <ReadConfigFromSD+0x268>
    }

    cJSON *freq_item = cJSON_GetObjectItem(config, "sampling_frequency");
 800231e:	4934      	ldr	r1, [pc, #208]	@ (80023f0 <ReadConfigFromSD+0x298>)
 8002320:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002324:	f001 ffd0 	bl	80042c8 <cJSON_GetObjectItem>
 8002328:	f8c7 0168 	str.w	r0, [r7, #360]	@ 0x168
    if (freq_item && cJSON_IsNumber(freq_item)) {
 800232c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002330:	2b00      	cmp	r3, #0
 8002332:	d016      	beq.n	8002362 <ReadConfigFromSD+0x20a>
 8002334:	f8d7 0168 	ldr.w	r0, [r7, #360]	@ 0x168
 8002338:	f002 fa02 	bl	8004740 <cJSON_IsNumber>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00f      	beq.n	8002362 <ReadConfigFromSD+0x20a>
         *sampling_frequency = (int)freq_item->valuedouble;
 8002342:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002346:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7fe fbeb 	bl	8000b28 <__aeabi_d2iz>
 8002352:	4602      	mov	r2, r0
 8002354:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002358:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e007      	b.n	8002372 <ReadConfigFromSD+0x21a>
    } else {
         *sampling_frequency = 500;
 8002362:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002366:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002370:	601a      	str	r2, [r3, #0]
    }

    cJSON *sensor_item = cJSON_GetObjectItem(config, "sensor_enabled");
 8002372:	4920      	ldr	r1, [pc, #128]	@ (80023f4 <ReadConfigFromSD+0x29c>)
 8002374:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 8002378:	f001 ffa6 	bl	80042c8 <cJSON_GetObjectItem>
 800237c:	f8c7 0164 	str.w	r0, [r7, #356]	@ 0x164
    if (sensor_item && cJSON_IsBool(sensor_item)) {
 8002380:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002384:	2b00      	cmp	r3, #0
 8002386:	d010      	beq.n	80023aa <ReadConfigFromSD+0x252>
 8002388:	f8d7 0164 	ldr.w	r0, [r7, #356]	@ 0x164
 800238c:	f002 f9c0 	bl	8004710 <cJSON_IsBool>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d009      	beq.n	80023aa <ReadConfigFromSD+0x252>
         *sensor_enabled = sensor_item->valueint;
 8002396:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800239a:	695a      	ldr	r2, [r3, #20]
 800239c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80023a0:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e006      	b.n	80023b8 <ReadConfigFromSD+0x260>
    } else {
         *sensor_enabled = 0;
 80023aa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80023ae:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
    }
    cJSON_Delete(config);
 80023b8:	f8d7 016c 	ldr.w	r0, [r7, #364]	@ 0x16c
 80023bc:	f000 f93c 	bl	8002638 <cJSON_Delete>
}
 80023c0:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	080137a8 	.word	0x080137a8
 80023cc:	080137b4 	.word	0x080137b4
 80023d0:	200003c0 	.word	0x200003c0
 80023d4:	080137b8 	.word	0x080137b8
 80023d8:	080137f8 	.word	0x080137f8
 80023dc:	08013828 	.word	0x08013828
 80023e0:	0801385c 	.word	0x0801385c
 80023e4:	08013884 	.word	0x08013884
 80023e8:	080138a8 	.word	0x080138a8
 80023ec:	080138bc 	.word	0x080138bc
 80023f0:	08013748 	.word	0x08013748
 80023f4:	0801375c 	.word	0x0801375c

080023f8 <UpdateConfigOnSD>:





void UpdateConfigOnSD(int sampling_frequency, int sensor_enabled) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
    char *json_str = ReadFileFromSD("config.json");
 8002402:	4834      	ldr	r0, [pc, #208]	@ (80024d4 <UpdateConfigOnSD+0xdc>)
 8002404:	f002 f9d6 	bl	80047b4 <ReadFileFromSD>
 8002408:	6138      	str	r0, [r7, #16]
    cJSON *config = NULL;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
    if (json_str != NULL) {
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <UpdateConfigOnSD+0x2a>
         config = cJSON_Parse(json_str);
 8002414:	6938      	ldr	r0, [r7, #16]
 8002416:	f001 f923 	bl	8003660 <cJSON_Parse>
 800241a:	6178      	str	r0, [r7, #20]
         free(json_str);
 800241c:	6938      	ldr	r0, [r7, #16]
 800241e:	f00b ffb3 	bl	800e388 <free>
    }
    if (config == NULL) {
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <UpdateConfigOnSD+0x36>
         config = cJSON_CreateObject();
 8002428:	f002 f95e 	bl	80046e8 <cJSON_CreateObject>
 800242c:	6178      	str	r0, [r7, #20]
    }
    if (cJSON_GetObjectItem(config, "sampling_frequency") != NULL) {
 800242e:	492a      	ldr	r1, [pc, #168]	@ (80024d8 <UpdateConfigOnSD+0xe0>)
 8002430:	6978      	ldr	r0, [r7, #20]
 8002432:	f001 ff49 	bl	80042c8 <cJSON_GetObjectItem>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00f      	beq.n	800245c <UpdateConfigOnSD+0x64>
         cJSON_ReplaceItemInObject(config, "sampling_frequency", cJSON_CreateNumber(sampling_frequency));
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7fe f859 	bl	80004f4 <__aeabi_i2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	ec43 2b10 	vmov	d0, r2, r3
 800244a:	f002 f905 	bl	8004658 <cJSON_CreateNumber>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	4921      	ldr	r1, [pc, #132]	@ (80024d8 <UpdateConfigOnSD+0xe0>)
 8002454:	6978      	ldr	r0, [r7, #20]
 8002456:	f002 f8d3 	bl	8004600 <cJSON_ReplaceItemInObject>
 800245a:	e00a      	b.n	8002472 <UpdateConfigOnSD+0x7a>
    } else {
         cJSON_AddNumberToObject(config, "sampling_frequency", sampling_frequency);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7fe f849 	bl	80004f4 <__aeabi_i2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	ec43 2b10 	vmov	d0, r2, r3
 800246a:	491b      	ldr	r1, [pc, #108]	@ (80024d8 <UpdateConfigOnSD+0xe0>)
 800246c:	6978      	ldr	r0, [r7, #20]
 800246e:	f002 f803 	bl	8004478 <cJSON_AddNumberToObject>
    }
    if (cJSON_GetObjectItem(config, "sensor_enabled") != NULL) {
 8002472:	491a      	ldr	r1, [pc, #104]	@ (80024dc <UpdateConfigOnSD+0xe4>)
 8002474:	6978      	ldr	r0, [r7, #20]
 8002476:	f001 ff27 	bl	80042c8 <cJSON_GetObjectItem>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <UpdateConfigOnSD+0x9c>
         cJSON_ReplaceItemInObject(config, "sensor_enabled", cJSON_CreateBool(sensor_enabled));
 8002480:	6838      	ldr	r0, [r7, #0]
 8002482:	f002 f8cf 	bl	8004624 <cJSON_CreateBool>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4914      	ldr	r1, [pc, #80]	@ (80024dc <UpdateConfigOnSD+0xe4>)
 800248c:	6978      	ldr	r0, [r7, #20]
 800248e:	f002 f8b7 	bl	8004600 <cJSON_ReplaceItemInObject>
 8002492:	e004      	b.n	800249e <UpdateConfigOnSD+0xa6>
    } else {
         cJSON_AddBoolToObject(config, "sensor_enabled", sensor_enabled);
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	4911      	ldr	r1, [pc, #68]	@ (80024dc <UpdateConfigOnSD+0xe4>)
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f001 ffcb 	bl	8004434 <cJSON_AddBoolToObject>
    }

    char *new_json_str = cJSON_Print(config);
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f001 f976 	bl	8003790 <cJSON_Print>
 80024a4:	60f8      	str	r0, [r7, #12]
    if (new_json_str == NULL) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d106      	bne.n	80024ba <UpdateConfigOnSD+0xc2>
         printf("Error converting JSON to string in UpdateConfigOnSD!\n");
 80024ac:	480c      	ldr	r0, [pc, #48]	@ (80024e0 <UpdateConfigOnSD+0xe8>)
 80024ae:	f00d fbe9 	bl	800fc84 <puts>
         cJSON_Delete(config);
 80024b2:	6978      	ldr	r0, [r7, #20]
 80024b4:	f000 f8c0 	bl	8002638 <cJSON_Delete>
         return;
 80024b8:	e009      	b.n	80024ce <UpdateConfigOnSD+0xd6>
    }
    WriteToSDCard("config.json", new_json_str);
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	4805      	ldr	r0, [pc, #20]	@ (80024d4 <UpdateConfigOnSD+0xdc>)
 80024be:	f002 fa13 	bl	80048e8 <WriteToSDCard>
    free(new_json_str);
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f00b ff60 	bl	800e388 <free>
    cJSON_Delete(config);
 80024c8:	6978      	ldr	r0, [r7, #20]
 80024ca:	f000 f8b5 	bl	8002638 <cJSON_Delete>
}
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	080137a8 	.word	0x080137a8
 80024d8:	08013748 	.word	0x08013748
 80024dc:	0801375c 	.word	0x0801375c
 80024e0:	080138e8 	.word	0x080138e8

080024e4 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d002      	beq.n	80024fa <case_insensitive_strcmp+0x16>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <case_insensitive_strcmp+0x1a>
    {
        return 1;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e056      	b.n	80025ac <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10d      	bne.n	8002522 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8002506:	2300      	movs	r3, #0
 8002508:	e050      	b.n	80025ac <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8002512:	2300      	movs	r3, #0
 8002514:	e04a      	b.n	80025ac <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3301      	adds	r3, #1
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	3301      	adds	r3, #1
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	4a22      	ldr	r2, [pc, #136]	@ (80025b8 <case_insensitive_strcmp+0xd4>)
 800252e:	4413      	add	r3, r2
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d103      	bne.n	8002542 <case_insensitive_strcmp+0x5e>
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	f103 0220 	add.w	r2, r3, #32
 8002540:	e000      	b.n	8002544 <case_insensitive_strcmp+0x60>
 8002542:	7bfa      	ldrb	r2, [r7, #15]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	73bb      	strb	r3, [r7, #14]
 800254a:	7bbb      	ldrb	r3, [r7, #14]
 800254c:	3301      	adds	r3, #1
 800254e:	491a      	ldr	r1, [pc, #104]	@ (80025b8 <case_insensitive_strcmp+0xd4>)
 8002550:	440b      	add	r3, r1
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <case_insensitive_strcmp+0x7e>
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	3320      	adds	r3, #32
 8002560:	e000      	b.n	8002564 <case_insensitive_strcmp+0x80>
 8002562:	7bbb      	ldrb	r3, [r7, #14]
 8002564:	429a      	cmp	r2, r3
 8002566:	d0d0      	beq.n	800250a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	737b      	strb	r3, [r7, #13]
 800256e:	7b7b      	ldrb	r3, [r7, #13]
 8002570:	3301      	adds	r3, #1
 8002572:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <case_insensitive_strcmp+0xd4>)
 8002574:	4413      	add	r3, r2
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d103      	bne.n	8002588 <case_insensitive_strcmp+0xa4>
 8002580:	7b7b      	ldrb	r3, [r7, #13]
 8002582:	f103 0220 	add.w	r2, r3, #32
 8002586:	e000      	b.n	800258a <case_insensitive_strcmp+0xa6>
 8002588:	7b7a      	ldrb	r2, [r7, #13]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	733b      	strb	r3, [r7, #12]
 8002590:	7b3b      	ldrb	r3, [r7, #12]
 8002592:	3301      	adds	r3, #1
 8002594:	4908      	ldr	r1, [pc, #32]	@ (80025b8 <case_insensitive_strcmp+0xd4>)
 8002596:	440b      	add	r3, r1
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <case_insensitive_strcmp+0xc4>
 80025a2:	7b3b      	ldrb	r3, [r7, #12]
 80025a4:	3320      	adds	r3, #32
 80025a6:	e000      	b.n	80025aa <case_insensitive_strcmp+0xc6>
 80025a8:	7b3b      	ldrb	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	080150c8 	.word	0x080150c8

080025bc <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <cJSON_strdup+0x1c>
    {
        return NULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e015      	b.n	8002604 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7fd fe31 	bl	8000240 <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	3301      	adds	r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	4798      	blx	r3
 80025ec:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <cJSON_strdup+0x3c>
    {
        return NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e005      	b.n	8002604 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	68b8      	ldr	r0, [r7, #8]
 80025fe:	f00d fd42 	bl	8010086 <memcpy>

    return copy;
 8002602:	68bb      	ldr	r3, [r7, #8]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2028      	movs	r0, #40	@ 0x28
 800261a:	4798      	blx	r3
 800261c:	60f8      	str	r0, [r7, #12]
    if (node)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8002624:	2228      	movs	r2, #40	@ 0x28
 8002626:	2100      	movs	r1, #0
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f00d fc8b 	bl	800ff44 <memset>
    }

    return node;
 800262e:	68fb      	ldr	r3, [r7, #12]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002644:	e03d      	b.n	80026c2 <cJSON_Delete+0x8a>
    {
        next = item->next;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d108      	bne.n	800266a <cJSON_Delete+0x32>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ffe7 	bl	8002638 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <cJSON_Delete+0x58>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <cJSON_Delete+0x9c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6912      	ldr	r2, [r2, #16]
 8002686:	4610      	mov	r0, r2
 8002688:	4798      	blx	r3
            item->valuestring = NULL;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10c      	bne.n	80026b6 <cJSON_Delete+0x7e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <cJSON_Delete+0x9c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6a12      	ldr	r2, [r2, #32]
 80026ac:	4610      	mov	r0, r2
 80026ae:	4798      	blx	r3
            item->string = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 80026b6:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <cJSON_Delete+0x9c>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
        item = next;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1be      	bne.n	8002646 <cJSON_Delete+0xe>
    }
}
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	2000000c 	.word	0x2000000c

080026d8 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80026dc:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b098      	sub	sp, #96	@ 0x60
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
    double number = 0;
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8002702:	f7ff ffe9 	bl	80026d8 <get_decimal_point>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <parse_number+0x36>
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <parse_number+0x3a>
    {
        return false;
 800271e:	2300      	movs	r3, #0
 8002720:	e0a0      	b.n	8002864 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8002722:	2300      	movs	r3, #0
 8002724:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002726:	e03d      	b.n	80027a4 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6899      	ldr	r1, [r3, #8]
 8002730:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002732:	440b      	add	r3, r1
 8002734:	4413      	add	r3, r2
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b45      	cmp	r3, #69	@ 0x45
 800273a:	dc17      	bgt.n	800276c <parse_number+0x84>
 800273c:	2b2b      	cmp	r3, #43	@ 0x2b
 800273e:	db40      	blt.n	80027c2 <parse_number+0xda>
 8002740:	3b2b      	subs	r3, #43	@ 0x2b
 8002742:	2201      	movs	r2, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	4b4c      	ldr	r3, [pc, #304]	@ (8002878 <parse_number+0x190>)
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <parse_number+0x88>
 8002758:	f002 0308 	and.w	r3, r2, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d111      	bne.n	800278e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 800276a:	e02a      	b.n	80027c2 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 800276c:	2b65      	cmp	r3, #101	@ 0x65
 800276e:	d128      	bne.n	80027c2 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6899      	ldr	r1, [r3, #8]
 8002778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277a:	440b      	add	r3, r1
 800277c:	4413      	add	r3, r2
 800277e:	7819      	ldrb	r1, [r3, #0]
 8002780:	f107 0208 	add.w	r2, r7, #8
 8002784:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002786:	4413      	add	r3, r2
 8002788:	460a      	mov	r2, r1
 800278a:	701a      	strb	r2, [r3, #0]
                break;
 800278c:	e007      	b.n	800279e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002794:	4413      	add	r3, r2
 8002796:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800279a:	701a      	strb	r2, [r3, #0]
                break;
 800279c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800279e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a0:	3301      	adds	r3, #1
 80027a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80027a8:	d80d      	bhi.n	80027c6 <parse_number+0xde>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00a      	beq.n	80027c6 <parse_number+0xde>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027b6:	441a      	add	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d3b3      	bcc.n	8002728 <parse_number+0x40>
        }
    }
loop_end:
 80027c0:	e001      	b.n	80027c6 <parse_number+0xde>
                goto loop_end;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <parse_number+0xe0>
loop_end:
 80027c6:	bf00      	nop
    number_c_string[i] = '\0';
 80027c8:	f107 0208 	add.w	r2, r7, #8
 80027cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027ce:	4413      	add	r3, r2
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80027d4:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f00c fcc2 	bl	800f168 <strtod>
 80027e4:	ed87 0b14 	vstr	d0, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 80027e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80027ea:	f107 0308 	add.w	r3, r7, #8
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d101      	bne.n	80027f6 <parse_number+0x10e>
    {
        return false; /* parse_error */
 80027f2:	2300      	movs	r3, #0
 80027f4:	e036      	b.n	8002864 <parse_number+0x17c>
    }

    item->valuedouble = number;
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8002800:	a31b      	add	r3, pc, #108	@ (adr r3, 8002870 <parse_number+0x188>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800280a:	f7fe f963 	bl	8000ad4 <__aeabi_dcmpge>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800281a:	615a      	str	r2, [r3, #20]
 800281c:	e015      	b.n	800284a <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800281e:	f04f 0200 	mov.w	r2, #0
 8002822:	4b16      	ldr	r3, [pc, #88]	@ (800287c <parse_number+0x194>)
 8002824:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002828:	f7fe f94a 	bl	8000ac0 <__aeabi_dcmple>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d004      	beq.n	800283c <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002838:	615a      	str	r2, [r3, #20]
 800283a:	e006      	b.n	800284a <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 800283c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002840:	f7fe f972 	bl	8000b28 <__aeabi_d2iz>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2208      	movs	r2, #8
 800284e:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002856:	f107 0208 	add.w	r2, r7, #8
 800285a:	1a8a      	subs	r2, r1, r2
 800285c:	441a      	add	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	609a      	str	r2, [r3, #8]
    return true;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3760      	adds	r7, #96	@ 0x60
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	f3af 8000 	nop.w
 8002870:	ffc00000 	.word	0xffc00000
 8002874:	41dfffff 	.word	0x41dfffff
 8002878:	04007fe5 	.word	0x04007fe5
 800287c:	c1e00000 	.word	0xc1e00000

08002880 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800288e:	2300      	movs	r3, #0
 8002890:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <ensure+0x20>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <ensure+0x24>
    {
        return NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e083      	b.n	80029ac <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <ensure+0x3c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d301      	bcc.n	80028bc <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e077      	b.n	80029ac <ensure+0x12c>
    }

    if (needed > INT_MAX)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da01      	bge.n	80028c6 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	e072      	b.n	80029ac <ensure+0x12c>
    }

    needed += p->offset + 1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689a      	ldr	r2, [r3, #8]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	3301      	adds	r3, #1
 80028d0:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d805      	bhi.n	80028e8 <ensure+0x68>
    {
        return p->buffer + p->offset;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	4413      	add	r3, r2
 80028e6:	e061      	b.n	80029ac <ensure+0x12c>
    }

    if (p->noalloc) {
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <ensure+0x74>
        return NULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e05b      	b.n	80029ac <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fa:	d308      	bcc.n	800290e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	db03      	blt.n	800290a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8002902:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8002906:	60bb      	str	r3, [r7, #8]
 8002908:	e004      	b.n	8002914 <ensure+0x94>
        }
        else
        {
            return NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	e04e      	b.n	80029ac <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d018      	beq.n	800294e <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	4610      	mov	r0, r2
 8002928:	4798      	blx	r3
 800292a:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d132      	bne.n	8002998 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	4610      	mov	r0, r2
 800293c:	4798      	blx	r3
            p->length = 0;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

            return NULL;
 800294a:	2300      	movs	r3, #0
 800294c:	e02e      	b.n	80029ac <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	4798      	blx	r3
 8002956:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10d      	bne.n	800297a <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6812      	ldr	r2, [r2, #0]
 8002966:	4610      	mov	r0, r2
 8002968:	4798      	blx	r3
            p->length = 0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]

            return NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	e018      	b.n	80029ac <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	3301      	adds	r3, #1
 8002984:	461a      	mov	r2, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f00d fb7d 	bl	8010086 <memcpy>
        p->hooks.deallocate(p->buffer);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	4610      	mov	r0, r2
 8002996:	4798      	blx	r3
    }
    p->length = newsize;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4413      	add	r3, r2
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d013      	beq.n	80029ee <update_offset+0x3a>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00f      	beq.n	80029ee <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4413      	add	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689c      	ldr	r4, [r3, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7fd fc2e 	bl	8000240 <strlen>
 80029e4:	4603      	mov	r3, r0
 80029e6:	18e2      	adds	r2, r4, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e000      	b.n	80029f0 <update_offset+0x3c>
        return;
 80029ee:	bf00      	nop
}
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd90      	pop	{r4, r7, pc}
	...

080029f8 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80029f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029fc:	b087      	sub	sp, #28
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a04:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8002a08:	68b8      	ldr	r0, [r7, #8]
 8002a0a:	68fe      	ldr	r6, [r7, #12]
 8002a0c:	f026 4100 	bic.w	r1, r6, #2147483648	@ 0x80000000
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	687e      	ldr	r6, [r7, #4]
 8002a14:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8002a18:	f7fe f866 	bl	8000ae8 <__aeabi_dcmpgt>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d004      	beq.n	8002a2c <compare_double+0x34>
 8002a22:	68bc      	ldr	r4, [r7, #8]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002a2a:	e003      	b.n	8002a34 <compare_double+0x3c>
 8002a2c:	683c      	ldr	r4, [r7, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002a34:	e9c7 4504 	strd	r4, r5, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 8002a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a40:	f7fd fc0a 	bl	8000258 <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4690      	mov	r8, r2
 8002a4a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <compare_double+0x8c>)
 8002a54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a58:	f7fd fdb6 	bl	80005c8 <__aeabi_dmul>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	2101      	movs	r1, #1
 8002a62:	460c      	mov	r4, r1
 8002a64:	4640      	mov	r0, r8
 8002a66:	4649      	mov	r1, r9
 8002a68:	f7fe f82a 	bl	8000ac0 <__aeabi_dcmple>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <compare_double+0x7e>
 8002a72:	2300      	movs	r3, #0
 8002a74:	461c      	mov	r4, r3
 8002a76:	b2e3      	uxtb	r3, r4
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a82:	bf00      	nop
 8002a84:	3cb00000 	.word	0x3cb00000

08002a88 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8002a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8a:	b093      	sub	sp, #76	@ 0x4c
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002a9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f107 0318 	add.w	r3, r7, #24
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8002abe:	f7ff fe0b 	bl	80026d8 <get_decimal_point>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <print_number+0x56>
    {
        return false;
 8002ada:	2300      	movs	r3, #0
 8002adc:	e0b4      	b.n	8002c48 <print_number+0x1c0>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8002ade:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002ae2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002ae6:	f7fe f809 	bl	8000afc <__aeabi_dcmpun>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <print_number+0xac>
 8002af0:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8002af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af4:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002af8:	2301      	movs	r3, #1
 8002afa:	461e      	mov	r6, r3
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295
 8002b00:	4b53      	ldr	r3, [pc, #332]	@ (8002c50 <print_number+0x1c8>)
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd fff9 	bl	8000afc <__aeabi_dcmpun>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10b      	bne.n	8002b28 <print_number+0xa0>
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	4b4e      	ldr	r3, [pc, #312]	@ (8002c50 <print_number+0x1c8>)
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd ffd1 	bl	8000ac0 <__aeabi_dcmple>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <print_number+0xa0>
 8002b24:	2300      	movs	r3, #0
 8002b26:	461e      	mov	r6, r3
 8002b28:	b2f3      	uxtb	r3, r6
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d007      	beq.n	8002b44 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 8002b34:	f107 0314 	add.w	r3, r7, #20
 8002b38:	4946      	ldr	r1, [pc, #280]	@ (8002c54 <print_number+0x1cc>)
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00d f8de 	bl	800fcfc <siprintf>
 8002b40:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b42:	e03f      	b.n	8002bc4 <print_number+0x13c>
    }
    else if(d == (double)item->valueint)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fcd3 	bl	80004f4 <__aeabi_i2d>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002b56:	f7fd ff9f 	bl	8000a98 <__aeabi_dcmpeq>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695a      	ldr	r2, [r3, #20]
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	493b      	ldr	r1, [pc, #236]	@ (8002c58 <print_number+0x1d0>)
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f00d f8c6 	bl	800fcfc <siprintf>
 8002b70:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b72:	e027      	b.n	8002bc4 <print_number+0x13c>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8002b74:	f107 0014 	add.w	r0, r7, #20
 8002b78:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b7c:	4937      	ldr	r1, [pc, #220]	@ (8002c5c <print_number+0x1d4>)
 8002b7e:	f00d f8bd 	bl	800fcfc <siprintf>
 8002b82:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8002b84:	f107 0208 	add.w	r2, r7, #8
 8002b88:	f107 0314 	add.w	r3, r7, #20
 8002b8c:	4934      	ldr	r1, [pc, #208]	@ (8002c60 <print_number+0x1d8>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f00d f8d4 	bl	800fd3c <siscanf>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10c      	bne.n	8002bb4 <print_number+0x12c>
 8002b9a:	ed97 7b02 	vldr	d7, [r7, #8]
 8002b9e:	ed97 1b0c 	vldr	d1, [r7, #48]	@ 0x30
 8002ba2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ba6:	eef0 0a67 	vmov.f32	s1, s15
 8002baa:	f7ff ff25 	bl	80029f8 <compare_double>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <print_number+0x13c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8002bb4:	f107 0014 	add.w	r0, r7, #20
 8002bb8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002bbc:	4929      	ldr	r1, [pc, #164]	@ (8002c64 <print_number+0x1dc>)
 8002bbe:	f00d f89d 	bl	800fcfc <siprintf>
 8002bc2:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8002bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	db02      	blt.n	8002bd0 <print_number+0x148>
 8002bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bcc:	2b19      	cmp	r3, #25
 8002bce:	dd01      	ble.n	8002bd4 <print_number+0x14c>
    {
        return false;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e039      	b.n	8002c48 <print_number+0x1c0>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8002bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6838      	ldr	r0, [r7, #0]
 8002bdc:	f7ff fe50 	bl	8002880 <ensure>
 8002be0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 8002be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <print_number+0x164>
    {
        return false;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e02d      	b.n	8002c48 <print_number+0x1c0>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bf0:	e01a      	b.n	8002c28 <print_number+0x1a0>
    {
        if (number_buffer[i] == decimal_point)
 8002bf2:	f107 0214 	add.w	r2, r7, #20
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d105      	bne.n	8002c10 <print_number+0x188>
        {
            output_pointer[i] = '.';
 8002c04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c08:	4413      	add	r3, r2
 8002c0a:	222e      	movs	r2, #46	@ 0x2e
 8002c0c:	701a      	strb	r2, [r3, #0]
            continue;
 8002c0e:	e008      	b.n	8002c22 <print_number+0x19a>
        }

        output_pointer[i] = number_buffer[i];
 8002c10:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c14:	4413      	add	r3, r2
 8002c16:	f107 0114 	add.w	r1, r7, #20
 8002c1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c1c:	440a      	add	r2, r1
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8002c22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c24:	3301      	adds	r3, #1
 8002c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d3e0      	bcc.n	8002bf2 <print_number+0x16a>
    }
    output_pointer[i] = '\0';
 8002c30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c34:	4413      	add	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c40:	441a      	add	r2, r3
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	609a      	str	r2, [r3, #8]

    return true;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	374c      	adds	r7, #76	@ 0x4c
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c50:	7fefffff 	.word	0x7fefffff
 8002c54:	0801392c 	.word	0x0801392c
 8002c58:	08013934 	.word	0x08013934
 8002c5c:	08013938 	.word	0x08013938
 8002c60:	08013940 	.word	0x08013940
 8002c64:	08013944 	.word	0x08013944

08002c68 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	e04c      	b.n	8002d18 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4413      	add	r3, r2
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b2f      	cmp	r3, #47	@ 0x2f
 8002c88:	d90f      	bls.n	8002caa <parse_hex4+0x42>
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4413      	add	r3, r2
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b39      	cmp	r3, #57	@ 0x39
 8002c94:	d809      	bhi.n	8002caa <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3b30      	subs	r3, #48	@ 0x30
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e02d      	b.n	8002d06 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b40      	cmp	r3, #64	@ 0x40
 8002cb4:	d90f      	bls.n	8002cd6 <parse_hex4+0x6e>
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b46      	cmp	r3, #70	@ 0x46
 8002cc0:	d809      	bhi.n	8002cd6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b37      	subs	r3, #55	@ 0x37
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	e017      	b.n	8002d06 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b60      	cmp	r3, #96	@ 0x60
 8002ce0:	d90f      	bls.n	8002d02 <parse_hex4+0x9a>
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b66      	cmp	r3, #102	@ 0x66
 8002cec:	d809      	bhi.n	8002d02 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b57      	subs	r3, #87	@ 0x57
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e001      	b.n	8002d06 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e00c      	b.n	8002d20 <parse_hex4+0xb8>
        }

        if (i < 3)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d802      	bhi.n	8002d12 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	3301      	adds	r3, #1
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d9af      	bls.n	8002c7e <parse_hex4+0x16>
        }
    }

    return h;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b05      	cmp	r3, #5
 8002d64:	f340 80b7 	ble.w	8002ed6 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff ff7b 	bl	8002c68 <parse_hex4>
 8002d72:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002d7a:	d304      	bcc.n	8002d86 <utf16_literal_to_utf8+0x5a>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002d82:	f0c0 80aa 	bcc.w	8002eda <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8002d8c:	d337      	bcc.n	8002dfe <utf16_literal_to_utf8+0xd2>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002d94:	d233      	bcs.n	8002dfe <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3306      	adds	r3, #6
 8002d9a:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8002da0:	230c      	movs	r3, #12
 8002da2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	f340 8096 	ble.w	8002ede <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b5c      	cmp	r3, #92	@ 0x5c
 8002db8:	f040 8093 	bne.w	8002ee2 <utf16_literal_to_utf8+0x1b6>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b75      	cmp	r3, #117	@ 0x75
 8002dc4:	f040 808d 	bne.w	8002ee2 <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	3302      	adds	r3, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff4b 	bl	8002c68 <parse_hex4>
 8002dd2:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8002dda:	f0c0 8084 	bcc.w	8002ee6 <utf16_literal_to_utf8+0x1ba>
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8002de4:	d27f      	bcs.n	8002ee6 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	029a      	lsls	r2, r3, #10
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <utf16_literal_to_utf8+0x1cc>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8002dfc:	e004      	b.n	8002e08 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8002dfe:	2306      	movs	r3, #6
 8002e00:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002e0c:	d803      	bhi.n	8002e16 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e14:	e01f      	b.n	8002e56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e1c:	d206      	bcs.n	8002e2c <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8002e24:	23c0      	movs	r3, #192	@ 0xc0
 8002e26:	f887 3020 	strb.w	r3, [r7, #32]
 8002e2a:	e014      	b.n	8002e56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e32:	d206      	bcs.n	8002e42 <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8002e3a:	23e0      	movs	r3, #224	@ 0xe0
 8002e3c:	f887 3020 	strb.w	r3, [r7, #32]
 8002e40:	e009      	b.n	8002e56 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8002e48:	d24f      	bcs.n	8002eea <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 8002e50:	23f0      	movs	r3, #240	@ 0xf0
 8002e52:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002e56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e60:	e015      	b.n	8002e8e <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002e74:	440b      	add	r3, r1
 8002e76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8002e84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002e8e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1e5      	bne.n	8002e62 <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8002e96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d909      	bls.n	8002eb2 <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	b2d9      	uxtb	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e007      	b.n	8002ec2 <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eca:	441a      	add	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8002ed0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ed4:	e00b      	b.n	8002eee <utf16_literal_to_utf8+0x1c2>
        goto fail;
 8002ed6:	bf00      	nop
 8002ed8:	e008      	b.n	8002eec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8002eda:	bf00      	nop
 8002edc:	e006      	b.n	8002eec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002ede:	bf00      	nop
 8002ee0:	e004      	b.n	8002eec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002ee2:	bf00      	nop
 8002ee4:	e002      	b.n	8002eec <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8002ee6:	bf00      	nop
 8002ee8:	e000      	b.n	8002eec <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8002eea:	bf00      	nop

fail:
    return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3728      	adds	r7, #40	@ 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	000ffc00 	.word	0x000ffc00

08002efc <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	4413      	add	r3, r2
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	4413      	add	r3, r2
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b22      	cmp	r3, #34	@ 0x22
 8002f38:	f040 8103 	bne.w	8003142 <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002f44:	e017      	b.n	8002f76 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8002f46:	6a3b      	ldr	r3, [r7, #32]
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b5c      	cmp	r3, #92	@ 0x5c
 8002f4c:	d110      	bne.n	8002f70 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 8002f4e:	6a3b      	ldr	r3, [r7, #32]
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	461a      	mov	r2, r3
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	f080 80f1 	bcs.w	8003146 <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61bb      	str	r3, [r7, #24]
                input_end++;
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	3301      	adds	r3, #1
 8002f74:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	461a      	mov	r2, r3
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d203      	bcs.n	8002f90 <parse_string+0x94>
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b22      	cmp	r3, #34	@ 0x22
 8002f8e:	d1da      	bne.n	8002f46 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	f080 80d3 	bcs.w	800314a <parse_string+0x24e>
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b22      	cmp	r3, #34	@ 0x22
 8002faa:	f040 80ce 	bne.w	800314a <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	3201      	adds	r2, #1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4798      	blx	r3
 8002fd0:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80ba 	beq.w	800314e <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8002fde:	e094      	b.n	800310a <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b5c      	cmp	r3, #92	@ 0x5c
 8002fe6:	d008      	beq.n	8002ffa <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	1c53      	adds	r3, r2, #1
 8002fec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1c59      	adds	r1, r3, #1
 8002ff2:	60f9      	str	r1, [r7, #12]
 8002ff4:	7812      	ldrb	r2, [r2, #0]
 8002ff6:	701a      	strb	r2, [r3, #0]
 8002ff8:	e087      	b.n	800310a <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8002ffe:	6a3a      	ldr	r2, [r7, #32]
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	f340 80a4 	ble.w	8003152 <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	3301      	adds	r3, #1
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b75      	cmp	r3, #117	@ 0x75
 8003012:	f300 80a0 	bgt.w	8003156 <parse_string+0x25a>
 8003016:	2b5c      	cmp	r3, #92	@ 0x5c
 8003018:	da04      	bge.n	8003024 <parse_string+0x128>
 800301a:	2b22      	cmp	r3, #34	@ 0x22
 800301c:	d05c      	beq.n	80030d8 <parse_string+0x1dc>
 800301e:	2b2f      	cmp	r3, #47	@ 0x2f
 8003020:	d05a      	beq.n	80030d8 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8003022:	e098      	b.n	8003156 <parse_string+0x25a>
            switch (input_pointer[1])
 8003024:	3b5c      	subs	r3, #92	@ 0x5c
 8003026:	2b19      	cmp	r3, #25
 8003028:	f200 8095 	bhi.w	8003156 <parse_string+0x25a>
 800302c:	a201      	add	r2, pc, #4	@ (adr r2, 8003034 <parse_string+0x138>)
 800302e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003032:	bf00      	nop
 8003034:	080030d9 	.word	0x080030d9
 8003038:	08003157 	.word	0x08003157
 800303c:	08003157 	.word	0x08003157
 8003040:	08003157 	.word	0x08003157
 8003044:	08003157 	.word	0x08003157
 8003048:	08003157 	.word	0x08003157
 800304c:	0800309d 	.word	0x0800309d
 8003050:	08003157 	.word	0x08003157
 8003054:	08003157 	.word	0x08003157
 8003058:	08003157 	.word	0x08003157
 800305c:	080030a9 	.word	0x080030a9
 8003060:	08003157 	.word	0x08003157
 8003064:	08003157 	.word	0x08003157
 8003068:	08003157 	.word	0x08003157
 800306c:	08003157 	.word	0x08003157
 8003070:	08003157 	.word	0x08003157
 8003074:	08003157 	.word	0x08003157
 8003078:	08003157 	.word	0x08003157
 800307c:	080030b5 	.word	0x080030b5
 8003080:	08003157 	.word	0x08003157
 8003084:	08003157 	.word	0x08003157
 8003088:	08003157 	.word	0x08003157
 800308c:	080030c1 	.word	0x080030c1
 8003090:	08003157 	.word	0x08003157
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030e9 	.word	0x080030e9
                    *output_pointer++ = '\b';
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	60fa      	str	r2, [r7, #12]
 80030a2:	2208      	movs	r2, #8
 80030a4:	701a      	strb	r2, [r3, #0]
                    break;
 80030a6:	e02c      	b.n	8003102 <parse_string+0x206>
                    *output_pointer++ = '\f';
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	60fa      	str	r2, [r7, #12]
 80030ae:	220c      	movs	r2, #12
 80030b0:	701a      	strb	r2, [r3, #0]
                    break;
 80030b2:	e026      	b.n	8003102 <parse_string+0x206>
                    *output_pointer++ = '\n';
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60fa      	str	r2, [r7, #12]
 80030ba:	220a      	movs	r2, #10
 80030bc:	701a      	strb	r2, [r3, #0]
                    break;
 80030be:	e020      	b.n	8003102 <parse_string+0x206>
                    *output_pointer++ = '\r';
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	60fa      	str	r2, [r7, #12]
 80030c6:	220d      	movs	r2, #13
 80030c8:	701a      	strb	r2, [r3, #0]
                    break;
 80030ca:	e01a      	b.n	8003102 <parse_string+0x206>
                    *output_pointer++ = '\t';
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	60fa      	str	r2, [r7, #12]
 80030d2:	2209      	movs	r2, #9
 80030d4:	701a      	strb	r2, [r3, #0]
                    break;
 80030d6:	e014      	b.n	8003102 <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	1c5a      	adds	r2, r3, #1
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	60f9      	str	r1, [r7, #12]
 80030e2:	7812      	ldrb	r2, [r2, #0]
 80030e4:	701a      	strb	r2, [r3, #0]
                    break;
 80030e6:	e00c      	b.n	8003102 <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80030e8:	f107 030c 	add.w	r3, r7, #12
 80030ec:	461a      	mov	r2, r3
 80030ee:	6a39      	ldr	r1, [r7, #32]
 80030f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030f2:	f7ff fe1b 	bl	8002d2c <utf16_literal_to_utf8>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02c      	beq.n	800315a <parse_string+0x25e>
                    break;
 8003100:	bf00      	nop
            }
            input_pointer += sequence_length;
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003106:	4413      	add	r3, r2
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	429a      	cmp	r2, r3
 8003110:	f4ff af66 	bcc.w	8002fe0 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2210      	movs	r2, #16
 800311e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6a3a      	ldr	r2, [r7, #32]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	461a      	mov	r2, r3
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	609a      	str	r2, [r3, #8]

    return true;
 800313e:	2301      	movs	r3, #1
 8003140:	e020      	b.n	8003184 <parse_string+0x288>
        goto fail;
 8003142:	bf00      	nop
 8003144:	e00a      	b.n	800315c <parse_string+0x260>
                    goto fail;
 8003146:	bf00      	nop
 8003148:	e008      	b.n	800315c <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 800314a:	bf00      	nop
 800314c:	e006      	b.n	800315c <parse_string+0x260>
            goto fail; /* allocation failure */
 800314e:	bf00      	nop
 8003150:	e004      	b.n	800315c <parse_string+0x260>
                goto fail;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <parse_string+0x260>
                    goto fail;
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <parse_string+0x260>
                        goto fail;
 800315a:	bf00      	nop

fail:
    if (output != NULL)
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	69f8      	ldr	r0, [r7, #28]
 8003168:	4798      	blx	r3
        output = NULL;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	461a      	mov	r2, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	609a      	str	r2, [r3, #8]
    }

    return false;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3728      	adds	r7, #40	@ 0x28
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b088      	sub	sp, #32
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <print_string_ptr+0x28>
    {
        return false;
 80031b0:	2300      	movs	r3, #0
 80031b2:	e110      	b.n	80033d6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d111      	bne.n	80031de <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80031ba:	2103      	movs	r1, #3
 80031bc:	6838      	ldr	r0, [r7, #0]
 80031be:	f7ff fb5f 	bl	8002880 <ensure>
 80031c2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <print_string_ptr+0x42>
        {
            return false;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e103      	b.n	80033d6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4a83      	ldr	r2, [pc, #524]	@ (80033e0 <print_string_ptr+0x254>)
 80031d2:	8811      	ldrh	r1, [r2, #0]
 80031d4:	7892      	ldrb	r2, [r2, #2]
 80031d6:	8019      	strh	r1, [r3, #0]
 80031d8:	709a      	strb	r2, [r3, #2]

        return true;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0fb      	b.n	80033d6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e024      	b.n	800322e <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b22      	cmp	r3, #34	@ 0x22
 80031ea:	dc0f      	bgt.n	800320c <print_string_ptr+0x80>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	db13      	blt.n	8003218 <print_string_ptr+0x8c>
 80031f0:	3b08      	subs	r3, #8
 80031f2:	4a7c      	ldr	r2, [pc, #496]	@ (80033e4 <print_string_ptr+0x258>)
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <print_string_ptr+0x84>
 800320a:	e005      	b.n	8003218 <print_string_ptr+0x8c>
 800320c:	2b5c      	cmp	r3, #92	@ 0x5c
 800320e:	d103      	bne.n	8003218 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3301      	adds	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
                break;
 8003216:	e007      	b.n	8003228 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b1f      	cmp	r3, #31
 800321e:	d802      	bhi.n	8003226 <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	3305      	adds	r3, #5
 8003224:	617b      	str	r3, [r7, #20]
                }
                break;
 8003226:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3301      	adds	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1d6      	bne.n	80031e4 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8003236:	69fa      	ldr	r2, [r7, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	461a      	mov	r2, r3
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3303      	adds	r3, #3
 8003248:	4619      	mov	r1, r3
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	f7ff fb18 	bl	8002880 <ensure>
 8003250:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <print_string_ptr+0xd0>
    {
        return false;
 8003258:	2300      	movs	r3, #0
 800325a:	e0bc      	b.n	80033d6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d117      	bne.n	8003292 <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	2222      	movs	r2, #34	@ 0x22
 8003266:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3301      	adds	r3, #1
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	f00c ff08 	bl	8010086 <memcpy>
        output[output_length + 1] = '\"';
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	3301      	adds	r3, #1
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4413      	add	r3, r2
 800327e:	2222      	movs	r2, #34	@ 0x22
 8003280:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3302      	adds	r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]

        return true;
 800328e:	2301      	movs	r3, #1
 8003290:	e0a1      	b.n	80033d6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2222      	movs	r2, #34	@ 0x22
 8003296:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3301      	adds	r3, #1
 800329c:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	e086      	b.n	80033b2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b1f      	cmp	r3, #31
 80032aa:	d90c      	bls.n	80032c6 <print_string_ptr+0x13a>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b22      	cmp	r3, #34	@ 0x22
 80032b2:	d008      	beq.n	80032c6 <print_string_ptr+0x13a>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80032ba:	d004      	beq.n	80032c6 <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	781a      	ldrb	r2, [r3, #0]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	e06f      	b.n	80033a6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	61ba      	str	r2, [r7, #24]
 80032cc:	225c      	movs	r2, #92	@ 0x5c
 80032ce:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b22      	cmp	r3, #34	@ 0x22
 80032d6:	dc3d      	bgt.n	8003354 <print_string_ptr+0x1c8>
 80032d8:	2b08      	cmp	r3, #8
 80032da:	db59      	blt.n	8003390 <print_string_ptr+0x204>
 80032dc:	3b08      	subs	r3, #8
 80032de:	2b1a      	cmp	r3, #26
 80032e0:	d856      	bhi.n	8003390 <print_string_ptr+0x204>
 80032e2:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <print_string_ptr+0x15c>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	08003369 	.word	0x08003369
 80032ec:	08003389 	.word	0x08003389
 80032f0:	08003379 	.word	0x08003379
 80032f4:	08003391 	.word	0x08003391
 80032f8:	08003371 	.word	0x08003371
 80032fc:	08003381 	.word	0x08003381
 8003300:	08003391 	.word	0x08003391
 8003304:	08003391 	.word	0x08003391
 8003308:	08003391 	.word	0x08003391
 800330c:	08003391 	.word	0x08003391
 8003310:	08003391 	.word	0x08003391
 8003314:	08003391 	.word	0x08003391
 8003318:	08003391 	.word	0x08003391
 800331c:	08003391 	.word	0x08003391
 8003320:	08003391 	.word	0x08003391
 8003324:	08003391 	.word	0x08003391
 8003328:	08003391 	.word	0x08003391
 800332c:	08003391 	.word	0x08003391
 8003330:	08003391 	.word	0x08003391
 8003334:	08003391 	.word	0x08003391
 8003338:	08003391 	.word	0x08003391
 800333c:	08003391 	.word	0x08003391
 8003340:	08003391 	.word	0x08003391
 8003344:	08003391 	.word	0x08003391
 8003348:	08003391 	.word	0x08003391
 800334c:	08003391 	.word	0x08003391
 8003350:	08003361 	.word	0x08003361
 8003354:	2b5c      	cmp	r3, #92	@ 0x5c
 8003356:	d11b      	bne.n	8003390 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	225c      	movs	r2, #92	@ 0x5c
 800335c:	701a      	strb	r2, [r3, #0]
                    break;
 800335e:	e022      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2222      	movs	r2, #34	@ 0x22
 8003364:	701a      	strb	r2, [r3, #0]
                    break;
 8003366:	e01e      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	2262      	movs	r2, #98	@ 0x62
 800336c:	701a      	strb	r2, [r3, #0]
                    break;
 800336e:	e01a      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2266      	movs	r2, #102	@ 0x66
 8003374:	701a      	strb	r2, [r3, #0]
                    break;
 8003376:	e016      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	226e      	movs	r2, #110	@ 0x6e
 800337c:	701a      	strb	r2, [r3, #0]
                    break;
 800337e:	e012      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	2272      	movs	r2, #114	@ 0x72
 8003384:	701a      	strb	r2, [r3, #0]
                    break;
 8003386:	e00e      	b.n	80033a6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2274      	movs	r2, #116	@ 0x74
 800338c:	701a      	strb	r2, [r3, #0]
                    break;
 800338e:	e00a      	b.n	80033a6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4914      	ldr	r1, [pc, #80]	@ (80033e8 <print_string_ptr+0x25c>)
 8003398:	69b8      	ldr	r0, [r7, #24]
 800339a:	f00c fcaf 	bl	800fcfc <siprintf>
                    output_pointer += 4;
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	3304      	adds	r3, #4
 80033a2:	61bb      	str	r3, [r7, #24]
                    break;
 80033a4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	3301      	adds	r3, #1
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	3301      	adds	r3, #1
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f47f af74 	bne.w	80032a4 <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4413      	add	r3, r2
 80033c4:	2222      	movs	r2, #34	@ 0x22
 80033c6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3302      	adds	r3, #2
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]

    return true;
 80033d4:	2301      	movs	r3, #1
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3720      	adds	r7, #32
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	0801394c 	.word	0x0801394c
 80033e4:	04000037 	.word	0x04000037
 80033e8:	08013950 	.word	0x08013950

080033ec <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fec5 	bl	800318c <print_string_ptr>
 8003402:	4603      	mov	r3, r0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <buffer_skip_whitespace+0x16>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	e02c      	b.n	8003480 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <buffer_skip_whitespace+0x2c>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	429a      	cmp	r2, r3
 8003436:	d306      	bcc.n	8003446 <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	e021      	b.n	8003480 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <buffer_skip_whitespace+0x5c>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	d207      	bcs.n	8003468 <buffer_skip_whitespace+0x5c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b20      	cmp	r3, #32
 8003466:	d9e9      	bls.n	800343c <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d104      	bne.n	800347e <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	1e5a      	subs	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800347e:	687b      	ldr	r3, [r7, #4]
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <skip_utf8_bom+0x1e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <skip_utf8_bom+0x1e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <skip_utf8_bom+0x22>
    {
        return NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e01c      	b.n	80034e8 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d018      	beq.n	80034e6 <skip_utf8_bom+0x5a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d211      	bcs.n	80034e6 <skip_utf8_bom+0x5a>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	4413      	add	r3, r2
 80034cc:	2203      	movs	r2, #3
 80034ce:	4908      	ldr	r1, [pc, #32]	@ (80034f0 <skip_utf8_bom+0x64>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00c fd3f 	bl	800ff54 <strncmp>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	1cda      	adds	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	08013958 	.word	0x08013958

080034f4 <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	e00c      	b.n	8003524 <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f7fc fe98 	bl	8000240 <strlen>
 8003510:	4603      	mov	r3, r0
 8003512:	3301      	adds	r3, #1
 8003514:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	6979      	ldr	r1, [r7, #20]
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f805 	bl	800352c <cJSON_ParseWithLengthOpts>
 8003522:	4603      	mov	r3, r0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08e      	sub	sp, #56	@ 0x38
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 800353a:	f107 0318 	add.w	r3, r7, #24
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	60da      	str	r2, [r3, #12]
 8003548:	611a      	str	r2, [r3, #16]
 800354a:	615a      	str	r2, [r3, #20]
 800354c:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8003552:	4b41      	ldr	r3, [pc, #260]	@ (8003658 <cJSON_ParseWithLengthOpts+0x12c>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8003558:	4b3f      	ldr	r3, [pc, #252]	@ (8003658 <cJSON_ParseWithLengthOpts+0x12c>)
 800355a:	2200      	movs	r2, #0
 800355c:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d042      	beq.n	80035ea <cJSON_ParseWithLengthOpts+0xbe>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03f      	beq.n	80035ea <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8003576:	4a39      	ldr	r2, [pc, #228]	@ (800365c <cJSON_ParseWithLengthOpts+0x130>)
 8003578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800357c:	ca07      	ldmia	r2, {r0, r1, r2}
 800357e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 8003582:	4836      	ldr	r0, [pc, #216]	@ (800365c <cJSON_ParseWithLengthOpts+0x130>)
 8003584:	f7ff f842 	bl	800260c <cJSON_New_Item>
 8003588:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	2b00      	cmp	r3, #0
 800358e:	d02e      	beq.n	80035ee <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8003590:	f107 0318 	add.w	r3, r7, #24
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff79 	bl	800348c <skip_utf8_bom>
 800359a:	4603      	mov	r3, r0
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff35 	bl	800340c <buffer_skip_whitespace>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4619      	mov	r1, r3
 80035a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80035a8:	f000 f902 	bl	80037b0 <parse_value>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01f      	beq.n	80035f2 <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 80035b8:	f107 0318 	add.w	r3, r7, #24
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff25 	bl	800340c <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80035c2:	6a3a      	ldr	r2, [r7, #32]
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d215      	bcs.n	80035f6 <cJSON_ParseWithLengthOpts+0xca>
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	4413      	add	r3, r2
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10f      	bne.n	80035f6 <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	601a      	str	r2, [r3, #0]
    }

    return item;
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	e031      	b.n	800364e <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 80035f6:	bf00      	nop

fail:
    if (item != NULL)
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 80035fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003600:	f7ff f81a 	bl	8002638 <cJSON_Delete>
    }

    if (value != NULL)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d020      	beq.n	800364c <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 8003612:	6a3a      	ldr	r2, [r7, #32]
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	429a      	cmp	r2, r3
 8003618:	d202      	bcs.n	8003620 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e005      	b.n	800362c <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d002      	beq.n	800362c <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b01      	subs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	441a      	add	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 800363c:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <cJSON_ParseWithLengthOpts+0x12c>)
 800363e:	461a      	mov	r2, r3
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003648:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3738      	adds	r7, #56	@ 0x38
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200003b8 	.word	0x200003b8
 800365c:	2000000c 	.word	0x2000000c

08003660 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff ff41 	bl	80034f4 <cJSON_ParseWithOpts>
 8003672:	4603      	mov	r3, r0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	@ 0x38
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	2224      	movs	r2, #36	@ 0x24
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f00c fc55 	bl	800ff44 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a3b      	ldr	r2, [pc, #236]	@ (800378c <print+0x110>)
 80036a0:	6812      	ldr	r2, [r2, #0]
 80036a2:	4610      	mov	r0, r2
 80036a4:	4798      	blx	r3
 80036a6:	4603      	mov	r3, r0
 80036a8:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 80036aa:	4b38      	ldr	r3, [pc, #224]	@ (800378c <print+0x110>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80036bc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d042      	beq.n	800374c <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	4619      	mov	r1, r3
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f95b 	bl	8003988 <print_value>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d03b      	beq.n	8003750 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 80036d8:	f107 0310 	add.w	r3, r7, #16
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff f969 	bl	80029b4 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00d      	beq.n	8003706 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	6938      	ldr	r0, [r7, #16]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	3201      	adds	r2, #1
 80036f4:	4611      	mov	r1, r2
 80036f6:	4798      	blx	r3
 80036f8:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 80036fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d029      	beq.n	8003754 <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]
 8003704:	e020      	b.n	8003748 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69ba      	ldr	r2, [r7, #24]
 800370c:	3201      	adds	r2, #1
 800370e:	4610      	mov	r0, r2
 8003710:	4798      	blx	r3
 8003712:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01e      	beq.n	8003758 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800371a:	6939      	ldr	r1, [r7, #16]
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	4293      	cmp	r3, r2
 8003724:	bf28      	it	cs
 8003726:	4613      	movcs	r3, r2
 8003728:	461a      	mov	r2, r3
 800372a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800372c:	f00c fcab 	bl	8010086 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003734:	4413      	add	r3, r2
 8003736:	2200      	movs	r2, #0
 8003738:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4610      	mov	r0, r2
 8003742:	4798      	blx	r3
        buffer->buffer = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	613b      	str	r3, [r7, #16]
    }

    return printed;
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	e01a      	b.n	8003782 <print+0x106>
        goto fail;
 800374c:	bf00      	nop
 800374e:	e004      	b.n	800375a <print+0xde>
        goto fail;
 8003750:	bf00      	nop
 8003752:	e002      	b.n	800375a <print+0xde>
            goto fail;
 8003754:	bf00      	nop
 8003756:	e000      	b.n	800375a <print+0xde>
            goto fail;
 8003758:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4610      	mov	r0, r2
 8003768:	4798      	blx	r3
        buffer->buffer = NULL;
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 800376e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <print+0x104>
    {
        hooks->deallocate(printed);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800377a:	4798      	blx	r3
        printed = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3738      	adds	r7, #56	@ 0x38
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	08014c04 	.word	0x08014c04

08003790 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8003798:	4a04      	ldr	r2, [pc, #16]	@ (80037ac <cJSON_Print+0x1c>)
 800379a:	2101      	movs	r1, #1
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff6d 	bl	800367c <print>
 80037a2:	4603      	mov	r3, r0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000000c 	.word	0x2000000c

080037b0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <parse_value+0x18>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <parse_value+0x1c>
    {
        return false; /* no input */
 80037c8:	2300      	movs	r3, #0
 80037ca:	e0d2      	b.n	8003972 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01d      	beq.n	800380e <parse_value+0x5e>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d816      	bhi.n	800380e <parse_value+0x5e>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	2204      	movs	r2, #4
 80037ec:	4963      	ldr	r1, [pc, #396]	@ (800397c <parse_value+0x1cc>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f00c fbb0 	bl	800ff54 <strncmp>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d109      	bne.n	800380e <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	1d1a      	adds	r2, r3, #4
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	609a      	str	r2, [r3, #8]
        return true;
 800380a:	2301      	movs	r3, #1
 800380c:	e0b1      	b.n	8003972 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01d      	beq.n	8003850 <parse_value+0xa0>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	1d5a      	adds	r2, r3, #5
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	429a      	cmp	r2, r3
 8003820:	d816      	bhi.n	8003850 <parse_value+0xa0>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	4413      	add	r3, r2
 800382c:	2205      	movs	r2, #5
 800382e:	4954      	ldr	r1, [pc, #336]	@ (8003980 <parse_value+0x1d0>)
 8003830:	4618      	mov	r0, r3
 8003832:	f00c fb8f 	bl	800ff54 <strncmp>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	1d5a      	adds	r2, r3, #5
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	609a      	str	r2, [r3, #8]
        return true;
 800384c:	2301      	movs	r3, #1
 800384e:	e090      	b.n	8003972 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d020      	beq.n	8003898 <parse_value+0xe8>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	1d1a      	adds	r2, r3, #4
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	429a      	cmp	r2, r3
 8003862:	d819      	bhi.n	8003898 <parse_value+0xe8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4413      	add	r3, r2
 800386e:	2204      	movs	r2, #4
 8003870:	4944      	ldr	r1, [pc, #272]	@ (8003984 <parse_value+0x1d4>)
 8003872:	4618      	mov	r0, r3
 8003874:	f00c fb6e 	bl	800ff54 <strncmp>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10c      	bne.n	8003898 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	1d1a      	adds	r2, r3, #4
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]
        return true;
 8003894:	2301      	movs	r3, #1
 8003896:	e06c      	b.n	8003972 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d013      	beq.n	80038c6 <parse_value+0x116>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20d      	bcs.n	80038c6 <parse_value+0x116>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4413      	add	r3, r2
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	2b22      	cmp	r3, #34	@ 0x22
 80038b8:	d105      	bne.n	80038c6 <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 80038ba:	6839      	ldr	r1, [r7, #0]
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff fb1d 	bl	8002efc <parse_string>
 80038c2:	4603      	mov	r3, r0
 80038c4:	e055      	b.n	8003972 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <parse_value+0x164>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d21d      	bcs.n	8003914 <parse_value+0x164>
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4413      	add	r3, r2
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b2d      	cmp	r3, #45	@ 0x2d
 80038e6:	d00f      	beq.n	8003908 <parse_value+0x158>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80038f6:	d90d      	bls.n	8003914 <parse_value+0x164>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b39      	cmp	r3, #57	@ 0x39
 8003906:	d805      	bhi.n	8003914 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8003908:	6839      	ldr	r1, [r7, #0]
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe feec 	bl	80026e8 <parse_number>
 8003910:	4603      	mov	r3, r0
 8003912:	e02e      	b.n	8003972 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d013      	beq.n	8003942 <parse_value+0x192>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20d      	bcs.n	8003942 <parse_value+0x192>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b5b      	cmp	r3, #91	@ 0x5b
 8003934:	d105      	bne.n	8003942 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8003936:	6839      	ldr	r1, [r7, #0]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 f909 	bl	8003b50 <parse_array>
 800393e:	4603      	mov	r3, r0
 8003940:	e017      	b.n	8003972 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d013      	beq.n	8003970 <parse_value+0x1c0>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d20d      	bcs.n	8003970 <parse_value+0x1c0>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4413      	add	r3, r2
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b7b      	cmp	r3, #123	@ 0x7b
 8003962:	d105      	bne.n	8003970 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8003964:	6839      	ldr	r1, [r7, #0]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fa3c 	bl	8003de4 <parse_object>
 800396c:	4603      	mov	r3, r0
 800396e:	e000      	b.n	8003972 <parse_value+0x1c2>
    }

    return false;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	0801392c 	.word	0x0801392c
 8003980:	0801395c 	.word	0x0801395c
 8003984:	08013964 	.word	0x08013964

08003988 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <print_value+0x1a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <print_value+0x1e>
    {
        return false;
 80039a2:	2300      	movs	r3, #0
 80039a4:	e0c9      	b.n	8003b3a <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b80      	cmp	r3, #128	@ 0x80
 80039ae:	f000 808e 	beq.w	8003ace <print_value+0x146>
 80039b2:	2b80      	cmp	r3, #128	@ 0x80
 80039b4:	f300 80c0 	bgt.w	8003b38 <print_value+0x1b0>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	dc49      	bgt.n	8003a50 <print_value+0xc8>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f340 80bb 	ble.w	8003b38 <print_value+0x1b0>
 80039c2:	3b01      	subs	r3, #1
 80039c4:	2b1f      	cmp	r3, #31
 80039c6:	f200 80b7 	bhi.w	8003b38 <print_value+0x1b0>
 80039ca:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <print_value+0x48>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	08003a7b 	.word	0x08003a7b
 80039d4:	08003a9f 	.word	0x08003a9f
 80039d8:	08003b39 	.word	0x08003b39
 80039dc:	08003a57 	.word	0x08003a57
 80039e0:	08003b39 	.word	0x08003b39
 80039e4:	08003b39 	.word	0x08003b39
 80039e8:	08003b39 	.word	0x08003b39
 80039ec:	08003ac3 	.word	0x08003ac3
 80039f0:	08003b39 	.word	0x08003b39
 80039f4:	08003b39 	.word	0x08003b39
 80039f8:	08003b39 	.word	0x08003b39
 80039fc:	08003b39 	.word	0x08003b39
 8003a00:	08003b39 	.word	0x08003b39
 8003a04:	08003b39 	.word	0x08003b39
 8003a08:	08003b39 	.word	0x08003b39
 8003a0c:	08003b15 	.word	0x08003b15
 8003a10:	08003b39 	.word	0x08003b39
 8003a14:	08003b39 	.word	0x08003b39
 8003a18:	08003b39 	.word	0x08003b39
 8003a1c:	08003b39 	.word	0x08003b39
 8003a20:	08003b39 	.word	0x08003b39
 8003a24:	08003b39 	.word	0x08003b39
 8003a28:	08003b39 	.word	0x08003b39
 8003a2c:	08003b39 	.word	0x08003b39
 8003a30:	08003b39 	.word	0x08003b39
 8003a34:	08003b39 	.word	0x08003b39
 8003a38:	08003b39 	.word	0x08003b39
 8003a3c:	08003b39 	.word	0x08003b39
 8003a40:	08003b39 	.word	0x08003b39
 8003a44:	08003b39 	.word	0x08003b39
 8003a48:	08003b39 	.word	0x08003b39
 8003a4c:	08003b21 	.word	0x08003b21
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d06b      	beq.n	8003b2c <print_value+0x1a4>
 8003a54:	e070      	b.n	8003b38 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8003a56:	2105      	movs	r1, #5
 8003a58:	6838      	ldr	r0, [r7, #0]
 8003a5a:	f7fe ff11 	bl	8002880 <ensure>
 8003a5e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <print_value+0xe2>
            {
                return false;
 8003a66:	2300      	movs	r3, #0
 8003a68:	e067      	b.n	8003b3a <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4a35      	ldr	r2, [pc, #212]	@ (8003b44 <print_value+0x1bc>)
 8003a6e:	6810      	ldr	r0, [r2, #0]
 8003a70:	6018      	str	r0, [r3, #0]
 8003a72:	7912      	ldrb	r2, [r2, #4]
 8003a74:	711a      	strb	r2, [r3, #4]
            return true;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e05f      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8003a7a:	2106      	movs	r1, #6
 8003a7c:	6838      	ldr	r0, [r7, #0]
 8003a7e:	f7fe feff 	bl	8002880 <ensure>
 8003a82:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <print_value+0x106>
            {
                return false;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e055      	b.n	8003b3a <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a2d      	ldr	r2, [pc, #180]	@ (8003b48 <print_value+0x1c0>)
 8003a92:	6810      	ldr	r0, [r2, #0]
 8003a94:	6018      	str	r0, [r3, #0]
 8003a96:	8892      	ldrh	r2, [r2, #4]
 8003a98:	809a      	strh	r2, [r3, #4]
            return true;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e04d      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8003a9e:	2105      	movs	r1, #5
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	f7fe feed 	bl	8002880 <ensure>
 8003aa6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <print_value+0x12a>
            {
                return false;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e043      	b.n	8003b3a <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4a25      	ldr	r2, [pc, #148]	@ (8003b4c <print_value+0x1c4>)
 8003ab6:	6810      	ldr	r0, [r2, #0]
 8003ab8:	6018      	str	r0, [r3, #0]
 8003aba:	7912      	ldrb	r2, [r2, #4]
 8003abc:	711a      	strb	r2, [r3, #4]
            return true;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e03b      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fe ffdf 	bl	8002a88 <print_number>
 8003aca:	4603      	mov	r3, r0
 8003acc:	e035      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <print_value+0x156>
            {
                return false;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e02d      	b.n	8003b3a <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fc fbac 	bl	8000240 <strlen>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	3301      	adds	r3, #1
 8003aec:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	6838      	ldr	r0, [r7, #0]
 8003af2:	f7fe fec5 	bl	8002880 <ensure>
 8003af6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <print_value+0x17a>
            {
                return false;
 8003afe:	2300      	movs	r3, #0
 8003b00:	e01b      	b.n	8003b3a <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f00c fabb 	bl	8010086 <memcpy>
            return true;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e012      	b.n	8003b3a <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8003b14:	6839      	ldr	r1, [r7, #0]
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fc68 	bl	80033ec <print_string>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	e00c      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8003b20:	6839      	ldr	r1, [r7, #0]
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8d8 	bl	8003cd8 <print_array>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	e006      	b.n	8003b3a <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fa64 	bl	8003ffc <print_object>
 8003b34:	4603      	mov	r3, r0
 8003b36:	e000      	b.n	8003b3a <print_value+0x1b2>

        default:
            return false;
 8003b38:	2300      	movs	r3, #0
    }
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	0801392c 	.word	0x0801392c
 8003b48:	0801395c 	.word	0x0801395c
 8003b4c:	08013964 	.word	0x08013964

08003b50 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b6a:	d301      	bcc.n	8003b70 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e0af      	b.n	8003cd0 <parse_array+0x180>
    }
    input_buffer->depth++;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b5b      	cmp	r3, #91	@ 0x5b
 8003b88:	f040 8094 	bne.w	8003cb4 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003b96:	6838      	ldr	r0, [r7, #0]
 8003b98:	f7ff fc38 	bl	800340c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <parse_array+0x6e>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d207      	bcs.n	8003bbe <parse_array+0x6e>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b5d      	cmp	r3, #93	@ 0x5d
 8003bbc:	d061      	beq.n	8003c82 <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <parse_array+0x80>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d305      	bcc.n	8003bdc <parse_array+0x8c>
    {
        input_buffer->offset--;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	1e5a      	subs	r2, r3, #1
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	609a      	str	r2, [r3, #8]
        goto fail;
 8003bda:	e072      	b.n	8003cc2 <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	1e5a      	subs	r2, r3, #1
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	3310      	adds	r3, #16
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fe fd0e 	bl	800260c <cJSON_New_Item>
 8003bf0:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d05f      	beq.n	8003cb8 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	617b      	str	r3, [r7, #20]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	e007      	b.n	8003c18 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003c22:	6838      	ldr	r0, [r7, #0]
 8003c24:	f7ff fbf2 	bl	800340c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003c28:	6839      	ldr	r1, [r7, #0]
 8003c2a:	6938      	ldr	r0, [r7, #16]
 8003c2c:	f7ff fdc0 	bl	80037b0 <parse_value>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d042      	beq.n	8003cbc <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f7ff fbe8 	bl	800340c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <parse_array+0x10e>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d207      	bcs.n	8003c5e <parse_array+0x10e>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b2c      	cmp	r3, #44	@ 0x2c
 8003c5c:	d0c3      	beq.n	8003be6 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d02d      	beq.n	8003cc0 <parse_array+0x170>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d227      	bcs.n	8003cc0 <parse_array+0x170>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4413      	add	r3, r2
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b5d      	cmp	r3, #93	@ 0x5d
 8003c7e:	d11f      	bne.n	8003cc0 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8003c80:	e000      	b.n	8003c84 <parse_array+0x134>
        goto success;
 8003c82:	bf00      	nop
    input_buffer->depth--;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	1e5a      	subs	r2, r3, #1
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <parse_array+0x14a>
        head->prev = current_item;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	609a      	str	r2, [r3, #8]

    return true;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e00d      	b.n	8003cd0 <parse_array+0x180>
        goto fail;
 8003cb4:	bf00      	nop
 8003cb6:	e004      	b.n	8003cc2 <parse_array+0x172>
            goto fail; /* allocation failure */
 8003cb8:	bf00      	nop
 8003cba:	e002      	b.n	8003cc2 <parse_array+0x172>
            goto fail; /* failed to parse value */
 8003cbc:	bf00      	nop
 8003cbe:	e000      	b.n	8003cc2 <parse_array+0x172>
        goto fail; /* expected end of array */
 8003cc0:	bf00      	nop

fail:
    if (head != NULL)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f7fe fcb5 	bl	8002638 <cJSON_Delete>
    }

    return false;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <print_array+0x22>
    {
        return false;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e070      	b.n	8003ddc <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	6838      	ldr	r0, [r7, #0]
 8003cfe:	f7fe fdbf 	bl	8002880 <ensure>
 8003d02:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <print_array+0x36>
    {
        return false;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	e066      	b.n	8003ddc <print_array+0x104>
    }

    *output_pointer = '[';
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	225b      	movs	r2, #91	@ 0x5b
 8003d12:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8003d28:	e03d      	b.n	8003da6 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	6938      	ldr	r0, [r7, #16]
 8003d2e:	f7ff fe2b 	bl	8003988 <print_value>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <print_array+0x64>
        {
            return false;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e04f      	b.n	8003ddc <print_array+0x104>
        }
        update_offset(output_buffer);
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f7fe fe39 	bl	80029b4 <update_offset>
        if (current_element->next)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d02a      	beq.n	8003da0 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <print_array+0x7e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e000      	b.n	8003d58 <print_array+0x80>
 8003d56:	2301      	movs	r3, #1
 8003d58:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6838      	ldr	r0, [r7, #0]
 8003d62:	f7fe fd8d 	bl	8002880 <ensure>
 8003d66:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <print_array+0x9a>
            {
                return false;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e034      	b.n	8003ddc <print_array+0x104>
            }
            *output_pointer++ = ',';
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	1c5a      	adds	r2, r3, #1
 8003d76:	617a      	str	r2, [r7, #20]
 8003d78:	222c      	movs	r2, #44	@ 0x2c
 8003d7a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	617a      	str	r2, [r7, #20]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	441a      	add	r2, r3
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1be      	bne.n	8003d2a <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8003dac:	2102      	movs	r1, #2
 8003dae:	6838      	ldr	r0, [r7, #0]
 8003db0:	f7fe fd66 	bl	8002880 <ensure>
 8003db4:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <print_array+0xe8>
    {
        return false;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	e00d      	b.n	8003ddc <print_array+0x104>
    }
    *output_pointer++ = ']';
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	617a      	str	r2, [r7, #20]
 8003dc6:	225d      	movs	r2, #93	@ 0x5d
 8003dc8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	1e5a      	subs	r2, r3, #1
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	60da      	str	r2, [r3, #12]

    return true;
 8003dda:	2301      	movs	r3, #1
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dfe:	d301      	bcc.n	8003e04 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8003e00:	2300      	movs	r3, #0
 8003e02:	e0f7      	b.n	8003ff4 <parse_object+0x210>
    }
    input_buffer->depth++;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80db 	beq.w	8003fcc <parse_object+0x1e8>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f080 80d4 	bcs.w	8003fcc <parse_object+0x1e8>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	2b7b      	cmp	r3, #123	@ 0x7b
 8003e32:	f040 80cb 	bne.w	8003fcc <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8003e40:	6838      	ldr	r0, [r7, #0]
 8003e42:	f7ff fae3 	bl	800340c <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <parse_object+0x86>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d208      	bcs.n	8003e6a <parse_object+0x86>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4413      	add	r3, r2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b7d      	cmp	r3, #125	@ 0x7d
 8003e66:	f000 8098 	beq.w	8003f9a <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <parse_object+0x98>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d305      	bcc.n	8003e88 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	609a      	str	r2, [r3, #8]
        goto fail;
 8003e86:	e0ae      	b.n	8003fe6 <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	3310      	adds	r3, #16
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7fe fbb8 	bl	800260c <cJSON_New_Item>
 8003e9c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8095 	beq.w	8003fd0 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e007      	b.n	8003ec6 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 8083 	beq.w	8003fd4 <parse_object+0x1f0>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d27b      	bcs.n	8003fd4 <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003ee6:	6838      	ldr	r0, [r7, #0]
 8003ee8:	f7ff fa90 	bl	800340c <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	6938      	ldr	r0, [r7, #16]
 8003ef0:	f7ff f804 	bl	8002efc <parse_string>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06e      	beq.n	8003fd8 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8003efa:	6838      	ldr	r0, [r7, #0]
 8003efc:	f7ff fa86 	bl	800340c <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d063      	beq.n	8003fdc <parse_object+0x1f8>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d25d      	bcs.n	8003fdc <parse_object+0x1f8>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8003f2e:	d155      	bne.n	8003fdc <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8003f3a:	6838      	ldr	r0, [r7, #0]
 8003f3c:	f7ff fa66 	bl	800340c <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8003f40:	6839      	ldr	r1, [r7, #0]
 8003f42:	6938      	ldr	r0, [r7, #16]
 8003f44:	f7ff fc34 	bl	80037b0 <parse_value>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d048      	beq.n	8003fe0 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8003f4e:	6838      	ldr	r0, [r7, #0]
 8003f50:	f7ff fa5c 	bl	800340c <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <parse_object+0x192>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d207      	bcs.n	8003f76 <parse_object+0x192>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	4413      	add	r3, r2
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b2c      	cmp	r3, #44	@ 0x2c
 8003f74:	d08d      	beq.n	8003e92 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d033      	beq.n	8003fe4 <parse_object+0x200>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d22d      	bcs.n	8003fe4 <parse_object+0x200>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b7d      	cmp	r3, #125	@ 0x7d
 8003f96:	d125      	bne.n	8003fe4 <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8003f98:	e000      	b.n	8003f9c <parse_object+0x1b8>
        goto success; /* empty object */
 8003f9a:	bf00      	nop
    input_buffer->depth--;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <parse_object+0x1ce>
        head->prev = current_item;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2240      	movs	r2, #64	@ 0x40
 8003fb6:	60da      	str	r2, [r3, #12]
    item->child = head;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	609a      	str	r2, [r3, #8]
    return true;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e013      	b.n	8003ff4 <parse_object+0x210>
        goto fail; /* not an object */
 8003fcc:	bf00      	nop
 8003fce:	e00a      	b.n	8003fe6 <parse_object+0x202>
            goto fail; /* allocation failure */
 8003fd0:	bf00      	nop
 8003fd2:	e008      	b.n	8003fe6 <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8003fd4:	bf00      	nop
 8003fd6:	e006      	b.n	8003fe6 <parse_object+0x202>
            goto fail; /* failed to parse name */
 8003fd8:	bf00      	nop
 8003fda:	e004      	b.n	8003fe6 <parse_object+0x202>
            goto fail; /* invalid object */
 8003fdc:	bf00      	nop
 8003fde:	e002      	b.n	8003fe6 <parse_object+0x202>
            goto fail; /* failed to parse value */
 8003fe0:	bf00      	nop
 8003fe2:	e000      	b.n	8003fe6 <parse_object+0x202>
        goto fail; /* expected end of object */
 8003fe4:	bf00      	nop

fail:
    if (head != NULL)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8003fec:	6978      	ldr	r0, [r7, #20]
 8003fee:	f7fe fb23 	bl	8002638 <cJSON_Delete>
    }

    return false;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <print_object+0x22>
    {
        return false;
 800401a:	2300      	movs	r3, #0
 800401c:	e108      	b.n	8004230 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <print_object+0x2e>
 8004026:	2302      	movs	r3, #2
 8004028:	e000      	b.n	800402c <print_object+0x30>
 800402a:	2301      	movs	r3, #1
 800402c:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3301      	adds	r3, #1
 8004032:	4619      	mov	r1, r3
 8004034:	6838      	ldr	r0, [r7, #0]
 8004036:	f7fe fc23 	bl	8002880 <ensure>
 800403a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <print_object+0x4a>
    {
        return false;
 8004042:	2300      	movs	r3, #0
 8004044:	e0f4      	b.n	8004230 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	61fa      	str	r2, [r7, #28]
 800404c:	227b      	movs	r2, #123	@ 0x7b
 800404e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d004      	beq.n	800406c <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	61fa      	str	r2, [r7, #28]
 8004068:	220a      	movs	r2, #10
 800406a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	441a      	add	r2, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	609a      	str	r2, [r3, #8]

    while (current_item)
 8004078:	e0a0      	b.n	80041bc <print_object+0x1c0>
    {
        if (output_buffer->format)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d022      	beq.n	80040c8 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	4619      	mov	r1, r3
 8004088:	6838      	ldr	r0, [r7, #0]
 800408a:	f7fe fbf9 	bl	8002880 <ensure>
 800408e:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <print_object+0x9e>
            {
                return false;
 8004096:	2300      	movs	r3, #0
 8004098:	e0ca      	b.n	8004230 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e007      	b.n	80040b0 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	61fa      	str	r2, [r7, #28]
 80040a6:	2209      	movs	r2, #9
 80040a8:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	3301      	adds	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	697a      	ldr	r2, [r7, #20]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3f2      	bcc.n	80040a0 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	441a      	add	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	6839      	ldr	r1, [r7, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f85c 	bl	800318c <print_string_ptr>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <print_object+0xe2>
        {
            return false;
 80040da:	2300      	movs	r3, #0
 80040dc:	e0a8      	b.n	8004230 <print_object+0x234>
        }
        update_offset(output_buffer);
 80040de:	6838      	ldr	r0, [r7, #0]
 80040e0:	f7fe fc68 	bl	80029b4 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <print_object+0xf4>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e000      	b.n	80040f2 <print_object+0xf6>
 80040f0:	2301      	movs	r3, #1
 80040f2:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80040f4:	68f9      	ldr	r1, [r7, #12]
 80040f6:	6838      	ldr	r0, [r7, #0]
 80040f8:	f7fe fbc2 	bl	8002880 <ensure>
 80040fc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <print_object+0x10c>
        {
            return false;
 8004104:	2300      	movs	r3, #0
 8004106:	e093      	b.n	8004230 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	61fa      	str	r2, [r7, #28]
 800410e:	223a      	movs	r2, #58	@ 0x3a
 8004110:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	1c5a      	adds	r2, r3, #1
 800411e:	61fa      	str	r2, [r7, #28]
 8004120:	2209      	movs	r2, #9
 8004122:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	441a      	add	r2, r3
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	69b8      	ldr	r0, [r7, #24]
 8004134:	f7ff fc28 	bl	8003988 <print_value>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <print_object+0x146>
        {
            return false;
 800413e:	2300      	movs	r3, #0
 8004140:	e076      	b.n	8004230 <print_object+0x234>
        }
        update_offset(output_buffer);
 8004142:	6838      	ldr	r0, [r7, #0]
 8004144:	f7fe fc36 	bl	80029b4 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <print_object+0x158>
 8004150:	2201      	movs	r2, #1
 8004152:	e000      	b.n	8004156 <print_object+0x15a>
 8004154:	2200      	movs	r2, #0
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <print_object+0x166>
 800415e:	2301      	movs	r3, #1
 8004160:	e000      	b.n	8004164 <print_object+0x168>
 8004162:	2300      	movs	r3, #0
 8004164:	4413      	add	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	4619      	mov	r1, r3
 800416e:	6838      	ldr	r0, [r7, #0]
 8004170:	f7fe fb86 	bl	8002880 <ensure>
 8004174:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <print_object+0x184>
        {
            return false;
 800417c:	2300      	movs	r3, #0
 800417e:	e057      	b.n	8004230 <print_object+0x234>
        }
        if (current_item->next)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d004      	beq.n	8004192 <print_object+0x196>
        {
            *output_pointer++ = ',';
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	1c5a      	adds	r2, r3, #1
 800418c:	61fa      	str	r2, [r7, #28]
 800418e:	222c      	movs	r2, #44	@ 0x2c
 8004190:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d004      	beq.n	80041a4 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	61fa      	str	r2, [r7, #28]
 80041a0:	220a      	movs	r2, #10
 80041a2:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	2200      	movs	r2, #0
 80041a8:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	441a      	add	r2, r3
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f47f af5b 	bne.w	800407a <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <print_object+0x1d8>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	e000      	b.n	80041d6 <print_object+0x1da>
 80041d4:	2302      	movs	r3, #2
 80041d6:	4619      	mov	r1, r3
 80041d8:	6838      	ldr	r0, [r7, #0]
 80041da:	f7fe fb51 	bl	8002880 <ensure>
 80041de:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <print_object+0x1ee>
    {
        return false;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e022      	b.n	8004230 <print_object+0x234>
    }
    if (output_buffer->format)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80041f2:	2300      	movs	r3, #0
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e007      	b.n	8004208 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	61fa      	str	r2, [r7, #28]
 80041fe:	2209      	movs	r2, #9
 8004200:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d3f1      	bcc.n	80041f8 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	61fa      	str	r2, [r7, #28]
 800421a:	227d      	movs	r2, #125	@ 0x7d
 800421c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2200      	movs	r2, #0
 8004222:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	60da      	str	r2, [r3, #12]

    return true;
 800422e:	2301      	movs	r3, #1
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <get_object_item+0x1c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <get_object_item+0x20>
    {
        return NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	e033      	b.n	80042c0 <get_object_item+0x88>
    }

    current_element = object->child;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d017      	beq.n	8004294 <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8004264:	e002      	b.n	800426c <get_object_item+0x34>
        {
            current_element = current_element->next;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01c      	beq.n	80042ac <get_object_item+0x74>
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d018      	beq.n	80042ac <get_object_item+0x74>
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	4619      	mov	r1, r3
 8004280:	68b8      	ldr	r0, [r7, #8]
 8004282:	f7fb ff7d 	bl	8000180 <strcmp>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1ec      	bne.n	8004266 <get_object_item+0x2e>
 800428c:	e00e      	b.n	80042ac <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d008      	beq.n	80042ac <get_object_item+0x74>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	4619      	mov	r1, r3
 80042a0:	68b8      	ldr	r0, [r7, #8]
 80042a2:	f7fe f91f 	bl	80024e4 <case_insensitive_strcmp>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <get_object_item+0x82>
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <get_object_item+0x86>
        return NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	e000      	b.n	80042c0 <get_object_item+0x88>
    }

    return current_element;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80042d2:	2200      	movs	r2, #0
 80042d4:	6839      	ldr	r1, [r7, #0]
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffae 	bl	8004238 <get_object_item>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b083      	sub	sp, #12
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	605a      	str	r2, [r3, #4]
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <add_item_to_array+0x22>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d003      	beq.n	800432a <add_item_to_array+0x22>
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d101      	bne.n	800432e <add_item_to_array+0x26>
    {
        return false;
 800432a:	2300      	movs	r3, #0
 800432c:	e01e      	b.n	800436c <add_item_to_array+0x64>
    }

    child = array->child;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
 800434c:	e00d      	b.n	800436a <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ffc2 	bl	80042e6 <suffix_object>
            array->child->prev = item;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800436a:	2301      	movs	r3, #1
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b086      	sub	sp, #24
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
 8004396:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800439c:	2300      	movs	r3, #0
 800439e:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <add_item_to_object+0x30>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d006      	beq.n	80043ba <add_item_to_object+0x30>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <add_item_to_object+0x30>
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d101      	bne.n	80043be <add_item_to_object+0x34>
    {
        return false;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e036      	b.n	800442c <add_item_to_object+0xa2>
    }

    if (constant_key)
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d009      	beq.n	80043d8 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f7ff ffd5 	bl	8004374 <cast_away_const>
 80043ca:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043d4:	613b      	str	r3, [r7, #16]
 80043d6:	e00e      	b.n	80043f6 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f7fe f8ee 	bl	80025bc <cJSON_strdup>
 80043e0:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <add_item_to_object+0x62>
        {
            return false;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e01f      	b.n	800442c <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043f4:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <add_item_to_object+0x8c>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	6a12      	ldr	r2, [r2, #32]
 8004412:	4610      	mov	r0, r2
 8004414:	4798      	blx	r3
    }

    item->string = new_key;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff ff6f 	bl	8004308 <add_item_to_array>
 800442a:	4603      	mov	r3, r0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <cJSON_AddBoolToObject>:
    cJSON_Delete(false_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
    cJSON *bool_item = cJSON_CreateBool(boolean);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f8ef 	bl	8004624 <cJSON_CreateBool>
 8004446:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 8004448:	2300      	movs	r3, #0
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <cJSON_AddBoolToObject+0x40>)
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f7ff ff99 	bl	800438a <add_item_to_object>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <cJSON_AddBoolToObject+0x2e>
    {
        return bool_item;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	e003      	b.n	800446a <cJSON_AddBoolToObject+0x36>
    }

    cJSON_Delete(bool_item);
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f7fe f8e8 	bl	8002638 <cJSON_Delete>
    return NULL;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	2000000c 	.word	0x2000000c

08004478 <cJSON_AddNumberToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af02      	add	r7, sp, #8
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8004486:	ed97 0b00 	vldr	d0, [r7]
 800448a:	f000 f8e5 	bl	8004658 <cJSON_CreateNumber>
 800448e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8004490:	2300      	movs	r3, #0
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <cJSON_AddNumberToObject+0x44>)
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f7ff ff75 	bl	800438a <add_item_to_object>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	e003      	b.n	80044b2 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 80044aa:	6978      	ldr	r0, [r7, #20]
 80044ac:	f7fe f8c4 	bl	8002638 <cJSON_Delete>
    return NULL;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	2000000c 	.word	0x2000000c

080044c0 <cJSON_ReplaceItemViaPointer>:
    }
    return true;
}

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
    if ((parent == NULL) || (parent->child == NULL) || (replacement == NULL) || (item == NULL))
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d009      	beq.n	80044e6 <cJSON_ReplaceItemViaPointer+0x26>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <cJSON_ReplaceItemViaPointer+0x26>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d002      	beq.n	80044e6 <cJSON_ReplaceItemViaPointer+0x26>
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <cJSON_ReplaceItemViaPointer+0x2a>
    {
        return false;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e042      	b.n	8004570 <cJSON_ReplaceItemViaPointer+0xb0>
    }

    if (replacement == item)
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d101      	bne.n	80044f6 <cJSON_ReplaceItemViaPointer+0x36>
    {
        return true;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e03c      	b.n	8004570 <cJSON_ReplaceItemViaPointer+0xb0>
    }

    replacement->next = item->next;
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
    replacement->prev = item->prev;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	605a      	str	r2, [r3, #4]

    if (replacement->next != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <cJSON_ReplaceItemViaPointer+0x56>
    {
        replacement->next->prev = replacement;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	605a      	str	r2, [r3, #4]
    }
    if (parent->child == item)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	429a      	cmp	r2, r3
 800451e:	d10d      	bne.n	800453c <cJSON_ReplaceItemViaPointer+0x7c>
    {
        if (parent->child->prev == parent->child)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	429a      	cmp	r2, r3
 800452c:	d102      	bne.n	8004534 <cJSON_ReplaceItemViaPointer+0x74>
        {
            replacement->prev = replacement;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
        }
        parent->child = replacement;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
 800453a:	e00f      	b.n	800455c <cJSON_ReplaceItemViaPointer+0x9c>
    else
    {   /*
         * To find the last item in array quickly, we use prev in array.
         * We can't modify the last item's next pointer where this item was the parent's child
         */
        if (replacement->prev != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <cJSON_ReplaceItemViaPointer+0x8c>
        {
            replacement->prev->next = replacement;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
        }
        if (replacement->next == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d103      	bne.n	800455c <cJSON_ReplaceItemViaPointer+0x9c>
        {
            parent->child->prev = replacement;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]
        }
    }

    item->next = NULL;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
    item->prev = NULL;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2200      	movs	r2, #0
 8004566:	605a      	str	r2, [r3, #4]
    cJSON_Delete(item);
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7fe f865 	bl	8002638 <cJSON_Delete>

    return true;
 800456e:	2301      	movs	r3, #1
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <replace_item_in_object>:

    return cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
}

static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
    if ((replacement == NULL) || (string == NULL))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <replace_item_in_object+0x1a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <replace_item_in_object+0x1e>
    {
        return false;
 8004592:	2300      	movs	r3, #0
 8004594:	e02d      	b.n	80045f2 <replace_item_in_object+0x7a>
    }

    /* replace the name in the replacement */
    if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d108      	bne.n	80045b4 <replace_item_in_object+0x3c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <replace_item_in_object+0x3c>
    {
        cJSON_free(replacement->string);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f8de 	bl	8004770 <cJSON_free>
    }
    replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80045b4:	4911      	ldr	r1, [pc, #68]	@ (80045fc <replace_item_in_object+0x84>)
 80045b6:	68b8      	ldr	r0, [r7, #8]
 80045b8:	f7fe f800 	bl	80025bc <cJSON_strdup>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	621a      	str	r2, [r3, #32]
    if (replacement->string == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <replace_item_in_object+0x56>
    {
        return false;
 80045ca:	2300      	movs	r3, #0
 80045cc:	e011      	b.n	80045f2 <replace_item_in_object+0x7a>
    }

    replacement->type &= ~cJSON_StringIsConst;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60da      	str	r2, [r3, #12]

    return cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff fe2a 	bl	8004238 <get_object_item>
 80045e4:	4603      	mov	r3, r0
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4619      	mov	r1, r3
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff68 	bl	80044c0 <cJSON_ReplaceItemViaPointer>
 80045f0:	4603      	mov	r3, r0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	2000000c 	.word	0x2000000c

08004600 <cJSON_ReplaceItemInObject>:

CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
    return replace_item_in_object(object, string, newitem, false);
 800460c:	2300      	movs	r3, #0
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ffb0 	bl	8004578 <replace_item_in_object>
 8004618:	4603      	mov	r3, r0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <cJSON_CreateBool>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 800462c:	4809      	ldr	r0, [pc, #36]	@ (8004654 <cJSON_CreateBool+0x30>)
 800462e:	f7fd ffed 	bl	800260c <cJSON_New_Item>
 8004632:	60f8      	str	r0, [r7, #12]
    if(item)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <cJSON_CreateBool+0x26>
    {
        item->type = boolean ? cJSON_True : cJSON_False;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <cJSON_CreateBool+0x20>
 8004640:	2202      	movs	r2, #2
 8004642:	e000      	b.n	8004646 <cJSON_CreateBool+0x22>
 8004644:	2201      	movs	r2, #1
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	60da      	str	r2, [r3, #12]
    }

    return item;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000000c 	.word	0x2000000c

08004658 <cJSON_CreateNumber>:

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8004662:	481f      	ldr	r0, [pc, #124]	@ (80046e0 <cJSON_CreateNumber+0x88>)
 8004664:	f7fd ffd2 	bl	800260c <cJSON_New_Item>
 8004668:	60f8      	str	r0, [r7, #12]
    if(item)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d02c      	beq.n	80046ca <cJSON_CreateNumber+0x72>
    {
        item->type = cJSON_Number;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2208      	movs	r2, #8
 8004674:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8004680:	a315      	add	r3, pc, #84	@ (adr r3, 80046d8 <cJSON_CreateNumber+0x80>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	e9d7 0100 	ldrd	r0, r1, [r7]
 800468a:	f7fc fa23 	bl	8000ad4 <__aeabi_dcmpge>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <cJSON_CreateNumber+0x46>
        {
            item->valueint = INT_MAX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800469a:	615a      	str	r2, [r3, #20]
 800469c:	e015      	b.n	80046ca <cJSON_CreateNumber+0x72>
        }
        else if (num <= (double)INT_MIN)
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	4b10      	ldr	r3, [pc, #64]	@ (80046e4 <cJSON_CreateNumber+0x8c>)
 80046a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046a8:	f7fc fa0a 	bl	8000ac0 <__aeabi_dcmple>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d004      	beq.n	80046bc <cJSON_CreateNumber+0x64>
        {
            item->valueint = INT_MIN;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80046b8:	615a      	str	r2, [r3, #20]
 80046ba:	e006      	b.n	80046ca <cJSON_CreateNumber+0x72>
        }
        else
        {
            item->valueint = (int)num;
 80046bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046c0:	f7fc fa32 	bl	8000b28 <__aeabi_d2iz>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	f3af 8000 	nop.w
 80046d8:	ffc00000 	.word	0xffc00000
 80046dc:	41dfffff 	.word	0x41dfffff
 80046e0:	2000000c 	.word	0x2000000c
 80046e4:	c1e00000 	.word	0xc1e00000

080046e8 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80046ee:	4807      	ldr	r0, [pc, #28]	@ (800470c <cJSON_CreateObject+0x24>)
 80046f0:	f7fd ff8c 	bl	800260c <cJSON_New_Item>
 80046f4:	6078      	str	r0, [r7, #4]
    if (item)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	60da      	str	r2, [r3, #12]
    }

    return item;
 8004702:	687b      	ldr	r3, [r7, #4]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	2000000c 	.word	0x2000000c

08004710 <cJSON_IsBool>:
    return (item->type & 0xff) == cJSON_True;
}


CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <cJSON_IsBool+0x12>
    {
        return false;
 800471e:	2300      	movs	r3, #0
 8004720:	e008      	b.n	8004734 <cJSON_IsBool+0x24>
    }

    return (item->type & (cJSON_True | cJSON_False)) != 0;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf14      	ite	ne
 800472e:	2301      	movne	r3, #1
 8004730:	2300      	moveq	r3, #0
 8004732:	b2db      	uxtb	r3, r3
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <cJSON_IsNumber>:

    return (item->type & 0xFF) == cJSON_NULL;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <cJSON_IsNumber+0x12>
    {
        return false;
 800474e:	2300      	movs	r3, #0
 8004750:	e007      	b.n	8004762 <cJSON_IsNumber+0x22>
    }

    return (item->type & 0xFF) == cJSON_Number;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b08      	cmp	r3, #8
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <cJSON_free>:
{
    return global_hooks.allocate(size);
}

CJSON_PUBLIC(void) cJSON_free(void *object)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(object);
 8004778:	4b04      	ldr	r3, [pc, #16]	@ (800478c <cJSON_free+0x1c>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3
    object = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	2000000c 	.word	0x2000000c

08004790 <buildFullPath>:
 */


#include "SD_CARD.h"

void buildFullPath(const char *filename, char *fullPath, size_t size) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
    snprintf(fullPath, size, "0:%s", filename);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <buildFullPath+0x20>)
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	68b8      	ldr	r0, [r7, #8]
 80047a4:	f00b fa76 	bl	800fc94 <sniprintf>
}
 80047a8:	bf00      	nop
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	0801396c 	.word	0x0801396c

080047b4 <ReadFileFromSD>:


char* ReadFileFromSD(const char *filename) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b096      	sub	sp, #88	@ 0x58
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
    FRESULT res;
    char fullPath[64];

    res = f_mount(&FatFs, "0:", 1);
 80047bc:	2201      	movs	r2, #1
 80047be:	4943      	ldr	r1, [pc, #268]	@ (80048cc <ReadFileFromSD+0x118>)
 80047c0:	4843      	ldr	r0, [pc, #268]	@ (80048d0 <ReadFileFromSD+0x11c>)
 80047c2:	f008 fdf3 	bl	800d3ac <f_mount>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (res != FR_OK) {
 80047cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <ReadFileFromSD+0x30>
         printf("Failed to mount SD card in ReadFileFromSD! (Error code: %d)\n", res);
 80047d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80047d8:	4619      	mov	r1, r3
 80047da:	483e      	ldr	r0, [pc, #248]	@ (80048d4 <ReadFileFromSD+0x120>)
 80047dc:	f00b f9ea 	bl	800fbb4 <iprintf>
         return NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e06e      	b.n	80048c2 <ReadFileFromSD+0x10e>
    }

    buildFullPath(filename, fullPath, sizeof(fullPath));
 80047e4:	f107 030c 	add.w	r3, r7, #12
 80047e8:	2240      	movs	r2, #64	@ 0x40
 80047ea:	4619      	mov	r1, r3
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffcf 	bl	8004790 <buildFullPath>
    res = f_open(&fil, fullPath, FA_READ);
 80047f2:	f107 030c 	add.w	r3, r7, #12
 80047f6:	2201      	movs	r2, #1
 80047f8:	4619      	mov	r1, r3
 80047fa:	4837      	ldr	r0, [pc, #220]	@ (80048d8 <ReadFileFromSD+0x124>)
 80047fc:	f008 fe1c 	bl	800d438 <f_open>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (res != FR_OK) {
 8004806:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <ReadFileFromSD+0x78>
         printf("Error opening file: %s (Error code: %d)\n", fullPath, res);
 800480e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4619      	mov	r1, r3
 8004818:	4830      	ldr	r0, [pc, #192]	@ (80048dc <ReadFileFromSD+0x128>)
 800481a:	f00b f9cb 	bl	800fbb4 <iprintf>
         f_mount(0, "0:", 0);
 800481e:	2200      	movs	r2, #0
 8004820:	492a      	ldr	r1, [pc, #168]	@ (80048cc <ReadFileFromSD+0x118>)
 8004822:	2000      	movs	r0, #0
 8004824:	f008 fdc2 	bl	800d3ac <f_mount>
         return NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	e04a      	b.n	80048c2 <ReadFileFromSD+0x10e>
    }

    DWORD file_size = f_size(&fil);
 800482c:	4b2a      	ldr	r3, [pc, #168]	@ (80048d8 <ReadFileFromSD+0x124>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	653b      	str	r3, [r7, #80]	@ 0x50
    char *buffer = malloc(file_size + 1);
 8004832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004834:	3301      	adds	r3, #1
 8004836:	4618      	mov	r0, r3
 8004838:	f009 fd9e 	bl	800e378 <malloc>
 800483c:	4603      	mov	r3, r0
 800483e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (!buffer) {
 8004840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10c      	bne.n	8004860 <ReadFileFromSD+0xac>
         printf("Memory allocation error in ReadFileFromSD!\n");
 8004846:	4826      	ldr	r0, [pc, #152]	@ (80048e0 <ReadFileFromSD+0x12c>)
 8004848:	f00b fa1c 	bl	800fc84 <puts>
         f_close(&fil);
 800484c:	4822      	ldr	r0, [pc, #136]	@ (80048d8 <ReadFileFromSD+0x124>)
 800484e:	f009 faef 	bl	800de30 <f_close>
         f_mount(0, "0:", 0);
 8004852:	2200      	movs	r2, #0
 8004854:	491d      	ldr	r1, [pc, #116]	@ (80048cc <ReadFileFromSD+0x118>)
 8004856:	2000      	movs	r0, #0
 8004858:	f008 fda8 	bl	800d3ac <f_mount>
         return NULL;
 800485c:	2300      	movs	r3, #0
 800485e:	e030      	b.n	80048c2 <ReadFileFromSD+0x10e>
    }

    UINT br;
    res = f_read(&fil, buffer, file_size, &br);
 8004860:	f107 0308 	add.w	r3, r7, #8
 8004864:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004866:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8004868:	481b      	ldr	r0, [pc, #108]	@ (80048d8 <ReadFileFromSD+0x124>)
 800486a:	f008 ffaf 	bl	800d7cc <f_read>
 800486e:	4603      	mov	r3, r0
 8004870:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    if (res != FR_OK) {
 8004874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004878:	2b00      	cmp	r3, #0
 800487a:	d014      	beq.n	80048a6 <ReadFileFromSD+0xf2>
         printf("Error reading file: %s (Error code: %d)\n", fullPath, res);
 800487c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004880:	f107 030c 	add.w	r3, r7, #12
 8004884:	4619      	mov	r1, r3
 8004886:	4817      	ldr	r0, [pc, #92]	@ (80048e4 <ReadFileFromSD+0x130>)
 8004888:	f00b f994 	bl	800fbb4 <iprintf>
         free(buffer);
 800488c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800488e:	f009 fd7b 	bl	800e388 <free>
         f_close(&fil);
 8004892:	4811      	ldr	r0, [pc, #68]	@ (80048d8 <ReadFileFromSD+0x124>)
 8004894:	f009 facc 	bl	800de30 <f_close>
         f_mount(0, "0:", 0);
 8004898:	2200      	movs	r2, #0
 800489a:	490c      	ldr	r1, [pc, #48]	@ (80048cc <ReadFileFromSD+0x118>)
 800489c:	2000      	movs	r0, #0
 800489e:	f008 fd85 	bl	800d3ac <f_mount>
         return NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e00d      	b.n	80048c2 <ReadFileFromSD+0x10e>
    }
    buffer[file_size] = '\0';
 80048a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048aa:	4413      	add	r3, r2
 80048ac:	2200      	movs	r2, #0
 80048ae:	701a      	strb	r2, [r3, #0]

    f_close(&fil);
 80048b0:	4809      	ldr	r0, [pc, #36]	@ (80048d8 <ReadFileFromSD+0x124>)
 80048b2:	f009 fabd 	bl	800de30 <f_close>
    f_mount(0, "0:", 0);
 80048b6:	2200      	movs	r2, #0
 80048b8:	4904      	ldr	r1, [pc, #16]	@ (80048cc <ReadFileFromSD+0x118>)
 80048ba:	2000      	movs	r0, #0
 80048bc:	f008 fd76 	bl	800d3ac <f_mount>
    return buffer;
 80048c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3758      	adds	r7, #88	@ 0x58
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	08013974 	.word	0x08013974
 80048d0:	200003c0 	.word	0x200003c0
 80048d4:	08013978 	.word	0x08013978
 80048d8:	200005f4 	.word	0x200005f4
 80048dc:	080139b8 	.word	0x080139b8
 80048e0:	080139e4 	.word	0x080139e4
 80048e4:	08013a10 	.word	0x08013a10

080048e8 <WriteToSDCard>:


void WriteToSDCard(const char *filename, const char *data) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b094      	sub	sp, #80	@ 0x50
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
    FRESULT res;
    char fullPath[64];

    // Mount the SD card using drive "0:"
    res = f_mount(&FatFs, "0:", 1);
 80048f2:	2201      	movs	r2, #1
 80048f4:	493a      	ldr	r1, [pc, #232]	@ (80049e0 <WriteToSDCard+0xf8>)
 80048f6:	483b      	ldr	r0, [pc, #236]	@ (80049e4 <WriteToSDCard+0xfc>)
 80048f8:	f008 fd58 	bl	800d3ac <f_mount>
 80048fc:	4603      	mov	r3, r0
 80048fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (res != FR_OK) {
 8004902:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004906:	2b00      	cmp	r3, #0
 8004908:	d006      	beq.n	8004918 <WriteToSDCard+0x30>
         printf("Failed to mount SD card in WriteToSDCard! (Error code: %d)\n", res);
 800490a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800490e:	4619      	mov	r1, r3
 8004910:	4835      	ldr	r0, [pc, #212]	@ (80049e8 <WriteToSDCard+0x100>)
 8004912:	f00b f94f 	bl	800fbb4 <iprintf>
         return;
 8004916:	e060      	b.n	80049da <WriteToSDCard+0xf2>
    }

    buildFullPath(filename, fullPath, sizeof(fullPath));
 8004918:	f107 030c 	add.w	r3, r7, #12
 800491c:	2240      	movs	r2, #64	@ 0x40
 800491e:	4619      	mov	r1, r3
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff35 	bl	8004790 <buildFullPath>
    res = f_open(&fil, fullPath, FA_CREATE_ALWAYS | FA_WRITE);
 8004926:	f107 030c 	add.w	r3, r7, #12
 800492a:	220a      	movs	r2, #10
 800492c:	4619      	mov	r1, r3
 800492e:	482f      	ldr	r0, [pc, #188]	@ (80049ec <WriteToSDCard+0x104>)
 8004930:	f008 fd82 	bl	800d438 <f_open>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (res != FR_OK) {
 800493a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800493e:	2b00      	cmp	r3, #0
 8004940:	d018      	beq.n	8004974 <WriteToSDCard+0x8c>
         if (res == FR_NOT_ENABLED) {
 8004942:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004946:	2b0c      	cmp	r3, #12
 8004948:	d106      	bne.n	8004958 <WriteToSDCard+0x70>
             printf("Error: Disk I/O driver not enabled. (FR_NOT_ENABLED, error code: %d)\n", res);
 800494a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800494e:	4619      	mov	r1, r3
 8004950:	4827      	ldr	r0, [pc, #156]	@ (80049f0 <WriteToSDCard+0x108>)
 8004952:	f00b f92f 	bl	800fbb4 <iprintf>
 8004956:	e007      	b.n	8004968 <WriteToSDCard+0x80>
         } else {
             printf("Error opening file %s for writing! (Error code: %d)\n", fullPath, res);
 8004958:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800495c:	f107 030c 	add.w	r3, r7, #12
 8004960:	4619      	mov	r1, r3
 8004962:	4824      	ldr	r0, [pc, #144]	@ (80049f4 <WriteToSDCard+0x10c>)
 8004964:	f00b f926 	bl	800fbb4 <iprintf>
         }
         f_mount(0, "0:", 0);
 8004968:	2200      	movs	r2, #0
 800496a:	491d      	ldr	r1, [pc, #116]	@ (80049e0 <WriteToSDCard+0xf8>)
 800496c:	2000      	movs	r0, #0
 800496e:	f008 fd1d 	bl	800d3ac <f_mount>
         return;
 8004972:	e032      	b.n	80049da <WriteToSDCard+0xf2>
    }

    UINT bw;
    res = f_write(&fil, data, strlen(data), &bw);
 8004974:	6838      	ldr	r0, [r7, #0]
 8004976:	f7fb fc63 	bl	8000240 <strlen>
 800497a:	4602      	mov	r2, r0
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	481a      	ldr	r0, [pc, #104]	@ (80049ec <WriteToSDCard+0x104>)
 8004984:	f009 f861 	bl	800da4a <f_write>
 8004988:	4603      	mov	r3, r0
 800498a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    if (res != FR_OK || bw != strlen(data)) {
 800498e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <WriteToSDCard+0xbc>
 8004996:	6838      	ldr	r0, [r7, #0]
 8004998:	f7fb fc52 	bl	8000240 <strlen>
 800499c:	4602      	mov	r2, r0
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d008      	beq.n	80049b6 <WriteToSDCard+0xce>
         printf("Error writing to file %s! (Error code: %d)\n", fullPath, res);
 80049a4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80049a8:	f107 030c 	add.w	r3, r7, #12
 80049ac:	4619      	mov	r1, r3
 80049ae:	4812      	ldr	r0, [pc, #72]	@ (80049f8 <WriteToSDCard+0x110>)
 80049b0:	f00b f900 	bl	800fbb4 <iprintf>
 80049b4:	e006      	b.n	80049c4 <WriteToSDCard+0xdc>
    } else {
         printf("Successfully wrote %d bytes to %s.\n", bw, fullPath);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f107 020c 	add.w	r2, r7, #12
 80049bc:	4619      	mov	r1, r3
 80049be:	480f      	ldr	r0, [pc, #60]	@ (80049fc <WriteToSDCard+0x114>)
 80049c0:	f00b f8f8 	bl	800fbb4 <iprintf>
    }

    f_sync(&fil);
 80049c4:	4809      	ldr	r0, [pc, #36]	@ (80049ec <WriteToSDCard+0x104>)
 80049c6:	f009 f9b5 	bl	800dd34 <f_sync>
    f_close(&fil);
 80049ca:	4808      	ldr	r0, [pc, #32]	@ (80049ec <WriteToSDCard+0x104>)
 80049cc:	f009 fa30 	bl	800de30 <f_close>
    f_mount(0, "0:", 0);
 80049d0:	2200      	movs	r2, #0
 80049d2:	4903      	ldr	r1, [pc, #12]	@ (80049e0 <WriteToSDCard+0xf8>)
 80049d4:	2000      	movs	r0, #0
 80049d6:	f008 fce9 	bl	800d3ac <f_mount>
}
 80049da:	3750      	adds	r7, #80	@ 0x50
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	08013974 	.word	0x08013974
 80049e4:	200003c0 	.word	0x200003c0
 80049e8:	08013a3c 	.word	0x08013a3c
 80049ec:	200005f4 	.word	0x200005f4
 80049f0:	08013a78 	.word	0x08013a78
 80049f4:	08013ac0 	.word	0x08013ac0
 80049f8:	08013af8 	.word	0x08013af8
 80049fc:	08013b24 	.word	0x08013b24

08004a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004a3c <HAL_Init+0x3c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8004a3c <HAL_Init+0x3c>)
 8004a10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a16:	2003      	movs	r0, #3
 8004a18:	f000 f96c 	bl	8004cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a1c:	200f      	movs	r0, #15
 8004a1e:	f000 f80f 	bl	8004a40 <HAL_InitTick>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	71fb      	strb	r3, [r7, #7]
 8004a2c:	e001      	b.n	8004a32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a2e:	f7fc fdab 	bl	8001588 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a32:	79fb      	ldrb	r3, [r7, #7]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	58004000 	.word	0x58004000

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004a4c:	4b17      	ldr	r3, [pc, #92]	@ (8004aac <HAL_InitTick+0x6c>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d024      	beq.n	8004a9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a54:	f003 fa38 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b14      	ldr	r3, [pc, #80]	@ (8004aac <HAL_InitTick+0x6c>)
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a64:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f974 	bl	8004d5a <HAL_SYSTICK_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10f      	bne.n	8004a98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2b0f      	cmp	r3, #15
 8004a7c:	d809      	bhi.n	8004a92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	f04f 30ff 	mov.w	r0, #4294967295
 8004a86:	f000 f940 	bl	8004d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a8a:	4a09      	ldr	r2, [pc, #36]	@ (8004ab0 <HAL_InitTick+0x70>)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	e007      	b.n	8004aa2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
 8004a96:	e004      	b.n	8004aa2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	e001      	b.n	8004aa2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	2000001c 	.word	0x2000001c
 8004ab0:	20000018 	.word	0x20000018

08004ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	@ (8004ad4 <HAL_IncTick+0x20>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <HAL_IncTick+0x24>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <HAL_IncTick+0x24>)
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000001c 	.word	0x2000001c
 8004ad8:	20000824 	.word	0x20000824

08004adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
  return uwTick;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <HAL_GetTick+0x14>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000824 	.word	0x20000824

08004af4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004af8:	4b03      	ldr	r3, [pc, #12]	@ (8004b08 <HAL_GetTickPrio+0x14>)
 8004afa:	681b      	ldr	r3, [r3, #0]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000018 	.word	0x20000018

08004b0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b14:	f7ff ffe2 	bl	8004adc <HAL_GetTick>
 8004b18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b24:	d005      	beq.n	8004b32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b26:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <HAL_Delay+0x44>)
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b32:	bf00      	nop
 8004b34:	f7ff ffd2 	bl	8004adc <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d8f7      	bhi.n	8004b34 <HAL_Delay+0x28>
  {
  }
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	2000001c 	.word	0x2000001c

08004b54 <__NVIC_SetPriorityGrouping>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b64:	4b0c      	ldr	r3, [pc, #48]	@ (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b70:	4013      	ands	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b86:	4a04      	ldr	r2, [pc, #16]	@ (8004b98 <__NVIC_SetPriorityGrouping+0x44>)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	60d3      	str	r3, [r2, #12]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	e000ed00 	.word	0xe000ed00

08004b9c <__NVIC_GetPriorityGrouping>:
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ba0:	4b04      	ldr	r3, [pc, #16]	@ (8004bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	f003 0307 	and.w	r3, r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <__NVIC_EnableIRQ>:
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	db0b      	blt.n	8004be2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	f003 021f 	and.w	r2, r3, #31
 8004bd0:	4907      	ldr	r1, [pc, #28]	@ (8004bf0 <__NVIC_EnableIRQ+0x38>)
 8004bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2001      	movs	r0, #1
 8004bda:	fa00 f202 	lsl.w	r2, r0, r2
 8004bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004be2:	bf00      	nop
 8004be4:	370c      	adds	r7, #12
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	e000e100 	.word	0xe000e100

08004bf4 <__NVIC_SetPriority>:
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	6039      	str	r1, [r7, #0]
 8004bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	db0a      	blt.n	8004c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <__NVIC_SetPriority+0x4c>)
 8004c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c12:	0112      	lsls	r2, r2, #4
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	440b      	add	r3, r1
 8004c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004c1c:	e00a      	b.n	8004c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4908      	ldr	r1, [pc, #32]	@ (8004c44 <__NVIC_SetPriority+0x50>)
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	3b04      	subs	r3, #4
 8004c2c:	0112      	lsls	r2, r2, #4
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	440b      	add	r3, r1
 8004c32:	761a      	strb	r2, [r3, #24]
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	e000e100 	.word	0xe000e100
 8004c44:	e000ed00 	.word	0xe000ed00

08004c48 <NVIC_EncodePriority>:
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b089      	sub	sp, #36	@ 0x24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0307 	and.w	r3, r3, #7
 8004c5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	f1c3 0307 	rsb	r3, r3, #7
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	bf28      	it	cs
 8004c66:	2304      	movcs	r3, #4
 8004c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	2b06      	cmp	r3, #6
 8004c70:	d902      	bls.n	8004c78 <NVIC_EncodePriority+0x30>
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3b03      	subs	r3, #3
 8004c76:	e000      	b.n	8004c7a <NVIC_EncodePriority+0x32>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	43da      	mvns	r2, r3
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c90:	f04f 31ff 	mov.w	r1, #4294967295
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9a:	43d9      	mvns	r1, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ca0:	4313      	orrs	r3, r2
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3724      	adds	r7, #36	@ 0x24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <SysTick_Config>:
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cc0:	d301      	bcc.n	8004cc6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e00f      	b.n	8004ce6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf0 <SysTick_Config+0x40>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004cce:	210f      	movs	r1, #15
 8004cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cd4:	f7ff ff8e 	bl	8004bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <SysTick_Config+0x40>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cde:	4b04      	ldr	r3, [pc, #16]	@ (8004cf0 <SysTick_Config+0x40>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010

08004cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff29 	bl	8004b54 <__NVIC_SetPriorityGrouping>
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b086      	sub	sp, #24
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	4603      	mov	r3, r0
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d18:	f7ff ff40 	bl	8004b9c <__NVIC_GetPriorityGrouping>
 8004d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68b9      	ldr	r1, [r7, #8]
 8004d22:	6978      	ldr	r0, [r7, #20]
 8004d24:	f7ff ff90 	bl	8004c48 <NVIC_EncodePriority>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff5f 	bl	8004bf4 <__NVIC_SetPriority>
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	4603      	mov	r3, r0
 8004d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff33 	bl	8004bb8 <__NVIC_EnableIRQ>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ffa4 	bl	8004cb0 <SysTick_Config>
 8004d68:	4603      	mov	r3, r0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d005      	beq.n	8004d96 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e047      	b.n	8004e26 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 020e 	bic.w	r2, r2, #14
 8004da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dca:	f003 021c 	and.w	r2, r3, #28
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8004dd8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004de2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00c      	beq.n	8004e06 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004df6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004e04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
    }
  }
  return status;
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e5a:	e14c      	b.n	80050f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	2101      	movs	r1, #1
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 813e 	beq.w	80050f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 0303 	and.w	r3, r3, #3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d005      	beq.n	8004e8c <HAL_GPIO_Init+0x40>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d130      	bne.n	8004eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	f003 0201 	and.w	r2, r3, #1
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d017      	beq.n	8004f2a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	005b      	lsls	r3, r3, #1
 8004f04:	2203      	movs	r2, #3
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d123      	bne.n	8004f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	08da      	lsrs	r2, r3, #3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3208      	adds	r2, #8
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	220f      	movs	r2, #15
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	691a      	ldr	r2, [r3, #16]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	08da      	lsrs	r2, r3, #3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	3208      	adds	r2, #8
 8004f78:	6939      	ldr	r1, [r7, #16]
 8004f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	2203      	movs	r2, #3
 8004f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f003 0203 	and.w	r2, r3, #3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f000 8098 	beq.w	80050f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004fc0:	4a54      	ldr	r2, [pc, #336]	@ (8005114 <HAL_GPIO_Init+0x2c8>)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	089b      	lsrs	r3, r3, #2
 8004fc6:	3302      	adds	r3, #2
 8004fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	220f      	movs	r2, #15
 8004fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004fea:	d019      	beq.n	8005020 <HAL_GPIO_Init+0x1d4>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a4a      	ldr	r2, [pc, #296]	@ (8005118 <HAL_GPIO_Init+0x2cc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_GPIO_Init+0x1d0>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a49      	ldr	r2, [pc, #292]	@ (800511c <HAL_GPIO_Init+0x2d0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00d      	beq.n	8005018 <HAL_GPIO_Init+0x1cc>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a48      	ldr	r2, [pc, #288]	@ (8005120 <HAL_GPIO_Init+0x2d4>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <HAL_GPIO_Init+0x1c8>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a47      	ldr	r2, [pc, #284]	@ (8005124 <HAL_GPIO_Init+0x2d8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d101      	bne.n	8005010 <HAL_GPIO_Init+0x1c4>
 800500c:	2304      	movs	r3, #4
 800500e:	e008      	b.n	8005022 <HAL_GPIO_Init+0x1d6>
 8005010:	2307      	movs	r3, #7
 8005012:	e006      	b.n	8005022 <HAL_GPIO_Init+0x1d6>
 8005014:	2303      	movs	r3, #3
 8005016:	e004      	b.n	8005022 <HAL_GPIO_Init+0x1d6>
 8005018:	2302      	movs	r3, #2
 800501a:	e002      	b.n	8005022 <HAL_GPIO_Init+0x1d6>
 800501c:	2301      	movs	r3, #1
 800501e:	e000      	b.n	8005022 <HAL_GPIO_Init+0x1d6>
 8005020:	2300      	movs	r3, #0
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	f002 0203 	and.w	r2, r2, #3
 8005028:	0092      	lsls	r2, r2, #2
 800502a:	4093      	lsls	r3, r2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005032:	4938      	ldr	r1, [pc, #224]	@ (8005114 <HAL_GPIO_Init+0x2c8>)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	089b      	lsrs	r3, r3, #2
 8005038:	3302      	adds	r3, #2
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005040:	4b39      	ldr	r3, [pc, #228]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4013      	ands	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005064:	4a30      	ldr	r2, [pc, #192]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800508e:	4a26      	ldr	r2, [pc, #152]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005094:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 8005096:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800509a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	43db      	mvns	r3, r3
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4013      	ands	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80050ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80050c2:	4b19      	ldr	r3, [pc, #100]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 80050c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	4013      	ands	r3, r2
 80050d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80050e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005128 <HAL_GPIO_Init+0x2dc>)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	3301      	adds	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	f47f aeab 	bne.w	8004e5c <HAL_GPIO_Init+0x10>
  }
}
 8005106:	bf00      	nop
 8005108:	bf00      	nop
 800510a:	371c      	adds	r7, #28
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40010000 	.word	0x40010000
 8005118:	48000400 	.word	0x48000400
 800511c:	48000800 	.word	0x48000800
 8005120:	48000c00 	.word	0x48000c00
 8005124:	48001000 	.word	0x48001000
 8005128:	58000800 	.word	0x58000800

0800512c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	807b      	strh	r3, [r7, #2]
 8005138:	4613      	mov	r3, r2
 800513a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800513c:	787b      	ldrb	r3, [r7, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005142:	887a      	ldrh	r2, [r7, #2]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005148:	e002      	b.n	8005150 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800514a:	887a      	ldrh	r2, [r7, #2]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e08d      	b.n	800528a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fc fa08 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2224      	movs	r2, #36	@ 0x24
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0201 	bic.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80051ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d107      	bne.n	80051d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051d2:	609a      	str	r2, [r3, #8]
 80051d4:	e006      	b.n	80051e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80051e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d108      	bne.n	80051fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051fa:	605a      	str	r2, [r3, #4]
 80051fc:	e007      	b.n	800520e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800520c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800521c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005220:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691a      	ldr	r2, [r3, #16]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	69d9      	ldr	r1, [r3, #28]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1a      	ldr	r2, [r3, #32]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	461a      	mov	r2, r3
 80052a0:	460b      	mov	r3, r1
 80052a2:	817b      	strh	r3, [r7, #10]
 80052a4:	4613      	mov	r3, r2
 80052a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	f040 80fd 	bne.w	80054b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_I2C_Master_Transmit+0x30>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0f6      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80052cc:	f7ff fc06 	bl	8004adc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	2319      	movs	r3, #25
 80052d8:	2201      	movs	r2, #1
 80052da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f001 fa51 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e0e1      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2221      	movs	r2, #33	@ 0x21
 80052f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2210      	movs	r2, #16
 80052fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	893a      	ldrh	r2, [r7, #8]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	2bff      	cmp	r3, #255	@ 0xff
 800531e:	d906      	bls.n	800532e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	22ff      	movs	r2, #255	@ 0xff
 8005324:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005326:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e007      	b.n	800533e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800533c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	2b00      	cmp	r3, #0
 8005344:	d024      	beq.n	8005390 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	781a      	ldrb	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005356:	1c5a      	adds	r2, r3, #1
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005360:	b29b      	uxth	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537a:	b2db      	uxtb	r3, r3
 800537c:	3301      	adds	r3, #1
 800537e:	b2da      	uxtb	r2, r3
 8005380:	8979      	ldrh	r1, [r7, #10]
 8005382:	4b4e      	ldr	r3, [pc, #312]	@ (80054bc <HAL_I2C_Master_Transmit+0x228>)
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f001 fbbf 	bl	8006b0c <I2C_TransferConfig>
 800538e:	e066      	b.n	800545e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005394:	b2da      	uxtb	r2, r3
 8005396:	8979      	ldrh	r1, [r7, #10]
 8005398:	4b48      	ldr	r3, [pc, #288]	@ (80054bc <HAL_I2C_Master_Transmit+0x228>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f001 fbb4 	bl	8006b0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80053a4:	e05b      	b.n	800545e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f001 fa44 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e07b      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	781a      	ldrb	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d034      	beq.n	800545e <HAL_I2C_Master_Transmit+0x1ca>
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d130      	bne.n	800545e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	2200      	movs	r2, #0
 8005404:	2180      	movs	r1, #128	@ 0x80
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f001 f9bd 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e04d      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	2bff      	cmp	r3, #255	@ 0xff
 800541e:	d90e      	bls.n	800543e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	22ff      	movs	r2, #255	@ 0xff
 8005424:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542a:	b2da      	uxtb	r2, r3
 800542c:	8979      	ldrh	r1, [r7, #10]
 800542e:	2300      	movs	r3, #0
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f001 fb68 	bl	8006b0c <I2C_TransferConfig>
 800543c:	e00f      	b.n	800545e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005442:	b29a      	uxth	r2, r3
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800544c:	b2da      	uxtb	r2, r3
 800544e:	8979      	ldrh	r1, [r7, #10]
 8005450:	2300      	movs	r3, #0
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f001 fb57 	bl	8006b0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d19e      	bne.n	80053a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	6a39      	ldr	r1, [r7, #32]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f001 fa2a 	bl	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e01a      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2220      	movs	r2, #32
 8005482:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <HAL_I2C_Master_Transmit+0x22c>)
 8005490:	400b      	ands	r3, r1
 8005492:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80054ac:	2300      	movs	r3, #0
 80054ae:	e000      	b.n	80054b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80054b0:	2302      	movs	r3, #2
  }
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	80002000 	.word	0x80002000
 80054c0:	fe00e800 	.word	0xfe00e800

080054c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b088      	sub	sp, #32
 80054c8:	af02      	add	r7, sp, #8
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	4608      	mov	r0, r1
 80054ce:	4611      	mov	r1, r2
 80054d0:	461a      	mov	r2, r3
 80054d2:	4603      	mov	r3, r0
 80054d4:	817b      	strh	r3, [r7, #10]
 80054d6:	460b      	mov	r3, r1
 80054d8:	813b      	strh	r3, [r7, #8]
 80054da:	4613      	mov	r3, r2
 80054dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	f040 80f9 	bne.w	80056de <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_I2C_Mem_Write+0x34>
 80054f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d105      	bne.n	8005504 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054fe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0ed      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <HAL_I2C_Mem_Write+0x4e>
 800550e:	2302      	movs	r3, #2
 8005510:	e0e6      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800551a:	f7ff fadf 	bl	8004adc <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2319      	movs	r3, #25
 8005526:	2201      	movs	r2, #1
 8005528:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f001 f92a 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0d1      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2221      	movs	r2, #33	@ 0x21
 8005540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a3a      	ldr	r2, [r7, #32]
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800555c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005564:	88f8      	ldrh	r0, [r7, #6]
 8005566:	893a      	ldrh	r2, [r7, #8]
 8005568:	8979      	ldrh	r1, [r7, #10]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	4603      	mov	r3, r0
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 fc6d 	bl	8005e54 <I2C_RequestMemoryWrite>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d005      	beq.n	800558c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0a9      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	2bff      	cmp	r3, #255	@ 0xff
 8005594:	d90e      	bls.n	80055b4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	22ff      	movs	r2, #255	@ 0xff
 800559a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	8979      	ldrh	r1, [r7, #10]
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f001 faad 	bl	8006b0c <I2C_TransferConfig>
 80055b2:	e00f      	b.n	80055d4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c2:	b2da      	uxtb	r2, r3
 80055c4:	8979      	ldrh	r1, [r7, #10]
 80055c6:	2300      	movs	r3, #0
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f001 fa9c 	bl	8006b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f001 f92d 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e07b      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	781a      	ldrb	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005610:	3b01      	subs	r3, #1
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d034      	beq.n	800568c <HAL_I2C_Mem_Write+0x1c8>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005626:	2b00      	cmp	r3, #0
 8005628:	d130      	bne.n	800568c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	@ 0x80
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f001 f8a6 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e04d      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005648:	b29b      	uxth	r3, r3
 800564a:	2bff      	cmp	r3, #255	@ 0xff
 800564c:	d90e      	bls.n	800566c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	22ff      	movs	r2, #255	@ 0xff
 8005652:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005658:	b2da      	uxtb	r2, r3
 800565a:	8979      	ldrh	r1, [r7, #10]
 800565c:	2300      	movs	r3, #0
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f001 fa51 	bl	8006b0c <I2C_TransferConfig>
 800566a:	e00f      	b.n	800568c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005670:	b29a      	uxth	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567a:	b2da      	uxtb	r2, r3
 800567c:	8979      	ldrh	r1, [r7, #10]
 800567e:	2300      	movs	r3, #0
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f001 fa40 	bl	8006b0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d19e      	bne.n	80055d4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f001 f913 	bl	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e01a      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2220      	movs	r2, #32
 80056b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <HAL_I2C_Mem_Write+0x224>)
 80056be:	400b      	ands	r3, r1
 80056c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	e000      	b.n	80056e0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056de:	2302      	movs	r3, #2
  }
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	fe00e800 	.word	0xfe00e800

080056ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af02      	add	r7, sp, #8
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	817b      	strh	r3, [r7, #10]
 80056fe:	460b      	mov	r3, r1
 8005700:	813b      	strh	r3, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	f040 80fd 	bne.w	800590e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_I2C_Mem_Read+0x34>
 800571a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005726:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0f1      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_I2C_Mem_Read+0x4e>
 8005736:	2302      	movs	r3, #2
 8005738:	e0ea      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005742:	f7ff f9cb 	bl	8004adc <HAL_GetTick>
 8005746:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	2319      	movs	r3, #25
 800574e:	2201      	movs	r2, #1
 8005750:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f001 f816 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e0d5      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2222      	movs	r2, #34	@ 0x22
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2240      	movs	r2, #64	@ 0x40
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a3a      	ldr	r2, [r7, #32]
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005784:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800578c:	88f8      	ldrh	r0, [r7, #6]
 800578e:	893a      	ldrh	r2, [r7, #8]
 8005790:	8979      	ldrh	r1, [r7, #10]
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	9301      	str	r3, [sp, #4]
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	4603      	mov	r3, r0
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 fbad 	bl	8005efc <I2C_RequestMemoryRead>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d005      	beq.n	80057b4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e0ad      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2bff      	cmp	r3, #255	@ 0xff
 80057bc:	d90e      	bls.n	80057dc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	22ff      	movs	r2, #255	@ 0xff
 80057c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	8979      	ldrh	r1, [r7, #10]
 80057cc:	4b52      	ldr	r3, [pc, #328]	@ (8005918 <HAL_I2C_Mem_Read+0x22c>)
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 f999 	bl	8006b0c <I2C_TransferConfig>
 80057da:	e00f      	b.n	80057fc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	8979      	ldrh	r1, [r7, #10]
 80057ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <HAL_I2C_Mem_Read+0x22c>)
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f001 f988 	bl	8006b0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	2200      	movs	r2, #0
 8005804:	2104      	movs	r1, #4
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f000 ffbd 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e07c      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	1c5a      	adds	r2, r3, #1
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	b29a      	uxth	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584c:	b29b      	uxth	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d034      	beq.n	80058bc <HAL_I2C_Mem_Read+0x1d0>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d130      	bne.n	80058bc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005860:	2200      	movs	r2, #0
 8005862:	2180      	movs	r1, #128	@ 0x80
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 ff8e 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e04d      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005878:	b29b      	uxth	r3, r3
 800587a:	2bff      	cmp	r3, #255	@ 0xff
 800587c:	d90e      	bls.n	800589c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	22ff      	movs	r2, #255	@ 0xff
 8005882:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005888:	b2da      	uxtb	r2, r3
 800588a:	8979      	ldrh	r1, [r7, #10]
 800588c:	2300      	movs	r3, #0
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 f939 	bl	8006b0c <I2C_TransferConfig>
 800589a:	e00f      	b.n	80058bc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	8979      	ldrh	r1, [r7, #10]
 80058ae:	2300      	movs	r3, #0
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f001 f928 	bl	8006b0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d19a      	bne.n	80057fc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fffb 	bl	80068c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e01a      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2220      	movs	r2, #32
 80058e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6859      	ldr	r1, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	4b0b      	ldr	r3, [pc, #44]	@ (800591c <HAL_I2C_Mem_Read+0x230>)
 80058ee:	400b      	ands	r3, r1
 80058f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	e000      	b.n	8005910 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800590e:	2302      	movs	r3, #2
  }
}
 8005910:	4618      	mov	r0, r3
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	80002400 	.word	0x80002400
 800591c:	fe00e800 	.word	0xfe00e800

08005920 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	@ 0x28
 8005924:	af02      	add	r7, sp, #8
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	607a      	str	r2, [r7, #4]
 800592a:	603b      	str	r3, [r7, #0]
 800592c:	460b      	mov	r3, r1
 800592e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593a:	b2db      	uxtb	r3, r3
 800593c:	2b20      	cmp	r3, #32
 800593e:	f040 80d6 	bne.w	8005aee <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800594c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005950:	d101      	bne.n	8005956 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	e0cc      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_I2C_IsDeviceReady+0x44>
 8005960:	2302      	movs	r3, #2
 8005962:	e0c5      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2224      	movs	r2, #36	@ 0x24
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <HAL_I2C_IsDeviceReady+0x72>
 8005982:	897b      	ldrh	r3, [r7, #10]
 8005984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005988:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800598c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005990:	e006      	b.n	80059a0 <HAL_I2C_IsDeviceReady+0x80>
 8005992:	897b      	ldrh	r3, [r7, #10]
 8005994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005998:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800599c:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	6812      	ldr	r2, [r2, #0]
 80059a4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80059a6:	f7ff f899 	bl	8004adc <HAL_GetTick>
 80059aa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	bf0c      	ite	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	2300      	movne	r3, #0
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80059d8:	e034      	b.n	8005a44 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e0:	d01a      	beq.n	8005a18 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80059e2:	f7ff f87b 	bl	8004adc <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d302      	bcc.n	80059f8 <HAL_I2C_IsDeviceReady+0xd8>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10f      	bne.n	8005a18 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2220      	movs	r2, #32
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a04:	f043 0220 	orr.w	r2, r3, #32
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e06b      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	bf0c      	ite	eq
 8005a26:	2301      	moveq	r3, #1
 8005a28:	2300      	movne	r3, #0
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	bf0c      	ite	eq
 8005a3c:	2301      	moveq	r3, #1
 8005a3e:	2300      	movne	r3, #0
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005a44:	7ffb      	ldrb	r3, [r7, #31]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <HAL_I2C_IsDeviceReady+0x130>
 8005a4a:	7fbb      	ldrb	r3, [r7, #30]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0c4      	beq.n	80059da <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d01a      	beq.n	8005a94 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2120      	movs	r1, #32
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fe8c 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e03b      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e02d      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2120      	movs	r1, #32
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fe71 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e020      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2210      	movs	r2, #16
 8005ab4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2220      	movs	r2, #32
 8005abc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	f63f af56 	bhi.w	800597a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ada:	f043 0220 	orr.w	r2, r3, #32
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8005aee:	2302      	movs	r3, #2
  }
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3720      	adds	r7, #32
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
  }
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00f      	beq.n	8005b6e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00a      	beq.n	8005b6e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5c:	f043 0201 	orr.w	r2, r3, #1
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b6c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00f      	beq.n	8005b98 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f043 0208 	orr.w	r2, r3, #8
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b96:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00a      	beq.n	8005bc2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb0:	f043 0202 	orr.w	r2, r3, #2
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bc0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f003 030b 	and.w	r3, r3, #11
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc7d 	bl	80064d4 <I2C_ITError>
  }
}
 8005bda:	bf00      	nop
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	460b      	mov	r3, r1
 8005c14:	70fb      	strb	r3, [r7, #3]
 8005c16:	4613      	mov	r3, r2
 8005c18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <I2C_Slave_ISR_IT+0x24>
 8005c82:	2302      	movs	r3, #2
 8005c84:	e0e2      	b.n	8005e4c <I2C_Slave_ISR_IT+0x1ea>
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d009      	beq.n	8005cac <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d004      	beq.n	8005cac <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ca2:	6939      	ldr	r1, [r7, #16]
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 fa5d 	bl	8006164 <I2C_ITSlaveCplt>
 8005caa:	e0ca      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f003 0310 	and.w	r3, r3, #16
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d04b      	beq.n	8005d4e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d046      	beq.n	8005d4e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d128      	bne.n	8005d1c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b28      	cmp	r3, #40	@ 0x28
 8005cd4:	d108      	bne.n	8005ce8 <I2C_Slave_ISR_IT+0x86>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cdc:	d104      	bne.n	8005ce8 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005cde:	6939      	ldr	r1, [r7, #16]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fba3 	bl	800642c <I2C_ITListenCplt>
 8005ce6:	e031      	b.n	8005d4c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b29      	cmp	r3, #41	@ 0x29
 8005cf2:	d10e      	bne.n	8005d12 <I2C_Slave_ISR_IT+0xb0>
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cfa:	d00a      	beq.n	8005d12 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2210      	movs	r2, #16
 8005d02:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 fcfc 	bl	8006702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f9ce 	bl	80060ac <I2C_ITSlaveSeqCplt>
 8005d10:	e01c      	b.n	8005d4c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2210      	movs	r2, #16
 8005d18:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005d1a:	e08f      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2210      	movs	r2, #16
 8005d22:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d28:	f043 0204 	orr.w	r2, r3, #4
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d003      	beq.n	8005d3e <I2C_Slave_ISR_IT+0xdc>
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d3c:	d17e      	bne.n	8005e3c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fbc5 	bl	80064d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005d4a:	e077      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1da>
 8005d4c:	e076      	b.n	8005e3c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d02f      	beq.n	8005db8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d02a      	beq.n	8005db8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d018      	beq.n	8005d9e <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	1c5a      	adds	r2, r3, #1
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d14b      	bne.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005dae:	d047      	beq.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f97b 	bl	80060ac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005db6:	e043      	b.n	8005e40 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f003 0308 	and.w	r3, r3, #8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005dcc:	6939      	ldr	r1, [r7, #16]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8e8 	bl	8005fa4 <I2C_ITAddrCplt>
 8005dd4:	e035      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f003 0302 	and.w	r3, r3, #2
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d030      	beq.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d02b      	beq.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d018      	beq.n	8005e26 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	781a      	ldrb	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005e24:	e00d      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e2c:	d002      	beq.n	8005e34 <I2C_Slave_ISR_IT+0x1d2>
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d106      	bne.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f939 	bl	80060ac <I2C_ITSlaveSeqCplt>
 8005e3a:	e002      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005e3c:	bf00      	nop
 8005e3e:	e000      	b.n	8005e42 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8005e40:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	461a      	mov	r2, r3
 8005e62:	4603      	mov	r3, r0
 8005e64:	817b      	strh	r3, [r7, #10]
 8005e66:	460b      	mov	r3, r1
 8005e68:	813b      	strh	r3, [r7, #8]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	8979      	ldrh	r1, [r7, #10]
 8005e74:	4b20      	ldr	r3, [pc, #128]	@ (8005ef8 <I2C_RequestMemoryWrite+0xa4>)
 8005e76:	9300      	str	r3, [sp, #0]
 8005e78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fe45 	bl	8006b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	69b9      	ldr	r1, [r7, #24]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fcd6 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e02c      	b.n	8005ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d105      	bne.n	8005ea8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e9c:	893b      	ldrh	r3, [r7, #8]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea6:	e015      	b.n	8005ed4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005ea8:	893b      	ldrh	r3, [r7, #8]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	69b9      	ldr	r1, [r7, #24]
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fcbc 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e012      	b.n	8005ef0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eca:	893b      	ldrh	r3, [r7, #8]
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2200      	movs	r2, #0
 8005edc:	2180      	movs	r1, #128	@ 0x80
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fc51 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	80002000 	.word	0x80002000

08005efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	4608      	mov	r0, r1
 8005f06:	4611      	mov	r1, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	817b      	strh	r3, [r7, #10]
 8005f0e:	460b      	mov	r3, r1
 8005f10:	813b      	strh	r3, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005f16:	88fb      	ldrh	r3, [r7, #6]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	8979      	ldrh	r1, [r7, #10]
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <I2C_RequestMemoryRead+0xa4>)
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fdf2 	bl	8006b0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f28:	69fa      	ldr	r2, [r7, #28]
 8005f2a:	69b9      	ldr	r1, [r7, #24]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 fc83 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e02c      	b.n	8005f96 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d105      	bne.n	8005f4e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f42:	893b      	ldrh	r3, [r7, #8]
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f4c:	e015      	b.n	8005f7a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f4e:	893b      	ldrh	r3, [r7, #8]
 8005f50:	0a1b      	lsrs	r3, r3, #8
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	69b9      	ldr	r1, [r7, #24]
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f000 fc69 	bl	8006838 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e012      	b.n	8005f96 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f70:	893b      	ldrh	r3, [r7, #8]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2200      	movs	r2, #0
 8005f82:	2140      	movs	r1, #64	@ 0x40
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fbfe 	bl	8006786 <I2C_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	80002000 	.word	0x80002000

08005fa4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fba:	2b28      	cmp	r3, #40	@ 0x28
 8005fbc:	d16a      	bne.n	8006094 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	0c1b      	lsrs	r3, r3, #16
 8005fc6:	b2db      	uxtb	r3, r3
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005fdc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fea:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005ff8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d138      	bne.n	8006074 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	09db      	lsrs	r3, r3, #7
 8006006:	b29a      	uxth	r2, r3
 8006008:	89bb      	ldrh	r3, [r7, #12]
 800600a:	4053      	eors	r3, r2
 800600c:	b29b      	uxth	r3, r3
 800600e:	f003 0306 	and.w	r3, r3, #6
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11c      	bne.n	8006050 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006016:	897b      	ldrh	r3, [r7, #10]
 8006018:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006028:	2b02      	cmp	r3, #2
 800602a:	d13b      	bne.n	80060a4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2208      	movs	r2, #8
 8006038:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006042:	89ba      	ldrh	r2, [r7, #12]
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fdde 	bl	8005c0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800604e:	e029      	b.n	80060a4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006050:	893b      	ldrh	r3, [r7, #8]
 8006052:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006054:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fd89 	bl	8006b70 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006066:	89ba      	ldrh	r2, [r7, #12]
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff fdcc 	bl	8005c0a <HAL_I2C_AddrCallback>
}
 8006072:	e017      	b.n	80060a4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd79 	bl	8006b70 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006086:	89ba      	ldrh	r2, [r7, #12]
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff fdbc 	bl	8005c0a <HAL_I2C_AddrCallback>
}
 8006092:	e007      	b.n	80060a4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2208      	movs	r2, #8
 800609a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e00c      	b.n	80060fa <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80060f8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b29      	cmp	r3, #41	@ 0x29
 8006104:	d112      	bne.n	800612c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2228      	movs	r2, #40	@ 0x28
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2221      	movs	r2, #33	@ 0x21
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006114:	2101      	movs	r1, #1
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fd2a 	bl	8006b70 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fd5c 	bl	8005be2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800612a:	e017      	b.n	800615c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b2a      	cmp	r3, #42	@ 0x2a
 8006136:	d111      	bne.n	800615c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2228      	movs	r2, #40	@ 0x28
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2222      	movs	r2, #34	@ 0x22
 8006144:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006146:	2102      	movs	r1, #2
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fd11 	bl	8006b70 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff fd4d 	bl	8005bf6 <HAL_I2C_SlaveRxCpltCallback>
}
 800615c:	bf00      	nop
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006186:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2220      	movs	r2, #32
 800618e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006190:	7afb      	ldrb	r3, [r7, #11]
 8006192:	2b21      	cmp	r3, #33	@ 0x21
 8006194:	d002      	beq.n	800619c <I2C_ITSlaveCplt+0x38>
 8006196:	7afb      	ldrb	r3, [r7, #11]
 8006198:	2b29      	cmp	r3, #41	@ 0x29
 800619a:	d108      	bne.n	80061ae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800619c:	f248 0101 	movw	r1, #32769	@ 0x8001
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fce5 	bl	8006b70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2221      	movs	r2, #33	@ 0x21
 80061aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ac:	e019      	b.n	80061e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80061ae:	7afb      	ldrb	r3, [r7, #11]
 80061b0:	2b22      	cmp	r3, #34	@ 0x22
 80061b2:	d002      	beq.n	80061ba <I2C_ITSlaveCplt+0x56>
 80061b4:	7afb      	ldrb	r3, [r7, #11]
 80061b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80061b8:	d108      	bne.n	80061cc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80061ba:	f248 0102 	movw	r1, #32770	@ 0x8002
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fcd6 	bl	8006b70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2222      	movs	r2, #34	@ 0x22
 80061c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ca:	e00a      	b.n	80061e2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80061cc:	7afb      	ldrb	r3, [r7, #11]
 80061ce:	2b28      	cmp	r3, #40	@ 0x28
 80061d0:	d107      	bne.n	80061e2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80061d2:	f248 0103 	movw	r1, #32771	@ 0x8003
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fcca 	bl	8006b70 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061f0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	6859      	ldr	r1, [r3, #4]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b89      	ldr	r3, [pc, #548]	@ (8006424 <I2C_ITSlaveCplt+0x2c0>)
 80061fe:	400b      	ands	r3, r1
 8006200:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fa7d 	bl	8006702 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d013      	beq.n	800623a <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006220:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	2b00      	cmp	r3, #0
 8006228:	d01f      	beq.n	800626a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	b29a      	uxth	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006238:	e017      	b.n	800626a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d012      	beq.n	800626a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006252:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006258:	2b00      	cmp	r3, #0
 800625a:	d006      	beq.n	800626a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	b29a      	uxth	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	2b00      	cmp	r3, #0
 8006272:	d020      	beq.n	80062b6 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f023 0304 	bic.w	r3, r3, #4
 800627a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d00c      	beq.n	80062b6 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c4:	f043 0204 	orr.w	r2, r3, #4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f003 0310 	and.w	r3, r3, #16
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d049      	beq.n	800636a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d044      	beq.n	800636a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d128      	bne.n	800633c <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b28      	cmp	r3, #40	@ 0x28
 80062f4:	d108      	bne.n	8006308 <I2C_ITSlaveCplt+0x1a4>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062fc:	d104      	bne.n	8006308 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80062fe:	6979      	ldr	r1, [r7, #20]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f893 	bl	800642c <I2C_ITListenCplt>
 8006306:	e030      	b.n	800636a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b29      	cmp	r3, #41	@ 0x29
 8006312:	d10e      	bne.n	8006332 <I2C_ITSlaveCplt+0x1ce>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800631a:	d00a      	beq.n	8006332 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2210      	movs	r2, #16
 8006322:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f9ec 	bl	8006702 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7ff febe 	bl	80060ac <I2C_ITSlaveSeqCplt>
 8006330:	e01b      	b.n	800636a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2210      	movs	r2, #16
 8006338:	61da      	str	r2, [r3, #28]
 800633a:	e016      	b.n	800636a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2210      	movs	r2, #16
 8006342:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	f043 0204 	orr.w	r2, r3, #4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <I2C_ITSlaveCplt+0x1fa>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800635c:	d105      	bne.n	800636a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f8b5 	bl	80064d4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	2b00      	cmp	r3, #0
 800637e:	d010      	beq.n	80063a2 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f8a4 	bl	80064d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b28      	cmp	r3, #40	@ 0x28
 8006396:	d141      	bne.n	800641c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006398:	6979      	ldr	r1, [r7, #20]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f846 	bl	800642c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063a0:	e03c      	b.n	800641c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063aa:	d014      	beq.n	80063d6 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff fe7d 	bl	80060ac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <I2C_ITSlaveCplt+0x2c4>)
 80063b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff fc29 	bl	8005c26 <HAL_I2C_ListenCpltCallback>
}
 80063d4:	e022      	b.n	800641c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b22      	cmp	r3, #34	@ 0x22
 80063e0:	d10e      	bne.n	8006400 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7ff fbfc 	bl	8005bf6 <HAL_I2C_SlaveRxCpltCallback>
}
 80063fe:	e00d      	b.n	800641c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2220      	movs	r2, #32
 8006404:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fbe3 	bl	8005be2 <HAL_I2C_SlaveTxCpltCallback>
}
 800641c:	bf00      	nop
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	fe00e800 	.word	0xfe00e800
 8006428:	ffff0000 	.word	0xffff0000

0800642c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a25      	ldr	r2, [pc, #148]	@ (80064d0 <I2C_ITListenCplt+0xa4>)
 800643a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	2b00      	cmp	r3, #0
 8006460:	d022      	beq.n	80064a8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800647e:	2b00      	cmp	r3, #0
 8006480:	d012      	beq.n	80064a8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006492:	b29b      	uxth	r3, r3
 8006494:	3b01      	subs	r3, #1
 8006496:	b29a      	uxth	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a0:	f043 0204 	orr.w	r2, r3, #4
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80064a8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fb5f 	bl	8006b70 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2210      	movs	r2, #16
 80064b8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fbaf 	bl	8005c26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	ffff0000 	.word	0xffff0000

080064d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a6d      	ldr	r2, [pc, #436]	@ (80066a8 <I2C_ITError+0x1d4>)
 80064f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	431a      	orrs	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	2b28      	cmp	r3, #40	@ 0x28
 800650a:	d005      	beq.n	8006518 <I2C_ITError+0x44>
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b29      	cmp	r3, #41	@ 0x29
 8006510:	d002      	beq.n	8006518 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006512:	7bfb      	ldrb	r3, [r7, #15]
 8006514:	2b2a      	cmp	r3, #42	@ 0x2a
 8006516:	d10b      	bne.n	8006530 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006518:	2103      	movs	r1, #3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb28 	bl	8006b70 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2228      	movs	r2, #40	@ 0x28
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a60      	ldr	r2, [pc, #384]	@ (80066ac <I2C_ITError+0x1d8>)
 800652c:	635a      	str	r2, [r3, #52]	@ 0x34
 800652e:	e030      	b.n	8006592 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006530:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fb1b 	bl	8006b70 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8e1 	bl	8006702 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b60      	cmp	r3, #96	@ 0x60
 800654a:	d01f      	beq.n	800658c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b20      	cmp	r3, #32
 8006560:	d114      	bne.n	800658c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b10      	cmp	r3, #16
 800656e:	d109      	bne.n	8006584 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2210      	movs	r2, #16
 8006576:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800657c:	f043 0204 	orr.w	r2, r3, #4
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2220      	movs	r2, #32
 800658a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d039      	beq.n	8006614 <I2C_ITError+0x140>
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b11      	cmp	r3, #17
 80065a4:	d002      	beq.n	80065ac <I2C_ITError+0xd8>
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b21      	cmp	r3, #33	@ 0x21
 80065aa:	d133      	bne.n	8006614 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065ba:	d107      	bne.n	80065cc <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80065ca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fc2d 	bl	8004e30 <HAL_DMA_GetState>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d017      	beq.n	800660c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e0:	4a33      	ldr	r2, [pc, #204]	@ (80066b0 <I2C_ITError+0x1dc>)
 80065e2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fe fbbe 	bl	8004d72 <HAL_DMA_Abort_IT>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d04d      	beq.n	8006698 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006606:	4610      	mov	r0, r2
 8006608:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800660a:	e045      	b.n	8006698 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f851 	bl	80066b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006612:	e041      	b.n	8006698 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d039      	beq.n	8006690 <I2C_ITError+0x1bc>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	2b12      	cmp	r3, #18
 8006620:	d002      	beq.n	8006628 <I2C_ITError+0x154>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b22      	cmp	r3, #34	@ 0x22
 8006626:	d133      	bne.n	8006690 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006636:	d107      	bne.n	8006648 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006646:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe fbef 	bl	8004e30 <HAL_DMA_GetState>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d017      	beq.n	8006688 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800665c:	4a14      	ldr	r2, [pc, #80]	@ (80066b0 <I2C_ITError+0x1dc>)
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe fb80 	bl	8004d72 <HAL_DMA_Abort_IT>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d011      	beq.n	800669c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006682:	4610      	mov	r0, r2
 8006684:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006686:	e009      	b.n	800669c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f813 	bl	80066b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800668e:	e005      	b.n	800669c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f80f 	bl	80066b4 <I2C_TreatErrorCallback>
  }
}
 8006696:	e002      	b.n	800669e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006698:	bf00      	nop
 800669a:	e000      	b.n	800669e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800669c:	bf00      	nop
}
 800669e:	bf00      	nop
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	ffff0000 	.word	0xffff0000
 80066ac:	08005c63 	.word	0x08005c63
 80066b0:	0800674b 	.word	0x0800674b

080066b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b60      	cmp	r3, #96	@ 0x60
 80066c6:	d10e      	bne.n	80066e6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7ff fab5 	bl	8005c4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066e4:	e009      	b.n	80066fa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff faa0 	bl	8005c3a <HAL_I2C_ErrorCallback>
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	f003 0302 	and.w	r3, r3, #2
 8006714:	2b02      	cmp	r3, #2
 8006716:	d103      	bne.n	8006720 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b01      	cmp	r3, #1
 800672c:	d007      	beq.n	800673e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	699a      	ldr	r2, [r3, #24]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	619a      	str	r2, [r3, #24]
  }
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675c:	2b00      	cmp	r3, #0
 800675e:	d003      	beq.n	8006768 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006764:	2200      	movs	r2, #0
 8006766:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	2200      	movs	r2, #0
 8006776:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff ff9b 	bl	80066b4 <I2C_TreatErrorCallback>
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006796:	e03b      	b.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	6839      	ldr	r1, [r7, #0]
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f000 f8d5 	bl	800694c <I2C_IsErrorOccurred>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e041      	b.n	8006830 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b2:	d02d      	beq.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b4:	f7fe f992 	bl	8004adc <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d302      	bcc.n	80067ca <I2C_WaitOnFlagUntilTimeout+0x44>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d122      	bne.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4013      	ands	r3, r2
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	bf0c      	ite	eq
 80067da:	2301      	moveq	r3, #1
 80067dc:	2300      	movne	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d113      	bne.n	8006810 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ec:	f043 0220 	orr.w	r2, r3, #32
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e00f      	b.n	8006830 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	4013      	ands	r3, r2
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	429a      	cmp	r2, r3
 800681e:	bf0c      	ite	eq
 8006820:	2301      	moveq	r3, #1
 8006822:	2300      	movne	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	461a      	mov	r2, r3
 8006828:	79fb      	ldrb	r3, [r7, #7]
 800682a:	429a      	cmp	r2, r3
 800682c:	d0b4      	beq.n	8006798 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}

08006838 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006844:	e033      	b.n	80068ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	68b9      	ldr	r1, [r7, #8]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 f87e 	bl	800694c <I2C_IsErrorOccurred>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e031      	b.n	80068be <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d025      	beq.n	80068ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006862:	f7fe f93b 	bl	8004adc <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	429a      	cmp	r2, r3
 8006870:	d302      	bcc.n	8006878 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d11a      	bne.n	80068ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b02      	cmp	r3, #2
 8006884:	d013      	beq.n	80068ae <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688a:	f043 0220 	orr.w	r2, r3, #32
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d1c4      	bne.n	8006846 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068d2:	e02f      	b.n	8006934 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f837 	bl	800694c <I2C_IsErrorOccurred>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e02d      	b.n	8006944 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068e8:	f7fe f8f8 	bl	8004adc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d302      	bcc.n	80068fe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d11a      	bne.n	8006934 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b20      	cmp	r3, #32
 800690a:	d013      	beq.n	8006934 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006910:	f043 0220 	orr.w	r2, r3, #32
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e007      	b.n	8006944 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b20      	cmp	r3, #32
 8006940:	d1c8      	bne.n	80068d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b08a      	sub	sp, #40	@ 0x28
 8006950:	af00      	add	r7, sp, #0
 8006952:	60f8      	str	r0, [r7, #12]
 8006954:	60b9      	str	r1, [r7, #8]
 8006956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006966:	2300      	movs	r3, #0
 8006968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d068      	beq.n	8006a4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2210      	movs	r2, #16
 800697e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006980:	e049      	b.n	8006a16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d045      	beq.n	8006a16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fe f8a7 	bl	8004adc <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <I2C_IsErrorOccurred+0x54>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d13a      	bne.n	8006a16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069c2:	d121      	bne.n	8006a08 <I2C_IsErrorOccurred+0xbc>
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ca:	d01d      	beq.n	8006a08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069cc:	7cfb      	ldrb	r3, [r7, #19]
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d01a      	beq.n	8006a08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069e2:	f7fe f87b 	bl	8004adc <HAL_GetTick>
 80069e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069e8:	e00e      	b.n	8006a08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069ea:	f7fe f877 	bl	8004adc <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b19      	cmp	r3, #25
 80069f6:	d907      	bls.n	8006a08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	f043 0320 	orr.w	r3, r3, #32
 80069fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a06:	e006      	b.n	8006a16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b20      	cmp	r3, #32
 8006a14:	d1e9      	bne.n	80069ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b20      	cmp	r3, #32
 8006a22:	d003      	beq.n	8006a2c <I2C_IsErrorOccurred+0xe0>
 8006a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d0aa      	beq.n	8006982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2220      	movs	r2, #32
 8006a3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	f043 0304 	orr.w	r3, r3, #4
 8006a42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	f043 0301 	orr.w	r3, r3, #1
 8006a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00b      	beq.n	8006a96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f043 0308 	orr.w	r3, r3, #8
 8006a84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
 8006aa2:	f043 0302 	orr.w	r3, r3, #2
 8006aa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d01c      	beq.n	8006afa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f7ff fe1e 	bl	8006702 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <I2C_IsErrorOccurred+0x1bc>)
 8006ad2:	400b      	ands	r3, r1
 8006ad4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3728      	adds	r7, #40	@ 0x28
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	fe00e800 	.word	0xfe00e800

08006b0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	607b      	str	r3, [r7, #4]
 8006b16:	460b      	mov	r3, r1
 8006b18:	817b      	strh	r3, [r7, #10]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b1e:	897b      	ldrh	r3, [r7, #10]
 8006b20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b24:	7a7b      	ldrb	r3, [r7, #9]
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b32:	6a3b      	ldr	r3, [r7, #32]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685a      	ldr	r2, [r3, #4]
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	0d5b      	lsrs	r3, r3, #21
 8006b46:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b4a:	4b08      	ldr	r3, [pc, #32]	@ (8006b6c <I2C_TransferConfig+0x60>)
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	ea02 0103 	and.w	r1, r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b5e:	bf00      	nop
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	03ff63ff 	.word	0x03ff63ff

08006b70 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00f      	beq.n	8006baa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006b90:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b9e:	2b28      	cmp	r3, #40	@ 0x28
 8006ba0:	d003      	beq.n	8006baa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006ba8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006baa:	887b      	ldrh	r3, [r7, #2]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00f      	beq.n	8006bd4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006bba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006bc8:	2b28      	cmp	r3, #40	@ 0x28
 8006bca:	d003      	beq.n	8006bd4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006bd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006bd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	da03      	bge.n	8006be4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006be2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006be4:	887b      	ldrh	r3, [r7, #2]
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d103      	bne.n	8006bf2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bf2:	887b      	ldrh	r3, [r7, #2]
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d103      	bne.n	8006c00 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f043 0320 	orr.w	r3, r3, #32
 8006bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c00:	887b      	ldrh	r3, [r7, #2]
 8006c02:	2b40      	cmp	r3, #64	@ 0x40
 8006c04:	d103      	bne.n	8006c0e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6819      	ldr	r1, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	43da      	mvns	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	400a      	ands	r2, r1
 8006c1e:	601a      	str	r2, [r3, #0]
}
 8006c20:	bf00      	nop
 8006c22:	3714      	adds	r7, #20
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b20      	cmp	r3, #32
 8006c40:	d138      	bne.n	8006cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e032      	b.n	8006cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2224      	movs	r2, #36	@ 0x24
 8006c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f022 0201 	bic.w	r2, r2, #1
 8006c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6819      	ldr	r1, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0201 	orr.w	r2, r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	e000      	b.n	8006cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cb4:	2302      	movs	r3, #2
  }
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b085      	sub	sp, #20
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b20      	cmp	r3, #32
 8006cd6:	d139      	bne.n	8006d4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e033      	b.n	8006d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2224      	movs	r2, #36	@ 0x24
 8006cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 0201 	bic.w	r2, r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
	...

08006d5c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d60:	4b05      	ldr	r3, [pc, #20]	@ (8006d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a04      	ldr	r2, [pc, #16]	@ (8006d78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d6a:	6013      	str	r3, [r2, #0]
}
 8006d6c:	bf00      	nop
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	58000400 	.word	0x58000400

08006d7c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006d80:	4b04      	ldr	r3, [pc, #16]	@ (8006d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	58000400 	.word	0x58000400

08006d98 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006daa:	d101      	bne.n	8006db0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr

08006dda <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006dde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006de8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dec:	6013      	str	r3, [r2, #0]
}
 8006dee:	bf00      	nop
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e0a:	d101      	bne.n	8006e10 <LL_RCC_HSE_IsReady+0x18>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <LL_RCC_HSE_IsReady+0x1a>
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006e20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e2e:	6013      	str	r3, [r2, #0]
}
 8006e30:	bf00      	nop
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e4c:	6013      	str	r3, [r2, #0]
}
 8006e4e:	bf00      	nop
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e6a:	d101      	bne.n	8006e70 <LL_RCC_HSI_IsReady+0x18>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <LL_RCC_HSI_IsReady+0x1a>
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	061b      	lsls	r3, r3, #24
 8006e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e96:	4313      	orrs	r3, r2
 8006e98:	604b      	str	r3, [r1, #4]
}
 8006e9a:	bf00      	nop
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006eb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8006ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ed4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ed8:	f023 0301 	bic.w	r3, r3, #1
 8006edc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006eea:	b480      	push	{r7}
 8006eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d101      	bne.n	8006f02 <LL_RCC_HSI48_IsReady+0x18>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <LL_RCC_HSI48_IsReady+0x1a>
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f1e:	f043 0301 	orr.w	r3, r3, #1
 8006f22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f26:	bf00      	nop
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006f34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f48:	bf00      	nop
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006f52:	b480      	push	{r7}
 8006f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f62:	f043 0304 	orr.w	r3, r3, #4
 8006f66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f6a:	bf00      	nop
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006f84:	f023 0304 	bic.w	r3, r3, #4
 8006f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006f96:	b480      	push	{r7}
 8006f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d101      	bne.n	8006fae <LL_RCC_LSE_IsReady+0x18>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <LL_RCC_LSE_IsReady+0x1a>
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fc6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006fd2:	bf00      	nop
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006fe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fe8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006fec:	f023 0301 	bic.w	r3, r3, #1
 8006ff0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006ff4:	bf00      	nop
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006ffe:	b480      	push	{r7}
 8007000:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007002:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800700a:	f003 0302 	and.w	r3, r3, #2
 800700e:	2b02      	cmp	r3, #2
 8007010:	d101      	bne.n	8007016 <LL_RCC_LSI1_IsReady+0x18>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <LL_RCC_LSI1_IsReady+0x1a>
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8007022:	b480      	push	{r7}
 8007024:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800702a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800702e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007032:	f043 0304 	orr.w	r3, r3, #4
 8007036:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800703a:	bf00      	nop
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8007044:	b480      	push	{r7}
 8007046:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800704c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007050:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007054:	f023 0304 	bic.w	r3, r3, #4
 8007058:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800705c:	bf00      	nop
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr

08007066 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8007066:	b480      	push	{r7}
 8007068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800706a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800706e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007072:	f003 0308 	and.w	r3, r3, #8
 8007076:	2b08      	cmp	r3, #8
 8007078:	d101      	bne.n	800707e <LL_RCC_LSI2_IsReady+0x18>
 800707a:	2301      	movs	r3, #1
 800707c:	e000      	b.n	8007080 <LL_RCC_LSI2_IsReady+0x1a>
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800709a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	021b      	lsls	r3, r3, #8
 80070a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80070b8:	b480      	push	{r7}
 80070ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80070bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070c6:	f043 0301 	orr.w	r3, r3, #1
 80070ca:	6013      	str	r3, [r2, #0]
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80070da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	6013      	str	r3, [r2, #0]
}
 80070ea:	bf00      	nop
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80070f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
 8007102:	2b02      	cmp	r3, #2
 8007104:	d101      	bne.n	800710a <LL_RCC_MSI_IsReady+0x16>
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <LL_RCC_MSI_IsReady+0x18>
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr

08007116 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800711e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	4313      	orrs	r3, r2
 8007130:	600b      	str	r3, [r1, #0]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr

0800713e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800713e:	b480      	push	{r7}
 8007140:	b083      	sub	sp, #12
 8007142:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800714e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2bb0      	cmp	r3, #176	@ 0xb0
 8007154:	d901      	bls.n	800715a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8007156:	23b0      	movs	r3, #176	@ 0xb0
 8007158:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800715a:	687b      	ldr	r3, [r7, #4]
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	021b      	lsls	r3, r3, #8
 800717e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800719a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f023 0203 	bic.w	r2, r3, #3
 80071a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	608b      	str	r3, [r1, #8]
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80071ba:	b480      	push	{r7}
 80071bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80071be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f003 030c 	and.w	r3, r3, #12
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80071da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80071e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b083      	sub	sp, #12
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007202:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007206:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800720a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800720e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800722e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007232:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007236:	f023 020f 	bic.w	r2, r3, #15
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800725c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007266:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4313      	orrs	r3, r2
 800726e:	608b      	str	r3, [r1, #8]
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007284:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800728e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4313      	orrs	r3, r2
 8007296:	608b      	str	r3, [r1, #8]
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80072a4:	b480      	push	{r7}
 80072a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80072a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80072c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80072d8:	b480      	push	{r7}
 80072da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80072dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80072f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80072fe:	4618      	mov	r0, r3
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800730c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800731a:	6013      	str	r3, [r2, #0]
}
 800731c:	bf00      	nop
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007326:	b480      	push	{r7}
 8007328:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800732a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007334:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007338:	6013      	str	r3, [r2, #0]
}
 800733a:	bf00      	nop
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007352:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007356:	d101      	bne.n	800735c <LL_RCC_PLL_IsReady+0x18>
 8007358:	2301      	movs	r3, #1
 800735a:	e000      	b.n	800735e <LL_RCC_PLL_IsReady+0x1a>
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800736c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	0a1b      	lsrs	r3, r3, #8
 8007374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007378:	4618      	mov	r0, r3
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr

08007382 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007382:	b480      	push	{r7}
 8007384:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007390:	4618      	mov	r0, r3
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800739e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80073b2:	b480      	push	{r7}
 80073b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80073b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	f003 0303 	and.w	r3, r3, #3
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80073ca:	b480      	push	{r7}
 80073cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80073ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073dc:	d101      	bne.n	80073e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80073f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80073fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007402:	d101      	bne.n	8007408 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007414:	b480      	push	{r7}
 8007416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800741c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007428:	d101      	bne.n	800742e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800742a:	2301      	movs	r3, #1
 800742c:	e000      	b.n	8007430 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800743a:	b480      	push	{r7}
 800743c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800743e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007448:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800744c:	d101      	bne.n	8007452 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800744e:	2301      	movs	r3, #1
 8007450:	e000      	b.n	8007454 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007462:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800746c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007470:	d101      	bne.n	8007476 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007472:	2301      	movs	r3, #1
 8007474:	e000      	b.n	8007478 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
	...

08007484 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007484:	b590      	push	{r4, r7, lr}
 8007486:	b08d      	sub	sp, #52	@ 0x34
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e363      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0320 	and.w	r3, r3, #32
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 808d 	beq.w	80075be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074a4:	f7ff fe89 	bl	80071ba <LL_RCC_GetSysClkSource>
 80074a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074aa:	f7ff ff82 	bl	80073b2 <LL_RCC_PLL_GetMainSource>
 80074ae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80074b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d005      	beq.n	80074c2 <HAL_RCC_OscConfig+0x3e>
 80074b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b8:	2b0c      	cmp	r3, #12
 80074ba:	d147      	bne.n	800754c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d144      	bne.n	800754c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e347      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80074d2:	f7ff fe34 	bl	800713e <LL_RCC_MSI_GetRange>
 80074d6:	4603      	mov	r3, r0
 80074d8:	429c      	cmp	r4, r3
 80074da:	d914      	bls.n	8007506 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fd31 	bl	8007f48 <RCC_SetFlashLatencyFromMSIRange>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e336      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fe0e 	bl	8007116 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fe32 	bl	8007168 <LL_RCC_MSI_SetCalibTrimming>
 8007504:	e013      	b.n	800752e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff fe03 	bl	8007116 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	4618      	mov	r0, r3
 8007516:	f7ff fe27 	bl	8007168 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fd12 	bl	8007f48 <RCC_SetFlashLatencyFromMSIRange>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e317      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800752e:	f000 fccb 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007532:	4603      	mov	r3, r0
 8007534:	4aa4      	ldr	r2, [pc, #656]	@ (80077c8 <HAL_RCC_OscConfig+0x344>)
 8007536:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007538:	4ba4      	ldr	r3, [pc, #656]	@ (80077cc <HAL_RCC_OscConfig+0x348>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4618      	mov	r0, r3
 800753e:	f7fd fa7f 	bl	8004a40 <HAL_InitTick>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d039      	beq.n	80075bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e308      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d01e      	beq.n	8007592 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007554:	f7ff fdb0 	bl	80070b8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007558:	f7fd fac0 	bl	8004adc <HAL_GetTick>
 800755c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800755e:	e008      	b.n	8007572 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007560:	f7fd fabc 	bl	8004adc <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b02      	cmp	r3, #2
 800756c:	d901      	bls.n	8007572 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800756e:	2303      	movs	r3, #3
 8007570:	e2f5      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007572:	f7ff fdbf 	bl	80070f4 <LL_RCC_MSI_IsReady>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f1      	beq.n	8007560 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff fdc8 	bl	8007116 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fdec 	bl	8007168 <LL_RCC_MSI_SetCalibTrimming>
 8007590:	e015      	b.n	80075be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007592:	f7ff fda0 	bl	80070d6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007596:	f7fd faa1 	bl	8004adc <HAL_GetTick>
 800759a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800759c:	e008      	b.n	80075b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800759e:	f7fd fa9d 	bl	8004adc <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d901      	bls.n	80075b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e2d6      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80075b0:	f7ff fda0 	bl	80070f4 <LL_RCC_MSI_IsReady>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f1      	bne.n	800759e <HAL_RCC_OscConfig+0x11a>
 80075ba:	e000      	b.n	80075be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80075bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d047      	beq.n	800765a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80075ca:	f7ff fdf6 	bl	80071ba <LL_RCC_GetSysClkSource>
 80075ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80075d0:	f7ff feef 	bl	80073b2 <LL_RCC_PLL_GetMainSource>
 80075d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d005      	beq.n	80075e8 <HAL_RCC_OscConfig+0x164>
 80075dc:	6a3b      	ldr	r3, [r7, #32]
 80075de:	2b0c      	cmp	r3, #12
 80075e0:	d108      	bne.n	80075f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d105      	bne.n	80075f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d134      	bne.n	800765a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e2b4      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075fc:	d102      	bne.n	8007604 <HAL_RCC_OscConfig+0x180>
 80075fe:	f7ff fbdd 	bl	8006dbc <LL_RCC_HSE_Enable>
 8007602:	e001      	b.n	8007608 <HAL_RCC_OscConfig+0x184>
 8007604:	f7ff fbe9 	bl	8006dda <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d012      	beq.n	8007636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007610:	f7fd fa64 	bl	8004adc <HAL_GetTick>
 8007614:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007616:	e008      	b.n	800762a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007618:	f7fd fa60 	bl	8004adc <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	2b64      	cmp	r3, #100	@ 0x64
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e299      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800762a:	f7ff fbe5 	bl	8006df8 <LL_RCC_HSE_IsReady>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d0f1      	beq.n	8007618 <HAL_RCC_OscConfig+0x194>
 8007634:	e011      	b.n	800765a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007636:	f7fd fa51 	bl	8004adc <HAL_GetTick>
 800763a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800763e:	f7fd fa4d 	bl	8004adc <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b64      	cmp	r3, #100	@ 0x64
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e286      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007650:	f7ff fbd2 	bl	8006df8 <LL_RCC_HSE_IsReady>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f1      	bne.n	800763e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d04c      	beq.n	8007700 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007666:	f7ff fda8 	bl	80071ba <LL_RCC_GetSysClkSource>
 800766a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800766c:	f7ff fea1 	bl	80073b2 <LL_RCC_PLL_GetMainSource>
 8007670:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	2b04      	cmp	r3, #4
 8007676:	d005      	beq.n	8007684 <HAL_RCC_OscConfig+0x200>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b0c      	cmp	r3, #12
 800767c:	d10e      	bne.n	800769c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d10b      	bne.n	800769c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d101      	bne.n	8007690 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e266      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff fbf1 	bl	8006e7c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800769a:	e031      	b.n	8007700 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d019      	beq.n	80076d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a4:	f7ff fbba 	bl	8006e1c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a8:	f7fd fa18 	bl	8004adc <HAL_GetTick>
 80076ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80076ae:	e008      	b.n	80076c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076b0:	f7fd fa14 	bl	8004adc <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d901      	bls.n	80076c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80076be:	2303      	movs	r3, #3
 80076c0:	e24d      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80076c2:	f7ff fbc9 	bl	8006e58 <LL_RCC_HSI_IsReady>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0f1      	beq.n	80076b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff fbd3 	bl	8006e7c <LL_RCC_HSI_SetCalibTrimming>
 80076d6:	e013      	b.n	8007700 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076d8:	f7ff fbaf 	bl	8006e3a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fd f9fe 	bl	8004adc <HAL_GetTick>
 80076e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80076e2:	e008      	b.n	80076f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076e4:	f7fd f9fa 	bl	8004adc <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d901      	bls.n	80076f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e233      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80076f6:	f7ff fbaf 	bl	8006e58 <LL_RCC_HSI_IsReady>
 80076fa:	4603      	mov	r3, r0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f1      	bne.n	80076e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d106      	bne.n	800771a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 80a3 	beq.w	8007860 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d076      	beq.n	8007810 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	d046      	beq.n	80077bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800772e:	f7ff fc66 	bl	8006ffe <LL_RCC_LSI1_IsReady>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d113      	bne.n	8007760 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007738:	f7ff fc3f 	bl	8006fba <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800773c:	f7fd f9ce 	bl	8004adc <HAL_GetTick>
 8007740:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007744:	f7fd f9ca 	bl	8004adc <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e203      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007756:	f7ff fc52 	bl	8006ffe <LL_RCC_LSI1_IsReady>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f1      	beq.n	8007744 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007760:	f7ff fc5f 	bl	8007022 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fd f9ba 	bl	8004adc <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800776c:	f7fd f9b6 	bl	8004adc <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b03      	cmp	r3, #3
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e1ef      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800777e:	f7ff fc72 	bl	8007066 <LL_RCC_LSI2_IsReady>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d0f1      	beq.n	800776c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fc7c 	bl	800708a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007792:	f7ff fc23 	bl	8006fdc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007796:	f7fd f9a1 	bl	8004adc <HAL_GetTick>
 800779a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800779c:	e008      	b.n	80077b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800779e:	f7fd f99d 	bl	8004adc <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e1d6      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80077b0:	f7ff fc25 	bl	8006ffe <LL_RCC_LSI1_IsReady>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1f1      	bne.n	800779e <HAL_RCC_OscConfig+0x31a>
 80077ba:	e051      	b.n	8007860 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80077bc:	f7ff fbfd 	bl	8006fba <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c0:	f7fd f98c 	bl	8004adc <HAL_GetTick>
 80077c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80077c6:	e00c      	b.n	80077e2 <HAL_RCC_OscConfig+0x35e>
 80077c8:	20000008 	.word	0x20000008
 80077cc:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80077d0:	f7fd f984 	bl	8004adc <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e1bd      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80077e2:	f7ff fc0c 	bl	8006ffe <LL_RCC_LSI1_IsReady>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d0f1      	beq.n	80077d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80077ec:	f7ff fc2a 	bl	8007044 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80077f2:	f7fd f973 	bl	8004adc <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e1ac      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007804:	f7ff fc2f 	bl	8007066 <LL_RCC_LSI2_IsReady>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f1      	bne.n	80077f2 <HAL_RCC_OscConfig+0x36e>
 800780e:	e027      	b.n	8007860 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007810:	f7ff fc18 	bl	8007044 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007814:	f7fd f962 	bl	8004adc <HAL_GetTick>
 8007818:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800781c:	f7fd f95e 	bl	8004adc <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b03      	cmp	r3, #3
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e197      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800782e:	f7ff fc1a 	bl	8007066 <LL_RCC_LSI2_IsReady>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f1      	bne.n	800781c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007838:	f7ff fbd0 	bl	8006fdc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783c:	f7fd f94e 	bl	8004adc <HAL_GetTick>
 8007840:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007844:	f7fd f94a 	bl	8004adc <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e183      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007856:	f7ff fbd2 	bl	8006ffe <LL_RCC_LSI1_IsReady>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f1      	bne.n	8007844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b00      	cmp	r3, #0
 800786a:	d05b      	beq.n	8007924 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800786c:	4ba7      	ldr	r3, [pc, #668]	@ (8007b0c <HAL_RCC_OscConfig+0x688>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007874:	2b00      	cmp	r3, #0
 8007876:	d114      	bne.n	80078a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007878:	f7ff fa70 	bl	8006d5c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800787c:	f7fd f92e 	bl	8004adc <HAL_GetTick>
 8007880:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007882:	e008      	b.n	8007896 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007884:	f7fd f92a 	bl	8004adc <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d901      	bls.n	8007896 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e163      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007896:	4b9d      	ldr	r3, [pc, #628]	@ (8007b0c <HAL_RCC_OscConfig+0x688>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d0f0      	beq.n	8007884 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d102      	bne.n	80078b0 <HAL_RCC_OscConfig+0x42c>
 80078aa:	f7ff fb30 	bl	8006f0e <LL_RCC_LSE_Enable>
 80078ae:	e00c      	b.n	80078ca <HAL_RCC_OscConfig+0x446>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	2b05      	cmp	r3, #5
 80078b6:	d104      	bne.n	80078c2 <HAL_RCC_OscConfig+0x43e>
 80078b8:	f7ff fb4b 	bl	8006f52 <LL_RCC_LSE_EnableBypass>
 80078bc:	f7ff fb27 	bl	8006f0e <LL_RCC_LSE_Enable>
 80078c0:	e003      	b.n	80078ca <HAL_RCC_OscConfig+0x446>
 80078c2:	f7ff fb35 	bl	8006f30 <LL_RCC_LSE_Disable>
 80078c6:	f7ff fb55 	bl	8006f74 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d014      	beq.n	80078fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d2:	f7fd f903 	bl	8004adc <HAL_GetTick>
 80078d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80078d8:	e00a      	b.n	80078f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078da:	f7fd f8ff 	bl	8004adc <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e136      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80078f0:	f7ff fb51 	bl	8006f96 <LL_RCC_LSE_IsReady>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0ef      	beq.n	80078da <HAL_RCC_OscConfig+0x456>
 80078fa:	e013      	b.n	8007924 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078fc:	f7fd f8ee 	bl	8004adc <HAL_GetTick>
 8007900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007902:	e00a      	b.n	800791a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007904:	f7fd f8ea 	bl	8004adc <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007912:	4293      	cmp	r3, r2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e121      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800791a:	f7ff fb3c 	bl	8006f96 <LL_RCC_LSE_IsReady>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1ef      	bne.n	8007904 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02c      	beq.n	800798a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	2b00      	cmp	r3, #0
 8007936:	d014      	beq.n	8007962 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007938:	f7ff fab5 	bl	8006ea6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800793c:	f7fd f8ce 	bl	8004adc <HAL_GetTick>
 8007940:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007944:	f7fd f8ca 	bl	8004adc <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e103      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007956:	f7ff fac8 	bl	8006eea <LL_RCC_HSI48_IsReady>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0f1      	beq.n	8007944 <HAL_RCC_OscConfig+0x4c0>
 8007960:	e013      	b.n	800798a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007962:	f7ff fab1 	bl	8006ec8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007966:	f7fd f8b9 	bl	8004adc <HAL_GetTick>
 800796a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800796c:	e008      	b.n	8007980 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800796e:	f7fd f8b5 	bl	8004adc <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	2b02      	cmp	r3, #2
 800797a:	d901      	bls.n	8007980 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e0ee      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007980:	f7ff fab3 	bl	8006eea <LL_RCC_HSI48_IsReady>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f1      	bne.n	800796e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 80e4 	beq.w	8007b5c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007994:	f7ff fc11 	bl	80071ba <LL_RCC_GetSysClkSource>
 8007998:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	f040 80b4 	bne.w	8007b14 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f003 0203 	and.w	r2, r3, #3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d123      	bne.n	8007a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d11c      	bne.n	8007a02 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d114      	bne.n	8007a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d10d      	bne.n	8007a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d106      	bne.n	8007a02 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d05d      	beq.n	8007abe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b0c      	cmp	r3, #12
 8007a06:	d058      	beq.n	8007aba <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0a1      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007a1a:	f7ff fc84 	bl	8007326 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a1e:	f7fd f85d 	bl	8004adc <HAL_GetTick>
 8007a22:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a26:	f7fd f859 	bl	8004adc <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b02      	cmp	r3, #2
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e092      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1ef      	bne.n	8007a26 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a4a:	68da      	ldr	r2, [r3, #12]
 8007a4c:	4b30      	ldr	r3, [pc, #192]	@ (8007b10 <HAL_RCC_OscConfig+0x68c>)
 8007a4e:	4013      	ands	r3, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007a58:	4311      	orrs	r1, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007a5e:	0212      	lsls	r2, r2, #8
 8007a60:	4311      	orrs	r1, r2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a66:	4311      	orrs	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a6c:	4311      	orrs	r1, r2
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a72:	430a      	orrs	r2, r1
 8007a74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007a7c:	f7ff fc44 	bl	8007308 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007a90:	f7fd f824 	bl	8004adc <HAL_GetTick>
 8007a94:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a98:	f7fd f820 	bl	8004adc <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e059      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0ef      	beq.n	8007a98 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ab8:	e050      	b.n	8007b5c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e04f      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d147      	bne.n	8007b5c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007acc:	f7ff fc1c 	bl	8007308 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ade:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ae0:	f7fc fffc 	bl	8004adc <HAL_GetTick>
 8007ae4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ae6:	e008      	b.n	8007afa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ae8:	f7fc fff8 	bl	8004adc <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d901      	bls.n	8007afa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007af6:	2303      	movs	r3, #3
 8007af8:	e031      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007afa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d0ef      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x664>
 8007b08:	e028      	b.n	8007b5c <HAL_RCC_OscConfig+0x6d8>
 8007b0a:	bf00      	nop
 8007b0c:	58000400 	.word	0x58000400
 8007b10:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b0c      	cmp	r3, #12
 8007b18:	d01e      	beq.n	8007b58 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b1a:	f7ff fc04 	bl	8007326 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b1e:	f7fc ffdd 	bl	8004adc <HAL_GetTick>
 8007b22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b24:	e008      	b.n	8007b38 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b26:	f7fc ffd9 	bl	8004adc <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e012      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1ef      	bne.n	8007b26 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8007b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007b50:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <HAL_RCC_OscConfig+0x6e4>)
 8007b52:	4013      	ands	r3, r2
 8007b54:	60cb      	str	r3, [r1, #12]
 8007b56:	e001      	b.n	8007b5c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e000      	b.n	8007b5e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3734      	adds	r7, #52	@ 0x34
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd90      	pop	{r4, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	eefefffc 	.word	0xeefefffc

08007b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e12d      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b80:	4b98      	ldr	r3, [pc, #608]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0307 	and.w	r3, r3, #7
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d91b      	bls.n	8007bc6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b8e:	4b95      	ldr	r3, [pc, #596]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f023 0207 	bic.w	r2, r3, #7
 8007b96:	4993      	ldr	r1, [pc, #588]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b9e:	f7fc ff9d 	bl	8004adc <HAL_GetTick>
 8007ba2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ba4:	e008      	b.n	8007bb8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007ba6:	f7fc ff99 	bl	8004adc <HAL_GetTick>
 8007baa:	4602      	mov	r2, r0
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d901      	bls.n	8007bb8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	e111      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0307 	and.w	r3, r3, #7
 8007bc0:	683a      	ldr	r2, [r7, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d1ef      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0302 	and.w	r3, r3, #2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d016      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fafb 	bl	80071d2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007bdc:	f7fc ff7e 	bl	8004adc <HAL_GetTick>
 8007be0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007be4:	f7fc ff7a 	bl	8004adc <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e0f2      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007bf6:	f7ff fbe8 	bl	80073ca <LL_RCC_IsActiveFlag_HPRE>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f1      	beq.n	8007be4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0320 	and.w	r3, r3, #32
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d016      	beq.n	8007c3a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff faf2 	bl	80071fa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c16:	f7fc ff61 	bl	8004adc <HAL_GetTick>
 8007c1a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c1e:	f7fc ff5d 	bl	8004adc <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e0d5      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007c30:	f7ff fbdd 	bl	80073ee <LL_RCC_IsActiveFlag_C2HPRE>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d0f1      	beq.n	8007c1e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d016      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff faeb 	bl	8007226 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c50:	f7fc ff44 	bl	8004adc <HAL_GetTick>
 8007c54:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c56:	e008      	b.n	8007c6a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c58:	f7fc ff40 	bl	8004adc <HAL_GetTick>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e0b8      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007c6a:	f7ff fbd3 	bl	8007414 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0f1      	beq.n	8007c58 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0304 	and.w	r3, r3, #4
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d016      	beq.n	8007cae <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fae5 	bl	8007254 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007c8a:	f7fc ff27 	bl	8004adc <HAL_GetTick>
 8007c8e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007c92:	f7fc ff23 	bl	8004adc <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e09b      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007ca4:	f7ff fbc9 	bl	800743a <LL_RCC_IsActiveFlag_PPRE1>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f1      	beq.n	8007c92 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0308 	and.w	r3, r3, #8
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d017      	beq.n	8007cea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	00db      	lsls	r3, r3, #3
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff fadb 	bl	800727c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007cc6:	f7fc ff09 	bl	8004adc <HAL_GetTick>
 8007cca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007cce:	f7fc ff05 	bl	8004adc <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e07d      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007ce0:	f7ff fbbd 	bl	800745e <LL_RCC_IsActiveFlag_PPRE2>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f1      	beq.n	8007cce <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d043      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d106      	bne.n	8007d0c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007cfe:	f7ff f87b 	bl	8006df8 <LL_RCC_HSE_IsReady>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11e      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e067      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	d106      	bne.n	8007d22 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007d14:	f7ff fb16 	bl	8007344 <LL_RCC_PLL_IsReady>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d113      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e05c      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8007d2a:	f7ff f9e3 	bl	80070f4 <LL_RCC_MSI_IsReady>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d108      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e051      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8007d38:	f7ff f88e 	bl	8006e58 <LL_RCC_HSI_IsReady>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	e04a      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fa21 	bl	8007192 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d50:	f7fc fec4 	bl	8004adc <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d58:	f7fc fec0 	bl	8004adc <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e036      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6e:	f7ff fa24 	bl	80071ba <LL_RCC_GetSysClkSource>
 8007d72:	4602      	mov	r2, r0
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d1ec      	bne.n	8007d58 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d7e:	4b19      	ldr	r3, [pc, #100]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0307 	and.w	r3, r3, #7
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d21b      	bcs.n	8007dc4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8c:	4b15      	ldr	r3, [pc, #84]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f023 0207 	bic.w	r2, r3, #7
 8007d94:	4913      	ldr	r1, [pc, #76]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d9c:	f7fc fe9e 	bl	8004adc <HAL_GetTick>
 8007da0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007da2:	e008      	b.n	8007db6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007da4:	f7fc fe9a 	bl	8004adc <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e012      	b.n	8007ddc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b0b      	ldr	r3, [pc, #44]	@ (8007de4 <HAL_RCC_ClockConfig+0x278>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 0307 	and.w	r3, r3, #7
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d1ef      	bne.n	8007da4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007dc4:	f000 f880 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4a07      	ldr	r2, [pc, #28]	@ (8007de8 <HAL_RCC_ClockConfig+0x27c>)
 8007dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8007dce:	f7fc fe91 	bl	8004af4 <HAL_GetTickPrio>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fc fe33 	bl	8004a40 <HAL_InitTick>
 8007dda:	4603      	mov	r3, r0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	58004000 	.word	0x58004000
 8007de8:	20000008 	.word	0x20000008

08007dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dec:	b590      	push	{r4, r7, lr}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007df2:	f7ff f9e2 	bl	80071ba <LL_RCC_GetSysClkSource>
 8007df6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007dfe:	f7ff f99e 	bl	800713e <LL_RCC_MSI_GetRange>
 8007e02:	4603      	mov	r3, r0
 8007e04:	091b      	lsrs	r3, r3, #4
 8007e06:	f003 030f 	and.w	r3, r3, #15
 8007e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e04b      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d102      	bne.n	8007e20 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007e1a:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e045      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b08      	cmp	r3, #8
 8007e24:	d10a      	bne.n	8007e3c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e26:	f7fe ffb7 	bl	8006d98 <LL_RCC_HSE_IsEnabledDiv2>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d102      	bne.n	8007e36 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007e30:	4b23      	ldr	r3, [pc, #140]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	e03a      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8007e36:	4b23      	ldr	r3, [pc, #140]	@ (8007ec4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e037      	b.n	8007eac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007e3c:	f7ff fab9 	bl	80073b2 <LL_RCC_PLL_GetMainSource>
 8007e40:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d003      	beq.n	8007e50 <HAL_RCC_GetSysClockFreq+0x64>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	2b03      	cmp	r3, #3
 8007e4c:	d003      	beq.n	8007e56 <HAL_RCC_GetSysClockFreq+0x6a>
 8007e4e:	e00d      	b.n	8007e6c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HAL_RCC_GetSysClockFreq+0xd0>)
 8007e52:	60bb      	str	r3, [r7, #8]
        break;
 8007e54:	e015      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007e56:	f7fe ff9f 	bl	8006d98 <LL_RCC_HSE_IsEnabledDiv2>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d102      	bne.n	8007e66 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007e60:	4b17      	ldr	r3, [pc, #92]	@ (8007ec0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007e62:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007e64:	e00d      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007e66:	4b17      	ldr	r3, [pc, #92]	@ (8007ec4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8007e68:	60bb      	str	r3, [r7, #8]
        break;
 8007e6a:	e00a      	b.n	8007e82 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007e6c:	f7ff f967 	bl	800713e <LL_RCC_MSI_GetRange>
 8007e70:	4603      	mov	r3, r0
 8007e72:	091b      	lsrs	r3, r3, #4
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	4a0f      	ldr	r2, [pc, #60]	@ (8007eb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8007e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e7e:	60bb      	str	r3, [r7, #8]
        break;
 8007e80:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007e82:	f7ff fa71 	bl	8007368 <LL_RCC_PLL_GetN>
 8007e86:	4602      	mov	r2, r0
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	fb03 f402 	mul.w	r4, r3, r2
 8007e8e:	f7ff fa84 	bl	800739a <LL_RCC_PLL_GetDivider>
 8007e92:	4603      	mov	r3, r0
 8007e94:	091b      	lsrs	r3, r3, #4
 8007e96:	3301      	adds	r3, #1
 8007e98:	fbb4 f4f3 	udiv	r4, r4, r3
 8007e9c:	f7ff fa71 	bl	8007382 <LL_RCC_PLL_GetR>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	0f5b      	lsrs	r3, r3, #29
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	fbb4 f3f3 	udiv	r3, r4, r3
 8007eaa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8007eac:	68fb      	ldr	r3, [r7, #12]
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd90      	pop	{r4, r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	08014bc4 	.word	0x08014bc4
 8007ebc:	00f42400 	.word	0x00f42400
 8007ec0:	003d0900 	.word	0x003d0900
 8007ec4:	007a1200 	.word	0x007a1200

08007ec8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ec8:	b598      	push	{r3, r4, r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007ecc:	f7ff ff8e 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8007ed0:	4604      	mov	r4, r0
 8007ed2:	f7ff f9e7 	bl	80072a4 <LL_RCC_GetAHBPrescaler>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	091b      	lsrs	r3, r3, #4
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	4a03      	ldr	r2, [pc, #12]	@ (8007eec <HAL_RCC_GetHCLKFreq+0x24>)
 8007ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ee4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	bd98      	pop	{r3, r4, r7, pc}
 8007eec:	08014b64 	.word	0x08014b64

08007ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ef0:	b598      	push	{r3, r4, r7, lr}
 8007ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007ef4:	f7ff ffe8 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	f7ff f9ed 	bl	80072d8 <LL_RCC_GetAPB1Prescaler>
 8007efe:	4603      	mov	r3, r0
 8007f00:	0a1b      	lsrs	r3, r3, #8
 8007f02:	f003 0307 	and.w	r3, r3, #7
 8007f06:	4a04      	ldr	r2, [pc, #16]	@ (8007f18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f0c:	f003 031f 	and.w	r3, r3, #31
 8007f10:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	bd98      	pop	{r3, r4, r7, pc}
 8007f18:	08014ba4 	.word	0x08014ba4

08007f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f1c:	b598      	push	{r3, r4, r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007f20:	f7ff ffd2 	bl	8007ec8 <HAL_RCC_GetHCLKFreq>
 8007f24:	4604      	mov	r4, r0
 8007f26:	f7ff f9e3 	bl	80072f0 <LL_RCC_GetAPB2Prescaler>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	0adb      	lsrs	r3, r3, #11
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	4a04      	ldr	r2, [pc, #16]	@ (8007f44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f38:	f003 031f 	and.w	r3, r3, #31
 8007f3c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	bd98      	pop	{r3, r4, r7, pc}
 8007f44:	08014ba4 	.word	0x08014ba4

08007f48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2bb0      	cmp	r3, #176	@ 0xb0
 8007f54:	d903      	bls.n	8007f5e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007f56:	4b15      	ldr	r3, [pc, #84]	@ (8007fac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	e007      	b.n	8007f6e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	091b      	lsrs	r3, r3, #4
 8007f62:	f003 030f 	and.w	r3, r3, #15
 8007f66:	4a11      	ldr	r2, [pc, #68]	@ (8007fac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f6c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007f6e:	f7ff f9a5 	bl	80072bc <LL_RCC_GetAHB4Prescaler>
 8007f72:	4603      	mov	r3, r0
 8007f74:	091b      	lsrs	r3, r3, #4
 8007f76:	f003 030f 	and.w	r3, r3, #15
 8007f7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007fb0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f86:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fb4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f90:	0c9c      	lsrs	r4, r3, #18
 8007f92:	f7fe fef3 	bl	8006d7c <HAL_PWREx_GetVoltageRange>
 8007f96:	4603      	mov	r3, r0
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	f000 f80c 	bl	8007fb8 <RCC_SetFlashLatency>
 8007fa0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3714      	adds	r7, #20
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd90      	pop	{r4, r7, pc}
 8007faa:	bf00      	nop
 8007fac:	08014bc4 	.word	0x08014bc4
 8007fb0:	08014b64 	.word	0x08014b64
 8007fb4:	431bde83 	.word	0x431bde83

08007fb8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007fb8:	b590      	push	{r4, r7, lr}
 8007fba:	b093      	sub	sp, #76	@ 0x4c
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007fc2:	4b37      	ldr	r3, [pc, #220]	@ (80080a0 <RCC_SetFlashLatency+0xe8>)
 8007fc4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007fc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007fce:	4a35      	ldr	r2, [pc, #212]	@ (80080a4 <RCC_SetFlashLatency+0xec>)
 8007fd0:	f107 031c 	add.w	r3, r7, #28
 8007fd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007fda:	4b33      	ldr	r3, [pc, #204]	@ (80080a8 <RCC_SetFlashLatency+0xf0>)
 8007fdc:	f107 040c 	add.w	r4, r7, #12
 8007fe0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fe2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ff0:	d11a      	bne.n	8008028 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ff6:	e013      	b.n	8008020 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3348      	adds	r3, #72	@ 0x48
 8007ffe:	443b      	add	r3, r7
 8008000:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	429a      	cmp	r2, r3
 8008008:	d807      	bhi.n	800801a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800800a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	3348      	adds	r3, #72	@ 0x48
 8008010:	443b      	add	r3, r7
 8008012:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008016:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008018:	e020      	b.n	800805c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800801a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800801c:	3301      	adds	r3, #1
 800801e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008022:	2b03      	cmp	r3, #3
 8008024:	d9e8      	bls.n	8007ff8 <RCC_SetFlashLatency+0x40>
 8008026:	e019      	b.n	800805c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008028:	2300      	movs	r3, #0
 800802a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800802c:	e013      	b.n	8008056 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800802e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	3348      	adds	r3, #72	@ 0x48
 8008034:	443b      	add	r3, r7
 8008036:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	429a      	cmp	r2, r3
 800803e:	d807      	bhi.n	8008050 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	3348      	adds	r3, #72	@ 0x48
 8008046:	443b      	add	r3, r7
 8008048:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800804c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800804e:	e005      	b.n	800805c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008050:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008052:	3301      	adds	r3, #1
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008058:	2b02      	cmp	r3, #2
 800805a:	d9e8      	bls.n	800802e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800805c:	4b13      	ldr	r3, [pc, #76]	@ (80080ac <RCC_SetFlashLatency+0xf4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f023 0207 	bic.w	r2, r3, #7
 8008064:	4911      	ldr	r1, [pc, #68]	@ (80080ac <RCC_SetFlashLatency+0xf4>)
 8008066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008068:	4313      	orrs	r3, r2
 800806a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800806c:	f7fc fd36 	bl	8004adc <HAL_GetTick>
 8008070:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008072:	e008      	b.n	8008086 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008074:	f7fc fd32 	bl	8004adc <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e007      	b.n	8008096 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008086:	4b09      	ldr	r3, [pc, #36]	@ (80080ac <RCC_SetFlashLatency+0xf4>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008090:	429a      	cmp	r2, r3
 8008092:	d1ef      	bne.n	8008074 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	374c      	adds	r7, #76	@ 0x4c
 800809a:	46bd      	mov	sp, r7
 800809c:	bd90      	pop	{r4, r7, pc}
 800809e:	bf00      	nop
 80080a0:	08013c40 	.word	0x08013c40
 80080a4:	08013c50 	.word	0x08013c50
 80080a8:	08013c5c 	.word	0x08013c5c
 80080ac:	58004000 	.word	0x58004000

080080b0 <LL_RCC_LSE_IsEnabled>:
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80080b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d101      	bne.n	80080c8 <LL_RCC_LSE_IsEnabled+0x18>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <LL_RCC_LSE_IsEnabled+0x1a>
 80080c8:	2300      	movs	r3, #0
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <LL_RCC_LSE_IsReady>:
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80080d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b02      	cmp	r3, #2
 80080e6:	d101      	bne.n	80080ec <LL_RCC_LSE_IsReady+0x18>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e000      	b.n	80080ee <LL_RCC_LSE_IsReady+0x1a>
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <LL_RCC_SetRFWKPClockSource>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008108:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800810c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	4313      	orrs	r3, r2
 8008114:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <LL_RCC_SetSMPSClockSource>:
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800812c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008132:	f023 0203 	bic.w	r2, r3, #3
 8008136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4313      	orrs	r3, r2
 800813e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <LL_RCC_SetSMPSPrescaler>:
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800815a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800815e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4313      	orrs	r3, r2
 8008166:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <LL_RCC_SetUSARTClockSource>:
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800817c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008184:	f023 0203 	bic.w	r2, r3, #3
 8008188:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4313      	orrs	r3, r2
 8008190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <LL_RCC_SetLPUARTClockSource>:
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80081a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80081b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <LL_RCC_SetI2CClockSource>:
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80081d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	091b      	lsrs	r3, r3, #4
 80081e0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80081e4:	43db      	mvns	r3, r3
 80081e6:	401a      	ands	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80081f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081f4:	4313      	orrs	r3, r2
 80081f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80081fa:	bf00      	nop
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <LL_RCC_SetLPTIMClockSource>:
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800820e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008212:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	041b      	lsls	r3, r3, #16
 800821c:	43db      	mvns	r3, r3
 800821e:	401a      	ands	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	041b      	lsls	r3, r3, #16
 8008224:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008228:	4313      	orrs	r3, r2
 800822a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <LL_RCC_SetSAIClockSource>:
{
 800823a:	b480      	push	{r7}
 800823c:	b083      	sub	sp, #12
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008242:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800824a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800824e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4313      	orrs	r3, r2
 8008256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800825a:	bf00      	nop
 800825c:	370c      	adds	r7, #12
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <LL_RCC_SetRNGClockSource>:
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800826e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008276:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800827a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008286:	bf00      	nop
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <LL_RCC_SetCLK48ClockSource>:
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800829a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80082a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_RCC_SetUSBClockSource>:
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff ffe3 	bl	8008292 <LL_RCC_SetCLK48ClockSource>
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <LL_RCC_SetADCClockSource>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80082dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80082e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <LL_RCC_SetRTCClockSource>:
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4313      	orrs	r3, r2
 800831c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <LL_RCC_GetRTCClockSource>:
{
 800832c:	b480      	push	{r7}
 800832e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008338:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800833c:	4618      	mov	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <LL_RCC_ForceBackupDomainReset>:
{
 8008346:	b480      	push	{r7}
 8008348:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800834a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800834e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008352:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800835a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800835e:	bf00      	nop
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800836c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800837c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008380:	bf00      	nop
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <LL_RCC_PLLSAI1_Enable>:
{
 800838a:	b480      	push	{r7}
 800838c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800838e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008398:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800839c:	6013      	str	r3, [r2, #0]
}
 800839e:	bf00      	nop
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <LL_RCC_PLLSAI1_Disable>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80083ba:	6013      	str	r3, [r2, #0]
}
 80083bc:	bf00      	nop
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <LL_RCC_PLLSAI1_IsReady>:
{
 80083c6:	b480      	push	{r7}
 80083c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80083ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083d8:	d101      	bne.n	80083de <LL_RCC_PLLSAI1_IsReady+0x18>
 80083da:	2301      	movs	r3, #1
 80083dc:	e000      	b.n	80083e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr

080083ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b088      	sub	sp, #32
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80083f2:	2300      	movs	r3, #0
 80083f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80083f6:	2300      	movs	r3, #0
 80083f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008402:	2b00      	cmp	r3, #0
 8008404:	d034      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800840a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800840e:	d021      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008410:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008414:	d81b      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008416:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800841a:	d01d      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800841c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008420:	d815      	bhi.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00b      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800842a:	d110      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800842c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800843a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800843c:	e00d      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	4618      	mov	r0, r3
 8008444:	f000 f947 	bl	80086d6 <RCCEx_PLLSAI1_ConfigNP>
 8008448:	4603      	mov	r3, r0
 800844a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800844c:	e005      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	77fb      	strb	r3, [r7, #31]
        break;
 8008452:	e002      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008454:	bf00      	nop
 8008456:	e000      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845a:	7ffb      	ldrb	r3, [r7, #31]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d105      	bne.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	4618      	mov	r0, r3
 8008466:	f7ff fee8 	bl	800823a <LL_RCC_SetSAIClockSource>
 800846a:	e001      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800846c:	7ffb      	ldrb	r3, [r7, #31]
 800846e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008478:	2b00      	cmp	r3, #0
 800847a:	d046      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800847c:	f7ff ff56 	bl	800832c <LL_RCC_GetRTCClockSource>
 8008480:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008486:	69ba      	ldr	r2, [r7, #24]
 8008488:	429a      	cmp	r2, r3
 800848a:	d03c      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800848c:	f7fe fc66 	bl	8006d5c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d105      	bne.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	4618      	mov	r0, r3
 800849c:	f7ff ff30 	bl	8008300 <LL_RCC_SetRTCClockSource>
 80084a0:	e02e      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80084a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80084ac:	f7ff ff4b 	bl	8008346 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80084b0:	f7ff ff5a 	bl	8008368 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	4313      	orrs	r3, r2
 80084c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80084c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80084cc:	f7ff fdf0 	bl	80080b0 <LL_RCC_LSE_IsEnabled>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d114      	bne.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084d6:	f7fc fb01 	bl	8004adc <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80084dc:	e00b      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084de:	f7fc fafd 	bl	8004adc <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d902      	bls.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	77fb      	strb	r3, [r7, #31]
              break;
 80084f4:	e004      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80084f6:	f7ff fded 	bl	80080d4 <LL_RCC_LSE_IsReady>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d1ee      	bne.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008500:	7ffb      	ldrb	r3, [r7, #31]
 8008502:	77bb      	strb	r3, [r7, #30]
 8008504:	e001      	b.n	800850a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008506:	7ffb      	ldrb	r3, [r7, #31]
 8008508:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0301 	and.w	r3, r3, #1
 8008512:	2b00      	cmp	r3, #0
 8008514:	d004      	beq.n	8008520 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fe2a 	bl	8008174 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d004      	beq.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	4618      	mov	r0, r3
 8008532:	f7ff fe35 	bl	80081a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b00      	cmp	r3, #0
 8008540:	d004      	beq.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fe5d 	bl	8008206 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0320 	and.w	r3, r3, #32
 8008554:	2b00      	cmp	r3, #0
 8008556:	d004      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800855c:	4618      	mov	r0, r3
 800855e:	f7ff fe52 	bl	8008206 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	2b00      	cmp	r3, #0
 800856c:	d004      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fe2a 	bl	80081cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0308 	and.w	r3, r3, #8
 8008580:	2b00      	cmp	r3, #0
 8008582:	d004      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff fe1f 	bl	80081cc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008596:	2b00      	cmp	r3, #0
 8008598:	d022      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859e:	4618      	mov	r0, r3
 80085a0:	f7ff fe8d 	bl	80082be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085ac:	d107      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80085ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80085bc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80085c6:	d10b      	bne.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3304      	adds	r3, #4
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f8dd 	bl	800878c <RCCEx_PLLSAI1_ConfigNQ>
 80085d2:	4603      	mov	r3, r0
 80085d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80085d6:	7ffb      	ldrb	r3, [r7, #31]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d001      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80085dc:	7ffb      	ldrb	r3, [r7, #31]
 80085de:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d02b      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085f4:	d008      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085fe:	d003      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	d105      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fe2a 	bl	8008266 <LL_RCC_SetRNGClockSource>
 8008612:	e00a      	b.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	2000      	movs	r0, #0
 8008620:	f7ff fe21 	bl	8008266 <LL_RCC_SetRNGClockSource>
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7ff fe34 	bl	8008292 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800862e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008632:	d107      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800863e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008642:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800864c:	2b00      	cmp	r3, #0
 800864e:	d022      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fe3d 	bl	80082d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008662:	d107      	bne.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008668:	68db      	ldr	r3, [r3, #12]
 800866a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800866e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008672:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800867c:	d10b      	bne.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f000 f8dd 	bl	8008842 <RCCEx_PLLSAI1_ConfigNR>
 8008688:	4603      	mov	r3, r0
 800868a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800868c:	7ffb      	ldrb	r3, [r7, #31]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008692:	7ffb      	ldrb	r3, [r7, #31]
 8008694:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d004      	beq.n	80086ac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fd26 	bl	80080f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d009      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fd45 	bl	800814c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fd2c 	bl	8008124 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80086cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3720      	adds	r7, #32
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086de:	2300      	movs	r3, #0
 80086e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80086e2:	f7ff fe61 	bl	80083a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80086e6:	f7fc f9f9 	bl	8004adc <HAL_GetTick>
 80086ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80086ec:	e009      	b.n	8008702 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80086ee:	f7fc f9f5 	bl	8004adc <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d902      	bls.n	8008702 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008700:	e004      	b.n	800870c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008702:	f7ff fe60 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f0      	bne.n	80086ee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800870c:	7bfb      	ldrb	r3, [r7, #15]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d137      	bne.n	8008782 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	021b      	lsls	r3, r3, #8
 8008722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008726:	4313      	orrs	r3, r2
 8008728:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800872a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800873c:	4313      	orrs	r3, r2
 800873e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008740:	f7ff fe23 	bl	800838a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008744:	f7fc f9ca 	bl	8004adc <HAL_GetTick>
 8008748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800874a:	e009      	b.n	8008760 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800874c:	f7fc f9c6 	bl	8004adc <HAL_GetTick>
 8008750:	4602      	mov	r2, r0
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d902      	bls.n	8008760 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	73fb      	strb	r3, [r7, #15]
        break;
 800875e:	e004      	b.n	800876a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008760:	f7ff fe31 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 8008764:	4603      	mov	r3, r0
 8008766:	2b01      	cmp	r3, #1
 8008768:	d1f0      	bne.n	800874c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d108      	bne.n	8008782 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008774:	691a      	ldr	r2, [r3, #16]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800877e:	4313      	orrs	r3, r2
 8008780:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008782:	7bfb      	ldrb	r3, [r7, #15]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008798:	f7ff fe06 	bl	80083a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800879c:	f7fc f99e 	bl	8004adc <HAL_GetTick>
 80087a0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087a2:	e009      	b.n	80087b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087a4:	f7fc f99a 	bl	8004adc <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d902      	bls.n	80087b8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	73fb      	strb	r3, [r7, #15]
      break;
 80087b6:	e004      	b.n	80087c2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80087b8:	f7ff fe05 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1f0      	bne.n	80087a4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d137      	bne.n	8008838 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80087c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087dc:	4313      	orrs	r3, r2
 80087de:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80087e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087f2:	4313      	orrs	r3, r2
 80087f4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80087f6:	f7ff fdc8 	bl	800838a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087fa:	f7fc f96f 	bl	8004adc <HAL_GetTick>
 80087fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008800:	e009      	b.n	8008816 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008802:	f7fc f96b 	bl	8004adc <HAL_GetTick>
 8008806:	4602      	mov	r2, r0
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	d902      	bls.n	8008816 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	73fb      	strb	r3, [r7, #15]
        break;
 8008814:	e004      	b.n	8008820 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008816:	f7ff fdd6 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 800881a:	4603      	mov	r3, r0
 800881c:	2b01      	cmp	r3, #1
 800881e:	d1f0      	bne.n	8008802 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d108      	bne.n	8008838 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008834:	4313      	orrs	r3, r2
 8008836:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008838:	7bfb      	ldrb	r3, [r7, #15]
}
 800883a:	4618      	mov	r0, r3
 800883c:	3710      	adds	r7, #16
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800884e:	f7ff fdab 	bl	80083a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008852:	f7fc f943 	bl	8004adc <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008858:	e009      	b.n	800886e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800885a:	f7fc f93f 	bl	8004adc <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d902      	bls.n	800886e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	e004      	b.n	8008878 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800886e:	f7ff fdaa 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f0      	bne.n	800885a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d137      	bne.n	80088ee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800887e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008892:	4313      	orrs	r3, r2
 8008894:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088a8:	4313      	orrs	r3, r2
 80088aa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80088ac:	f7ff fd6d 	bl	800838a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b0:	f7fc f914 	bl	8004adc <HAL_GetTick>
 80088b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80088b6:	e009      	b.n	80088cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80088b8:	f7fc f910 	bl	8004adc <HAL_GetTick>
 80088bc:	4602      	mov	r2, r0
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d902      	bls.n	80088cc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	73fb      	strb	r3, [r7, #15]
        break;
 80088ca:	e004      	b.n	80088d6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80088cc:	f7ff fd7b 	bl	80083c6 <LL_RCC_PLLSAI1_IsReady>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d1f0      	bne.n	80088b8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80088dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088e0:	691a      	ldr	r2, [r3, #16]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088ea:	4313      	orrs	r3, r2
 80088ec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e095      	b.n	8008a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800891a:	d009      	beq.n	8008930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	61da      	str	r2, [r3, #28]
 8008922:	e005      	b.n	8008930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d106      	bne.n	8008950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2200      	movs	r2, #0
 8008946:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7f8 fec2 	bl	80016d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2202      	movs	r2, #2
 8008954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008970:	d902      	bls.n	8008978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008972:	2300      	movs	r3, #0
 8008974:	60fb      	str	r3, [r7, #12]
 8008976:	e002      	b.n	800897e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800897c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008986:	d007      	beq.n	8008998 <HAL_SPI_Init+0xa0>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008990:	d002      	beq.n	8008998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80089a8:	431a      	orrs	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	431a      	orrs	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	695b      	ldr	r3, [r3, #20]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089da:	ea42 0103 	orr.w	r1, r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	699b      	ldr	r3, [r3, #24]
 80089f2:	0c1b      	lsrs	r3, r3, #16
 80089f4:	f003 0204 	and.w	r2, r3, #4
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a06:	f003 0308 	and.w	r3, r3, #8
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a14:	ea42 0103 	orr.w	r1, r2, r3
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b088      	sub	sp, #32
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	603b      	str	r3, [r7, #0]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d101      	bne.n	8008a60 <HAL_SPI_Transmit+0x22>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	e15f      	b.n	8008d20 <HAL_SPI_Transmit+0x2e2>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a68:	f7fc f838 	bl	8004adc <HAL_GetTick>
 8008a6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a6e:	88fb      	ldrh	r3, [r7, #6]
 8008a70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d002      	beq.n	8008a84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a7e:	2302      	movs	r3, #2
 8008a80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a82:	e148      	b.n	8008d16 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <HAL_SPI_Transmit+0x52>
 8008a8a:	88fb      	ldrh	r3, [r7, #6]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d102      	bne.n	8008a96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a94:	e13f      	b.n	8008d16 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2203      	movs	r2, #3
 8008a9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	88fa      	ldrh	r2, [r7, #6]
 8008aae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	88fa      	ldrh	r2, [r7, #6]
 8008ab4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ae0:	d10f      	bne.n	8008b02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008af0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b0c:	2b40      	cmp	r3, #64	@ 0x40
 8008b0e:	d007      	beq.n	8008b20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b28:	d94f      	bls.n	8008bca <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d002      	beq.n	8008b38 <HAL_SPI_Transmit+0xfa>
 8008b32:	8afb      	ldrh	r3, [r7, #22]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d142      	bne.n	8008bbe <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	881a      	ldrh	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b48:	1c9a      	adds	r2, r3, #2
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	3b01      	subs	r3, #1
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b5c:	e02f      	b.n	8008bbe <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	f003 0302 	and.w	r3, r3, #2
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d112      	bne.n	8008b92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	881a      	ldrh	r2, [r3, #0]
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7c:	1c9a      	adds	r2, r3, #2
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008b90:	e015      	b.n	8008bbe <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b92:	f7fb ffa3 	bl	8004adc <HAL_GetTick>
 8008b96:	4602      	mov	r2, r0
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	1ad3      	subs	r3, r2, r3
 8008b9c:	683a      	ldr	r2, [r7, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d803      	bhi.n	8008baa <HAL_SPI_Transmit+0x16c>
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ba8:	d102      	bne.n	8008bb0 <HAL_SPI_Transmit+0x172>
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d106      	bne.n	8008bbe <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008bbc:	e0ab      	b.n	8008d16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1ca      	bne.n	8008b5e <HAL_SPI_Transmit+0x120>
 8008bc8:	e080      	b.n	8008ccc <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_SPI_Transmit+0x19a>
 8008bd2:	8afb      	ldrh	r3, [r7, #22]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d174      	bne.n	8008cc2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d912      	bls.n	8008c08 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be6:	881a      	ldrh	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf2:	1c9a      	adds	r2, r3, #2
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b02      	subs	r3, #2
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c06:	e05c      	b.n	8008cc2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	330c      	adds	r3, #12
 8008c12:	7812      	ldrb	r2, [r2, #0]
 8008c14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c2e:	e048      	b.n	8008cc2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d12b      	bne.n	8008c96 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d912      	bls.n	8008c6e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4c:	881a      	ldrh	r2, [r3, #0]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c58:	1c9a      	adds	r2, r3, #2
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	3b02      	subs	r3, #2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c6c:	e029      	b.n	8008cc2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	330c      	adds	r3, #12
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c94:	e015      	b.n	8008cc2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c96:	f7fb ff21 	bl	8004adc <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	683a      	ldr	r2, [r7, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d803      	bhi.n	8008cae <HAL_SPI_Transmit+0x270>
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d102      	bne.n	8008cb4 <HAL_SPI_Transmit+0x276>
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d106      	bne.n	8008cc2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008cc0:	e029      	b.n	8008d16 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1b1      	bne.n	8008c30 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fb69 	bl	80093a8 <SPI_EndRxTxTransaction>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008cea:	2300      	movs	r3, #0
 8008cec:	613b      	str	r3, [r7, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	77fb      	strb	r3, [r7, #31]
 8008d0c:	e003      	b.n	8008d16 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3720      	adds	r7, #32
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	@ 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
 8008d34:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d36:	2301      	movs	r3, #1
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_SPI_TransmitReceive+0x26>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e20a      	b.n	8009164 <HAL_SPI_TransmitReceive+0x43c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d56:	f7fb fec1 	bl	8004adc <HAL_GetTick>
 8008d5a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d62:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d6a:	887b      	ldrh	r3, [r7, #2]
 8008d6c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d72:	7efb      	ldrb	r3, [r7, #27]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d00e      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x6e>
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d7e:	d106      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <HAL_SPI_TransmitReceive+0x66>
 8008d88:	7efb      	ldrb	r3, [r7, #27]
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d003      	beq.n	8008d96 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008d8e:	2302      	movs	r3, #2
 8008d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008d94:	e1e0      	b.n	8009158 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x80>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d002      	beq.n	8008da8 <HAL_SPI_TransmitReceive+0x80>
 8008da2:	887b      	ldrh	r3, [r7, #2]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d103      	bne.n	8008db0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008dae:	e1d3      	b.n	8009158 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d003      	beq.n	8008dc4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2205      	movs	r2, #5
 8008dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	887a      	ldrh	r2, [r7, #2]
 8008dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	887a      	ldrh	r2, [r7, #2]
 8008ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	68ba      	ldr	r2, [r7, #8]
 8008de4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	887a      	ldrh	r2, [r7, #2]
 8008dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	887a      	ldrh	r2, [r7, #2]
 8008df0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	2200      	movs	r2, #0
 8008df6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e06:	d802      	bhi.n	8008e0e <HAL_SPI_TransmitReceive+0xe6>
 8008e08:	8a3b      	ldrh	r3, [r7, #16]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d908      	bls.n	8008e20 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	e007      	b.n	8008e30 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685a      	ldr	r2, [r3, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e3a:	2b40      	cmp	r3, #64	@ 0x40
 8008e3c:	d007      	beq.n	8008e4e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e56:	f240 8081 	bls.w	8008f5c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d002      	beq.n	8008e68 <HAL_SPI_TransmitReceive+0x140>
 8008e62:	8a7b      	ldrh	r3, [r7, #18]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d16d      	bne.n	8008f44 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	881a      	ldrh	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e78:	1c9a      	adds	r2, r3, #2
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	3b01      	subs	r3, #1
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e8c:	e05a      	b.n	8008f44 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f003 0302 	and.w	r3, r3, #2
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d11b      	bne.n	8008ed4 <HAL_SPI_TransmitReceive+0x1ac>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d016      	beq.n	8008ed4 <HAL_SPI_TransmitReceive+0x1ac>
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d113      	bne.n	8008ed4 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb0:	881a      	ldrh	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ebc:	1c9a      	adds	r2, r3, #2
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d11c      	bne.n	8008f1c <HAL_SPI_TransmitReceive+0x1f4>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d016      	beq.n	8008f1c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ef8:	b292      	uxth	r2, r2
 8008efa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f00:	1c9a      	adds	r2, r3, #2
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f1c:	f7fb fdde 	bl	8004adc <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d80b      	bhi.n	8008f44 <HAL_SPI_TransmitReceive+0x21c>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f32:	d007      	beq.n	8008f44 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008f42:	e109      	b.n	8009158 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d19f      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x166>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d199      	bne.n	8008e8e <HAL_SPI_TransmitReceive+0x166>
 8008f5a:	e0e3      	b.n	8009124 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <HAL_SPI_TransmitReceive+0x244>
 8008f64:	8a7b      	ldrh	r3, [r7, #18]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	f040 80cf 	bne.w	800910a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d912      	bls.n	8008f9c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7a:	881a      	ldrh	r2, [r3, #0]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f86:	1c9a      	adds	r2, r3, #2
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	3b02      	subs	r3, #2
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008f9a:	e0b6      	b.n	800910a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	330c      	adds	r3, #12
 8008fa6:	7812      	ldrb	r2, [r2, #0]
 8008fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fc2:	e0a2      	b.n	800910a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d134      	bne.n	800903c <HAL_SPI_TransmitReceive+0x314>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d02f      	beq.n	800903c <HAL_SPI_TransmitReceive+0x314>
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d12c      	bne.n	800903c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	2b01      	cmp	r3, #1
 8008fea:	d912      	bls.n	8009012 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ff0:	881a      	ldrh	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ffc:	1c9a      	adds	r2, r3, #2
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009006:	b29b      	uxth	r3, r3
 8009008:	3b02      	subs	r3, #2
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009010:	e012      	b.n	8009038 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	330c      	adds	r3, #12
 800901c:	7812      	ldrb	r2, [r2, #0]
 800901e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009024:	1c5a      	adds	r2, r3, #1
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800902e:	b29b      	uxth	r3, r3
 8009030:	3b01      	subs	r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009038:	2300      	movs	r3, #0
 800903a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b01      	cmp	r3, #1
 8009048:	d148      	bne.n	80090dc <HAL_SPI_TransmitReceive+0x3b4>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009050:	b29b      	uxth	r3, r3
 8009052:	2b00      	cmp	r3, #0
 8009054:	d042      	beq.n	80090dc <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800905c:	b29b      	uxth	r3, r3
 800905e:	2b01      	cmp	r3, #1
 8009060:	d923      	bls.n	80090aa <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68da      	ldr	r2, [r3, #12]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906c:	b292      	uxth	r2, r2
 800906e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009074:	1c9a      	adds	r2, r3, #2
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b02      	subs	r3, #2
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009092:	b29b      	uxth	r3, r3
 8009094:	2b01      	cmp	r3, #1
 8009096:	d81f      	bhi.n	80090d8 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090a6:	605a      	str	r2, [r3, #4]
 80090a8:	e016      	b.n	80090d8 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f103 020c 	add.w	r2, r3, #12
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b6:	7812      	ldrb	r2, [r2, #0]
 80090b8:	b2d2      	uxtb	r2, r2
 80090ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090c0:	1c5a      	adds	r2, r3, #1
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29a      	uxth	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090d8:	2301      	movs	r3, #1
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090dc:	f7fb fcfe 	bl	8004adc <HAL_GetTick>
 80090e0:	4602      	mov	r2, r0
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d803      	bhi.n	80090f4 <HAL_SPI_TransmitReceive+0x3cc>
 80090ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d102      	bne.n	80090fa <HAL_SPI_TransmitReceive+0x3d2>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d107      	bne.n	800910a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009108:	e026      	b.n	8009158 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800910e:	b29b      	uxth	r3, r3
 8009110:	2b00      	cmp	r3, #0
 8009112:	f47f af57 	bne.w	8008fc4 <HAL_SPI_TransmitReceive+0x29c>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800911c:	b29b      	uxth	r3, r3
 800911e:	2b00      	cmp	r3, #0
 8009120:	f47f af50 	bne.w	8008fc4 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009124:	69fa      	ldr	r2, [r7, #28]
 8009126:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f93d 	bl	80093a8 <SPI_EndRxTxTransaction>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2220      	movs	r2, #32
 800913e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009144:	2b00      	cmp	r3, #0
 8009146:	d003      	beq.n	8009150 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800914e:	e003      	b.n	8009158 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009160:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009164:	4618      	mov	r0, r3
 8009166:	3728      	adds	r7, #40	@ 0x28
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b088      	sub	sp, #32
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	4613      	mov	r3, r2
 800917a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800917c:	f7fb fcae 	bl	8004adc <HAL_GetTick>
 8009180:	4602      	mov	r2, r0
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	1a9b      	subs	r3, r3, r2
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	4413      	add	r3, r2
 800918a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800918c:	f7fb fca6 	bl	8004adc <HAL_GetTick>
 8009190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009192:	4b39      	ldr	r3, [pc, #228]	@ (8009278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	015b      	lsls	r3, r3, #5
 8009198:	0d1b      	lsrs	r3, r3, #20
 800919a:	69fa      	ldr	r2, [r7, #28]
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091a2:	e054      	b.n	800924e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091aa:	d050      	beq.n	800924e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091ac:	f7fb fc96 	bl	8004adc <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d902      	bls.n	80091c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d13d      	bne.n	800923e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80091d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80091da:	d111      	bne.n	8009200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091e4:	d004      	beq.n	80091f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091ee:	d107      	bne.n	8009200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80091fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009208:	d10f      	bne.n	800922a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2200      	movs	r2, #0
 8009236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e017      	b.n	800926e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d101      	bne.n	8009248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	3b01      	subs	r3, #1
 800924c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	689a      	ldr	r2, [r3, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4013      	ands	r3, r2
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	bf0c      	ite	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	2300      	movne	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	429a      	cmp	r2, r3
 800926a:	d19b      	bne.n	80091a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000008 	.word	0x20000008

0800927c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	@ 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
 8009288:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800928e:	f7fb fc25 	bl	8004adc <HAL_GetTick>
 8009292:	4602      	mov	r2, r0
 8009294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009296:	1a9b      	subs	r3, r3, r2
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	4413      	add	r3, r2
 800929c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800929e:	f7fb fc1d 	bl	8004adc <HAL_GetTick>
 80092a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	330c      	adds	r3, #12
 80092aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092ac:	4b3d      	ldr	r3, [pc, #244]	@ (80093a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092ae:	681a      	ldr	r2, [r3, #0]
 80092b0:	4613      	mov	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	4413      	add	r3, r2
 80092b6:	00da      	lsls	r2, r3, #3
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	0d1b      	lsrs	r3, r3, #20
 80092bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092c4:	e060      	b.n	8009388 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80092cc:	d107      	bne.n	80092de <SPI_WaitFifoStateUntilTimeout+0x62>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d104      	bne.n	80092de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80092dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e4:	d050      	beq.n	8009388 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092e6:	f7fb fbf9 	bl	8004adc <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	6a3b      	ldr	r3, [r7, #32]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d902      	bls.n	80092fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80092f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d13d      	bne.n	8009378 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685a      	ldr	r2, [r3, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800930a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009314:	d111      	bne.n	800933a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800931e:	d004      	beq.n	800932a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009328:	d107      	bne.n	800933a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009342:	d10f      	bne.n	8009364 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009362:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e010      	b.n	800939a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800937e:	2300      	movs	r3, #0
 8009380:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	3b01      	subs	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689a      	ldr	r2, [r3, #8]
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	4013      	ands	r3, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	429a      	cmp	r2, r3
 8009396:	d196      	bne.n	80092c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3728      	adds	r7, #40	@ 0x28
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	20000008 	.word	0x20000008

080093a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af02      	add	r7, sp, #8
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff ff5b 	bl	800927c <SPI_WaitFifoStateUntilTimeout>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d007      	beq.n	80093dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093d0:	f043 0220 	orr.w	r2, r3, #32
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e027      	b.n	800942c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2200      	movs	r2, #0
 80093e4:	2180      	movs	r1, #128	@ 0x80
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f7ff fec0 	bl	800916c <SPI_WaitFlagStateUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d007      	beq.n	8009402 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093f6:	f043 0220 	orr.w	r2, r3, #32
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e014      	b.n	800942c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	2200      	movs	r2, #0
 800940a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f7ff ff34 	bl	800927c <SPI_WaitFifoStateUntilTimeout>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d007      	beq.n	800942a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800941e:	f043 0220 	orr.w	r2, r3, #32
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e000      	b.n	800942c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e049      	b.n	80094da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d106      	bne.n	8009460 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7f8 f96a 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2202      	movs	r2, #2
 8009464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	3304      	adds	r3, #4
 8009470:	4619      	mov	r1, r3
 8009472:	4610      	mov	r0, r2
 8009474:	f000 f8fe 	bl	8009674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2201      	movs	r2, #1
 800947c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2201      	movs	r2, #1
 8009484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2201      	movs	r2, #1
 800949c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3708      	adds	r7, #8
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}

080094e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b084      	sub	sp, #16
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d101      	bne.n	80094fe <HAL_TIM_ConfigClockSource+0x1c>
 80094fa:	2302      	movs	r3, #2
 80094fc:	e0b6      	b.n	800966c <HAL_TIM_ConfigClockSource+0x18a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2202      	movs	r2, #2
 800950a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800951c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009520:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009528:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800953a:	d03e      	beq.n	80095ba <HAL_TIM_ConfigClockSource+0xd8>
 800953c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009540:	f200 8087 	bhi.w	8009652 <HAL_TIM_ConfigClockSource+0x170>
 8009544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009548:	f000 8086 	beq.w	8009658 <HAL_TIM_ConfigClockSource+0x176>
 800954c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009550:	d87f      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 8009552:	2b70      	cmp	r3, #112	@ 0x70
 8009554:	d01a      	beq.n	800958c <HAL_TIM_ConfigClockSource+0xaa>
 8009556:	2b70      	cmp	r3, #112	@ 0x70
 8009558:	d87b      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 800955a:	2b60      	cmp	r3, #96	@ 0x60
 800955c:	d050      	beq.n	8009600 <HAL_TIM_ConfigClockSource+0x11e>
 800955e:	2b60      	cmp	r3, #96	@ 0x60
 8009560:	d877      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 8009562:	2b50      	cmp	r3, #80	@ 0x50
 8009564:	d03c      	beq.n	80095e0 <HAL_TIM_ConfigClockSource+0xfe>
 8009566:	2b50      	cmp	r3, #80	@ 0x50
 8009568:	d873      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 800956a:	2b40      	cmp	r3, #64	@ 0x40
 800956c:	d058      	beq.n	8009620 <HAL_TIM_ConfigClockSource+0x13e>
 800956e:	2b40      	cmp	r3, #64	@ 0x40
 8009570:	d86f      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 8009572:	2b30      	cmp	r3, #48	@ 0x30
 8009574:	d064      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x15e>
 8009576:	2b30      	cmp	r3, #48	@ 0x30
 8009578:	d86b      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 800957a:	2b20      	cmp	r3, #32
 800957c:	d060      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x15e>
 800957e:	2b20      	cmp	r3, #32
 8009580:	d867      	bhi.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d05c      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x15e>
 8009586:	2b10      	cmp	r3, #16
 8009588:	d05a      	beq.n	8009640 <HAL_TIM_ConfigClockSource+0x15e>
 800958a:	e062      	b.n	8009652 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800959c:	f000 f956 	bl	800984c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	609a      	str	r2, [r3, #8]
      break;
 80095b8:	e04f      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095ca:	f000 f93f 	bl	800984c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80095dc:	609a      	str	r2, [r3, #8]
      break;
 80095de:	e03c      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ec:	461a      	mov	r2, r3
 80095ee:	f000 f8b1 	bl	8009754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2150      	movs	r1, #80	@ 0x50
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f90a 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 80095fe:	e02c      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800960c:	461a      	mov	r2, r3
 800960e:	f000 f8d0 	bl	80097b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2160      	movs	r1, #96	@ 0x60
 8009618:	4618      	mov	r0, r3
 800961a:	f000 f8fa 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 800961e:	e01c      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800962c:	461a      	mov	r2, r3
 800962e:	f000 f891 	bl	8009754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2140      	movs	r1, #64	@ 0x40
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f8ea 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 800963e:	e00c      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4619      	mov	r1, r3
 800964a:	4610      	mov	r0, r2
 800964c:	f000 f8e1 	bl	8009812 <TIM_ITRx_SetConfig>
      break;
 8009650:	e003      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	73fb      	strb	r3, [r7, #15]
      break;
 8009656:	e000      	b.n	800965a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009658:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a30      	ldr	r2, [pc, #192]	@ (8009748 <TIM_Base_SetConfig+0xd4>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d003      	beq.n	8009694 <TIM_Base_SetConfig+0x20>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009692:	d108      	bne.n	80096a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a27      	ldr	r2, [pc, #156]	@ (8009748 <TIM_Base_SetConfig+0xd4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d00b      	beq.n	80096c6 <TIM_Base_SetConfig+0x52>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b4:	d007      	beq.n	80096c6 <TIM_Base_SetConfig+0x52>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a24      	ldr	r2, [pc, #144]	@ (800974c <TIM_Base_SetConfig+0xd8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d003      	beq.n	80096c6 <TIM_Base_SetConfig+0x52>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a23      	ldr	r2, [pc, #140]	@ (8009750 <TIM_Base_SetConfig+0xdc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d108      	bne.n	80096d8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	689a      	ldr	r2, [r3, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	4a12      	ldr	r2, [pc, #72]	@ (8009748 <TIM_Base_SetConfig+0xd4>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d007      	beq.n	8009714 <TIM_Base_SetConfig+0xa0>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a11      	ldr	r2, [pc, #68]	@ (800974c <TIM_Base_SetConfig+0xd8>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d003      	beq.n	8009714 <TIM_Base_SetConfig+0xa0>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a10      	ldr	r2, [pc, #64]	@ (8009750 <TIM_Base_SetConfig+0xdc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d103      	bne.n	800971c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	691a      	ldr	r2, [r3, #16]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b01      	cmp	r3, #1
 800972c:	d105      	bne.n	800973a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f023 0201 	bic.w	r2, r3, #1
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	611a      	str	r2, [r3, #16]
  }
}
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40012c00 	.word	0x40012c00
 800974c:	40014400 	.word	0x40014400
 8009750:	40014800 	.word	0x40014800

08009754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800977e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	011b      	lsls	r3, r3, #4
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4313      	orrs	r3, r2
 8009788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f023 030a 	bic.w	r3, r3, #10
 8009790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4313      	orrs	r3, r2
 8009798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	693a      	ldr	r2, [r7, #16]
 800979e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	621a      	str	r2, [r3, #32]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b087      	sub	sp, #28
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a1b      	ldr	r3, [r3, #32]
 80097c8:	f023 0210 	bic.w	r2, r3, #16
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	031b      	lsls	r3, r3, #12
 80097e2:	693a      	ldr	r2, [r7, #16]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	011b      	lsls	r3, r3, #4
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	4313      	orrs	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	621a      	str	r2, [r3, #32]
}
 8009806:	bf00      	nop
 8009808:	371c      	adds	r7, #28
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800982c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	f043 0307 	orr.w	r3, r3, #7
 8009838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	609a      	str	r2, [r3, #8]
}
 8009840:	bf00      	nop
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]
 8009858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	021a      	lsls	r2, r3, #8
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	431a      	orrs	r2, r3
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4313      	orrs	r3, r2
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	609a      	str	r2, [r3, #8]
}
 8009880:	bf00      	nop
 8009882:	371c      	adds	r7, #28
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800989c:	2b01      	cmp	r3, #1
 800989e:	d101      	bne.n	80098a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e04a      	b.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a1f      	ldr	r2, [pc, #124]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d108      	bne.n	80098e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80098d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	68fa      	ldr	r2, [r7, #12]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a12      	ldr	r2, [pc, #72]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d004      	beq.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990c:	d10c      	bne.n	8009928 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009914:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	68ba      	ldr	r2, [r7, #8]
 800991c:	4313      	orrs	r3, r2
 800991e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3714      	adds	r7, #20
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	40012c00 	.word	0x40012c00

0800994c <LL_RCC_GetUSARTClockSource>:
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009958:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4013      	ands	r3, r2
}
 8009960:	4618      	mov	r0, r3
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <LL_RCC_GetLPUARTClockSource>:
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009978:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4013      	ands	r3, r2
}
 8009980:	4618      	mov	r0, r3
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d101      	bne.n	800999e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e042      	b.n	8009a24 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7f7 fe49 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2224      	movs	r2, #36	@ 0x24
 80099ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0201 	bic.w	r2, r2, #1
 80099cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa50 	bl	8009e7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f825 	bl	8009a2c <UART_SetConfig>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80099e8:	2301      	movs	r3, #1
 80099ea:	e01b      	b.n	8009a24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80099fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0201 	orr.w	r2, r2, #1
 8009a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 facf 	bl	8009fc0 <UART_CheckIdleState>
 8009a22:	4603      	mov	r3, r0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a30:	b08c      	sub	sp, #48	@ 0x30
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a36:	2300      	movs	r3, #0
 8009a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	689a      	ldr	r2, [r3, #8]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	431a      	orrs	r2, r3
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	695b      	ldr	r3, [r3, #20]
 8009a4a:	431a      	orrs	r2, r3
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4baf      	ldr	r3, [pc, #700]	@ (8009d18 <UART_SetConfig+0x2ec>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a64:	430b      	orrs	r3, r1
 8009a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4aa4      	ldr	r2, [pc, #656]	@ (8009d1c <UART_SetConfig+0x2f0>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a94:	4313      	orrs	r3, r2
 8009a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009aa2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	6812      	ldr	r2, [r2, #0]
 8009aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ab6:	f023 010f 	bic.w	r1, r3, #15
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a95      	ldr	r2, [pc, #596]	@ (8009d20 <UART_SetConfig+0x2f4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d125      	bne.n	8009b1c <UART_SetConfig+0xf0>
 8009ad0:	2003      	movs	r0, #3
 8009ad2:	f7ff ff3b 	bl	800994c <LL_RCC_GetUSARTClockSource>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b03      	cmp	r3, #3
 8009ada:	d81b      	bhi.n	8009b14 <UART_SetConfig+0xe8>
 8009adc:	a201      	add	r2, pc, #4	@ (adr r2, 8009ae4 <UART_SetConfig+0xb8>)
 8009ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae2:	bf00      	nop
 8009ae4:	08009af5 	.word	0x08009af5
 8009ae8:	08009b05 	.word	0x08009b05
 8009aec:	08009afd 	.word	0x08009afd
 8009af0:	08009b0d 	.word	0x08009b0d
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009afa:	e042      	b.n	8009b82 <UART_SetConfig+0x156>
 8009afc:	2302      	movs	r3, #2
 8009afe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b02:	e03e      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b04:	2304      	movs	r3, #4
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b0a:	e03a      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b0c:	2308      	movs	r3, #8
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b12:	e036      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b14:	2310      	movs	r3, #16
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b1a:	e032      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a7e      	ldr	r2, [pc, #504]	@ (8009d1c <UART_SetConfig+0x2f0>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d12a      	bne.n	8009b7c <UART_SetConfig+0x150>
 8009b26:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8009b2a:	f7ff ff1f 	bl	800996c <LL_RCC_GetLPUARTClockSource>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b34:	d01a      	beq.n	8009b6c <UART_SetConfig+0x140>
 8009b36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009b3a:	d81b      	bhi.n	8009b74 <UART_SetConfig+0x148>
 8009b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b40:	d00c      	beq.n	8009b5c <UART_SetConfig+0x130>
 8009b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b46:	d815      	bhi.n	8009b74 <UART_SetConfig+0x148>
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <UART_SetConfig+0x128>
 8009b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b50:	d008      	beq.n	8009b64 <UART_SetConfig+0x138>
 8009b52:	e00f      	b.n	8009b74 <UART_SetConfig+0x148>
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b5a:	e012      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b62:	e00e      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b64:	2304      	movs	r3, #4
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b6a:	e00a      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b72:	e006      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009b7a:	e002      	b.n	8009b82 <UART_SetConfig+0x156>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a65      	ldr	r2, [pc, #404]	@ (8009d1c <UART_SetConfig+0x2f0>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	f040 8097 	bne.w	8009cbc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b92:	2b08      	cmp	r3, #8
 8009b94:	d823      	bhi.n	8009bde <UART_SetConfig+0x1b2>
 8009b96:	a201      	add	r2, pc, #4	@ (adr r2, 8009b9c <UART_SetConfig+0x170>)
 8009b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9c:	08009bc1 	.word	0x08009bc1
 8009ba0:	08009bdf 	.word	0x08009bdf
 8009ba4:	08009bc9 	.word	0x08009bc9
 8009ba8:	08009bdf 	.word	0x08009bdf
 8009bac:	08009bcf 	.word	0x08009bcf
 8009bb0:	08009bdf 	.word	0x08009bdf
 8009bb4:	08009bdf 	.word	0x08009bdf
 8009bb8:	08009bdf 	.word	0x08009bdf
 8009bbc:	08009bd7 	.word	0x08009bd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bc0:	f7fe f996 	bl	8007ef0 <HAL_RCC_GetPCLK1Freq>
 8009bc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bc6:	e010      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc8:	4b56      	ldr	r3, [pc, #344]	@ (8009d24 <UART_SetConfig+0x2f8>)
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bcc:	e00d      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bce:	f7fe f90d 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8009bd2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bd4:	e009      	b.n	8009bea <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bdc:	e005      	b.n	8009bea <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009bde:	2300      	movs	r3, #0
 8009be0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009be8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	f000 812b 	beq.w	8009e48 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf6:	4a4c      	ldr	r2, [pc, #304]	@ (8009d28 <UART_SetConfig+0x2fc>)
 8009bf8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	4413      	add	r3, r2
 8009c10:	69ba      	ldr	r2, [r7, #24]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d305      	bcc.n	8009c22 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c1c:	69ba      	ldr	r2, [r7, #24]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d903      	bls.n	8009c2a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009c28:	e10e      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	60bb      	str	r3, [r7, #8]
 8009c30:	60fa      	str	r2, [r7, #12]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c36:	4a3c      	ldr	r2, [pc, #240]	@ (8009d28 <UART_SetConfig+0x2fc>)
 8009c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	2200      	movs	r2, #0
 8009c40:	603b      	str	r3, [r7, #0]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c4c:	f7f6 ffb4 	bl	8000bb8 <__aeabi_uldivmod>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4610      	mov	r0, r2
 8009c56:	4619      	mov	r1, r3
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	020b      	lsls	r3, r1, #8
 8009c62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c66:	0202      	lsls	r2, r0, #8
 8009c68:	6979      	ldr	r1, [r7, #20]
 8009c6a:	6849      	ldr	r1, [r1, #4]
 8009c6c:	0849      	lsrs	r1, r1, #1
 8009c6e:	2000      	movs	r0, #0
 8009c70:	460c      	mov	r4, r1
 8009c72:	4605      	mov	r5, r0
 8009c74:	eb12 0804 	adds.w	r8, r2, r4
 8009c78:	eb43 0905 	adc.w	r9, r3, r5
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	469a      	mov	sl, r3
 8009c84:	4693      	mov	fp, r2
 8009c86:	4652      	mov	r2, sl
 8009c88:	465b      	mov	r3, fp
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 ff93 	bl	8000bb8 <__aeabi_uldivmod>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4613      	mov	r3, r2
 8009c98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ca0:	d308      	bcc.n	8009cb4 <UART_SetConfig+0x288>
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ca8:	d204      	bcs.n	8009cb4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6a3a      	ldr	r2, [r7, #32]
 8009cb0:	60da      	str	r2, [r3, #12]
 8009cb2:	e0c9      	b.n	8009e48 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009cba:	e0c5      	b.n	8009e48 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cc4:	d16d      	bne.n	8009da2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009cc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009cca:	3b01      	subs	r3, #1
 8009ccc:	2b07      	cmp	r3, #7
 8009cce:	d82d      	bhi.n	8009d2c <UART_SetConfig+0x300>
 8009cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd8 <UART_SetConfig+0x2ac>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cf9 	.word	0x08009cf9
 8009cdc:	08009d01 	.word	0x08009d01
 8009ce0:	08009d2d 	.word	0x08009d2d
 8009ce4:	08009d07 	.word	0x08009d07
 8009ce8:	08009d2d 	.word	0x08009d2d
 8009cec:	08009d2d 	.word	0x08009d2d
 8009cf0:	08009d2d 	.word	0x08009d2d
 8009cf4:	08009d0f 	.word	0x08009d0f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cf8:	f7fe f910 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 8009cfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009cfe:	e01b      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d00:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <UART_SetConfig+0x2f8>)
 8009d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d04:	e018      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d06:	f7fe f871 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8009d0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009d0c:	e014      	b.n	8009d38 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009d14:	e010      	b.n	8009d38 <UART_SetConfig+0x30c>
 8009d16:	bf00      	nop
 8009d18:	cfff69f3 	.word	0xcfff69f3
 8009d1c:	40008000 	.word	0x40008000
 8009d20:	40013800 	.word	0x40013800
 8009d24:	00f42400 	.word	0x00f42400
 8009d28:	08014c08 	.word	0x08014c08
      default:
        pclk = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009d36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f000 8084 	beq.w	8009e48 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d44:	4a4b      	ldr	r2, [pc, #300]	@ (8009e74 <UART_SetConfig+0x448>)
 8009d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d52:	005a      	lsls	r2, r3, #1
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	085b      	lsrs	r3, r3, #1
 8009d5a:	441a      	add	r2, r3
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d64:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	2b0f      	cmp	r3, #15
 8009d6a:	d916      	bls.n	8009d9a <UART_SetConfig+0x36e>
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d72:	d212      	bcs.n	8009d9a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d74:	6a3b      	ldr	r3, [r7, #32]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f023 030f 	bic.w	r3, r3, #15
 8009d7c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f003 0307 	and.w	r3, r3, #7
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	8bfb      	ldrh	r3, [r7, #30]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	8bfa      	ldrh	r2, [r7, #30]
 8009d96:	60da      	str	r2, [r3, #12]
 8009d98:	e056      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009da0:	e052      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009da2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009da6:	3b01      	subs	r3, #1
 8009da8:	2b07      	cmp	r3, #7
 8009daa:	d822      	bhi.n	8009df2 <UART_SetConfig+0x3c6>
 8009dac:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <UART_SetConfig+0x388>)
 8009dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db2:	bf00      	nop
 8009db4:	08009dd5 	.word	0x08009dd5
 8009db8:	08009ddd 	.word	0x08009ddd
 8009dbc:	08009df3 	.word	0x08009df3
 8009dc0:	08009de3 	.word	0x08009de3
 8009dc4:	08009df3 	.word	0x08009df3
 8009dc8:	08009df3 	.word	0x08009df3
 8009dcc:	08009df3 	.word	0x08009df3
 8009dd0:	08009deb 	.word	0x08009deb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dd4:	f7fe f8a2 	bl	8007f1c <HAL_RCC_GetPCLK2Freq>
 8009dd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009dda:	e010      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ddc:	4b26      	ldr	r3, [pc, #152]	@ (8009e78 <UART_SetConfig+0x44c>)
 8009dde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009de0:	e00d      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009de2:	f7fe f803 	bl	8007dec <HAL_RCC_GetSysClockFreq>
 8009de6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009de8:	e009      	b.n	8009dfe <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009df0:	e005      	b.n	8009dfe <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009dfc:	bf00      	nop
    }

    if (pclk != 0U)
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d021      	beq.n	8009e48 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e08:	4a1a      	ldr	r2, [pc, #104]	@ (8009e74 <UART_SetConfig+0x448>)
 8009e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e12:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	085b      	lsrs	r3, r3, #1
 8009e1c:	441a      	add	r2, r3
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e26:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d909      	bls.n	8009e42 <UART_SetConfig+0x416>
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e34:	d205      	bcs.n	8009e42 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60da      	str	r2, [r3, #12]
 8009e40:	e002      	b.n	8009e48 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2200      	movs	r2, #0
 8009e62:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3730      	adds	r7, #48	@ 0x30
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e72:	bf00      	nop
 8009e74:	08014c08 	.word	0x08014c08
 8009e78:	00f42400 	.word	0x00f42400

08009e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e88:	f003 0308 	and.w	r3, r3, #8
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00a      	beq.n	8009ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00a      	beq.n	8009eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eee:	f003 0304 	and.w	r3, r3, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f10:	f003 0310 	and.w	r3, r3, #16
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d01a      	beq.n	8009f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f7a:	d10a      	bne.n	8009f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	605a      	str	r2, [r3, #4]
  }
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b098      	sub	sp, #96	@ 0x60
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009fd0:	f7fa fd84 	bl	8004adc <HAL_GetTick>
 8009fd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0308 	and.w	r3, r3, #8
 8009fe0:	2b08      	cmp	r3, #8
 8009fe2:	d12f      	bne.n	800a044 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fe4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fec:	2200      	movs	r2, #0
 8009fee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f88e 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d022      	beq.n	800a044 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	e853 3f00 	ldrex	r3, [r3]
 800a00a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a00e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a012:	653b      	str	r3, [r7, #80]	@ 0x50
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a01c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a01e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a022:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a024:	e841 2300 	strex	r3, r2, [r1]
 800a028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1e6      	bne.n	8009ffe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2220      	movs	r2, #32
 800a034:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a040:	2303      	movs	r3, #3
 800a042:	e063      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0304 	and.w	r3, r3, #4
 800a04e:	2b04      	cmp	r3, #4
 800a050:	d149      	bne.n	800a0e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a052:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a05a:	2200      	movs	r2, #0
 800a05c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f857 	bl	800a114 <UART_WaitOnFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d03c      	beq.n	800a0e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	623b      	str	r3, [r7, #32]
   return(result);
 800a07a:	6a3b      	ldr	r3, [r7, #32]
 800a07c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a080:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	461a      	mov	r2, r3
 800a088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a08a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a08c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a08e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a092:	e841 2300 	strex	r3, r2, [r1]
 800a096:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1e6      	bne.n	800a06c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3308      	adds	r3, #8
 800a0a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	e853 3f00 	ldrex	r3, [r3]
 800a0ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f023 0301 	bic.w	r3, r3, #1
 800a0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	3308      	adds	r3, #8
 800a0bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0be:	61fa      	str	r2, [r7, #28]
 800a0c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	69b9      	ldr	r1, [r7, #24]
 800a0c4:	69fa      	ldr	r2, [r7, #28]
 800a0c6:	e841 2300 	strex	r3, r2, [r1]
 800a0ca:	617b      	str	r3, [r7, #20]
   return(result);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e5      	bne.n	800a09e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2220      	movs	r2, #32
 800a0d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e012      	b.n	800a10c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2220      	movs	r2, #32
 800a0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3758      	adds	r7, #88	@ 0x58
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	603b      	str	r3, [r7, #0]
 800a120:	4613      	mov	r3, r2
 800a122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a124:	e04f      	b.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a126:	69bb      	ldr	r3, [r7, #24]
 800a128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a12c:	d04b      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a12e:	f7fa fcd5 	bl	8004adc <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d302      	bcc.n	800a144 <UART_WaitOnFlagUntilTimeout+0x30>
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e04e      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d037      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b80      	cmp	r3, #128	@ 0x80
 800a15a:	d034      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b40      	cmp	r3, #64	@ 0x40
 800a160:	d031      	beq.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	f003 0308 	and.w	r3, r3, #8
 800a16c:	2b08      	cmp	r3, #8
 800a16e:	d110      	bne.n	800a192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2208      	movs	r2, #8
 800a176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 f838 	bl	800a1ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2208      	movs	r2, #8
 800a182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e029      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69db      	ldr	r3, [r3, #28]
 800a198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a19c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a1a0:	d111      	bne.n	800a1c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a1aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f81e 	bl	800a1ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2220      	movs	r2, #32
 800a1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a1c2:	2303      	movs	r3, #3
 800a1c4:	e00f      	b.n	800a1e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	69da      	ldr	r2, [r3, #28]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	68ba      	ldr	r2, [r7, #8]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	bf0c      	ite	eq
 800a1d6:	2301      	moveq	r3, #1
 800a1d8:	2300      	movne	r3, #0
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	79fb      	ldrb	r3, [r7, #7]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d0a0      	beq.n	800a126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b095      	sub	sp, #84	@ 0x54
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1fe:	e853 3f00 	ldrex	r3, [r3]
 800a202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a206:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a20a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	461a      	mov	r2, r3
 800a212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a214:	643b      	str	r3, [r7, #64]	@ 0x40
 800a216:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a21a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e6      	bne.n	800a1f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3308      	adds	r3, #8
 800a22e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	e853 3f00 	ldrex	r3, [r3]
 800a236:	61fb      	str	r3, [r7, #28]
   return(result);
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a23e:	f023 0301 	bic.w	r3, r3, #1
 800a242:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a24e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e3      	bne.n	800a228 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a264:	2b01      	cmp	r3, #1
 800a266:	d118      	bne.n	800a29a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	60bb      	str	r3, [r7, #8]
   return(result);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	f023 0310 	bic.w	r3, r3, #16
 800a27c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a286:	61bb      	str	r3, [r7, #24]
 800a288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6979      	ldr	r1, [r7, #20]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	613b      	str	r3, [r7, #16]
   return(result);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e6      	bne.n	800a268 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a2ae:	bf00      	nop
 800a2b0:	3754      	adds	r7, #84	@ 0x54
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d101      	bne.n	800a2d0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e027      	b.n	800a320 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2224      	movs	r2, #36	@ 0x24
 800a2dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f022 0201 	bic.w	r2, r2, #1
 800a2f6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a2fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2220      	movs	r2, #32
 800a312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d101      	bne.n	800a344 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a340:	2302      	movs	r3, #2
 800a342:	e02d      	b.n	800a3a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2224      	movs	r2, #36	@ 0x24
 800a350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0201 	bic.w	r2, r2, #1
 800a36a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f84f 	bl	800a424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2220      	movs	r2, #32
 800a392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e02d      	b.n	800a41c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2224      	movs	r2, #36	@ 0x24
 800a3cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f022 0201 	bic.w	r2, r2, #1
 800a3e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f811 	bl	800a424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a444:	e031      	b.n	800a4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a446:	2308      	movs	r3, #8
 800a448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a44a:	2308      	movs	r3, #8
 800a44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	0e5b      	lsrs	r3, r3, #25
 800a456:	b2db      	uxtb	r3, r3
 800a458:	f003 0307 	and.w	r3, r3, #7
 800a45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	0f5b      	lsrs	r3, r3, #29
 800a466:	b2db      	uxtb	r3, r3
 800a468:	f003 0307 	and.w	r3, r3, #7
 800a46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	7b3a      	ldrb	r2, [r7, #12]
 800a472:	4911      	ldr	r1, [pc, #68]	@ (800a4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a474:	5c8a      	ldrb	r2, [r1, r2]
 800a476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a47a:	7b3a      	ldrb	r2, [r7, #12]
 800a47c:	490f      	ldr	r1, [pc, #60]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x98>)
 800a47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a480:	fb93 f3f2 	sdiv	r3, r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	7b7a      	ldrb	r2, [r7, #13]
 800a490:	4909      	ldr	r1, [pc, #36]	@ (800a4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800a492:	5c8a      	ldrb	r2, [r1, r2]
 800a494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a498:	7b7a      	ldrb	r2, [r7, #13]
 800a49a:	4908      	ldr	r1, [pc, #32]	@ (800a4bc <UARTEx_SetNbDataToProcess+0x98>)
 800a49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a4aa:	bf00      	nop
 800a4ac:	3714      	adds	r7, #20
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	08014c20 	.word	0x08014c20
 800a4bc:	08014c28 	.word	0x08014c28

0800a4c0 <set_gpio_output>:
	while (__HAL_TIM_GET_COUNTER(&htim2) < target_time)
		;
}

// Configure GPIO as Output
void set_gpio_output(void) {
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800a4c6:	1d3b      	adds	r3, r7, #4
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	605a      	str	r2, [r3, #4]
 800a4ce:	609a      	str	r2, [r3, #8]
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = TMP1826_PIN;
 800a4d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4d8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800a4da:	2311      	movs	r3, #17
 800a4dc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TMP1826_PORT, &GPIO_InitStruct);
 800a4e2:	1d3b      	adds	r3, r7, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4803      	ldr	r0, [pc, #12]	@ (800a4f4 <set_gpio_output+0x34>)
 800a4e8:	f7fa fcb0 	bl	8004e4c <HAL_GPIO_Init>
}
 800a4ec:	bf00      	nop
 800a4ee:	3718      	adds	r7, #24
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	48000800 	.word	0x48000800

0800a4f8 <TMP1826_Init>:
	while (counter--)
		;
}

// Initialize TMP1826
void TMP1826_Init(void) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	af00      	add	r7, sp, #0
	set_gpio_output();
 800a4fc:	f7ff ffe0 	bl	800a4c0 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_SET);
 800a500:	2201      	movs	r2, #1
 800a502:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a506:	4804      	ldr	r0, [pc, #16]	@ (800a518 <TMP1826_Init+0x20>)
 800a508:	f7fa fe10 	bl	800512c <HAL_GPIO_WritePin>
	printf("TMP1826 Initialized on PC10\n");
 800a50c:	4803      	ldr	r0, [pc, #12]	@ (800a51c <TMP1826_Init+0x24>)
 800a50e:	f005 fbb9 	bl	800fc84 <puts>
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	48000800 	.word	0x48000800
 800a51c:	08013c6c 	.word	0x08013c6c

0800a520 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a524:	4907      	ldr	r1, [pc, #28]	@ (800a544 <MX_FATFS_Init+0x24>)
 800a526:	4808      	ldr	r0, [pc, #32]	@ (800a548 <MX_FATFS_Init+0x28>)
 800a528:	f003 fd42 	bl	800dfb0 <FATFS_LinkDriver>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a532:	f04f 33ff 	mov.w	r3, #4294967295
 800a536:	e003      	b.n	800a540 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a538:	4b04      	ldr	r3, [pc, #16]	@ (800a54c <MX_FATFS_Init+0x2c>)
 800a53a:	2201      	movs	r2, #1
 800a53c:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a53e:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a540:	4618      	mov	r0, r3
 800a542:	bd80      	pop	{r7, pc}
 800a544:	20000828 	.word	0x20000828
 800a548:	20000020 	.word	0x20000020
 800a54c:	2000082c 	.word	0x2000082c

0800a550 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a550:	b480      	push	{r7}
 800a552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a554:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a556:	4618      	mov	r0, r3
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
	return USER_SPI_initialize(pdrv);
 800a56a:	79fb      	ldrb	r3, [r7, #7]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f000 f9d1 	bl	800a914 <USER_SPI_initialize>
 800a572:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	4603      	mov	r3, r0
 800a584:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return USER_SPI_status(pdrv);
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 faaf 	bl	800aaec <USER_SPI_status>
 800a58e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a590:	4618      	mov	r0, r3
 800a592:	3708      	adds	r7, #8
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	607a      	str	r2, [r7, #4]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a5a8:	7bf8      	ldrb	r0, [r7, #15]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	687a      	ldr	r2, [r7, #4]
 800a5ae:	68b9      	ldr	r1, [r7, #8]
 800a5b0:	f000 fab2 	bl	800ab18 <USER_SPI_read>
 800a5b4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 800a5ce:	7bf8      	ldrb	r0, [r7, #15]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	68b9      	ldr	r1, [r7, #8]
 800a5d6:	f000 fb05 	bl	800abe4 <USER_SPI_write>
 800a5da:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	603a      	str	r2, [r7, #0]
 800a5ee:	71fb      	strb	r3, [r7, #7]
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 800a5f4:	79b9      	ldrb	r1, [r7, #6]
 800a5f6:	79fb      	ldrb	r3, [r7, #7]
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f000 fb6e 	bl	800acdc <USER_SPI_ioctl>
 800a600:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
	...

0800a60c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a614:	f7fa fa62 	bl	8004adc <HAL_GetTick>
 800a618:	4603      	mov	r3, r0
 800a61a:	4a04      	ldr	r2, [pc, #16]	@ (800a62c <SPI_Timer_On+0x20>)
 800a61c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800a61e:	4a04      	ldr	r2, [pc, #16]	@ (800a630 <SPI_Timer_On+0x24>)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6013      	str	r3, [r2, #0]
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20000830 	.word	0x20000830
 800a630:	20000834 	.word	0x20000834

0800a634 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a638:	f7fa fa50 	bl	8004adc <HAL_GetTick>
 800a63c:	4602      	mov	r2, r0
 800a63e:	4b06      	ldr	r3, [pc, #24]	@ (800a658 <SPI_Timer_Status+0x24>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	1ad2      	subs	r2, r2, r3
 800a644:	4b05      	ldr	r3, [pc, #20]	@ (800a65c <SPI_Timer_Status+0x28>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	429a      	cmp	r2, r3
 800a64a:	bf34      	ite	cc
 800a64c:	2301      	movcc	r3, #1
 800a64e:	2300      	movcs	r3, #0
 800a650:	b2db      	uxtb	r3, r3
}
 800a652:	4618      	mov	r0, r3
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	20000830 	.word	0x20000830
 800a65c:	20000834 	.word	0x20000834

0800a660 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b086      	sub	sp, #24
 800a664:	af02      	add	r7, sp, #8
 800a666:	4603      	mov	r3, r0
 800a668:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a66a:	f107 020f 	add.w	r2, r7, #15
 800a66e:	1df9      	adds	r1, r7, #7
 800a670:	2332      	movs	r3, #50	@ 0x32
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	2301      	movs	r3, #1
 800a676:	4804      	ldr	r0, [pc, #16]	@ (800a688 <xchg_spi+0x28>)
 800a678:	f7fe fb56 	bl	8008d28 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	20000304 	.word	0x20000304

0800a68c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800a68c:	b590      	push	{r4, r7, lr}
 800a68e:	b085      	sub	sp, #20
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e00a      	b.n	800a6b2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	18d4      	adds	r4, r2, r3
 800a6a2:	20ff      	movs	r0, #255	@ 0xff
 800a6a4:	f7ff ffdc 	bl	800a660 <xchg_spi>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	60fb      	str	r3, [r7, #12]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	429a      	cmp	r2, r3
 800a6b8:	d3f0      	bcc.n	800a69c <rcvr_spi_multi+0x10>
	}
}
 800a6ba:	bf00      	nop
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd90      	pop	{r4, r7, pc}

0800a6c4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a6d6:	6879      	ldr	r1, [r7, #4]
 800a6d8:	4803      	ldr	r0, [pc, #12]	@ (800a6e8 <xmit_spi_multi+0x24>)
 800a6da:	f7fe f9b0 	bl	8008a3e <HAL_SPI_Transmit>
}
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
 800a6e6:	bf00      	nop
 800a6e8:	20000304 	.word	0x20000304

0800a6ec <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800a6f4:	f7fa f9f2 	bl	8004adc <HAL_GetTick>
 800a6f8:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800a6fe:	20ff      	movs	r0, #255	@ 0xff
 800a700:	f7ff ffae 	bl	800a660 <xchg_spi>
 800a704:	4603      	mov	r3, r0
 800a706:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	2bff      	cmp	r3, #255	@ 0xff
 800a70c:	d007      	beq.n	800a71e <wait_ready+0x32>
 800a70e:	f7fa f9e5 	bl	8004adc <HAL_GetTick>
 800a712:	4602      	mov	r2, r0
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	693a      	ldr	r2, [r7, #16]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d8ef      	bhi.n	800a6fe <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800a71e:	7bfb      	ldrb	r3, [r7, #15]
 800a720:	2bff      	cmp	r3, #255	@ 0xff
 800a722:	bf0c      	ite	eq
 800a724:	2301      	moveq	r3, #1
 800a726:	2300      	movne	r3, #0
 800a728:	b2db      	uxtb	r3, r3
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800a736:	2201      	movs	r2, #1
 800a738:	2110      	movs	r1, #16
 800a73a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a73e:	f7fa fcf5 	bl	800512c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a742:	20ff      	movs	r0, #255	@ 0xff
 800a744:	f7ff ff8c 	bl	800a660 <xchg_spi>

}
 800a748:	bf00      	nop
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800a750:	2200      	movs	r2, #0
 800a752:	2110      	movs	r1, #16
 800a754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a758:	f7fa fce8 	bl	800512c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800a75c:	20ff      	movs	r0, #255	@ 0xff
 800a75e:	f7ff ff7f 	bl	800a660 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800a762:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a766:	f7ff ffc1 	bl	800a6ec <wait_ready>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d001      	beq.n	800a774 <spiselect+0x28>
 800a770:	2301      	movs	r3, #1
 800a772:	e002      	b.n	800a77a <spiselect+0x2e>

	despiselect();
 800a774:	f7ff ffdd 	bl	800a732 <despiselect>
	return 0;	/* Timeout */
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800a788:	20c8      	movs	r0, #200	@ 0xc8
 800a78a:	f7ff ff3f 	bl	800a60c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800a78e:	20ff      	movs	r0, #255	@ 0xff
 800a790:	f7ff ff66 	bl	800a660 <xchg_spi>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	2bff      	cmp	r3, #255	@ 0xff
 800a79c:	d104      	bne.n	800a7a8 <rcvr_datablock+0x2a>
 800a79e:	f7ff ff49 	bl	800a634 <SPI_Timer_Status>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1f2      	bne.n	800a78e <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800a7ac:	d001      	beq.n	800a7b2 <rcvr_datablock+0x34>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e00a      	b.n	800a7c8 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff ff69 	bl	800a68c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800a7ba:	20ff      	movs	r0, #255	@ 0xff
 800a7bc:	f7ff ff50 	bl	800a660 <xchg_spi>
 800a7c0:	20ff      	movs	r0, #255	@ 0xff
 800a7c2:	f7ff ff4d 	bl	800a660 <xchg_spi>

	return 1;						/* Function succeeded */
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	460b      	mov	r3, r1
 800a7da:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800a7dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a7e0:	f7ff ff84 	bl	800a6ec <wait_ready>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <xmit_datablock+0x1e>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e01e      	b.n	800a82c <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff ff35 	bl	800a660 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800a7f6:	78fb      	ldrb	r3, [r7, #3]
 800a7f8:	2bfd      	cmp	r3, #253	@ 0xfd
 800a7fa:	d016      	beq.n	800a82a <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800a7fc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f7ff ff5f 	bl	800a6c4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800a806:	20ff      	movs	r0, #255	@ 0xff
 800a808:	f7ff ff2a 	bl	800a660 <xchg_spi>
 800a80c:	20ff      	movs	r0, #255	@ 0xff
 800a80e:	f7ff ff27 	bl	800a660 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800a812:	20ff      	movs	r0, #255	@ 0xff
 800a814:	f7ff ff24 	bl	800a660 <xchg_spi>
 800a818:	4603      	mov	r3, r0
 800a81a:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	f003 031f 	and.w	r3, r3, #31
 800a822:	2b05      	cmp	r3, #5
 800a824:	d001      	beq.n	800a82a <xmit_datablock+0x5a>
 800a826:	2300      	movs	r3, #0
 800a828:	e000      	b.n	800a82c <xmit_datablock+0x5c>
	}
	return 1;
 800a82a:	2301      	movs	r3, #1
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	4603      	mov	r3, r0
 800a83c:	6039      	str	r1, [r7, #0]
 800a83e:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800a840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a844:	2b00      	cmp	r3, #0
 800a846:	da0e      	bge.n	800a866 <send_cmd+0x32>
		cmd &= 0x7F;
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a84e:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800a850:	2100      	movs	r1, #0
 800a852:	2037      	movs	r0, #55	@ 0x37
 800a854:	f7ff ffee 	bl	800a834 <send_cmd>
 800a858:	4603      	mov	r3, r0
 800a85a:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d901      	bls.n	800a866 <send_cmd+0x32>
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	e051      	b.n	800a90a <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800a866:	79fb      	ldrb	r3, [r7, #7]
 800a868:	2b0c      	cmp	r3, #12
 800a86a:	d008      	beq.n	800a87e <send_cmd+0x4a>
		despiselect();
 800a86c:	f7ff ff61 	bl	800a732 <despiselect>
		if (!spiselect()) return 0xFF;
 800a870:	f7ff ff6c 	bl	800a74c <spiselect>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d101      	bne.n	800a87e <send_cmd+0x4a>
 800a87a:	23ff      	movs	r3, #255	@ 0xff
 800a87c:	e045      	b.n	800a90a <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800a87e:	79fb      	ldrb	r3, [r7, #7]
 800a880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a884:	b2db      	uxtb	r3, r3
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff feea 	bl	800a660 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	0e1b      	lsrs	r3, r3, #24
 800a890:	b2db      	uxtb	r3, r3
 800a892:	4618      	mov	r0, r3
 800a894:	f7ff fee4 	bl	800a660 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	0c1b      	lsrs	r3, r3, #16
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff fede 	bl	800a660 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	0a1b      	lsrs	r3, r3, #8
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fed8 	bl	800a660 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff fed3 	bl	800a660 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d101      	bne.n	800a8c8 <send_cmd+0x94>
 800a8c4:	2395      	movs	r3, #149	@ 0x95
 800a8c6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800a8c8:	79fb      	ldrb	r3, [r7, #7]
 800a8ca:	2b08      	cmp	r3, #8
 800a8cc:	d101      	bne.n	800a8d2 <send_cmd+0x9e>
 800a8ce:	2387      	movs	r3, #135	@ 0x87
 800a8d0:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff fec3 	bl	800a660 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800a8da:	79fb      	ldrb	r3, [r7, #7]
 800a8dc:	2b0c      	cmp	r3, #12
 800a8de:	d102      	bne.n	800a8e6 <send_cmd+0xb2>
 800a8e0:	20ff      	movs	r0, #255	@ 0xff
 800a8e2:	f7ff febd 	bl	800a660 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800a8e6:	230a      	movs	r3, #10
 800a8e8:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800a8ea:	20ff      	movs	r0, #255	@ 0xff
 800a8ec:	f7ff feb8 	bl	800a660 <xchg_spi>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800a8f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	da05      	bge.n	800a908 <send_cmd+0xd4>
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	73fb      	strb	r3, [r7, #15]
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f0      	bne.n	800a8ea <send_cmd+0xb6>

	return res;							/* Return received response */
 800a908:	7bbb      	ldrb	r3, [r7, #14]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
	...

0800a914 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b085      	sub	sp, #20
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a91e:	79fb      	ldrb	r3, [r7, #7]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <USER_SPI_initialize+0x14>
 800a924:	2301      	movs	r3, #1
 800a926:	e0d6      	b.n	800aad6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a928:	4b6d      	ldr	r3, [pc, #436]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0302 	and.w	r3, r3, #2
 800a932:	2b00      	cmp	r3, #0
 800a934:	d003      	beq.n	800a93e <USER_SPI_initialize+0x2a>
 800a936:	4b6a      	ldr	r3, [pc, #424]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	e0cb      	b.n	800aad6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800a93e:	4b69      	ldr	r3, [pc, #420]	@ (800aae4 <USER_SPI_initialize+0x1d0>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800a948:	4b66      	ldr	r3, [pc, #408]	@ (800aae4 <USER_SPI_initialize+0x1d0>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800a950:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a952:	230a      	movs	r3, #10
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	e005      	b.n	800a964 <USER_SPI_initialize+0x50>
 800a958:	20ff      	movs	r0, #255	@ 0xff
 800a95a:	f7ff fe81 	bl	800a660 <xchg_spi>
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	3b01      	subs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]
 800a964:	7bfb      	ldrb	r3, [r7, #15]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1f6      	bne.n	800a958 <USER_SPI_initialize+0x44>

	ty = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a96e:	2100      	movs	r1, #0
 800a970:	2000      	movs	r0, #0
 800a972:	f7ff ff5f 	bl	800a834 <send_cmd>
 800a976:	4603      	mov	r3, r0
 800a978:	2b01      	cmp	r3, #1
 800a97a:	f040 808b 	bne.w	800aa94 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a97e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a982:	f7ff fe43 	bl	800a60c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a986:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a98a:	2008      	movs	r0, #8
 800a98c:	f7ff ff52 	bl	800a834 <send_cmd>
 800a990:	4603      	mov	r3, r0
 800a992:	2b01      	cmp	r3, #1
 800a994:	d151      	bne.n	800aa3a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a996:	2300      	movs	r3, #0
 800a998:	73fb      	strb	r3, [r7, #15]
 800a99a:	e00d      	b.n	800a9b8 <USER_SPI_initialize+0xa4>
 800a99c:	7bfc      	ldrb	r4, [r7, #15]
 800a99e:	20ff      	movs	r0, #255	@ 0xff
 800a9a0:	f7ff fe5e 	bl	800a660 <xchg_spi>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f104 0310 	add.w	r3, r4, #16
 800a9ac:	443b      	add	r3, r7
 800a9ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	73fb      	strb	r3, [r7, #15]
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	2b03      	cmp	r3, #3
 800a9bc:	d9ee      	bls.n	800a99c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a9be:	7abb      	ldrb	r3, [r7, #10]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d167      	bne.n	800aa94 <USER_SPI_initialize+0x180>
 800a9c4:	7afb      	ldrb	r3, [r7, #11]
 800a9c6:	2baa      	cmp	r3, #170	@ 0xaa
 800a9c8:	d164      	bne.n	800aa94 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a9ca:	bf00      	nop
 800a9cc:	f7ff fe32 	bl	800a634 <SPI_Timer_Status>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d007      	beq.n	800a9e6 <USER_SPI_initialize+0xd2>
 800a9d6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a9da:	20a9      	movs	r0, #169	@ 0xa9
 800a9dc:	f7ff ff2a 	bl	800a834 <send_cmd>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d1f2      	bne.n	800a9cc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a9e6:	f7ff fe25 	bl	800a634 <SPI_Timer_Status>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d051      	beq.n	800aa94 <USER_SPI_initialize+0x180>
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	203a      	movs	r0, #58	@ 0x3a
 800a9f4:	f7ff ff1e 	bl	800a834 <send_cmd>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d14a      	bne.n	800aa94 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]
 800aa02:	e00d      	b.n	800aa20 <USER_SPI_initialize+0x10c>
 800aa04:	7bfc      	ldrb	r4, [r7, #15]
 800aa06:	20ff      	movs	r0, #255	@ 0xff
 800aa08:	f7ff fe2a 	bl	800a660 <xchg_spi>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f104 0310 	add.w	r3, r4, #16
 800aa14:	443b      	add	r3, r7
 800aa16:	f803 2c08 	strb.w	r2, [r3, #-8]
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	73fb      	strb	r3, [r7, #15]
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	d9ee      	bls.n	800aa04 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800aa26:	7a3b      	ldrb	r3, [r7, #8]
 800aa28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d001      	beq.n	800aa34 <USER_SPI_initialize+0x120>
 800aa30:	230c      	movs	r3, #12
 800aa32:	e000      	b.n	800aa36 <USER_SPI_initialize+0x122>
 800aa34:	2304      	movs	r3, #4
 800aa36:	737b      	strb	r3, [r7, #13]
 800aa38:	e02c      	b.n	800aa94 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	20a9      	movs	r0, #169	@ 0xa9
 800aa3e:	f7ff fef9 	bl	800a834 <send_cmd>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d804      	bhi.n	800aa52 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800aa48:	2302      	movs	r3, #2
 800aa4a:	737b      	strb	r3, [r7, #13]
 800aa4c:	23a9      	movs	r3, #169	@ 0xa9
 800aa4e:	73bb      	strb	r3, [r7, #14]
 800aa50:	e003      	b.n	800aa5a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800aa52:	2301      	movs	r3, #1
 800aa54:	737b      	strb	r3, [r7, #13]
 800aa56:	2301      	movs	r3, #1
 800aa58:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800aa5a:	bf00      	nop
 800aa5c:	f7ff fdea 	bl	800a634 <SPI_Timer_Status>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <USER_SPI_initialize+0x162>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2100      	movs	r1, #0
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7ff fee2 	bl	800a834 <send_cmd>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d1f2      	bne.n	800aa5c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800aa76:	f7ff fddd 	bl	800a634 <SPI_Timer_Status>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d007      	beq.n	800aa90 <USER_SPI_initialize+0x17c>
 800aa80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aa84:	2010      	movs	r0, #16
 800aa86:	f7ff fed5 	bl	800a834 <send_cmd>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d001      	beq.n	800aa94 <USER_SPI_initialize+0x180>
				ty = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800aa94:	4a14      	ldr	r2, [pc, #80]	@ (800aae8 <USER_SPI_initialize+0x1d4>)
 800aa96:	7b7b      	ldrb	r3, [r7, #13]
 800aa98:	7013      	strb	r3, [r2, #0]
	despiselect();
 800aa9a:	f7ff fe4a 	bl	800a732 <despiselect>

	if (ty) {			/* OK */
 800aa9e:	7b7b      	ldrb	r3, [r7, #13]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d012      	beq.n	800aaca <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800aaa4:	4b0f      	ldr	r3, [pc, #60]	@ (800aae4 <USER_SPI_initialize+0x1d0>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800aaae:	4b0d      	ldr	r3, [pc, #52]	@ (800aae4 <USER_SPI_initialize+0x1d0>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f042 0210 	orr.w	r2, r2, #16
 800aab6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800aab8:	4b09      	ldr	r3, [pc, #36]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f023 0301 	bic.w	r3, r3, #1
 800aac2:	b2da      	uxtb	r2, r3
 800aac4:	4b06      	ldr	r3, [pc, #24]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800aac6:	701a      	strb	r2, [r3, #0]
 800aac8:	e002      	b.n	800aad0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800aaca:	4b05      	ldr	r3, [pc, #20]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800aacc:	2201      	movs	r2, #1
 800aace:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800aad0:	4b03      	ldr	r3, [pc, #12]	@ (800aae0 <USER_SPI_initialize+0x1cc>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	b2db      	uxtb	r3, r3
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd90      	pop	{r4, r7, pc}
 800aade:	bf00      	nop
 800aae0:	20000034 	.word	0x20000034
 800aae4:	20000304 	.word	0x20000304
 800aae8:	2000082d 	.word	0x2000082d

0800aaec <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d001      	beq.n	800ab00 <USER_SPI_status+0x14>
 800aafc:	2301      	movs	r3, #1
 800aafe:	e002      	b.n	800ab06 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800ab00:	4b04      	ldr	r3, [pc, #16]	@ (800ab14 <USER_SPI_status+0x28>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	b2db      	uxtb	r3, r3
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr
 800ab12:	bf00      	nop
 800ab14:	20000034 	.word	0x20000034

0800ab18 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60b9      	str	r1, [r7, #8]
 800ab20:	607a      	str	r2, [r7, #4]
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	4603      	mov	r3, r0
 800ab26:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <USER_SPI_read+0x1c>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d101      	bne.n	800ab38 <USER_SPI_read+0x20>
 800ab34:	2304      	movs	r3, #4
 800ab36:	e04d      	b.n	800abd4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ab38:	4b28      	ldr	r3, [pc, #160]	@ (800abdc <USER_SPI_read+0xc4>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <USER_SPI_read+0x32>
 800ab46:	2303      	movs	r3, #3
 800ab48:	e044      	b.n	800abd4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ab4a:	4b25      	ldr	r3, [pc, #148]	@ (800abe0 <USER_SPI_read+0xc8>)
 800ab4c:	781b      	ldrb	r3, [r3, #0]
 800ab4e:	f003 0308 	and.w	r3, r3, #8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d102      	bne.n	800ab5c <USER_SPI_read+0x44>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	025b      	lsls	r3, r3, #9
 800ab5a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d111      	bne.n	800ab86 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	2011      	movs	r0, #17
 800ab66:	f7ff fe65 	bl	800a834 <send_cmd>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d129      	bne.n	800abc4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ab70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab74:	68b8      	ldr	r0, [r7, #8]
 800ab76:	f7ff fe02 	bl	800a77e <rcvr_datablock>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d021      	beq.n	800abc4 <USER_SPI_read+0xac>
			count = 0;
 800ab80:	2300      	movs	r3, #0
 800ab82:	603b      	str	r3, [r7, #0]
 800ab84:	e01e      	b.n	800abc4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	2012      	movs	r0, #18
 800ab8a:	f7ff fe53 	bl	800a834 <send_cmd>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d117      	bne.n	800abc4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ab94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ab98:	68b8      	ldr	r0, [r7, #8]
 800ab9a:	f7ff fdf0 	bl	800a77e <rcvr_datablock>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00a      	beq.n	800abba <USER_SPI_read+0xa2>
				buff += 512;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800abaa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	3b01      	subs	r3, #1
 800abb0:	603b      	str	r3, [r7, #0]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1ed      	bne.n	800ab94 <USER_SPI_read+0x7c>
 800abb8:	e000      	b.n	800abbc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800abba:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800abbc:	2100      	movs	r1, #0
 800abbe:	200c      	movs	r0, #12
 800abc0:	f7ff fe38 	bl	800a834 <send_cmd>
		}
	}
	despiselect();
 800abc4:	f7ff fdb5 	bl	800a732 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	bf14      	ite	ne
 800abce:	2301      	movne	r3, #1
 800abd0:	2300      	moveq	r3, #0
 800abd2:	b2db      	uxtb	r3, r3
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	20000034 	.word	0x20000034
 800abe0:	2000082d 	.word	0x2000082d

0800abe4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60b9      	str	r1, [r7, #8]
 800abec:	607a      	str	r2, [r7, #4]
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d102      	bne.n	800ac00 <USER_SPI_write+0x1c>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d101      	bne.n	800ac04 <USER_SPI_write+0x20>
 800ac00:	2304      	movs	r3, #4
 800ac02:	e063      	b.n	800accc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ac04:	4b33      	ldr	r3, [pc, #204]	@ (800acd4 <USER_SPI_write+0xf0>)
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <USER_SPI_write+0x32>
 800ac12:	2303      	movs	r3, #3
 800ac14:	e05a      	b.n	800accc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800ac16:	4b2f      	ldr	r3, [pc, #188]	@ (800acd4 <USER_SPI_write+0xf0>)
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d001      	beq.n	800ac28 <USER_SPI_write+0x44>
 800ac24:	2302      	movs	r3, #2
 800ac26:	e051      	b.n	800accc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800ac28:	4b2b      	ldr	r3, [pc, #172]	@ (800acd8 <USER_SPI_write+0xf4>)
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 0308 	and.w	r3, r3, #8
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d102      	bne.n	800ac3a <USER_SPI_write+0x56>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	025b      	lsls	r3, r3, #9
 800ac38:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d110      	bne.n	800ac62 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800ac40:	6879      	ldr	r1, [r7, #4]
 800ac42:	2018      	movs	r0, #24
 800ac44:	f7ff fdf6 	bl	800a834 <send_cmd>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d136      	bne.n	800acbc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800ac4e:	21fe      	movs	r1, #254	@ 0xfe
 800ac50:	68b8      	ldr	r0, [r7, #8]
 800ac52:	f7ff fdbd 	bl	800a7d0 <xmit_datablock>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02f      	beq.n	800acbc <USER_SPI_write+0xd8>
			count = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	603b      	str	r3, [r7, #0]
 800ac60:	e02c      	b.n	800acbc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800ac62:	4b1d      	ldr	r3, [pc, #116]	@ (800acd8 <USER_SPI_write+0xf4>)
 800ac64:	781b      	ldrb	r3, [r3, #0]
 800ac66:	f003 0306 	and.w	r3, r3, #6
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <USER_SPI_write+0x92>
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	2097      	movs	r0, #151	@ 0x97
 800ac72:	f7ff fddf 	bl	800a834 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	2019      	movs	r0, #25
 800ac7a:	f7ff fddb 	bl	800a834 <send_cmd>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d11b      	bne.n	800acbc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800ac84:	21fc      	movs	r1, #252	@ 0xfc
 800ac86:	68b8      	ldr	r0, [r7, #8]
 800ac88:	f7ff fda2 	bl	800a7d0 <xmit_datablock>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00a      	beq.n	800aca8 <USER_SPI_write+0xc4>
				buff += 512;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ac98:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	3b01      	subs	r3, #1
 800ac9e:	603b      	str	r3, [r7, #0]
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1ee      	bne.n	800ac84 <USER_SPI_write+0xa0>
 800aca6:	e000      	b.n	800acaa <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800aca8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800acaa:	21fd      	movs	r1, #253	@ 0xfd
 800acac:	2000      	movs	r0, #0
 800acae:	f7ff fd8f 	bl	800a7d0 <xmit_datablock>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d101      	bne.n	800acbc <USER_SPI_write+0xd8>
 800acb8:	2301      	movs	r3, #1
 800acba:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800acbc:	f7ff fd39 	bl	800a732 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	bf14      	ite	ne
 800acc6:	2301      	movne	r3, #1
 800acc8:	2300      	moveq	r3, #0
 800acca:	b2db      	uxtb	r3, r3
}
 800accc:	4618      	mov	r0, r3
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000034 	.word	0x20000034
 800acd8:	2000082d 	.word	0x2000082d

0800acdc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08c      	sub	sp, #48	@ 0x30
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	603a      	str	r2, [r7, #0]
 800ace6:	71fb      	strb	r3, [r7, #7]
 800ace8:	460b      	mov	r3, r1
 800acea:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d001      	beq.n	800acf6 <USER_SPI_ioctl+0x1a>
 800acf2:	2304      	movs	r3, #4
 800acf4:	e15a      	b.n	800afac <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800acf6:	4baf      	ldr	r3, [pc, #700]	@ (800afb4 <USER_SPI_ioctl+0x2d8>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	b2db      	uxtb	r3, r3
 800acfc:	f003 0301 	and.w	r3, r3, #1
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <USER_SPI_ioctl+0x2c>
 800ad04:	2303      	movs	r3, #3
 800ad06:	e151      	b.n	800afac <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800ad0e:	79bb      	ldrb	r3, [r7, #6]
 800ad10:	2b04      	cmp	r3, #4
 800ad12:	f200 8136 	bhi.w	800af82 <USER_SPI_ioctl+0x2a6>
 800ad16:	a201      	add	r2, pc, #4	@ (adr r2, 800ad1c <USER_SPI_ioctl+0x40>)
 800ad18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad1c:	0800ad31 	.word	0x0800ad31
 800ad20:	0800ad45 	.word	0x0800ad45
 800ad24:	0800af83 	.word	0x0800af83
 800ad28:	0800adf1 	.word	0x0800adf1
 800ad2c:	0800aee7 	.word	0x0800aee7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800ad30:	f7ff fd0c 	bl	800a74c <spiselect>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f000 8127 	beq.w	800af8a <USER_SPI_ioctl+0x2ae>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800ad42:	e122      	b.n	800af8a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ad44:	2100      	movs	r1, #0
 800ad46:	2009      	movs	r0, #9
 800ad48:	f7ff fd74 	bl	800a834 <send_cmd>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	f040 811d 	bne.w	800af8e <USER_SPI_ioctl+0x2b2>
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	2110      	movs	r1, #16
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fd0f 	bl	800a77e <rcvr_datablock>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f000 8113 	beq.w	800af8e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800ad68:	7b3b      	ldrb	r3, [r7, #12]
 800ad6a:	099b      	lsrs	r3, r3, #6
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d111      	bne.n	800ad96 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ad72:	7d7b      	ldrb	r3, [r7, #21]
 800ad74:	461a      	mov	r2, r3
 800ad76:	7d3b      	ldrb	r3, [r7, #20]
 800ad78:	021b      	lsls	r3, r3, #8
 800ad7a:	4413      	add	r3, r2
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	7cfb      	ldrb	r3, [r7, #19]
 800ad80:	041b      	lsls	r3, r3, #16
 800ad82:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800ad86:	4413      	add	r3, r2
 800ad88:	3301      	adds	r3, #1
 800ad8a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	029a      	lsls	r2, r3, #10
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	e028      	b.n	800ade8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ad96:	7c7b      	ldrb	r3, [r7, #17]
 800ad98:	f003 030f 	and.w	r3, r3, #15
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	7dbb      	ldrb	r3, [r7, #22]
 800ada0:	09db      	lsrs	r3, r3, #7
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	4413      	add	r3, r2
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	7d7b      	ldrb	r3, [r7, #21]
 800adaa:	005b      	lsls	r3, r3, #1
 800adac:	b2db      	uxtb	r3, r3
 800adae:	f003 0306 	and.w	r3, r3, #6
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	4413      	add	r3, r2
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	3302      	adds	r3, #2
 800adba:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800adbe:	7d3b      	ldrb	r3, [r7, #20]
 800adc0:	099b      	lsrs	r3, r3, #6
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	461a      	mov	r2, r3
 800adc6:	7cfb      	ldrb	r3, [r7, #19]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	441a      	add	r2, r3
 800adcc:	7cbb      	ldrb	r3, [r7, #18]
 800adce:	029b      	lsls	r3, r3, #10
 800add0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800add4:	4413      	add	r3, r2
 800add6:	3301      	adds	r3, #1
 800add8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800adda:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800adde:	3b09      	subs	r3, #9
 800ade0:	69fa      	ldr	r2, [r7, #28]
 800ade2:	409a      	lsls	r2, r3
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800ade8:	2300      	movs	r3, #0
 800adea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800adee:	e0ce      	b.n	800af8e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800adf0:	4b71      	ldr	r3, [pc, #452]	@ (800afb8 <USER_SPI_ioctl+0x2dc>)
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d031      	beq.n	800ae60 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800adfc:	2100      	movs	r1, #0
 800adfe:	208d      	movs	r0, #141	@ 0x8d
 800ae00:	f7ff fd18 	bl	800a834 <send_cmd>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f040 80c3 	bne.w	800af92 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800ae0c:	20ff      	movs	r0, #255	@ 0xff
 800ae0e:	f7ff fc27 	bl	800a660 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ae12:	f107 030c 	add.w	r3, r7, #12
 800ae16:	2110      	movs	r1, #16
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fcb0 	bl	800a77e <rcvr_datablock>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f000 80b6 	beq.w	800af92 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ae26:	2330      	movs	r3, #48	@ 0x30
 800ae28:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800ae2c:	e007      	b.n	800ae3e <USER_SPI_ioctl+0x162>
 800ae2e:	20ff      	movs	r0, #255	@ 0xff
 800ae30:	f7ff fc16 	bl	800a660 <xchg_spi>
 800ae34:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800ae3e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f3      	bne.n	800ae2e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800ae46:	7dbb      	ldrb	r3, [r7, #22]
 800ae48:	091b      	lsrs	r3, r3, #4
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	2310      	movs	r3, #16
 800ae50:	fa03 f202 	lsl.w	r2, r3, r2
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800ae5e:	e098      	b.n	800af92 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800ae60:	2100      	movs	r1, #0
 800ae62:	2009      	movs	r0, #9
 800ae64:	f7ff fce6 	bl	800a834 <send_cmd>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f040 8091 	bne.w	800af92 <USER_SPI_ioctl+0x2b6>
 800ae70:	f107 030c 	add.w	r3, r7, #12
 800ae74:	2110      	movs	r1, #16
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff fc81 	bl	800a77e <rcvr_datablock>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 8087 	beq.w	800af92 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ae84:	4b4c      	ldr	r3, [pc, #304]	@ (800afb8 <USER_SPI_ioctl+0x2dc>)
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d012      	beq.n	800aeb6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ae90:	7dbb      	ldrb	r3, [r7, #22]
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800ae98:	7dfa      	ldrb	r2, [r7, #23]
 800ae9a:	09d2      	lsrs	r2, r2, #7
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	4413      	add	r3, r2
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	7e7b      	ldrb	r3, [r7, #25]
 800aea4:	099b      	lsrs	r3, r3, #6
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	fa02 f303 	lsl.w	r3, r2, r3
 800aeae:	461a      	mov	r2, r3
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	601a      	str	r2, [r3, #0]
 800aeb4:	e013      	b.n	800aede <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800aeb6:	7dbb      	ldrb	r3, [r7, #22]
 800aeb8:	109b      	asrs	r3, r3, #2
 800aeba:	b29b      	uxth	r3, r3
 800aebc:	f003 031f 	and.w	r3, r3, #31
 800aec0:	3301      	adds	r3, #1
 800aec2:	7dfa      	ldrb	r2, [r7, #23]
 800aec4:	00d2      	lsls	r2, r2, #3
 800aec6:	f002 0218 	and.w	r2, r2, #24
 800aeca:	7df9      	ldrb	r1, [r7, #23]
 800aecc:	0949      	lsrs	r1, r1, #5
 800aece:	b2c9      	uxtb	r1, r1
 800aed0:	440a      	add	r2, r1
 800aed2:	3201      	adds	r2, #1
 800aed4:	fb02 f303 	mul.w	r3, r2, r3
 800aed8:	461a      	mov	r2, r3
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800aee4:	e055      	b.n	800af92 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800aee6:	4b34      	ldr	r3, [pc, #208]	@ (800afb8 <USER_SPI_ioctl+0x2dc>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0306 	and.w	r3, r3, #6
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d051      	beq.n	800af96 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800aef2:	f107 020c 	add.w	r2, r7, #12
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	210b      	movs	r1, #11
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff feee 	bl	800acdc <USER_SPI_ioctl>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d149      	bne.n	800af9a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800af06:	7b3b      	ldrb	r3, [r7, #12]
 800af08:	099b      	lsrs	r3, r3, #6
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d104      	bne.n	800af1a <USER_SPI_ioctl+0x23e>
 800af10:	7dbb      	ldrb	r3, [r7, #22]
 800af12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af16:	2b00      	cmp	r3, #0
 800af18:	d041      	beq.n	800af9e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	623b      	str	r3, [r7, #32]
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af24:	6a3b      	ldr	r3, [r7, #32]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800af2a:	4b23      	ldr	r3, [pc, #140]	@ (800afb8 <USER_SPI_ioctl+0x2dc>)
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d105      	bne.n	800af42 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800af36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af38:	025b      	lsls	r3, r3, #9
 800af3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	025b      	lsls	r3, r3, #9
 800af40:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800af42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af44:	2020      	movs	r0, #32
 800af46:	f7ff fc75 	bl	800a834 <send_cmd>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d128      	bne.n	800afa2 <USER_SPI_ioctl+0x2c6>
 800af50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800af52:	2021      	movs	r0, #33	@ 0x21
 800af54:	f7ff fc6e 	bl	800a834 <send_cmd>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d121      	bne.n	800afa2 <USER_SPI_ioctl+0x2c6>
 800af5e:	2100      	movs	r1, #0
 800af60:	2026      	movs	r0, #38	@ 0x26
 800af62:	f7ff fc67 	bl	800a834 <send_cmd>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d11a      	bne.n	800afa2 <USER_SPI_ioctl+0x2c6>
 800af6c:	f247 5030 	movw	r0, #30000	@ 0x7530
 800af70:	f7ff fbbc 	bl	800a6ec <wait_ready>
 800af74:	4603      	mov	r3, r0
 800af76:	2b00      	cmp	r3, #0
 800af78:	d013      	beq.n	800afa2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800af7a:	2300      	movs	r3, #0
 800af7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800af80:	e00f      	b.n	800afa2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800af82:	2304      	movs	r3, #4
 800af84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800af88:	e00c      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		break;
 800af8a:	bf00      	nop
 800af8c:	e00a      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		break;
 800af8e:	bf00      	nop
 800af90:	e008      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		break;
 800af92:	bf00      	nop
 800af94:	e006      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800af96:	bf00      	nop
 800af98:	e004      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800af9a:	bf00      	nop
 800af9c:	e002      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800af9e:	bf00      	nop
 800afa0:	e000      	b.n	800afa4 <USER_SPI_ioctl+0x2c8>
		break;
 800afa2:	bf00      	nop
	}

	despiselect();
 800afa4:	f7ff fbc5 	bl	800a732 <despiselect>

	return res;
 800afa8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800afac:	4618      	mov	r0, r3
 800afae:	3730      	adds	r7, #48	@ 0x30
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000034 	.word	0x20000034
 800afb8:	2000082d 	.word	0x2000082d

0800afbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800afc6:	79fb      	ldrb	r3, [r7, #7]
 800afc8:	4a08      	ldr	r2, [pc, #32]	@ (800afec <disk_status+0x30>)
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	4413      	add	r3, r2
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	79fa      	ldrb	r2, [r7, #7]
 800afd4:	4905      	ldr	r1, [pc, #20]	@ (800afec <disk_status+0x30>)
 800afd6:	440a      	add	r2, r1
 800afd8:	7a12      	ldrb	r2, [r2, #8]
 800afda:	4610      	mov	r0, r2
 800afdc:	4798      	blx	r3
 800afde:	4603      	mov	r3, r0
 800afe0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20000860 	.word	0x20000860

0800aff0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	4a0e      	ldr	r2, [pc, #56]	@ (800b03c <disk_initialize+0x4c>)
 800b002:	5cd3      	ldrb	r3, [r2, r3]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d114      	bne.n	800b032 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	4a0c      	ldr	r2, [pc, #48]	@ (800b03c <disk_initialize+0x4c>)
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	79fa      	ldrb	r2, [r7, #7]
 800b016:	4909      	ldr	r1, [pc, #36]	@ (800b03c <disk_initialize+0x4c>)
 800b018:	440a      	add	r2, r1
 800b01a:	7a12      	ldrb	r2, [r2, #8]
 800b01c:	4610      	mov	r0, r2
 800b01e:	4798      	blx	r3
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b024:	7bfb      	ldrb	r3, [r7, #15]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d103      	bne.n	800b032 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b02a:	79fb      	ldrb	r3, [r7, #7]
 800b02c:	4a03      	ldr	r2, [pc, #12]	@ (800b03c <disk_initialize+0x4c>)
 800b02e:	2101      	movs	r1, #1
 800b030:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b032:	7bfb      	ldrb	r3, [r7, #15]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	20000860 	.word	0x20000860

0800b040 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b040:	b590      	push	{r4, r7, lr}
 800b042:	b087      	sub	sp, #28
 800b044:	af00      	add	r7, sp, #0
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	607a      	str	r2, [r7, #4]
 800b04a:	603b      	str	r3, [r7, #0]
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	4a0a      	ldr	r2, [pc, #40]	@ (800b07c <disk_read+0x3c>)
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	689c      	ldr	r4, [r3, #8]
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	4a07      	ldr	r2, [pc, #28]	@ (800b07c <disk_read+0x3c>)
 800b060:	4413      	add	r3, r2
 800b062:	7a18      	ldrb	r0, [r3, #8]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	68b9      	ldr	r1, [r7, #8]
 800b06a:	47a0      	blx	r4
 800b06c:	4603      	mov	r3, r0
 800b06e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
}
 800b072:	4618      	mov	r0, r3
 800b074:	371c      	adds	r7, #28
 800b076:	46bd      	mov	sp, r7
 800b078:	bd90      	pop	{r4, r7, pc}
 800b07a:	bf00      	nop
 800b07c:	20000860 	.word	0x20000860

0800b080 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b080:	b590      	push	{r4, r7, lr}
 800b082:	b087      	sub	sp, #28
 800b084:	af00      	add	r7, sp, #0
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	607a      	str	r2, [r7, #4]
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b090:	7bfb      	ldrb	r3, [r7, #15]
 800b092:	4a0a      	ldr	r2, [pc, #40]	@ (800b0bc <disk_write+0x3c>)
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	68dc      	ldr	r4, [r3, #12]
 800b09c:	7bfb      	ldrb	r3, [r7, #15]
 800b09e:	4a07      	ldr	r2, [pc, #28]	@ (800b0bc <disk_write+0x3c>)
 800b0a0:	4413      	add	r3, r2
 800b0a2:	7a18      	ldrb	r0, [r3, #8]
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	47a0      	blx	r4
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	371c      	adds	r7, #28
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000860 	.word	0x20000860

0800b0c0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	603a      	str	r2, [r7, #0]
 800b0ca:	71fb      	strb	r3, [r7, #7]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	4a09      	ldr	r2, [pc, #36]	@ (800b0f8 <disk_ioctl+0x38>)
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	79fa      	ldrb	r2, [r7, #7]
 800b0de:	4906      	ldr	r1, [pc, #24]	@ (800b0f8 <disk_ioctl+0x38>)
 800b0e0:	440a      	add	r2, r1
 800b0e2:	7a10      	ldrb	r0, [r2, #8]
 800b0e4:	79b9      	ldrb	r1, [r7, #6]
 800b0e6:	683a      	ldr	r2, [r7, #0]
 800b0e8:	4798      	blx	r3
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	20000860 	.word	0x20000860

0800b0fc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3301      	adds	r3, #1
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b10c:	89fb      	ldrh	r3, [r7, #14]
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	b21a      	sxth	r2, r3
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	b21b      	sxth	r3, r3
 800b118:	4313      	orrs	r3, r2
 800b11a:	b21b      	sxth	r3, r3
 800b11c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b11e:	89fb      	ldrh	r3, [r7, #14]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	3303      	adds	r3, #3
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	3202      	adds	r2, #2
 800b144:	7812      	ldrb	r2, [r2, #0]
 800b146:	4313      	orrs	r3, r2
 800b148:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	021b      	lsls	r3, r3, #8
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	3201      	adds	r2, #1
 800b152:	7812      	ldrb	r2, [r2, #0]
 800b154:	4313      	orrs	r3, r2
 800b156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7812      	ldrb	r2, [r2, #0]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]
	return rv;
 800b164:	68fb      	ldr	r3, [r7, #12]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3714      	adds	r7, #20
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr

0800b172 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b172:	b480      	push	{r7}
 800b174:	b083      	sub	sp, #12
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	460b      	mov	r3, r1
 800b17c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	887a      	ldrh	r2, [r7, #2]
 800b186:	b2d2      	uxtb	r2, r2
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	887b      	ldrh	r3, [r7, #2]
 800b18c:	0a1b      	lsrs	r3, r3, #8
 800b18e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	887a      	ldrh	r2, [r7, #2]
 800b198:	b2d2      	uxtb	r2, r2
 800b19a:	701a      	strb	r2, [r3, #0]
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	1c5a      	adds	r2, r3, #1
 800b1b6:	607a      	str	r2, [r7, #4]
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	0a1b      	lsrs	r3, r3, #8
 800b1c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	b2d2      	uxtb	r2, r2
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	b2d2      	uxtb	r2, r2
 800b1f2:	701a      	strb	r2, [r3, #0]
}
 800b1f4:	bf00      	nop
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b200:	b480      	push	{r7}
 800b202:	b087      	sub	sp, #28
 800b204:	af00      	add	r7, sp, #0
 800b206:	60f8      	str	r0, [r7, #12]
 800b208:	60b9      	str	r1, [r7, #8]
 800b20a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00d      	beq.n	800b236 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	1c53      	adds	r3, r2, #1
 800b21e:	613b      	str	r3, [r7, #16]
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	1c59      	adds	r1, r3, #1
 800b224:	6179      	str	r1, [r7, #20]
 800b226:	7812      	ldrb	r2, [r2, #0]
 800b228:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	607b      	str	r3, [r7, #4]
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1f1      	bne.n	800b21a <mem_cpy+0x1a>
	}
}
 800b236:	bf00      	nop
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b242:	b480      	push	{r7}
 800b244:	b087      	sub	sp, #28
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	617a      	str	r2, [r7, #20]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	3b01      	subs	r3, #1
 800b262:	607b      	str	r3, [r7, #4]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1f3      	bne.n	800b252 <mem_set+0x10>
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	371c      	adds	r7, #28
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b278:	b480      	push	{r7}
 800b27a:	b089      	sub	sp, #36	@ 0x24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	61fb      	str	r3, [r7, #28]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b28c:	2300      	movs	r3, #0
 800b28e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	1c5a      	adds	r2, r3, #1
 800b294:	61fa      	str	r2, [r7, #28]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	4619      	mov	r1, r3
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	1c5a      	adds	r2, r3, #1
 800b29e:	61ba      	str	r2, [r7, #24]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	1acb      	subs	r3, r1, r3
 800b2a4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	607b      	str	r3, [r7, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d002      	beq.n	800b2b8 <mem_cmp+0x40>
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d0eb      	beq.n	800b290 <mem_cmp+0x18>

	return r;
 800b2b8:	697b      	ldr	r3, [r7, #20]
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3724      	adds	r7, #36	@ 0x24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b2c6:	b480      	push	{r7}
 800b2c8:	b083      	sub	sp, #12
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b2d0:	e002      	b.n	800b2d8 <chk_chr+0x12>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	607b      	str	r3, [r7, #4]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d005      	beq.n	800b2ec <chk_chr+0x26>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d1f2      	bne.n	800b2d2 <chk_chr+0xc>
	return *str;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	370c      	adds	r7, #12
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b306:	2300      	movs	r3, #0
 800b308:	60bb      	str	r3, [r7, #8]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	e029      	b.n	800b364 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b310:	4a27      	ldr	r2, [pc, #156]	@ (800b3b0 <chk_lock+0xb4>)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	011b      	lsls	r3, r3, #4
 800b316:	4413      	add	r3, r2
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d01d      	beq.n	800b35a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b31e:	4a24      	ldr	r2, [pc, #144]	@ (800b3b0 <chk_lock+0xb4>)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	011b      	lsls	r3, r3, #4
 800b324:	4413      	add	r3, r2
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d116      	bne.n	800b35e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b330:	4a1f      	ldr	r2, [pc, #124]	@ (800b3b0 <chk_lock+0xb4>)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	011b      	lsls	r3, r3, #4
 800b336:	4413      	add	r3, r2
 800b338:	3304      	adds	r3, #4
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b340:	429a      	cmp	r2, r3
 800b342:	d10c      	bne.n	800b35e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b344:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b0 <chk_lock+0xb4>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	4413      	add	r3, r2
 800b34c:	3308      	adds	r3, #8
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b354:	429a      	cmp	r2, r3
 800b356:	d102      	bne.n	800b35e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b358:	e007      	b.n	800b36a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b35a:	2301      	movs	r3, #1
 800b35c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3301      	adds	r3, #1
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d9d2      	bls.n	800b310 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d109      	bne.n	800b384 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d102      	bne.n	800b37c <chk_lock+0x80>
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d101      	bne.n	800b380 <chk_lock+0x84>
 800b37c:	2300      	movs	r3, #0
 800b37e:	e010      	b.n	800b3a2 <chk_lock+0xa6>
 800b380:	2312      	movs	r3, #18
 800b382:	e00e      	b.n	800b3a2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d108      	bne.n	800b39c <chk_lock+0xa0>
 800b38a:	4a09      	ldr	r2, [pc, #36]	@ (800b3b0 <chk_lock+0xb4>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	330c      	adds	r3, #12
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b39a:	d101      	bne.n	800b3a0 <chk_lock+0xa4>
 800b39c:	2310      	movs	r3, #16
 800b39e:	e000      	b.n	800b3a2 <chk_lock+0xa6>
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3714      	adds	r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	20000840 	.word	0x20000840

0800b3b4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	e002      	b.n	800b3c6 <enq_lock+0x12>
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	607b      	str	r3, [r7, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d806      	bhi.n	800b3da <enq_lock+0x26>
 800b3cc:	4a09      	ldr	r2, [pc, #36]	@ (800b3f4 <enq_lock+0x40>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	011b      	lsls	r3, r3, #4
 800b3d2:	4413      	add	r3, r2
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d1f2      	bne.n	800b3c0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	bf14      	ite	ne
 800b3e0:	2301      	movne	r3, #1
 800b3e2:	2300      	moveq	r3, #0
 800b3e4:	b2db      	uxtb	r3, r3
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20000840 	.word	0x20000840

0800b3f8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b085      	sub	sp, #20
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
 800b400:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b402:	2300      	movs	r3, #0
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e01f      	b.n	800b448 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b408:	4a41      	ldr	r2, [pc, #260]	@ (800b510 <inc_lock+0x118>)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	4413      	add	r3, r2
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d113      	bne.n	800b442 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b41a:	4a3d      	ldr	r2, [pc, #244]	@ (800b510 <inc_lock+0x118>)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	4413      	add	r3, r2
 800b422:	3304      	adds	r3, #4
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d109      	bne.n	800b442 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b42e:	4a38      	ldr	r2, [pc, #224]	@ (800b510 <inc_lock+0x118>)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	4413      	add	r3, r2
 800b436:	3308      	adds	r3, #8
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b43e:	429a      	cmp	r2, r3
 800b440:	d006      	beq.n	800b450 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3301      	adds	r3, #1
 800b446:	60fb      	str	r3, [r7, #12]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d9dc      	bls.n	800b408 <inc_lock+0x10>
 800b44e:	e000      	b.n	800b452 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b450:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b02      	cmp	r3, #2
 800b456:	d132      	bne.n	800b4be <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b458:	2300      	movs	r3, #0
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	e002      	b.n	800b464 <inc_lock+0x6c>
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b01      	cmp	r3, #1
 800b468:	d806      	bhi.n	800b478 <inc_lock+0x80>
 800b46a:	4a29      	ldr	r2, [pc, #164]	@ (800b510 <inc_lock+0x118>)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	4413      	add	r3, r2
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f2      	bne.n	800b45e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d101      	bne.n	800b482 <inc_lock+0x8a>
 800b47e:	2300      	movs	r3, #0
 800b480:	e040      	b.n	800b504 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	4922      	ldr	r1, [pc, #136]	@ (800b510 <inc_lock+0x118>)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	011b      	lsls	r3, r3, #4
 800b48c:	440b      	add	r3, r1
 800b48e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	491e      	ldr	r1, [pc, #120]	@ (800b510 <inc_lock+0x118>)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	011b      	lsls	r3, r3, #4
 800b49a:	440b      	add	r3, r1
 800b49c:	3304      	adds	r3, #4
 800b49e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	695a      	ldr	r2, [r3, #20]
 800b4a4:	491a      	ldr	r1, [pc, #104]	@ (800b510 <inc_lock+0x118>)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	011b      	lsls	r3, r3, #4
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b4b0:	4a17      	ldr	r2, [pc, #92]	@ (800b510 <inc_lock+0x118>)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	011b      	lsls	r3, r3, #4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	330c      	adds	r3, #12
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d009      	beq.n	800b4d8 <inc_lock+0xe0>
 800b4c4:	4a12      	ldr	r2, [pc, #72]	@ (800b510 <inc_lock+0x118>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	4413      	add	r3, r2
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	881b      	ldrh	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d001      	beq.n	800b4d8 <inc_lock+0xe0>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	e015      	b.n	800b504 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d108      	bne.n	800b4f0 <inc_lock+0xf8>
 800b4de:	4a0c      	ldr	r2, [pc, #48]	@ (800b510 <inc_lock+0x118>)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	011b      	lsls	r3, r3, #4
 800b4e4:	4413      	add	r3, r2
 800b4e6:	330c      	adds	r3, #12
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	e001      	b.n	800b4f4 <inc_lock+0xfc>
 800b4f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4f4:	4906      	ldr	r1, [pc, #24]	@ (800b510 <inc_lock+0x118>)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	011b      	lsls	r3, r3, #4
 800b4fa:	440b      	add	r3, r1
 800b4fc:	330c      	adds	r3, #12
 800b4fe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3301      	adds	r3, #1
}
 800b504:	4618      	mov	r0, r3
 800b506:	3714      	adds	r7, #20
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	20000840 	.word	0x20000840

0800b514 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	3b01      	subs	r3, #1
 800b520:	607b      	str	r3, [r7, #4]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d825      	bhi.n	800b574 <dec_lock+0x60>
		n = Files[i].ctr;
 800b528:	4a17      	ldr	r2, [pc, #92]	@ (800b588 <dec_lock+0x74>)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	4413      	add	r3, r2
 800b530:	330c      	adds	r3, #12
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b536:	89fb      	ldrh	r3, [r7, #14]
 800b538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b53c:	d101      	bne.n	800b542 <dec_lock+0x2e>
 800b53e:	2300      	movs	r3, #0
 800b540:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b542:	89fb      	ldrh	r3, [r7, #14]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <dec_lock+0x3a>
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	3b01      	subs	r3, #1
 800b54c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b54e:	4a0e      	ldr	r2, [pc, #56]	@ (800b588 <dec_lock+0x74>)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	011b      	lsls	r3, r3, #4
 800b554:	4413      	add	r3, r2
 800b556:	330c      	adds	r3, #12
 800b558:	89fa      	ldrh	r2, [r7, #14]
 800b55a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <dec_lock+0x5a>
 800b562:	4a09      	ldr	r2, [pc, #36]	@ (800b588 <dec_lock+0x74>)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	4413      	add	r3, r2
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	737b      	strb	r3, [r7, #13]
 800b572:	e001      	b.n	800b578 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b574:	2302      	movs	r3, #2
 800b576:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b578:	7b7b      	ldrb	r3, [r7, #13]
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr
 800b586:	bf00      	nop
 800b588:	20000840 	.word	0x20000840

0800b58c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
 800b598:	e010      	b.n	800b5bc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b59a:	4a0d      	ldr	r2, [pc, #52]	@ (800b5d0 <clear_lock+0x44>)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	011b      	lsls	r3, r3, #4
 800b5a0:	4413      	add	r3, r2
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d105      	bne.n	800b5b6 <clear_lock+0x2a>
 800b5aa:	4a09      	ldr	r2, [pc, #36]	@ (800b5d0 <clear_lock+0x44>)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	011b      	lsls	r3, r3, #4
 800b5b0:	4413      	add	r3, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d9eb      	bls.n	800b59a <clear_lock+0xe>
	}
}
 800b5c2:	bf00      	nop
 800b5c4:	bf00      	nop
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	20000840 	.word	0x20000840

0800b5d4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	78db      	ldrb	r3, [r3, #3]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d034      	beq.n	800b652 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	7858      	ldrb	r0, [r3, #1]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	697a      	ldr	r2, [r7, #20]
 800b5fc:	f7ff fd40 	bl	800b080 <disk_write>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <sync_window+0x38>
			res = FR_DISK_ERR;
 800b606:	2301      	movs	r3, #1
 800b608:	73fb      	strb	r3, [r7, #15]
 800b60a:	e022      	b.n	800b652 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b616:	697a      	ldr	r2, [r7, #20]
 800b618:	1ad2      	subs	r2, r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	69db      	ldr	r3, [r3, #28]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d217      	bcs.n	800b652 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	789b      	ldrb	r3, [r3, #2]
 800b626:	613b      	str	r3, [r7, #16]
 800b628:	e010      	b.n	800b64c <sync_window+0x78>
					wsect += fs->fsize;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4413      	add	r3, r2
 800b632:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	7858      	ldrb	r0, [r3, #1]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b63e:	2301      	movs	r3, #1
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	f7ff fd1d 	bl	800b080 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	3b01      	subs	r3, #1
 800b64a:	613b      	str	r3, [r7, #16]
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d8eb      	bhi.n	800b62a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
 800b664:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b666:	2300      	movs	r3, #0
 800b668:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	429a      	cmp	r2, r3
 800b672:	d01b      	beq.n	800b6ac <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f7ff ffad 	bl	800b5d4 <sync_window>
 800b67a:	4603      	mov	r3, r0
 800b67c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b67e:	7bfb      	ldrb	r3, [r7, #15]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d113      	bne.n	800b6ac <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	7858      	ldrb	r0, [r3, #1]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b68e:	2301      	movs	r3, #1
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	f7ff fcd5 	bl	800b040 <disk_read>
 800b696:	4603      	mov	r3, r0
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d004      	beq.n	800b6a6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b69c:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800b6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
	...

0800b6b8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7ff ff87 	bl	800b5d4 <sync_window>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b6ca:	7bfb      	ldrb	r3, [r7, #15]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d158      	bne.n	800b782 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	d148      	bne.n	800b76a <sync_fs+0xb2>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	791b      	ldrb	r3, [r3, #4]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d144      	bne.n	800b76a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3334      	adds	r3, #52	@ 0x34
 800b6e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fda9 	bl	800b242 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3334      	adds	r3, #52	@ 0x34
 800b6f4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b6f8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7ff fd38 	bl	800b172 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3334      	adds	r3, #52	@ 0x34
 800b706:	4921      	ldr	r1, [pc, #132]	@ (800b78c <sync_fs+0xd4>)
 800b708:	4618      	mov	r0, r3
 800b70a:	f7ff fd4d 	bl	800b1a8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3334      	adds	r3, #52	@ 0x34
 800b712:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b716:	491e      	ldr	r1, [pc, #120]	@ (800b790 <sync_fs+0xd8>)
 800b718:	4618      	mov	r0, r3
 800b71a:	f7ff fd45 	bl	800b1a8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3334      	adds	r3, #52	@ 0x34
 800b722:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	695b      	ldr	r3, [r3, #20]
 800b72a:	4619      	mov	r1, r3
 800b72c:	4610      	mov	r0, r2
 800b72e:	f7ff fd3b 	bl	800b1a8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3334      	adds	r3, #52	@ 0x34
 800b736:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7ff fd31 	bl	800b1a8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	1c5a      	adds	r2, r3, #1
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	7858      	ldrb	r0, [r3, #1]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b75e:	2301      	movs	r3, #1
 800b760:	f7ff fc8e 	bl	800b080 <disk_write>
			fs->fsi_flag = 0;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	785b      	ldrb	r3, [r3, #1]
 800b76e:	2200      	movs	r2, #0
 800b770:	2100      	movs	r1, #0
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fca4 	bl	800b0c0 <disk_ioctl>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <sync_fs+0xca>
 800b77e:	2301      	movs	r3, #1
 800b780:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b782:	7bfb      	ldrb	r3, [r7, #15]
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	41615252 	.word	0x41615252
 800b790:	61417272 	.word	0x61417272

0800b794 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	3b02      	subs	r3, #2
 800b7a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	3b02      	subs	r3, #2
 800b7aa:	683a      	ldr	r2, [r7, #0]
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d301      	bcc.n	800b7b4 <clust2sect+0x20>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	e008      	b.n	800b7c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	895b      	ldrh	r3, [r3, #10]
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	fb03 f202 	mul.w	r2, r3, r2
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c4:	4413      	add	r3, r2
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b7d2:	b580      	push	{r7, lr}
 800b7d4:	b086      	sub	sp, #24
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
 800b7da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d904      	bls.n	800b7f2 <get_fat+0x20>
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	699b      	ldr	r3, [r3, #24]
 800b7ec:	683a      	ldr	r2, [r7, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d302      	bcc.n	800b7f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	617b      	str	r3, [r7, #20]
 800b7f6:	e08e      	b.n	800b916 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	2b03      	cmp	r3, #3
 800b804:	d061      	beq.n	800b8ca <get_fat+0xf8>
 800b806:	2b03      	cmp	r3, #3
 800b808:	dc7b      	bgt.n	800b902 <get_fat+0x130>
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d002      	beq.n	800b814 <get_fat+0x42>
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d041      	beq.n	800b896 <get_fat+0xc4>
 800b812:	e076      	b.n	800b902 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	085b      	lsrs	r3, r3, #1
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	0a5b      	lsrs	r3, r3, #9
 800b82a:	4413      	add	r3, r2
 800b82c:	4619      	mov	r1, r3
 800b82e:	6938      	ldr	r0, [r7, #16]
 800b830:	f7ff ff14 	bl	800b65c <move_window>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d166      	bne.n	800b908 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	60fa      	str	r2, [r7, #12]
 800b840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b844:	693a      	ldr	r2, [r7, #16]
 800b846:	4413      	add	r3, r2
 800b848:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b84c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	0a5b      	lsrs	r3, r3, #9
 800b856:	4413      	add	r3, r2
 800b858:	4619      	mov	r1, r3
 800b85a:	6938      	ldr	r0, [r7, #16]
 800b85c:	f7ff fefe 	bl	800b65c <move_window>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d152      	bne.n	800b90c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	4413      	add	r3, r2
 800b870:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b874:	021b      	lsls	r3, r3, #8
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	4313      	orrs	r3, r2
 800b87a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	f003 0301 	and.w	r3, r3, #1
 800b882:	2b00      	cmp	r3, #0
 800b884:	d002      	beq.n	800b88c <get_fat+0xba>
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	091b      	lsrs	r3, r3, #4
 800b88a:	e002      	b.n	800b892 <get_fat+0xc0>
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b892:	617b      	str	r3, [r7, #20]
			break;
 800b894:	e03f      	b.n	800b916 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	0a1b      	lsrs	r3, r3, #8
 800b89e:	4413      	add	r3, r2
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	6938      	ldr	r0, [r7, #16]
 800b8a4:	f7ff feda 	bl	800b65c <move_window>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d130      	bne.n	800b910 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b8bc:	4413      	add	r3, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff fc1c 	bl	800b0fc <ld_word>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	617b      	str	r3, [r7, #20]
			break;
 800b8c8:	e025      	b.n	800b916 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	09db      	lsrs	r3, r3, #7
 800b8d2:	4413      	add	r3, r2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6938      	ldr	r0, [r7, #16]
 800b8d8:	f7ff fec0 	bl	800b65c <move_window>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d118      	bne.n	800b914 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b8f0:	4413      	add	r3, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff fc1a 	bl	800b12c <ld_dword>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b8fe:	617b      	str	r3, [r7, #20]
			break;
 800b900:	e009      	b.n	800b916 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b902:	2301      	movs	r3, #1
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	e006      	b.n	800b916 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b908:	bf00      	nop
 800b90a:	e004      	b.n	800b916 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b90c:	bf00      	nop
 800b90e:	e002      	b.n	800b916 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b910:	bf00      	nop
 800b912:	e000      	b.n	800b916 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b914:	bf00      	nop
		}
	}

	return val;
 800b916:	697b      	ldr	r3, [r7, #20]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b920:	b590      	push	{r4, r7, lr}
 800b922:	b089      	sub	sp, #36	@ 0x24
 800b924:	af00      	add	r7, sp, #0
 800b926:	60f8      	str	r0, [r7, #12]
 800b928:	60b9      	str	r1, [r7, #8]
 800b92a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b92c:	2302      	movs	r3, #2
 800b92e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b01      	cmp	r3, #1
 800b934:	f240 80d9 	bls.w	800baea <put_fat+0x1ca>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	429a      	cmp	r2, r3
 800b940:	f080 80d3 	bcs.w	800baea <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b03      	cmp	r3, #3
 800b94a:	f000 8096 	beq.w	800ba7a <put_fat+0x15a>
 800b94e:	2b03      	cmp	r3, #3
 800b950:	f300 80cb 	bgt.w	800baea <put_fat+0x1ca>
 800b954:	2b01      	cmp	r3, #1
 800b956:	d002      	beq.n	800b95e <put_fat+0x3e>
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d06e      	beq.n	800ba3a <put_fat+0x11a>
 800b95c:	e0c5      	b.n	800baea <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	085b      	lsrs	r3, r3, #1
 800b966:	69ba      	ldr	r2, [r7, #24]
 800b968:	4413      	add	r3, r2
 800b96a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	0a5b      	lsrs	r3, r3, #9
 800b974:	4413      	add	r3, r2
 800b976:	4619      	mov	r1, r3
 800b978:	68f8      	ldr	r0, [r7, #12]
 800b97a:	f7ff fe6f 	bl	800b65c <move_window>
 800b97e:	4603      	mov	r3, r0
 800b980:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b982:	7ffb      	ldrb	r3, [r7, #31]
 800b984:	2b00      	cmp	r3, #0
 800b986:	f040 80a9 	bne.w	800badc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b990:	69bb      	ldr	r3, [r7, #24]
 800b992:	1c59      	adds	r1, r3, #1
 800b994:	61b9      	str	r1, [r7, #24]
 800b996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99a:	4413      	add	r3, r2
 800b99c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00d      	beq.n	800b9c4 <put_fat+0xa4>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b25b      	sxtb	r3, r3
 800b9ae:	f003 030f 	and.w	r3, r3, #15
 800b9b2:	b25a      	sxtb	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	b25b      	sxtb	r3, r3
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	b25b      	sxtb	r3, r3
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	e001      	b.n	800b9c8 <put_fat+0xa8>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	0a5b      	lsrs	r3, r3, #9
 800b9da:	4413      	add	r3, r2
 800b9dc:	4619      	mov	r1, r3
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	f7ff fe3c 	bl	800b65c <move_window>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9e8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d178      	bne.n	800bae0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b9f4:	69bb      	ldr	r3, [r7, #24]
 800b9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fa:	4413      	add	r3, r2
 800b9fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	f003 0301 	and.w	r3, r3, #1
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <put_fat+0xf0>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	091b      	lsrs	r3, r3, #4
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	e00e      	b.n	800ba2e <put_fat+0x10e>
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	b25b      	sxtb	r3, r3
 800ba16:	f023 030f 	bic.w	r3, r3, #15
 800ba1a:	b25a      	sxtb	r2, r3
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	0a1b      	lsrs	r3, r3, #8
 800ba20:	b25b      	sxtb	r3, r3
 800ba22:	f003 030f 	and.w	r3, r3, #15
 800ba26:	b25b      	sxtb	r3, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	b25b      	sxtb	r3, r3
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2201      	movs	r2, #1
 800ba36:	70da      	strb	r2, [r3, #3]
			break;
 800ba38:	e057      	b.n	800baea <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	4413      	add	r3, r2
 800ba44:	4619      	mov	r1, r3
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f7ff fe08 	bl	800b65c <move_window>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba50:	7ffb      	ldrb	r3, [r7, #31]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d146      	bne.n	800bae4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ba5c:	68bb      	ldr	r3, [r7, #8]
 800ba5e:	005b      	lsls	r3, r3, #1
 800ba60:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ba64:	4413      	add	r3, r2
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	b292      	uxth	r2, r2
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f7ff fb80 	bl	800b172 <st_word>
			fs->wflag = 1;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2201      	movs	r2, #1
 800ba76:	70da      	strb	r2, [r3, #3]
			break;
 800ba78:	e037      	b.n	800baea <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	09db      	lsrs	r3, r3, #7
 800ba82:	4413      	add	r3, r2
 800ba84:	4619      	mov	r1, r3
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff fde8 	bl	800b65c <move_window>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba90:	7ffb      	ldrb	r3, [r7, #31]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d128      	bne.n	800bae8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800baaa:	4413      	add	r3, r2
 800baac:	4618      	mov	r0, r3
 800baae:	f7ff fb3d 	bl	800b12c <ld_dword>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bab8:	4323      	orrs	r3, r4
 800baba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800baca:	4413      	add	r3, r2
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fb6a 	bl	800b1a8 <st_dword>
			fs->wflag = 1;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2201      	movs	r2, #1
 800bad8:	70da      	strb	r2, [r3, #3]
			break;
 800bada:	e006      	b.n	800baea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800badc:	bf00      	nop
 800bade:	e004      	b.n	800baea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bae0:	bf00      	nop
 800bae2:	e002      	b.n	800baea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bae4:	bf00      	nop
 800bae6:	e000      	b.n	800baea <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bae8:	bf00      	nop
		}
	}
	return res;
 800baea:	7ffb      	ldrb	r3, [r7, #31]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3724      	adds	r7, #36	@ 0x24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd90      	pop	{r4, r7, pc}

0800baf4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b088      	sub	sp, #32
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d904      	bls.n	800bb1a <remove_chain+0x26>
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	699b      	ldr	r3, [r3, #24]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d301      	bcc.n	800bb1e <remove_chain+0x2a>
 800bb1a:	2302      	movs	r3, #2
 800bb1c:	e04b      	b.n	800bbb6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb24:	f04f 32ff 	mov.w	r2, #4294967295
 800bb28:	6879      	ldr	r1, [r7, #4]
 800bb2a:	69b8      	ldr	r0, [r7, #24]
 800bb2c:	f7ff fef8 	bl	800b920 <put_fat>
 800bb30:	4603      	mov	r3, r0
 800bb32:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb34:	7ffb      	ldrb	r3, [r7, #31]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <remove_chain+0x4a>
 800bb3a:	7ffb      	ldrb	r3, [r7, #31]
 800bb3c:	e03b      	b.n	800bbb6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb3e:	68b9      	ldr	r1, [r7, #8]
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f7ff fe46 	bl	800b7d2 <get_fat>
 800bb46:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d031      	beq.n	800bbb2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d101      	bne.n	800bb58 <remove_chain+0x64>
 800bb54:	2302      	movs	r3, #2
 800bb56:	e02e      	b.n	800bbb6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb5e:	d101      	bne.n	800bb64 <remove_chain+0x70>
 800bb60:	2301      	movs	r3, #1
 800bb62:	e028      	b.n	800bbb6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bb64:	2200      	movs	r2, #0
 800bb66:	68b9      	ldr	r1, [r7, #8]
 800bb68:	69b8      	ldr	r0, [r7, #24]
 800bb6a:	f7ff fed9 	bl	800b920 <put_fat>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bb72:	7ffb      	ldrb	r3, [r7, #31]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <remove_chain+0x88>
 800bb78:	7ffb      	ldrb	r3, [r7, #31]
 800bb7a:	e01c      	b.n	800bbb6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	695a      	ldr	r2, [r3, #20]
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	699b      	ldr	r3, [r3, #24]
 800bb84:	3b02      	subs	r3, #2
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d20b      	bcs.n	800bba2 <remove_chain+0xae>
			fs->free_clst++;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	1c5a      	adds	r2, r3, #1
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	791b      	ldrb	r3, [r3, #4]
 800bb98:	f043 0301 	orr.w	r3, r3, #1
 800bb9c:	b2da      	uxtb	r2, r3
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bba6:	69bb      	ldr	r3, [r7, #24]
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d3c6      	bcc.n	800bb3e <remove_chain+0x4a>
 800bbb0:	e000      	b.n	800bbb4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bbb2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3720      	adds	r7, #32
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b088      	sub	sp, #32
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
 800bbc6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d10d      	bne.n	800bbf0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d004      	beq.n	800bbea <create_chain+0x2c>
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	699b      	ldr	r3, [r3, #24]
 800bbe4:	69ba      	ldr	r2, [r7, #24]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d31b      	bcc.n	800bc22 <create_chain+0x64>
 800bbea:	2301      	movs	r3, #1
 800bbec:	61bb      	str	r3, [r7, #24]
 800bbee:	e018      	b.n	800bc22 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bbf0:	6839      	ldr	r1, [r7, #0]
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff fded 	bl	800b7d2 <get_fat>
 800bbf8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d801      	bhi.n	800bc04 <create_chain+0x46>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e070      	b.n	800bce6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d101      	bne.n	800bc10 <create_chain+0x52>
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	e06a      	b.n	800bce6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d201      	bcs.n	800bc1e <create_chain+0x60>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	e063      	b.n	800bce6 <create_chain+0x128>
		scl = clst;
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc26:	69fb      	ldr	r3, [r7, #28]
 800bc28:	3301      	adds	r3, #1
 800bc2a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	699b      	ldr	r3, [r3, #24]
 800bc30:	69fa      	ldr	r2, [r7, #28]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d307      	bcc.n	800bc46 <create_chain+0x88>
				ncl = 2;
 800bc36:	2302      	movs	r3, #2
 800bc38:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc3a:	69fa      	ldr	r2, [r7, #28]
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d901      	bls.n	800bc46 <create_chain+0x88>
 800bc42:	2300      	movs	r3, #0
 800bc44:	e04f      	b.n	800bce6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc46:	69f9      	ldr	r1, [r7, #28]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7ff fdc2 	bl	800b7d2 <get_fat>
 800bc4e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00e      	beq.n	800bc74 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d003      	beq.n	800bc64 <create_chain+0xa6>
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc62:	d101      	bne.n	800bc68 <create_chain+0xaa>
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	e03e      	b.n	800bce6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc68:	69fa      	ldr	r2, [r7, #28]
 800bc6a:	69bb      	ldr	r3, [r7, #24]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d1da      	bne.n	800bc26 <create_chain+0x68>
 800bc70:	2300      	movs	r3, #0
 800bc72:	e038      	b.n	800bce6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bc74:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	69f9      	ldr	r1, [r7, #28]
 800bc7c:	6938      	ldr	r0, [r7, #16]
 800bc7e:	f7ff fe4f 	bl	800b920 <put_fat>
 800bc82:	4603      	mov	r3, r0
 800bc84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc86:	7dfb      	ldrb	r3, [r7, #23]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d109      	bne.n	800bca0 <create_chain+0xe2>
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d006      	beq.n	800bca0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bc92:	69fa      	ldr	r2, [r7, #28]
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6938      	ldr	r0, [r7, #16]
 800bc98:	f7ff fe42 	bl	800b920 <put_fat>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d116      	bne.n	800bcd4 <create_chain+0x116>
		fs->last_clst = ncl;
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	69fa      	ldr	r2, [r7, #28]
 800bcaa:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	695a      	ldr	r2, [r3, #20]
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	699b      	ldr	r3, [r3, #24]
 800bcb4:	3b02      	subs	r3, #2
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d804      	bhi.n	800bcc4 <create_chain+0x106>
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	695b      	ldr	r3, [r3, #20]
 800bcbe:	1e5a      	subs	r2, r3, #1
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	791b      	ldrb	r3, [r3, #4]
 800bcc8:	f043 0301 	orr.w	r3, r3, #1
 800bccc:	b2da      	uxtb	r2, r3
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	711a      	strb	r2, [r3, #4]
 800bcd2:	e007      	b.n	800bce4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d102      	bne.n	800bce0 <create_chain+0x122>
 800bcda:	f04f 33ff 	mov.w	r3, #4294967295
 800bcde:	e000      	b.n	800bce2 <create_chain+0x124>
 800bce0:	2301      	movs	r3, #1
 800bce2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bce4:	69fb      	ldr	r3, [r7, #28]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3720      	adds	r7, #32
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b087      	sub	sp, #28
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd02:	3304      	adds	r3, #4
 800bd04:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	0a5b      	lsrs	r3, r3, #9
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	8952      	ldrh	r2, [r2, #10]
 800bd0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd12:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	613a      	str	r2, [r7, #16]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <clmt_clust+0x3a>
 800bd24:	2300      	movs	r3, #0
 800bd26:	e010      	b.n	800bd4a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d307      	bcc.n	800bd40 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd30:	697a      	ldr	r2, [r7, #20]
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	617b      	str	r3, [r7, #20]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd3e:	e7e9      	b.n	800bd14 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bd40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	4413      	add	r3, r2
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b086      	sub	sp, #24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd6c:	d204      	bcs.n	800bd78 <dir_sdi+0x22>
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	f003 031f 	and.w	r3, r3, #31
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d001      	beq.n	800bd7c <dir_sdi+0x26>
		return FR_INT_ERR;
 800bd78:	2302      	movs	r3, #2
 800bd7a:	e063      	b.n	800be44 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d106      	bne.n	800bd9c <dir_sdi+0x46>
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d902      	bls.n	800bd9c <dir_sdi+0x46>
		clst = fs->dirbase;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10c      	bne.n	800bdbc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	095b      	lsrs	r3, r3, #5
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	8912      	ldrh	r2, [r2, #8]
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d301      	bcc.n	800bdb2 <dir_sdi+0x5c>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e048      	b.n	800be44 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	61da      	str	r2, [r3, #28]
 800bdba:	e029      	b.n	800be10 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	895b      	ldrh	r3, [r3, #10]
 800bdc0:	025b      	lsls	r3, r3, #9
 800bdc2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdc4:	e019      	b.n	800bdfa <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6979      	ldr	r1, [r7, #20]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7ff fd01 	bl	800b7d2 <get_fat>
 800bdd0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd8:	d101      	bne.n	800bdde <dir_sdi+0x88>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e032      	b.n	800be44 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d904      	bls.n	800bdee <dir_sdi+0x98>
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	699b      	ldr	r3, [r3, #24]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d301      	bcc.n	800bdf2 <dir_sdi+0x9c>
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e028      	b.n	800be44 <dir_sdi+0xee>
			ofs -= csz;
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdfa:	683a      	ldr	r2, [r7, #0]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d2e1      	bcs.n	800bdc6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be02:	6979      	ldr	r1, [r7, #20]
 800be04:	6938      	ldr	r0, [r7, #16]
 800be06:	f7ff fcc5 	bl	800b794 <clust2sect>
 800be0a:	4602      	mov	r2, r0
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	697a      	ldr	r2, [r7, #20]
 800be14:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	69db      	ldr	r3, [r3, #28]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <dir_sdi+0xcc>
 800be1e:	2302      	movs	r3, #2
 800be20:	e010      	b.n	800be44 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	69da      	ldr	r2, [r3, #28]
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	0a5b      	lsrs	r3, r3, #9
 800be2a:	441a      	add	r2, r3
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be3c:	441a      	add	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be42:	2300      	movs	r3, #0
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b086      	sub	sp, #24
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	3320      	adds	r3, #32
 800be62:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <dir_next+0x28>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be72:	d301      	bcc.n	800be78 <dir_next+0x2c>
 800be74:	2304      	movs	r3, #4
 800be76:	e0aa      	b.n	800bfce <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 8098 	bne.w	800bfb4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	69db      	ldr	r3, [r3, #28]
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d10b      	bne.n	800beae <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	095b      	lsrs	r3, r3, #5
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	8912      	ldrh	r2, [r2, #8]
 800be9e:	4293      	cmp	r3, r2
 800bea0:	f0c0 8088 	bcc.w	800bfb4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	61da      	str	r2, [r3, #28]
 800beaa:	2304      	movs	r3, #4
 800beac:	e08f      	b.n	800bfce <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	0a5b      	lsrs	r3, r3, #9
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	8952      	ldrh	r2, [r2, #10]
 800beb6:	3a01      	subs	r2, #1
 800beb8:	4013      	ands	r3, r2
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d17a      	bne.n	800bfb4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	699b      	ldr	r3, [r3, #24]
 800bec4:	4619      	mov	r1, r3
 800bec6:	4610      	mov	r0, r2
 800bec8:	f7ff fc83 	bl	800b7d2 <get_fat>
 800becc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bece:	697b      	ldr	r3, [r7, #20]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	d801      	bhi.n	800bed8 <dir_next+0x8c>
 800bed4:	2302      	movs	r3, #2
 800bed6:	e07a      	b.n	800bfce <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bede:	d101      	bne.n	800bee4 <dir_next+0x98>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e074      	b.n	800bfce <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	697a      	ldr	r2, [r7, #20]
 800beea:	429a      	cmp	r2, r3
 800beec:	d358      	bcc.n	800bfa0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d104      	bne.n	800befe <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	61da      	str	r2, [r3, #28]
 800befa:	2304      	movs	r3, #4
 800befc:	e067      	b.n	800bfce <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	4619      	mov	r1, r3
 800bf06:	4610      	mov	r0, r2
 800bf08:	f7ff fe59 	bl	800bbbe <create_chain>
 800bf0c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <dir_next+0xcc>
 800bf14:	2307      	movs	r3, #7
 800bf16:	e05a      	b.n	800bfce <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d101      	bne.n	800bf22 <dir_next+0xd6>
 800bf1e:	2302      	movs	r3, #2
 800bf20:	e055      	b.n	800bfce <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf28:	d101      	bne.n	800bf2e <dir_next+0xe2>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e04f      	b.n	800bfce <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fb50 	bl	800b5d4 <sync_window>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <dir_next+0xf2>
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e047      	b.n	800bfce <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3334      	adds	r3, #52	@ 0x34
 800bf42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf46:	2100      	movs	r1, #0
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff f97a 	bl	800b242 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf4e:	2300      	movs	r3, #0
 800bf50:	613b      	str	r3, [r7, #16]
 800bf52:	6979      	ldr	r1, [r7, #20]
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7ff fc1d 	bl	800b794 <clust2sect>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf60:	e012      	b.n	800bf88 <dir_next+0x13c>
						fs->wflag = 1;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2201      	movs	r2, #1
 800bf66:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fb33 	bl	800b5d4 <sync_window>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <dir_next+0x12c>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e02a      	b.n	800bfce <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	613b      	str	r3, [r7, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf82:	1c5a      	adds	r2, r3, #1
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	631a      	str	r2, [r3, #48]	@ 0x30
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	895b      	ldrh	r3, [r3, #10]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d3e6      	bcc.n	800bf62 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	1ad2      	subs	r2, r2, r3
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bfa6:	6979      	ldr	r1, [r7, #20]
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff fbf3 	bl	800b794 <clust2sect>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfc6:	441a      	add	r2, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7ff feb4 	bl	800bd56 <dir_sdi>
 800bfee:	4603      	mov	r3, r0
 800bff0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bff2:	7dfb      	ldrb	r3, [r7, #23]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d12b      	bne.n	800c050 <dir_alloc+0x7a>
		n = 0;
 800bff8:	2300      	movs	r3, #0
 800bffa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	69db      	ldr	r3, [r3, #28]
 800c000:	4619      	mov	r1, r3
 800c002:	68f8      	ldr	r0, [r7, #12]
 800c004:	f7ff fb2a 	bl	800b65c <move_window>
 800c008:	4603      	mov	r3, r0
 800c00a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c00c:	7dfb      	ldrb	r3, [r7, #23]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d11d      	bne.n	800c04e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	2be5      	cmp	r3, #229	@ 0xe5
 800c01a:	d004      	beq.n	800c026 <dir_alloc+0x50>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6a1b      	ldr	r3, [r3, #32]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d107      	bne.n	800c036 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	3301      	adds	r3, #1
 800c02a:	613b      	str	r3, [r7, #16]
 800c02c:	693a      	ldr	r2, [r7, #16]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	429a      	cmp	r2, r3
 800c032:	d102      	bne.n	800c03a <dir_alloc+0x64>
 800c034:	e00c      	b.n	800c050 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c036:	2300      	movs	r3, #0
 800c038:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c03a:	2101      	movs	r1, #1
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ff05 	bl	800be4c <dir_next>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0d7      	beq.n	800bffc <dir_alloc+0x26>
 800c04c:	e000      	b.n	800c050 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c04e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c050:	7dfb      	ldrb	r3, [r7, #23]
 800c052:	2b04      	cmp	r3, #4
 800c054:	d101      	bne.n	800c05a <dir_alloc+0x84>
 800c056:	2307      	movs	r3, #7
 800c058:	75fb      	strb	r3, [r7, #23]
	return res;
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	331a      	adds	r3, #26
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff f842 	bl	800b0fc <ld_word>
 800c078:	4603      	mov	r3, r0
 800c07a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	2b03      	cmp	r3, #3
 800c082:	d109      	bne.n	800c098 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	3314      	adds	r3, #20
 800c088:	4618      	mov	r0, r3
 800c08a:	f7ff f837 	bl	800b0fc <ld_word>
 800c08e:	4603      	mov	r3, r0
 800c090:	041b      	lsls	r3, r3, #16
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	4313      	orrs	r3, r2
 800c096:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c098:	68fb      	ldr	r3, [r7, #12]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	60b9      	str	r1, [r7, #8]
 800c0ac:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	331a      	adds	r3, #26
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	b292      	uxth	r2, r2
 800c0b6:	4611      	mov	r1, r2
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7ff f85a 	bl	800b172 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	781b      	ldrb	r3, [r3, #0]
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d109      	bne.n	800c0da <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	f103 0214 	add.w	r2, r3, #20
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	0c1b      	lsrs	r3, r3, #16
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	f7ff f84c 	bl	800b172 <st_word>
	}
}
 800c0da:	bf00      	nop
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
	...

0800c0e4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	331a      	adds	r3, #26
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff f802 	bl	800b0fc <ld_word>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <cmp_lfn+0x1e>
 800c0fe:	2300      	movs	r3, #0
 800c100:	e059      	b.n	800c1b6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c10a:	1e5a      	subs	r2, r3, #1
 800c10c:	4613      	mov	r3, r2
 800c10e:	005b      	lsls	r3, r3, #1
 800c110:	4413      	add	r3, r2
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c118:	2301      	movs	r3, #1
 800c11a:	81fb      	strh	r3, [r7, #14]
 800c11c:	2300      	movs	r3, #0
 800c11e:	613b      	str	r3, [r7, #16]
 800c120:	e033      	b.n	800c18a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c122:	4a27      	ldr	r2, [pc, #156]	@ (800c1c0 <cmp_lfn+0xdc>)
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	4413      	add	r3, r2
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	461a      	mov	r2, r3
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	4413      	add	r3, r2
 800c130:	4618      	mov	r0, r3
 800c132:	f7fe ffe3 	bl	800b0fc <ld_word>
 800c136:	4603      	mov	r3, r0
 800c138:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c13a:	89fb      	ldrh	r3, [r7, #14]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01a      	beq.n	800c176 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	2bfe      	cmp	r3, #254	@ 0xfe
 800c144:	d812      	bhi.n	800c16c <cmp_lfn+0x88>
 800c146:	89bb      	ldrh	r3, [r7, #12]
 800c148:	4618      	mov	r0, r3
 800c14a:	f001 ff7d 	bl	800e048 <ff_wtoupper>
 800c14e:	4603      	mov	r3, r0
 800c150:	461c      	mov	r4, r3
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	1c5a      	adds	r2, r3, #1
 800c156:	617a      	str	r2, [r7, #20]
 800c158:	005b      	lsls	r3, r3, #1
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	4413      	add	r3, r2
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	4618      	mov	r0, r3
 800c162:	f001 ff71 	bl	800e048 <ff_wtoupper>
 800c166:	4603      	mov	r3, r0
 800c168:	429c      	cmp	r4, r3
 800c16a:	d001      	beq.n	800c170 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c16c:	2300      	movs	r3, #0
 800c16e:	e022      	b.n	800c1b6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c170:	89bb      	ldrh	r3, [r7, #12]
 800c172:	81fb      	strh	r3, [r7, #14]
 800c174:	e006      	b.n	800c184 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c176:	89bb      	ldrh	r3, [r7, #12]
 800c178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d001      	beq.n	800c184 <cmp_lfn+0xa0>
 800c180:	2300      	movs	r3, #0
 800c182:	e018      	b.n	800c1b6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	3301      	adds	r3, #1
 800c188:	613b      	str	r3, [r7, #16]
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	2b0c      	cmp	r3, #12
 800c18e:	d9c8      	bls.n	800c122 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d00b      	beq.n	800c1b4 <cmp_lfn+0xd0>
 800c19c:	89fb      	ldrh	r3, [r7, #14]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d008      	beq.n	800c1b4 <cmp_lfn+0xd0>
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4413      	add	r3, r2
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d001      	beq.n	800c1b4 <cmp_lfn+0xd0>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	e000      	b.n	800c1b6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c1b4:	2301      	movs	r3, #1
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	371c      	adds	r7, #28
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd90      	pop	{r4, r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	08014cb0 	.word	0x08014cb0

0800c1c4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b088      	sub	sp, #32
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4611      	mov	r1, r2
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	460b      	mov	r3, r1
 800c1d4:	71fb      	strb	r3, [r7, #7]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	330d      	adds	r3, #13
 800c1de:	79ba      	ldrb	r2, [r7, #6]
 800c1e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	330b      	adds	r3, #11
 800c1e6:	220f      	movs	r2, #15
 800c1e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	330c      	adds	r3, #12
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	331a      	adds	r3, #26
 800c1f6:	2100      	movs	r1, #0
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe ffba 	bl	800b172 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	1e5a      	subs	r2, r3, #1
 800c202:	4613      	mov	r3, r2
 800c204:	005b      	lsls	r3, r3, #1
 800c206:	4413      	add	r3, r2
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	82fb      	strh	r3, [r7, #22]
 800c212:	2300      	movs	r3, #0
 800c214:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c216:	8afb      	ldrh	r3, [r7, #22]
 800c218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d007      	beq.n	800c230 <put_lfn+0x6c>
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	61fa      	str	r2, [r7, #28]
 800c226:	005b      	lsls	r3, r3, #1
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	4413      	add	r3, r2
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c230:	4a17      	ldr	r2, [pc, #92]	@ (800c290 <put_lfn+0xcc>)
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	4413      	add	r3, r2
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	4413      	add	r3, r2
 800c23e:	8afa      	ldrh	r2, [r7, #22]
 800c240:	4611      	mov	r1, r2
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe ff95 	bl	800b172 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c248:	8afb      	ldrh	r3, [r7, #22]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <put_lfn+0x90>
 800c24e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c252:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c254:	69bb      	ldr	r3, [r7, #24]
 800c256:	3301      	adds	r3, #1
 800c258:	61bb      	str	r3, [r7, #24]
 800c25a:	69bb      	ldr	r3, [r7, #24]
 800c25c:	2b0c      	cmp	r3, #12
 800c25e:	d9da      	bls.n	800c216 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c260:	8afb      	ldrh	r3, [r7, #22]
 800c262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c266:	4293      	cmp	r3, r2
 800c268:	d006      	beq.n	800c278 <put_lfn+0xb4>
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	4413      	add	r3, r2
 800c272:	881b      	ldrh	r3, [r3, #0]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d103      	bne.n	800c280 <put_lfn+0xbc>
 800c278:	79fb      	ldrb	r3, [r7, #7]
 800c27a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c27e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	79fa      	ldrb	r2, [r7, #7]
 800c284:	701a      	strb	r2, [r3, #0]
}
 800c286:	bf00      	nop
 800c288:	3720      	adds	r7, #32
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	08014cb0 	.word	0x08014cb0

0800c294 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08c      	sub	sp, #48	@ 0x30
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
 800c2a0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c2a2:	220b      	movs	r2, #11
 800c2a4:	68b9      	ldr	r1, [r7, #8]
 800c2a6:	68f8      	ldr	r0, [r7, #12]
 800c2a8:	f7fe ffaa 	bl	800b200 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	d92b      	bls.n	800c30a <gen_numname+0x76>
		sr = seq;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c2b6:	e022      	b.n	800c2fe <gen_numname+0x6a>
			wc = *lfn++;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	1c9a      	adds	r2, r3, #2
 800c2bc:	607a      	str	r2, [r7, #4]
 800c2be:	881b      	ldrh	r3, [r3, #0]
 800c2c0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2c6:	e017      	b.n	800c2f8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c2c8:	69fb      	ldr	r3, [r7, #28]
 800c2ca:	005a      	lsls	r2, r3, #1
 800c2cc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2ce:	f003 0301 	and.w	r3, r3, #1
 800c2d2:	4413      	add	r3, r2
 800c2d4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c2d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2d8:	085b      	lsrs	r3, r3, #1
 800c2da:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d005      	beq.n	800c2f2 <gen_numname+0x5e>
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800c2ec:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800c2f0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fa:	2b0f      	cmp	r3, #15
 800c2fc:	d9e4      	bls.n	800c2c8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	881b      	ldrh	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1d8      	bne.n	800c2b8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c30a:	2307      	movs	r3, #7
 800c30c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	b2db      	uxtb	r3, r3
 800c312:	f003 030f 	and.w	r3, r3, #15
 800c316:	b2db      	uxtb	r3, r3
 800c318:	3330      	adds	r3, #48	@ 0x30
 800c31a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800c31e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c322:	2b39      	cmp	r3, #57	@ 0x39
 800c324:	d904      	bls.n	800c330 <gen_numname+0x9c>
 800c326:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c32a:	3307      	adds	r3, #7
 800c32c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800c330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c332:	1e5a      	subs	r2, r3, #1
 800c334:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c336:	3330      	adds	r3, #48	@ 0x30
 800c338:	443b      	add	r3, r7
 800c33a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c33e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	091b      	lsrs	r3, r3, #4
 800c346:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1df      	bne.n	800c30e <gen_numname+0x7a>
	ns[i] = '~';
 800c34e:	f107 0214 	add.w	r2, r7, #20
 800c352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c354:	4413      	add	r3, r2
 800c356:	227e      	movs	r2, #126	@ 0x7e
 800c358:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c35a:	2300      	movs	r3, #0
 800c35c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c35e:	e002      	b.n	800c366 <gen_numname+0xd2>
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	3301      	adds	r3, #1
 800c364:	627b      	str	r3, [r7, #36]	@ 0x24
 800c366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d205      	bcs.n	800c37a <gen_numname+0xe6>
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	4413      	add	r3, r2
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	2b20      	cmp	r3, #32
 800c378:	d1f2      	bne.n	800c360 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37c:	2b07      	cmp	r3, #7
 800c37e:	d807      	bhi.n	800c390 <gen_numname+0xfc>
 800c380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c382:	1c5a      	adds	r2, r3, #1
 800c384:	62ba      	str	r2, [r7, #40]	@ 0x28
 800c386:	3330      	adds	r3, #48	@ 0x30
 800c388:	443b      	add	r3, r7
 800c38a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c38e:	e000      	b.n	800c392 <gen_numname+0xfe>
 800c390:	2120      	movs	r1, #32
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	627a      	str	r2, [r7, #36]	@ 0x24
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4413      	add	r3, r2
 800c39c:	460a      	mov	r2, r1
 800c39e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	2b07      	cmp	r3, #7
 800c3a4:	d9e9      	bls.n	800c37a <gen_numname+0xe6>
}
 800c3a6:	bf00      	nop
 800c3a8:	bf00      	nop
 800c3aa:	3730      	adds	r7, #48	@ 0x30
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c3bc:	230b      	movs	r3, #11
 800c3be:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c3c0:	7bfb      	ldrb	r3, [r7, #15]
 800c3c2:	b2da      	uxtb	r2, r3
 800c3c4:	0852      	lsrs	r2, r2, #1
 800c3c6:	01db      	lsls	r3, r3, #7
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	b2da      	uxtb	r2, r3
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	1c59      	adds	r1, r3, #1
 800c3d0:	6079      	str	r1, [r7, #4]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	4413      	add	r3, r2
 800c3d6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	60bb      	str	r3, [r7, #8]
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1ed      	bne.n	800c3c0 <sum_sfn+0x10>
	return sum;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b086      	sub	sp, #24
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c400:	2100      	movs	r1, #0
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff fca7 	bl	800bd56 <dir_sdi>
 800c408:	4603      	mov	r3, r0
 800c40a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d001      	beq.n	800c416 <dir_find+0x24>
 800c412:	7dfb      	ldrb	r3, [r7, #23]
 800c414:	e0a9      	b.n	800c56a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c416:	23ff      	movs	r3, #255	@ 0xff
 800c418:	753b      	strb	r3, [r7, #20]
 800c41a:	7d3b      	ldrb	r3, [r7, #20]
 800c41c:	757b      	strb	r3, [r7, #21]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f04f 32ff 	mov.w	r2, #4294967295
 800c424:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	69db      	ldr	r3, [r3, #28]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6938      	ldr	r0, [r7, #16]
 800c42e:	f7ff f915 	bl	800b65c <move_window>
 800c432:	4603      	mov	r3, r0
 800c434:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c436:	7dfb      	ldrb	r3, [r7, #23]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f040 8090 	bne.w	800c55e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c446:	7dbb      	ldrb	r3, [r7, #22]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d102      	bne.n	800c452 <dir_find+0x60>
 800c44c:	2304      	movs	r3, #4
 800c44e:	75fb      	strb	r3, [r7, #23]
 800c450:	e08a      	b.n	800c568 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	330b      	adds	r3, #11
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c45e:	73fb      	strb	r3, [r7, #15]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	7bfa      	ldrb	r2, [r7, #15]
 800c464:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c466:	7dbb      	ldrb	r3, [r7, #22]
 800c468:	2be5      	cmp	r3, #229	@ 0xe5
 800c46a:	d007      	beq.n	800c47c <dir_find+0x8a>
 800c46c:	7bfb      	ldrb	r3, [r7, #15]
 800c46e:	f003 0308 	and.w	r3, r3, #8
 800c472:	2b00      	cmp	r3, #0
 800c474:	d009      	beq.n	800c48a <dir_find+0x98>
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	2b0f      	cmp	r3, #15
 800c47a:	d006      	beq.n	800c48a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c47c:	23ff      	movs	r3, #255	@ 0xff
 800c47e:	757b      	strb	r3, [r7, #21]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f04f 32ff 	mov.w	r2, #4294967295
 800c486:	631a      	str	r2, [r3, #48]	@ 0x30
 800c488:	e05e      	b.n	800c548 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c48a:	7bfb      	ldrb	r3, [r7, #15]
 800c48c:	2b0f      	cmp	r3, #15
 800c48e:	d136      	bne.n	800c4fe <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d154      	bne.n	800c548 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c49e:	7dbb      	ldrb	r3, [r7, #22]
 800c4a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d00d      	beq.n	800c4c4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	7b5b      	ldrb	r3, [r3, #13]
 800c4ae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c4b0:	7dbb      	ldrb	r3, [r7, #22]
 800c4b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4b6:	75bb      	strb	r3, [r7, #22]
 800c4b8:	7dbb      	ldrb	r3, [r7, #22]
 800c4ba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	695a      	ldr	r2, [r3, #20]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c4c4:	7dba      	ldrb	r2, [r7, #22]
 800c4c6:	7d7b      	ldrb	r3, [r7, #21]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d115      	bne.n	800c4f8 <dir_find+0x106>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6a1b      	ldr	r3, [r3, #32]
 800c4d0:	330d      	adds	r3, #13
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	7d3a      	ldrb	r2, [r7, #20]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d10e      	bne.n	800c4f8 <dir_find+0x106>
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6a1b      	ldr	r3, [r3, #32]
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	f7ff fdfd 	bl	800c0e4 <cmp_lfn>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d003      	beq.n	800c4f8 <dir_find+0x106>
 800c4f0:	7d7b      	ldrb	r3, [r7, #21]
 800c4f2:	3b01      	subs	r3, #1
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	e000      	b.n	800c4fa <dir_find+0x108>
 800c4f8:	23ff      	movs	r3, #255	@ 0xff
 800c4fa:	757b      	strb	r3, [r7, #21]
 800c4fc:	e024      	b.n	800c548 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c4fe:	7d7b      	ldrb	r3, [r7, #21]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d109      	bne.n	800c518 <dir_find+0x126>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a1b      	ldr	r3, [r3, #32]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff ff51 	bl	800c3b0 <sum_sfn>
 800c50e:	4603      	mov	r3, r0
 800c510:	461a      	mov	r2, r3
 800c512:	7d3b      	ldrb	r3, [r7, #20]
 800c514:	4293      	cmp	r3, r2
 800c516:	d024      	beq.n	800c562 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d10a      	bne.n	800c53c <dir_find+0x14a>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a18      	ldr	r0, [r3, #32]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	3324      	adds	r3, #36	@ 0x24
 800c52e:	220b      	movs	r2, #11
 800c530:	4619      	mov	r1, r3
 800c532:	f7fe fea1 	bl	800b278 <mem_cmp>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d014      	beq.n	800c566 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c53c:	23ff      	movs	r3, #255	@ 0xff
 800c53e:	757b      	strb	r3, [r7, #21]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f04f 32ff 	mov.w	r2, #4294967295
 800c546:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c548:	2100      	movs	r1, #0
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f7ff fc7e 	bl	800be4c <dir_next>
 800c550:	4603      	mov	r3, r0
 800c552:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b00      	cmp	r3, #0
 800c558:	f43f af65 	beq.w	800c426 <dir_find+0x34>
 800c55c:	e004      	b.n	800c568 <dir_find+0x176>
		if (res != FR_OK) break;
 800c55e:	bf00      	nop
 800c560:	e002      	b.n	800c568 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c562:	bf00      	nop
 800c564:	e000      	b.n	800c568 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c566:	bf00      	nop

	return res;
 800c568:	7dfb      	ldrb	r3, [r7, #23]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08c      	sub	sp, #48	@ 0x30
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c588:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <dir_register+0x20>
 800c590:	2306      	movs	r3, #6
 800c592:	e0e0      	b.n	800c756 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c594:	2300      	movs	r3, #0
 800c596:	627b      	str	r3, [r7, #36]	@ 0x24
 800c598:	e002      	b.n	800c5a0 <dir_register+0x2c>
 800c59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c59c:	3301      	adds	r3, #1
 800c59e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	68da      	ldr	r2, [r3, #12]
 800c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a6:	005b      	lsls	r3, r3, #1
 800c5a8:	4413      	add	r3, r2
 800c5aa:	881b      	ldrh	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1f4      	bne.n	800c59a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	220c      	movs	r2, #12
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7fe fe1f 	bl	800b200 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c5c2:	7dfb      	ldrb	r3, [r7, #23]
 800c5c4:	f003 0301 	and.w	r3, r3, #1
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d032      	beq.n	800c632 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2240      	movs	r2, #64	@ 0x40
 800c5d0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5d8:	e016      	b.n	800c608 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	f107 010c 	add.w	r1, r7, #12
 800c5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ea:	f7ff fe53 	bl	800c294 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff feff 	bl	800c3f2 <dir_find>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800c5fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d106      	bne.n	800c610 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	3301      	adds	r3, #1
 800c606:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	2b63      	cmp	r3, #99	@ 0x63
 800c60c:	d9e5      	bls.n	800c5da <dir_register+0x66>
 800c60e:	e000      	b.n	800c612 <dir_register+0x9e>
			if (res != FR_OK) break;
 800c610:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	2b64      	cmp	r3, #100	@ 0x64
 800c616:	d101      	bne.n	800c61c <dir_register+0xa8>
 800c618:	2307      	movs	r3, #7
 800c61a:	e09c      	b.n	800c756 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c61c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c620:	2b04      	cmp	r3, #4
 800c622:	d002      	beq.n	800c62a <dir_register+0xb6>
 800c624:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c628:	e095      	b.n	800c756 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c62a:	7dfa      	ldrb	r2, [r7, #23]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c632:	7dfb      	ldrb	r3, [r7, #23]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d007      	beq.n	800c64c <dir_register+0xd8>
 800c63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c63e:	330c      	adds	r3, #12
 800c640:	4a47      	ldr	r2, [pc, #284]	@ (800c760 <dir_register+0x1ec>)
 800c642:	fba2 2303 	umull	r2, r3, r2, r3
 800c646:	089b      	lsrs	r3, r3, #2
 800c648:	3301      	adds	r3, #1
 800c64a:	e000      	b.n	800c64e <dir_register+0xda>
 800c64c:	2301      	movs	r3, #1
 800c64e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c650:	6a39      	ldr	r1, [r7, #32]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff fcbf 	bl	800bfd6 <dir_alloc>
 800c658:	4603      	mov	r3, r0
 800c65a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c65e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c662:	2b00      	cmp	r3, #0
 800c664:	d148      	bne.n	800c6f8 <dir_register+0x184>
 800c666:	6a3b      	ldr	r3, [r7, #32]
 800c668:	3b01      	subs	r3, #1
 800c66a:	623b      	str	r3, [r7, #32]
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d042      	beq.n	800c6f8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	695a      	ldr	r2, [r3, #20]
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	015b      	lsls	r3, r3, #5
 800c67a:	1ad3      	subs	r3, r2, r3
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff fb69 	bl	800bd56 <dir_sdi>
 800c684:	4603      	mov	r3, r0
 800c686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c68a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d132      	bne.n	800c6f8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	3324      	adds	r3, #36	@ 0x24
 800c696:	4618      	mov	r0, r3
 800c698:	f7ff fe8a 	bl	800c3b0 <sum_sfn>
 800c69c:	4603      	mov	r3, r0
 800c69e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	69db      	ldr	r3, [r3, #28]
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	69f8      	ldr	r0, [r7, #28]
 800c6a8:	f7fe ffd8 	bl	800b65c <move_window>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800c6b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d11d      	bne.n	800c6f6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	68d8      	ldr	r0, [r3, #12]
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a19      	ldr	r1, [r3, #32]
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	7efb      	ldrb	r3, [r7, #27]
 800c6c8:	f7ff fd7c 	bl	800c1c4 <put_lfn>
				fs->wflag = 1;
 800c6cc:	69fb      	ldr	r3, [r7, #28]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f7ff fbb9 	bl	800be4c <dir_next>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800c6e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d107      	bne.n	800c6f8 <dir_register+0x184>
 800c6e8:	6a3b      	ldr	r3, [r7, #32]
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	623b      	str	r3, [r7, #32]
 800c6ee:	6a3b      	ldr	r3, [r7, #32]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1d5      	bne.n	800c6a0 <dir_register+0x12c>
 800c6f4:	e000      	b.n	800c6f8 <dir_register+0x184>
				if (res != FR_OK) break;
 800c6f6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c6f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d128      	bne.n	800c752 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	69db      	ldr	r3, [r3, #28]
 800c704:	4619      	mov	r1, r3
 800c706:	69f8      	ldr	r0, [r7, #28]
 800c708:	f7fe ffa8 	bl	800b65c <move_window>
 800c70c:	4603      	mov	r3, r0
 800c70e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800c712:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c716:	2b00      	cmp	r3, #0
 800c718:	d11b      	bne.n	800c752 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6a1b      	ldr	r3, [r3, #32]
 800c71e:	2220      	movs	r2, #32
 800c720:	2100      	movs	r1, #0
 800c722:	4618      	mov	r0, r3
 800c724:	f7fe fd8d 	bl	800b242 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6a18      	ldr	r0, [r3, #32]
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3324      	adds	r3, #36	@ 0x24
 800c730:	220b      	movs	r2, #11
 800c732:	4619      	mov	r1, r3
 800c734:	f7fe fd64 	bl	800b200 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a1b      	ldr	r3, [r3, #32]
 800c742:	330c      	adds	r3, #12
 800c744:	f002 0218 	and.w	r2, r2, #24
 800c748:	b2d2      	uxtb	r2, r2
 800c74a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	2201      	movs	r2, #1
 800c750:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c752:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c756:	4618      	mov	r0, r3
 800c758:	3730      	adds	r7, #48	@ 0x30
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	4ec4ec4f 	.word	0x4ec4ec4f

0800c764 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b088      	sub	sp, #32
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 80ca 	beq.w	800c918 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c78c:	d032      	beq.n	800c7f4 <get_fileinfo+0x90>
			i = j = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	61bb      	str	r3, [r7, #24]
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c796:	e01b      	b.n	800c7d0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c798:	89fb      	ldrh	r3, [r7, #14]
 800c79a:	2100      	movs	r1, #0
 800c79c:	4618      	mov	r0, r3
 800c79e:	f001 fc17 	bl	800dfd0 <ff_convert>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c7a6:	89fb      	ldrh	r3, [r7, #14]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <get_fileinfo+0x4e>
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61fb      	str	r3, [r7, #28]
 800c7b0:	e01a      	b.n	800c7e8 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	2bfe      	cmp	r3, #254	@ 0xfe
 800c7b6:	d902      	bls.n	800c7be <get_fileinfo+0x5a>
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	61fb      	str	r3, [r7, #28]
 800c7bc:	e014      	b.n	800c7e8 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	1c5a      	adds	r2, r3, #1
 800c7c2:	61fa      	str	r2, [r7, #28]
 800c7c4:	89fa      	ldrh	r2, [r7, #14]
 800c7c6:	b2d1      	uxtb	r1, r2
 800c7c8:	683a      	ldr	r2, [r7, #0]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	460a      	mov	r2, r1
 800c7ce:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	1c59      	adds	r1, r3, #1
 800c7d8:	61b9      	str	r1, [r7, #24]
 800c7da:	005b      	lsls	r3, r3, #1
 800c7dc:	4413      	add	r3, r2
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	81fb      	strh	r3, [r7, #14]
 800c7e2:	89fb      	ldrh	r3, [r7, #14]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1d7      	bne.n	800c798 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c7e8:	683a      	ldr	r2, [r7, #0]
 800c7ea:	69fb      	ldr	r3, [r7, #28]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	3316      	adds	r3, #22
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	61bb      	str	r3, [r7, #24]
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c7fc:	683a      	ldr	r2, [r7, #0]
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	4413      	add	r3, r2
 800c802:	3316      	adds	r3, #22
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c808:	e04d      	b.n	800c8a6 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6a1a      	ldr	r2, [r3, #32]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	1c59      	adds	r1, r3, #1
 800c812:	61f9      	str	r1, [r7, #28]
 800c814:	4413      	add	r3, r2
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c81a:	7dfb      	ldrb	r3, [r7, #23]
 800c81c:	2b20      	cmp	r3, #32
 800c81e:	d041      	beq.n	800c8a4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	2b05      	cmp	r3, #5
 800c824:	d101      	bne.n	800c82a <get_fileinfo+0xc6>
 800c826:	23e5      	movs	r3, #229	@ 0xe5
 800c828:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2b09      	cmp	r3, #9
 800c82e:	d10f      	bne.n	800c850 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800c830:	89bb      	ldrh	r3, [r7, #12]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d105      	bne.n	800c842 <get_fileinfo+0xde>
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	4413      	add	r3, r2
 800c83c:	3316      	adds	r3, #22
 800c83e:	222e      	movs	r2, #46	@ 0x2e
 800c840:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	1c5a      	adds	r2, r3, #1
 800c846:	61ba      	str	r2, [r7, #24]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	4413      	add	r3, r2
 800c84c:	222e      	movs	r2, #46	@ 0x2e
 800c84e:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	4413      	add	r3, r2
 800c856:	3309      	adds	r3, #9
 800c858:	7dfa      	ldrb	r2, [r7, #23]
 800c85a:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c85c:	89bb      	ldrh	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d11c      	bne.n	800c89c <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c862:	7dfb      	ldrb	r3, [r7, #23]
 800c864:	2b40      	cmp	r3, #64	@ 0x40
 800c866:	d913      	bls.n	800c890 <get_fileinfo+0x12c>
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b5a      	cmp	r3, #90	@ 0x5a
 800c86c:	d810      	bhi.n	800c890 <get_fileinfo+0x12c>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	330c      	adds	r3, #12
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	2b08      	cmp	r3, #8
 800c87c:	d901      	bls.n	800c882 <get_fileinfo+0x11e>
 800c87e:	2310      	movs	r3, #16
 800c880:	e000      	b.n	800c884 <get_fileinfo+0x120>
 800c882:	2308      	movs	r3, #8
 800c884:	4013      	ands	r3, r2
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800c88a:	7dfb      	ldrb	r3, [r7, #23]
 800c88c:	3320      	adds	r3, #32
 800c88e:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c890:	683a      	ldr	r2, [r7, #0]
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	4413      	add	r3, r2
 800c896:	3316      	adds	r3, #22
 800c898:	7dfa      	ldrb	r2, [r7, #23]
 800c89a:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	e000      	b.n	800c8a6 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c8a4:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	2b0a      	cmp	r3, #10
 800c8aa:	d9ae      	bls.n	800c80a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800c8ac:	89bb      	ldrh	r3, [r7, #12]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10d      	bne.n	800c8ce <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	4413      	add	r3, r2
 800c8b8:	3316      	adds	r3, #22
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	330c      	adds	r3, #12
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d101      	bne.n	800c8ce <get_fileinfo+0x16a>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c8ce:	683a      	ldr	r2, [r7, #0]
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	3309      	adds	r3, #9
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6a1b      	ldr	r3, [r3, #32]
 800c8de:	7ada      	ldrb	r2, [r3, #11]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	6a1b      	ldr	r3, [r3, #32]
 800c8e8:	331c      	adds	r3, #28
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fe fc1e 	bl	800b12c <ld_dword>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	3316      	adds	r3, #22
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe fc15 	bl	800b12c <ld_dword>
 800c902:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	b29a      	uxth	r2, r3
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	80da      	strh	r2, [r3, #6]
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	0c1b      	lsrs	r3, r3, #16
 800c910:	b29a      	uxth	r2, r3
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	809a      	strh	r2, [r3, #4]
 800c916:	e000      	b.n	800c91a <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c918:	bf00      	nop
}
 800c91a:	3720      	adds	r7, #32
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08a      	sub	sp, #40	@ 0x28
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	613b      	str	r3, [r7, #16]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	1c5a      	adds	r2, r3, #1
 800c944:	61ba      	str	r2, [r7, #24]
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4413      	add	r3, r2
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c94e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c950:	2b1f      	cmp	r3, #31
 800c952:	d940      	bls.n	800c9d6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c956:	2b2f      	cmp	r3, #47	@ 0x2f
 800c958:	d006      	beq.n	800c968 <create_name+0x48>
 800c95a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c95c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c95e:	d110      	bne.n	800c982 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c960:	e002      	b.n	800c968 <create_name+0x48>
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	3301      	adds	r3, #1
 800c966:	61bb      	str	r3, [r7, #24]
 800c968:	693a      	ldr	r2, [r7, #16]
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	4413      	add	r3, r2
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	2b2f      	cmp	r3, #47	@ 0x2f
 800c972:	d0f6      	beq.n	800c962 <create_name+0x42>
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	4413      	add	r3, r2
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c97e:	d0f0      	beq.n	800c962 <create_name+0x42>
			break;
 800c980:	e02a      	b.n	800c9d8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2bfe      	cmp	r3, #254	@ 0xfe
 800c986:	d901      	bls.n	800c98c <create_name+0x6c>
 800c988:	2306      	movs	r3, #6
 800c98a:	e17d      	b.n	800cc88 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c98c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c992:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c994:	2101      	movs	r1, #1
 800c996:	4618      	mov	r0, r3
 800c998:	f001 fb1a 	bl	800dfd0 <ff_convert>
 800c99c:	4603      	mov	r3, r0
 800c99e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c9a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d101      	bne.n	800c9aa <create_name+0x8a>
 800c9a6:	2306      	movs	r3, #6
 800c9a8:	e16e      	b.n	800cc88 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c9aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800c9ae:	d809      	bhi.n	800c9c4 <create_name+0xa4>
 800c9b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	488d      	ldr	r0, [pc, #564]	@ (800cbec <create_name+0x2cc>)
 800c9b6:	f7fe fc86 	bl	800b2c6 <chk_chr>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d001      	beq.n	800c9c4 <create_name+0xa4>
 800c9c0:	2306      	movs	r3, #6
 800c9c2:	e161      	b.n	800cc88 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	617a      	str	r2, [r7, #20]
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c9d2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c9d4:	e7b4      	b.n	800c940 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c9d6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c9d8:	693a      	ldr	r2, [r7, #16]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	441a      	add	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c9e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9e4:	2b1f      	cmp	r3, #31
 800c9e6:	d801      	bhi.n	800c9ec <create_name+0xcc>
 800c9e8:	2304      	movs	r3, #4
 800c9ea:	e000      	b.n	800c9ee <create_name+0xce>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c9f2:	e011      	b.n	800ca18 <create_name+0xf8>
		w = lfn[di - 1];
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	005b      	lsls	r3, r3, #1
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4413      	add	r3, r2
 800ca02:	881b      	ldrh	r3, [r3, #0]
 800ca04:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ca06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca08:	2b20      	cmp	r3, #32
 800ca0a:	d002      	beq.n	800ca12 <create_name+0xf2>
 800ca0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca10:	d106      	bne.n	800ca20 <create_name+0x100>
		di--;
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	3b01      	subs	r3, #1
 800ca16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d1ea      	bne.n	800c9f4 <create_name+0xd4>
 800ca1e:	e000      	b.n	800ca22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ca20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	005b      	lsls	r3, r3, #1
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	4413      	add	r3, r2
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <create_name+0x118>
 800ca34:	2306      	movs	r3, #6
 800ca36:	e127      	b.n	800cc88 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3324      	adds	r3, #36	@ 0x24
 800ca3c:	220b      	movs	r2, #11
 800ca3e:	2120      	movs	r1, #32
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fe fbfe 	bl	800b242 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ca46:	2300      	movs	r3, #0
 800ca48:	61bb      	str	r3, [r7, #24]
 800ca4a:	e002      	b.n	800ca52 <create_name+0x132>
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	61bb      	str	r3, [r7, #24]
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	68fa      	ldr	r2, [r7, #12]
 800ca58:	4413      	add	r3, r2
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	2b20      	cmp	r3, #32
 800ca5e:	d0f5      	beq.n	800ca4c <create_name+0x12c>
 800ca60:	69bb      	ldr	r3, [r7, #24]
 800ca62:	005b      	lsls	r3, r3, #1
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	4413      	add	r3, r2
 800ca68:	881b      	ldrh	r3, [r3, #0]
 800ca6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca6c:	d0ee      	beq.n	800ca4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d009      	beq.n	800ca88 <create_name+0x168>
 800ca74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca78:	f043 0303 	orr.w	r3, r3, #3
 800ca7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ca80:	e002      	b.n	800ca88 <create_name+0x168>
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	617b      	str	r3, [r7, #20]
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d009      	beq.n	800caa2 <create_name+0x182>
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ca94:	3b01      	subs	r3, #1
 800ca96:	005b      	lsls	r3, r3, #1
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800caa0:	d1ef      	bne.n	800ca82 <create_name+0x162>

	i = b = 0; ni = 8;
 800caa2:	2300      	movs	r3, #0
 800caa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800caa8:	2300      	movs	r3, #0
 800caaa:	623b      	str	r3, [r7, #32]
 800caac:	2308      	movs	r3, #8
 800caae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	61ba      	str	r2, [r7, #24]
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	4413      	add	r3, r2
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800cac0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f000 8090 	beq.w	800cbe8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800cac8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caca:	2b20      	cmp	r3, #32
 800cacc:	d006      	beq.n	800cadc <create_name+0x1bc>
 800cace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cad2:	d10a      	bne.n	800caea <create_name+0x1ca>
 800cad4:	69ba      	ldr	r2, [r7, #24]
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	429a      	cmp	r2, r3
 800cada:	d006      	beq.n	800caea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800cadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cae0:	f043 0303 	orr.w	r3, r3, #3
 800cae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cae8:	e07d      	b.n	800cbe6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800caea:	6a3a      	ldr	r2, [r7, #32]
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d203      	bcs.n	800cafa <create_name+0x1da>
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d123      	bne.n	800cb42 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	2b0b      	cmp	r3, #11
 800cafe:	d106      	bne.n	800cb0e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800cb00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb04:	f043 0303 	orr.w	r3, r3, #3
 800cb08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb0c:	e075      	b.n	800cbfa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800cb0e:	69ba      	ldr	r2, [r7, #24]
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d005      	beq.n	800cb22 <create_name+0x202>
 800cb16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb1a:	f043 0303 	orr.w	r3, r3, #3
 800cb1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800cb22:	69ba      	ldr	r2, [r7, #24]
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d866      	bhi.n	800cbf8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	61bb      	str	r3, [r7, #24]
 800cb2e:	2308      	movs	r3, #8
 800cb30:	623b      	str	r3, [r7, #32]
 800cb32:	230b      	movs	r3, #11
 800cb34:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800cb36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb3a:	009b      	lsls	r3, r3, #2
 800cb3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cb40:	e051      	b.n	800cbe6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800cb42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb44:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb46:	d914      	bls.n	800cb72 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cb48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb4a:	2100      	movs	r1, #0
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f001 fa3f 	bl	800dfd0 <ff_convert>
 800cb52:	4603      	mov	r3, r0
 800cb54:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cb56:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <create_name+0x246>
 800cb5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb5e:	3b80      	subs	r3, #128	@ 0x80
 800cb60:	4a23      	ldr	r2, [pc, #140]	@ (800cbf0 <create_name+0x2d0>)
 800cb62:	5cd3      	ldrb	r3, [r2, r3]
 800cb64:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800cb66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb6a:	f043 0302 	orr.w	r3, r3, #2
 800cb6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cb72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d007      	beq.n	800cb88 <create_name+0x268>
 800cb78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	481d      	ldr	r0, [pc, #116]	@ (800cbf4 <create_name+0x2d4>)
 800cb7e:	f7fe fba2 	bl	800b2c6 <chk_chr>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d008      	beq.n	800cb9a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cb88:	235f      	movs	r3, #95	@ 0x5f
 800cb8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb90:	f043 0303 	orr.w	r3, r3, #3
 800cb94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cb98:	e01b      	b.n	800cbd2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cb9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cb9c:	2b40      	cmp	r3, #64	@ 0x40
 800cb9e:	d909      	bls.n	800cbb4 <create_name+0x294>
 800cba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cba2:	2b5a      	cmp	r3, #90	@ 0x5a
 800cba4:	d806      	bhi.n	800cbb4 <create_name+0x294>
					b |= 2;
 800cba6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbaa:	f043 0302 	orr.w	r3, r3, #2
 800cbae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbb2:	e00e      	b.n	800cbd2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cbb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbb6:	2b60      	cmp	r3, #96	@ 0x60
 800cbb8:	d90b      	bls.n	800cbd2 <create_name+0x2b2>
 800cbba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbbc:	2b7a      	cmp	r3, #122	@ 0x7a
 800cbbe:	d808      	bhi.n	800cbd2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cbc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cbc4:	f043 0301 	orr.w	r3, r3, #1
 800cbc8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cbcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cbce:	3b20      	subs	r3, #32
 800cbd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800cbd2:	6a3b      	ldr	r3, [r7, #32]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	623a      	str	r2, [r7, #32]
 800cbd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cbda:	b2d1      	uxtb	r1, r2
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	4413      	add	r3, r2
 800cbe0:	460a      	mov	r2, r1
 800cbe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cbe6:	e763      	b.n	800cab0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cbe8:	bf00      	nop
 800cbea:	e006      	b.n	800cbfa <create_name+0x2da>
 800cbec:	08013e18 	.word	0x08013e18
 800cbf0:	08014c30 	.word	0x08014c30
 800cbf4:	08013e24 	.word	0x08013e24
			if (si > di) break;			/* No extension */
 800cbf8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc00:	2be5      	cmp	r3, #229	@ 0xe5
 800cc02:	d103      	bne.n	800cc0c <create_name+0x2ec>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2205      	movs	r2, #5
 800cc08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800cc0c:	69fb      	ldr	r3, [r7, #28]
 800cc0e:	2b08      	cmp	r3, #8
 800cc10:	d104      	bne.n	800cc1c <create_name+0x2fc>
 800cc12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cc1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc20:	f003 030c 	and.w	r3, r3, #12
 800cc24:	2b0c      	cmp	r3, #12
 800cc26:	d005      	beq.n	800cc34 <create_name+0x314>
 800cc28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	2b03      	cmp	r3, #3
 800cc32:	d105      	bne.n	800cc40 <create_name+0x320>
 800cc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc38:	f043 0302 	orr.w	r3, r3, #2
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d117      	bne.n	800cc7c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cc4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc50:	f003 0303 	and.w	r3, r3, #3
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d105      	bne.n	800cc64 <create_name+0x344>
 800cc58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc5c:	f043 0310 	orr.w	r3, r3, #16
 800cc60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cc64:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc68:	f003 030c 	and.w	r3, r3, #12
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d105      	bne.n	800cc7c <create_name+0x35c>
 800cc70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc74:	f043 0308 	orr.w	r3, r3, #8
 800cc78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cc82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800cc86:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3728      	adds	r7, #40	@ 0x28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b086      	sub	sp, #24
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cca4:	e002      	b.n	800ccac <follow_path+0x1c>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	3301      	adds	r3, #1
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	2b2f      	cmp	r3, #47	@ 0x2f
 800ccb2:	d0f8      	beq.n	800cca6 <follow_path+0x16>
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b5c      	cmp	r3, #92	@ 0x5c
 800ccba:	d0f4      	beq.n	800cca6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	2b1f      	cmp	r3, #31
 800ccc8:	d80a      	bhi.n	800cce0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2280      	movs	r2, #128	@ 0x80
 800ccce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f7ff f83e 	bl	800bd56 <dir_sdi>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	75fb      	strb	r3, [r7, #23]
 800ccde:	e043      	b.n	800cd68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cce0:	463b      	mov	r3, r7
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f7ff fe1b 	bl	800c920 <create_name>
 800ccea:	4603      	mov	r3, r0
 800ccec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d134      	bne.n	800cd5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7ff fb7c 	bl	800c3f2 <dir_find>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cd04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d00a      	beq.n	800cd22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cd0c:	7dfb      	ldrb	r3, [r7, #23]
 800cd0e:	2b04      	cmp	r3, #4
 800cd10:	d127      	bne.n	800cd62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cd12:	7afb      	ldrb	r3, [r7, #11]
 800cd14:	f003 0304 	and.w	r3, r3, #4
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d122      	bne.n	800cd62 <follow_path+0xd2>
 800cd1c:	2305      	movs	r3, #5
 800cd1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cd20:	e01f      	b.n	800cd62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd22:	7afb      	ldrb	r3, [r7, #11]
 800cd24:	f003 0304 	and.w	r3, r3, #4
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d11c      	bne.n	800cd66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	799b      	ldrb	r3, [r3, #6]
 800cd30:	f003 0310 	and.w	r3, r3, #16
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d102      	bne.n	800cd3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cd38:	2305      	movs	r3, #5
 800cd3a:	75fb      	strb	r3, [r7, #23]
 800cd3c:	e014      	b.n	800cd68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	695b      	ldr	r3, [r3, #20]
 800cd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd4c:	4413      	add	r3, r2
 800cd4e:	4619      	mov	r1, r3
 800cd50:	68f8      	ldr	r0, [r7, #12]
 800cd52:	f7ff f987 	bl	800c064 <ld_clust>
 800cd56:	4602      	mov	r2, r0
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd5c:	e7c0      	b.n	800cce0 <follow_path+0x50>
			if (res != FR_OK) break;
 800cd5e:	bf00      	nop
 800cd60:	e002      	b.n	800cd68 <follow_path+0xd8>
				break;
 800cd62:	bf00      	nop
 800cd64:	e000      	b.n	800cd68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd66:	bf00      	nop
			}
		}
	}

	return res;
 800cd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3718      	adds	r7, #24
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b087      	sub	sp, #28
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d031      	beq.n	800cdec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	617b      	str	r3, [r7, #20]
 800cd8e:	e002      	b.n	800cd96 <get_ldnumber+0x24>
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	3301      	adds	r3, #1
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	2b1f      	cmp	r3, #31
 800cd9c:	d903      	bls.n	800cda6 <get_ldnumber+0x34>
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	2b3a      	cmp	r3, #58	@ 0x3a
 800cda4:	d1f4      	bne.n	800cd90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b3a      	cmp	r3, #58	@ 0x3a
 800cdac:	d11c      	bne.n	800cde8 <get_ldnumber+0x76>
			tp = *path;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	60fa      	str	r2, [r7, #12]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	3b30      	subs	r3, #48	@ 0x30
 800cdbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b09      	cmp	r3, #9
 800cdc4:	d80e      	bhi.n	800cde4 <get_ldnumber+0x72>
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d10a      	bne.n	800cde4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d107      	bne.n	800cde4 <get_ldnumber+0x72>
					vol = (int)i;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	3301      	adds	r3, #1
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	697a      	ldr	r2, [r7, #20]
 800cde2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	e002      	b.n	800cdee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cde8:	2300      	movs	r3, #0
 800cdea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cdec:	693b      	ldr	r3, [r7, #16]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	371c      	adds	r7, #28
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	70da      	strb	r2, [r3, #3]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ce12:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7fe fc20 	bl	800b65c <move_window>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <check_fs+0x2a>
 800ce22:	2304      	movs	r3, #4
 800ce24:	e038      	b.n	800ce98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	3334      	adds	r3, #52	@ 0x34
 800ce2a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe f964 	bl	800b0fc <ld_word>
 800ce34:	4603      	mov	r3, r0
 800ce36:	461a      	mov	r2, r3
 800ce38:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d001      	beq.n	800ce44 <check_fs+0x48>
 800ce40:	2303      	movs	r3, #3
 800ce42:	e029      	b.n	800ce98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce4a:	2be9      	cmp	r3, #233	@ 0xe9
 800ce4c:	d009      	beq.n	800ce62 <check_fs+0x66>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce54:	2beb      	cmp	r3, #235	@ 0xeb
 800ce56:	d11e      	bne.n	800ce96 <check_fs+0x9a>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ce5e:	2b90      	cmp	r3, #144	@ 0x90
 800ce60:	d119      	bne.n	800ce96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	3334      	adds	r3, #52	@ 0x34
 800ce66:	3336      	adds	r3, #54	@ 0x36
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7fe f95f 	bl	800b12c <ld_dword>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce74:	4a0a      	ldr	r2, [pc, #40]	@ (800cea0 <check_fs+0xa4>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d101      	bne.n	800ce7e <check_fs+0x82>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	e00c      	b.n	800ce98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	3334      	adds	r3, #52	@ 0x34
 800ce82:	3352      	adds	r3, #82	@ 0x52
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fe f951 	bl	800b12c <ld_dword>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4a05      	ldr	r2, [pc, #20]	@ (800cea4 <check_fs+0xa8>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d101      	bne.n	800ce96 <check_fs+0x9a>
 800ce92:	2300      	movs	r3, #0
 800ce94:	e000      	b.n	800ce98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce96:	2302      	movs	r3, #2
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	00544146 	.word	0x00544146
 800cea4:	33544146 	.word	0x33544146

0800cea8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b096      	sub	sp, #88	@ 0x58
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff ff58 	bl	800cd72 <get_ldnumber>
 800cec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	da01      	bge.n	800cece <find_volume+0x26>
 800ceca:	230b      	movs	r3, #11
 800cecc:	e22d      	b.n	800d32a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cece:	4aa1      	ldr	r2, [pc, #644]	@ (800d154 <find_volume+0x2ac>)
 800ced0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ced2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ced6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ced8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <find_volume+0x3a>
 800cede:	230c      	movs	r3, #12
 800cee0:	e223      	b.n	800d32a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cee6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cee8:	79fb      	ldrb	r3, [r7, #7]
 800ceea:	f023 0301 	bic.w	r3, r3, #1
 800ceee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d01a      	beq.n	800cf2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cefa:	785b      	ldrb	r3, [r3, #1]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fe f85d 	bl	800afbc <disk_status>
 800cf02:	4603      	mov	r3, r0
 800cf04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cf08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf0c:	f003 0301 	and.w	r3, r3, #1
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10c      	bne.n	800cf2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cf14:	79fb      	ldrb	r3, [r7, #7]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d007      	beq.n	800cf2a <find_volume+0x82>
 800cf1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cf26:	230a      	movs	r3, #10
 800cf28:	e1ff      	b.n	800d32a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e1fd      	b.n	800d32a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf30:	2200      	movs	r2, #0
 800cf32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cf34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf3e:	785b      	ldrb	r3, [r3, #1]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7fe f855 	bl	800aff0 <disk_initialize>
 800cf46:	4603      	mov	r3, r0
 800cf48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e1e6      	b.n	800d32a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf5c:	79fb      	ldrb	r3, [r7, #7]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d007      	beq.n	800cf72 <find_volume+0xca>
 800cf62:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf66:	f003 0304 	and.w	r3, r3, #4
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf6e:	230a      	movs	r3, #10
 800cf70:	e1db      	b.n	800d32a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cf78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cf7a:	f7ff ff3f 	bl	800cdfc <check_fs>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800cf88:	2b02      	cmp	r3, #2
 800cf8a:	d149      	bne.n	800d020 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf90:	e01e      	b.n	800cfd0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf94:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800cf98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cfa0:	4413      	add	r3, r2
 800cfa2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d006      	beq.n	800cfbc <find_volume+0x114>
 800cfae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfb0:	3308      	adds	r3, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe f8ba 	bl	800b12c <ld_dword>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	e000      	b.n	800cfbe <find_volume+0x116>
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfc0:	009b      	lsls	r3, r3, #2
 800cfc2:	3358      	adds	r3, #88	@ 0x58
 800cfc4:	443b      	add	r3, r7
 800cfc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfcc:	3301      	adds	r3, #1
 800cfce:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfd2:	2b03      	cmp	r3, #3
 800cfd4:	d9dd      	bls.n	800cf92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800cfda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <find_volume+0x13e>
 800cfe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe2:	3b01      	subs	r3, #1
 800cfe4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cfe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	3358      	adds	r3, #88	@ 0x58
 800cfec:	443b      	add	r3, r7
 800cfee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cff2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d005      	beq.n	800d006 <find_volume+0x15e>
 800cffa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cffc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800cffe:	f7ff fefd 	bl	800cdfc <check_fs>
 800d002:	4603      	mov	r3, r0
 800d004:	e000      	b.n	800d008 <find_volume+0x160>
 800d006:	2303      	movs	r3, #3
 800d008:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d00c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d010:	2b01      	cmp	r3, #1
 800d012:	d905      	bls.n	800d020 <find_volume+0x178>
 800d014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d016:	3301      	adds	r3, #1
 800d018:	643b      	str	r3, [r7, #64]	@ 0x40
 800d01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d01c:	2b03      	cmp	r3, #3
 800d01e:	d9e2      	bls.n	800cfe6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d020:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d024:	2b04      	cmp	r3, #4
 800d026:	d101      	bne.n	800d02c <find_volume+0x184>
 800d028:	2301      	movs	r3, #1
 800d02a:	e17e      	b.n	800d32a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d02c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d030:	2b01      	cmp	r3, #1
 800d032:	d901      	bls.n	800d038 <find_volume+0x190>
 800d034:	230d      	movs	r3, #13
 800d036:	e178      	b.n	800d32a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	3334      	adds	r3, #52	@ 0x34
 800d03c:	330b      	adds	r3, #11
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe f85c 	bl	800b0fc <ld_word>
 800d044:	4603      	mov	r3, r0
 800d046:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d04a:	d001      	beq.n	800d050 <find_volume+0x1a8>
 800d04c:	230d      	movs	r3, #13
 800d04e:	e16c      	b.n	800d32a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d052:	3334      	adds	r3, #52	@ 0x34
 800d054:	3316      	adds	r3, #22
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe f850 	bl	800b0fc <ld_word>
 800d05c:	4603      	mov	r3, r0
 800d05e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d062:	2b00      	cmp	r3, #0
 800d064:	d106      	bne.n	800d074 <find_volume+0x1cc>
 800d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d068:	3334      	adds	r3, #52	@ 0x34
 800d06a:	3324      	adds	r3, #36	@ 0x24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fe f85d 	bl	800b12c <ld_dword>
 800d072:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d076:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d078:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d07a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d082:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	789b      	ldrb	r3, [r3, #2]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d005      	beq.n	800d098 <find_volume+0x1f0>
 800d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08e:	789b      	ldrb	r3, [r3, #2]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d001      	beq.n	800d098 <find_volume+0x1f0>
 800d094:	230d      	movs	r3, #13
 800d096:	e148      	b.n	800d32a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09a:	789b      	ldrb	r3, [r3, #2]
 800d09c:	461a      	mov	r2, r3
 800d09e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0a0:	fb02 f303 	mul.w	r3, r2, r3
 800d0a4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b4:	895b      	ldrh	r3, [r3, #10]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d008      	beq.n	800d0cc <find_volume+0x224>
 800d0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0bc:	895b      	ldrh	r3, [r3, #10]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c2:	895b      	ldrh	r3, [r3, #10]
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d001      	beq.n	800d0d0 <find_volume+0x228>
 800d0cc:	230d      	movs	r3, #13
 800d0ce:	e12c      	b.n	800d32a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d2:	3334      	adds	r3, #52	@ 0x34
 800d0d4:	3311      	adds	r3, #17
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7fe f810 	bl	800b0fc <ld_word>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e6:	891b      	ldrh	r3, [r3, #8]
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d001      	beq.n	800d0f6 <find_volume+0x24e>
 800d0f2:	230d      	movs	r3, #13
 800d0f4:	e119      	b.n	800d32a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f8:	3334      	adds	r3, #52	@ 0x34
 800d0fa:	3313      	adds	r3, #19
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f7fd fffd 	bl	800b0fc <ld_word>
 800d102:	4603      	mov	r3, r0
 800d104:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d106      	bne.n	800d11a <find_volume+0x272>
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	3334      	adds	r3, #52	@ 0x34
 800d110:	3320      	adds	r3, #32
 800d112:	4618      	mov	r0, r3
 800d114:	f7fe f80a 	bl	800b12c <ld_dword>
 800d118:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d11a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11c:	3334      	adds	r3, #52	@ 0x34
 800d11e:	330e      	adds	r3, #14
 800d120:	4618      	mov	r0, r3
 800d122:	f7fd ffeb 	bl	800b0fc <ld_word>
 800d126:	4603      	mov	r3, r0
 800d128:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d12a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d101      	bne.n	800d134 <find_volume+0x28c>
 800d130:	230d      	movs	r3, #13
 800d132:	e0fa      	b.n	800d32a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d134:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d138:	4413      	add	r3, r2
 800d13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d13c:	8912      	ldrh	r2, [r2, #8]
 800d13e:	0912      	lsrs	r2, r2, #4
 800d140:	b292      	uxth	r2, r2
 800d142:	4413      	add	r3, r2
 800d144:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d14a:	429a      	cmp	r2, r3
 800d14c:	d204      	bcs.n	800d158 <find_volume+0x2b0>
 800d14e:	230d      	movs	r3, #13
 800d150:	e0eb      	b.n	800d32a <find_volume+0x482>
 800d152:	bf00      	nop
 800d154:	20000838 	.word	0x20000838
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d158:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d160:	8952      	ldrh	r2, [r2, #10]
 800d162:	fbb3 f3f2 	udiv	r3, r3, r2
 800d166:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d101      	bne.n	800d172 <find_volume+0x2ca>
 800d16e:	230d      	movs	r3, #13
 800d170:	e0db      	b.n	800d32a <find_volume+0x482>
		fmt = FS_FAT32;
 800d172:	2303      	movs	r3, #3
 800d174:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d17e:	4293      	cmp	r3, r2
 800d180:	d802      	bhi.n	800d188 <find_volume+0x2e0>
 800d182:	2302      	movs	r3, #2
 800d184:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d18a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d18e:	4293      	cmp	r3, r2
 800d190:	d802      	bhi.n	800d198 <find_volume+0x2f0>
 800d192:	2301      	movs	r3, #1
 800d194:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	1c9a      	adds	r2, r3, #2
 800d19c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d19e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1a4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d1a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d1a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1aa:	441a      	add	r2, r3
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ae:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d1b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b4:	441a      	add	r2, r3
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800d1ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d11e      	bne.n	800d200 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	3334      	adds	r3, #52	@ 0x34
 800d1c6:	332a      	adds	r3, #42	@ 0x2a
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fd ff97 	bl	800b0fc <ld_word>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d001      	beq.n	800d1d8 <find_volume+0x330>
 800d1d4:	230d      	movs	r3, #13
 800d1d6:	e0a8      	b.n	800d32a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1da:	891b      	ldrh	r3, [r3, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d001      	beq.n	800d1e4 <find_volume+0x33c>
 800d1e0:	230d      	movs	r3, #13
 800d1e2:	e0a2      	b.n	800d32a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e6:	3334      	adds	r3, #52	@ 0x34
 800d1e8:	332c      	adds	r3, #44	@ 0x2c
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd ff9e 	bl	800b12c <ld_dword>
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f8:	699b      	ldr	r3, [r3, #24]
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1fe:	e01f      	b.n	800d240 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d202:	891b      	ldrh	r3, [r3, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <find_volume+0x364>
 800d208:	230d      	movs	r3, #13
 800d20a:	e08e      	b.n	800d32a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d212:	441a      	add	r2, r3
 800d214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d216:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d218:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d103      	bne.n	800d228 <find_volume+0x380>
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	699b      	ldr	r3, [r3, #24]
 800d224:	005b      	lsls	r3, r3, #1
 800d226:	e00a      	b.n	800d23e <find_volume+0x396>
 800d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22a:	699a      	ldr	r2, [r3, #24]
 800d22c:	4613      	mov	r3, r2
 800d22e:	005b      	lsls	r3, r3, #1
 800d230:	4413      	add	r3, r2
 800d232:	085a      	lsrs	r2, r3, #1
 800d234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d236:	699b      	ldr	r3, [r3, #24]
 800d238:	f003 0301 	and.w	r3, r3, #1
 800d23c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d23e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d242:	69da      	ldr	r2, [r3, #28]
 800d244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d246:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d24a:	0a5b      	lsrs	r3, r3, #9
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d201      	bcs.n	800d254 <find_volume+0x3ac>
 800d250:	230d      	movs	r3, #13
 800d252:	e06a      	b.n	800d32a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d256:	f04f 32ff 	mov.w	r2, #4294967295
 800d25a:	615a      	str	r2, [r3, #20]
 800d25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25e:	695a      	ldr	r2, [r3, #20]
 800d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d262:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d266:	2280      	movs	r2, #128	@ 0x80
 800d268:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d26a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d149      	bne.n	800d306 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d274:	3334      	adds	r3, #52	@ 0x34
 800d276:	3330      	adds	r3, #48	@ 0x30
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fd ff3f 	bl	800b0fc <ld_word>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b01      	cmp	r3, #1
 800d282:	d140      	bne.n	800d306 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d286:	3301      	adds	r3, #1
 800d288:	4619      	mov	r1, r3
 800d28a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d28c:	f7fe f9e6 	bl	800b65c <move_window>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d137      	bne.n	800d306 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d298:	2200      	movs	r2, #0
 800d29a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d29e:	3334      	adds	r3, #52	@ 0x34
 800d2a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fd ff29 	bl	800b0fc <ld_word>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d127      	bne.n	800d306 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b8:	3334      	adds	r3, #52	@ 0x34
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd ff36 	bl	800b12c <ld_dword>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	4a1c      	ldr	r2, [pc, #112]	@ (800d334 <find_volume+0x48c>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d11e      	bne.n	800d306 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ca:	3334      	adds	r3, #52	@ 0x34
 800d2cc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fd ff2b 	bl	800b12c <ld_dword>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	4a17      	ldr	r2, [pc, #92]	@ (800d338 <find_volume+0x490>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d113      	bne.n	800d306 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e0:	3334      	adds	r3, #52	@ 0x34
 800d2e2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fd ff20 	bl	800b12c <ld_dword>
 800d2ec:	4602      	mov	r2, r0
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f4:	3334      	adds	r3, #52	@ 0x34
 800d2f6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7fd ff16 	bl	800b12c <ld_dword>
 800d300:	4602      	mov	r2, r0
 800d302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d304:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d308:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d30c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d30e:	4b0b      	ldr	r3, [pc, #44]	@ (800d33c <find_volume+0x494>)
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	3301      	adds	r3, #1
 800d314:	b29a      	uxth	r2, r3
 800d316:	4b09      	ldr	r3, [pc, #36]	@ (800d33c <find_volume+0x494>)
 800d318:	801a      	strh	r2, [r3, #0]
 800d31a:	4b08      	ldr	r3, [pc, #32]	@ (800d33c <find_volume+0x494>)
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d320:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d322:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d324:	f7fe f932 	bl	800b58c <clear_lock>
#endif
	return FR_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3758      	adds	r7, #88	@ 0x58
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	41615252 	.word	0x41615252
 800d338:	61417272 	.word	0x61417272
 800d33c:	2000083c 	.word	0x2000083c

0800d340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b084      	sub	sp, #16
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
 800d348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d34a:	2309      	movs	r3, #9
 800d34c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d01c      	beq.n	800d38e <validate+0x4e>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d018      	beq.n	800d38e <validate+0x4e>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d013      	beq.n	800d38e <validate+0x4e>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	889a      	ldrh	r2, [r3, #4]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	88db      	ldrh	r3, [r3, #6]
 800d370:	429a      	cmp	r2, r3
 800d372:	d10c      	bne.n	800d38e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	785b      	ldrb	r3, [r3, #1]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fd fe1e 	bl	800afbc <disk_status>
 800d380:	4603      	mov	r3, r0
 800d382:	f003 0301 	and.w	r3, r3, #1
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <validate+0x4e>
			res = FR_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d102      	bne.n	800d39a <validate+0x5a>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	e000      	b.n	800d39c <validate+0x5c>
 800d39a:	2300      	movs	r3, #0
 800d39c:	683a      	ldr	r2, [r7, #0]
 800d39e:	6013      	str	r3, [r2, #0]
	return res;
 800d3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3710      	adds	r7, #16
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
	...

0800d3ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b088      	sub	sp, #32
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	60f8      	str	r0, [r7, #12]
 800d3b4:	60b9      	str	r1, [r7, #8]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d3be:	f107 0310 	add.w	r3, r7, #16
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7ff fcd5 	bl	800cd72 <get_ldnumber>
 800d3c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	da01      	bge.n	800d3d4 <f_mount+0x28>
 800d3d0:	230b      	movs	r3, #11
 800d3d2:	e02b      	b.n	800d42c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3d4:	4a17      	ldr	r2, [pc, #92]	@ (800d434 <f_mount+0x88>)
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d005      	beq.n	800d3f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3e4:	69b8      	ldr	r0, [r7, #24]
 800d3e6:	f7fe f8d1 	bl	800b58c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d002      	beq.n	800d3fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	490d      	ldr	r1, [pc, #52]	@ (800d434 <f_mount+0x88>)
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <f_mount+0x66>
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d001      	beq.n	800d416 <f_mount+0x6a>
 800d412:	2300      	movs	r3, #0
 800d414:	e00a      	b.n	800d42c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d416:	f107 010c 	add.w	r1, r7, #12
 800d41a:	f107 0308 	add.w	r3, r7, #8
 800d41e:	2200      	movs	r2, #0
 800d420:	4618      	mov	r0, r3
 800d422:	f7ff fd41 	bl	800cea8 <find_volume>
 800d426:	4603      	mov	r3, r0
 800d428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	20000838 	.word	0x20000838

0800d438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b09a      	sub	sp, #104	@ 0x68
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	60f8      	str	r0, [r7, #12]
 800d440:	60b9      	str	r1, [r7, #8]
 800d442:	4613      	mov	r3, r2
 800d444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d101      	bne.n	800d450 <f_open+0x18>
 800d44c:	2309      	movs	r3, #9
 800d44e:	e1b9      	b.n	800d7c4 <f_open+0x38c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d450:	79fb      	ldrb	r3, [r7, #7]
 800d452:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d458:	79fa      	ldrb	r2, [r7, #7]
 800d45a:	f107 0110 	add.w	r1, r7, #16
 800d45e:	f107 0308 	add.w	r3, r7, #8
 800d462:	4618      	mov	r0, r3
 800d464:	f7ff fd20 	bl	800cea8 <find_volume>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800d46e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d472:	2b00      	cmp	r3, #0
 800d474:	f040 819d 	bne.w	800d7b2 <f_open+0x37a>
		dj.obj.fs = fs;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 800d47c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800d480:	f000 fe6c 	bl	800e15c <ff_memalloc>
 800d484:	65b8      	str	r0, [r7, #88]	@ 0x58
 800d486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d101      	bne.n	800d490 <f_open+0x58>
 800d48c:	2311      	movs	r3, #17
 800d48e:	e199      	b.n	800d7c4 <f_open+0x38c>
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d494:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	f107 0314 	add.w	r3, r7, #20
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff fbf6 	bl	800cc90 <follow_path>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d4aa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d118      	bne.n	800d4e4 <f_open+0xac>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d4b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d4b6:	b25b      	sxtb	r3, r3
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	da03      	bge.n	800d4c4 <f_open+0x8c>
				res = FR_INVALID_NAME;
 800d4bc:	2306      	movs	r3, #6
 800d4be:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d4c2:	e00f      	b.n	800d4e4 <f_open+0xac>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b01      	cmp	r3, #1
 800d4c8:	bf8c      	ite	hi
 800d4ca:	2301      	movhi	r3, #1
 800d4cc:	2300      	movls	r3, #0
 800d4ce:	b2db      	uxtb	r3, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f107 0314 	add.w	r3, r7, #20
 800d4d6:	4611      	mov	r1, r2
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f7fd ff0f 	bl	800b2fc <chk_lock>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d4e4:	79fb      	ldrb	r3, [r7, #7]
 800d4e6:	f003 031c 	and.w	r3, r3, #28
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d07f      	beq.n	800d5ee <f_open+0x1b6>
			if (res != FR_OK) {					/* No file, create new */
 800d4ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d017      	beq.n	800d526 <f_open+0xee>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	d10e      	bne.n	800d51c <f_open+0xe4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d4fe:	f7fd ff59 	bl	800b3b4 <enq_lock>
 800d502:	4603      	mov	r3, r0
 800d504:	2b00      	cmp	r3, #0
 800d506:	d006      	beq.n	800d516 <f_open+0xde>
 800d508:	f107 0314 	add.w	r3, r7, #20
 800d50c:	4618      	mov	r0, r3
 800d50e:	f7ff f831 	bl	800c574 <dir_register>
 800d512:	4603      	mov	r3, r0
 800d514:	e000      	b.n	800d518 <f_open+0xe0>
 800d516:	2312      	movs	r3, #18
 800d518:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d51c:	79fb      	ldrb	r3, [r7, #7]
 800d51e:	f043 0308 	orr.w	r3, r3, #8
 800d522:	71fb      	strb	r3, [r7, #7]
 800d524:	e010      	b.n	800d548 <f_open+0x110>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d526:	7ebb      	ldrb	r3, [r7, #26]
 800d528:	f003 0311 	and.w	r3, r3, #17
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <f_open+0x100>
					res = FR_DENIED;
 800d530:	2307      	movs	r3, #7
 800d532:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d536:	e007      	b.n	800d548 <f_open+0x110>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	f003 0304 	and.w	r3, r3, #4
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d002      	beq.n	800d548 <f_open+0x110>
 800d542:	2308      	movs	r3, #8
 800d544:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d548:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d168      	bne.n	800d622 <f_open+0x1ea>
 800d550:	79fb      	ldrb	r3, [r7, #7]
 800d552:	f003 0308 	and.w	r3, r3, #8
 800d556:	2b00      	cmp	r3, #0
 800d558:	d063      	beq.n	800d622 <f_open+0x1ea>
				dw = GET_FATTIME();
 800d55a:	f7fc fff9 	bl	800a550 <get_fattime>
 800d55e:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d562:	330e      	adds	r3, #14
 800d564:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d566:	4618      	mov	r0, r3
 800d568:	f7fd fe1e 	bl	800b1a8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d56e:	3316      	adds	r3, #22
 800d570:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d572:	4618      	mov	r0, r3
 800d574:	f7fd fe18 	bl	800b1a8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d57a:	330b      	adds	r3, #11
 800d57c:	2220      	movs	r2, #32
 800d57e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe fd6c 	bl	800c064 <ld_clust>
 800d58c:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d592:	2200      	movs	r2, #0
 800d594:	4618      	mov	r0, r3
 800d596:	f7fe fd84 	bl	800c0a2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d59a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d59c:	331c      	adds	r3, #28
 800d59e:	2100      	movs	r1, #0
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f7fd fe01 	bl	800b1a8 <st_dword>
					fs->wflag = 1;
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d5ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d037      	beq.n	800d622 <f_open+0x1ea>
						dw = fs->winsect;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5b6:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800d5b8:	f107 0314 	add.w	r3, r7, #20
 800d5bc:	2200      	movs	r2, #0
 800d5be:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fe fa97 	bl	800baf4 <remove_chain>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800d5cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d126      	bne.n	800d622 <f_open+0x1ea>
							res = move_window(fs, dw);
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7fe f83f 	bl	800b65c <move_window>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d5e8:	3a01      	subs	r2, #1
 800d5ea:	611a      	str	r2, [r3, #16]
 800d5ec:	e019      	b.n	800d622 <f_open+0x1ea>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d5ee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d115      	bne.n	800d622 <f_open+0x1ea>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5f6:	7ebb      	ldrb	r3, [r7, #26]
 800d5f8:	f003 0310 	and.w	r3, r3, #16
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d003      	beq.n	800d608 <f_open+0x1d0>
					res = FR_NO_FILE;
 800d600:	2304      	movs	r3, #4
 800d602:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d606:	e00c      	b.n	800d622 <f_open+0x1ea>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d608:	79fb      	ldrb	r3, [r7, #7]
 800d60a:	f003 0302 	and.w	r3, r3, #2
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d007      	beq.n	800d622 <f_open+0x1ea>
 800d612:	7ebb      	ldrb	r3, [r7, #26]
 800d614:	f003 0301 	and.w	r3, r3, #1
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d002      	beq.n	800d622 <f_open+0x1ea>
						res = FR_DENIED;
 800d61c:	2307      	movs	r3, #7
 800d61e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800d622:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d626:	2b00      	cmp	r3, #0
 800d628:	d126      	bne.n	800d678 <f_open+0x240>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	f003 0308 	and.w	r3, r3, #8
 800d630:	2b00      	cmp	r3, #0
 800d632:	d003      	beq.n	800d63c <f_open+0x204>
				mode |= FA_MODIFIED;
 800d634:	79fb      	ldrb	r3, [r7, #7]
 800d636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d63a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800d644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	bf8c      	ite	hi
 800d650:	2301      	movhi	r3, #1
 800d652:	2300      	movls	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	461a      	mov	r2, r3
 800d658:	f107 0314 	add.w	r3, r7, #20
 800d65c:	4611      	mov	r1, r2
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fd feca 	bl	800b3f8 <inc_lock>
 800d664:	4602      	mov	r2, r0
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	691b      	ldr	r3, [r3, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d102      	bne.n	800d678 <f_open+0x240>
 800d672:	2302      	movs	r3, #2
 800d674:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d678:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f040 8095 	bne.w	800d7ac <f_open+0x374>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f7fe fceb 	bl	800c064 <ld_clust>
 800d68e:	4602      	mov	r2, r0
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d696:	331c      	adds	r3, #28
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fd fd47 	bl	800b12c <ld_dword>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6aa:	693a      	ldr	r2, [r7, #16]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	88da      	ldrh	r2, [r3, #6]
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	79fa      	ldrb	r2, [r7, #7]
 800d6bc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	3330      	adds	r3, #48	@ 0x30
 800d6d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d6d8:	2100      	movs	r1, #0
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fd fdb1 	bl	800b242 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d6e0:	79fb      	ldrb	r3, [r7, #7]
 800d6e2:	f003 0320 	and.w	r3, r3, #32
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d060      	beq.n	800d7ac <f_open+0x374>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d05c      	beq.n	800d7ac <f_open+0x374>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	895b      	ldrh	r3, [r3, #10]
 800d6fe:	025b      	lsls	r3, r3, #9
 800d700:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	689b      	ldr	r3, [r3, #8]
 800d706:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d70e:	e016      	b.n	800d73e <f_open+0x306>
					clst = get_fat(&fp->obj, clst);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d714:	4618      	mov	r0, r3
 800d716:	f7fe f85c 	bl	800b7d2 <get_fat>
 800d71a:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800d71c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d802      	bhi.n	800d728 <f_open+0x2f0>
 800d722:	2302      	movs	r3, #2
 800d724:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d728:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72e:	d102      	bne.n	800d736 <f_open+0x2fe>
 800d730:	2301      	movs	r3, #1
 800d732:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d736:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d73e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d742:	2b00      	cmp	r3, #0
 800d744:	d103      	bne.n	800d74e <f_open+0x316>
 800d746:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d748:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d74a:	429a      	cmp	r2, r3
 800d74c:	d8e0      	bhi.n	800d710 <f_open+0x2d8>
				}
				fp->clust = clst;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d752:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d754:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d127      	bne.n	800d7ac <f_open+0x374>
 800d75c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d762:	2b00      	cmp	r3, #0
 800d764:	d022      	beq.n	800d7ac <f_open+0x374>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800d76a:	4618      	mov	r0, r3
 800d76c:	f7fe f812 	bl	800b794 <clust2sect>
 800d770:	64b8      	str	r0, [r7, #72]	@ 0x48
 800d772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <f_open+0x348>
						res = FR_INT_ERR;
 800d778:	2302      	movs	r3, #2
 800d77a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800d77e:	e015      	b.n	800d7ac <f_open+0x374>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d782:	0a5a      	lsrs	r2, r3, #9
 800d784:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d786:	441a      	add	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	7858      	ldrb	r0, [r3, #1]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6a1a      	ldr	r2, [r3, #32]
 800d79a:	2301      	movs	r3, #1
 800d79c:	f7fd fc50 	bl	800b040 <disk_read>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d002      	beq.n	800d7ac <f_open+0x374>
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d7ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d7ae:	f000 fce1 	bl	800e174 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d7b2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d002      	beq.n	800d7c0 <f_open+0x388>
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3768      	adds	r7, #104	@ 0x68
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b08e      	sub	sp, #56	@ 0x38
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	60f8      	str	r0, [r7, #12]
 800d7d4:	60b9      	str	r1, [r7, #8]
 800d7d6:	607a      	str	r2, [r7, #4]
 800d7d8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f107 0214 	add.w	r2, r7, #20
 800d7ea:	4611      	mov	r1, r2
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7ff fda7 	bl	800d340 <validate>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d7f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <f_read+0x44>
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	7d5b      	ldrb	r3, [r3, #21]
 800d804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d808:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d002      	beq.n	800d816 <f_read+0x4a>
 800d810:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d814:	e115      	b.n	800da42 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	7d1b      	ldrb	r3, [r3, #20]
 800d81a:	f003 0301 	and.w	r3, r3, #1
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d101      	bne.n	800d826 <f_read+0x5a>
 800d822:	2307      	movs	r3, #7
 800d824:	e10d      	b.n	800da42 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	68da      	ldr	r2, [r3, #12]
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	699b      	ldr	r3, [r3, #24]
 800d82e:	1ad3      	subs	r3, r2, r3
 800d830:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	6a3b      	ldr	r3, [r7, #32]
 800d836:	429a      	cmp	r2, r3
 800d838:	f240 80fe 	bls.w	800da38 <f_read+0x26c>
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d840:	e0fa      	b.n	800da38 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	699b      	ldr	r3, [r3, #24]
 800d846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	f040 80c6 	bne.w	800d9dc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	0a5b      	lsrs	r3, r3, #9
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	8952      	ldrh	r2, [r2, #10]
 800d85a:	3a01      	subs	r2, #1
 800d85c:	4013      	ands	r3, r2
 800d85e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d860:	69fb      	ldr	r3, [r7, #28]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d12f      	bne.n	800d8c6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	699b      	ldr	r3, [r3, #24]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	633b      	str	r3, [r7, #48]	@ 0x30
 800d874:	e013      	b.n	800d89e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d007      	beq.n	800d88e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	4619      	mov	r1, r3
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7fe fa32 	bl	800bcee <clmt_clust>
 800d88a:	6338      	str	r0, [r7, #48]	@ 0x30
 800d88c:	e007      	b.n	800d89e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	4619      	mov	r1, r3
 800d896:	4610      	mov	r0, r2
 800d898:	f7fd ff9b 	bl	800b7d2 <get_fat>
 800d89c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d804      	bhi.n	800d8ae <f_read+0xe2>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	755a      	strb	r2, [r3, #21]
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	e0c9      	b.n	800da42 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8b4:	d104      	bne.n	800d8c0 <f_read+0xf4>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2201      	movs	r2, #1
 800d8ba:	755a      	strb	r2, [r3, #21]
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e0c0      	b.n	800da42 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8c4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d8c6:	697a      	ldr	r2, [r7, #20]
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	69db      	ldr	r3, [r3, #28]
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	f7fd ff60 	bl	800b794 <clust2sect>
 800d8d4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d104      	bne.n	800d8e6 <f_read+0x11a>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	755a      	strb	r2, [r3, #21]
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e0ad      	b.n	800da42 <f_read+0x276>
			sect += csect;
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	4413      	add	r3, r2
 800d8ec:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	0a5b      	lsrs	r3, r3, #9
 800d8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d039      	beq.n	800d96e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d8fa:	69fa      	ldr	r2, [r7, #28]
 800d8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fe:	4413      	add	r3, r2
 800d900:	697a      	ldr	r2, [r7, #20]
 800d902:	8952      	ldrh	r2, [r2, #10]
 800d904:	4293      	cmp	r3, r2
 800d906:	d905      	bls.n	800d914 <f_read+0x148>
					cc = fs->csize - csect;
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	895b      	ldrh	r3, [r3, #10]
 800d90c:	461a      	mov	r2, r3
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	7858      	ldrb	r0, [r3, #1]
 800d918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d91a:	69ba      	ldr	r2, [r7, #24]
 800d91c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d91e:	f7fd fb8f 	bl	800b040 <disk_read>
 800d922:	4603      	mov	r3, r0
 800d924:	2b00      	cmp	r3, #0
 800d926:	d004      	beq.n	800d932 <f_read+0x166>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2201      	movs	r2, #1
 800d92c:	755a      	strb	r2, [r3, #21]
 800d92e:	2301      	movs	r3, #1
 800d930:	e087      	b.n	800da42 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	7d1b      	ldrb	r3, [r3, #20]
 800d936:	b25b      	sxtb	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	da14      	bge.n	800d966 <f_read+0x19a>
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6a1a      	ldr	r2, [r3, #32]
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d946:	429a      	cmp	r2, r3
 800d948:	d90d      	bls.n	800d966 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6a1a      	ldr	r2, [r3, #32]
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	025b      	lsls	r3, r3, #9
 800d954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d956:	18d0      	adds	r0, r2, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	3330      	adds	r3, #48	@ 0x30
 800d95c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d960:	4619      	mov	r1, r3
 800d962:	f7fd fc4d 	bl	800b200 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d968:	025b      	lsls	r3, r3, #9
 800d96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d96c:	e050      	b.n	800da10 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6a1b      	ldr	r3, [r3, #32]
 800d972:	69ba      	ldr	r2, [r7, #24]
 800d974:	429a      	cmp	r2, r3
 800d976:	d02e      	beq.n	800d9d6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	7d1b      	ldrb	r3, [r3, #20]
 800d97c:	b25b      	sxtb	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da18      	bge.n	800d9b4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	7858      	ldrb	r0, [r3, #1]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	6a1a      	ldr	r2, [r3, #32]
 800d990:	2301      	movs	r3, #1
 800d992:	f7fd fb75 	bl	800b080 <disk_write>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d004      	beq.n	800d9a6 <f_read+0x1da>
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	755a      	strb	r2, [r3, #21]
 800d9a2:	2301      	movs	r3, #1
 800d9a4:	e04d      	b.n	800da42 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
 800d9aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	7858      	ldrb	r0, [r3, #1]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d9be:	2301      	movs	r3, #1
 800d9c0:	69ba      	ldr	r2, [r7, #24]
 800d9c2:	f7fd fb3d 	bl	800b040 <disk_read>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d004      	beq.n	800d9d6 <f_read+0x20a>
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	2201      	movs	r2, #1
 800d9d0:	755a      	strb	r2, [r3, #21]
 800d9d2:	2301      	movs	r3, #1
 800d9d4:	e035      	b.n	800da42 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	69ba      	ldr	r2, [r7, #24]
 800d9da:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	699b      	ldr	r3, [r3, #24]
 800d9e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9e4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d9ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d901      	bls.n	800d9f6 <f_read+0x22a>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da04:	4413      	add	r3, r2
 800da06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da08:	4619      	mov	r1, r3
 800da0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da0c:	f7fd fbf8 	bl	800b200 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800da10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da14:	4413      	add	r3, r2
 800da16:	627b      	str	r3, [r7, #36]	@ 0x24
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699a      	ldr	r2, [r3, #24]
 800da1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da1e:	441a      	add	r2, r3
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	619a      	str	r2, [r3, #24]
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681a      	ldr	r2, [r3, #0]
 800da28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da2a:	441a      	add	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	601a      	str	r2, [r3, #0]
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da34:	1ad3      	subs	r3, r2, r3
 800da36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f47f af01 	bne.w	800d842 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3738      	adds	r7, #56	@ 0x38
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b08c      	sub	sp, #48	@ 0x30
 800da4e:	af00      	add	r7, sp, #0
 800da50:	60f8      	str	r0, [r7, #12]
 800da52:	60b9      	str	r1, [r7, #8]
 800da54:	607a      	str	r2, [r7, #4]
 800da56:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2200      	movs	r2, #0
 800da60:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f107 0210 	add.w	r2, r7, #16
 800da68:	4611      	mov	r1, r2
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7ff fc68 	bl	800d340 <validate>
 800da70:	4603      	mov	r3, r0
 800da72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800da76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d107      	bne.n	800da8e <f_write+0x44>
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	7d5b      	ldrb	r3, [r3, #21]
 800da82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800da86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d002      	beq.n	800da94 <f_write+0x4a>
 800da8e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800da92:	e14b      	b.n	800dd2c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
 800da98:	f003 0302 	and.w	r3, r3, #2
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <f_write+0x5a>
 800daa0:	2307      	movs	r3, #7
 800daa2:	e143      	b.n	800dd2c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	699a      	ldr	r2, [r3, #24]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	441a      	add	r2, r3
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	f080 812d 	bcs.w	800dd10 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	699b      	ldr	r3, [r3, #24]
 800daba:	43db      	mvns	r3, r3
 800dabc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dabe:	e127      	b.n	800dd10 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f040 80e3 	bne.w	800dc94 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	699b      	ldr	r3, [r3, #24]
 800dad2:	0a5b      	lsrs	r3, r3, #9
 800dad4:	693a      	ldr	r2, [r7, #16]
 800dad6:	8952      	ldrh	r2, [r2, #10]
 800dad8:	3a01      	subs	r2, #1
 800dada:	4013      	ands	r3, r2
 800dadc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d143      	bne.n	800db6c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	699b      	ldr	r3, [r3, #24]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d10c      	bne.n	800db06 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800daf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d11a      	bne.n	800db2e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2100      	movs	r1, #0
 800dafc:	4618      	mov	r0, r3
 800dafe:	f7fe f85e 	bl	800bbbe <create_chain>
 800db02:	62b8      	str	r0, [r7, #40]	@ 0x28
 800db04:	e013      	b.n	800db2e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d007      	beq.n	800db1e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	699b      	ldr	r3, [r3, #24]
 800db12:	4619      	mov	r1, r3
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7fe f8ea 	bl	800bcee <clmt_clust>
 800db1a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800db1c:	e007      	b.n	800db2e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	69db      	ldr	r3, [r3, #28]
 800db24:	4619      	mov	r1, r3
 800db26:	4610      	mov	r0, r2
 800db28:	f7fe f849 	bl	800bbbe <create_chain>
 800db2c:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800db2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 80f2 	beq.w	800dd1a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800db36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d104      	bne.n	800db46 <f_write+0xfc>
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2202      	movs	r2, #2
 800db40:	755a      	strb	r2, [r3, #21]
 800db42:	2302      	movs	r3, #2
 800db44:	e0f2      	b.n	800dd2c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800db46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db4c:	d104      	bne.n	800db58 <f_write+0x10e>
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2201      	movs	r2, #1
 800db52:	755a      	strb	r2, [r3, #21]
 800db54:	2301      	movs	r3, #1
 800db56:	e0e9      	b.n	800dd2c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db5c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d102      	bne.n	800db6c <f_write+0x122>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db6a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	7d1b      	ldrb	r3, [r3, #20]
 800db70:	b25b      	sxtb	r3, r3
 800db72:	2b00      	cmp	r3, #0
 800db74:	da18      	bge.n	800dba8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	7858      	ldrb	r0, [r3, #1]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6a1a      	ldr	r2, [r3, #32]
 800db84:	2301      	movs	r3, #1
 800db86:	f7fd fa7b 	bl	800b080 <disk_write>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d004      	beq.n	800db9a <f_write+0x150>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2201      	movs	r2, #1
 800db94:	755a      	strb	r2, [r3, #21]
 800db96:	2301      	movs	r3, #1
 800db98:	e0c8      	b.n	800dd2c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	7d1b      	ldrb	r3, [r3, #20]
 800db9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dba8:	693a      	ldr	r2, [r7, #16]
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	69db      	ldr	r3, [r3, #28]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f7fd fdef 	bl	800b794 <clust2sect>
 800dbb6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d104      	bne.n	800dbc8 <f_write+0x17e>
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2202      	movs	r2, #2
 800dbc2:	755a      	strb	r2, [r3, #21]
 800dbc4:	2302      	movs	r3, #2
 800dbc6:	e0b1      	b.n	800dd2c <f_write+0x2e2>
			sect += csect;
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	4413      	add	r3, r2
 800dbce:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	0a5b      	lsrs	r3, r3, #9
 800dbd4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dbd6:	6a3b      	ldr	r3, [r7, #32]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d03c      	beq.n	800dc56 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dbdc:	69ba      	ldr	r2, [r7, #24]
 800dbde:	6a3b      	ldr	r3, [r7, #32]
 800dbe0:	4413      	add	r3, r2
 800dbe2:	693a      	ldr	r2, [r7, #16]
 800dbe4:	8952      	ldrh	r2, [r2, #10]
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	d905      	bls.n	800dbf6 <f_write+0x1ac>
					cc = fs->csize - csect;
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	895b      	ldrh	r3, [r3, #10]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	69bb      	ldr	r3, [r7, #24]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	7858      	ldrb	r0, [r3, #1]
 800dbfa:	6a3b      	ldr	r3, [r7, #32]
 800dbfc:	697a      	ldr	r2, [r7, #20]
 800dbfe:	69f9      	ldr	r1, [r7, #28]
 800dc00:	f7fd fa3e 	bl	800b080 <disk_write>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d004      	beq.n	800dc14 <f_write+0x1ca>
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2201      	movs	r2, #1
 800dc0e:	755a      	strb	r2, [r3, #21]
 800dc10:	2301      	movs	r3, #1
 800dc12:	e08b      	b.n	800dd2c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	6a1a      	ldr	r2, [r3, #32]
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	6a3a      	ldr	r2, [r7, #32]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d915      	bls.n	800dc4e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6a1a      	ldr	r2, [r3, #32]
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	025b      	lsls	r3, r3, #9
 800dc32:	69fa      	ldr	r2, [r7, #28]
 800dc34:	4413      	add	r3, r2
 800dc36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f7fd fae0 	bl	800b200 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	7d1b      	ldrb	r3, [r3, #20]
 800dc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc48:	b2da      	uxtb	r2, r3
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800dc4e:	6a3b      	ldr	r3, [r7, #32]
 800dc50:	025b      	lsls	r3, r3, #9
 800dc52:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800dc54:	e03f      	b.n	800dcd6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6a1b      	ldr	r3, [r3, #32]
 800dc5a:	697a      	ldr	r2, [r7, #20]
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d016      	beq.n	800dc8e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	699a      	ldr	r2, [r3, #24]
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	d210      	bcs.n	800dc8e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	7858      	ldrb	r0, [r3, #1]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dc76:	2301      	movs	r3, #1
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	f7fd f9e1 	bl	800b040 <disk_read>
 800dc7e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2201      	movs	r2, #1
 800dc88:	755a      	strb	r2, [r3, #21]
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	e04e      	b.n	800dd2c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	697a      	ldr	r2, [r7, #20]
 800dc92:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	699b      	ldr	r3, [r3, #24]
 800dc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc9c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800dca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d901      	bls.n	800dcae <f_write+0x264>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	699b      	ldr	r3, [r3, #24]
 800dcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcbc:	4413      	add	r3, r2
 800dcbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcc0:	69f9      	ldr	r1, [r7, #28]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fd fa9c 	bl	800b200 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800dcd6:	69fa      	ldr	r2, [r7, #28]
 800dcd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcda:	4413      	add	r3, r2
 800dcdc:	61fb      	str	r3, [r7, #28]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	699a      	ldr	r2, [r3, #24]
 800dce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce4:	441a      	add	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	619a      	str	r2, [r3, #24]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	68da      	ldr	r2, [r3, #12]
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	699b      	ldr	r3, [r3, #24]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	bf38      	it	cc
 800dcf6:	461a      	movcc	r2, r3
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	60da      	str	r2, [r3, #12]
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd02:	441a      	add	r2, r3
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	f47f aed4 	bne.w	800dac0 <f_write+0x76>
 800dd18:	e000      	b.n	800dd1c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dd1a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	7d1b      	ldrb	r3, [r3, #20]
 800dd20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd24:	b2da      	uxtb	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3730      	adds	r7, #48	@ 0x30
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f107 0208 	add.w	r2, r7, #8
 800dd42:	4611      	mov	r1, r2
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7ff fafb 	bl	800d340 <validate>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dd4e:	7dfb      	ldrb	r3, [r7, #23]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d168      	bne.n	800de26 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	7d1b      	ldrb	r3, [r3, #20]
 800dd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d062      	beq.n	800de26 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	7d1b      	ldrb	r3, [r3, #20]
 800dd64:	b25b      	sxtb	r3, r3
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	da15      	bge.n	800dd96 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	7858      	ldrb	r0, [r3, #1]
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6a1a      	ldr	r2, [r3, #32]
 800dd78:	2301      	movs	r3, #1
 800dd7a:	f7fd f981 	bl	800b080 <disk_write>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <f_sync+0x54>
 800dd84:	2301      	movs	r3, #1
 800dd86:	e04f      	b.n	800de28 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	7d1b      	ldrb	r3, [r3, #20]
 800dd8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dd96:	f7fc fbdb 	bl	800a550 <get_fattime>
 800dd9a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dda2:	4619      	mov	r1, r3
 800dda4:	4610      	mov	r0, r2
 800dda6:	f7fd fc59 	bl	800b65c <move_window>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d138      	bne.n	800de26 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	330b      	adds	r3, #11
 800ddbe:	781a      	ldrb	r2, [r3, #0]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	330b      	adds	r3, #11
 800ddc4:	f042 0220 	orr.w	r2, r2, #32
 800ddc8:	b2d2      	uxtb	r2, r2
 800ddca:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	689b      	ldr	r3, [r3, #8]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	68f9      	ldr	r1, [r7, #12]
 800ddd8:	f7fe f963 	bl	800c0a2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 021c 	add.w	r2, r3, #28
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	4619      	mov	r1, r3
 800dde8:	4610      	mov	r0, r2
 800ddea:	f7fd f9dd 	bl	800b1a8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	3316      	adds	r3, #22
 800ddf2:	6939      	ldr	r1, [r7, #16]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fd f9d7 	bl	800b1a8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3312      	adds	r3, #18
 800ddfe:	2100      	movs	r1, #0
 800de00:	4618      	mov	r0, r3
 800de02:	f7fd f9b6 	bl	800b172 <st_word>
					fs->wflag = 1;
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	2201      	movs	r2, #1
 800de0a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800de0c:	68bb      	ldr	r3, [r7, #8]
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fd fc52 	bl	800b6b8 <sync_fs>
 800de14:	4603      	mov	r3, r0
 800de16:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7d1b      	ldrb	r3, [r3, #20]
 800de1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de20:	b2da      	uxtb	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800de26:	7dfb      	ldrb	r3, [r7, #23]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7ff ff7b 	bl	800dd34 <f_sync>
 800de3e:	4603      	mov	r3, r0
 800de40:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800de42:	7bfb      	ldrb	r3, [r7, #15]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d118      	bne.n	800de7a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f107 0208 	add.w	r2, r7, #8
 800de4e:	4611      	mov	r1, r2
 800de50:	4618      	mov	r0, r3
 800de52:	f7ff fa75 	bl	800d340 <validate>
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800de5a:	7bfb      	ldrb	r3, [r7, #15]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10c      	bne.n	800de7a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	4618      	mov	r0, r3
 800de66:	f7fd fb55 	bl	800b514 <dec_lock>
 800de6a:	4603      	mov	r3, r0
 800de6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800de6e:	7bfb      	ldrb	r3, [r7, #15]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d102      	bne.n	800de7a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800de7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3710      	adds	r7, #16
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}

0800de84 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b092      	sub	sp, #72	@ 0x48
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800de8e:	f107 010c 	add.w	r1, r7, #12
 800de92:	1d3b      	adds	r3, r7, #4
 800de94:	2200      	movs	r2, #0
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff f806 	bl	800cea8 <find_volume>
 800de9c:	4603      	mov	r3, r0
 800de9e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800dea2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d12f      	bne.n	800df0a <f_stat+0x86>
		INIT_NAMBUF(dj.obj.fs);
 800deaa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800deae:	f000 f955 	bl	800e15c <ff_memalloc>
 800deb2:	6438      	str	r0, [r7, #64]	@ 0x40
 800deb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <f_stat+0x3a>
 800deba:	2311      	movs	r3, #17
 800debc:	e027      	b.n	800df0e <f_stat+0x8a>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dec2:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800dec4:	687a      	ldr	r2, [r7, #4]
 800dec6:	f107 030c 	add.w	r3, r7, #12
 800deca:	4611      	mov	r1, r2
 800decc:	4618      	mov	r0, r3
 800dece:	f7fe fedf 	bl	800cc90 <follow_path>
 800ded2:	4603      	mov	r3, r0
 800ded4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {				/* Follow completed */
 800ded8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d111      	bne.n	800df04 <f_stat+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800dee0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dee4:	b25b      	sxtb	r3, r3
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	da03      	bge.n	800def2 <f_stat+0x6e>
				res = FR_INVALID_NAME;
 800deea:	2306      	movs	r3, #6
 800deec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800def0:	e008      	b.n	800df04 <f_stat+0x80>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d005      	beq.n	800df04 <f_stat+0x80>
 800def8:	f107 030c 	add.w	r3, r7, #12
 800defc:	6839      	ldr	r1, [r7, #0]
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fc30 	bl	800c764 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 800df04:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800df06:	f000 f935 	bl	800e174 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800df0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3748      	adds	r7, #72	@ 0x48
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
	...

0800df18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df18:	b480      	push	{r7}
 800df1a:	b087      	sub	sp, #28
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	4613      	mov	r3, r2
 800df24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df26:	2301      	movs	r3, #1
 800df28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df2e:	4b1f      	ldr	r3, [pc, #124]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df30:	7a5b      	ldrb	r3, [r3, #9]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	2b00      	cmp	r3, #0
 800df36:	d131      	bne.n	800df9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df38:	4b1c      	ldr	r3, [pc, #112]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df3a:	7a5b      	ldrb	r3, [r3, #9]
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	461a      	mov	r2, r3
 800df40:	4b1a      	ldr	r3, [pc, #104]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df42:	2100      	movs	r1, #0
 800df44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df46:	4b19      	ldr	r3, [pc, #100]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df48:	7a5b      	ldrb	r3, [r3, #9]
 800df4a:	b2db      	uxtb	r3, r3
 800df4c:	4a17      	ldr	r2, [pc, #92]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df56:	4b15      	ldr	r3, [pc, #84]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df58:	7a5b      	ldrb	r3, [r3, #9]
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	461a      	mov	r2, r3
 800df5e:	4b13      	ldr	r3, [pc, #76]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df60:	4413      	add	r3, r2
 800df62:	79fa      	ldrb	r2, [r7, #7]
 800df64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df66:	4b11      	ldr	r3, [pc, #68]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df68:	7a5b      	ldrb	r3, [r3, #9]
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	1c5a      	adds	r2, r3, #1
 800df6e:	b2d1      	uxtb	r1, r2
 800df70:	4a0e      	ldr	r2, [pc, #56]	@ (800dfac <FATFS_LinkDriverEx+0x94>)
 800df72:	7251      	strb	r1, [r2, #9]
 800df74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df76:	7dbb      	ldrb	r3, [r7, #22]
 800df78:	3330      	adds	r3, #48	@ 0x30
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	3301      	adds	r3, #1
 800df84:	223a      	movs	r2, #58	@ 0x3a
 800df86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3302      	adds	r3, #2
 800df8c:	222f      	movs	r2, #47	@ 0x2f
 800df8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	3303      	adds	r3, #3
 800df94:	2200      	movs	r2, #0
 800df96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800df9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	371c      	adds	r7, #28
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	20000860 	.word	0x20000860

0800dfb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfba:	2200      	movs	r2, #0
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f7ff ffaa 	bl	800df18 <FATFS_LinkDriverEx>
 800dfc4:	4603      	mov	r3, r0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}
	...

0800dfd0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	b085      	sub	sp, #20
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dfdc:	88fb      	ldrh	r3, [r7, #6]
 800dfde:	2b7f      	cmp	r3, #127	@ 0x7f
 800dfe0:	d802      	bhi.n	800dfe8 <ff_convert+0x18>
		c = chr;
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	81fb      	strh	r3, [r7, #14]
 800dfe6:	e025      	b.n	800e034 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00b      	beq.n	800e006 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dfee:	88fb      	ldrh	r3, [r7, #6]
 800dff0:	2bff      	cmp	r3, #255	@ 0xff
 800dff2:	d805      	bhi.n	800e000 <ff_convert+0x30>
 800dff4:	88fb      	ldrh	r3, [r7, #6]
 800dff6:	3b80      	subs	r3, #128	@ 0x80
 800dff8:	4a12      	ldr	r2, [pc, #72]	@ (800e044 <ff_convert+0x74>)
 800dffa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dffe:	e000      	b.n	800e002 <ff_convert+0x32>
 800e000:	2300      	movs	r3, #0
 800e002:	81fb      	strh	r3, [r7, #14]
 800e004:	e016      	b.n	800e034 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e006:	2300      	movs	r3, #0
 800e008:	81fb      	strh	r3, [r7, #14]
 800e00a:	e009      	b.n	800e020 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e00c:	89fb      	ldrh	r3, [r7, #14]
 800e00e:	4a0d      	ldr	r2, [pc, #52]	@ (800e044 <ff_convert+0x74>)
 800e010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e014:	88fa      	ldrh	r2, [r7, #6]
 800e016:	429a      	cmp	r2, r3
 800e018:	d006      	beq.n	800e028 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e01a:	89fb      	ldrh	r3, [r7, #14]
 800e01c:	3301      	adds	r3, #1
 800e01e:	81fb      	strh	r3, [r7, #14]
 800e020:	89fb      	ldrh	r3, [r7, #14]
 800e022:	2b7f      	cmp	r3, #127	@ 0x7f
 800e024:	d9f2      	bls.n	800e00c <ff_convert+0x3c>
 800e026:	e000      	b.n	800e02a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e028:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e02a:	89fb      	ldrh	r3, [r7, #14]
 800e02c:	3380      	adds	r3, #128	@ 0x80
 800e02e:	b29b      	uxth	r3, r3
 800e030:	b2db      	uxtb	r3, r3
 800e032:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e034:	89fb      	ldrh	r3, [r7, #14]
}
 800e036:	4618      	mov	r0, r3
 800e038:	3714      	adds	r7, #20
 800e03a:	46bd      	mov	sp, r7
 800e03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e040:	4770      	bx	lr
 800e042:	bf00      	nop
 800e044:	08014cc0 	.word	0x08014cc0

0800e048 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e048:	b480      	push	{r7}
 800e04a:	b087      	sub	sp, #28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e052:	88fb      	ldrh	r3, [r7, #6]
 800e054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e058:	d201      	bcs.n	800e05e <ff_wtoupper+0x16>
 800e05a:	4b3e      	ldr	r3, [pc, #248]	@ (800e154 <ff_wtoupper+0x10c>)
 800e05c:	e000      	b.n	800e060 <ff_wtoupper+0x18>
 800e05e:	4b3e      	ldr	r3, [pc, #248]	@ (800e158 <ff_wtoupper+0x110>)
 800e060:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	1c9a      	adds	r2, r3, #2
 800e066:	617a      	str	r2, [r7, #20]
 800e068:	881b      	ldrh	r3, [r3, #0]
 800e06a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e06c:	8a7b      	ldrh	r3, [r7, #18]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d068      	beq.n	800e144 <ff_wtoupper+0xfc>
 800e072:	88fa      	ldrh	r2, [r7, #6]
 800e074:	8a7b      	ldrh	r3, [r7, #18]
 800e076:	429a      	cmp	r2, r3
 800e078:	d364      	bcc.n	800e144 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	1c9a      	adds	r2, r3, #2
 800e07e:	617a      	str	r2, [r7, #20]
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	823b      	strh	r3, [r7, #16]
 800e084:	8a3b      	ldrh	r3, [r7, #16]
 800e086:	0a1b      	lsrs	r3, r3, #8
 800e088:	81fb      	strh	r3, [r7, #14]
 800e08a:	8a3b      	ldrh	r3, [r7, #16]
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e090:	88fa      	ldrh	r2, [r7, #6]
 800e092:	8a79      	ldrh	r1, [r7, #18]
 800e094:	8a3b      	ldrh	r3, [r7, #16]
 800e096:	440b      	add	r3, r1
 800e098:	429a      	cmp	r2, r3
 800e09a:	da49      	bge.n	800e130 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e09c:	89fb      	ldrh	r3, [r7, #14]
 800e09e:	2b08      	cmp	r3, #8
 800e0a0:	d84f      	bhi.n	800e142 <ff_wtoupper+0xfa>
 800e0a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e0a8 <ff_wtoupper+0x60>)
 800e0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a8:	0800e0cd 	.word	0x0800e0cd
 800e0ac:	0800e0df 	.word	0x0800e0df
 800e0b0:	0800e0f5 	.word	0x0800e0f5
 800e0b4:	0800e0fd 	.word	0x0800e0fd
 800e0b8:	0800e105 	.word	0x0800e105
 800e0bc:	0800e10d 	.word	0x0800e10d
 800e0c0:	0800e115 	.word	0x0800e115
 800e0c4:	0800e11d 	.word	0x0800e11d
 800e0c8:	0800e125 	.word	0x0800e125
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e0cc:	88fa      	ldrh	r2, [r7, #6]
 800e0ce:	8a7b      	ldrh	r3, [r7, #18]
 800e0d0:	1ad3      	subs	r3, r2, r3
 800e0d2:	005b      	lsls	r3, r3, #1
 800e0d4:	697a      	ldr	r2, [r7, #20]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	80fb      	strh	r3, [r7, #6]
 800e0dc:	e027      	b.n	800e12e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e0de:	88fa      	ldrh	r2, [r7, #6]
 800e0e0:	8a7b      	ldrh	r3, [r7, #18]
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	f003 0301 	and.w	r3, r3, #1
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	88fa      	ldrh	r2, [r7, #6]
 800e0ee:	1ad3      	subs	r3, r2, r3
 800e0f0:	80fb      	strh	r3, [r7, #6]
 800e0f2:	e01c      	b.n	800e12e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e0f4:	88fb      	ldrh	r3, [r7, #6]
 800e0f6:	3b10      	subs	r3, #16
 800e0f8:	80fb      	strh	r3, [r7, #6]
 800e0fa:	e018      	b.n	800e12e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e0fc:	88fb      	ldrh	r3, [r7, #6]
 800e0fe:	3b20      	subs	r3, #32
 800e100:	80fb      	strh	r3, [r7, #6]
 800e102:	e014      	b.n	800e12e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e104:	88fb      	ldrh	r3, [r7, #6]
 800e106:	3b30      	subs	r3, #48	@ 0x30
 800e108:	80fb      	strh	r3, [r7, #6]
 800e10a:	e010      	b.n	800e12e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e10c:	88fb      	ldrh	r3, [r7, #6]
 800e10e:	3b1a      	subs	r3, #26
 800e110:	80fb      	strh	r3, [r7, #6]
 800e112:	e00c      	b.n	800e12e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	3308      	adds	r3, #8
 800e118:	80fb      	strh	r3, [r7, #6]
 800e11a:	e008      	b.n	800e12e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e11c:	88fb      	ldrh	r3, [r7, #6]
 800e11e:	3b50      	subs	r3, #80	@ 0x50
 800e120:	80fb      	strh	r3, [r7, #6]
 800e122:	e004      	b.n	800e12e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e124:	88fb      	ldrh	r3, [r7, #6]
 800e126:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800e12a:	80fb      	strh	r3, [r7, #6]
 800e12c:	bf00      	nop
			}
			break;
 800e12e:	e008      	b.n	800e142 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d195      	bne.n	800e062 <ff_wtoupper+0x1a>
 800e136:	8a3b      	ldrh	r3, [r7, #16]
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	697a      	ldr	r2, [r7, #20]
 800e13c:	4413      	add	r3, r2
 800e13e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e140:	e78f      	b.n	800e062 <ff_wtoupper+0x1a>
			break;
 800e142:	bf00      	nop
	}

	return chr;
 800e144:	88fb      	ldrh	r3, [r7, #6]
}
 800e146:	4618      	mov	r0, r3
 800e148:	371c      	adds	r7, #28
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	08014dc0 	.word	0x08014dc0
 800e158:	08014fb4 	.word	0x08014fb4

0800e15c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f907 	bl	800e378 <malloc>
 800e16a:	4603      	mov	r3, r0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 f903 	bl	800e388 <free>
}
 800e182:	bf00      	nop
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}
	...

0800e18c <_fminf>:
 800e18c:	f004 bf2a 	b.w	8012fe4 <fminf>

0800e190 <neai_classification_init>:
 800e190:	b538      	push	{r3, r4, r5, lr}
 800e192:	f600 42b4 	addw	r2, r0, #3252	@ 0xcb4
 800e196:	4b6d      	ldr	r3, [pc, #436]	@ (800e34c <neai_classification_init+0x1bc>)
 800e198:	ed92 7a00 	vldr	s14, [r2]
 800e19c:	4a6c      	ldr	r2, [pc, #432]	@ (800e350 <neai_classification_init+0x1c0>)
 800e19e:	496d      	ldr	r1, [pc, #436]	@ (800e354 <neai_classification_init+0x1c4>)
 800e1a0:	ed2d 8b02 	vpush	{d8}
 800e1a4:	25a2      	movs	r5, #162	@ 0xa2
 800e1a6:	6018      	str	r0, [r3, #0]
 800e1a8:	4b6b      	ldr	r3, [pc, #428]	@ (800e358 <neai_classification_init+0x1c8>)
 800e1aa:	6015      	str	r5, [r2, #0]
 800e1ac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800e1b0:	f500 62a2 	add.w	r2, r0, #1296	@ 0x510
 800e1b4:	601a      	str	r2, [r3, #0]
 800e1b6:	eeb4 7a67 	vcmp.f32	s14, s15
 800e1ba:	4b68      	ldr	r3, [pc, #416]	@ (800e35c <neai_classification_init+0x1cc>)
 800e1bc:	f500 7422 	add.w	r4, r0, #648	@ 0x288
 800e1c0:	f600 42a8 	addw	r2, r0, #3240	@ 0xca8
 800e1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c8:	600c      	str	r4, [r1, #0]
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	f040 80a6 	bne.w	800e31c <neai_classification_init+0x18c>
 800e1d0:	f600 43b8 	addw	r3, r0, #3256	@ 0xcb8
 800e1d4:	edd3 6a00 	vldr	s13, [r3]
 800e1d8:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 800e1dc:	eef4 6a47 	vcmp.f32	s13, s14
 800e1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e4:	f040 809a 	bne.w	800e31c <neai_classification_init+0x18c>
 800e1e8:	f600 43bc 	addw	r3, r0, #3260	@ 0xcbc
 800e1ec:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 800e360 <neai_classification_init+0x1d0>
 800e1f0:	edd3 6a00 	vldr	s13, [r3]
 800e1f4:	eef4 6a47 	vcmp.f32	s13, s14
 800e1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fc:	f040 808e 	bne.w	800e31c <neai_classification_init+0x18c>
 800e200:	f500 634c 	add.w	r3, r0, #3264	@ 0xcc0
 800e204:	edd3 6a00 	vldr	s13, [r3]
 800e208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e20c:	eef4 6a47 	vcmp.f32	s13, s14
 800e210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e214:	f040 8082 	bne.w	800e31c <neai_classification_init+0x18c>
 800e218:	f600 43c4 	addw	r3, r0, #3268	@ 0xcc4
 800e21c:	ed93 7a00 	vldr	s14, [r3]
 800e220:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e228:	d178      	bne.n	800e31c <neai_classification_init+0x18c>
 800e22a:	f600 43c8 	addw	r3, r0, #3272	@ 0xcc8
 800e22e:	ed93 7a00 	vldr	s14, [r3]
 800e232:	eeb4 7a67 	vcmp.f32	s14, s15
 800e236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e23a:	d16f      	bne.n	800e31c <neai_classification_init+0x18c>
 800e23c:	f600 43cc 	addw	r3, r0, #3276	@ 0xccc
 800e240:	edd3 7a00 	vldr	s15, [r3]
 800e244:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e24c:	d166      	bne.n	800e31c <neai_classification_init+0x18c>
 800e24e:	f500 634d 	add.w	r3, r0, #3280	@ 0xcd0
 800e252:	edd3 7a00 	vldr	s15, [r3]
 800e256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	d15d      	bne.n	800e31c <neai_classification_init+0x18c>
 800e260:	f600 43d4 	addw	r3, r0, #3284	@ 0xcd4
 800e264:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800e364 <neai_classification_init+0x1d4>
 800e268:	ed93 7a00 	vldr	s14, [r3]
 800e26c:	eeb4 7a67 	vcmp.f32	s14, s15
 800e270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e274:	d152      	bne.n	800e31c <neai_classification_init+0x18c>
 800e276:	f600 43d8 	addw	r3, r0, #3288	@ 0xcd8
 800e27a:	ed93 7a00 	vldr	s14, [r3]
 800e27e:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e282:	eeb4 7a67 	vcmp.f32	s14, s15
 800e286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e28a:	d147      	bne.n	800e31c <neai_classification_init+0x18c>
 800e28c:	f600 43dc 	addw	r3, r0, #3292	@ 0xcdc
 800e290:	edd3 7a00 	vldr	s15, [r3]
 800e294:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29c:	d13e      	bne.n	800e31c <neai_classification_init+0x18c>
 800e29e:	f500 634e 	add.w	r3, r0, #3296	@ 0xce0
 800e2a2:	ed93 7a00 	vldr	s14, [r3]
 800e2a6:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800e2aa:	eeb4 7a67 	vcmp.f32	s14, s15
 800e2ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b2:	d133      	bne.n	800e31c <neai_classification_init+0x18c>
 800e2b4:	f600 43e4 	addw	r3, r0, #3300	@ 0xce4
 800e2b8:	ed93 7a00 	vldr	s14, [r3]
 800e2bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800e2c0:	eeb4 7a67 	vcmp.f32	s14, s15
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	d128      	bne.n	800e31c <neai_classification_init+0x18c>
 800e2ca:	f600 43e8 	addw	r3, r0, #3304	@ 0xce8
 800e2ce:	edd3 7a00 	vldr	s15, [r3]
 800e2d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2da:	d11f      	bne.n	800e31c <neai_classification_init+0x18c>
 800e2dc:	f600 43ec 	addw	r3, r0, #3308	@ 0xcec
 800e2e0:	edd3 7a00 	vldr	s15, [r3]
 800e2e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ec:	d116      	bne.n	800e31c <neai_classification_init+0x18c>
 800e2ee:	f500 634f 	add.w	r3, r0, #3312	@ 0xcf0
 800e2f2:	edd3 7a00 	vldr	s15, [r3]
 800e2f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fe:	d10d      	bne.n	800e31c <neai_classification_init+0x18c>
 800e300:	f600 40f4 	addw	r0, r0, #3316	@ 0xcf4
 800e304:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800e368 <neai_classification_init+0x1d8>
 800e308:	ed90 7a00 	vldr	s14, [r0]
 800e30c:	eeb4 7a67 	vcmp.f32	s14, s15
 800e310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e314:	bf14      	ite	ne
 800e316:	237d      	movne	r3, #125	@ 0x7d
 800e318:	2300      	moveq	r3, #0
 800e31a:	e000      	b.n	800e31e <neai_classification_init+0x18e>
 800e31c:	237d      	movs	r3, #125	@ 0x7d
 800e31e:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 800e36c <neai_classification_init+0x1dc>
 800e322:	4c13      	ldr	r4, [pc, #76]	@ (800e370 <neai_classification_init+0x1e0>)
 800e324:	eddf 0a13 	vldr	s1, [pc, #76]	@ 800e374 <neai_classification_init+0x1e4>
 800e328:	7023      	strb	r3, [r4, #0]
 800e32a:	eeb0 0a48 	vmov.f32	s0, s16
 800e32e:	f7ff ff2d 	bl	800e18c <_fminf>
 800e332:	eeb4 0a48 	vcmp.f32	s0, s16
 800e336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e33a:	bf1c      	itt	ne
 800e33c:	2081      	movne	r0, #129	@ 0x81
 800e33e:	7020      	strbne	r0, [r4, #0]
 800e340:	ecbd 8b02 	vpop	{d8}
 800e344:	bf08      	it	eq
 800e346:	7820      	ldrbeq	r0, [r4, #0]
 800e348:	bd38      	pop	{r3, r4, r5, pc}
 800e34a:	bf00      	nop
 800e34c:	20000878 	.word	0x20000878
 800e350:	20000874 	.word	0x20000874
 800e354:	2000087c 	.word	0x2000087c
 800e358:	20000870 	.word	0x20000870
 800e35c:	2000086c 	.word	0x2000086c
 800e360:	43800000 	.word	0x43800000
 800e364:	42c80000 	.word	0x42c80000
 800e368:	49742400 	.word	0x49742400
 800e36c:	3f8ccccd 	.word	0x3f8ccccd
 800e370:	20000035 	.word	0x20000035
 800e374:	40066666 	.word	0x40066666

0800e378 <malloc>:
 800e378:	4b02      	ldr	r3, [pc, #8]	@ (800e384 <malloc+0xc>)
 800e37a:	4601      	mov	r1, r0
 800e37c:	6818      	ldr	r0, [r3, #0]
 800e37e:	f000 b82d 	b.w	800e3dc <_malloc_r>
 800e382:	bf00      	nop
 800e384:	200001b0 	.word	0x200001b0

0800e388 <free>:
 800e388:	4b02      	ldr	r3, [pc, #8]	@ (800e394 <free+0xc>)
 800e38a:	4601      	mov	r1, r0
 800e38c:	6818      	ldr	r0, [r3, #0]
 800e38e:	f002 bcdf 	b.w	8010d50 <_free_r>
 800e392:	bf00      	nop
 800e394:	200001b0 	.word	0x200001b0

0800e398 <sbrk_aligned>:
 800e398:	b570      	push	{r4, r5, r6, lr}
 800e39a:	4e0f      	ldr	r6, [pc, #60]	@ (800e3d8 <sbrk_aligned+0x40>)
 800e39c:	460c      	mov	r4, r1
 800e39e:	6831      	ldr	r1, [r6, #0]
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	b911      	cbnz	r1, 800e3aa <sbrk_aligned+0x12>
 800e3a4:	f001 fe20 	bl	800ffe8 <_sbrk_r>
 800e3a8:	6030      	str	r0, [r6, #0]
 800e3aa:	4621      	mov	r1, r4
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f001 fe1b 	bl	800ffe8 <_sbrk_r>
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d103      	bne.n	800e3be <sbrk_aligned+0x26>
 800e3b6:	f04f 34ff 	mov.w	r4, #4294967295
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	1cc4      	adds	r4, r0, #3
 800e3c0:	f024 0403 	bic.w	r4, r4, #3
 800e3c4:	42a0      	cmp	r0, r4
 800e3c6:	d0f8      	beq.n	800e3ba <sbrk_aligned+0x22>
 800e3c8:	1a21      	subs	r1, r4, r0
 800e3ca:	4628      	mov	r0, r5
 800e3cc:	f001 fe0c 	bl	800ffe8 <_sbrk_r>
 800e3d0:	3001      	adds	r0, #1
 800e3d2:	d1f2      	bne.n	800e3ba <sbrk_aligned+0x22>
 800e3d4:	e7ef      	b.n	800e3b6 <sbrk_aligned+0x1e>
 800e3d6:	bf00      	nop
 800e3d8:	20000880 	.word	0x20000880

0800e3dc <_malloc_r>:
 800e3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e0:	1ccd      	adds	r5, r1, #3
 800e3e2:	f025 0503 	bic.w	r5, r5, #3
 800e3e6:	3508      	adds	r5, #8
 800e3e8:	2d0c      	cmp	r5, #12
 800e3ea:	bf38      	it	cc
 800e3ec:	250c      	movcc	r5, #12
 800e3ee:	2d00      	cmp	r5, #0
 800e3f0:	4606      	mov	r6, r0
 800e3f2:	db01      	blt.n	800e3f8 <_malloc_r+0x1c>
 800e3f4:	42a9      	cmp	r1, r5
 800e3f6:	d904      	bls.n	800e402 <_malloc_r+0x26>
 800e3f8:	230c      	movs	r3, #12
 800e3fa:	6033      	str	r3, [r6, #0]
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e4d8 <_malloc_r+0xfc>
 800e406:	f000 f869 	bl	800e4dc <__malloc_lock>
 800e40a:	f8d8 3000 	ldr.w	r3, [r8]
 800e40e:	461c      	mov	r4, r3
 800e410:	bb44      	cbnz	r4, 800e464 <_malloc_r+0x88>
 800e412:	4629      	mov	r1, r5
 800e414:	4630      	mov	r0, r6
 800e416:	f7ff ffbf 	bl	800e398 <sbrk_aligned>
 800e41a:	1c43      	adds	r3, r0, #1
 800e41c:	4604      	mov	r4, r0
 800e41e:	d158      	bne.n	800e4d2 <_malloc_r+0xf6>
 800e420:	f8d8 4000 	ldr.w	r4, [r8]
 800e424:	4627      	mov	r7, r4
 800e426:	2f00      	cmp	r7, #0
 800e428:	d143      	bne.n	800e4b2 <_malloc_r+0xd6>
 800e42a:	2c00      	cmp	r4, #0
 800e42c:	d04b      	beq.n	800e4c6 <_malloc_r+0xea>
 800e42e:	6823      	ldr	r3, [r4, #0]
 800e430:	4639      	mov	r1, r7
 800e432:	4630      	mov	r0, r6
 800e434:	eb04 0903 	add.w	r9, r4, r3
 800e438:	f001 fdd6 	bl	800ffe8 <_sbrk_r>
 800e43c:	4581      	cmp	r9, r0
 800e43e:	d142      	bne.n	800e4c6 <_malloc_r+0xea>
 800e440:	6821      	ldr	r1, [r4, #0]
 800e442:	1a6d      	subs	r5, r5, r1
 800e444:	4629      	mov	r1, r5
 800e446:	4630      	mov	r0, r6
 800e448:	f7ff ffa6 	bl	800e398 <sbrk_aligned>
 800e44c:	3001      	adds	r0, #1
 800e44e:	d03a      	beq.n	800e4c6 <_malloc_r+0xea>
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	442b      	add	r3, r5
 800e454:	6023      	str	r3, [r4, #0]
 800e456:	f8d8 3000 	ldr.w	r3, [r8]
 800e45a:	685a      	ldr	r2, [r3, #4]
 800e45c:	bb62      	cbnz	r2, 800e4b8 <_malloc_r+0xdc>
 800e45e:	f8c8 7000 	str.w	r7, [r8]
 800e462:	e00f      	b.n	800e484 <_malloc_r+0xa8>
 800e464:	6822      	ldr	r2, [r4, #0]
 800e466:	1b52      	subs	r2, r2, r5
 800e468:	d420      	bmi.n	800e4ac <_malloc_r+0xd0>
 800e46a:	2a0b      	cmp	r2, #11
 800e46c:	d917      	bls.n	800e49e <_malloc_r+0xc2>
 800e46e:	1961      	adds	r1, r4, r5
 800e470:	42a3      	cmp	r3, r4
 800e472:	6025      	str	r5, [r4, #0]
 800e474:	bf18      	it	ne
 800e476:	6059      	strne	r1, [r3, #4]
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	bf08      	it	eq
 800e47c:	f8c8 1000 	streq.w	r1, [r8]
 800e480:	5162      	str	r2, [r4, r5]
 800e482:	604b      	str	r3, [r1, #4]
 800e484:	4630      	mov	r0, r6
 800e486:	f000 f82f 	bl	800e4e8 <__malloc_unlock>
 800e48a:	f104 000b 	add.w	r0, r4, #11
 800e48e:	1d23      	adds	r3, r4, #4
 800e490:	f020 0007 	bic.w	r0, r0, #7
 800e494:	1ac2      	subs	r2, r0, r3
 800e496:	bf1c      	itt	ne
 800e498:	1a1b      	subne	r3, r3, r0
 800e49a:	50a3      	strne	r3, [r4, r2]
 800e49c:	e7af      	b.n	800e3fe <_malloc_r+0x22>
 800e49e:	6862      	ldr	r2, [r4, #4]
 800e4a0:	42a3      	cmp	r3, r4
 800e4a2:	bf0c      	ite	eq
 800e4a4:	f8c8 2000 	streq.w	r2, [r8]
 800e4a8:	605a      	strne	r2, [r3, #4]
 800e4aa:	e7eb      	b.n	800e484 <_malloc_r+0xa8>
 800e4ac:	4623      	mov	r3, r4
 800e4ae:	6864      	ldr	r4, [r4, #4]
 800e4b0:	e7ae      	b.n	800e410 <_malloc_r+0x34>
 800e4b2:	463c      	mov	r4, r7
 800e4b4:	687f      	ldr	r7, [r7, #4]
 800e4b6:	e7b6      	b.n	800e426 <_malloc_r+0x4a>
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	685b      	ldr	r3, [r3, #4]
 800e4bc:	42a3      	cmp	r3, r4
 800e4be:	d1fb      	bne.n	800e4b8 <_malloc_r+0xdc>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	6053      	str	r3, [r2, #4]
 800e4c4:	e7de      	b.n	800e484 <_malloc_r+0xa8>
 800e4c6:	230c      	movs	r3, #12
 800e4c8:	6033      	str	r3, [r6, #0]
 800e4ca:	4630      	mov	r0, r6
 800e4cc:	f000 f80c 	bl	800e4e8 <__malloc_unlock>
 800e4d0:	e794      	b.n	800e3fc <_malloc_r+0x20>
 800e4d2:	6005      	str	r5, [r0, #0]
 800e4d4:	e7d6      	b.n	800e484 <_malloc_r+0xa8>
 800e4d6:	bf00      	nop
 800e4d8:	20000884 	.word	0x20000884

0800e4dc <__malloc_lock>:
 800e4dc:	4801      	ldr	r0, [pc, #4]	@ (800e4e4 <__malloc_lock+0x8>)
 800e4de:	f001 bdd0 	b.w	8010082 <__retarget_lock_acquire_recursive>
 800e4e2:	bf00      	nop
 800e4e4:	200009c8 	.word	0x200009c8

0800e4e8 <__malloc_unlock>:
 800e4e8:	4801      	ldr	r0, [pc, #4]	@ (800e4f0 <__malloc_unlock+0x8>)
 800e4ea:	f001 bdcb 	b.w	8010084 <__retarget_lock_release_recursive>
 800e4ee:	bf00      	nop
 800e4f0:	200009c8 	.word	0x200009c8

0800e4f4 <realloc>:
 800e4f4:	4b02      	ldr	r3, [pc, #8]	@ (800e500 <realloc+0xc>)
 800e4f6:	460a      	mov	r2, r1
 800e4f8:	4601      	mov	r1, r0
 800e4fa:	6818      	ldr	r0, [r3, #0]
 800e4fc:	f000 b802 	b.w	800e504 <_realloc_r>
 800e500:	200001b0 	.word	0x200001b0

0800e504 <_realloc_r>:
 800e504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e508:	4680      	mov	r8, r0
 800e50a:	4615      	mov	r5, r2
 800e50c:	460c      	mov	r4, r1
 800e50e:	b921      	cbnz	r1, 800e51a <_realloc_r+0x16>
 800e510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e514:	4611      	mov	r1, r2
 800e516:	f7ff bf61 	b.w	800e3dc <_malloc_r>
 800e51a:	b92a      	cbnz	r2, 800e528 <_realloc_r+0x24>
 800e51c:	f002 fc18 	bl	8010d50 <_free_r>
 800e520:	2400      	movs	r4, #0
 800e522:	4620      	mov	r0, r4
 800e524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e528:	f003 fc5a 	bl	8011de0 <_malloc_usable_size_r>
 800e52c:	4285      	cmp	r5, r0
 800e52e:	4606      	mov	r6, r0
 800e530:	d802      	bhi.n	800e538 <_realloc_r+0x34>
 800e532:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e536:	d8f4      	bhi.n	800e522 <_realloc_r+0x1e>
 800e538:	4629      	mov	r1, r5
 800e53a:	4640      	mov	r0, r8
 800e53c:	f7ff ff4e 	bl	800e3dc <_malloc_r>
 800e540:	4607      	mov	r7, r0
 800e542:	2800      	cmp	r0, #0
 800e544:	d0ec      	beq.n	800e520 <_realloc_r+0x1c>
 800e546:	42b5      	cmp	r5, r6
 800e548:	462a      	mov	r2, r5
 800e54a:	4621      	mov	r1, r4
 800e54c:	bf28      	it	cs
 800e54e:	4632      	movcs	r2, r6
 800e550:	f001 fd99 	bl	8010086 <memcpy>
 800e554:	4621      	mov	r1, r4
 800e556:	4640      	mov	r0, r8
 800e558:	f002 fbfa 	bl	8010d50 <_free_r>
 800e55c:	463c      	mov	r4, r7
 800e55e:	e7e0      	b.n	800e522 <_realloc_r+0x1e>

0800e560 <sulp>:
 800e560:	b570      	push	{r4, r5, r6, lr}
 800e562:	4604      	mov	r4, r0
 800e564:	460d      	mov	r5, r1
 800e566:	ec45 4b10 	vmov	d0, r4, r5
 800e56a:	4616      	mov	r6, r2
 800e56c:	f003 fafa 	bl	8011b64 <__ulp>
 800e570:	ec51 0b10 	vmov	r0, r1, d0
 800e574:	b17e      	cbz	r6, 800e596 <sulp+0x36>
 800e576:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e57a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e57e:	2b00      	cmp	r3, #0
 800e580:	dd09      	ble.n	800e596 <sulp+0x36>
 800e582:	051b      	lsls	r3, r3, #20
 800e584:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e588:	2400      	movs	r4, #0
 800e58a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e58e:	4622      	mov	r2, r4
 800e590:	462b      	mov	r3, r5
 800e592:	f7f2 f819 	bl	80005c8 <__aeabi_dmul>
 800e596:	ec41 0b10 	vmov	d0, r0, r1
 800e59a:	bd70      	pop	{r4, r5, r6, pc}
 800e59c:	0000      	movs	r0, r0
	...

0800e5a0 <_strtod_l>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	b09f      	sub	sp, #124	@ 0x7c
 800e5a6:	460c      	mov	r4, r1
 800e5a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	921a      	str	r2, [sp, #104]	@ 0x68
 800e5ae:	9005      	str	r0, [sp, #20]
 800e5b0:	f04f 0a00 	mov.w	sl, #0
 800e5b4:	f04f 0b00 	mov.w	fp, #0
 800e5b8:	460a      	mov	r2, r1
 800e5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800e5bc:	7811      	ldrb	r1, [r2, #0]
 800e5be:	292b      	cmp	r1, #43	@ 0x2b
 800e5c0:	d04a      	beq.n	800e658 <_strtod_l+0xb8>
 800e5c2:	d838      	bhi.n	800e636 <_strtod_l+0x96>
 800e5c4:	290d      	cmp	r1, #13
 800e5c6:	d832      	bhi.n	800e62e <_strtod_l+0x8e>
 800e5c8:	2908      	cmp	r1, #8
 800e5ca:	d832      	bhi.n	800e632 <_strtod_l+0x92>
 800e5cc:	2900      	cmp	r1, #0
 800e5ce:	d03b      	beq.n	800e648 <_strtod_l+0xa8>
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e5d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e5d6:	782a      	ldrb	r2, [r5, #0]
 800e5d8:	2a30      	cmp	r2, #48	@ 0x30
 800e5da:	f040 80b3 	bne.w	800e744 <_strtod_l+0x1a4>
 800e5de:	786a      	ldrb	r2, [r5, #1]
 800e5e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e5e4:	2a58      	cmp	r2, #88	@ 0x58
 800e5e6:	d16e      	bne.n	800e6c6 <_strtod_l+0x126>
 800e5e8:	9302      	str	r3, [sp, #8]
 800e5ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5ec:	9301      	str	r3, [sp, #4]
 800e5ee:	ab1a      	add	r3, sp, #104	@ 0x68
 800e5f0:	9300      	str	r3, [sp, #0]
 800e5f2:	4a8e      	ldr	r2, [pc, #568]	@ (800e82c <_strtod_l+0x28c>)
 800e5f4:	9805      	ldr	r0, [sp, #20]
 800e5f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e5f8:	a919      	add	r1, sp, #100	@ 0x64
 800e5fa:	f002 fc5b 	bl	8010eb4 <__gethex>
 800e5fe:	f010 060f 	ands.w	r6, r0, #15
 800e602:	4604      	mov	r4, r0
 800e604:	d005      	beq.n	800e612 <_strtod_l+0x72>
 800e606:	2e06      	cmp	r6, #6
 800e608:	d128      	bne.n	800e65c <_strtod_l+0xbc>
 800e60a:	3501      	adds	r5, #1
 800e60c:	2300      	movs	r3, #0
 800e60e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e610:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e612:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e614:	2b00      	cmp	r3, #0
 800e616:	f040 858e 	bne.w	800f136 <_strtod_l+0xb96>
 800e61a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e61c:	b1cb      	cbz	r3, 800e652 <_strtod_l+0xb2>
 800e61e:	4652      	mov	r2, sl
 800e620:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e624:	ec43 2b10 	vmov	d0, r2, r3
 800e628:	b01f      	add	sp, #124	@ 0x7c
 800e62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62e:	2920      	cmp	r1, #32
 800e630:	d1ce      	bne.n	800e5d0 <_strtod_l+0x30>
 800e632:	3201      	adds	r2, #1
 800e634:	e7c1      	b.n	800e5ba <_strtod_l+0x1a>
 800e636:	292d      	cmp	r1, #45	@ 0x2d
 800e638:	d1ca      	bne.n	800e5d0 <_strtod_l+0x30>
 800e63a:	2101      	movs	r1, #1
 800e63c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e63e:	1c51      	adds	r1, r2, #1
 800e640:	9119      	str	r1, [sp, #100]	@ 0x64
 800e642:	7852      	ldrb	r2, [r2, #1]
 800e644:	2a00      	cmp	r2, #0
 800e646:	d1c5      	bne.n	800e5d4 <_strtod_l+0x34>
 800e648:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e64a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f040 8570 	bne.w	800f132 <_strtod_l+0xb92>
 800e652:	4652      	mov	r2, sl
 800e654:	465b      	mov	r3, fp
 800e656:	e7e5      	b.n	800e624 <_strtod_l+0x84>
 800e658:	2100      	movs	r1, #0
 800e65a:	e7ef      	b.n	800e63c <_strtod_l+0x9c>
 800e65c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e65e:	b13a      	cbz	r2, 800e670 <_strtod_l+0xd0>
 800e660:	2135      	movs	r1, #53	@ 0x35
 800e662:	a81c      	add	r0, sp, #112	@ 0x70
 800e664:	f003 fb78 	bl	8011d58 <__copybits>
 800e668:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e66a:	9805      	ldr	r0, [sp, #20]
 800e66c:	f002 ff46 	bl	80114fc <_Bfree>
 800e670:	3e01      	subs	r6, #1
 800e672:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e674:	2e04      	cmp	r6, #4
 800e676:	d806      	bhi.n	800e686 <_strtod_l+0xe6>
 800e678:	e8df f006 	tbb	[pc, r6]
 800e67c:	201d0314 	.word	0x201d0314
 800e680:	14          	.byte	0x14
 800e681:	00          	.byte	0x00
 800e682:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e686:	05e1      	lsls	r1, r4, #23
 800e688:	bf48      	it	mi
 800e68a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e68e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e692:	0d1b      	lsrs	r3, r3, #20
 800e694:	051b      	lsls	r3, r3, #20
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1bb      	bne.n	800e612 <_strtod_l+0x72>
 800e69a:	f001 fcc7 	bl	801002c <__errno>
 800e69e:	2322      	movs	r3, #34	@ 0x22
 800e6a0:	6003      	str	r3, [r0, #0]
 800e6a2:	e7b6      	b.n	800e612 <_strtod_l+0x72>
 800e6a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e6a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e6ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e6b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e6b4:	e7e7      	b.n	800e686 <_strtod_l+0xe6>
 800e6b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e834 <_strtod_l+0x294>
 800e6ba:	e7e4      	b.n	800e686 <_strtod_l+0xe6>
 800e6bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e6c0:	f04f 3aff 	mov.w	sl, #4294967295
 800e6c4:	e7df      	b.n	800e686 <_strtod_l+0xe6>
 800e6c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6c8:	1c5a      	adds	r2, r3, #1
 800e6ca:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6cc:	785b      	ldrb	r3, [r3, #1]
 800e6ce:	2b30      	cmp	r3, #48	@ 0x30
 800e6d0:	d0f9      	beq.n	800e6c6 <_strtod_l+0x126>
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d09d      	beq.n	800e612 <_strtod_l+0x72>
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e6da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e6dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e6de:	2300      	movs	r3, #0
 800e6e0:	9308      	str	r3, [sp, #32]
 800e6e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e6e4:	461f      	mov	r7, r3
 800e6e6:	220a      	movs	r2, #10
 800e6e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e6ea:	7805      	ldrb	r5, [r0, #0]
 800e6ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e6f0:	b2d9      	uxtb	r1, r3
 800e6f2:	2909      	cmp	r1, #9
 800e6f4:	d928      	bls.n	800e748 <_strtod_l+0x1a8>
 800e6f6:	494e      	ldr	r1, [pc, #312]	@ (800e830 <_strtod_l+0x290>)
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f001 fc2b 	bl	800ff54 <strncmp>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d032      	beq.n	800e768 <_strtod_l+0x1c8>
 800e702:	2000      	movs	r0, #0
 800e704:	462a      	mov	r2, r5
 800e706:	4681      	mov	r9, r0
 800e708:	463d      	mov	r5, r7
 800e70a:	4603      	mov	r3, r0
 800e70c:	2a65      	cmp	r2, #101	@ 0x65
 800e70e:	d001      	beq.n	800e714 <_strtod_l+0x174>
 800e710:	2a45      	cmp	r2, #69	@ 0x45
 800e712:	d114      	bne.n	800e73e <_strtod_l+0x19e>
 800e714:	b91d      	cbnz	r5, 800e71e <_strtod_l+0x17e>
 800e716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e718:	4302      	orrs	r2, r0
 800e71a:	d095      	beq.n	800e648 <_strtod_l+0xa8>
 800e71c:	2500      	movs	r5, #0
 800e71e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e720:	1c62      	adds	r2, r4, #1
 800e722:	9219      	str	r2, [sp, #100]	@ 0x64
 800e724:	7862      	ldrb	r2, [r4, #1]
 800e726:	2a2b      	cmp	r2, #43	@ 0x2b
 800e728:	d077      	beq.n	800e81a <_strtod_l+0x27a>
 800e72a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e72c:	d07b      	beq.n	800e826 <_strtod_l+0x286>
 800e72e:	f04f 0c00 	mov.w	ip, #0
 800e732:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e736:	2909      	cmp	r1, #9
 800e738:	f240 8082 	bls.w	800e840 <_strtod_l+0x2a0>
 800e73c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e73e:	f04f 0800 	mov.w	r8, #0
 800e742:	e0a2      	b.n	800e88a <_strtod_l+0x2ea>
 800e744:	2300      	movs	r3, #0
 800e746:	e7c7      	b.n	800e6d8 <_strtod_l+0x138>
 800e748:	2f08      	cmp	r7, #8
 800e74a:	bfd5      	itete	le
 800e74c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e74e:	9908      	ldrgt	r1, [sp, #32]
 800e750:	fb02 3301 	mlale	r3, r2, r1, r3
 800e754:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e758:	f100 0001 	add.w	r0, r0, #1
 800e75c:	bfd4      	ite	le
 800e75e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e760:	9308      	strgt	r3, [sp, #32]
 800e762:	3701      	adds	r7, #1
 800e764:	9019      	str	r0, [sp, #100]	@ 0x64
 800e766:	e7bf      	b.n	800e6e8 <_strtod_l+0x148>
 800e768:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	9219      	str	r2, [sp, #100]	@ 0x64
 800e76e:	785a      	ldrb	r2, [r3, #1]
 800e770:	b37f      	cbz	r7, 800e7d2 <_strtod_l+0x232>
 800e772:	4681      	mov	r9, r0
 800e774:	463d      	mov	r5, r7
 800e776:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e77a:	2b09      	cmp	r3, #9
 800e77c:	d912      	bls.n	800e7a4 <_strtod_l+0x204>
 800e77e:	2301      	movs	r3, #1
 800e780:	e7c4      	b.n	800e70c <_strtod_l+0x16c>
 800e782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e784:	1c5a      	adds	r2, r3, #1
 800e786:	9219      	str	r2, [sp, #100]	@ 0x64
 800e788:	785a      	ldrb	r2, [r3, #1]
 800e78a:	3001      	adds	r0, #1
 800e78c:	2a30      	cmp	r2, #48	@ 0x30
 800e78e:	d0f8      	beq.n	800e782 <_strtod_l+0x1e2>
 800e790:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e794:	2b08      	cmp	r3, #8
 800e796:	f200 84d3 	bhi.w	800f140 <_strtod_l+0xba0>
 800e79a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e79c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e79e:	4681      	mov	r9, r0
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	3a30      	subs	r2, #48	@ 0x30
 800e7a6:	f100 0301 	add.w	r3, r0, #1
 800e7aa:	d02a      	beq.n	800e802 <_strtod_l+0x262>
 800e7ac:	4499      	add	r9, r3
 800e7ae:	eb00 0c05 	add.w	ip, r0, r5
 800e7b2:	462b      	mov	r3, r5
 800e7b4:	210a      	movs	r1, #10
 800e7b6:	4563      	cmp	r3, ip
 800e7b8:	d10d      	bne.n	800e7d6 <_strtod_l+0x236>
 800e7ba:	1c69      	adds	r1, r5, #1
 800e7bc:	4401      	add	r1, r0
 800e7be:	4428      	add	r0, r5
 800e7c0:	2808      	cmp	r0, #8
 800e7c2:	dc16      	bgt.n	800e7f2 <_strtod_l+0x252>
 800e7c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e7c6:	230a      	movs	r3, #10
 800e7c8:	fb03 2300 	mla	r3, r3, r0, r2
 800e7cc:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e018      	b.n	800e804 <_strtod_l+0x264>
 800e7d2:	4638      	mov	r0, r7
 800e7d4:	e7da      	b.n	800e78c <_strtod_l+0x1ec>
 800e7d6:	2b08      	cmp	r3, #8
 800e7d8:	f103 0301 	add.w	r3, r3, #1
 800e7dc:	dc03      	bgt.n	800e7e6 <_strtod_l+0x246>
 800e7de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e7e0:	434e      	muls	r6, r1
 800e7e2:	960a      	str	r6, [sp, #40]	@ 0x28
 800e7e4:	e7e7      	b.n	800e7b6 <_strtod_l+0x216>
 800e7e6:	2b10      	cmp	r3, #16
 800e7e8:	bfde      	ittt	le
 800e7ea:	9e08      	ldrle	r6, [sp, #32]
 800e7ec:	434e      	mulle	r6, r1
 800e7ee:	9608      	strle	r6, [sp, #32]
 800e7f0:	e7e1      	b.n	800e7b6 <_strtod_l+0x216>
 800e7f2:	280f      	cmp	r0, #15
 800e7f4:	dceb      	bgt.n	800e7ce <_strtod_l+0x22e>
 800e7f6:	9808      	ldr	r0, [sp, #32]
 800e7f8:	230a      	movs	r3, #10
 800e7fa:	fb03 2300 	mla	r3, r3, r0, r2
 800e7fe:	9308      	str	r3, [sp, #32]
 800e800:	e7e5      	b.n	800e7ce <_strtod_l+0x22e>
 800e802:	4629      	mov	r1, r5
 800e804:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e806:	1c50      	adds	r0, r2, #1
 800e808:	9019      	str	r0, [sp, #100]	@ 0x64
 800e80a:	7852      	ldrb	r2, [r2, #1]
 800e80c:	4618      	mov	r0, r3
 800e80e:	460d      	mov	r5, r1
 800e810:	e7b1      	b.n	800e776 <_strtod_l+0x1d6>
 800e812:	f04f 0900 	mov.w	r9, #0
 800e816:	2301      	movs	r3, #1
 800e818:	e77d      	b.n	800e716 <_strtod_l+0x176>
 800e81a:	f04f 0c00 	mov.w	ip, #0
 800e81e:	1ca2      	adds	r2, r4, #2
 800e820:	9219      	str	r2, [sp, #100]	@ 0x64
 800e822:	78a2      	ldrb	r2, [r4, #2]
 800e824:	e785      	b.n	800e732 <_strtod_l+0x192>
 800e826:	f04f 0c01 	mov.w	ip, #1
 800e82a:	e7f8      	b.n	800e81e <_strtod_l+0x27e>
 800e82c:	08015088 	.word	0x08015088
 800e830:	08015070 	.word	0x08015070
 800e834:	7ff00000 	.word	0x7ff00000
 800e838:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e83a:	1c51      	adds	r1, r2, #1
 800e83c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e83e:	7852      	ldrb	r2, [r2, #1]
 800e840:	2a30      	cmp	r2, #48	@ 0x30
 800e842:	d0f9      	beq.n	800e838 <_strtod_l+0x298>
 800e844:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e848:	2908      	cmp	r1, #8
 800e84a:	f63f af78 	bhi.w	800e73e <_strtod_l+0x19e>
 800e84e:	3a30      	subs	r2, #48	@ 0x30
 800e850:	920e      	str	r2, [sp, #56]	@ 0x38
 800e852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e854:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e856:	f04f 080a 	mov.w	r8, #10
 800e85a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e85c:	1c56      	adds	r6, r2, #1
 800e85e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e860:	7852      	ldrb	r2, [r2, #1]
 800e862:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e866:	f1be 0f09 	cmp.w	lr, #9
 800e86a:	d939      	bls.n	800e8e0 <_strtod_l+0x340>
 800e86c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e86e:	1a76      	subs	r6, r6, r1
 800e870:	2e08      	cmp	r6, #8
 800e872:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e876:	dc03      	bgt.n	800e880 <_strtod_l+0x2e0>
 800e878:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e87a:	4588      	cmp	r8, r1
 800e87c:	bfa8      	it	ge
 800e87e:	4688      	movge	r8, r1
 800e880:	f1bc 0f00 	cmp.w	ip, #0
 800e884:	d001      	beq.n	800e88a <_strtod_l+0x2ea>
 800e886:	f1c8 0800 	rsb	r8, r8, #0
 800e88a:	2d00      	cmp	r5, #0
 800e88c:	d14e      	bne.n	800e92c <_strtod_l+0x38c>
 800e88e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e890:	4308      	orrs	r0, r1
 800e892:	f47f aebe 	bne.w	800e612 <_strtod_l+0x72>
 800e896:	2b00      	cmp	r3, #0
 800e898:	f47f aed6 	bne.w	800e648 <_strtod_l+0xa8>
 800e89c:	2a69      	cmp	r2, #105	@ 0x69
 800e89e:	d028      	beq.n	800e8f2 <_strtod_l+0x352>
 800e8a0:	dc25      	bgt.n	800e8ee <_strtod_l+0x34e>
 800e8a2:	2a49      	cmp	r2, #73	@ 0x49
 800e8a4:	d025      	beq.n	800e8f2 <_strtod_l+0x352>
 800e8a6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e8a8:	f47f aece 	bne.w	800e648 <_strtod_l+0xa8>
 800e8ac:	499b      	ldr	r1, [pc, #620]	@ (800eb1c <_strtod_l+0x57c>)
 800e8ae:	a819      	add	r0, sp, #100	@ 0x64
 800e8b0:	f002 fd22 	bl	80112f8 <__match>
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	f43f aec7 	beq.w	800e648 <_strtod_l+0xa8>
 800e8ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	2b28      	cmp	r3, #40	@ 0x28
 800e8c0:	d12e      	bne.n	800e920 <_strtod_l+0x380>
 800e8c2:	4997      	ldr	r1, [pc, #604]	@ (800eb20 <_strtod_l+0x580>)
 800e8c4:	aa1c      	add	r2, sp, #112	@ 0x70
 800e8c6:	a819      	add	r0, sp, #100	@ 0x64
 800e8c8:	f002 fd2a 	bl	8011320 <__hexnan>
 800e8cc:	2805      	cmp	r0, #5
 800e8ce:	d127      	bne.n	800e920 <_strtod_l+0x380>
 800e8d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e8d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e8d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e8da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e8de:	e698      	b.n	800e612 <_strtod_l+0x72>
 800e8e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e8e2:	fb08 2101 	mla	r1, r8, r1, r2
 800e8e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e8ea:	920e      	str	r2, [sp, #56]	@ 0x38
 800e8ec:	e7b5      	b.n	800e85a <_strtod_l+0x2ba>
 800e8ee:	2a6e      	cmp	r2, #110	@ 0x6e
 800e8f0:	e7da      	b.n	800e8a8 <_strtod_l+0x308>
 800e8f2:	498c      	ldr	r1, [pc, #560]	@ (800eb24 <_strtod_l+0x584>)
 800e8f4:	a819      	add	r0, sp, #100	@ 0x64
 800e8f6:	f002 fcff 	bl	80112f8 <__match>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	f43f aea4 	beq.w	800e648 <_strtod_l+0xa8>
 800e900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e902:	4989      	ldr	r1, [pc, #548]	@ (800eb28 <_strtod_l+0x588>)
 800e904:	3b01      	subs	r3, #1
 800e906:	a819      	add	r0, sp, #100	@ 0x64
 800e908:	9319      	str	r3, [sp, #100]	@ 0x64
 800e90a:	f002 fcf5 	bl	80112f8 <__match>
 800e90e:	b910      	cbnz	r0, 800e916 <_strtod_l+0x376>
 800e910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e912:	3301      	adds	r3, #1
 800e914:	9319      	str	r3, [sp, #100]	@ 0x64
 800e916:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800eb38 <_strtod_l+0x598>
 800e91a:	f04f 0a00 	mov.w	sl, #0
 800e91e:	e678      	b.n	800e612 <_strtod_l+0x72>
 800e920:	4882      	ldr	r0, [pc, #520]	@ (800eb2c <_strtod_l+0x58c>)
 800e922:	f001 fbc1 	bl	80100a8 <nan>
 800e926:	ec5b ab10 	vmov	sl, fp, d0
 800e92a:	e672      	b.n	800e612 <_strtod_l+0x72>
 800e92c:	eba8 0309 	sub.w	r3, r8, r9
 800e930:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e932:	9309      	str	r3, [sp, #36]	@ 0x24
 800e934:	2f00      	cmp	r7, #0
 800e936:	bf08      	it	eq
 800e938:	462f      	moveq	r7, r5
 800e93a:	2d10      	cmp	r5, #16
 800e93c:	462c      	mov	r4, r5
 800e93e:	bfa8      	it	ge
 800e940:	2410      	movge	r4, #16
 800e942:	f7f1 fdc7 	bl	80004d4 <__aeabi_ui2d>
 800e946:	2d09      	cmp	r5, #9
 800e948:	4682      	mov	sl, r0
 800e94a:	468b      	mov	fp, r1
 800e94c:	dc13      	bgt.n	800e976 <_strtod_l+0x3d6>
 800e94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e950:	2b00      	cmp	r3, #0
 800e952:	f43f ae5e 	beq.w	800e612 <_strtod_l+0x72>
 800e956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e958:	dd78      	ble.n	800ea4c <_strtod_l+0x4ac>
 800e95a:	2b16      	cmp	r3, #22
 800e95c:	dc5f      	bgt.n	800ea1e <_strtod_l+0x47e>
 800e95e:	4974      	ldr	r1, [pc, #464]	@ (800eb30 <_strtod_l+0x590>)
 800e960:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e968:	4652      	mov	r2, sl
 800e96a:	465b      	mov	r3, fp
 800e96c:	f7f1 fe2c 	bl	80005c8 <__aeabi_dmul>
 800e970:	4682      	mov	sl, r0
 800e972:	468b      	mov	fp, r1
 800e974:	e64d      	b.n	800e612 <_strtod_l+0x72>
 800e976:	4b6e      	ldr	r3, [pc, #440]	@ (800eb30 <_strtod_l+0x590>)
 800e978:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e97c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e980:	f7f1 fe22 	bl	80005c8 <__aeabi_dmul>
 800e984:	4682      	mov	sl, r0
 800e986:	9808      	ldr	r0, [sp, #32]
 800e988:	468b      	mov	fp, r1
 800e98a:	f7f1 fda3 	bl	80004d4 <__aeabi_ui2d>
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	4650      	mov	r0, sl
 800e994:	4659      	mov	r1, fp
 800e996:	f7f1 fc61 	bl	800025c <__adddf3>
 800e99a:	2d0f      	cmp	r5, #15
 800e99c:	4682      	mov	sl, r0
 800e99e:	468b      	mov	fp, r1
 800e9a0:	ddd5      	ble.n	800e94e <_strtod_l+0x3ae>
 800e9a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a4:	1b2c      	subs	r4, r5, r4
 800e9a6:	441c      	add	r4, r3
 800e9a8:	2c00      	cmp	r4, #0
 800e9aa:	f340 8096 	ble.w	800eada <_strtod_l+0x53a>
 800e9ae:	f014 030f 	ands.w	r3, r4, #15
 800e9b2:	d00a      	beq.n	800e9ca <_strtod_l+0x42a>
 800e9b4:	495e      	ldr	r1, [pc, #376]	@ (800eb30 <_strtod_l+0x590>)
 800e9b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e9ba:	4652      	mov	r2, sl
 800e9bc:	465b      	mov	r3, fp
 800e9be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9c2:	f7f1 fe01 	bl	80005c8 <__aeabi_dmul>
 800e9c6:	4682      	mov	sl, r0
 800e9c8:	468b      	mov	fp, r1
 800e9ca:	f034 040f 	bics.w	r4, r4, #15
 800e9ce:	d073      	beq.n	800eab8 <_strtod_l+0x518>
 800e9d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e9d4:	dd48      	ble.n	800ea68 <_strtod_l+0x4c8>
 800e9d6:	2400      	movs	r4, #0
 800e9d8:	46a0      	mov	r8, r4
 800e9da:	940a      	str	r4, [sp, #40]	@ 0x28
 800e9dc:	46a1      	mov	r9, r4
 800e9de:	9a05      	ldr	r2, [sp, #20]
 800e9e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800eb38 <_strtod_l+0x598>
 800e9e4:	2322      	movs	r3, #34	@ 0x22
 800e9e6:	6013      	str	r3, [r2, #0]
 800e9e8:	f04f 0a00 	mov.w	sl, #0
 800e9ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	f43f ae0f 	beq.w	800e612 <_strtod_l+0x72>
 800e9f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9f6:	9805      	ldr	r0, [sp, #20]
 800e9f8:	f002 fd80 	bl	80114fc <_Bfree>
 800e9fc:	9805      	ldr	r0, [sp, #20]
 800e9fe:	4649      	mov	r1, r9
 800ea00:	f002 fd7c 	bl	80114fc <_Bfree>
 800ea04:	9805      	ldr	r0, [sp, #20]
 800ea06:	4641      	mov	r1, r8
 800ea08:	f002 fd78 	bl	80114fc <_Bfree>
 800ea0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ea0e:	9805      	ldr	r0, [sp, #20]
 800ea10:	f002 fd74 	bl	80114fc <_Bfree>
 800ea14:	9805      	ldr	r0, [sp, #20]
 800ea16:	4621      	mov	r1, r4
 800ea18:	f002 fd70 	bl	80114fc <_Bfree>
 800ea1c:	e5f9      	b.n	800e612 <_strtod_l+0x72>
 800ea1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ea24:	4293      	cmp	r3, r2
 800ea26:	dbbc      	blt.n	800e9a2 <_strtod_l+0x402>
 800ea28:	4c41      	ldr	r4, [pc, #260]	@ (800eb30 <_strtod_l+0x590>)
 800ea2a:	f1c5 050f 	rsb	r5, r5, #15
 800ea2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ea32:	4652      	mov	r2, sl
 800ea34:	465b      	mov	r3, fp
 800ea36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea3a:	f7f1 fdc5 	bl	80005c8 <__aeabi_dmul>
 800ea3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea40:	1b5d      	subs	r5, r3, r5
 800ea42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ea46:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ea4a:	e78f      	b.n	800e96c <_strtod_l+0x3cc>
 800ea4c:	3316      	adds	r3, #22
 800ea4e:	dba8      	blt.n	800e9a2 <_strtod_l+0x402>
 800ea50:	4b37      	ldr	r3, [pc, #220]	@ (800eb30 <_strtod_l+0x590>)
 800ea52:	eba9 0808 	sub.w	r8, r9, r8
 800ea56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ea5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	4659      	mov	r1, fp
 800ea62:	f7f1 fedb 	bl	800081c <__aeabi_ddiv>
 800ea66:	e783      	b.n	800e970 <_strtod_l+0x3d0>
 800ea68:	4b32      	ldr	r3, [pc, #200]	@ (800eb34 <_strtod_l+0x594>)
 800ea6a:	9308      	str	r3, [sp, #32]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	1124      	asrs	r4, r4, #4
 800ea70:	4650      	mov	r0, sl
 800ea72:	4659      	mov	r1, fp
 800ea74:	461e      	mov	r6, r3
 800ea76:	2c01      	cmp	r4, #1
 800ea78:	dc21      	bgt.n	800eabe <_strtod_l+0x51e>
 800ea7a:	b10b      	cbz	r3, 800ea80 <_strtod_l+0x4e0>
 800ea7c:	4682      	mov	sl, r0
 800ea7e:	468b      	mov	fp, r1
 800ea80:	492c      	ldr	r1, [pc, #176]	@ (800eb34 <_strtod_l+0x594>)
 800ea82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ea86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ea8a:	4652      	mov	r2, sl
 800ea8c:	465b      	mov	r3, fp
 800ea8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea92:	f7f1 fd99 	bl	80005c8 <__aeabi_dmul>
 800ea96:	4b28      	ldr	r3, [pc, #160]	@ (800eb38 <_strtod_l+0x598>)
 800ea98:	460a      	mov	r2, r1
 800ea9a:	400b      	ands	r3, r1
 800ea9c:	4927      	ldr	r1, [pc, #156]	@ (800eb3c <_strtod_l+0x59c>)
 800ea9e:	428b      	cmp	r3, r1
 800eaa0:	4682      	mov	sl, r0
 800eaa2:	d898      	bhi.n	800e9d6 <_strtod_l+0x436>
 800eaa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800eaa8:	428b      	cmp	r3, r1
 800eaaa:	bf86      	itte	hi
 800eaac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800eb40 <_strtod_l+0x5a0>
 800eab0:	f04f 3aff 	movhi.w	sl, #4294967295
 800eab4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800eab8:	2300      	movs	r3, #0
 800eaba:	9308      	str	r3, [sp, #32]
 800eabc:	e07a      	b.n	800ebb4 <_strtod_l+0x614>
 800eabe:	07e2      	lsls	r2, r4, #31
 800eac0:	d505      	bpl.n	800eace <_strtod_l+0x52e>
 800eac2:	9b08      	ldr	r3, [sp, #32]
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f7f1 fd7e 	bl	80005c8 <__aeabi_dmul>
 800eacc:	2301      	movs	r3, #1
 800eace:	9a08      	ldr	r2, [sp, #32]
 800ead0:	3208      	adds	r2, #8
 800ead2:	3601      	adds	r6, #1
 800ead4:	1064      	asrs	r4, r4, #1
 800ead6:	9208      	str	r2, [sp, #32]
 800ead8:	e7cd      	b.n	800ea76 <_strtod_l+0x4d6>
 800eada:	d0ed      	beq.n	800eab8 <_strtod_l+0x518>
 800eadc:	4264      	negs	r4, r4
 800eade:	f014 020f 	ands.w	r2, r4, #15
 800eae2:	d00a      	beq.n	800eafa <_strtod_l+0x55a>
 800eae4:	4b12      	ldr	r3, [pc, #72]	@ (800eb30 <_strtod_l+0x590>)
 800eae6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaea:	4650      	mov	r0, sl
 800eaec:	4659      	mov	r1, fp
 800eaee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf2:	f7f1 fe93 	bl	800081c <__aeabi_ddiv>
 800eaf6:	4682      	mov	sl, r0
 800eaf8:	468b      	mov	fp, r1
 800eafa:	1124      	asrs	r4, r4, #4
 800eafc:	d0dc      	beq.n	800eab8 <_strtod_l+0x518>
 800eafe:	2c1f      	cmp	r4, #31
 800eb00:	dd20      	ble.n	800eb44 <_strtod_l+0x5a4>
 800eb02:	2400      	movs	r4, #0
 800eb04:	46a0      	mov	r8, r4
 800eb06:	940a      	str	r4, [sp, #40]	@ 0x28
 800eb08:	46a1      	mov	r9, r4
 800eb0a:	9a05      	ldr	r2, [sp, #20]
 800eb0c:	2322      	movs	r3, #34	@ 0x22
 800eb0e:	f04f 0a00 	mov.w	sl, #0
 800eb12:	f04f 0b00 	mov.w	fp, #0
 800eb16:	6013      	str	r3, [r2, #0]
 800eb18:	e768      	b.n	800e9ec <_strtod_l+0x44c>
 800eb1a:	bf00      	nop
 800eb1c:	080151d6 	.word	0x080151d6
 800eb20:	08015074 	.word	0x08015074
 800eb24:	080151ce 	.word	0x080151ce
 800eb28:	08015206 	.word	0x08015206
 800eb2c:	080154af 	.word	0x080154af
 800eb30:	08015380 	.word	0x08015380
 800eb34:	08015358 	.word	0x08015358
 800eb38:	7ff00000 	.word	0x7ff00000
 800eb3c:	7ca00000 	.word	0x7ca00000
 800eb40:	7fefffff 	.word	0x7fefffff
 800eb44:	f014 0310 	ands.w	r3, r4, #16
 800eb48:	bf18      	it	ne
 800eb4a:	236a      	movne	r3, #106	@ 0x6a
 800eb4c:	4ea9      	ldr	r6, [pc, #676]	@ (800edf4 <_strtod_l+0x854>)
 800eb4e:	9308      	str	r3, [sp, #32]
 800eb50:	4650      	mov	r0, sl
 800eb52:	4659      	mov	r1, fp
 800eb54:	2300      	movs	r3, #0
 800eb56:	07e2      	lsls	r2, r4, #31
 800eb58:	d504      	bpl.n	800eb64 <_strtod_l+0x5c4>
 800eb5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb5e:	f7f1 fd33 	bl	80005c8 <__aeabi_dmul>
 800eb62:	2301      	movs	r3, #1
 800eb64:	1064      	asrs	r4, r4, #1
 800eb66:	f106 0608 	add.w	r6, r6, #8
 800eb6a:	d1f4      	bne.n	800eb56 <_strtod_l+0x5b6>
 800eb6c:	b10b      	cbz	r3, 800eb72 <_strtod_l+0x5d2>
 800eb6e:	4682      	mov	sl, r0
 800eb70:	468b      	mov	fp, r1
 800eb72:	9b08      	ldr	r3, [sp, #32]
 800eb74:	b1b3      	cbz	r3, 800eba4 <_strtod_l+0x604>
 800eb76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800eb7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	4659      	mov	r1, fp
 800eb82:	dd0f      	ble.n	800eba4 <_strtod_l+0x604>
 800eb84:	2b1f      	cmp	r3, #31
 800eb86:	dd55      	ble.n	800ec34 <_strtod_l+0x694>
 800eb88:	2b34      	cmp	r3, #52	@ 0x34
 800eb8a:	bfde      	ittt	le
 800eb8c:	f04f 33ff 	movle.w	r3, #4294967295
 800eb90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800eb94:	4093      	lslle	r3, r2
 800eb96:	f04f 0a00 	mov.w	sl, #0
 800eb9a:	bfcc      	ite	gt
 800eb9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800eba0:	ea03 0b01 	andle.w	fp, r3, r1
 800eba4:	2200      	movs	r2, #0
 800eba6:	2300      	movs	r3, #0
 800eba8:	4650      	mov	r0, sl
 800ebaa:	4659      	mov	r1, fp
 800ebac:	f7f1 ff74 	bl	8000a98 <__aeabi_dcmpeq>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d1a6      	bne.n	800eb02 <_strtod_l+0x562>
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebb6:	9300      	str	r3, [sp, #0]
 800ebb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ebba:	9805      	ldr	r0, [sp, #20]
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	463a      	mov	r2, r7
 800ebc0:	f002 fd04 	bl	80115cc <__s2b>
 800ebc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	f43f af05 	beq.w	800e9d6 <_strtod_l+0x436>
 800ebcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	eba9 0308 	sub.w	r3, r9, r8
 800ebd4:	bfa8      	it	ge
 800ebd6:	2300      	movge	r3, #0
 800ebd8:	9312      	str	r3, [sp, #72]	@ 0x48
 800ebda:	2400      	movs	r4, #0
 800ebdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ebe0:	9316      	str	r3, [sp, #88]	@ 0x58
 800ebe2:	46a0      	mov	r8, r4
 800ebe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebe6:	9805      	ldr	r0, [sp, #20]
 800ebe8:	6859      	ldr	r1, [r3, #4]
 800ebea:	f002 fc47 	bl	801147c <_Balloc>
 800ebee:	4681      	mov	r9, r0
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	f43f aef4 	beq.w	800e9de <_strtod_l+0x43e>
 800ebf6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebf8:	691a      	ldr	r2, [r3, #16]
 800ebfa:	3202      	adds	r2, #2
 800ebfc:	f103 010c 	add.w	r1, r3, #12
 800ec00:	0092      	lsls	r2, r2, #2
 800ec02:	300c      	adds	r0, #12
 800ec04:	f001 fa3f 	bl	8010086 <memcpy>
 800ec08:	ec4b ab10 	vmov	d0, sl, fp
 800ec0c:	9805      	ldr	r0, [sp, #20]
 800ec0e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ec10:	a91b      	add	r1, sp, #108	@ 0x6c
 800ec12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ec16:	f003 f815 	bl	8011c44 <__d2b>
 800ec1a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ec1c:	2800      	cmp	r0, #0
 800ec1e:	f43f aede 	beq.w	800e9de <_strtod_l+0x43e>
 800ec22:	9805      	ldr	r0, [sp, #20]
 800ec24:	2101      	movs	r1, #1
 800ec26:	f002 fd67 	bl	80116f8 <__i2b>
 800ec2a:	4680      	mov	r8, r0
 800ec2c:	b948      	cbnz	r0, 800ec42 <_strtod_l+0x6a2>
 800ec2e:	f04f 0800 	mov.w	r8, #0
 800ec32:	e6d4      	b.n	800e9de <_strtod_l+0x43e>
 800ec34:	f04f 32ff 	mov.w	r2, #4294967295
 800ec38:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3c:	ea03 0a0a 	and.w	sl, r3, sl
 800ec40:	e7b0      	b.n	800eba4 <_strtod_l+0x604>
 800ec42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ec44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ec46:	2d00      	cmp	r5, #0
 800ec48:	bfab      	itete	ge
 800ec4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ec4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ec4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ec50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ec52:	bfac      	ite	ge
 800ec54:	18ef      	addge	r7, r5, r3
 800ec56:	1b5e      	sublt	r6, r3, r5
 800ec58:	9b08      	ldr	r3, [sp, #32]
 800ec5a:	1aed      	subs	r5, r5, r3
 800ec5c:	4415      	add	r5, r2
 800ec5e:	4b66      	ldr	r3, [pc, #408]	@ (800edf8 <_strtod_l+0x858>)
 800ec60:	3d01      	subs	r5, #1
 800ec62:	429d      	cmp	r5, r3
 800ec64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ec68:	da50      	bge.n	800ed0c <_strtod_l+0x76c>
 800ec6a:	1b5b      	subs	r3, r3, r5
 800ec6c:	2b1f      	cmp	r3, #31
 800ec6e:	eba2 0203 	sub.w	r2, r2, r3
 800ec72:	f04f 0101 	mov.w	r1, #1
 800ec76:	dc3d      	bgt.n	800ecf4 <_strtod_l+0x754>
 800ec78:	fa01 f303 	lsl.w	r3, r1, r3
 800ec7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ec7e:	2300      	movs	r3, #0
 800ec80:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec82:	18bd      	adds	r5, r7, r2
 800ec84:	9b08      	ldr	r3, [sp, #32]
 800ec86:	42af      	cmp	r7, r5
 800ec88:	4416      	add	r6, r2
 800ec8a:	441e      	add	r6, r3
 800ec8c:	463b      	mov	r3, r7
 800ec8e:	bfa8      	it	ge
 800ec90:	462b      	movge	r3, r5
 800ec92:	42b3      	cmp	r3, r6
 800ec94:	bfa8      	it	ge
 800ec96:	4633      	movge	r3, r6
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	bfc2      	ittt	gt
 800ec9c:	1aed      	subgt	r5, r5, r3
 800ec9e:	1af6      	subgt	r6, r6, r3
 800eca0:	1aff      	subgt	r7, r7, r3
 800eca2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	dd16      	ble.n	800ecd6 <_strtod_l+0x736>
 800eca8:	4641      	mov	r1, r8
 800ecaa:	9805      	ldr	r0, [sp, #20]
 800ecac:	461a      	mov	r2, r3
 800ecae:	f002 fde3 	bl	8011878 <__pow5mult>
 800ecb2:	4680      	mov	r8, r0
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d0ba      	beq.n	800ec2e <_strtod_l+0x68e>
 800ecb8:	4601      	mov	r1, r0
 800ecba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ecbc:	9805      	ldr	r0, [sp, #20]
 800ecbe:	f002 fd31 	bl	8011724 <__multiply>
 800ecc2:	900e      	str	r0, [sp, #56]	@ 0x38
 800ecc4:	2800      	cmp	r0, #0
 800ecc6:	f43f ae8a 	beq.w	800e9de <_strtod_l+0x43e>
 800ecca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eccc:	9805      	ldr	r0, [sp, #20]
 800ecce:	f002 fc15 	bl	80114fc <_Bfree>
 800ecd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecd4:	931a      	str	r3, [sp, #104]	@ 0x68
 800ecd6:	2d00      	cmp	r5, #0
 800ecd8:	dc1d      	bgt.n	800ed16 <_strtod_l+0x776>
 800ecda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	dd23      	ble.n	800ed28 <_strtod_l+0x788>
 800ece0:	4649      	mov	r1, r9
 800ece2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ece4:	9805      	ldr	r0, [sp, #20]
 800ece6:	f002 fdc7 	bl	8011878 <__pow5mult>
 800ecea:	4681      	mov	r9, r0
 800ecec:	b9e0      	cbnz	r0, 800ed28 <_strtod_l+0x788>
 800ecee:	f04f 0900 	mov.w	r9, #0
 800ecf2:	e674      	b.n	800e9de <_strtod_l+0x43e>
 800ecf4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ecf8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ecfc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ed00:	35e2      	adds	r5, #226	@ 0xe2
 800ed02:	fa01 f305 	lsl.w	r3, r1, r5
 800ed06:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed08:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ed0a:	e7ba      	b.n	800ec82 <_strtod_l+0x6e2>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ed10:	2301      	movs	r3, #1
 800ed12:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed14:	e7b5      	b.n	800ec82 <_strtod_l+0x6e2>
 800ed16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed18:	9805      	ldr	r0, [sp, #20]
 800ed1a:	462a      	mov	r2, r5
 800ed1c:	f002 fe06 	bl	801192c <__lshift>
 800ed20:	901a      	str	r0, [sp, #104]	@ 0x68
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d1d9      	bne.n	800ecda <_strtod_l+0x73a>
 800ed26:	e65a      	b.n	800e9de <_strtod_l+0x43e>
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	dd07      	ble.n	800ed3c <_strtod_l+0x79c>
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	9805      	ldr	r0, [sp, #20]
 800ed30:	4632      	mov	r2, r6
 800ed32:	f002 fdfb 	bl	801192c <__lshift>
 800ed36:	4681      	mov	r9, r0
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	d0d8      	beq.n	800ecee <_strtod_l+0x74e>
 800ed3c:	2f00      	cmp	r7, #0
 800ed3e:	dd08      	ble.n	800ed52 <_strtod_l+0x7b2>
 800ed40:	4641      	mov	r1, r8
 800ed42:	9805      	ldr	r0, [sp, #20]
 800ed44:	463a      	mov	r2, r7
 800ed46:	f002 fdf1 	bl	801192c <__lshift>
 800ed4a:	4680      	mov	r8, r0
 800ed4c:	2800      	cmp	r0, #0
 800ed4e:	f43f ae46 	beq.w	800e9de <_strtod_l+0x43e>
 800ed52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ed54:	9805      	ldr	r0, [sp, #20]
 800ed56:	464a      	mov	r2, r9
 800ed58:	f002 fe70 	bl	8011a3c <__mdiff>
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	2800      	cmp	r0, #0
 800ed60:	f43f ae3d 	beq.w	800e9de <_strtod_l+0x43e>
 800ed64:	68c3      	ldr	r3, [r0, #12]
 800ed66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ed68:	2300      	movs	r3, #0
 800ed6a:	60c3      	str	r3, [r0, #12]
 800ed6c:	4641      	mov	r1, r8
 800ed6e:	f002 fe49 	bl	8011a04 <__mcmp>
 800ed72:	2800      	cmp	r0, #0
 800ed74:	da46      	bge.n	800ee04 <_strtod_l+0x864>
 800ed76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed78:	ea53 030a 	orrs.w	r3, r3, sl
 800ed7c:	d16c      	bne.n	800ee58 <_strtod_l+0x8b8>
 800ed7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d168      	bne.n	800ee58 <_strtod_l+0x8b8>
 800ed86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ed8a:	0d1b      	lsrs	r3, r3, #20
 800ed8c:	051b      	lsls	r3, r3, #20
 800ed8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ed92:	d961      	bls.n	800ee58 <_strtod_l+0x8b8>
 800ed94:	6963      	ldr	r3, [r4, #20]
 800ed96:	b913      	cbnz	r3, 800ed9e <_strtod_l+0x7fe>
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	dd5c      	ble.n	800ee58 <_strtod_l+0x8b8>
 800ed9e:	4621      	mov	r1, r4
 800eda0:	2201      	movs	r2, #1
 800eda2:	9805      	ldr	r0, [sp, #20]
 800eda4:	f002 fdc2 	bl	801192c <__lshift>
 800eda8:	4641      	mov	r1, r8
 800edaa:	4604      	mov	r4, r0
 800edac:	f002 fe2a 	bl	8011a04 <__mcmp>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	dd51      	ble.n	800ee58 <_strtod_l+0x8b8>
 800edb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800edb8:	9a08      	ldr	r2, [sp, #32]
 800edba:	0d1b      	lsrs	r3, r3, #20
 800edbc:	051b      	lsls	r3, r3, #20
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	d06b      	beq.n	800ee9a <_strtod_l+0x8fa>
 800edc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800edc6:	d868      	bhi.n	800ee9a <_strtod_l+0x8fa>
 800edc8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800edcc:	f67f ae9d 	bls.w	800eb0a <_strtod_l+0x56a>
 800edd0:	4b0a      	ldr	r3, [pc, #40]	@ (800edfc <_strtod_l+0x85c>)
 800edd2:	4650      	mov	r0, sl
 800edd4:	4659      	mov	r1, fp
 800edd6:	2200      	movs	r2, #0
 800edd8:	f7f1 fbf6 	bl	80005c8 <__aeabi_dmul>
 800eddc:	4b08      	ldr	r3, [pc, #32]	@ (800ee00 <_strtod_l+0x860>)
 800edde:	400b      	ands	r3, r1
 800ede0:	4682      	mov	sl, r0
 800ede2:	468b      	mov	fp, r1
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	f47f ae05 	bne.w	800e9f4 <_strtod_l+0x454>
 800edea:	9a05      	ldr	r2, [sp, #20]
 800edec:	2322      	movs	r3, #34	@ 0x22
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	e600      	b.n	800e9f4 <_strtod_l+0x454>
 800edf2:	bf00      	nop
 800edf4:	080150a0 	.word	0x080150a0
 800edf8:	fffffc02 	.word	0xfffffc02
 800edfc:	39500000 	.word	0x39500000
 800ee00:	7ff00000 	.word	0x7ff00000
 800ee04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ee08:	d165      	bne.n	800eed6 <_strtod_l+0x936>
 800ee0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ee0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee10:	b35a      	cbz	r2, 800ee6a <_strtod_l+0x8ca>
 800ee12:	4a9f      	ldr	r2, [pc, #636]	@ (800f090 <_strtod_l+0xaf0>)
 800ee14:	4293      	cmp	r3, r2
 800ee16:	d12b      	bne.n	800ee70 <_strtod_l+0x8d0>
 800ee18:	9b08      	ldr	r3, [sp, #32]
 800ee1a:	4651      	mov	r1, sl
 800ee1c:	b303      	cbz	r3, 800ee60 <_strtod_l+0x8c0>
 800ee1e:	4b9d      	ldr	r3, [pc, #628]	@ (800f094 <_strtod_l+0xaf4>)
 800ee20:	465a      	mov	r2, fp
 800ee22:	4013      	ands	r3, r2
 800ee24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ee28:	f04f 32ff 	mov.w	r2, #4294967295
 800ee2c:	d81b      	bhi.n	800ee66 <_strtod_l+0x8c6>
 800ee2e:	0d1b      	lsrs	r3, r3, #20
 800ee30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ee34:	fa02 f303 	lsl.w	r3, r2, r3
 800ee38:	4299      	cmp	r1, r3
 800ee3a:	d119      	bne.n	800ee70 <_strtod_l+0x8d0>
 800ee3c:	4b96      	ldr	r3, [pc, #600]	@ (800f098 <_strtod_l+0xaf8>)
 800ee3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d102      	bne.n	800ee4a <_strtod_l+0x8aa>
 800ee44:	3101      	adds	r1, #1
 800ee46:	f43f adca 	beq.w	800e9de <_strtod_l+0x43e>
 800ee4a:	4b92      	ldr	r3, [pc, #584]	@ (800f094 <_strtod_l+0xaf4>)
 800ee4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee4e:	401a      	ands	r2, r3
 800ee50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ee54:	f04f 0a00 	mov.w	sl, #0
 800ee58:	9b08      	ldr	r3, [sp, #32]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1b8      	bne.n	800edd0 <_strtod_l+0x830>
 800ee5e:	e5c9      	b.n	800e9f4 <_strtod_l+0x454>
 800ee60:	f04f 33ff 	mov.w	r3, #4294967295
 800ee64:	e7e8      	b.n	800ee38 <_strtod_l+0x898>
 800ee66:	4613      	mov	r3, r2
 800ee68:	e7e6      	b.n	800ee38 <_strtod_l+0x898>
 800ee6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ee6e:	d0a1      	beq.n	800edb4 <_strtod_l+0x814>
 800ee70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee72:	b1db      	cbz	r3, 800eeac <_strtod_l+0x90c>
 800ee74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee76:	4213      	tst	r3, r2
 800ee78:	d0ee      	beq.n	800ee58 <_strtod_l+0x8b8>
 800ee7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ee7c:	9a08      	ldr	r2, [sp, #32]
 800ee7e:	4650      	mov	r0, sl
 800ee80:	4659      	mov	r1, fp
 800ee82:	b1bb      	cbz	r3, 800eeb4 <_strtod_l+0x914>
 800ee84:	f7ff fb6c 	bl	800e560 <sulp>
 800ee88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee8c:	ec53 2b10 	vmov	r2, r3, d0
 800ee90:	f7f1 f9e4 	bl	800025c <__adddf3>
 800ee94:	4682      	mov	sl, r0
 800ee96:	468b      	mov	fp, r1
 800ee98:	e7de      	b.n	800ee58 <_strtod_l+0x8b8>
 800ee9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ee9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eea2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eea6:	f04f 3aff 	mov.w	sl, #4294967295
 800eeaa:	e7d5      	b.n	800ee58 <_strtod_l+0x8b8>
 800eeac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eeae:	ea13 0f0a 	tst.w	r3, sl
 800eeb2:	e7e1      	b.n	800ee78 <_strtod_l+0x8d8>
 800eeb4:	f7ff fb54 	bl	800e560 <sulp>
 800eeb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eebc:	ec53 2b10 	vmov	r2, r3, d0
 800eec0:	f7f1 f9ca 	bl	8000258 <__aeabi_dsub>
 800eec4:	2200      	movs	r2, #0
 800eec6:	2300      	movs	r3, #0
 800eec8:	4682      	mov	sl, r0
 800eeca:	468b      	mov	fp, r1
 800eecc:	f7f1 fde4 	bl	8000a98 <__aeabi_dcmpeq>
 800eed0:	2800      	cmp	r0, #0
 800eed2:	d0c1      	beq.n	800ee58 <_strtod_l+0x8b8>
 800eed4:	e619      	b.n	800eb0a <_strtod_l+0x56a>
 800eed6:	4641      	mov	r1, r8
 800eed8:	4620      	mov	r0, r4
 800eeda:	f002 ff0b 	bl	8011cf4 <__ratio>
 800eede:	ec57 6b10 	vmov	r6, r7, d0
 800eee2:	2200      	movs	r2, #0
 800eee4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eee8:	4630      	mov	r0, r6
 800eeea:	4639      	mov	r1, r7
 800eeec:	f7f1 fde8 	bl	8000ac0 <__aeabi_dcmple>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d06f      	beq.n	800efd4 <_strtod_l+0xa34>
 800eef4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d17a      	bne.n	800eff0 <_strtod_l+0xa50>
 800eefa:	f1ba 0f00 	cmp.w	sl, #0
 800eefe:	d158      	bne.n	800efb2 <_strtod_l+0xa12>
 800ef00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d15a      	bne.n	800efc0 <_strtod_l+0xa20>
 800ef0a:	4b64      	ldr	r3, [pc, #400]	@ (800f09c <_strtod_l+0xafc>)
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	4630      	mov	r0, r6
 800ef10:	4639      	mov	r1, r7
 800ef12:	f7f1 fdcb 	bl	8000aac <__aeabi_dcmplt>
 800ef16:	2800      	cmp	r0, #0
 800ef18:	d159      	bne.n	800efce <_strtod_l+0xa2e>
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	4639      	mov	r1, r7
 800ef1e:	4b60      	ldr	r3, [pc, #384]	@ (800f0a0 <_strtod_l+0xb00>)
 800ef20:	2200      	movs	r2, #0
 800ef22:	f7f1 fb51 	bl	80005c8 <__aeabi_dmul>
 800ef26:	4606      	mov	r6, r0
 800ef28:	460f      	mov	r7, r1
 800ef2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ef2e:	9606      	str	r6, [sp, #24]
 800ef30:	9307      	str	r3, [sp, #28]
 800ef32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef36:	4d57      	ldr	r5, [pc, #348]	@ (800f094 <_strtod_l+0xaf4>)
 800ef38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ef3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef3e:	401d      	ands	r5, r3
 800ef40:	4b58      	ldr	r3, [pc, #352]	@ (800f0a4 <_strtod_l+0xb04>)
 800ef42:	429d      	cmp	r5, r3
 800ef44:	f040 80b2 	bne.w	800f0ac <_strtod_l+0xb0c>
 800ef48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ef4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ef4e:	ec4b ab10 	vmov	d0, sl, fp
 800ef52:	f002 fe07 	bl	8011b64 <__ulp>
 800ef56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ef5a:	ec51 0b10 	vmov	r0, r1, d0
 800ef5e:	f7f1 fb33 	bl	80005c8 <__aeabi_dmul>
 800ef62:	4652      	mov	r2, sl
 800ef64:	465b      	mov	r3, fp
 800ef66:	f7f1 f979 	bl	800025c <__adddf3>
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4949      	ldr	r1, [pc, #292]	@ (800f094 <_strtod_l+0xaf4>)
 800ef6e:	4a4e      	ldr	r2, [pc, #312]	@ (800f0a8 <_strtod_l+0xb08>)
 800ef70:	4019      	ands	r1, r3
 800ef72:	4291      	cmp	r1, r2
 800ef74:	4682      	mov	sl, r0
 800ef76:	d942      	bls.n	800effe <_strtod_l+0xa5e>
 800ef78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ef7a:	4b47      	ldr	r3, [pc, #284]	@ (800f098 <_strtod_l+0xaf8>)
 800ef7c:	429a      	cmp	r2, r3
 800ef7e:	d103      	bne.n	800ef88 <_strtod_l+0x9e8>
 800ef80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef82:	3301      	adds	r3, #1
 800ef84:	f43f ad2b 	beq.w	800e9de <_strtod_l+0x43e>
 800ef88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f098 <_strtod_l+0xaf8>
 800ef8c:	f04f 3aff 	mov.w	sl, #4294967295
 800ef90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ef92:	9805      	ldr	r0, [sp, #20]
 800ef94:	f002 fab2 	bl	80114fc <_Bfree>
 800ef98:	9805      	ldr	r0, [sp, #20]
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	f002 faae 	bl	80114fc <_Bfree>
 800efa0:	9805      	ldr	r0, [sp, #20]
 800efa2:	4641      	mov	r1, r8
 800efa4:	f002 faaa 	bl	80114fc <_Bfree>
 800efa8:	9805      	ldr	r0, [sp, #20]
 800efaa:	4621      	mov	r1, r4
 800efac:	f002 faa6 	bl	80114fc <_Bfree>
 800efb0:	e618      	b.n	800ebe4 <_strtod_l+0x644>
 800efb2:	f1ba 0f01 	cmp.w	sl, #1
 800efb6:	d103      	bne.n	800efc0 <_strtod_l+0xa20>
 800efb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f43f ada5 	beq.w	800eb0a <_strtod_l+0x56a>
 800efc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f070 <_strtod_l+0xad0>
 800efc4:	4f35      	ldr	r7, [pc, #212]	@ (800f09c <_strtod_l+0xafc>)
 800efc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800efca:	2600      	movs	r6, #0
 800efcc:	e7b1      	b.n	800ef32 <_strtod_l+0x992>
 800efce:	4f34      	ldr	r7, [pc, #208]	@ (800f0a0 <_strtod_l+0xb00>)
 800efd0:	2600      	movs	r6, #0
 800efd2:	e7aa      	b.n	800ef2a <_strtod_l+0x98a>
 800efd4:	4b32      	ldr	r3, [pc, #200]	@ (800f0a0 <_strtod_l+0xb00>)
 800efd6:	4630      	mov	r0, r6
 800efd8:	4639      	mov	r1, r7
 800efda:	2200      	movs	r2, #0
 800efdc:	f7f1 faf4 	bl	80005c8 <__aeabi_dmul>
 800efe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efe2:	4606      	mov	r6, r0
 800efe4:	460f      	mov	r7, r1
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d09f      	beq.n	800ef2a <_strtod_l+0x98a>
 800efea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800efee:	e7a0      	b.n	800ef32 <_strtod_l+0x992>
 800eff0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f078 <_strtod_l+0xad8>
 800eff4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eff8:	ec57 6b17 	vmov	r6, r7, d7
 800effc:	e799      	b.n	800ef32 <_strtod_l+0x992>
 800effe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f002:	9b08      	ldr	r3, [sp, #32]
 800f004:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d1c1      	bne.n	800ef90 <_strtod_l+0x9f0>
 800f00c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f010:	0d1b      	lsrs	r3, r3, #20
 800f012:	051b      	lsls	r3, r3, #20
 800f014:	429d      	cmp	r5, r3
 800f016:	d1bb      	bne.n	800ef90 <_strtod_l+0x9f0>
 800f018:	4630      	mov	r0, r6
 800f01a:	4639      	mov	r1, r7
 800f01c:	f7f1 fde4 	bl	8000be8 <__aeabi_d2lz>
 800f020:	f7f1 faa4 	bl	800056c <__aeabi_l2d>
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	4630      	mov	r0, r6
 800f02a:	4639      	mov	r1, r7
 800f02c:	f7f1 f914 	bl	8000258 <__aeabi_dsub>
 800f030:	460b      	mov	r3, r1
 800f032:	4602      	mov	r2, r0
 800f034:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f038:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f03e:	ea46 060a 	orr.w	r6, r6, sl
 800f042:	431e      	orrs	r6, r3
 800f044:	d06f      	beq.n	800f126 <_strtod_l+0xb86>
 800f046:	a30e      	add	r3, pc, #56	@ (adr r3, 800f080 <_strtod_l+0xae0>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	f7f1 fd2e 	bl	8000aac <__aeabi_dcmplt>
 800f050:	2800      	cmp	r0, #0
 800f052:	f47f accf 	bne.w	800e9f4 <_strtod_l+0x454>
 800f056:	a30c      	add	r3, pc, #48	@ (adr r3, 800f088 <_strtod_l+0xae8>)
 800f058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f060:	f7f1 fd42 	bl	8000ae8 <__aeabi_dcmpgt>
 800f064:	2800      	cmp	r0, #0
 800f066:	d093      	beq.n	800ef90 <_strtod_l+0x9f0>
 800f068:	e4c4      	b.n	800e9f4 <_strtod_l+0x454>
 800f06a:	bf00      	nop
 800f06c:	f3af 8000 	nop.w
 800f070:	00000000 	.word	0x00000000
 800f074:	bff00000 	.word	0xbff00000
 800f078:	00000000 	.word	0x00000000
 800f07c:	3ff00000 	.word	0x3ff00000
 800f080:	94a03595 	.word	0x94a03595
 800f084:	3fdfffff 	.word	0x3fdfffff
 800f088:	35afe535 	.word	0x35afe535
 800f08c:	3fe00000 	.word	0x3fe00000
 800f090:	000fffff 	.word	0x000fffff
 800f094:	7ff00000 	.word	0x7ff00000
 800f098:	7fefffff 	.word	0x7fefffff
 800f09c:	3ff00000 	.word	0x3ff00000
 800f0a0:	3fe00000 	.word	0x3fe00000
 800f0a4:	7fe00000 	.word	0x7fe00000
 800f0a8:	7c9fffff 	.word	0x7c9fffff
 800f0ac:	9b08      	ldr	r3, [sp, #32]
 800f0ae:	b323      	cbz	r3, 800f0fa <_strtod_l+0xb5a>
 800f0b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f0b4:	d821      	bhi.n	800f0fa <_strtod_l+0xb5a>
 800f0b6:	a328      	add	r3, pc, #160	@ (adr r3, 800f158 <_strtod_l+0xbb8>)
 800f0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0bc:	4630      	mov	r0, r6
 800f0be:	4639      	mov	r1, r7
 800f0c0:	f7f1 fcfe 	bl	8000ac0 <__aeabi_dcmple>
 800f0c4:	b1a0      	cbz	r0, 800f0f0 <_strtod_l+0xb50>
 800f0c6:	4639      	mov	r1, r7
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f7f1 fd55 	bl	8000b78 <__aeabi_d2uiz>
 800f0ce:	2801      	cmp	r0, #1
 800f0d0:	bf38      	it	cc
 800f0d2:	2001      	movcc	r0, #1
 800f0d4:	f7f1 f9fe 	bl	80004d4 <__aeabi_ui2d>
 800f0d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f0da:	4606      	mov	r6, r0
 800f0dc:	460f      	mov	r7, r1
 800f0de:	b9fb      	cbnz	r3, 800f120 <_strtod_l+0xb80>
 800f0e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0e4:	9014      	str	r0, [sp, #80]	@ 0x50
 800f0e6:	9315      	str	r3, [sp, #84]	@ 0x54
 800f0e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f0ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f0f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f0f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f0f6:	1b5b      	subs	r3, r3, r5
 800f0f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800f0fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f0fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f102:	f002 fd2f 	bl	8011b64 <__ulp>
 800f106:	4650      	mov	r0, sl
 800f108:	ec53 2b10 	vmov	r2, r3, d0
 800f10c:	4659      	mov	r1, fp
 800f10e:	f7f1 fa5b 	bl	80005c8 <__aeabi_dmul>
 800f112:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f116:	f7f1 f8a1 	bl	800025c <__adddf3>
 800f11a:	4682      	mov	sl, r0
 800f11c:	468b      	mov	fp, r1
 800f11e:	e770      	b.n	800f002 <_strtod_l+0xa62>
 800f120:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f124:	e7e0      	b.n	800f0e8 <_strtod_l+0xb48>
 800f126:	a30e      	add	r3, pc, #56	@ (adr r3, 800f160 <_strtod_l+0xbc0>)
 800f128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12c:	f7f1 fcbe 	bl	8000aac <__aeabi_dcmplt>
 800f130:	e798      	b.n	800f064 <_strtod_l+0xac4>
 800f132:	2300      	movs	r3, #0
 800f134:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f136:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	f7ff ba6d 	b.w	800e61a <_strtod_l+0x7a>
 800f140:	2a65      	cmp	r2, #101	@ 0x65
 800f142:	f43f ab66 	beq.w	800e812 <_strtod_l+0x272>
 800f146:	2a45      	cmp	r2, #69	@ 0x45
 800f148:	f43f ab63 	beq.w	800e812 <_strtod_l+0x272>
 800f14c:	2301      	movs	r3, #1
 800f14e:	f7ff bb9e 	b.w	800e88e <_strtod_l+0x2ee>
 800f152:	bf00      	nop
 800f154:	f3af 8000 	nop.w
 800f158:	ffc00000 	.word	0xffc00000
 800f15c:	41dfffff 	.word	0x41dfffff
 800f160:	94a03595 	.word	0x94a03595
 800f164:	3fcfffff 	.word	0x3fcfffff

0800f168 <strtod>:
 800f168:	460a      	mov	r2, r1
 800f16a:	4601      	mov	r1, r0
 800f16c:	4802      	ldr	r0, [pc, #8]	@ (800f178 <strtod+0x10>)
 800f16e:	4b03      	ldr	r3, [pc, #12]	@ (800f17c <strtod+0x14>)
 800f170:	6800      	ldr	r0, [r0, #0]
 800f172:	f7ff ba15 	b.w	800e5a0 <_strtod_l>
 800f176:	bf00      	nop
 800f178:	200001b0 	.word	0x200001b0
 800f17c:	20000044 	.word	0x20000044

0800f180 <__cvt>:
 800f180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	ec57 6b10 	vmov	r6, r7, d0
 800f188:	2f00      	cmp	r7, #0
 800f18a:	460c      	mov	r4, r1
 800f18c:	4619      	mov	r1, r3
 800f18e:	463b      	mov	r3, r7
 800f190:	bfbb      	ittet	lt
 800f192:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f196:	461f      	movlt	r7, r3
 800f198:	2300      	movge	r3, #0
 800f19a:	232d      	movlt	r3, #45	@ 0x2d
 800f19c:	700b      	strb	r3, [r1, #0]
 800f19e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f1a0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f1a4:	4691      	mov	r9, r2
 800f1a6:	f023 0820 	bic.w	r8, r3, #32
 800f1aa:	bfbc      	itt	lt
 800f1ac:	4632      	movlt	r2, r6
 800f1ae:	4616      	movlt	r6, r2
 800f1b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f1b4:	d005      	beq.n	800f1c2 <__cvt+0x42>
 800f1b6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f1ba:	d100      	bne.n	800f1be <__cvt+0x3e>
 800f1bc:	3401      	adds	r4, #1
 800f1be:	2102      	movs	r1, #2
 800f1c0:	e000      	b.n	800f1c4 <__cvt+0x44>
 800f1c2:	2103      	movs	r1, #3
 800f1c4:	ab03      	add	r3, sp, #12
 800f1c6:	9301      	str	r3, [sp, #4]
 800f1c8:	ab02      	add	r3, sp, #8
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	ec47 6b10 	vmov	d0, r6, r7
 800f1d0:	4653      	mov	r3, sl
 800f1d2:	4622      	mov	r2, r4
 800f1d4:	f000 fff8 	bl	80101c8 <_dtoa_r>
 800f1d8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f1dc:	4605      	mov	r5, r0
 800f1de:	d119      	bne.n	800f214 <__cvt+0x94>
 800f1e0:	f019 0f01 	tst.w	r9, #1
 800f1e4:	d00e      	beq.n	800f204 <__cvt+0x84>
 800f1e6:	eb00 0904 	add.w	r9, r0, r4
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	4639      	mov	r1, r7
 800f1f2:	f7f1 fc51 	bl	8000a98 <__aeabi_dcmpeq>
 800f1f6:	b108      	cbz	r0, 800f1fc <__cvt+0x7c>
 800f1f8:	f8cd 900c 	str.w	r9, [sp, #12]
 800f1fc:	2230      	movs	r2, #48	@ 0x30
 800f1fe:	9b03      	ldr	r3, [sp, #12]
 800f200:	454b      	cmp	r3, r9
 800f202:	d31e      	bcc.n	800f242 <__cvt+0xc2>
 800f204:	9b03      	ldr	r3, [sp, #12]
 800f206:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f208:	1b5b      	subs	r3, r3, r5
 800f20a:	4628      	mov	r0, r5
 800f20c:	6013      	str	r3, [r2, #0]
 800f20e:	b004      	add	sp, #16
 800f210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f214:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f218:	eb00 0904 	add.w	r9, r0, r4
 800f21c:	d1e5      	bne.n	800f1ea <__cvt+0x6a>
 800f21e:	7803      	ldrb	r3, [r0, #0]
 800f220:	2b30      	cmp	r3, #48	@ 0x30
 800f222:	d10a      	bne.n	800f23a <__cvt+0xba>
 800f224:	2200      	movs	r2, #0
 800f226:	2300      	movs	r3, #0
 800f228:	4630      	mov	r0, r6
 800f22a:	4639      	mov	r1, r7
 800f22c:	f7f1 fc34 	bl	8000a98 <__aeabi_dcmpeq>
 800f230:	b918      	cbnz	r0, 800f23a <__cvt+0xba>
 800f232:	f1c4 0401 	rsb	r4, r4, #1
 800f236:	f8ca 4000 	str.w	r4, [sl]
 800f23a:	f8da 3000 	ldr.w	r3, [sl]
 800f23e:	4499      	add	r9, r3
 800f240:	e7d3      	b.n	800f1ea <__cvt+0x6a>
 800f242:	1c59      	adds	r1, r3, #1
 800f244:	9103      	str	r1, [sp, #12]
 800f246:	701a      	strb	r2, [r3, #0]
 800f248:	e7d9      	b.n	800f1fe <__cvt+0x7e>

0800f24a <__exponent>:
 800f24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f24c:	2900      	cmp	r1, #0
 800f24e:	bfba      	itte	lt
 800f250:	4249      	neglt	r1, r1
 800f252:	232d      	movlt	r3, #45	@ 0x2d
 800f254:	232b      	movge	r3, #43	@ 0x2b
 800f256:	2909      	cmp	r1, #9
 800f258:	7002      	strb	r2, [r0, #0]
 800f25a:	7043      	strb	r3, [r0, #1]
 800f25c:	dd29      	ble.n	800f2b2 <__exponent+0x68>
 800f25e:	f10d 0307 	add.w	r3, sp, #7
 800f262:	461d      	mov	r5, r3
 800f264:	270a      	movs	r7, #10
 800f266:	461a      	mov	r2, r3
 800f268:	fbb1 f6f7 	udiv	r6, r1, r7
 800f26c:	fb07 1416 	mls	r4, r7, r6, r1
 800f270:	3430      	adds	r4, #48	@ 0x30
 800f272:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f276:	460c      	mov	r4, r1
 800f278:	2c63      	cmp	r4, #99	@ 0x63
 800f27a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f27e:	4631      	mov	r1, r6
 800f280:	dcf1      	bgt.n	800f266 <__exponent+0x1c>
 800f282:	3130      	adds	r1, #48	@ 0x30
 800f284:	1e94      	subs	r4, r2, #2
 800f286:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f28a:	1c41      	adds	r1, r0, #1
 800f28c:	4623      	mov	r3, r4
 800f28e:	42ab      	cmp	r3, r5
 800f290:	d30a      	bcc.n	800f2a8 <__exponent+0x5e>
 800f292:	f10d 0309 	add.w	r3, sp, #9
 800f296:	1a9b      	subs	r3, r3, r2
 800f298:	42ac      	cmp	r4, r5
 800f29a:	bf88      	it	hi
 800f29c:	2300      	movhi	r3, #0
 800f29e:	3302      	adds	r3, #2
 800f2a0:	4403      	add	r3, r0
 800f2a2:	1a18      	subs	r0, r3, r0
 800f2a4:	b003      	add	sp, #12
 800f2a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2a8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f2ac:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f2b0:	e7ed      	b.n	800f28e <__exponent+0x44>
 800f2b2:	2330      	movs	r3, #48	@ 0x30
 800f2b4:	3130      	adds	r1, #48	@ 0x30
 800f2b6:	7083      	strb	r3, [r0, #2]
 800f2b8:	70c1      	strb	r1, [r0, #3]
 800f2ba:	1d03      	adds	r3, r0, #4
 800f2bc:	e7f1      	b.n	800f2a2 <__exponent+0x58>
	...

0800f2c0 <_printf_float>:
 800f2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c4:	b08d      	sub	sp, #52	@ 0x34
 800f2c6:	460c      	mov	r4, r1
 800f2c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f2cc:	4616      	mov	r6, r2
 800f2ce:	461f      	mov	r7, r3
 800f2d0:	4605      	mov	r5, r0
 800f2d2:	f000 fe51 	bl	800ff78 <_localeconv_r>
 800f2d6:	6803      	ldr	r3, [r0, #0]
 800f2d8:	9304      	str	r3, [sp, #16]
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7f0 ffb0 	bl	8000240 <strlen>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2e4:	f8d8 3000 	ldr.w	r3, [r8]
 800f2e8:	9005      	str	r0, [sp, #20]
 800f2ea:	3307      	adds	r3, #7
 800f2ec:	f023 0307 	bic.w	r3, r3, #7
 800f2f0:	f103 0208 	add.w	r2, r3, #8
 800f2f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f2f8:	f8d4 b000 	ldr.w	fp, [r4]
 800f2fc:	f8c8 2000 	str.w	r2, [r8]
 800f300:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f304:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f308:	9307      	str	r3, [sp, #28]
 800f30a:	f8cd 8018 	str.w	r8, [sp, #24]
 800f30e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f316:	4b9c      	ldr	r3, [pc, #624]	@ (800f588 <_printf_float+0x2c8>)
 800f318:	f04f 32ff 	mov.w	r2, #4294967295
 800f31c:	f7f1 fbee 	bl	8000afc <__aeabi_dcmpun>
 800f320:	bb70      	cbnz	r0, 800f380 <_printf_float+0xc0>
 800f322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f326:	4b98      	ldr	r3, [pc, #608]	@ (800f588 <_printf_float+0x2c8>)
 800f328:	f04f 32ff 	mov.w	r2, #4294967295
 800f32c:	f7f1 fbc8 	bl	8000ac0 <__aeabi_dcmple>
 800f330:	bb30      	cbnz	r0, 800f380 <_printf_float+0xc0>
 800f332:	2200      	movs	r2, #0
 800f334:	2300      	movs	r3, #0
 800f336:	4640      	mov	r0, r8
 800f338:	4649      	mov	r1, r9
 800f33a:	f7f1 fbb7 	bl	8000aac <__aeabi_dcmplt>
 800f33e:	b110      	cbz	r0, 800f346 <_printf_float+0x86>
 800f340:	232d      	movs	r3, #45	@ 0x2d
 800f342:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f346:	4a91      	ldr	r2, [pc, #580]	@ (800f58c <_printf_float+0x2cc>)
 800f348:	4b91      	ldr	r3, [pc, #580]	@ (800f590 <_printf_float+0x2d0>)
 800f34a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f34e:	bf94      	ite	ls
 800f350:	4690      	movls	r8, r2
 800f352:	4698      	movhi	r8, r3
 800f354:	2303      	movs	r3, #3
 800f356:	6123      	str	r3, [r4, #16]
 800f358:	f02b 0304 	bic.w	r3, fp, #4
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	f04f 0900 	mov.w	r9, #0
 800f362:	9700      	str	r7, [sp, #0]
 800f364:	4633      	mov	r3, r6
 800f366:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f368:	4621      	mov	r1, r4
 800f36a:	4628      	mov	r0, r5
 800f36c:	f000 f9d2 	bl	800f714 <_printf_common>
 800f370:	3001      	adds	r0, #1
 800f372:	f040 808d 	bne.w	800f490 <_printf_float+0x1d0>
 800f376:	f04f 30ff 	mov.w	r0, #4294967295
 800f37a:	b00d      	add	sp, #52	@ 0x34
 800f37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f380:	4642      	mov	r2, r8
 800f382:	464b      	mov	r3, r9
 800f384:	4640      	mov	r0, r8
 800f386:	4649      	mov	r1, r9
 800f388:	f7f1 fbb8 	bl	8000afc <__aeabi_dcmpun>
 800f38c:	b140      	cbz	r0, 800f3a0 <_printf_float+0xe0>
 800f38e:	464b      	mov	r3, r9
 800f390:	2b00      	cmp	r3, #0
 800f392:	bfbc      	itt	lt
 800f394:	232d      	movlt	r3, #45	@ 0x2d
 800f396:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f39a:	4a7e      	ldr	r2, [pc, #504]	@ (800f594 <_printf_float+0x2d4>)
 800f39c:	4b7e      	ldr	r3, [pc, #504]	@ (800f598 <_printf_float+0x2d8>)
 800f39e:	e7d4      	b.n	800f34a <_printf_float+0x8a>
 800f3a0:	6863      	ldr	r3, [r4, #4]
 800f3a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f3a6:	9206      	str	r2, [sp, #24]
 800f3a8:	1c5a      	adds	r2, r3, #1
 800f3aa:	d13b      	bne.n	800f424 <_printf_float+0x164>
 800f3ac:	2306      	movs	r3, #6
 800f3ae:	6063      	str	r3, [r4, #4]
 800f3b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	6022      	str	r2, [r4, #0]
 800f3b8:	9303      	str	r3, [sp, #12]
 800f3ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800f3bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f3c0:	ab09      	add	r3, sp, #36	@ 0x24
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	6861      	ldr	r1, [r4, #4]
 800f3c6:	ec49 8b10 	vmov	d0, r8, r9
 800f3ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	f7ff fed6 	bl	800f180 <__cvt>
 800f3d4:	9b06      	ldr	r3, [sp, #24]
 800f3d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f3d8:	2b47      	cmp	r3, #71	@ 0x47
 800f3da:	4680      	mov	r8, r0
 800f3dc:	d129      	bne.n	800f432 <_printf_float+0x172>
 800f3de:	1cc8      	adds	r0, r1, #3
 800f3e0:	db02      	blt.n	800f3e8 <_printf_float+0x128>
 800f3e2:	6863      	ldr	r3, [r4, #4]
 800f3e4:	4299      	cmp	r1, r3
 800f3e6:	dd41      	ble.n	800f46c <_printf_float+0x1ac>
 800f3e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800f3ec:	fa5f fa8a 	uxtb.w	sl, sl
 800f3f0:	3901      	subs	r1, #1
 800f3f2:	4652      	mov	r2, sl
 800f3f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f3f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800f3fa:	f7ff ff26 	bl	800f24a <__exponent>
 800f3fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f400:	1813      	adds	r3, r2, r0
 800f402:	2a01      	cmp	r2, #1
 800f404:	4681      	mov	r9, r0
 800f406:	6123      	str	r3, [r4, #16]
 800f408:	dc02      	bgt.n	800f410 <_printf_float+0x150>
 800f40a:	6822      	ldr	r2, [r4, #0]
 800f40c:	07d2      	lsls	r2, r2, #31
 800f40e:	d501      	bpl.n	800f414 <_printf_float+0x154>
 800f410:	3301      	adds	r3, #1
 800f412:	6123      	str	r3, [r4, #16]
 800f414:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d0a2      	beq.n	800f362 <_printf_float+0xa2>
 800f41c:	232d      	movs	r3, #45	@ 0x2d
 800f41e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f422:	e79e      	b.n	800f362 <_printf_float+0xa2>
 800f424:	9a06      	ldr	r2, [sp, #24]
 800f426:	2a47      	cmp	r2, #71	@ 0x47
 800f428:	d1c2      	bne.n	800f3b0 <_printf_float+0xf0>
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d1c0      	bne.n	800f3b0 <_printf_float+0xf0>
 800f42e:	2301      	movs	r3, #1
 800f430:	e7bd      	b.n	800f3ae <_printf_float+0xee>
 800f432:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f436:	d9db      	bls.n	800f3f0 <_printf_float+0x130>
 800f438:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f43c:	d118      	bne.n	800f470 <_printf_float+0x1b0>
 800f43e:	2900      	cmp	r1, #0
 800f440:	6863      	ldr	r3, [r4, #4]
 800f442:	dd0b      	ble.n	800f45c <_printf_float+0x19c>
 800f444:	6121      	str	r1, [r4, #16]
 800f446:	b913      	cbnz	r3, 800f44e <_printf_float+0x18e>
 800f448:	6822      	ldr	r2, [r4, #0]
 800f44a:	07d0      	lsls	r0, r2, #31
 800f44c:	d502      	bpl.n	800f454 <_printf_float+0x194>
 800f44e:	3301      	adds	r3, #1
 800f450:	440b      	add	r3, r1
 800f452:	6123      	str	r3, [r4, #16]
 800f454:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f456:	f04f 0900 	mov.w	r9, #0
 800f45a:	e7db      	b.n	800f414 <_printf_float+0x154>
 800f45c:	b913      	cbnz	r3, 800f464 <_printf_float+0x1a4>
 800f45e:	6822      	ldr	r2, [r4, #0]
 800f460:	07d2      	lsls	r2, r2, #31
 800f462:	d501      	bpl.n	800f468 <_printf_float+0x1a8>
 800f464:	3302      	adds	r3, #2
 800f466:	e7f4      	b.n	800f452 <_printf_float+0x192>
 800f468:	2301      	movs	r3, #1
 800f46a:	e7f2      	b.n	800f452 <_printf_float+0x192>
 800f46c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f472:	4299      	cmp	r1, r3
 800f474:	db05      	blt.n	800f482 <_printf_float+0x1c2>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	6121      	str	r1, [r4, #16]
 800f47a:	07d8      	lsls	r0, r3, #31
 800f47c:	d5ea      	bpl.n	800f454 <_printf_float+0x194>
 800f47e:	1c4b      	adds	r3, r1, #1
 800f480:	e7e7      	b.n	800f452 <_printf_float+0x192>
 800f482:	2900      	cmp	r1, #0
 800f484:	bfd4      	ite	le
 800f486:	f1c1 0202 	rsble	r2, r1, #2
 800f48a:	2201      	movgt	r2, #1
 800f48c:	4413      	add	r3, r2
 800f48e:	e7e0      	b.n	800f452 <_printf_float+0x192>
 800f490:	6823      	ldr	r3, [r4, #0]
 800f492:	055a      	lsls	r2, r3, #21
 800f494:	d407      	bmi.n	800f4a6 <_printf_float+0x1e6>
 800f496:	6923      	ldr	r3, [r4, #16]
 800f498:	4642      	mov	r2, r8
 800f49a:	4631      	mov	r1, r6
 800f49c:	4628      	mov	r0, r5
 800f49e:	47b8      	blx	r7
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d12b      	bne.n	800f4fc <_printf_float+0x23c>
 800f4a4:	e767      	b.n	800f376 <_printf_float+0xb6>
 800f4a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f4aa:	f240 80dd 	bls.w	800f668 <_printf_float+0x3a8>
 800f4ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f7f1 faef 	bl	8000a98 <__aeabi_dcmpeq>
 800f4ba:	2800      	cmp	r0, #0
 800f4bc:	d033      	beq.n	800f526 <_printf_float+0x266>
 800f4be:	4a37      	ldr	r2, [pc, #220]	@ (800f59c <_printf_float+0x2dc>)
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4628      	mov	r0, r5
 800f4c6:	47b8      	blx	r7
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	f43f af54 	beq.w	800f376 <_printf_float+0xb6>
 800f4ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f4d2:	4543      	cmp	r3, r8
 800f4d4:	db02      	blt.n	800f4dc <_printf_float+0x21c>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	07d8      	lsls	r0, r3, #31
 800f4da:	d50f      	bpl.n	800f4fc <_printf_float+0x23c>
 800f4dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	47b8      	blx	r7
 800f4e6:	3001      	adds	r0, #1
 800f4e8:	f43f af45 	beq.w	800f376 <_printf_float+0xb6>
 800f4ec:	f04f 0900 	mov.w	r9, #0
 800f4f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800f4f4:	f104 0a1a 	add.w	sl, r4, #26
 800f4f8:	45c8      	cmp	r8, r9
 800f4fa:	dc09      	bgt.n	800f510 <_printf_float+0x250>
 800f4fc:	6823      	ldr	r3, [r4, #0]
 800f4fe:	079b      	lsls	r3, r3, #30
 800f500:	f100 8103 	bmi.w	800f70a <_printf_float+0x44a>
 800f504:	68e0      	ldr	r0, [r4, #12]
 800f506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f508:	4298      	cmp	r0, r3
 800f50a:	bfb8      	it	lt
 800f50c:	4618      	movlt	r0, r3
 800f50e:	e734      	b.n	800f37a <_printf_float+0xba>
 800f510:	2301      	movs	r3, #1
 800f512:	4652      	mov	r2, sl
 800f514:	4631      	mov	r1, r6
 800f516:	4628      	mov	r0, r5
 800f518:	47b8      	blx	r7
 800f51a:	3001      	adds	r0, #1
 800f51c:	f43f af2b 	beq.w	800f376 <_printf_float+0xb6>
 800f520:	f109 0901 	add.w	r9, r9, #1
 800f524:	e7e8      	b.n	800f4f8 <_printf_float+0x238>
 800f526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f528:	2b00      	cmp	r3, #0
 800f52a:	dc39      	bgt.n	800f5a0 <_printf_float+0x2e0>
 800f52c:	4a1b      	ldr	r2, [pc, #108]	@ (800f59c <_printf_float+0x2dc>)
 800f52e:	2301      	movs	r3, #1
 800f530:	4631      	mov	r1, r6
 800f532:	4628      	mov	r0, r5
 800f534:	47b8      	blx	r7
 800f536:	3001      	adds	r0, #1
 800f538:	f43f af1d 	beq.w	800f376 <_printf_float+0xb6>
 800f53c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f540:	ea59 0303 	orrs.w	r3, r9, r3
 800f544:	d102      	bne.n	800f54c <_printf_float+0x28c>
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	07d9      	lsls	r1, r3, #31
 800f54a:	d5d7      	bpl.n	800f4fc <_printf_float+0x23c>
 800f54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f550:	4631      	mov	r1, r6
 800f552:	4628      	mov	r0, r5
 800f554:	47b8      	blx	r7
 800f556:	3001      	adds	r0, #1
 800f558:	f43f af0d 	beq.w	800f376 <_printf_float+0xb6>
 800f55c:	f04f 0a00 	mov.w	sl, #0
 800f560:	f104 0b1a 	add.w	fp, r4, #26
 800f564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f566:	425b      	negs	r3, r3
 800f568:	4553      	cmp	r3, sl
 800f56a:	dc01      	bgt.n	800f570 <_printf_float+0x2b0>
 800f56c:	464b      	mov	r3, r9
 800f56e:	e793      	b.n	800f498 <_printf_float+0x1d8>
 800f570:	2301      	movs	r3, #1
 800f572:	465a      	mov	r2, fp
 800f574:	4631      	mov	r1, r6
 800f576:	4628      	mov	r0, r5
 800f578:	47b8      	blx	r7
 800f57a:	3001      	adds	r0, #1
 800f57c:	f43f aefb 	beq.w	800f376 <_printf_float+0xb6>
 800f580:	f10a 0a01 	add.w	sl, sl, #1
 800f584:	e7ee      	b.n	800f564 <_printf_float+0x2a4>
 800f586:	bf00      	nop
 800f588:	7fefffff 	.word	0x7fefffff
 800f58c:	080151c9 	.word	0x080151c9
 800f590:	080151cd 	.word	0x080151cd
 800f594:	080151d1 	.word	0x080151d1
 800f598:	080151d5 	.word	0x080151d5
 800f59c:	0801546f 	.word	0x0801546f
 800f5a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f5a6:	4553      	cmp	r3, sl
 800f5a8:	bfa8      	it	ge
 800f5aa:	4653      	movge	r3, sl
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	4699      	mov	r9, r3
 800f5b0:	dc36      	bgt.n	800f620 <_printf_float+0x360>
 800f5b2:	f04f 0b00 	mov.w	fp, #0
 800f5b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5ba:	f104 021a 	add.w	r2, r4, #26
 800f5be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f5c0:	9306      	str	r3, [sp, #24]
 800f5c2:	eba3 0309 	sub.w	r3, r3, r9
 800f5c6:	455b      	cmp	r3, fp
 800f5c8:	dc31      	bgt.n	800f62e <_printf_float+0x36e>
 800f5ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5cc:	459a      	cmp	sl, r3
 800f5ce:	dc3a      	bgt.n	800f646 <_printf_float+0x386>
 800f5d0:	6823      	ldr	r3, [r4, #0]
 800f5d2:	07da      	lsls	r2, r3, #31
 800f5d4:	d437      	bmi.n	800f646 <_printf_float+0x386>
 800f5d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d8:	ebaa 0903 	sub.w	r9, sl, r3
 800f5dc:	9b06      	ldr	r3, [sp, #24]
 800f5de:	ebaa 0303 	sub.w	r3, sl, r3
 800f5e2:	4599      	cmp	r9, r3
 800f5e4:	bfa8      	it	ge
 800f5e6:	4699      	movge	r9, r3
 800f5e8:	f1b9 0f00 	cmp.w	r9, #0
 800f5ec:	dc33      	bgt.n	800f656 <_printf_float+0x396>
 800f5ee:	f04f 0800 	mov.w	r8, #0
 800f5f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f5f6:	f104 0b1a 	add.w	fp, r4, #26
 800f5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5fc:	ebaa 0303 	sub.w	r3, sl, r3
 800f600:	eba3 0309 	sub.w	r3, r3, r9
 800f604:	4543      	cmp	r3, r8
 800f606:	f77f af79 	ble.w	800f4fc <_printf_float+0x23c>
 800f60a:	2301      	movs	r3, #1
 800f60c:	465a      	mov	r2, fp
 800f60e:	4631      	mov	r1, r6
 800f610:	4628      	mov	r0, r5
 800f612:	47b8      	blx	r7
 800f614:	3001      	adds	r0, #1
 800f616:	f43f aeae 	beq.w	800f376 <_printf_float+0xb6>
 800f61a:	f108 0801 	add.w	r8, r8, #1
 800f61e:	e7ec      	b.n	800f5fa <_printf_float+0x33a>
 800f620:	4642      	mov	r2, r8
 800f622:	4631      	mov	r1, r6
 800f624:	4628      	mov	r0, r5
 800f626:	47b8      	blx	r7
 800f628:	3001      	adds	r0, #1
 800f62a:	d1c2      	bne.n	800f5b2 <_printf_float+0x2f2>
 800f62c:	e6a3      	b.n	800f376 <_printf_float+0xb6>
 800f62e:	2301      	movs	r3, #1
 800f630:	4631      	mov	r1, r6
 800f632:	4628      	mov	r0, r5
 800f634:	9206      	str	r2, [sp, #24]
 800f636:	47b8      	blx	r7
 800f638:	3001      	adds	r0, #1
 800f63a:	f43f ae9c 	beq.w	800f376 <_printf_float+0xb6>
 800f63e:	9a06      	ldr	r2, [sp, #24]
 800f640:	f10b 0b01 	add.w	fp, fp, #1
 800f644:	e7bb      	b.n	800f5be <_printf_float+0x2fe>
 800f646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f64a:	4631      	mov	r1, r6
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b8      	blx	r7
 800f650:	3001      	adds	r0, #1
 800f652:	d1c0      	bne.n	800f5d6 <_printf_float+0x316>
 800f654:	e68f      	b.n	800f376 <_printf_float+0xb6>
 800f656:	9a06      	ldr	r2, [sp, #24]
 800f658:	464b      	mov	r3, r9
 800f65a:	4442      	add	r2, r8
 800f65c:	4631      	mov	r1, r6
 800f65e:	4628      	mov	r0, r5
 800f660:	47b8      	blx	r7
 800f662:	3001      	adds	r0, #1
 800f664:	d1c3      	bne.n	800f5ee <_printf_float+0x32e>
 800f666:	e686      	b.n	800f376 <_printf_float+0xb6>
 800f668:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f66c:	f1ba 0f01 	cmp.w	sl, #1
 800f670:	dc01      	bgt.n	800f676 <_printf_float+0x3b6>
 800f672:	07db      	lsls	r3, r3, #31
 800f674:	d536      	bpl.n	800f6e4 <_printf_float+0x424>
 800f676:	2301      	movs	r3, #1
 800f678:	4642      	mov	r2, r8
 800f67a:	4631      	mov	r1, r6
 800f67c:	4628      	mov	r0, r5
 800f67e:	47b8      	blx	r7
 800f680:	3001      	adds	r0, #1
 800f682:	f43f ae78 	beq.w	800f376 <_printf_float+0xb6>
 800f686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f68a:	4631      	mov	r1, r6
 800f68c:	4628      	mov	r0, r5
 800f68e:	47b8      	blx	r7
 800f690:	3001      	adds	r0, #1
 800f692:	f43f ae70 	beq.w	800f376 <_printf_float+0xb6>
 800f696:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f69a:	2200      	movs	r2, #0
 800f69c:	2300      	movs	r3, #0
 800f69e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f6a2:	f7f1 f9f9 	bl	8000a98 <__aeabi_dcmpeq>
 800f6a6:	b9c0      	cbnz	r0, 800f6da <_printf_float+0x41a>
 800f6a8:	4653      	mov	r3, sl
 800f6aa:	f108 0201 	add.w	r2, r8, #1
 800f6ae:	4631      	mov	r1, r6
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	47b8      	blx	r7
 800f6b4:	3001      	adds	r0, #1
 800f6b6:	d10c      	bne.n	800f6d2 <_printf_float+0x412>
 800f6b8:	e65d      	b.n	800f376 <_printf_float+0xb6>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	465a      	mov	r2, fp
 800f6be:	4631      	mov	r1, r6
 800f6c0:	4628      	mov	r0, r5
 800f6c2:	47b8      	blx	r7
 800f6c4:	3001      	adds	r0, #1
 800f6c6:	f43f ae56 	beq.w	800f376 <_printf_float+0xb6>
 800f6ca:	f108 0801 	add.w	r8, r8, #1
 800f6ce:	45d0      	cmp	r8, sl
 800f6d0:	dbf3      	blt.n	800f6ba <_printf_float+0x3fa>
 800f6d2:	464b      	mov	r3, r9
 800f6d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f6d8:	e6df      	b.n	800f49a <_printf_float+0x1da>
 800f6da:	f04f 0800 	mov.w	r8, #0
 800f6de:	f104 0b1a 	add.w	fp, r4, #26
 800f6e2:	e7f4      	b.n	800f6ce <_printf_float+0x40e>
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	4642      	mov	r2, r8
 800f6e8:	e7e1      	b.n	800f6ae <_printf_float+0x3ee>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	464a      	mov	r2, r9
 800f6ee:	4631      	mov	r1, r6
 800f6f0:	4628      	mov	r0, r5
 800f6f2:	47b8      	blx	r7
 800f6f4:	3001      	adds	r0, #1
 800f6f6:	f43f ae3e 	beq.w	800f376 <_printf_float+0xb6>
 800f6fa:	f108 0801 	add.w	r8, r8, #1
 800f6fe:	68e3      	ldr	r3, [r4, #12]
 800f700:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f702:	1a5b      	subs	r3, r3, r1
 800f704:	4543      	cmp	r3, r8
 800f706:	dcf0      	bgt.n	800f6ea <_printf_float+0x42a>
 800f708:	e6fc      	b.n	800f504 <_printf_float+0x244>
 800f70a:	f04f 0800 	mov.w	r8, #0
 800f70e:	f104 0919 	add.w	r9, r4, #25
 800f712:	e7f4      	b.n	800f6fe <_printf_float+0x43e>

0800f714 <_printf_common>:
 800f714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f718:	4616      	mov	r6, r2
 800f71a:	4698      	mov	r8, r3
 800f71c:	688a      	ldr	r2, [r1, #8]
 800f71e:	690b      	ldr	r3, [r1, #16]
 800f720:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f724:	4293      	cmp	r3, r2
 800f726:	bfb8      	it	lt
 800f728:	4613      	movlt	r3, r2
 800f72a:	6033      	str	r3, [r6, #0]
 800f72c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f730:	4607      	mov	r7, r0
 800f732:	460c      	mov	r4, r1
 800f734:	b10a      	cbz	r2, 800f73a <_printf_common+0x26>
 800f736:	3301      	adds	r3, #1
 800f738:	6033      	str	r3, [r6, #0]
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	0699      	lsls	r1, r3, #26
 800f73e:	bf42      	ittt	mi
 800f740:	6833      	ldrmi	r3, [r6, #0]
 800f742:	3302      	addmi	r3, #2
 800f744:	6033      	strmi	r3, [r6, #0]
 800f746:	6825      	ldr	r5, [r4, #0]
 800f748:	f015 0506 	ands.w	r5, r5, #6
 800f74c:	d106      	bne.n	800f75c <_printf_common+0x48>
 800f74e:	f104 0a19 	add.w	sl, r4, #25
 800f752:	68e3      	ldr	r3, [r4, #12]
 800f754:	6832      	ldr	r2, [r6, #0]
 800f756:	1a9b      	subs	r3, r3, r2
 800f758:	42ab      	cmp	r3, r5
 800f75a:	dc26      	bgt.n	800f7aa <_printf_common+0x96>
 800f75c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f760:	6822      	ldr	r2, [r4, #0]
 800f762:	3b00      	subs	r3, #0
 800f764:	bf18      	it	ne
 800f766:	2301      	movne	r3, #1
 800f768:	0692      	lsls	r2, r2, #26
 800f76a:	d42b      	bmi.n	800f7c4 <_printf_common+0xb0>
 800f76c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f770:	4641      	mov	r1, r8
 800f772:	4638      	mov	r0, r7
 800f774:	47c8      	blx	r9
 800f776:	3001      	adds	r0, #1
 800f778:	d01e      	beq.n	800f7b8 <_printf_common+0xa4>
 800f77a:	6823      	ldr	r3, [r4, #0]
 800f77c:	6922      	ldr	r2, [r4, #16]
 800f77e:	f003 0306 	and.w	r3, r3, #6
 800f782:	2b04      	cmp	r3, #4
 800f784:	bf02      	ittt	eq
 800f786:	68e5      	ldreq	r5, [r4, #12]
 800f788:	6833      	ldreq	r3, [r6, #0]
 800f78a:	1aed      	subeq	r5, r5, r3
 800f78c:	68a3      	ldr	r3, [r4, #8]
 800f78e:	bf0c      	ite	eq
 800f790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f794:	2500      	movne	r5, #0
 800f796:	4293      	cmp	r3, r2
 800f798:	bfc4      	itt	gt
 800f79a:	1a9b      	subgt	r3, r3, r2
 800f79c:	18ed      	addgt	r5, r5, r3
 800f79e:	2600      	movs	r6, #0
 800f7a0:	341a      	adds	r4, #26
 800f7a2:	42b5      	cmp	r5, r6
 800f7a4:	d11a      	bne.n	800f7dc <_printf_common+0xc8>
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	e008      	b.n	800f7bc <_printf_common+0xa8>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	4652      	mov	r2, sl
 800f7ae:	4641      	mov	r1, r8
 800f7b0:	4638      	mov	r0, r7
 800f7b2:	47c8      	blx	r9
 800f7b4:	3001      	adds	r0, #1
 800f7b6:	d103      	bne.n	800f7c0 <_printf_common+0xac>
 800f7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7c0:	3501      	adds	r5, #1
 800f7c2:	e7c6      	b.n	800f752 <_printf_common+0x3e>
 800f7c4:	18e1      	adds	r1, r4, r3
 800f7c6:	1c5a      	adds	r2, r3, #1
 800f7c8:	2030      	movs	r0, #48	@ 0x30
 800f7ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f7ce:	4422      	add	r2, r4
 800f7d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f7d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f7d8:	3302      	adds	r3, #2
 800f7da:	e7c7      	b.n	800f76c <_printf_common+0x58>
 800f7dc:	2301      	movs	r3, #1
 800f7de:	4622      	mov	r2, r4
 800f7e0:	4641      	mov	r1, r8
 800f7e2:	4638      	mov	r0, r7
 800f7e4:	47c8      	blx	r9
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	d0e6      	beq.n	800f7b8 <_printf_common+0xa4>
 800f7ea:	3601      	adds	r6, #1
 800f7ec:	e7d9      	b.n	800f7a2 <_printf_common+0x8e>
	...

0800f7f0 <_printf_i>:
 800f7f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f7f4:	7e0f      	ldrb	r7, [r1, #24]
 800f7f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f7f8:	2f78      	cmp	r7, #120	@ 0x78
 800f7fa:	4691      	mov	r9, r2
 800f7fc:	4680      	mov	r8, r0
 800f7fe:	460c      	mov	r4, r1
 800f800:	469a      	mov	sl, r3
 800f802:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f806:	d807      	bhi.n	800f818 <_printf_i+0x28>
 800f808:	2f62      	cmp	r7, #98	@ 0x62
 800f80a:	d80a      	bhi.n	800f822 <_printf_i+0x32>
 800f80c:	2f00      	cmp	r7, #0
 800f80e:	f000 80d2 	beq.w	800f9b6 <_printf_i+0x1c6>
 800f812:	2f58      	cmp	r7, #88	@ 0x58
 800f814:	f000 80b9 	beq.w	800f98a <_printf_i+0x19a>
 800f818:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f81c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f820:	e03a      	b.n	800f898 <_printf_i+0xa8>
 800f822:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f826:	2b15      	cmp	r3, #21
 800f828:	d8f6      	bhi.n	800f818 <_printf_i+0x28>
 800f82a:	a101      	add	r1, pc, #4	@ (adr r1, 800f830 <_printf_i+0x40>)
 800f82c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f830:	0800f889 	.word	0x0800f889
 800f834:	0800f89d 	.word	0x0800f89d
 800f838:	0800f819 	.word	0x0800f819
 800f83c:	0800f819 	.word	0x0800f819
 800f840:	0800f819 	.word	0x0800f819
 800f844:	0800f819 	.word	0x0800f819
 800f848:	0800f89d 	.word	0x0800f89d
 800f84c:	0800f819 	.word	0x0800f819
 800f850:	0800f819 	.word	0x0800f819
 800f854:	0800f819 	.word	0x0800f819
 800f858:	0800f819 	.word	0x0800f819
 800f85c:	0800f99d 	.word	0x0800f99d
 800f860:	0800f8c7 	.word	0x0800f8c7
 800f864:	0800f957 	.word	0x0800f957
 800f868:	0800f819 	.word	0x0800f819
 800f86c:	0800f819 	.word	0x0800f819
 800f870:	0800f9bf 	.word	0x0800f9bf
 800f874:	0800f819 	.word	0x0800f819
 800f878:	0800f8c7 	.word	0x0800f8c7
 800f87c:	0800f819 	.word	0x0800f819
 800f880:	0800f819 	.word	0x0800f819
 800f884:	0800f95f 	.word	0x0800f95f
 800f888:	6833      	ldr	r3, [r6, #0]
 800f88a:	1d1a      	adds	r2, r3, #4
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6032      	str	r2, [r6, #0]
 800f890:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f894:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f898:	2301      	movs	r3, #1
 800f89a:	e09d      	b.n	800f9d8 <_printf_i+0x1e8>
 800f89c:	6833      	ldr	r3, [r6, #0]
 800f89e:	6820      	ldr	r0, [r4, #0]
 800f8a0:	1d19      	adds	r1, r3, #4
 800f8a2:	6031      	str	r1, [r6, #0]
 800f8a4:	0606      	lsls	r6, r0, #24
 800f8a6:	d501      	bpl.n	800f8ac <_printf_i+0xbc>
 800f8a8:	681d      	ldr	r5, [r3, #0]
 800f8aa:	e003      	b.n	800f8b4 <_printf_i+0xc4>
 800f8ac:	0645      	lsls	r5, r0, #25
 800f8ae:	d5fb      	bpl.n	800f8a8 <_printf_i+0xb8>
 800f8b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f8b4:	2d00      	cmp	r5, #0
 800f8b6:	da03      	bge.n	800f8c0 <_printf_i+0xd0>
 800f8b8:	232d      	movs	r3, #45	@ 0x2d
 800f8ba:	426d      	negs	r5, r5
 800f8bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8c0:	4859      	ldr	r0, [pc, #356]	@ (800fa28 <_printf_i+0x238>)
 800f8c2:	230a      	movs	r3, #10
 800f8c4:	e011      	b.n	800f8ea <_printf_i+0xfa>
 800f8c6:	6821      	ldr	r1, [r4, #0]
 800f8c8:	6833      	ldr	r3, [r6, #0]
 800f8ca:	0608      	lsls	r0, r1, #24
 800f8cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800f8d0:	d402      	bmi.n	800f8d8 <_printf_i+0xe8>
 800f8d2:	0649      	lsls	r1, r1, #25
 800f8d4:	bf48      	it	mi
 800f8d6:	b2ad      	uxthmi	r5, r5
 800f8d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f8da:	4853      	ldr	r0, [pc, #332]	@ (800fa28 <_printf_i+0x238>)
 800f8dc:	6033      	str	r3, [r6, #0]
 800f8de:	bf14      	ite	ne
 800f8e0:	230a      	movne	r3, #10
 800f8e2:	2308      	moveq	r3, #8
 800f8e4:	2100      	movs	r1, #0
 800f8e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f8ea:	6866      	ldr	r6, [r4, #4]
 800f8ec:	60a6      	str	r6, [r4, #8]
 800f8ee:	2e00      	cmp	r6, #0
 800f8f0:	bfa2      	ittt	ge
 800f8f2:	6821      	ldrge	r1, [r4, #0]
 800f8f4:	f021 0104 	bicge.w	r1, r1, #4
 800f8f8:	6021      	strge	r1, [r4, #0]
 800f8fa:	b90d      	cbnz	r5, 800f900 <_printf_i+0x110>
 800f8fc:	2e00      	cmp	r6, #0
 800f8fe:	d04b      	beq.n	800f998 <_printf_i+0x1a8>
 800f900:	4616      	mov	r6, r2
 800f902:	fbb5 f1f3 	udiv	r1, r5, r3
 800f906:	fb03 5711 	mls	r7, r3, r1, r5
 800f90a:	5dc7      	ldrb	r7, [r0, r7]
 800f90c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f910:	462f      	mov	r7, r5
 800f912:	42bb      	cmp	r3, r7
 800f914:	460d      	mov	r5, r1
 800f916:	d9f4      	bls.n	800f902 <_printf_i+0x112>
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d10b      	bne.n	800f934 <_printf_i+0x144>
 800f91c:	6823      	ldr	r3, [r4, #0]
 800f91e:	07df      	lsls	r7, r3, #31
 800f920:	d508      	bpl.n	800f934 <_printf_i+0x144>
 800f922:	6923      	ldr	r3, [r4, #16]
 800f924:	6861      	ldr	r1, [r4, #4]
 800f926:	4299      	cmp	r1, r3
 800f928:	bfde      	ittt	le
 800f92a:	2330      	movle	r3, #48	@ 0x30
 800f92c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f930:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f934:	1b92      	subs	r2, r2, r6
 800f936:	6122      	str	r2, [r4, #16]
 800f938:	f8cd a000 	str.w	sl, [sp]
 800f93c:	464b      	mov	r3, r9
 800f93e:	aa03      	add	r2, sp, #12
 800f940:	4621      	mov	r1, r4
 800f942:	4640      	mov	r0, r8
 800f944:	f7ff fee6 	bl	800f714 <_printf_common>
 800f948:	3001      	adds	r0, #1
 800f94a:	d14a      	bne.n	800f9e2 <_printf_i+0x1f2>
 800f94c:	f04f 30ff 	mov.w	r0, #4294967295
 800f950:	b004      	add	sp, #16
 800f952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	f043 0320 	orr.w	r3, r3, #32
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	4833      	ldr	r0, [pc, #204]	@ (800fa2c <_printf_i+0x23c>)
 800f960:	2778      	movs	r7, #120	@ 0x78
 800f962:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f966:	6823      	ldr	r3, [r4, #0]
 800f968:	6831      	ldr	r1, [r6, #0]
 800f96a:	061f      	lsls	r7, r3, #24
 800f96c:	f851 5b04 	ldr.w	r5, [r1], #4
 800f970:	d402      	bmi.n	800f978 <_printf_i+0x188>
 800f972:	065f      	lsls	r7, r3, #25
 800f974:	bf48      	it	mi
 800f976:	b2ad      	uxthmi	r5, r5
 800f978:	6031      	str	r1, [r6, #0]
 800f97a:	07d9      	lsls	r1, r3, #31
 800f97c:	bf44      	itt	mi
 800f97e:	f043 0320 	orrmi.w	r3, r3, #32
 800f982:	6023      	strmi	r3, [r4, #0]
 800f984:	b11d      	cbz	r5, 800f98e <_printf_i+0x19e>
 800f986:	2310      	movs	r3, #16
 800f988:	e7ac      	b.n	800f8e4 <_printf_i+0xf4>
 800f98a:	4827      	ldr	r0, [pc, #156]	@ (800fa28 <_printf_i+0x238>)
 800f98c:	e7e9      	b.n	800f962 <_printf_i+0x172>
 800f98e:	6823      	ldr	r3, [r4, #0]
 800f990:	f023 0320 	bic.w	r3, r3, #32
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	e7f6      	b.n	800f986 <_printf_i+0x196>
 800f998:	4616      	mov	r6, r2
 800f99a:	e7bd      	b.n	800f918 <_printf_i+0x128>
 800f99c:	6833      	ldr	r3, [r6, #0]
 800f99e:	6825      	ldr	r5, [r4, #0]
 800f9a0:	6961      	ldr	r1, [r4, #20]
 800f9a2:	1d18      	adds	r0, r3, #4
 800f9a4:	6030      	str	r0, [r6, #0]
 800f9a6:	062e      	lsls	r6, r5, #24
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	d501      	bpl.n	800f9b0 <_printf_i+0x1c0>
 800f9ac:	6019      	str	r1, [r3, #0]
 800f9ae:	e002      	b.n	800f9b6 <_printf_i+0x1c6>
 800f9b0:	0668      	lsls	r0, r5, #25
 800f9b2:	d5fb      	bpl.n	800f9ac <_printf_i+0x1bc>
 800f9b4:	8019      	strh	r1, [r3, #0]
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6123      	str	r3, [r4, #16]
 800f9ba:	4616      	mov	r6, r2
 800f9bc:	e7bc      	b.n	800f938 <_printf_i+0x148>
 800f9be:	6833      	ldr	r3, [r6, #0]
 800f9c0:	1d1a      	adds	r2, r3, #4
 800f9c2:	6032      	str	r2, [r6, #0]
 800f9c4:	681e      	ldr	r6, [r3, #0]
 800f9c6:	6862      	ldr	r2, [r4, #4]
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	f7f0 fbe8 	bl	80001a0 <memchr>
 800f9d0:	b108      	cbz	r0, 800f9d6 <_printf_i+0x1e6>
 800f9d2:	1b80      	subs	r0, r0, r6
 800f9d4:	6060      	str	r0, [r4, #4]
 800f9d6:	6863      	ldr	r3, [r4, #4]
 800f9d8:	6123      	str	r3, [r4, #16]
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f9e0:	e7aa      	b.n	800f938 <_printf_i+0x148>
 800f9e2:	6923      	ldr	r3, [r4, #16]
 800f9e4:	4632      	mov	r2, r6
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	47d0      	blx	sl
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	d0ad      	beq.n	800f94c <_printf_i+0x15c>
 800f9f0:	6823      	ldr	r3, [r4, #0]
 800f9f2:	079b      	lsls	r3, r3, #30
 800f9f4:	d413      	bmi.n	800fa1e <_printf_i+0x22e>
 800f9f6:	68e0      	ldr	r0, [r4, #12]
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	4298      	cmp	r0, r3
 800f9fc:	bfb8      	it	lt
 800f9fe:	4618      	movlt	r0, r3
 800fa00:	e7a6      	b.n	800f950 <_printf_i+0x160>
 800fa02:	2301      	movs	r3, #1
 800fa04:	4632      	mov	r2, r6
 800fa06:	4649      	mov	r1, r9
 800fa08:	4640      	mov	r0, r8
 800fa0a:	47d0      	blx	sl
 800fa0c:	3001      	adds	r0, #1
 800fa0e:	d09d      	beq.n	800f94c <_printf_i+0x15c>
 800fa10:	3501      	adds	r5, #1
 800fa12:	68e3      	ldr	r3, [r4, #12]
 800fa14:	9903      	ldr	r1, [sp, #12]
 800fa16:	1a5b      	subs	r3, r3, r1
 800fa18:	42ab      	cmp	r3, r5
 800fa1a:	dcf2      	bgt.n	800fa02 <_printf_i+0x212>
 800fa1c:	e7eb      	b.n	800f9f6 <_printf_i+0x206>
 800fa1e:	2500      	movs	r5, #0
 800fa20:	f104 0619 	add.w	r6, r4, #25
 800fa24:	e7f5      	b.n	800fa12 <_printf_i+0x222>
 800fa26:	bf00      	nop
 800fa28:	080151d9 	.word	0x080151d9
 800fa2c:	080151ea 	.word	0x080151ea

0800fa30 <std>:
 800fa30:	2300      	movs	r3, #0
 800fa32:	b510      	push	{r4, lr}
 800fa34:	4604      	mov	r4, r0
 800fa36:	e9c0 3300 	strd	r3, r3, [r0]
 800fa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fa3e:	6083      	str	r3, [r0, #8]
 800fa40:	8181      	strh	r1, [r0, #12]
 800fa42:	6643      	str	r3, [r0, #100]	@ 0x64
 800fa44:	81c2      	strh	r2, [r0, #14]
 800fa46:	6183      	str	r3, [r0, #24]
 800fa48:	4619      	mov	r1, r3
 800fa4a:	2208      	movs	r2, #8
 800fa4c:	305c      	adds	r0, #92	@ 0x5c
 800fa4e:	f000 fa79 	bl	800ff44 <memset>
 800fa52:	4b0d      	ldr	r3, [pc, #52]	@ (800fa88 <std+0x58>)
 800fa54:	6263      	str	r3, [r4, #36]	@ 0x24
 800fa56:	4b0d      	ldr	r3, [pc, #52]	@ (800fa8c <std+0x5c>)
 800fa58:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fa5a:	4b0d      	ldr	r3, [pc, #52]	@ (800fa90 <std+0x60>)
 800fa5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa94 <std+0x64>)
 800fa60:	6323      	str	r3, [r4, #48]	@ 0x30
 800fa62:	4b0d      	ldr	r3, [pc, #52]	@ (800fa98 <std+0x68>)
 800fa64:	6224      	str	r4, [r4, #32]
 800fa66:	429c      	cmp	r4, r3
 800fa68:	d006      	beq.n	800fa78 <std+0x48>
 800fa6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fa6e:	4294      	cmp	r4, r2
 800fa70:	d002      	beq.n	800fa78 <std+0x48>
 800fa72:	33d0      	adds	r3, #208	@ 0xd0
 800fa74:	429c      	cmp	r4, r3
 800fa76:	d105      	bne.n	800fa84 <std+0x54>
 800fa78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fa7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fa80:	f000 bafe 	b.w	8010080 <__retarget_lock_init_recursive>
 800fa84:	bd10      	pop	{r4, pc}
 800fa86:	bf00      	nop
 800fa88:	0800fd91 	.word	0x0800fd91
 800fa8c:	0800fdb7 	.word	0x0800fdb7
 800fa90:	0800fdef 	.word	0x0800fdef
 800fa94:	0800fe13 	.word	0x0800fe13
 800fa98:	20000888 	.word	0x20000888

0800fa9c <stdio_exit_handler>:
 800fa9c:	4a02      	ldr	r2, [pc, #8]	@ (800faa8 <stdio_exit_handler+0xc>)
 800fa9e:	4903      	ldr	r1, [pc, #12]	@ (800faac <stdio_exit_handler+0x10>)
 800faa0:	4803      	ldr	r0, [pc, #12]	@ (800fab0 <stdio_exit_handler+0x14>)
 800faa2:	f000 b869 	b.w	800fb78 <_fwalk_sglue>
 800faa6:	bf00      	nop
 800faa8:	20000038 	.word	0x20000038
 800faac:	08012a79 	.word	0x08012a79
 800fab0:	200001b4 	.word	0x200001b4

0800fab4 <cleanup_stdio>:
 800fab4:	6841      	ldr	r1, [r0, #4]
 800fab6:	4b0c      	ldr	r3, [pc, #48]	@ (800fae8 <cleanup_stdio+0x34>)
 800fab8:	4299      	cmp	r1, r3
 800faba:	b510      	push	{r4, lr}
 800fabc:	4604      	mov	r4, r0
 800fabe:	d001      	beq.n	800fac4 <cleanup_stdio+0x10>
 800fac0:	f002 ffda 	bl	8012a78 <_fflush_r>
 800fac4:	68a1      	ldr	r1, [r4, #8]
 800fac6:	4b09      	ldr	r3, [pc, #36]	@ (800faec <cleanup_stdio+0x38>)
 800fac8:	4299      	cmp	r1, r3
 800faca:	d002      	beq.n	800fad2 <cleanup_stdio+0x1e>
 800facc:	4620      	mov	r0, r4
 800face:	f002 ffd3 	bl	8012a78 <_fflush_r>
 800fad2:	68e1      	ldr	r1, [r4, #12]
 800fad4:	4b06      	ldr	r3, [pc, #24]	@ (800faf0 <cleanup_stdio+0x3c>)
 800fad6:	4299      	cmp	r1, r3
 800fad8:	d004      	beq.n	800fae4 <cleanup_stdio+0x30>
 800fada:	4620      	mov	r0, r4
 800fadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fae0:	f002 bfca 	b.w	8012a78 <_fflush_r>
 800fae4:	bd10      	pop	{r4, pc}
 800fae6:	bf00      	nop
 800fae8:	20000888 	.word	0x20000888
 800faec:	200008f0 	.word	0x200008f0
 800faf0:	20000958 	.word	0x20000958

0800faf4 <global_stdio_init.part.0>:
 800faf4:	b510      	push	{r4, lr}
 800faf6:	4b0b      	ldr	r3, [pc, #44]	@ (800fb24 <global_stdio_init.part.0+0x30>)
 800faf8:	4c0b      	ldr	r4, [pc, #44]	@ (800fb28 <global_stdio_init.part.0+0x34>)
 800fafa:	4a0c      	ldr	r2, [pc, #48]	@ (800fb2c <global_stdio_init.part.0+0x38>)
 800fafc:	601a      	str	r2, [r3, #0]
 800fafe:	4620      	mov	r0, r4
 800fb00:	2200      	movs	r2, #0
 800fb02:	2104      	movs	r1, #4
 800fb04:	f7ff ff94 	bl	800fa30 <std>
 800fb08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	2109      	movs	r1, #9
 800fb10:	f7ff ff8e 	bl	800fa30 <std>
 800fb14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fb18:	2202      	movs	r2, #2
 800fb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb1e:	2112      	movs	r1, #18
 800fb20:	f7ff bf86 	b.w	800fa30 <std>
 800fb24:	200009c0 	.word	0x200009c0
 800fb28:	20000888 	.word	0x20000888
 800fb2c:	0800fa9d 	.word	0x0800fa9d

0800fb30 <__sfp_lock_acquire>:
 800fb30:	4801      	ldr	r0, [pc, #4]	@ (800fb38 <__sfp_lock_acquire+0x8>)
 800fb32:	f000 baa6 	b.w	8010082 <__retarget_lock_acquire_recursive>
 800fb36:	bf00      	nop
 800fb38:	200009c9 	.word	0x200009c9

0800fb3c <__sfp_lock_release>:
 800fb3c:	4801      	ldr	r0, [pc, #4]	@ (800fb44 <__sfp_lock_release+0x8>)
 800fb3e:	f000 baa1 	b.w	8010084 <__retarget_lock_release_recursive>
 800fb42:	bf00      	nop
 800fb44:	200009c9 	.word	0x200009c9

0800fb48 <__sinit>:
 800fb48:	b510      	push	{r4, lr}
 800fb4a:	4604      	mov	r4, r0
 800fb4c:	f7ff fff0 	bl	800fb30 <__sfp_lock_acquire>
 800fb50:	6a23      	ldr	r3, [r4, #32]
 800fb52:	b11b      	cbz	r3, 800fb5c <__sinit+0x14>
 800fb54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fb58:	f7ff bff0 	b.w	800fb3c <__sfp_lock_release>
 800fb5c:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <__sinit+0x28>)
 800fb5e:	6223      	str	r3, [r4, #32]
 800fb60:	4b04      	ldr	r3, [pc, #16]	@ (800fb74 <__sinit+0x2c>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1f5      	bne.n	800fb54 <__sinit+0xc>
 800fb68:	f7ff ffc4 	bl	800faf4 <global_stdio_init.part.0>
 800fb6c:	e7f2      	b.n	800fb54 <__sinit+0xc>
 800fb6e:	bf00      	nop
 800fb70:	0800fab5 	.word	0x0800fab5
 800fb74:	200009c0 	.word	0x200009c0

0800fb78 <_fwalk_sglue>:
 800fb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb7c:	4607      	mov	r7, r0
 800fb7e:	4688      	mov	r8, r1
 800fb80:	4614      	mov	r4, r2
 800fb82:	2600      	movs	r6, #0
 800fb84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fb88:	f1b9 0901 	subs.w	r9, r9, #1
 800fb8c:	d505      	bpl.n	800fb9a <_fwalk_sglue+0x22>
 800fb8e:	6824      	ldr	r4, [r4, #0]
 800fb90:	2c00      	cmp	r4, #0
 800fb92:	d1f7      	bne.n	800fb84 <_fwalk_sglue+0xc>
 800fb94:	4630      	mov	r0, r6
 800fb96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb9a:	89ab      	ldrh	r3, [r5, #12]
 800fb9c:	2b01      	cmp	r3, #1
 800fb9e:	d907      	bls.n	800fbb0 <_fwalk_sglue+0x38>
 800fba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fba4:	3301      	adds	r3, #1
 800fba6:	d003      	beq.n	800fbb0 <_fwalk_sglue+0x38>
 800fba8:	4629      	mov	r1, r5
 800fbaa:	4638      	mov	r0, r7
 800fbac:	47c0      	blx	r8
 800fbae:	4306      	orrs	r6, r0
 800fbb0:	3568      	adds	r5, #104	@ 0x68
 800fbb2:	e7e9      	b.n	800fb88 <_fwalk_sglue+0x10>

0800fbb4 <iprintf>:
 800fbb4:	b40f      	push	{r0, r1, r2, r3}
 800fbb6:	b507      	push	{r0, r1, r2, lr}
 800fbb8:	4906      	ldr	r1, [pc, #24]	@ (800fbd4 <iprintf+0x20>)
 800fbba:	ab04      	add	r3, sp, #16
 800fbbc:	6808      	ldr	r0, [r1, #0]
 800fbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbc2:	6881      	ldr	r1, [r0, #8]
 800fbc4:	9301      	str	r3, [sp, #4]
 800fbc6:	f002 fc6d 	bl	80124a4 <_vfiprintf_r>
 800fbca:	b003      	add	sp, #12
 800fbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbd0:	b004      	add	sp, #16
 800fbd2:	4770      	bx	lr
 800fbd4:	200001b0 	.word	0x200001b0

0800fbd8 <_puts_r>:
 800fbd8:	6a03      	ldr	r3, [r0, #32]
 800fbda:	b570      	push	{r4, r5, r6, lr}
 800fbdc:	6884      	ldr	r4, [r0, #8]
 800fbde:	4605      	mov	r5, r0
 800fbe0:	460e      	mov	r6, r1
 800fbe2:	b90b      	cbnz	r3, 800fbe8 <_puts_r+0x10>
 800fbe4:	f7ff ffb0 	bl	800fb48 <__sinit>
 800fbe8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbea:	07db      	lsls	r3, r3, #31
 800fbec:	d405      	bmi.n	800fbfa <_puts_r+0x22>
 800fbee:	89a3      	ldrh	r3, [r4, #12]
 800fbf0:	0598      	lsls	r0, r3, #22
 800fbf2:	d402      	bmi.n	800fbfa <_puts_r+0x22>
 800fbf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbf6:	f000 fa44 	bl	8010082 <__retarget_lock_acquire_recursive>
 800fbfa:	89a3      	ldrh	r3, [r4, #12]
 800fbfc:	0719      	lsls	r1, r3, #28
 800fbfe:	d502      	bpl.n	800fc06 <_puts_r+0x2e>
 800fc00:	6923      	ldr	r3, [r4, #16]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d135      	bne.n	800fc72 <_puts_r+0x9a>
 800fc06:	4621      	mov	r1, r4
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f000 f945 	bl	800fe98 <__swsetup_r>
 800fc0e:	b380      	cbz	r0, 800fc72 <_puts_r+0x9a>
 800fc10:	f04f 35ff 	mov.w	r5, #4294967295
 800fc14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc16:	07da      	lsls	r2, r3, #31
 800fc18:	d405      	bmi.n	800fc26 <_puts_r+0x4e>
 800fc1a:	89a3      	ldrh	r3, [r4, #12]
 800fc1c:	059b      	lsls	r3, r3, #22
 800fc1e:	d402      	bmi.n	800fc26 <_puts_r+0x4e>
 800fc20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc22:	f000 fa2f 	bl	8010084 <__retarget_lock_release_recursive>
 800fc26:	4628      	mov	r0, r5
 800fc28:	bd70      	pop	{r4, r5, r6, pc}
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	da04      	bge.n	800fc38 <_puts_r+0x60>
 800fc2e:	69a2      	ldr	r2, [r4, #24]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	dc17      	bgt.n	800fc64 <_puts_r+0x8c>
 800fc34:	290a      	cmp	r1, #10
 800fc36:	d015      	beq.n	800fc64 <_puts_r+0x8c>
 800fc38:	6823      	ldr	r3, [r4, #0]
 800fc3a:	1c5a      	adds	r2, r3, #1
 800fc3c:	6022      	str	r2, [r4, #0]
 800fc3e:	7019      	strb	r1, [r3, #0]
 800fc40:	68a3      	ldr	r3, [r4, #8]
 800fc42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800fc46:	3b01      	subs	r3, #1
 800fc48:	60a3      	str	r3, [r4, #8]
 800fc4a:	2900      	cmp	r1, #0
 800fc4c:	d1ed      	bne.n	800fc2a <_puts_r+0x52>
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	da11      	bge.n	800fc76 <_puts_r+0x9e>
 800fc52:	4622      	mov	r2, r4
 800fc54:	210a      	movs	r1, #10
 800fc56:	4628      	mov	r0, r5
 800fc58:	f000 f8df 	bl	800fe1a <__swbuf_r>
 800fc5c:	3001      	adds	r0, #1
 800fc5e:	d0d7      	beq.n	800fc10 <_puts_r+0x38>
 800fc60:	250a      	movs	r5, #10
 800fc62:	e7d7      	b.n	800fc14 <_puts_r+0x3c>
 800fc64:	4622      	mov	r2, r4
 800fc66:	4628      	mov	r0, r5
 800fc68:	f000 f8d7 	bl	800fe1a <__swbuf_r>
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d1e7      	bne.n	800fc40 <_puts_r+0x68>
 800fc70:	e7ce      	b.n	800fc10 <_puts_r+0x38>
 800fc72:	3e01      	subs	r6, #1
 800fc74:	e7e4      	b.n	800fc40 <_puts_r+0x68>
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	1c5a      	adds	r2, r3, #1
 800fc7a:	6022      	str	r2, [r4, #0]
 800fc7c:	220a      	movs	r2, #10
 800fc7e:	701a      	strb	r2, [r3, #0]
 800fc80:	e7ee      	b.n	800fc60 <_puts_r+0x88>
	...

0800fc84 <puts>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	@ (800fc90 <puts+0xc>)
 800fc86:	4601      	mov	r1, r0
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	f7ff bfa5 	b.w	800fbd8 <_puts_r>
 800fc8e:	bf00      	nop
 800fc90:	200001b0 	.word	0x200001b0

0800fc94 <sniprintf>:
 800fc94:	b40c      	push	{r2, r3}
 800fc96:	b530      	push	{r4, r5, lr}
 800fc98:	4b17      	ldr	r3, [pc, #92]	@ (800fcf8 <sniprintf+0x64>)
 800fc9a:	1e0c      	subs	r4, r1, #0
 800fc9c:	681d      	ldr	r5, [r3, #0]
 800fc9e:	b09d      	sub	sp, #116	@ 0x74
 800fca0:	da08      	bge.n	800fcb4 <sniprintf+0x20>
 800fca2:	238b      	movs	r3, #139	@ 0x8b
 800fca4:	602b      	str	r3, [r5, #0]
 800fca6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcaa:	b01d      	add	sp, #116	@ 0x74
 800fcac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcb0:	b002      	add	sp, #8
 800fcb2:	4770      	bx	lr
 800fcb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800fcb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fcbc:	bf14      	ite	ne
 800fcbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800fcc2:	4623      	moveq	r3, r4
 800fcc4:	9304      	str	r3, [sp, #16]
 800fcc6:	9307      	str	r3, [sp, #28]
 800fcc8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fccc:	9002      	str	r0, [sp, #8]
 800fcce:	9006      	str	r0, [sp, #24]
 800fcd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fcd4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800fcd6:	ab21      	add	r3, sp, #132	@ 0x84
 800fcd8:	a902      	add	r1, sp, #8
 800fcda:	4628      	mov	r0, r5
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	f002 f8ef 	bl	8011ec0 <_svfiprintf_r>
 800fce2:	1c43      	adds	r3, r0, #1
 800fce4:	bfbc      	itt	lt
 800fce6:	238b      	movlt	r3, #139	@ 0x8b
 800fce8:	602b      	strlt	r3, [r5, #0]
 800fcea:	2c00      	cmp	r4, #0
 800fcec:	d0dd      	beq.n	800fcaa <sniprintf+0x16>
 800fcee:	9b02      	ldr	r3, [sp, #8]
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	701a      	strb	r2, [r3, #0]
 800fcf4:	e7d9      	b.n	800fcaa <sniprintf+0x16>
 800fcf6:	bf00      	nop
 800fcf8:	200001b0 	.word	0x200001b0

0800fcfc <siprintf>:
 800fcfc:	b40e      	push	{r1, r2, r3}
 800fcfe:	b500      	push	{lr}
 800fd00:	b09c      	sub	sp, #112	@ 0x70
 800fd02:	ab1d      	add	r3, sp, #116	@ 0x74
 800fd04:	9002      	str	r0, [sp, #8]
 800fd06:	9006      	str	r0, [sp, #24]
 800fd08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fd0c:	4809      	ldr	r0, [pc, #36]	@ (800fd34 <siprintf+0x38>)
 800fd0e:	9107      	str	r1, [sp, #28]
 800fd10:	9104      	str	r1, [sp, #16]
 800fd12:	4909      	ldr	r1, [pc, #36]	@ (800fd38 <siprintf+0x3c>)
 800fd14:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd18:	9105      	str	r1, [sp, #20]
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	9301      	str	r3, [sp, #4]
 800fd1e:	a902      	add	r1, sp, #8
 800fd20:	f002 f8ce 	bl	8011ec0 <_svfiprintf_r>
 800fd24:	9b02      	ldr	r3, [sp, #8]
 800fd26:	2200      	movs	r2, #0
 800fd28:	701a      	strb	r2, [r3, #0]
 800fd2a:	b01c      	add	sp, #112	@ 0x70
 800fd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd30:	b003      	add	sp, #12
 800fd32:	4770      	bx	lr
 800fd34:	200001b0 	.word	0x200001b0
 800fd38:	ffff0208 	.word	0xffff0208

0800fd3c <siscanf>:
 800fd3c:	b40e      	push	{r1, r2, r3}
 800fd3e:	b530      	push	{r4, r5, lr}
 800fd40:	b09c      	sub	sp, #112	@ 0x70
 800fd42:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fd44:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fd48:	f854 5b04 	ldr.w	r5, [r4], #4
 800fd4c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fd50:	9002      	str	r0, [sp, #8]
 800fd52:	9006      	str	r0, [sp, #24]
 800fd54:	f7f0 fa74 	bl	8000240 <strlen>
 800fd58:	4b0b      	ldr	r3, [pc, #44]	@ (800fd88 <siscanf+0x4c>)
 800fd5a:	9003      	str	r0, [sp, #12]
 800fd5c:	9007      	str	r0, [sp, #28]
 800fd5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fd60:	480a      	ldr	r0, [pc, #40]	@ (800fd8c <siscanf+0x50>)
 800fd62:	9401      	str	r4, [sp, #4]
 800fd64:	2300      	movs	r3, #0
 800fd66:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd68:	9314      	str	r3, [sp, #80]	@ 0x50
 800fd6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fd6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fd72:	462a      	mov	r2, r5
 800fd74:	4623      	mov	r3, r4
 800fd76:	a902      	add	r1, sp, #8
 800fd78:	6800      	ldr	r0, [r0, #0]
 800fd7a:	f002 f9f5 	bl	8012168 <__ssvfiscanf_r>
 800fd7e:	b01c      	add	sp, #112	@ 0x70
 800fd80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd84:	b003      	add	sp, #12
 800fd86:	4770      	bx	lr
 800fd88:	0800fdb3 	.word	0x0800fdb3
 800fd8c:	200001b0 	.word	0x200001b0

0800fd90 <__sread>:
 800fd90:	b510      	push	{r4, lr}
 800fd92:	460c      	mov	r4, r1
 800fd94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd98:	f000 f914 	bl	800ffc4 <_read_r>
 800fd9c:	2800      	cmp	r0, #0
 800fd9e:	bfab      	itete	ge
 800fda0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fda2:	89a3      	ldrhlt	r3, [r4, #12]
 800fda4:	181b      	addge	r3, r3, r0
 800fda6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fdaa:	bfac      	ite	ge
 800fdac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fdae:	81a3      	strhlt	r3, [r4, #12]
 800fdb0:	bd10      	pop	{r4, pc}

0800fdb2 <__seofread>:
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	4770      	bx	lr

0800fdb6 <__swrite>:
 800fdb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdba:	461f      	mov	r7, r3
 800fdbc:	898b      	ldrh	r3, [r1, #12]
 800fdbe:	05db      	lsls	r3, r3, #23
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	4616      	mov	r6, r2
 800fdc6:	d505      	bpl.n	800fdd4 <__swrite+0x1e>
 800fdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdcc:	2302      	movs	r3, #2
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f000 f8e6 	bl	800ffa0 <_lseek_r>
 800fdd4:	89a3      	ldrh	r3, [r4, #12]
 800fdd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fdde:	81a3      	strh	r3, [r4, #12]
 800fde0:	4632      	mov	r2, r6
 800fde2:	463b      	mov	r3, r7
 800fde4:	4628      	mov	r0, r5
 800fde6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fdea:	f000 b90d 	b.w	8010008 <_write_r>

0800fdee <__sseek>:
 800fdee:	b510      	push	{r4, lr}
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fdf6:	f000 f8d3 	bl	800ffa0 <_lseek_r>
 800fdfa:	1c43      	adds	r3, r0, #1
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	bf15      	itete	ne
 800fe00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fe02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fe06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fe0a:	81a3      	strheq	r3, [r4, #12]
 800fe0c:	bf18      	it	ne
 800fe0e:	81a3      	strhne	r3, [r4, #12]
 800fe10:	bd10      	pop	{r4, pc}

0800fe12 <__sclose>:
 800fe12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe16:	f000 b8b3 	b.w	800ff80 <_close_r>

0800fe1a <__swbuf_r>:
 800fe1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1c:	460e      	mov	r6, r1
 800fe1e:	4614      	mov	r4, r2
 800fe20:	4605      	mov	r5, r0
 800fe22:	b118      	cbz	r0, 800fe2c <__swbuf_r+0x12>
 800fe24:	6a03      	ldr	r3, [r0, #32]
 800fe26:	b90b      	cbnz	r3, 800fe2c <__swbuf_r+0x12>
 800fe28:	f7ff fe8e 	bl	800fb48 <__sinit>
 800fe2c:	69a3      	ldr	r3, [r4, #24]
 800fe2e:	60a3      	str	r3, [r4, #8]
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	071a      	lsls	r2, r3, #28
 800fe34:	d501      	bpl.n	800fe3a <__swbuf_r+0x20>
 800fe36:	6923      	ldr	r3, [r4, #16]
 800fe38:	b943      	cbnz	r3, 800fe4c <__swbuf_r+0x32>
 800fe3a:	4621      	mov	r1, r4
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	f000 f82b 	bl	800fe98 <__swsetup_r>
 800fe42:	b118      	cbz	r0, 800fe4c <__swbuf_r+0x32>
 800fe44:	f04f 37ff 	mov.w	r7, #4294967295
 800fe48:	4638      	mov	r0, r7
 800fe4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe4c:	6823      	ldr	r3, [r4, #0]
 800fe4e:	6922      	ldr	r2, [r4, #16]
 800fe50:	1a98      	subs	r0, r3, r2
 800fe52:	6963      	ldr	r3, [r4, #20]
 800fe54:	b2f6      	uxtb	r6, r6
 800fe56:	4283      	cmp	r3, r0
 800fe58:	4637      	mov	r7, r6
 800fe5a:	dc05      	bgt.n	800fe68 <__swbuf_r+0x4e>
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	4628      	mov	r0, r5
 800fe60:	f002 fe0a 	bl	8012a78 <_fflush_r>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	d1ed      	bne.n	800fe44 <__swbuf_r+0x2a>
 800fe68:	68a3      	ldr	r3, [r4, #8]
 800fe6a:	3b01      	subs	r3, #1
 800fe6c:	60a3      	str	r3, [r4, #8]
 800fe6e:	6823      	ldr	r3, [r4, #0]
 800fe70:	1c5a      	adds	r2, r3, #1
 800fe72:	6022      	str	r2, [r4, #0]
 800fe74:	701e      	strb	r6, [r3, #0]
 800fe76:	6962      	ldr	r2, [r4, #20]
 800fe78:	1c43      	adds	r3, r0, #1
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d004      	beq.n	800fe88 <__swbuf_r+0x6e>
 800fe7e:	89a3      	ldrh	r3, [r4, #12]
 800fe80:	07db      	lsls	r3, r3, #31
 800fe82:	d5e1      	bpl.n	800fe48 <__swbuf_r+0x2e>
 800fe84:	2e0a      	cmp	r6, #10
 800fe86:	d1df      	bne.n	800fe48 <__swbuf_r+0x2e>
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4628      	mov	r0, r5
 800fe8c:	f002 fdf4 	bl	8012a78 <_fflush_r>
 800fe90:	2800      	cmp	r0, #0
 800fe92:	d0d9      	beq.n	800fe48 <__swbuf_r+0x2e>
 800fe94:	e7d6      	b.n	800fe44 <__swbuf_r+0x2a>
	...

0800fe98 <__swsetup_r>:
 800fe98:	b538      	push	{r3, r4, r5, lr}
 800fe9a:	4b29      	ldr	r3, [pc, #164]	@ (800ff40 <__swsetup_r+0xa8>)
 800fe9c:	4605      	mov	r5, r0
 800fe9e:	6818      	ldr	r0, [r3, #0]
 800fea0:	460c      	mov	r4, r1
 800fea2:	b118      	cbz	r0, 800feac <__swsetup_r+0x14>
 800fea4:	6a03      	ldr	r3, [r0, #32]
 800fea6:	b90b      	cbnz	r3, 800feac <__swsetup_r+0x14>
 800fea8:	f7ff fe4e 	bl	800fb48 <__sinit>
 800feac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feb0:	0719      	lsls	r1, r3, #28
 800feb2:	d422      	bmi.n	800fefa <__swsetup_r+0x62>
 800feb4:	06da      	lsls	r2, r3, #27
 800feb6:	d407      	bmi.n	800fec8 <__swsetup_r+0x30>
 800feb8:	2209      	movs	r2, #9
 800feba:	602a      	str	r2, [r5, #0]
 800febc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fec0:	81a3      	strh	r3, [r4, #12]
 800fec2:	f04f 30ff 	mov.w	r0, #4294967295
 800fec6:	e033      	b.n	800ff30 <__swsetup_r+0x98>
 800fec8:	0758      	lsls	r0, r3, #29
 800feca:	d512      	bpl.n	800fef2 <__swsetup_r+0x5a>
 800fecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fece:	b141      	cbz	r1, 800fee2 <__swsetup_r+0x4a>
 800fed0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fed4:	4299      	cmp	r1, r3
 800fed6:	d002      	beq.n	800fede <__swsetup_r+0x46>
 800fed8:	4628      	mov	r0, r5
 800feda:	f000 ff39 	bl	8010d50 <_free_r>
 800fede:	2300      	movs	r3, #0
 800fee0:	6363      	str	r3, [r4, #52]	@ 0x34
 800fee2:	89a3      	ldrh	r3, [r4, #12]
 800fee4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fee8:	81a3      	strh	r3, [r4, #12]
 800feea:	2300      	movs	r3, #0
 800feec:	6063      	str	r3, [r4, #4]
 800feee:	6923      	ldr	r3, [r4, #16]
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	89a3      	ldrh	r3, [r4, #12]
 800fef4:	f043 0308 	orr.w	r3, r3, #8
 800fef8:	81a3      	strh	r3, [r4, #12]
 800fefa:	6923      	ldr	r3, [r4, #16]
 800fefc:	b94b      	cbnz	r3, 800ff12 <__swsetup_r+0x7a>
 800fefe:	89a3      	ldrh	r3, [r4, #12]
 800ff00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff08:	d003      	beq.n	800ff12 <__swsetup_r+0x7a>
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4628      	mov	r0, r5
 800ff0e:	f002 fe01 	bl	8012b14 <__smakebuf_r>
 800ff12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff16:	f013 0201 	ands.w	r2, r3, #1
 800ff1a:	d00a      	beq.n	800ff32 <__swsetup_r+0x9a>
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	60a2      	str	r2, [r4, #8]
 800ff20:	6962      	ldr	r2, [r4, #20]
 800ff22:	4252      	negs	r2, r2
 800ff24:	61a2      	str	r2, [r4, #24]
 800ff26:	6922      	ldr	r2, [r4, #16]
 800ff28:	b942      	cbnz	r2, 800ff3c <__swsetup_r+0xa4>
 800ff2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff2e:	d1c5      	bne.n	800febc <__swsetup_r+0x24>
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	0799      	lsls	r1, r3, #30
 800ff34:	bf58      	it	pl
 800ff36:	6962      	ldrpl	r2, [r4, #20]
 800ff38:	60a2      	str	r2, [r4, #8]
 800ff3a:	e7f4      	b.n	800ff26 <__swsetup_r+0x8e>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	e7f7      	b.n	800ff30 <__swsetup_r+0x98>
 800ff40:	200001b0 	.word	0x200001b0

0800ff44 <memset>:
 800ff44:	4402      	add	r2, r0
 800ff46:	4603      	mov	r3, r0
 800ff48:	4293      	cmp	r3, r2
 800ff4a:	d100      	bne.n	800ff4e <memset+0xa>
 800ff4c:	4770      	bx	lr
 800ff4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ff52:	e7f9      	b.n	800ff48 <memset+0x4>

0800ff54 <strncmp>:
 800ff54:	b510      	push	{r4, lr}
 800ff56:	b16a      	cbz	r2, 800ff74 <strncmp+0x20>
 800ff58:	3901      	subs	r1, #1
 800ff5a:	1884      	adds	r4, r0, r2
 800ff5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d103      	bne.n	800ff70 <strncmp+0x1c>
 800ff68:	42a0      	cmp	r0, r4
 800ff6a:	d001      	beq.n	800ff70 <strncmp+0x1c>
 800ff6c:	2a00      	cmp	r2, #0
 800ff6e:	d1f5      	bne.n	800ff5c <strncmp+0x8>
 800ff70:	1ad0      	subs	r0, r2, r3
 800ff72:	bd10      	pop	{r4, pc}
 800ff74:	4610      	mov	r0, r2
 800ff76:	e7fc      	b.n	800ff72 <strncmp+0x1e>

0800ff78 <_localeconv_r>:
 800ff78:	4800      	ldr	r0, [pc, #0]	@ (800ff7c <_localeconv_r+0x4>)
 800ff7a:	4770      	bx	lr
 800ff7c:	20000134 	.word	0x20000134

0800ff80 <_close_r>:
 800ff80:	b538      	push	{r3, r4, r5, lr}
 800ff82:	4d06      	ldr	r5, [pc, #24]	@ (800ff9c <_close_r+0x1c>)
 800ff84:	2300      	movs	r3, #0
 800ff86:	4604      	mov	r4, r0
 800ff88:	4608      	mov	r0, r1
 800ff8a:	602b      	str	r3, [r5, #0]
 800ff8c:	f7f1 fc66 	bl	800185c <_close>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_close_r+0x1a>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_close_r+0x1a>
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	200009c4 	.word	0x200009c4

0800ffa0 <_lseek_r>:
 800ffa0:	b538      	push	{r3, r4, r5, lr}
 800ffa2:	4d07      	ldr	r5, [pc, #28]	@ (800ffc0 <_lseek_r+0x20>)
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	4608      	mov	r0, r1
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	2200      	movs	r2, #0
 800ffac:	602a      	str	r2, [r5, #0]
 800ffae:	461a      	mov	r2, r3
 800ffb0:	f7f1 fc7b 	bl	80018aa <_lseek>
 800ffb4:	1c43      	adds	r3, r0, #1
 800ffb6:	d102      	bne.n	800ffbe <_lseek_r+0x1e>
 800ffb8:	682b      	ldr	r3, [r5, #0]
 800ffba:	b103      	cbz	r3, 800ffbe <_lseek_r+0x1e>
 800ffbc:	6023      	str	r3, [r4, #0]
 800ffbe:	bd38      	pop	{r3, r4, r5, pc}
 800ffc0:	200009c4 	.word	0x200009c4

0800ffc4 <_read_r>:
 800ffc4:	b538      	push	{r3, r4, r5, lr}
 800ffc6:	4d07      	ldr	r5, [pc, #28]	@ (800ffe4 <_read_r+0x20>)
 800ffc8:	4604      	mov	r4, r0
 800ffca:	4608      	mov	r0, r1
 800ffcc:	4611      	mov	r1, r2
 800ffce:	2200      	movs	r2, #0
 800ffd0:	602a      	str	r2, [r5, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	f7f1 fc25 	bl	8001822 <_read>
 800ffd8:	1c43      	adds	r3, r0, #1
 800ffda:	d102      	bne.n	800ffe2 <_read_r+0x1e>
 800ffdc:	682b      	ldr	r3, [r5, #0]
 800ffde:	b103      	cbz	r3, 800ffe2 <_read_r+0x1e>
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	bd38      	pop	{r3, r4, r5, pc}
 800ffe4:	200009c4 	.word	0x200009c4

0800ffe8 <_sbrk_r>:
 800ffe8:	b538      	push	{r3, r4, r5, lr}
 800ffea:	4d06      	ldr	r5, [pc, #24]	@ (8010004 <_sbrk_r+0x1c>)
 800ffec:	2300      	movs	r3, #0
 800ffee:	4604      	mov	r4, r0
 800fff0:	4608      	mov	r0, r1
 800fff2:	602b      	str	r3, [r5, #0]
 800fff4:	f7f1 fc66 	bl	80018c4 <_sbrk>
 800fff8:	1c43      	adds	r3, r0, #1
 800fffa:	d102      	bne.n	8010002 <_sbrk_r+0x1a>
 800fffc:	682b      	ldr	r3, [r5, #0]
 800fffe:	b103      	cbz	r3, 8010002 <_sbrk_r+0x1a>
 8010000:	6023      	str	r3, [r4, #0]
 8010002:	bd38      	pop	{r3, r4, r5, pc}
 8010004:	200009c4 	.word	0x200009c4

08010008 <_write_r>:
 8010008:	b538      	push	{r3, r4, r5, lr}
 801000a:	4d07      	ldr	r5, [pc, #28]	@ (8010028 <_write_r+0x20>)
 801000c:	4604      	mov	r4, r0
 801000e:	4608      	mov	r0, r1
 8010010:	4611      	mov	r1, r2
 8010012:	2200      	movs	r2, #0
 8010014:	602a      	str	r2, [r5, #0]
 8010016:	461a      	mov	r2, r3
 8010018:	f7f0 ffbc 	bl	8000f94 <_write>
 801001c:	1c43      	adds	r3, r0, #1
 801001e:	d102      	bne.n	8010026 <_write_r+0x1e>
 8010020:	682b      	ldr	r3, [r5, #0]
 8010022:	b103      	cbz	r3, 8010026 <_write_r+0x1e>
 8010024:	6023      	str	r3, [r4, #0]
 8010026:	bd38      	pop	{r3, r4, r5, pc}
 8010028:	200009c4 	.word	0x200009c4

0801002c <__errno>:
 801002c:	4b01      	ldr	r3, [pc, #4]	@ (8010034 <__errno+0x8>)
 801002e:	6818      	ldr	r0, [r3, #0]
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop
 8010034:	200001b0 	.word	0x200001b0

08010038 <__libc_init_array>:
 8010038:	b570      	push	{r4, r5, r6, lr}
 801003a:	4d0d      	ldr	r5, [pc, #52]	@ (8010070 <__libc_init_array+0x38>)
 801003c:	4c0d      	ldr	r4, [pc, #52]	@ (8010074 <__libc_init_array+0x3c>)
 801003e:	1b64      	subs	r4, r4, r5
 8010040:	10a4      	asrs	r4, r4, #2
 8010042:	2600      	movs	r6, #0
 8010044:	42a6      	cmp	r6, r4
 8010046:	d109      	bne.n	801005c <__libc_init_array+0x24>
 8010048:	4d0b      	ldr	r5, [pc, #44]	@ (8010078 <__libc_init_array+0x40>)
 801004a:	4c0c      	ldr	r4, [pc, #48]	@ (801007c <__libc_init_array+0x44>)
 801004c:	f003 f804 	bl	8013058 <_init>
 8010050:	1b64      	subs	r4, r4, r5
 8010052:	10a4      	asrs	r4, r4, #2
 8010054:	2600      	movs	r6, #0
 8010056:	42a6      	cmp	r6, r4
 8010058:	d105      	bne.n	8010066 <__libc_init_array+0x2e>
 801005a:	bd70      	pop	{r4, r5, r6, pc}
 801005c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010060:	4798      	blx	r3
 8010062:	3601      	adds	r6, #1
 8010064:	e7ee      	b.n	8010044 <__libc_init_array+0xc>
 8010066:	f855 3b04 	ldr.w	r3, [r5], #4
 801006a:	4798      	blx	r3
 801006c:	3601      	adds	r6, #1
 801006e:	e7f2      	b.n	8010056 <__libc_init_array+0x1e>
 8010070:	080154b8 	.word	0x080154b8
 8010074:	080154b8 	.word	0x080154b8
 8010078:	080154b8 	.word	0x080154b8
 801007c:	080154bc 	.word	0x080154bc

08010080 <__retarget_lock_init_recursive>:
 8010080:	4770      	bx	lr

08010082 <__retarget_lock_acquire_recursive>:
 8010082:	4770      	bx	lr

08010084 <__retarget_lock_release_recursive>:
 8010084:	4770      	bx	lr

08010086 <memcpy>:
 8010086:	440a      	add	r2, r1
 8010088:	4291      	cmp	r1, r2
 801008a:	f100 33ff 	add.w	r3, r0, #4294967295
 801008e:	d100      	bne.n	8010092 <memcpy+0xc>
 8010090:	4770      	bx	lr
 8010092:	b510      	push	{r4, lr}
 8010094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010098:	f803 4f01 	strb.w	r4, [r3, #1]!
 801009c:	4291      	cmp	r1, r2
 801009e:	d1f9      	bne.n	8010094 <memcpy+0xe>
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	0000      	movs	r0, r0
 80100a4:	0000      	movs	r0, r0
	...

080100a8 <nan>:
 80100a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80100b0 <nan+0x8>
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	00000000 	.word	0x00000000
 80100b4:	7ff80000 	.word	0x7ff80000

080100b8 <quorem>:
 80100b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100bc:	6903      	ldr	r3, [r0, #16]
 80100be:	690c      	ldr	r4, [r1, #16]
 80100c0:	42a3      	cmp	r3, r4
 80100c2:	4607      	mov	r7, r0
 80100c4:	db7e      	blt.n	80101c4 <quorem+0x10c>
 80100c6:	3c01      	subs	r4, #1
 80100c8:	f101 0814 	add.w	r8, r1, #20
 80100cc:	00a3      	lsls	r3, r4, #2
 80100ce:	f100 0514 	add.w	r5, r0, #20
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100d8:	9301      	str	r3, [sp, #4]
 80100da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80100de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100e2:	3301      	adds	r3, #1
 80100e4:	429a      	cmp	r2, r3
 80100e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80100ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80100ee:	d32e      	bcc.n	801014e <quorem+0x96>
 80100f0:	f04f 0a00 	mov.w	sl, #0
 80100f4:	46c4      	mov	ip, r8
 80100f6:	46ae      	mov	lr, r5
 80100f8:	46d3      	mov	fp, sl
 80100fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80100fe:	b298      	uxth	r0, r3
 8010100:	fb06 a000 	mla	r0, r6, r0, sl
 8010104:	0c02      	lsrs	r2, r0, #16
 8010106:	0c1b      	lsrs	r3, r3, #16
 8010108:	fb06 2303 	mla	r3, r6, r3, r2
 801010c:	f8de 2000 	ldr.w	r2, [lr]
 8010110:	b280      	uxth	r0, r0
 8010112:	b292      	uxth	r2, r2
 8010114:	1a12      	subs	r2, r2, r0
 8010116:	445a      	add	r2, fp
 8010118:	f8de 0000 	ldr.w	r0, [lr]
 801011c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010120:	b29b      	uxth	r3, r3
 8010122:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010126:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801012a:	b292      	uxth	r2, r2
 801012c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010130:	45e1      	cmp	r9, ip
 8010132:	f84e 2b04 	str.w	r2, [lr], #4
 8010136:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801013a:	d2de      	bcs.n	80100fa <quorem+0x42>
 801013c:	9b00      	ldr	r3, [sp, #0]
 801013e:	58eb      	ldr	r3, [r5, r3]
 8010140:	b92b      	cbnz	r3, 801014e <quorem+0x96>
 8010142:	9b01      	ldr	r3, [sp, #4]
 8010144:	3b04      	subs	r3, #4
 8010146:	429d      	cmp	r5, r3
 8010148:	461a      	mov	r2, r3
 801014a:	d32f      	bcc.n	80101ac <quorem+0xf4>
 801014c:	613c      	str	r4, [r7, #16]
 801014e:	4638      	mov	r0, r7
 8010150:	f001 fc58 	bl	8011a04 <__mcmp>
 8010154:	2800      	cmp	r0, #0
 8010156:	db25      	blt.n	80101a4 <quorem+0xec>
 8010158:	4629      	mov	r1, r5
 801015a:	2000      	movs	r0, #0
 801015c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010160:	f8d1 c000 	ldr.w	ip, [r1]
 8010164:	fa1f fe82 	uxth.w	lr, r2
 8010168:	fa1f f38c 	uxth.w	r3, ip
 801016c:	eba3 030e 	sub.w	r3, r3, lr
 8010170:	4403      	add	r3, r0
 8010172:	0c12      	lsrs	r2, r2, #16
 8010174:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010178:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801017c:	b29b      	uxth	r3, r3
 801017e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010182:	45c1      	cmp	r9, r8
 8010184:	f841 3b04 	str.w	r3, [r1], #4
 8010188:	ea4f 4022 	mov.w	r0, r2, asr #16
 801018c:	d2e6      	bcs.n	801015c <quorem+0xa4>
 801018e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010196:	b922      	cbnz	r2, 80101a2 <quorem+0xea>
 8010198:	3b04      	subs	r3, #4
 801019a:	429d      	cmp	r5, r3
 801019c:	461a      	mov	r2, r3
 801019e:	d30b      	bcc.n	80101b8 <quorem+0x100>
 80101a0:	613c      	str	r4, [r7, #16]
 80101a2:	3601      	adds	r6, #1
 80101a4:	4630      	mov	r0, r6
 80101a6:	b003      	add	sp, #12
 80101a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101ac:	6812      	ldr	r2, [r2, #0]
 80101ae:	3b04      	subs	r3, #4
 80101b0:	2a00      	cmp	r2, #0
 80101b2:	d1cb      	bne.n	801014c <quorem+0x94>
 80101b4:	3c01      	subs	r4, #1
 80101b6:	e7c6      	b.n	8010146 <quorem+0x8e>
 80101b8:	6812      	ldr	r2, [r2, #0]
 80101ba:	3b04      	subs	r3, #4
 80101bc:	2a00      	cmp	r2, #0
 80101be:	d1ef      	bne.n	80101a0 <quorem+0xe8>
 80101c0:	3c01      	subs	r4, #1
 80101c2:	e7ea      	b.n	801019a <quorem+0xe2>
 80101c4:	2000      	movs	r0, #0
 80101c6:	e7ee      	b.n	80101a6 <quorem+0xee>

080101c8 <_dtoa_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	69c7      	ldr	r7, [r0, #28]
 80101ce:	b099      	sub	sp, #100	@ 0x64
 80101d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80101d4:	ec55 4b10 	vmov	r4, r5, d0
 80101d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80101da:	9109      	str	r1, [sp, #36]	@ 0x24
 80101dc:	4683      	mov	fp, r0
 80101de:	920e      	str	r2, [sp, #56]	@ 0x38
 80101e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80101e2:	b97f      	cbnz	r7, 8010204 <_dtoa_r+0x3c>
 80101e4:	2010      	movs	r0, #16
 80101e6:	f7fe f8c7 	bl	800e378 <malloc>
 80101ea:	4602      	mov	r2, r0
 80101ec:	f8cb 001c 	str.w	r0, [fp, #28]
 80101f0:	b920      	cbnz	r0, 80101fc <_dtoa_r+0x34>
 80101f2:	4ba7      	ldr	r3, [pc, #668]	@ (8010490 <_dtoa_r+0x2c8>)
 80101f4:	21ef      	movs	r1, #239	@ 0xef
 80101f6:	48a7      	ldr	r0, [pc, #668]	@ (8010494 <_dtoa_r+0x2cc>)
 80101f8:	f002 fd78 	bl	8012cec <__assert_func>
 80101fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010200:	6007      	str	r7, [r0, #0]
 8010202:	60c7      	str	r7, [r0, #12]
 8010204:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010208:	6819      	ldr	r1, [r3, #0]
 801020a:	b159      	cbz	r1, 8010224 <_dtoa_r+0x5c>
 801020c:	685a      	ldr	r2, [r3, #4]
 801020e:	604a      	str	r2, [r1, #4]
 8010210:	2301      	movs	r3, #1
 8010212:	4093      	lsls	r3, r2
 8010214:	608b      	str	r3, [r1, #8]
 8010216:	4658      	mov	r0, fp
 8010218:	f001 f970 	bl	80114fc <_Bfree>
 801021c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
 8010224:	1e2b      	subs	r3, r5, #0
 8010226:	bfb9      	ittee	lt
 8010228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801022c:	9303      	strlt	r3, [sp, #12]
 801022e:	2300      	movge	r3, #0
 8010230:	6033      	strge	r3, [r6, #0]
 8010232:	9f03      	ldr	r7, [sp, #12]
 8010234:	4b98      	ldr	r3, [pc, #608]	@ (8010498 <_dtoa_r+0x2d0>)
 8010236:	bfbc      	itt	lt
 8010238:	2201      	movlt	r2, #1
 801023a:	6032      	strlt	r2, [r6, #0]
 801023c:	43bb      	bics	r3, r7
 801023e:	d112      	bne.n	8010266 <_dtoa_r+0x9e>
 8010240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010242:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010246:	6013      	str	r3, [r2, #0]
 8010248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801024c:	4323      	orrs	r3, r4
 801024e:	f000 854d 	beq.w	8010cec <_dtoa_r+0xb24>
 8010252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80104ac <_dtoa_r+0x2e4>
 8010258:	2b00      	cmp	r3, #0
 801025a:	f000 854f 	beq.w	8010cfc <_dtoa_r+0xb34>
 801025e:	f10a 0303 	add.w	r3, sl, #3
 8010262:	f000 bd49 	b.w	8010cf8 <_dtoa_r+0xb30>
 8010266:	ed9d 7b02 	vldr	d7, [sp, #8]
 801026a:	2200      	movs	r2, #0
 801026c:	ec51 0b17 	vmov	r0, r1, d7
 8010270:	2300      	movs	r3, #0
 8010272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010276:	f7f0 fc0f 	bl	8000a98 <__aeabi_dcmpeq>
 801027a:	4680      	mov	r8, r0
 801027c:	b158      	cbz	r0, 8010296 <_dtoa_r+0xce>
 801027e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010280:	2301      	movs	r3, #1
 8010282:	6013      	str	r3, [r2, #0]
 8010284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010286:	b113      	cbz	r3, 801028e <_dtoa_r+0xc6>
 8010288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801028a:	4b84      	ldr	r3, [pc, #528]	@ (801049c <_dtoa_r+0x2d4>)
 801028c:	6013      	str	r3, [r2, #0]
 801028e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80104b0 <_dtoa_r+0x2e8>
 8010292:	f000 bd33 	b.w	8010cfc <_dtoa_r+0xb34>
 8010296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801029a:	aa16      	add	r2, sp, #88	@ 0x58
 801029c:	a917      	add	r1, sp, #92	@ 0x5c
 801029e:	4658      	mov	r0, fp
 80102a0:	f001 fcd0 	bl	8011c44 <__d2b>
 80102a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80102a8:	4681      	mov	r9, r0
 80102aa:	2e00      	cmp	r6, #0
 80102ac:	d077      	beq.n	801039e <_dtoa_r+0x1d6>
 80102ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80102b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80102b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80102bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80102c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80102c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80102c8:	4619      	mov	r1, r3
 80102ca:	2200      	movs	r2, #0
 80102cc:	4b74      	ldr	r3, [pc, #464]	@ (80104a0 <_dtoa_r+0x2d8>)
 80102ce:	f7ef ffc3 	bl	8000258 <__aeabi_dsub>
 80102d2:	a369      	add	r3, pc, #420	@ (adr r3, 8010478 <_dtoa_r+0x2b0>)
 80102d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d8:	f7f0 f976 	bl	80005c8 <__aeabi_dmul>
 80102dc:	a368      	add	r3, pc, #416	@ (adr r3, 8010480 <_dtoa_r+0x2b8>)
 80102de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e2:	f7ef ffbb 	bl	800025c <__adddf3>
 80102e6:	4604      	mov	r4, r0
 80102e8:	4630      	mov	r0, r6
 80102ea:	460d      	mov	r5, r1
 80102ec:	f7f0 f902 	bl	80004f4 <__aeabi_i2d>
 80102f0:	a365      	add	r3, pc, #404	@ (adr r3, 8010488 <_dtoa_r+0x2c0>)
 80102f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f6:	f7f0 f967 	bl	80005c8 <__aeabi_dmul>
 80102fa:	4602      	mov	r2, r0
 80102fc:	460b      	mov	r3, r1
 80102fe:	4620      	mov	r0, r4
 8010300:	4629      	mov	r1, r5
 8010302:	f7ef ffab 	bl	800025c <__adddf3>
 8010306:	4604      	mov	r4, r0
 8010308:	460d      	mov	r5, r1
 801030a:	f7f0 fc0d 	bl	8000b28 <__aeabi_d2iz>
 801030e:	2200      	movs	r2, #0
 8010310:	4607      	mov	r7, r0
 8010312:	2300      	movs	r3, #0
 8010314:	4620      	mov	r0, r4
 8010316:	4629      	mov	r1, r5
 8010318:	f7f0 fbc8 	bl	8000aac <__aeabi_dcmplt>
 801031c:	b140      	cbz	r0, 8010330 <_dtoa_r+0x168>
 801031e:	4638      	mov	r0, r7
 8010320:	f7f0 f8e8 	bl	80004f4 <__aeabi_i2d>
 8010324:	4622      	mov	r2, r4
 8010326:	462b      	mov	r3, r5
 8010328:	f7f0 fbb6 	bl	8000a98 <__aeabi_dcmpeq>
 801032c:	b900      	cbnz	r0, 8010330 <_dtoa_r+0x168>
 801032e:	3f01      	subs	r7, #1
 8010330:	2f16      	cmp	r7, #22
 8010332:	d851      	bhi.n	80103d8 <_dtoa_r+0x210>
 8010334:	4b5b      	ldr	r3, [pc, #364]	@ (80104a4 <_dtoa_r+0x2dc>)
 8010336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801033a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801033e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010342:	f7f0 fbb3 	bl	8000aac <__aeabi_dcmplt>
 8010346:	2800      	cmp	r0, #0
 8010348:	d048      	beq.n	80103dc <_dtoa_r+0x214>
 801034a:	3f01      	subs	r7, #1
 801034c:	2300      	movs	r3, #0
 801034e:	9312      	str	r3, [sp, #72]	@ 0x48
 8010350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010352:	1b9b      	subs	r3, r3, r6
 8010354:	1e5a      	subs	r2, r3, #1
 8010356:	bf44      	itt	mi
 8010358:	f1c3 0801 	rsbmi	r8, r3, #1
 801035c:	2300      	movmi	r3, #0
 801035e:	9208      	str	r2, [sp, #32]
 8010360:	bf54      	ite	pl
 8010362:	f04f 0800 	movpl.w	r8, #0
 8010366:	9308      	strmi	r3, [sp, #32]
 8010368:	2f00      	cmp	r7, #0
 801036a:	db39      	blt.n	80103e0 <_dtoa_r+0x218>
 801036c:	9b08      	ldr	r3, [sp, #32]
 801036e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010370:	443b      	add	r3, r7
 8010372:	9308      	str	r3, [sp, #32]
 8010374:	2300      	movs	r3, #0
 8010376:	930a      	str	r3, [sp, #40]	@ 0x28
 8010378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801037a:	2b09      	cmp	r3, #9
 801037c:	d864      	bhi.n	8010448 <_dtoa_r+0x280>
 801037e:	2b05      	cmp	r3, #5
 8010380:	bfc4      	itt	gt
 8010382:	3b04      	subgt	r3, #4
 8010384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010388:	f1a3 0302 	sub.w	r3, r3, #2
 801038c:	bfcc      	ite	gt
 801038e:	2400      	movgt	r4, #0
 8010390:	2401      	movle	r4, #1
 8010392:	2b03      	cmp	r3, #3
 8010394:	d863      	bhi.n	801045e <_dtoa_r+0x296>
 8010396:	e8df f003 	tbb	[pc, r3]
 801039a:	372a      	.short	0x372a
 801039c:	5535      	.short	0x5535
 801039e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80103a2:	441e      	add	r6, r3
 80103a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80103a8:	2b20      	cmp	r3, #32
 80103aa:	bfc1      	itttt	gt
 80103ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80103b0:	409f      	lslgt	r7, r3
 80103b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80103b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80103ba:	bfd6      	itet	le
 80103bc:	f1c3 0320 	rsble	r3, r3, #32
 80103c0:	ea47 0003 	orrgt.w	r0, r7, r3
 80103c4:	fa04 f003 	lslle.w	r0, r4, r3
 80103c8:	f7f0 f884 	bl	80004d4 <__aeabi_ui2d>
 80103cc:	2201      	movs	r2, #1
 80103ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80103d2:	3e01      	subs	r6, #1
 80103d4:	9214      	str	r2, [sp, #80]	@ 0x50
 80103d6:	e777      	b.n	80102c8 <_dtoa_r+0x100>
 80103d8:	2301      	movs	r3, #1
 80103da:	e7b8      	b.n	801034e <_dtoa_r+0x186>
 80103dc:	9012      	str	r0, [sp, #72]	@ 0x48
 80103de:	e7b7      	b.n	8010350 <_dtoa_r+0x188>
 80103e0:	427b      	negs	r3, r7
 80103e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80103e4:	2300      	movs	r3, #0
 80103e6:	eba8 0807 	sub.w	r8, r8, r7
 80103ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80103ec:	e7c4      	b.n	8010378 <_dtoa_r+0x1b0>
 80103ee:	2300      	movs	r3, #0
 80103f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80103f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	dc35      	bgt.n	8010464 <_dtoa_r+0x29c>
 80103f8:	2301      	movs	r3, #1
 80103fa:	9300      	str	r3, [sp, #0]
 80103fc:	9307      	str	r3, [sp, #28]
 80103fe:	461a      	mov	r2, r3
 8010400:	920e      	str	r2, [sp, #56]	@ 0x38
 8010402:	e00b      	b.n	801041c <_dtoa_r+0x254>
 8010404:	2301      	movs	r3, #1
 8010406:	e7f3      	b.n	80103f0 <_dtoa_r+0x228>
 8010408:	2300      	movs	r3, #0
 801040a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801040c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801040e:	18fb      	adds	r3, r7, r3
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	3301      	adds	r3, #1
 8010414:	2b01      	cmp	r3, #1
 8010416:	9307      	str	r3, [sp, #28]
 8010418:	bfb8      	it	lt
 801041a:	2301      	movlt	r3, #1
 801041c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010420:	2100      	movs	r1, #0
 8010422:	2204      	movs	r2, #4
 8010424:	f102 0514 	add.w	r5, r2, #20
 8010428:	429d      	cmp	r5, r3
 801042a:	d91f      	bls.n	801046c <_dtoa_r+0x2a4>
 801042c:	6041      	str	r1, [r0, #4]
 801042e:	4658      	mov	r0, fp
 8010430:	f001 f824 	bl	801147c <_Balloc>
 8010434:	4682      	mov	sl, r0
 8010436:	2800      	cmp	r0, #0
 8010438:	d13c      	bne.n	80104b4 <_dtoa_r+0x2ec>
 801043a:	4b1b      	ldr	r3, [pc, #108]	@ (80104a8 <_dtoa_r+0x2e0>)
 801043c:	4602      	mov	r2, r0
 801043e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010442:	e6d8      	b.n	80101f6 <_dtoa_r+0x2e>
 8010444:	2301      	movs	r3, #1
 8010446:	e7e0      	b.n	801040a <_dtoa_r+0x242>
 8010448:	2401      	movs	r4, #1
 801044a:	2300      	movs	r3, #0
 801044c:	9309      	str	r3, [sp, #36]	@ 0x24
 801044e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010450:	f04f 33ff 	mov.w	r3, #4294967295
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	9307      	str	r3, [sp, #28]
 8010458:	2200      	movs	r2, #0
 801045a:	2312      	movs	r3, #18
 801045c:	e7d0      	b.n	8010400 <_dtoa_r+0x238>
 801045e:	2301      	movs	r3, #1
 8010460:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010462:	e7f5      	b.n	8010450 <_dtoa_r+0x288>
 8010464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	9307      	str	r3, [sp, #28]
 801046a:	e7d7      	b.n	801041c <_dtoa_r+0x254>
 801046c:	3101      	adds	r1, #1
 801046e:	0052      	lsls	r2, r2, #1
 8010470:	e7d8      	b.n	8010424 <_dtoa_r+0x25c>
 8010472:	bf00      	nop
 8010474:	f3af 8000 	nop.w
 8010478:	636f4361 	.word	0x636f4361
 801047c:	3fd287a7 	.word	0x3fd287a7
 8010480:	8b60c8b3 	.word	0x8b60c8b3
 8010484:	3fc68a28 	.word	0x3fc68a28
 8010488:	509f79fb 	.word	0x509f79fb
 801048c:	3fd34413 	.word	0x3fd34413
 8010490:	08015210 	.word	0x08015210
 8010494:	08015227 	.word	0x08015227
 8010498:	7ff00000 	.word	0x7ff00000
 801049c:	08015470 	.word	0x08015470
 80104a0:	3ff80000 	.word	0x3ff80000
 80104a4:	08015380 	.word	0x08015380
 80104a8:	0801527f 	.word	0x0801527f
 80104ac:	0801520c 	.word	0x0801520c
 80104b0:	0801546f 	.word	0x0801546f
 80104b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80104b8:	6018      	str	r0, [r3, #0]
 80104ba:	9b07      	ldr	r3, [sp, #28]
 80104bc:	2b0e      	cmp	r3, #14
 80104be:	f200 80a4 	bhi.w	801060a <_dtoa_r+0x442>
 80104c2:	2c00      	cmp	r4, #0
 80104c4:	f000 80a1 	beq.w	801060a <_dtoa_r+0x442>
 80104c8:	2f00      	cmp	r7, #0
 80104ca:	dd33      	ble.n	8010534 <_dtoa_r+0x36c>
 80104cc:	4bad      	ldr	r3, [pc, #692]	@ (8010784 <_dtoa_r+0x5bc>)
 80104ce:	f007 020f 	and.w	r2, r7, #15
 80104d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80104d6:	ed93 7b00 	vldr	d7, [r3]
 80104da:	05f8      	lsls	r0, r7, #23
 80104dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80104e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80104e4:	d516      	bpl.n	8010514 <_dtoa_r+0x34c>
 80104e6:	4ba8      	ldr	r3, [pc, #672]	@ (8010788 <_dtoa_r+0x5c0>)
 80104e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80104ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80104f0:	f7f0 f994 	bl	800081c <__aeabi_ddiv>
 80104f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80104f8:	f004 040f 	and.w	r4, r4, #15
 80104fc:	2603      	movs	r6, #3
 80104fe:	4da2      	ldr	r5, [pc, #648]	@ (8010788 <_dtoa_r+0x5c0>)
 8010500:	b954      	cbnz	r4, 8010518 <_dtoa_r+0x350>
 8010502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801050a:	f7f0 f987 	bl	800081c <__aeabi_ddiv>
 801050e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010512:	e028      	b.n	8010566 <_dtoa_r+0x39e>
 8010514:	2602      	movs	r6, #2
 8010516:	e7f2      	b.n	80104fe <_dtoa_r+0x336>
 8010518:	07e1      	lsls	r1, r4, #31
 801051a:	d508      	bpl.n	801052e <_dtoa_r+0x366>
 801051c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010520:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010524:	f7f0 f850 	bl	80005c8 <__aeabi_dmul>
 8010528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801052c:	3601      	adds	r6, #1
 801052e:	1064      	asrs	r4, r4, #1
 8010530:	3508      	adds	r5, #8
 8010532:	e7e5      	b.n	8010500 <_dtoa_r+0x338>
 8010534:	f000 80d2 	beq.w	80106dc <_dtoa_r+0x514>
 8010538:	427c      	negs	r4, r7
 801053a:	4b92      	ldr	r3, [pc, #584]	@ (8010784 <_dtoa_r+0x5bc>)
 801053c:	4d92      	ldr	r5, [pc, #584]	@ (8010788 <_dtoa_r+0x5c0>)
 801053e:	f004 020f 	and.w	r2, r4, #15
 8010542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801054e:	f7f0 f83b 	bl	80005c8 <__aeabi_dmul>
 8010552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010556:	1124      	asrs	r4, r4, #4
 8010558:	2300      	movs	r3, #0
 801055a:	2602      	movs	r6, #2
 801055c:	2c00      	cmp	r4, #0
 801055e:	f040 80b2 	bne.w	80106c6 <_dtoa_r+0x4fe>
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1d3      	bne.n	801050e <_dtoa_r+0x346>
 8010566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801056c:	2b00      	cmp	r3, #0
 801056e:	f000 80b7 	beq.w	80106e0 <_dtoa_r+0x518>
 8010572:	4b86      	ldr	r3, [pc, #536]	@ (801078c <_dtoa_r+0x5c4>)
 8010574:	2200      	movs	r2, #0
 8010576:	4620      	mov	r0, r4
 8010578:	4629      	mov	r1, r5
 801057a:	f7f0 fa97 	bl	8000aac <__aeabi_dcmplt>
 801057e:	2800      	cmp	r0, #0
 8010580:	f000 80ae 	beq.w	80106e0 <_dtoa_r+0x518>
 8010584:	9b07      	ldr	r3, [sp, #28]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80aa 	beq.w	80106e0 <_dtoa_r+0x518>
 801058c:	9b00      	ldr	r3, [sp, #0]
 801058e:	2b00      	cmp	r3, #0
 8010590:	dd37      	ble.n	8010602 <_dtoa_r+0x43a>
 8010592:	1e7b      	subs	r3, r7, #1
 8010594:	9304      	str	r3, [sp, #16]
 8010596:	4620      	mov	r0, r4
 8010598:	4b7d      	ldr	r3, [pc, #500]	@ (8010790 <_dtoa_r+0x5c8>)
 801059a:	2200      	movs	r2, #0
 801059c:	4629      	mov	r1, r5
 801059e:	f7f0 f813 	bl	80005c8 <__aeabi_dmul>
 80105a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80105a6:	9c00      	ldr	r4, [sp, #0]
 80105a8:	3601      	adds	r6, #1
 80105aa:	4630      	mov	r0, r6
 80105ac:	f7ef ffa2 	bl	80004f4 <__aeabi_i2d>
 80105b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80105b4:	f7f0 f808 	bl	80005c8 <__aeabi_dmul>
 80105b8:	4b76      	ldr	r3, [pc, #472]	@ (8010794 <_dtoa_r+0x5cc>)
 80105ba:	2200      	movs	r2, #0
 80105bc:	f7ef fe4e 	bl	800025c <__adddf3>
 80105c0:	4605      	mov	r5, r0
 80105c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80105c6:	2c00      	cmp	r4, #0
 80105c8:	f040 808d 	bne.w	80106e6 <_dtoa_r+0x51e>
 80105cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105d0:	4b71      	ldr	r3, [pc, #452]	@ (8010798 <_dtoa_r+0x5d0>)
 80105d2:	2200      	movs	r2, #0
 80105d4:	f7ef fe40 	bl	8000258 <__aeabi_dsub>
 80105d8:	4602      	mov	r2, r0
 80105da:	460b      	mov	r3, r1
 80105dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80105e0:	462a      	mov	r2, r5
 80105e2:	4633      	mov	r3, r6
 80105e4:	f7f0 fa80 	bl	8000ae8 <__aeabi_dcmpgt>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	f040 828b 	bne.w	8010b04 <_dtoa_r+0x93c>
 80105ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105f2:	462a      	mov	r2, r5
 80105f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80105f8:	f7f0 fa58 	bl	8000aac <__aeabi_dcmplt>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	f040 8128 	bne.w	8010852 <_dtoa_r+0x68a>
 8010602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801060a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801060c:	2b00      	cmp	r3, #0
 801060e:	f2c0 815a 	blt.w	80108c6 <_dtoa_r+0x6fe>
 8010612:	2f0e      	cmp	r7, #14
 8010614:	f300 8157 	bgt.w	80108c6 <_dtoa_r+0x6fe>
 8010618:	4b5a      	ldr	r3, [pc, #360]	@ (8010784 <_dtoa_r+0x5bc>)
 801061a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801061e:	ed93 7b00 	vldr	d7, [r3]
 8010622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010624:	2b00      	cmp	r3, #0
 8010626:	ed8d 7b00 	vstr	d7, [sp]
 801062a:	da03      	bge.n	8010634 <_dtoa_r+0x46c>
 801062c:	9b07      	ldr	r3, [sp, #28]
 801062e:	2b00      	cmp	r3, #0
 8010630:	f340 8101 	ble.w	8010836 <_dtoa_r+0x66e>
 8010634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010638:	4656      	mov	r6, sl
 801063a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801063e:	4620      	mov	r0, r4
 8010640:	4629      	mov	r1, r5
 8010642:	f7f0 f8eb 	bl	800081c <__aeabi_ddiv>
 8010646:	f7f0 fa6f 	bl	8000b28 <__aeabi_d2iz>
 801064a:	4680      	mov	r8, r0
 801064c:	f7ef ff52 	bl	80004f4 <__aeabi_i2d>
 8010650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010654:	f7ef ffb8 	bl	80005c8 <__aeabi_dmul>
 8010658:	4602      	mov	r2, r0
 801065a:	460b      	mov	r3, r1
 801065c:	4620      	mov	r0, r4
 801065e:	4629      	mov	r1, r5
 8010660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8010664:	f7ef fdf8 	bl	8000258 <__aeabi_dsub>
 8010668:	f806 4b01 	strb.w	r4, [r6], #1
 801066c:	9d07      	ldr	r5, [sp, #28]
 801066e:	eba6 040a 	sub.w	r4, r6, sl
 8010672:	42a5      	cmp	r5, r4
 8010674:	4602      	mov	r2, r0
 8010676:	460b      	mov	r3, r1
 8010678:	f040 8117 	bne.w	80108aa <_dtoa_r+0x6e2>
 801067c:	f7ef fdee 	bl	800025c <__adddf3>
 8010680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010684:	4604      	mov	r4, r0
 8010686:	460d      	mov	r5, r1
 8010688:	f7f0 fa2e 	bl	8000ae8 <__aeabi_dcmpgt>
 801068c:	2800      	cmp	r0, #0
 801068e:	f040 80f9 	bne.w	8010884 <_dtoa_r+0x6bc>
 8010692:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010696:	4620      	mov	r0, r4
 8010698:	4629      	mov	r1, r5
 801069a:	f7f0 f9fd 	bl	8000a98 <__aeabi_dcmpeq>
 801069e:	b118      	cbz	r0, 80106a8 <_dtoa_r+0x4e0>
 80106a0:	f018 0f01 	tst.w	r8, #1
 80106a4:	f040 80ee 	bne.w	8010884 <_dtoa_r+0x6bc>
 80106a8:	4649      	mov	r1, r9
 80106aa:	4658      	mov	r0, fp
 80106ac:	f000 ff26 	bl	80114fc <_Bfree>
 80106b0:	2300      	movs	r3, #0
 80106b2:	7033      	strb	r3, [r6, #0]
 80106b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80106b6:	3701      	adds	r7, #1
 80106b8:	601f      	str	r7, [r3, #0]
 80106ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f000 831d 	beq.w	8010cfc <_dtoa_r+0xb34>
 80106c2:	601e      	str	r6, [r3, #0]
 80106c4:	e31a      	b.n	8010cfc <_dtoa_r+0xb34>
 80106c6:	07e2      	lsls	r2, r4, #31
 80106c8:	d505      	bpl.n	80106d6 <_dtoa_r+0x50e>
 80106ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80106ce:	f7ef ff7b 	bl	80005c8 <__aeabi_dmul>
 80106d2:	3601      	adds	r6, #1
 80106d4:	2301      	movs	r3, #1
 80106d6:	1064      	asrs	r4, r4, #1
 80106d8:	3508      	adds	r5, #8
 80106da:	e73f      	b.n	801055c <_dtoa_r+0x394>
 80106dc:	2602      	movs	r6, #2
 80106de:	e742      	b.n	8010566 <_dtoa_r+0x39e>
 80106e0:	9c07      	ldr	r4, [sp, #28]
 80106e2:	9704      	str	r7, [sp, #16]
 80106e4:	e761      	b.n	80105aa <_dtoa_r+0x3e2>
 80106e6:	4b27      	ldr	r3, [pc, #156]	@ (8010784 <_dtoa_r+0x5bc>)
 80106e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80106ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80106f2:	4454      	add	r4, sl
 80106f4:	2900      	cmp	r1, #0
 80106f6:	d053      	beq.n	80107a0 <_dtoa_r+0x5d8>
 80106f8:	4928      	ldr	r1, [pc, #160]	@ (801079c <_dtoa_r+0x5d4>)
 80106fa:	2000      	movs	r0, #0
 80106fc:	f7f0 f88e 	bl	800081c <__aeabi_ddiv>
 8010700:	4633      	mov	r3, r6
 8010702:	462a      	mov	r2, r5
 8010704:	f7ef fda8 	bl	8000258 <__aeabi_dsub>
 8010708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801070c:	4656      	mov	r6, sl
 801070e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010712:	f7f0 fa09 	bl	8000b28 <__aeabi_d2iz>
 8010716:	4605      	mov	r5, r0
 8010718:	f7ef feec 	bl	80004f4 <__aeabi_i2d>
 801071c:	4602      	mov	r2, r0
 801071e:	460b      	mov	r3, r1
 8010720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010724:	f7ef fd98 	bl	8000258 <__aeabi_dsub>
 8010728:	3530      	adds	r5, #48	@ 0x30
 801072a:	4602      	mov	r2, r0
 801072c:	460b      	mov	r3, r1
 801072e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010732:	f806 5b01 	strb.w	r5, [r6], #1
 8010736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801073a:	f7f0 f9b7 	bl	8000aac <__aeabi_dcmplt>
 801073e:	2800      	cmp	r0, #0
 8010740:	d171      	bne.n	8010826 <_dtoa_r+0x65e>
 8010742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010746:	4911      	ldr	r1, [pc, #68]	@ (801078c <_dtoa_r+0x5c4>)
 8010748:	2000      	movs	r0, #0
 801074a:	f7ef fd85 	bl	8000258 <__aeabi_dsub>
 801074e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010752:	f7f0 f9ab 	bl	8000aac <__aeabi_dcmplt>
 8010756:	2800      	cmp	r0, #0
 8010758:	f040 8095 	bne.w	8010886 <_dtoa_r+0x6be>
 801075c:	42a6      	cmp	r6, r4
 801075e:	f43f af50 	beq.w	8010602 <_dtoa_r+0x43a>
 8010762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010766:	4b0a      	ldr	r3, [pc, #40]	@ (8010790 <_dtoa_r+0x5c8>)
 8010768:	2200      	movs	r2, #0
 801076a:	f7ef ff2d 	bl	80005c8 <__aeabi_dmul>
 801076e:	4b08      	ldr	r3, [pc, #32]	@ (8010790 <_dtoa_r+0x5c8>)
 8010770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010774:	2200      	movs	r2, #0
 8010776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801077a:	f7ef ff25 	bl	80005c8 <__aeabi_dmul>
 801077e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010782:	e7c4      	b.n	801070e <_dtoa_r+0x546>
 8010784:	08015380 	.word	0x08015380
 8010788:	08015358 	.word	0x08015358
 801078c:	3ff00000 	.word	0x3ff00000
 8010790:	40240000 	.word	0x40240000
 8010794:	401c0000 	.word	0x401c0000
 8010798:	40140000 	.word	0x40140000
 801079c:	3fe00000 	.word	0x3fe00000
 80107a0:	4631      	mov	r1, r6
 80107a2:	4628      	mov	r0, r5
 80107a4:	f7ef ff10 	bl	80005c8 <__aeabi_dmul>
 80107a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80107ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80107ae:	4656      	mov	r6, sl
 80107b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107b4:	f7f0 f9b8 	bl	8000b28 <__aeabi_d2iz>
 80107b8:	4605      	mov	r5, r0
 80107ba:	f7ef fe9b 	bl	80004f4 <__aeabi_i2d>
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
 80107c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107c6:	f7ef fd47 	bl	8000258 <__aeabi_dsub>
 80107ca:	3530      	adds	r5, #48	@ 0x30
 80107cc:	f806 5b01 	strb.w	r5, [r6], #1
 80107d0:	4602      	mov	r2, r0
 80107d2:	460b      	mov	r3, r1
 80107d4:	42a6      	cmp	r6, r4
 80107d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80107da:	f04f 0200 	mov.w	r2, #0
 80107de:	d124      	bne.n	801082a <_dtoa_r+0x662>
 80107e0:	4bac      	ldr	r3, [pc, #688]	@ (8010a94 <_dtoa_r+0x8cc>)
 80107e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80107e6:	f7ef fd39 	bl	800025c <__adddf3>
 80107ea:	4602      	mov	r2, r0
 80107ec:	460b      	mov	r3, r1
 80107ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80107f2:	f7f0 f979 	bl	8000ae8 <__aeabi_dcmpgt>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d145      	bne.n	8010886 <_dtoa_r+0x6be>
 80107fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80107fe:	49a5      	ldr	r1, [pc, #660]	@ (8010a94 <_dtoa_r+0x8cc>)
 8010800:	2000      	movs	r0, #0
 8010802:	f7ef fd29 	bl	8000258 <__aeabi_dsub>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801080e:	f7f0 f94d 	bl	8000aac <__aeabi_dcmplt>
 8010812:	2800      	cmp	r0, #0
 8010814:	f43f aef5 	beq.w	8010602 <_dtoa_r+0x43a>
 8010818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801081a:	1e73      	subs	r3, r6, #1
 801081c:	9315      	str	r3, [sp, #84]	@ 0x54
 801081e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010822:	2b30      	cmp	r3, #48	@ 0x30
 8010824:	d0f8      	beq.n	8010818 <_dtoa_r+0x650>
 8010826:	9f04      	ldr	r7, [sp, #16]
 8010828:	e73e      	b.n	80106a8 <_dtoa_r+0x4e0>
 801082a:	4b9b      	ldr	r3, [pc, #620]	@ (8010a98 <_dtoa_r+0x8d0>)
 801082c:	f7ef fecc 	bl	80005c8 <__aeabi_dmul>
 8010830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010834:	e7bc      	b.n	80107b0 <_dtoa_r+0x5e8>
 8010836:	d10c      	bne.n	8010852 <_dtoa_r+0x68a>
 8010838:	4b98      	ldr	r3, [pc, #608]	@ (8010a9c <_dtoa_r+0x8d4>)
 801083a:	2200      	movs	r2, #0
 801083c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010840:	f7ef fec2 	bl	80005c8 <__aeabi_dmul>
 8010844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010848:	f7f0 f944 	bl	8000ad4 <__aeabi_dcmpge>
 801084c:	2800      	cmp	r0, #0
 801084e:	f000 8157 	beq.w	8010b00 <_dtoa_r+0x938>
 8010852:	2400      	movs	r4, #0
 8010854:	4625      	mov	r5, r4
 8010856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010858:	43db      	mvns	r3, r3
 801085a:	9304      	str	r3, [sp, #16]
 801085c:	4656      	mov	r6, sl
 801085e:	2700      	movs	r7, #0
 8010860:	4621      	mov	r1, r4
 8010862:	4658      	mov	r0, fp
 8010864:	f000 fe4a 	bl	80114fc <_Bfree>
 8010868:	2d00      	cmp	r5, #0
 801086a:	d0dc      	beq.n	8010826 <_dtoa_r+0x65e>
 801086c:	b12f      	cbz	r7, 801087a <_dtoa_r+0x6b2>
 801086e:	42af      	cmp	r7, r5
 8010870:	d003      	beq.n	801087a <_dtoa_r+0x6b2>
 8010872:	4639      	mov	r1, r7
 8010874:	4658      	mov	r0, fp
 8010876:	f000 fe41 	bl	80114fc <_Bfree>
 801087a:	4629      	mov	r1, r5
 801087c:	4658      	mov	r0, fp
 801087e:	f000 fe3d 	bl	80114fc <_Bfree>
 8010882:	e7d0      	b.n	8010826 <_dtoa_r+0x65e>
 8010884:	9704      	str	r7, [sp, #16]
 8010886:	4633      	mov	r3, r6
 8010888:	461e      	mov	r6, r3
 801088a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801088e:	2a39      	cmp	r2, #57	@ 0x39
 8010890:	d107      	bne.n	80108a2 <_dtoa_r+0x6da>
 8010892:	459a      	cmp	sl, r3
 8010894:	d1f8      	bne.n	8010888 <_dtoa_r+0x6c0>
 8010896:	9a04      	ldr	r2, [sp, #16]
 8010898:	3201      	adds	r2, #1
 801089a:	9204      	str	r2, [sp, #16]
 801089c:	2230      	movs	r2, #48	@ 0x30
 801089e:	f88a 2000 	strb.w	r2, [sl]
 80108a2:	781a      	ldrb	r2, [r3, #0]
 80108a4:	3201      	adds	r2, #1
 80108a6:	701a      	strb	r2, [r3, #0]
 80108a8:	e7bd      	b.n	8010826 <_dtoa_r+0x65e>
 80108aa:	4b7b      	ldr	r3, [pc, #492]	@ (8010a98 <_dtoa_r+0x8d0>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	f7ef fe8b 	bl	80005c8 <__aeabi_dmul>
 80108b2:	2200      	movs	r2, #0
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	f7f0 f8ed 	bl	8000a98 <__aeabi_dcmpeq>
 80108be:	2800      	cmp	r0, #0
 80108c0:	f43f aebb 	beq.w	801063a <_dtoa_r+0x472>
 80108c4:	e6f0      	b.n	80106a8 <_dtoa_r+0x4e0>
 80108c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108c8:	2a00      	cmp	r2, #0
 80108ca:	f000 80db 	beq.w	8010a84 <_dtoa_r+0x8bc>
 80108ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108d0:	2a01      	cmp	r2, #1
 80108d2:	f300 80bf 	bgt.w	8010a54 <_dtoa_r+0x88c>
 80108d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80108d8:	2a00      	cmp	r2, #0
 80108da:	f000 80b7 	beq.w	8010a4c <_dtoa_r+0x884>
 80108de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80108e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80108e4:	4646      	mov	r6, r8
 80108e6:	9a08      	ldr	r2, [sp, #32]
 80108e8:	2101      	movs	r1, #1
 80108ea:	441a      	add	r2, r3
 80108ec:	4658      	mov	r0, fp
 80108ee:	4498      	add	r8, r3
 80108f0:	9208      	str	r2, [sp, #32]
 80108f2:	f000 ff01 	bl	80116f8 <__i2b>
 80108f6:	4605      	mov	r5, r0
 80108f8:	b15e      	cbz	r6, 8010912 <_dtoa_r+0x74a>
 80108fa:	9b08      	ldr	r3, [sp, #32]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	dd08      	ble.n	8010912 <_dtoa_r+0x74a>
 8010900:	42b3      	cmp	r3, r6
 8010902:	9a08      	ldr	r2, [sp, #32]
 8010904:	bfa8      	it	ge
 8010906:	4633      	movge	r3, r6
 8010908:	eba8 0803 	sub.w	r8, r8, r3
 801090c:	1af6      	subs	r6, r6, r3
 801090e:	1ad3      	subs	r3, r2, r3
 8010910:	9308      	str	r3, [sp, #32]
 8010912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010914:	b1f3      	cbz	r3, 8010954 <_dtoa_r+0x78c>
 8010916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010918:	2b00      	cmp	r3, #0
 801091a:	f000 80b7 	beq.w	8010a8c <_dtoa_r+0x8c4>
 801091e:	b18c      	cbz	r4, 8010944 <_dtoa_r+0x77c>
 8010920:	4629      	mov	r1, r5
 8010922:	4622      	mov	r2, r4
 8010924:	4658      	mov	r0, fp
 8010926:	f000 ffa7 	bl	8011878 <__pow5mult>
 801092a:	464a      	mov	r2, r9
 801092c:	4601      	mov	r1, r0
 801092e:	4605      	mov	r5, r0
 8010930:	4658      	mov	r0, fp
 8010932:	f000 fef7 	bl	8011724 <__multiply>
 8010936:	4649      	mov	r1, r9
 8010938:	9004      	str	r0, [sp, #16]
 801093a:	4658      	mov	r0, fp
 801093c:	f000 fdde 	bl	80114fc <_Bfree>
 8010940:	9b04      	ldr	r3, [sp, #16]
 8010942:	4699      	mov	r9, r3
 8010944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010946:	1b1a      	subs	r2, r3, r4
 8010948:	d004      	beq.n	8010954 <_dtoa_r+0x78c>
 801094a:	4649      	mov	r1, r9
 801094c:	4658      	mov	r0, fp
 801094e:	f000 ff93 	bl	8011878 <__pow5mult>
 8010952:	4681      	mov	r9, r0
 8010954:	2101      	movs	r1, #1
 8010956:	4658      	mov	r0, fp
 8010958:	f000 fece 	bl	80116f8 <__i2b>
 801095c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801095e:	4604      	mov	r4, r0
 8010960:	2b00      	cmp	r3, #0
 8010962:	f000 81cf 	beq.w	8010d04 <_dtoa_r+0xb3c>
 8010966:	461a      	mov	r2, r3
 8010968:	4601      	mov	r1, r0
 801096a:	4658      	mov	r0, fp
 801096c:	f000 ff84 	bl	8011878 <__pow5mult>
 8010970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010972:	2b01      	cmp	r3, #1
 8010974:	4604      	mov	r4, r0
 8010976:	f300 8095 	bgt.w	8010aa4 <_dtoa_r+0x8dc>
 801097a:	9b02      	ldr	r3, [sp, #8]
 801097c:	2b00      	cmp	r3, #0
 801097e:	f040 8087 	bne.w	8010a90 <_dtoa_r+0x8c8>
 8010982:	9b03      	ldr	r3, [sp, #12]
 8010984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010988:	2b00      	cmp	r3, #0
 801098a:	f040 8089 	bne.w	8010aa0 <_dtoa_r+0x8d8>
 801098e:	9b03      	ldr	r3, [sp, #12]
 8010990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010994:	0d1b      	lsrs	r3, r3, #20
 8010996:	051b      	lsls	r3, r3, #20
 8010998:	b12b      	cbz	r3, 80109a6 <_dtoa_r+0x7de>
 801099a:	9b08      	ldr	r3, [sp, #32]
 801099c:	3301      	adds	r3, #1
 801099e:	9308      	str	r3, [sp, #32]
 80109a0:	f108 0801 	add.w	r8, r8, #1
 80109a4:	2301      	movs	r3, #1
 80109a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80109a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f000 81b0 	beq.w	8010d10 <_dtoa_r+0xb48>
 80109b0:	6923      	ldr	r3, [r4, #16]
 80109b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80109b6:	6918      	ldr	r0, [r3, #16]
 80109b8:	f000 fe52 	bl	8011660 <__hi0bits>
 80109bc:	f1c0 0020 	rsb	r0, r0, #32
 80109c0:	9b08      	ldr	r3, [sp, #32]
 80109c2:	4418      	add	r0, r3
 80109c4:	f010 001f 	ands.w	r0, r0, #31
 80109c8:	d077      	beq.n	8010aba <_dtoa_r+0x8f2>
 80109ca:	f1c0 0320 	rsb	r3, r0, #32
 80109ce:	2b04      	cmp	r3, #4
 80109d0:	dd6b      	ble.n	8010aaa <_dtoa_r+0x8e2>
 80109d2:	9b08      	ldr	r3, [sp, #32]
 80109d4:	f1c0 001c 	rsb	r0, r0, #28
 80109d8:	4403      	add	r3, r0
 80109da:	4480      	add	r8, r0
 80109dc:	4406      	add	r6, r0
 80109de:	9308      	str	r3, [sp, #32]
 80109e0:	f1b8 0f00 	cmp.w	r8, #0
 80109e4:	dd05      	ble.n	80109f2 <_dtoa_r+0x82a>
 80109e6:	4649      	mov	r1, r9
 80109e8:	4642      	mov	r2, r8
 80109ea:	4658      	mov	r0, fp
 80109ec:	f000 ff9e 	bl	801192c <__lshift>
 80109f0:	4681      	mov	r9, r0
 80109f2:	9b08      	ldr	r3, [sp, #32]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dd05      	ble.n	8010a04 <_dtoa_r+0x83c>
 80109f8:	4621      	mov	r1, r4
 80109fa:	461a      	mov	r2, r3
 80109fc:	4658      	mov	r0, fp
 80109fe:	f000 ff95 	bl	801192c <__lshift>
 8010a02:	4604      	mov	r4, r0
 8010a04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d059      	beq.n	8010abe <_dtoa_r+0x8f6>
 8010a0a:	4621      	mov	r1, r4
 8010a0c:	4648      	mov	r0, r9
 8010a0e:	f000 fff9 	bl	8011a04 <__mcmp>
 8010a12:	2800      	cmp	r0, #0
 8010a14:	da53      	bge.n	8010abe <_dtoa_r+0x8f6>
 8010a16:	1e7b      	subs	r3, r7, #1
 8010a18:	9304      	str	r3, [sp, #16]
 8010a1a:	4649      	mov	r1, r9
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	220a      	movs	r2, #10
 8010a20:	4658      	mov	r0, fp
 8010a22:	f000 fd8d 	bl	8011540 <__multadd>
 8010a26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010a28:	4681      	mov	r9, r0
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	f000 8172 	beq.w	8010d14 <_dtoa_r+0xb4c>
 8010a30:	2300      	movs	r3, #0
 8010a32:	4629      	mov	r1, r5
 8010a34:	220a      	movs	r2, #10
 8010a36:	4658      	mov	r0, fp
 8010a38:	f000 fd82 	bl	8011540 <__multadd>
 8010a3c:	9b00      	ldr	r3, [sp, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	4605      	mov	r5, r0
 8010a42:	dc67      	bgt.n	8010b14 <_dtoa_r+0x94c>
 8010a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	dc41      	bgt.n	8010ace <_dtoa_r+0x906>
 8010a4a:	e063      	b.n	8010b14 <_dtoa_r+0x94c>
 8010a4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010a4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010a52:	e746      	b.n	80108e2 <_dtoa_r+0x71a>
 8010a54:	9b07      	ldr	r3, [sp, #28]
 8010a56:	1e5c      	subs	r4, r3, #1
 8010a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a5a:	42a3      	cmp	r3, r4
 8010a5c:	bfbf      	itttt	lt
 8010a5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010a60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010a62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010a64:	1ae3      	sublt	r3, r4, r3
 8010a66:	bfb4      	ite	lt
 8010a68:	18d2      	addlt	r2, r2, r3
 8010a6a:	1b1c      	subge	r4, r3, r4
 8010a6c:	9b07      	ldr	r3, [sp, #28]
 8010a6e:	bfbc      	itt	lt
 8010a70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010a72:	2400      	movlt	r4, #0
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	bfb5      	itete	lt
 8010a78:	eba8 0603 	sublt.w	r6, r8, r3
 8010a7c:	9b07      	ldrge	r3, [sp, #28]
 8010a7e:	2300      	movlt	r3, #0
 8010a80:	4646      	movge	r6, r8
 8010a82:	e730      	b.n	80108e6 <_dtoa_r+0x71e>
 8010a84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010a86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010a88:	4646      	mov	r6, r8
 8010a8a:	e735      	b.n	80108f8 <_dtoa_r+0x730>
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a8e:	e75c      	b.n	801094a <_dtoa_r+0x782>
 8010a90:	2300      	movs	r3, #0
 8010a92:	e788      	b.n	80109a6 <_dtoa_r+0x7de>
 8010a94:	3fe00000 	.word	0x3fe00000
 8010a98:	40240000 	.word	0x40240000
 8010a9c:	40140000 	.word	0x40140000
 8010aa0:	9b02      	ldr	r3, [sp, #8]
 8010aa2:	e780      	b.n	80109a6 <_dtoa_r+0x7de>
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010aa8:	e782      	b.n	80109b0 <_dtoa_r+0x7e8>
 8010aaa:	d099      	beq.n	80109e0 <_dtoa_r+0x818>
 8010aac:	9a08      	ldr	r2, [sp, #32]
 8010aae:	331c      	adds	r3, #28
 8010ab0:	441a      	add	r2, r3
 8010ab2:	4498      	add	r8, r3
 8010ab4:	441e      	add	r6, r3
 8010ab6:	9208      	str	r2, [sp, #32]
 8010ab8:	e792      	b.n	80109e0 <_dtoa_r+0x818>
 8010aba:	4603      	mov	r3, r0
 8010abc:	e7f6      	b.n	8010aac <_dtoa_r+0x8e4>
 8010abe:	9b07      	ldr	r3, [sp, #28]
 8010ac0:	9704      	str	r7, [sp, #16]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	dc20      	bgt.n	8010b08 <_dtoa_r+0x940>
 8010ac6:	9300      	str	r3, [sp, #0]
 8010ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010aca:	2b02      	cmp	r3, #2
 8010acc:	dd1e      	ble.n	8010b0c <_dtoa_r+0x944>
 8010ace:	9b00      	ldr	r3, [sp, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f47f aec0 	bne.w	8010856 <_dtoa_r+0x68e>
 8010ad6:	4621      	mov	r1, r4
 8010ad8:	2205      	movs	r2, #5
 8010ada:	4658      	mov	r0, fp
 8010adc:	f000 fd30 	bl	8011540 <__multadd>
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4604      	mov	r4, r0
 8010ae4:	4648      	mov	r0, r9
 8010ae6:	f000 ff8d 	bl	8011a04 <__mcmp>
 8010aea:	2800      	cmp	r0, #0
 8010aec:	f77f aeb3 	ble.w	8010856 <_dtoa_r+0x68e>
 8010af0:	4656      	mov	r6, sl
 8010af2:	2331      	movs	r3, #49	@ 0x31
 8010af4:	f806 3b01 	strb.w	r3, [r6], #1
 8010af8:	9b04      	ldr	r3, [sp, #16]
 8010afa:	3301      	adds	r3, #1
 8010afc:	9304      	str	r3, [sp, #16]
 8010afe:	e6ae      	b.n	801085e <_dtoa_r+0x696>
 8010b00:	9c07      	ldr	r4, [sp, #28]
 8010b02:	9704      	str	r7, [sp, #16]
 8010b04:	4625      	mov	r5, r4
 8010b06:	e7f3      	b.n	8010af0 <_dtoa_r+0x928>
 8010b08:	9b07      	ldr	r3, [sp, #28]
 8010b0a:	9300      	str	r3, [sp, #0]
 8010b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 8104 	beq.w	8010d1c <_dtoa_r+0xb54>
 8010b14:	2e00      	cmp	r6, #0
 8010b16:	dd05      	ble.n	8010b24 <_dtoa_r+0x95c>
 8010b18:	4629      	mov	r1, r5
 8010b1a:	4632      	mov	r2, r6
 8010b1c:	4658      	mov	r0, fp
 8010b1e:	f000 ff05 	bl	801192c <__lshift>
 8010b22:	4605      	mov	r5, r0
 8010b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d05a      	beq.n	8010be0 <_dtoa_r+0xa18>
 8010b2a:	6869      	ldr	r1, [r5, #4]
 8010b2c:	4658      	mov	r0, fp
 8010b2e:	f000 fca5 	bl	801147c <_Balloc>
 8010b32:	4606      	mov	r6, r0
 8010b34:	b928      	cbnz	r0, 8010b42 <_dtoa_r+0x97a>
 8010b36:	4b84      	ldr	r3, [pc, #528]	@ (8010d48 <_dtoa_r+0xb80>)
 8010b38:	4602      	mov	r2, r0
 8010b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010b3e:	f7ff bb5a 	b.w	80101f6 <_dtoa_r+0x2e>
 8010b42:	692a      	ldr	r2, [r5, #16]
 8010b44:	3202      	adds	r2, #2
 8010b46:	0092      	lsls	r2, r2, #2
 8010b48:	f105 010c 	add.w	r1, r5, #12
 8010b4c:	300c      	adds	r0, #12
 8010b4e:	f7ff fa9a 	bl	8010086 <memcpy>
 8010b52:	2201      	movs	r2, #1
 8010b54:	4631      	mov	r1, r6
 8010b56:	4658      	mov	r0, fp
 8010b58:	f000 fee8 	bl	801192c <__lshift>
 8010b5c:	f10a 0301 	add.w	r3, sl, #1
 8010b60:	9307      	str	r3, [sp, #28]
 8010b62:	9b00      	ldr	r3, [sp, #0]
 8010b64:	4453      	add	r3, sl
 8010b66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b68:	9b02      	ldr	r3, [sp, #8]
 8010b6a:	f003 0301 	and.w	r3, r3, #1
 8010b6e:	462f      	mov	r7, r5
 8010b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b72:	4605      	mov	r5, r0
 8010b74:	9b07      	ldr	r3, [sp, #28]
 8010b76:	4621      	mov	r1, r4
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	4648      	mov	r0, r9
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	f7ff fa9b 	bl	80100b8 <quorem>
 8010b82:	4639      	mov	r1, r7
 8010b84:	9002      	str	r0, [sp, #8]
 8010b86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010b8a:	4648      	mov	r0, r9
 8010b8c:	f000 ff3a 	bl	8011a04 <__mcmp>
 8010b90:	462a      	mov	r2, r5
 8010b92:	9008      	str	r0, [sp, #32]
 8010b94:	4621      	mov	r1, r4
 8010b96:	4658      	mov	r0, fp
 8010b98:	f000 ff50 	bl	8011a3c <__mdiff>
 8010b9c:	68c2      	ldr	r2, [r0, #12]
 8010b9e:	4606      	mov	r6, r0
 8010ba0:	bb02      	cbnz	r2, 8010be4 <_dtoa_r+0xa1c>
 8010ba2:	4601      	mov	r1, r0
 8010ba4:	4648      	mov	r0, r9
 8010ba6:	f000 ff2d 	bl	8011a04 <__mcmp>
 8010baa:	4602      	mov	r2, r0
 8010bac:	4631      	mov	r1, r6
 8010bae:	4658      	mov	r0, fp
 8010bb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8010bb2:	f000 fca3 	bl	80114fc <_Bfree>
 8010bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010bb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010bba:	9e07      	ldr	r6, [sp, #28]
 8010bbc:	ea43 0102 	orr.w	r1, r3, r2
 8010bc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010bc2:	4319      	orrs	r1, r3
 8010bc4:	d110      	bne.n	8010be8 <_dtoa_r+0xa20>
 8010bc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010bca:	d029      	beq.n	8010c20 <_dtoa_r+0xa58>
 8010bcc:	9b08      	ldr	r3, [sp, #32]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	dd02      	ble.n	8010bd8 <_dtoa_r+0xa10>
 8010bd2:	9b02      	ldr	r3, [sp, #8]
 8010bd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010bd8:	9b00      	ldr	r3, [sp, #0]
 8010bda:	f883 8000 	strb.w	r8, [r3]
 8010bde:	e63f      	b.n	8010860 <_dtoa_r+0x698>
 8010be0:	4628      	mov	r0, r5
 8010be2:	e7bb      	b.n	8010b5c <_dtoa_r+0x994>
 8010be4:	2201      	movs	r2, #1
 8010be6:	e7e1      	b.n	8010bac <_dtoa_r+0x9e4>
 8010be8:	9b08      	ldr	r3, [sp, #32]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	db04      	blt.n	8010bf8 <_dtoa_r+0xa30>
 8010bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010bf0:	430b      	orrs	r3, r1
 8010bf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010bf4:	430b      	orrs	r3, r1
 8010bf6:	d120      	bne.n	8010c3a <_dtoa_r+0xa72>
 8010bf8:	2a00      	cmp	r2, #0
 8010bfa:	dded      	ble.n	8010bd8 <_dtoa_r+0xa10>
 8010bfc:	4649      	mov	r1, r9
 8010bfe:	2201      	movs	r2, #1
 8010c00:	4658      	mov	r0, fp
 8010c02:	f000 fe93 	bl	801192c <__lshift>
 8010c06:	4621      	mov	r1, r4
 8010c08:	4681      	mov	r9, r0
 8010c0a:	f000 fefb 	bl	8011a04 <__mcmp>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	dc03      	bgt.n	8010c1a <_dtoa_r+0xa52>
 8010c12:	d1e1      	bne.n	8010bd8 <_dtoa_r+0xa10>
 8010c14:	f018 0f01 	tst.w	r8, #1
 8010c18:	d0de      	beq.n	8010bd8 <_dtoa_r+0xa10>
 8010c1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c1e:	d1d8      	bne.n	8010bd2 <_dtoa_r+0xa0a>
 8010c20:	9a00      	ldr	r2, [sp, #0]
 8010c22:	2339      	movs	r3, #57	@ 0x39
 8010c24:	7013      	strb	r3, [r2, #0]
 8010c26:	4633      	mov	r3, r6
 8010c28:	461e      	mov	r6, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010c30:	2a39      	cmp	r2, #57	@ 0x39
 8010c32:	d052      	beq.n	8010cda <_dtoa_r+0xb12>
 8010c34:	3201      	adds	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
 8010c38:	e612      	b.n	8010860 <_dtoa_r+0x698>
 8010c3a:	2a00      	cmp	r2, #0
 8010c3c:	dd07      	ble.n	8010c4e <_dtoa_r+0xa86>
 8010c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010c42:	d0ed      	beq.n	8010c20 <_dtoa_r+0xa58>
 8010c44:	9a00      	ldr	r2, [sp, #0]
 8010c46:	f108 0301 	add.w	r3, r8, #1
 8010c4a:	7013      	strb	r3, [r2, #0]
 8010c4c:	e608      	b.n	8010860 <_dtoa_r+0x698>
 8010c4e:	9b07      	ldr	r3, [sp, #28]
 8010c50:	9a07      	ldr	r2, [sp, #28]
 8010c52:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010c56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c58:	4293      	cmp	r3, r2
 8010c5a:	d028      	beq.n	8010cae <_dtoa_r+0xae6>
 8010c5c:	4649      	mov	r1, r9
 8010c5e:	2300      	movs	r3, #0
 8010c60:	220a      	movs	r2, #10
 8010c62:	4658      	mov	r0, fp
 8010c64:	f000 fc6c 	bl	8011540 <__multadd>
 8010c68:	42af      	cmp	r7, r5
 8010c6a:	4681      	mov	r9, r0
 8010c6c:	f04f 0300 	mov.w	r3, #0
 8010c70:	f04f 020a 	mov.w	r2, #10
 8010c74:	4639      	mov	r1, r7
 8010c76:	4658      	mov	r0, fp
 8010c78:	d107      	bne.n	8010c8a <_dtoa_r+0xac2>
 8010c7a:	f000 fc61 	bl	8011540 <__multadd>
 8010c7e:	4607      	mov	r7, r0
 8010c80:	4605      	mov	r5, r0
 8010c82:	9b07      	ldr	r3, [sp, #28]
 8010c84:	3301      	adds	r3, #1
 8010c86:	9307      	str	r3, [sp, #28]
 8010c88:	e774      	b.n	8010b74 <_dtoa_r+0x9ac>
 8010c8a:	f000 fc59 	bl	8011540 <__multadd>
 8010c8e:	4629      	mov	r1, r5
 8010c90:	4607      	mov	r7, r0
 8010c92:	2300      	movs	r3, #0
 8010c94:	220a      	movs	r2, #10
 8010c96:	4658      	mov	r0, fp
 8010c98:	f000 fc52 	bl	8011540 <__multadd>
 8010c9c:	4605      	mov	r5, r0
 8010c9e:	e7f0      	b.n	8010c82 <_dtoa_r+0xaba>
 8010ca0:	9b00      	ldr	r3, [sp, #0]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	bfcc      	ite	gt
 8010ca6:	461e      	movgt	r6, r3
 8010ca8:	2601      	movle	r6, #1
 8010caa:	4456      	add	r6, sl
 8010cac:	2700      	movs	r7, #0
 8010cae:	4649      	mov	r1, r9
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	4658      	mov	r0, fp
 8010cb4:	f000 fe3a 	bl	801192c <__lshift>
 8010cb8:	4621      	mov	r1, r4
 8010cba:	4681      	mov	r9, r0
 8010cbc:	f000 fea2 	bl	8011a04 <__mcmp>
 8010cc0:	2800      	cmp	r0, #0
 8010cc2:	dcb0      	bgt.n	8010c26 <_dtoa_r+0xa5e>
 8010cc4:	d102      	bne.n	8010ccc <_dtoa_r+0xb04>
 8010cc6:	f018 0f01 	tst.w	r8, #1
 8010cca:	d1ac      	bne.n	8010c26 <_dtoa_r+0xa5e>
 8010ccc:	4633      	mov	r3, r6
 8010cce:	461e      	mov	r6, r3
 8010cd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010cd4:	2a30      	cmp	r2, #48	@ 0x30
 8010cd6:	d0fa      	beq.n	8010cce <_dtoa_r+0xb06>
 8010cd8:	e5c2      	b.n	8010860 <_dtoa_r+0x698>
 8010cda:	459a      	cmp	sl, r3
 8010cdc:	d1a4      	bne.n	8010c28 <_dtoa_r+0xa60>
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	9304      	str	r3, [sp, #16]
 8010ce4:	2331      	movs	r3, #49	@ 0x31
 8010ce6:	f88a 3000 	strb.w	r3, [sl]
 8010cea:	e5b9      	b.n	8010860 <_dtoa_r+0x698>
 8010cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010cee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010d4c <_dtoa_r+0xb84>
 8010cf2:	b11b      	cbz	r3, 8010cfc <_dtoa_r+0xb34>
 8010cf4:	f10a 0308 	add.w	r3, sl, #8
 8010cf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010cfa:	6013      	str	r3, [r2, #0]
 8010cfc:	4650      	mov	r0, sl
 8010cfe:	b019      	add	sp, #100	@ 0x64
 8010d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	f77f ae37 	ble.w	801097a <_dtoa_r+0x7b2>
 8010d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010d10:	2001      	movs	r0, #1
 8010d12:	e655      	b.n	80109c0 <_dtoa_r+0x7f8>
 8010d14:	9b00      	ldr	r3, [sp, #0]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f77f aed6 	ble.w	8010ac8 <_dtoa_r+0x900>
 8010d1c:	4656      	mov	r6, sl
 8010d1e:	4621      	mov	r1, r4
 8010d20:	4648      	mov	r0, r9
 8010d22:	f7ff f9c9 	bl	80100b8 <quorem>
 8010d26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010d2a:	f806 8b01 	strb.w	r8, [r6], #1
 8010d2e:	9b00      	ldr	r3, [sp, #0]
 8010d30:	eba6 020a 	sub.w	r2, r6, sl
 8010d34:	4293      	cmp	r3, r2
 8010d36:	ddb3      	ble.n	8010ca0 <_dtoa_r+0xad8>
 8010d38:	4649      	mov	r1, r9
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	220a      	movs	r2, #10
 8010d3e:	4658      	mov	r0, fp
 8010d40:	f000 fbfe 	bl	8011540 <__multadd>
 8010d44:	4681      	mov	r9, r0
 8010d46:	e7ea      	b.n	8010d1e <_dtoa_r+0xb56>
 8010d48:	0801527f 	.word	0x0801527f
 8010d4c:	08015203 	.word	0x08015203

08010d50 <_free_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4605      	mov	r5, r0
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d041      	beq.n	8010ddc <_free_r+0x8c>
 8010d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d5c:	1f0c      	subs	r4, r1, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bfb8      	it	lt
 8010d62:	18e4      	addlt	r4, r4, r3
 8010d64:	f7fd fbba 	bl	800e4dc <__malloc_lock>
 8010d68:	4a1d      	ldr	r2, [pc, #116]	@ (8010de0 <_free_r+0x90>)
 8010d6a:	6813      	ldr	r3, [r2, #0]
 8010d6c:	b933      	cbnz	r3, 8010d7c <_free_r+0x2c>
 8010d6e:	6063      	str	r3, [r4, #4]
 8010d70:	6014      	str	r4, [r2, #0]
 8010d72:	4628      	mov	r0, r5
 8010d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d78:	f7fd bbb6 	b.w	800e4e8 <__malloc_unlock>
 8010d7c:	42a3      	cmp	r3, r4
 8010d7e:	d908      	bls.n	8010d92 <_free_r+0x42>
 8010d80:	6820      	ldr	r0, [r4, #0]
 8010d82:	1821      	adds	r1, r4, r0
 8010d84:	428b      	cmp	r3, r1
 8010d86:	bf01      	itttt	eq
 8010d88:	6819      	ldreq	r1, [r3, #0]
 8010d8a:	685b      	ldreq	r3, [r3, #4]
 8010d8c:	1809      	addeq	r1, r1, r0
 8010d8e:	6021      	streq	r1, [r4, #0]
 8010d90:	e7ed      	b.n	8010d6e <_free_r+0x1e>
 8010d92:	461a      	mov	r2, r3
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	b10b      	cbz	r3, 8010d9c <_free_r+0x4c>
 8010d98:	42a3      	cmp	r3, r4
 8010d9a:	d9fa      	bls.n	8010d92 <_free_r+0x42>
 8010d9c:	6811      	ldr	r1, [r2, #0]
 8010d9e:	1850      	adds	r0, r2, r1
 8010da0:	42a0      	cmp	r0, r4
 8010da2:	d10b      	bne.n	8010dbc <_free_r+0x6c>
 8010da4:	6820      	ldr	r0, [r4, #0]
 8010da6:	4401      	add	r1, r0
 8010da8:	1850      	adds	r0, r2, r1
 8010daa:	4283      	cmp	r3, r0
 8010dac:	6011      	str	r1, [r2, #0]
 8010dae:	d1e0      	bne.n	8010d72 <_free_r+0x22>
 8010db0:	6818      	ldr	r0, [r3, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	6053      	str	r3, [r2, #4]
 8010db6:	4408      	add	r0, r1
 8010db8:	6010      	str	r0, [r2, #0]
 8010dba:	e7da      	b.n	8010d72 <_free_r+0x22>
 8010dbc:	d902      	bls.n	8010dc4 <_free_r+0x74>
 8010dbe:	230c      	movs	r3, #12
 8010dc0:	602b      	str	r3, [r5, #0]
 8010dc2:	e7d6      	b.n	8010d72 <_free_r+0x22>
 8010dc4:	6820      	ldr	r0, [r4, #0]
 8010dc6:	1821      	adds	r1, r4, r0
 8010dc8:	428b      	cmp	r3, r1
 8010dca:	bf04      	itt	eq
 8010dcc:	6819      	ldreq	r1, [r3, #0]
 8010dce:	685b      	ldreq	r3, [r3, #4]
 8010dd0:	6063      	str	r3, [r4, #4]
 8010dd2:	bf04      	itt	eq
 8010dd4:	1809      	addeq	r1, r1, r0
 8010dd6:	6021      	streq	r1, [r4, #0]
 8010dd8:	6054      	str	r4, [r2, #4]
 8010dda:	e7ca      	b.n	8010d72 <_free_r+0x22>
 8010ddc:	bd38      	pop	{r3, r4, r5, pc}
 8010dde:	bf00      	nop
 8010de0:	20000884 	.word	0x20000884

08010de4 <rshift>:
 8010de4:	6903      	ldr	r3, [r0, #16]
 8010de6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010dea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010dee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010df2:	f100 0414 	add.w	r4, r0, #20
 8010df6:	dd45      	ble.n	8010e84 <rshift+0xa0>
 8010df8:	f011 011f 	ands.w	r1, r1, #31
 8010dfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010e00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010e04:	d10c      	bne.n	8010e20 <rshift+0x3c>
 8010e06:	f100 0710 	add.w	r7, r0, #16
 8010e0a:	4629      	mov	r1, r5
 8010e0c:	42b1      	cmp	r1, r6
 8010e0e:	d334      	bcc.n	8010e7a <rshift+0x96>
 8010e10:	1a9b      	subs	r3, r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	1eea      	subs	r2, r5, #3
 8010e16:	4296      	cmp	r6, r2
 8010e18:	bf38      	it	cc
 8010e1a:	2300      	movcc	r3, #0
 8010e1c:	4423      	add	r3, r4
 8010e1e:	e015      	b.n	8010e4c <rshift+0x68>
 8010e20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010e24:	f1c1 0820 	rsb	r8, r1, #32
 8010e28:	40cf      	lsrs	r7, r1
 8010e2a:	f105 0e04 	add.w	lr, r5, #4
 8010e2e:	46a1      	mov	r9, r4
 8010e30:	4576      	cmp	r6, lr
 8010e32:	46f4      	mov	ip, lr
 8010e34:	d815      	bhi.n	8010e62 <rshift+0x7e>
 8010e36:	1a9a      	subs	r2, r3, r2
 8010e38:	0092      	lsls	r2, r2, #2
 8010e3a:	3a04      	subs	r2, #4
 8010e3c:	3501      	adds	r5, #1
 8010e3e:	42ae      	cmp	r6, r5
 8010e40:	bf38      	it	cc
 8010e42:	2200      	movcc	r2, #0
 8010e44:	18a3      	adds	r3, r4, r2
 8010e46:	50a7      	str	r7, [r4, r2]
 8010e48:	b107      	cbz	r7, 8010e4c <rshift+0x68>
 8010e4a:	3304      	adds	r3, #4
 8010e4c:	1b1a      	subs	r2, r3, r4
 8010e4e:	42a3      	cmp	r3, r4
 8010e50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010e54:	bf08      	it	eq
 8010e56:	2300      	moveq	r3, #0
 8010e58:	6102      	str	r2, [r0, #16]
 8010e5a:	bf08      	it	eq
 8010e5c:	6143      	streq	r3, [r0, #20]
 8010e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e62:	f8dc c000 	ldr.w	ip, [ip]
 8010e66:	fa0c fc08 	lsl.w	ip, ip, r8
 8010e6a:	ea4c 0707 	orr.w	r7, ip, r7
 8010e6e:	f849 7b04 	str.w	r7, [r9], #4
 8010e72:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010e76:	40cf      	lsrs	r7, r1
 8010e78:	e7da      	b.n	8010e30 <rshift+0x4c>
 8010e7a:	f851 cb04 	ldr.w	ip, [r1], #4
 8010e7e:	f847 cf04 	str.w	ip, [r7, #4]!
 8010e82:	e7c3      	b.n	8010e0c <rshift+0x28>
 8010e84:	4623      	mov	r3, r4
 8010e86:	e7e1      	b.n	8010e4c <rshift+0x68>

08010e88 <__hexdig_fun>:
 8010e88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010e8c:	2b09      	cmp	r3, #9
 8010e8e:	d802      	bhi.n	8010e96 <__hexdig_fun+0xe>
 8010e90:	3820      	subs	r0, #32
 8010e92:	b2c0      	uxtb	r0, r0
 8010e94:	4770      	bx	lr
 8010e96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010e9a:	2b05      	cmp	r3, #5
 8010e9c:	d801      	bhi.n	8010ea2 <__hexdig_fun+0x1a>
 8010e9e:	3847      	subs	r0, #71	@ 0x47
 8010ea0:	e7f7      	b.n	8010e92 <__hexdig_fun+0xa>
 8010ea2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8010ea6:	2b05      	cmp	r3, #5
 8010ea8:	d801      	bhi.n	8010eae <__hexdig_fun+0x26>
 8010eaa:	3827      	subs	r0, #39	@ 0x27
 8010eac:	e7f1      	b.n	8010e92 <__hexdig_fun+0xa>
 8010eae:	2000      	movs	r0, #0
 8010eb0:	4770      	bx	lr
	...

08010eb4 <__gethex>:
 8010eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb8:	b085      	sub	sp, #20
 8010eba:	468a      	mov	sl, r1
 8010ebc:	9302      	str	r3, [sp, #8]
 8010ebe:	680b      	ldr	r3, [r1, #0]
 8010ec0:	9001      	str	r0, [sp, #4]
 8010ec2:	4690      	mov	r8, r2
 8010ec4:	1c9c      	adds	r4, r3, #2
 8010ec6:	46a1      	mov	r9, r4
 8010ec8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010ecc:	2830      	cmp	r0, #48	@ 0x30
 8010ece:	d0fa      	beq.n	8010ec6 <__gethex+0x12>
 8010ed0:	eba9 0303 	sub.w	r3, r9, r3
 8010ed4:	f1a3 0b02 	sub.w	fp, r3, #2
 8010ed8:	f7ff ffd6 	bl	8010e88 <__hexdig_fun>
 8010edc:	4605      	mov	r5, r0
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d168      	bne.n	8010fb4 <__gethex+0x100>
 8010ee2:	49a0      	ldr	r1, [pc, #640]	@ (8011164 <__gethex+0x2b0>)
 8010ee4:	2201      	movs	r2, #1
 8010ee6:	4648      	mov	r0, r9
 8010ee8:	f7ff f834 	bl	800ff54 <strncmp>
 8010eec:	4607      	mov	r7, r0
 8010eee:	2800      	cmp	r0, #0
 8010ef0:	d167      	bne.n	8010fc2 <__gethex+0x10e>
 8010ef2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010ef6:	4626      	mov	r6, r4
 8010ef8:	f7ff ffc6 	bl	8010e88 <__hexdig_fun>
 8010efc:	2800      	cmp	r0, #0
 8010efe:	d062      	beq.n	8010fc6 <__gethex+0x112>
 8010f00:	4623      	mov	r3, r4
 8010f02:	7818      	ldrb	r0, [r3, #0]
 8010f04:	2830      	cmp	r0, #48	@ 0x30
 8010f06:	4699      	mov	r9, r3
 8010f08:	f103 0301 	add.w	r3, r3, #1
 8010f0c:	d0f9      	beq.n	8010f02 <__gethex+0x4e>
 8010f0e:	f7ff ffbb 	bl	8010e88 <__hexdig_fun>
 8010f12:	fab0 f580 	clz	r5, r0
 8010f16:	096d      	lsrs	r5, r5, #5
 8010f18:	f04f 0b01 	mov.w	fp, #1
 8010f1c:	464a      	mov	r2, r9
 8010f1e:	4616      	mov	r6, r2
 8010f20:	3201      	adds	r2, #1
 8010f22:	7830      	ldrb	r0, [r6, #0]
 8010f24:	f7ff ffb0 	bl	8010e88 <__hexdig_fun>
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	d1f8      	bne.n	8010f1e <__gethex+0x6a>
 8010f2c:	498d      	ldr	r1, [pc, #564]	@ (8011164 <__gethex+0x2b0>)
 8010f2e:	2201      	movs	r2, #1
 8010f30:	4630      	mov	r0, r6
 8010f32:	f7ff f80f 	bl	800ff54 <strncmp>
 8010f36:	2800      	cmp	r0, #0
 8010f38:	d13f      	bne.n	8010fba <__gethex+0x106>
 8010f3a:	b944      	cbnz	r4, 8010f4e <__gethex+0x9a>
 8010f3c:	1c74      	adds	r4, r6, #1
 8010f3e:	4622      	mov	r2, r4
 8010f40:	4616      	mov	r6, r2
 8010f42:	3201      	adds	r2, #1
 8010f44:	7830      	ldrb	r0, [r6, #0]
 8010f46:	f7ff ff9f 	bl	8010e88 <__hexdig_fun>
 8010f4a:	2800      	cmp	r0, #0
 8010f4c:	d1f8      	bne.n	8010f40 <__gethex+0x8c>
 8010f4e:	1ba4      	subs	r4, r4, r6
 8010f50:	00a7      	lsls	r7, r4, #2
 8010f52:	7833      	ldrb	r3, [r6, #0]
 8010f54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010f58:	2b50      	cmp	r3, #80	@ 0x50
 8010f5a:	d13e      	bne.n	8010fda <__gethex+0x126>
 8010f5c:	7873      	ldrb	r3, [r6, #1]
 8010f5e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010f60:	d033      	beq.n	8010fca <__gethex+0x116>
 8010f62:	2b2d      	cmp	r3, #45	@ 0x2d
 8010f64:	d034      	beq.n	8010fd0 <__gethex+0x11c>
 8010f66:	1c71      	adds	r1, r6, #1
 8010f68:	2400      	movs	r4, #0
 8010f6a:	7808      	ldrb	r0, [r1, #0]
 8010f6c:	f7ff ff8c 	bl	8010e88 <__hexdig_fun>
 8010f70:	1e43      	subs	r3, r0, #1
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	2b18      	cmp	r3, #24
 8010f76:	d830      	bhi.n	8010fda <__gethex+0x126>
 8010f78:	f1a0 0210 	sub.w	r2, r0, #16
 8010f7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010f80:	f7ff ff82 	bl	8010e88 <__hexdig_fun>
 8010f84:	f100 3cff 	add.w	ip, r0, #4294967295
 8010f88:	fa5f fc8c 	uxtb.w	ip, ip
 8010f8c:	f1bc 0f18 	cmp.w	ip, #24
 8010f90:	f04f 030a 	mov.w	r3, #10
 8010f94:	d91e      	bls.n	8010fd4 <__gethex+0x120>
 8010f96:	b104      	cbz	r4, 8010f9a <__gethex+0xe6>
 8010f98:	4252      	negs	r2, r2
 8010f9a:	4417      	add	r7, r2
 8010f9c:	f8ca 1000 	str.w	r1, [sl]
 8010fa0:	b1ed      	cbz	r5, 8010fde <__gethex+0x12a>
 8010fa2:	f1bb 0f00 	cmp.w	fp, #0
 8010fa6:	bf0c      	ite	eq
 8010fa8:	2506      	moveq	r5, #6
 8010faa:	2500      	movne	r5, #0
 8010fac:	4628      	mov	r0, r5
 8010fae:	b005      	add	sp, #20
 8010fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fb4:	2500      	movs	r5, #0
 8010fb6:	462c      	mov	r4, r5
 8010fb8:	e7b0      	b.n	8010f1c <__gethex+0x68>
 8010fba:	2c00      	cmp	r4, #0
 8010fbc:	d1c7      	bne.n	8010f4e <__gethex+0x9a>
 8010fbe:	4627      	mov	r7, r4
 8010fc0:	e7c7      	b.n	8010f52 <__gethex+0x9e>
 8010fc2:	464e      	mov	r6, r9
 8010fc4:	462f      	mov	r7, r5
 8010fc6:	2501      	movs	r5, #1
 8010fc8:	e7c3      	b.n	8010f52 <__gethex+0x9e>
 8010fca:	2400      	movs	r4, #0
 8010fcc:	1cb1      	adds	r1, r6, #2
 8010fce:	e7cc      	b.n	8010f6a <__gethex+0xb6>
 8010fd0:	2401      	movs	r4, #1
 8010fd2:	e7fb      	b.n	8010fcc <__gethex+0x118>
 8010fd4:	fb03 0002 	mla	r0, r3, r2, r0
 8010fd8:	e7ce      	b.n	8010f78 <__gethex+0xc4>
 8010fda:	4631      	mov	r1, r6
 8010fdc:	e7de      	b.n	8010f9c <__gethex+0xe8>
 8010fde:	eba6 0309 	sub.w	r3, r6, r9
 8010fe2:	3b01      	subs	r3, #1
 8010fe4:	4629      	mov	r1, r5
 8010fe6:	2b07      	cmp	r3, #7
 8010fe8:	dc0a      	bgt.n	8011000 <__gethex+0x14c>
 8010fea:	9801      	ldr	r0, [sp, #4]
 8010fec:	f000 fa46 	bl	801147c <_Balloc>
 8010ff0:	4604      	mov	r4, r0
 8010ff2:	b940      	cbnz	r0, 8011006 <__gethex+0x152>
 8010ff4:	4b5c      	ldr	r3, [pc, #368]	@ (8011168 <__gethex+0x2b4>)
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	21e4      	movs	r1, #228	@ 0xe4
 8010ffa:	485c      	ldr	r0, [pc, #368]	@ (801116c <__gethex+0x2b8>)
 8010ffc:	f001 fe76 	bl	8012cec <__assert_func>
 8011000:	3101      	adds	r1, #1
 8011002:	105b      	asrs	r3, r3, #1
 8011004:	e7ef      	b.n	8010fe6 <__gethex+0x132>
 8011006:	f100 0a14 	add.w	sl, r0, #20
 801100a:	2300      	movs	r3, #0
 801100c:	4655      	mov	r5, sl
 801100e:	469b      	mov	fp, r3
 8011010:	45b1      	cmp	r9, r6
 8011012:	d337      	bcc.n	8011084 <__gethex+0x1d0>
 8011014:	f845 bb04 	str.w	fp, [r5], #4
 8011018:	eba5 050a 	sub.w	r5, r5, sl
 801101c:	10ad      	asrs	r5, r5, #2
 801101e:	6125      	str	r5, [r4, #16]
 8011020:	4658      	mov	r0, fp
 8011022:	f000 fb1d 	bl	8011660 <__hi0bits>
 8011026:	016d      	lsls	r5, r5, #5
 8011028:	f8d8 6000 	ldr.w	r6, [r8]
 801102c:	1a2d      	subs	r5, r5, r0
 801102e:	42b5      	cmp	r5, r6
 8011030:	dd54      	ble.n	80110dc <__gethex+0x228>
 8011032:	1bad      	subs	r5, r5, r6
 8011034:	4629      	mov	r1, r5
 8011036:	4620      	mov	r0, r4
 8011038:	f000 feb1 	bl	8011d9e <__any_on>
 801103c:	4681      	mov	r9, r0
 801103e:	b178      	cbz	r0, 8011060 <__gethex+0x1ac>
 8011040:	1e6b      	subs	r3, r5, #1
 8011042:	1159      	asrs	r1, r3, #5
 8011044:	f003 021f 	and.w	r2, r3, #31
 8011048:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801104c:	f04f 0901 	mov.w	r9, #1
 8011050:	fa09 f202 	lsl.w	r2, r9, r2
 8011054:	420a      	tst	r2, r1
 8011056:	d003      	beq.n	8011060 <__gethex+0x1ac>
 8011058:	454b      	cmp	r3, r9
 801105a:	dc36      	bgt.n	80110ca <__gethex+0x216>
 801105c:	f04f 0902 	mov.w	r9, #2
 8011060:	4629      	mov	r1, r5
 8011062:	4620      	mov	r0, r4
 8011064:	f7ff febe 	bl	8010de4 <rshift>
 8011068:	442f      	add	r7, r5
 801106a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801106e:	42bb      	cmp	r3, r7
 8011070:	da42      	bge.n	80110f8 <__gethex+0x244>
 8011072:	9801      	ldr	r0, [sp, #4]
 8011074:	4621      	mov	r1, r4
 8011076:	f000 fa41 	bl	80114fc <_Bfree>
 801107a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801107c:	2300      	movs	r3, #0
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	25a3      	movs	r5, #163	@ 0xa3
 8011082:	e793      	b.n	8010fac <__gethex+0xf8>
 8011084:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8011088:	2a2e      	cmp	r2, #46	@ 0x2e
 801108a:	d012      	beq.n	80110b2 <__gethex+0x1fe>
 801108c:	2b20      	cmp	r3, #32
 801108e:	d104      	bne.n	801109a <__gethex+0x1e6>
 8011090:	f845 bb04 	str.w	fp, [r5], #4
 8011094:	f04f 0b00 	mov.w	fp, #0
 8011098:	465b      	mov	r3, fp
 801109a:	7830      	ldrb	r0, [r6, #0]
 801109c:	9303      	str	r3, [sp, #12]
 801109e:	f7ff fef3 	bl	8010e88 <__hexdig_fun>
 80110a2:	9b03      	ldr	r3, [sp, #12]
 80110a4:	f000 000f 	and.w	r0, r0, #15
 80110a8:	4098      	lsls	r0, r3
 80110aa:	ea4b 0b00 	orr.w	fp, fp, r0
 80110ae:	3304      	adds	r3, #4
 80110b0:	e7ae      	b.n	8011010 <__gethex+0x15c>
 80110b2:	45b1      	cmp	r9, r6
 80110b4:	d8ea      	bhi.n	801108c <__gethex+0x1d8>
 80110b6:	492b      	ldr	r1, [pc, #172]	@ (8011164 <__gethex+0x2b0>)
 80110b8:	9303      	str	r3, [sp, #12]
 80110ba:	2201      	movs	r2, #1
 80110bc:	4630      	mov	r0, r6
 80110be:	f7fe ff49 	bl	800ff54 <strncmp>
 80110c2:	9b03      	ldr	r3, [sp, #12]
 80110c4:	2800      	cmp	r0, #0
 80110c6:	d1e1      	bne.n	801108c <__gethex+0x1d8>
 80110c8:	e7a2      	b.n	8011010 <__gethex+0x15c>
 80110ca:	1ea9      	subs	r1, r5, #2
 80110cc:	4620      	mov	r0, r4
 80110ce:	f000 fe66 	bl	8011d9e <__any_on>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d0c2      	beq.n	801105c <__gethex+0x1a8>
 80110d6:	f04f 0903 	mov.w	r9, #3
 80110da:	e7c1      	b.n	8011060 <__gethex+0x1ac>
 80110dc:	da09      	bge.n	80110f2 <__gethex+0x23e>
 80110de:	1b75      	subs	r5, r6, r5
 80110e0:	4621      	mov	r1, r4
 80110e2:	9801      	ldr	r0, [sp, #4]
 80110e4:	462a      	mov	r2, r5
 80110e6:	f000 fc21 	bl	801192c <__lshift>
 80110ea:	1b7f      	subs	r7, r7, r5
 80110ec:	4604      	mov	r4, r0
 80110ee:	f100 0a14 	add.w	sl, r0, #20
 80110f2:	f04f 0900 	mov.w	r9, #0
 80110f6:	e7b8      	b.n	801106a <__gethex+0x1b6>
 80110f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80110fc:	42bd      	cmp	r5, r7
 80110fe:	dd6f      	ble.n	80111e0 <__gethex+0x32c>
 8011100:	1bed      	subs	r5, r5, r7
 8011102:	42ae      	cmp	r6, r5
 8011104:	dc34      	bgt.n	8011170 <__gethex+0x2bc>
 8011106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801110a:	2b02      	cmp	r3, #2
 801110c:	d022      	beq.n	8011154 <__gethex+0x2a0>
 801110e:	2b03      	cmp	r3, #3
 8011110:	d024      	beq.n	801115c <__gethex+0x2a8>
 8011112:	2b01      	cmp	r3, #1
 8011114:	d115      	bne.n	8011142 <__gethex+0x28e>
 8011116:	42ae      	cmp	r6, r5
 8011118:	d113      	bne.n	8011142 <__gethex+0x28e>
 801111a:	2e01      	cmp	r6, #1
 801111c:	d10b      	bne.n	8011136 <__gethex+0x282>
 801111e:	9a02      	ldr	r2, [sp, #8]
 8011120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011124:	6013      	str	r3, [r2, #0]
 8011126:	2301      	movs	r3, #1
 8011128:	6123      	str	r3, [r4, #16]
 801112a:	f8ca 3000 	str.w	r3, [sl]
 801112e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011130:	2562      	movs	r5, #98	@ 0x62
 8011132:	601c      	str	r4, [r3, #0]
 8011134:	e73a      	b.n	8010fac <__gethex+0xf8>
 8011136:	1e71      	subs	r1, r6, #1
 8011138:	4620      	mov	r0, r4
 801113a:	f000 fe30 	bl	8011d9e <__any_on>
 801113e:	2800      	cmp	r0, #0
 8011140:	d1ed      	bne.n	801111e <__gethex+0x26a>
 8011142:	9801      	ldr	r0, [sp, #4]
 8011144:	4621      	mov	r1, r4
 8011146:	f000 f9d9 	bl	80114fc <_Bfree>
 801114a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801114c:	2300      	movs	r3, #0
 801114e:	6013      	str	r3, [r2, #0]
 8011150:	2550      	movs	r5, #80	@ 0x50
 8011152:	e72b      	b.n	8010fac <__gethex+0xf8>
 8011154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011156:	2b00      	cmp	r3, #0
 8011158:	d1f3      	bne.n	8011142 <__gethex+0x28e>
 801115a:	e7e0      	b.n	801111e <__gethex+0x26a>
 801115c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1dd      	bne.n	801111e <__gethex+0x26a>
 8011162:	e7ee      	b.n	8011142 <__gethex+0x28e>
 8011164:	08015070 	.word	0x08015070
 8011168:	0801527f 	.word	0x0801527f
 801116c:	08015290 	.word	0x08015290
 8011170:	1e6f      	subs	r7, r5, #1
 8011172:	f1b9 0f00 	cmp.w	r9, #0
 8011176:	d130      	bne.n	80111da <__gethex+0x326>
 8011178:	b127      	cbz	r7, 8011184 <__gethex+0x2d0>
 801117a:	4639      	mov	r1, r7
 801117c:	4620      	mov	r0, r4
 801117e:	f000 fe0e 	bl	8011d9e <__any_on>
 8011182:	4681      	mov	r9, r0
 8011184:	117a      	asrs	r2, r7, #5
 8011186:	2301      	movs	r3, #1
 8011188:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801118c:	f007 071f 	and.w	r7, r7, #31
 8011190:	40bb      	lsls	r3, r7
 8011192:	4213      	tst	r3, r2
 8011194:	4629      	mov	r1, r5
 8011196:	4620      	mov	r0, r4
 8011198:	bf18      	it	ne
 801119a:	f049 0902 	orrne.w	r9, r9, #2
 801119e:	f7ff fe21 	bl	8010de4 <rshift>
 80111a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80111a6:	1b76      	subs	r6, r6, r5
 80111a8:	2502      	movs	r5, #2
 80111aa:	f1b9 0f00 	cmp.w	r9, #0
 80111ae:	d047      	beq.n	8011240 <__gethex+0x38c>
 80111b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80111b4:	2b02      	cmp	r3, #2
 80111b6:	d015      	beq.n	80111e4 <__gethex+0x330>
 80111b8:	2b03      	cmp	r3, #3
 80111ba:	d017      	beq.n	80111ec <__gethex+0x338>
 80111bc:	2b01      	cmp	r3, #1
 80111be:	d109      	bne.n	80111d4 <__gethex+0x320>
 80111c0:	f019 0f02 	tst.w	r9, #2
 80111c4:	d006      	beq.n	80111d4 <__gethex+0x320>
 80111c6:	f8da 3000 	ldr.w	r3, [sl]
 80111ca:	ea49 0903 	orr.w	r9, r9, r3
 80111ce:	f019 0f01 	tst.w	r9, #1
 80111d2:	d10e      	bne.n	80111f2 <__gethex+0x33e>
 80111d4:	f045 0510 	orr.w	r5, r5, #16
 80111d8:	e032      	b.n	8011240 <__gethex+0x38c>
 80111da:	f04f 0901 	mov.w	r9, #1
 80111de:	e7d1      	b.n	8011184 <__gethex+0x2d0>
 80111e0:	2501      	movs	r5, #1
 80111e2:	e7e2      	b.n	80111aa <__gethex+0x2f6>
 80111e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111e6:	f1c3 0301 	rsb	r3, r3, #1
 80111ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80111ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d0f0      	beq.n	80111d4 <__gethex+0x320>
 80111f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80111f6:	f104 0314 	add.w	r3, r4, #20
 80111fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80111fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011202:	f04f 0c00 	mov.w	ip, #0
 8011206:	4618      	mov	r0, r3
 8011208:	f853 2b04 	ldr.w	r2, [r3], #4
 801120c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011210:	d01b      	beq.n	801124a <__gethex+0x396>
 8011212:	3201      	adds	r2, #1
 8011214:	6002      	str	r2, [r0, #0]
 8011216:	2d02      	cmp	r5, #2
 8011218:	f104 0314 	add.w	r3, r4, #20
 801121c:	d13c      	bne.n	8011298 <__gethex+0x3e4>
 801121e:	f8d8 2000 	ldr.w	r2, [r8]
 8011222:	3a01      	subs	r2, #1
 8011224:	42b2      	cmp	r2, r6
 8011226:	d109      	bne.n	801123c <__gethex+0x388>
 8011228:	1171      	asrs	r1, r6, #5
 801122a:	2201      	movs	r2, #1
 801122c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011230:	f006 061f 	and.w	r6, r6, #31
 8011234:	fa02 f606 	lsl.w	r6, r2, r6
 8011238:	421e      	tst	r6, r3
 801123a:	d13a      	bne.n	80112b2 <__gethex+0x3fe>
 801123c:	f045 0520 	orr.w	r5, r5, #32
 8011240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011242:	601c      	str	r4, [r3, #0]
 8011244:	9b02      	ldr	r3, [sp, #8]
 8011246:	601f      	str	r7, [r3, #0]
 8011248:	e6b0      	b.n	8010fac <__gethex+0xf8>
 801124a:	4299      	cmp	r1, r3
 801124c:	f843 cc04 	str.w	ip, [r3, #-4]
 8011250:	d8d9      	bhi.n	8011206 <__gethex+0x352>
 8011252:	68a3      	ldr	r3, [r4, #8]
 8011254:	459b      	cmp	fp, r3
 8011256:	db17      	blt.n	8011288 <__gethex+0x3d4>
 8011258:	6861      	ldr	r1, [r4, #4]
 801125a:	9801      	ldr	r0, [sp, #4]
 801125c:	3101      	adds	r1, #1
 801125e:	f000 f90d 	bl	801147c <_Balloc>
 8011262:	4681      	mov	r9, r0
 8011264:	b918      	cbnz	r0, 801126e <__gethex+0x3ba>
 8011266:	4b1a      	ldr	r3, [pc, #104]	@ (80112d0 <__gethex+0x41c>)
 8011268:	4602      	mov	r2, r0
 801126a:	2184      	movs	r1, #132	@ 0x84
 801126c:	e6c5      	b.n	8010ffa <__gethex+0x146>
 801126e:	6922      	ldr	r2, [r4, #16]
 8011270:	3202      	adds	r2, #2
 8011272:	f104 010c 	add.w	r1, r4, #12
 8011276:	0092      	lsls	r2, r2, #2
 8011278:	300c      	adds	r0, #12
 801127a:	f7fe ff04 	bl	8010086 <memcpy>
 801127e:	4621      	mov	r1, r4
 8011280:	9801      	ldr	r0, [sp, #4]
 8011282:	f000 f93b 	bl	80114fc <_Bfree>
 8011286:	464c      	mov	r4, r9
 8011288:	6923      	ldr	r3, [r4, #16]
 801128a:	1c5a      	adds	r2, r3, #1
 801128c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011290:	6122      	str	r2, [r4, #16]
 8011292:	2201      	movs	r2, #1
 8011294:	615a      	str	r2, [r3, #20]
 8011296:	e7be      	b.n	8011216 <__gethex+0x362>
 8011298:	6922      	ldr	r2, [r4, #16]
 801129a:	455a      	cmp	r2, fp
 801129c:	dd0b      	ble.n	80112b6 <__gethex+0x402>
 801129e:	2101      	movs	r1, #1
 80112a0:	4620      	mov	r0, r4
 80112a2:	f7ff fd9f 	bl	8010de4 <rshift>
 80112a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80112aa:	3701      	adds	r7, #1
 80112ac:	42bb      	cmp	r3, r7
 80112ae:	f6ff aee0 	blt.w	8011072 <__gethex+0x1be>
 80112b2:	2501      	movs	r5, #1
 80112b4:	e7c2      	b.n	801123c <__gethex+0x388>
 80112b6:	f016 061f 	ands.w	r6, r6, #31
 80112ba:	d0fa      	beq.n	80112b2 <__gethex+0x3fe>
 80112bc:	4453      	add	r3, sl
 80112be:	f1c6 0620 	rsb	r6, r6, #32
 80112c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80112c6:	f000 f9cb 	bl	8011660 <__hi0bits>
 80112ca:	42b0      	cmp	r0, r6
 80112cc:	dbe7      	blt.n	801129e <__gethex+0x3ea>
 80112ce:	e7f0      	b.n	80112b2 <__gethex+0x3fe>
 80112d0:	0801527f 	.word	0x0801527f

080112d4 <L_shift>:
 80112d4:	f1c2 0208 	rsb	r2, r2, #8
 80112d8:	0092      	lsls	r2, r2, #2
 80112da:	b570      	push	{r4, r5, r6, lr}
 80112dc:	f1c2 0620 	rsb	r6, r2, #32
 80112e0:	6843      	ldr	r3, [r0, #4]
 80112e2:	6804      	ldr	r4, [r0, #0]
 80112e4:	fa03 f506 	lsl.w	r5, r3, r6
 80112e8:	432c      	orrs	r4, r5
 80112ea:	40d3      	lsrs	r3, r2
 80112ec:	6004      	str	r4, [r0, #0]
 80112ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80112f2:	4288      	cmp	r0, r1
 80112f4:	d3f4      	bcc.n	80112e0 <L_shift+0xc>
 80112f6:	bd70      	pop	{r4, r5, r6, pc}

080112f8 <__match>:
 80112f8:	b530      	push	{r4, r5, lr}
 80112fa:	6803      	ldr	r3, [r0, #0]
 80112fc:	3301      	adds	r3, #1
 80112fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011302:	b914      	cbnz	r4, 801130a <__match+0x12>
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	2001      	movs	r0, #1
 8011308:	bd30      	pop	{r4, r5, pc}
 801130a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801130e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8011312:	2d19      	cmp	r5, #25
 8011314:	bf98      	it	ls
 8011316:	3220      	addls	r2, #32
 8011318:	42a2      	cmp	r2, r4
 801131a:	d0f0      	beq.n	80112fe <__match+0x6>
 801131c:	2000      	movs	r0, #0
 801131e:	e7f3      	b.n	8011308 <__match+0x10>

08011320 <__hexnan>:
 8011320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011324:	680b      	ldr	r3, [r1, #0]
 8011326:	6801      	ldr	r1, [r0, #0]
 8011328:	115e      	asrs	r6, r3, #5
 801132a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801132e:	f013 031f 	ands.w	r3, r3, #31
 8011332:	b087      	sub	sp, #28
 8011334:	bf18      	it	ne
 8011336:	3604      	addne	r6, #4
 8011338:	2500      	movs	r5, #0
 801133a:	1f37      	subs	r7, r6, #4
 801133c:	4682      	mov	sl, r0
 801133e:	4690      	mov	r8, r2
 8011340:	9301      	str	r3, [sp, #4]
 8011342:	f846 5c04 	str.w	r5, [r6, #-4]
 8011346:	46b9      	mov	r9, r7
 8011348:	463c      	mov	r4, r7
 801134a:	9502      	str	r5, [sp, #8]
 801134c:	46ab      	mov	fp, r5
 801134e:	784a      	ldrb	r2, [r1, #1]
 8011350:	1c4b      	adds	r3, r1, #1
 8011352:	9303      	str	r3, [sp, #12]
 8011354:	b342      	cbz	r2, 80113a8 <__hexnan+0x88>
 8011356:	4610      	mov	r0, r2
 8011358:	9105      	str	r1, [sp, #20]
 801135a:	9204      	str	r2, [sp, #16]
 801135c:	f7ff fd94 	bl	8010e88 <__hexdig_fun>
 8011360:	2800      	cmp	r0, #0
 8011362:	d151      	bne.n	8011408 <__hexnan+0xe8>
 8011364:	9a04      	ldr	r2, [sp, #16]
 8011366:	9905      	ldr	r1, [sp, #20]
 8011368:	2a20      	cmp	r2, #32
 801136a:	d818      	bhi.n	801139e <__hexnan+0x7e>
 801136c:	9b02      	ldr	r3, [sp, #8]
 801136e:	459b      	cmp	fp, r3
 8011370:	dd13      	ble.n	801139a <__hexnan+0x7a>
 8011372:	454c      	cmp	r4, r9
 8011374:	d206      	bcs.n	8011384 <__hexnan+0x64>
 8011376:	2d07      	cmp	r5, #7
 8011378:	dc04      	bgt.n	8011384 <__hexnan+0x64>
 801137a:	462a      	mov	r2, r5
 801137c:	4649      	mov	r1, r9
 801137e:	4620      	mov	r0, r4
 8011380:	f7ff ffa8 	bl	80112d4 <L_shift>
 8011384:	4544      	cmp	r4, r8
 8011386:	d952      	bls.n	801142e <__hexnan+0x10e>
 8011388:	2300      	movs	r3, #0
 801138a:	f1a4 0904 	sub.w	r9, r4, #4
 801138e:	f844 3c04 	str.w	r3, [r4, #-4]
 8011392:	f8cd b008 	str.w	fp, [sp, #8]
 8011396:	464c      	mov	r4, r9
 8011398:	461d      	mov	r5, r3
 801139a:	9903      	ldr	r1, [sp, #12]
 801139c:	e7d7      	b.n	801134e <__hexnan+0x2e>
 801139e:	2a29      	cmp	r2, #41	@ 0x29
 80113a0:	d157      	bne.n	8011452 <__hexnan+0x132>
 80113a2:	3102      	adds	r1, #2
 80113a4:	f8ca 1000 	str.w	r1, [sl]
 80113a8:	f1bb 0f00 	cmp.w	fp, #0
 80113ac:	d051      	beq.n	8011452 <__hexnan+0x132>
 80113ae:	454c      	cmp	r4, r9
 80113b0:	d206      	bcs.n	80113c0 <__hexnan+0xa0>
 80113b2:	2d07      	cmp	r5, #7
 80113b4:	dc04      	bgt.n	80113c0 <__hexnan+0xa0>
 80113b6:	462a      	mov	r2, r5
 80113b8:	4649      	mov	r1, r9
 80113ba:	4620      	mov	r0, r4
 80113bc:	f7ff ff8a 	bl	80112d4 <L_shift>
 80113c0:	4544      	cmp	r4, r8
 80113c2:	d936      	bls.n	8011432 <__hexnan+0x112>
 80113c4:	f1a8 0204 	sub.w	r2, r8, #4
 80113c8:	4623      	mov	r3, r4
 80113ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80113ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80113d2:	429f      	cmp	r7, r3
 80113d4:	d2f9      	bcs.n	80113ca <__hexnan+0xaa>
 80113d6:	1b3b      	subs	r3, r7, r4
 80113d8:	f023 0303 	bic.w	r3, r3, #3
 80113dc:	3304      	adds	r3, #4
 80113de:	3401      	adds	r4, #1
 80113e0:	3e03      	subs	r6, #3
 80113e2:	42b4      	cmp	r4, r6
 80113e4:	bf88      	it	hi
 80113e6:	2304      	movhi	r3, #4
 80113e8:	4443      	add	r3, r8
 80113ea:	2200      	movs	r2, #0
 80113ec:	f843 2b04 	str.w	r2, [r3], #4
 80113f0:	429f      	cmp	r7, r3
 80113f2:	d2fb      	bcs.n	80113ec <__hexnan+0xcc>
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	b91b      	cbnz	r3, 8011400 <__hexnan+0xe0>
 80113f8:	4547      	cmp	r7, r8
 80113fa:	d128      	bne.n	801144e <__hexnan+0x12e>
 80113fc:	2301      	movs	r3, #1
 80113fe:	603b      	str	r3, [r7, #0]
 8011400:	2005      	movs	r0, #5
 8011402:	b007      	add	sp, #28
 8011404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011408:	3501      	adds	r5, #1
 801140a:	2d08      	cmp	r5, #8
 801140c:	f10b 0b01 	add.w	fp, fp, #1
 8011410:	dd06      	ble.n	8011420 <__hexnan+0x100>
 8011412:	4544      	cmp	r4, r8
 8011414:	d9c1      	bls.n	801139a <__hexnan+0x7a>
 8011416:	2300      	movs	r3, #0
 8011418:	f844 3c04 	str.w	r3, [r4, #-4]
 801141c:	2501      	movs	r5, #1
 801141e:	3c04      	subs	r4, #4
 8011420:	6822      	ldr	r2, [r4, #0]
 8011422:	f000 000f 	and.w	r0, r0, #15
 8011426:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801142a:	6020      	str	r0, [r4, #0]
 801142c:	e7b5      	b.n	801139a <__hexnan+0x7a>
 801142e:	2508      	movs	r5, #8
 8011430:	e7b3      	b.n	801139a <__hexnan+0x7a>
 8011432:	9b01      	ldr	r3, [sp, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0dd      	beq.n	80113f4 <__hexnan+0xd4>
 8011438:	f1c3 0320 	rsb	r3, r3, #32
 801143c:	f04f 32ff 	mov.w	r2, #4294967295
 8011440:	40da      	lsrs	r2, r3
 8011442:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8011446:	4013      	ands	r3, r2
 8011448:	f846 3c04 	str.w	r3, [r6, #-4]
 801144c:	e7d2      	b.n	80113f4 <__hexnan+0xd4>
 801144e:	3f04      	subs	r7, #4
 8011450:	e7d0      	b.n	80113f4 <__hexnan+0xd4>
 8011452:	2004      	movs	r0, #4
 8011454:	e7d5      	b.n	8011402 <__hexnan+0xe2>

08011456 <__ascii_mbtowc>:
 8011456:	b082      	sub	sp, #8
 8011458:	b901      	cbnz	r1, 801145c <__ascii_mbtowc+0x6>
 801145a:	a901      	add	r1, sp, #4
 801145c:	b142      	cbz	r2, 8011470 <__ascii_mbtowc+0x1a>
 801145e:	b14b      	cbz	r3, 8011474 <__ascii_mbtowc+0x1e>
 8011460:	7813      	ldrb	r3, [r2, #0]
 8011462:	600b      	str	r3, [r1, #0]
 8011464:	7812      	ldrb	r2, [r2, #0]
 8011466:	1e10      	subs	r0, r2, #0
 8011468:	bf18      	it	ne
 801146a:	2001      	movne	r0, #1
 801146c:	b002      	add	sp, #8
 801146e:	4770      	bx	lr
 8011470:	4610      	mov	r0, r2
 8011472:	e7fb      	b.n	801146c <__ascii_mbtowc+0x16>
 8011474:	f06f 0001 	mvn.w	r0, #1
 8011478:	e7f8      	b.n	801146c <__ascii_mbtowc+0x16>
	...

0801147c <_Balloc>:
 801147c:	b570      	push	{r4, r5, r6, lr}
 801147e:	69c6      	ldr	r6, [r0, #28]
 8011480:	4604      	mov	r4, r0
 8011482:	460d      	mov	r5, r1
 8011484:	b976      	cbnz	r6, 80114a4 <_Balloc+0x28>
 8011486:	2010      	movs	r0, #16
 8011488:	f7fc ff76 	bl	800e378 <malloc>
 801148c:	4602      	mov	r2, r0
 801148e:	61e0      	str	r0, [r4, #28]
 8011490:	b920      	cbnz	r0, 801149c <_Balloc+0x20>
 8011492:	4b18      	ldr	r3, [pc, #96]	@ (80114f4 <_Balloc+0x78>)
 8011494:	4818      	ldr	r0, [pc, #96]	@ (80114f8 <_Balloc+0x7c>)
 8011496:	216b      	movs	r1, #107	@ 0x6b
 8011498:	f001 fc28 	bl	8012cec <__assert_func>
 801149c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80114a0:	6006      	str	r6, [r0, #0]
 80114a2:	60c6      	str	r6, [r0, #12]
 80114a4:	69e6      	ldr	r6, [r4, #28]
 80114a6:	68f3      	ldr	r3, [r6, #12]
 80114a8:	b183      	cbz	r3, 80114cc <_Balloc+0x50>
 80114aa:	69e3      	ldr	r3, [r4, #28]
 80114ac:	68db      	ldr	r3, [r3, #12]
 80114ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114b2:	b9b8      	cbnz	r0, 80114e4 <_Balloc+0x68>
 80114b4:	2101      	movs	r1, #1
 80114b6:	fa01 f605 	lsl.w	r6, r1, r5
 80114ba:	1d72      	adds	r2, r6, #5
 80114bc:	0092      	lsls	r2, r2, #2
 80114be:	4620      	mov	r0, r4
 80114c0:	f001 fc32 	bl	8012d28 <_calloc_r>
 80114c4:	b160      	cbz	r0, 80114e0 <_Balloc+0x64>
 80114c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ca:	e00e      	b.n	80114ea <_Balloc+0x6e>
 80114cc:	2221      	movs	r2, #33	@ 0x21
 80114ce:	2104      	movs	r1, #4
 80114d0:	4620      	mov	r0, r4
 80114d2:	f001 fc29 	bl	8012d28 <_calloc_r>
 80114d6:	69e3      	ldr	r3, [r4, #28]
 80114d8:	60f0      	str	r0, [r6, #12]
 80114da:	68db      	ldr	r3, [r3, #12]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1e4      	bne.n	80114aa <_Balloc+0x2e>
 80114e0:	2000      	movs	r0, #0
 80114e2:	bd70      	pop	{r4, r5, r6, pc}
 80114e4:	6802      	ldr	r2, [r0, #0]
 80114e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114ea:	2300      	movs	r3, #0
 80114ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114f0:	e7f7      	b.n	80114e2 <_Balloc+0x66>
 80114f2:	bf00      	nop
 80114f4:	08015210 	.word	0x08015210
 80114f8:	080152f0 	.word	0x080152f0

080114fc <_Bfree>:
 80114fc:	b570      	push	{r4, r5, r6, lr}
 80114fe:	69c6      	ldr	r6, [r0, #28]
 8011500:	4605      	mov	r5, r0
 8011502:	460c      	mov	r4, r1
 8011504:	b976      	cbnz	r6, 8011524 <_Bfree+0x28>
 8011506:	2010      	movs	r0, #16
 8011508:	f7fc ff36 	bl	800e378 <malloc>
 801150c:	4602      	mov	r2, r0
 801150e:	61e8      	str	r0, [r5, #28]
 8011510:	b920      	cbnz	r0, 801151c <_Bfree+0x20>
 8011512:	4b09      	ldr	r3, [pc, #36]	@ (8011538 <_Bfree+0x3c>)
 8011514:	4809      	ldr	r0, [pc, #36]	@ (801153c <_Bfree+0x40>)
 8011516:	218f      	movs	r1, #143	@ 0x8f
 8011518:	f001 fbe8 	bl	8012cec <__assert_func>
 801151c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011520:	6006      	str	r6, [r0, #0]
 8011522:	60c6      	str	r6, [r0, #12]
 8011524:	b13c      	cbz	r4, 8011536 <_Bfree+0x3a>
 8011526:	69eb      	ldr	r3, [r5, #28]
 8011528:	6862      	ldr	r2, [r4, #4]
 801152a:	68db      	ldr	r3, [r3, #12]
 801152c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011530:	6021      	str	r1, [r4, #0]
 8011532:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011536:	bd70      	pop	{r4, r5, r6, pc}
 8011538:	08015210 	.word	0x08015210
 801153c:	080152f0 	.word	0x080152f0

08011540 <__multadd>:
 8011540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011544:	690d      	ldr	r5, [r1, #16]
 8011546:	4607      	mov	r7, r0
 8011548:	460c      	mov	r4, r1
 801154a:	461e      	mov	r6, r3
 801154c:	f101 0c14 	add.w	ip, r1, #20
 8011550:	2000      	movs	r0, #0
 8011552:	f8dc 3000 	ldr.w	r3, [ip]
 8011556:	b299      	uxth	r1, r3
 8011558:	fb02 6101 	mla	r1, r2, r1, r6
 801155c:	0c1e      	lsrs	r6, r3, #16
 801155e:	0c0b      	lsrs	r3, r1, #16
 8011560:	fb02 3306 	mla	r3, r2, r6, r3
 8011564:	b289      	uxth	r1, r1
 8011566:	3001      	adds	r0, #1
 8011568:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801156c:	4285      	cmp	r5, r0
 801156e:	f84c 1b04 	str.w	r1, [ip], #4
 8011572:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011576:	dcec      	bgt.n	8011552 <__multadd+0x12>
 8011578:	b30e      	cbz	r6, 80115be <__multadd+0x7e>
 801157a:	68a3      	ldr	r3, [r4, #8]
 801157c:	42ab      	cmp	r3, r5
 801157e:	dc19      	bgt.n	80115b4 <__multadd+0x74>
 8011580:	6861      	ldr	r1, [r4, #4]
 8011582:	4638      	mov	r0, r7
 8011584:	3101      	adds	r1, #1
 8011586:	f7ff ff79 	bl	801147c <_Balloc>
 801158a:	4680      	mov	r8, r0
 801158c:	b928      	cbnz	r0, 801159a <__multadd+0x5a>
 801158e:	4602      	mov	r2, r0
 8011590:	4b0c      	ldr	r3, [pc, #48]	@ (80115c4 <__multadd+0x84>)
 8011592:	480d      	ldr	r0, [pc, #52]	@ (80115c8 <__multadd+0x88>)
 8011594:	21ba      	movs	r1, #186	@ 0xba
 8011596:	f001 fba9 	bl	8012cec <__assert_func>
 801159a:	6922      	ldr	r2, [r4, #16]
 801159c:	3202      	adds	r2, #2
 801159e:	f104 010c 	add.w	r1, r4, #12
 80115a2:	0092      	lsls	r2, r2, #2
 80115a4:	300c      	adds	r0, #12
 80115a6:	f7fe fd6e 	bl	8010086 <memcpy>
 80115aa:	4621      	mov	r1, r4
 80115ac:	4638      	mov	r0, r7
 80115ae:	f7ff ffa5 	bl	80114fc <_Bfree>
 80115b2:	4644      	mov	r4, r8
 80115b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115b8:	3501      	adds	r5, #1
 80115ba:	615e      	str	r6, [r3, #20]
 80115bc:	6125      	str	r5, [r4, #16]
 80115be:	4620      	mov	r0, r4
 80115c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115c4:	0801527f 	.word	0x0801527f
 80115c8:	080152f0 	.word	0x080152f0

080115cc <__s2b>:
 80115cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115d0:	460c      	mov	r4, r1
 80115d2:	4615      	mov	r5, r2
 80115d4:	461f      	mov	r7, r3
 80115d6:	2209      	movs	r2, #9
 80115d8:	3308      	adds	r3, #8
 80115da:	4606      	mov	r6, r0
 80115dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80115e0:	2100      	movs	r1, #0
 80115e2:	2201      	movs	r2, #1
 80115e4:	429a      	cmp	r2, r3
 80115e6:	db09      	blt.n	80115fc <__s2b+0x30>
 80115e8:	4630      	mov	r0, r6
 80115ea:	f7ff ff47 	bl	801147c <_Balloc>
 80115ee:	b940      	cbnz	r0, 8011602 <__s2b+0x36>
 80115f0:	4602      	mov	r2, r0
 80115f2:	4b19      	ldr	r3, [pc, #100]	@ (8011658 <__s2b+0x8c>)
 80115f4:	4819      	ldr	r0, [pc, #100]	@ (801165c <__s2b+0x90>)
 80115f6:	21d3      	movs	r1, #211	@ 0xd3
 80115f8:	f001 fb78 	bl	8012cec <__assert_func>
 80115fc:	0052      	lsls	r2, r2, #1
 80115fe:	3101      	adds	r1, #1
 8011600:	e7f0      	b.n	80115e4 <__s2b+0x18>
 8011602:	9b08      	ldr	r3, [sp, #32]
 8011604:	6143      	str	r3, [r0, #20]
 8011606:	2d09      	cmp	r5, #9
 8011608:	f04f 0301 	mov.w	r3, #1
 801160c:	6103      	str	r3, [r0, #16]
 801160e:	dd16      	ble.n	801163e <__s2b+0x72>
 8011610:	f104 0909 	add.w	r9, r4, #9
 8011614:	46c8      	mov	r8, r9
 8011616:	442c      	add	r4, r5
 8011618:	f818 3b01 	ldrb.w	r3, [r8], #1
 801161c:	4601      	mov	r1, r0
 801161e:	3b30      	subs	r3, #48	@ 0x30
 8011620:	220a      	movs	r2, #10
 8011622:	4630      	mov	r0, r6
 8011624:	f7ff ff8c 	bl	8011540 <__multadd>
 8011628:	45a0      	cmp	r8, r4
 801162a:	d1f5      	bne.n	8011618 <__s2b+0x4c>
 801162c:	f1a5 0408 	sub.w	r4, r5, #8
 8011630:	444c      	add	r4, r9
 8011632:	1b2d      	subs	r5, r5, r4
 8011634:	1963      	adds	r3, r4, r5
 8011636:	42bb      	cmp	r3, r7
 8011638:	db04      	blt.n	8011644 <__s2b+0x78>
 801163a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801163e:	340a      	adds	r4, #10
 8011640:	2509      	movs	r5, #9
 8011642:	e7f6      	b.n	8011632 <__s2b+0x66>
 8011644:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011648:	4601      	mov	r1, r0
 801164a:	3b30      	subs	r3, #48	@ 0x30
 801164c:	220a      	movs	r2, #10
 801164e:	4630      	mov	r0, r6
 8011650:	f7ff ff76 	bl	8011540 <__multadd>
 8011654:	e7ee      	b.n	8011634 <__s2b+0x68>
 8011656:	bf00      	nop
 8011658:	0801527f 	.word	0x0801527f
 801165c:	080152f0 	.word	0x080152f0

08011660 <__hi0bits>:
 8011660:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011664:	4603      	mov	r3, r0
 8011666:	bf36      	itet	cc
 8011668:	0403      	lslcc	r3, r0, #16
 801166a:	2000      	movcs	r0, #0
 801166c:	2010      	movcc	r0, #16
 801166e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011672:	bf3c      	itt	cc
 8011674:	021b      	lslcc	r3, r3, #8
 8011676:	3008      	addcc	r0, #8
 8011678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801167c:	bf3c      	itt	cc
 801167e:	011b      	lslcc	r3, r3, #4
 8011680:	3004      	addcc	r0, #4
 8011682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011686:	bf3c      	itt	cc
 8011688:	009b      	lslcc	r3, r3, #2
 801168a:	3002      	addcc	r0, #2
 801168c:	2b00      	cmp	r3, #0
 801168e:	db05      	blt.n	801169c <__hi0bits+0x3c>
 8011690:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011694:	f100 0001 	add.w	r0, r0, #1
 8011698:	bf08      	it	eq
 801169a:	2020      	moveq	r0, #32
 801169c:	4770      	bx	lr

0801169e <__lo0bits>:
 801169e:	6803      	ldr	r3, [r0, #0]
 80116a0:	4602      	mov	r2, r0
 80116a2:	f013 0007 	ands.w	r0, r3, #7
 80116a6:	d00b      	beq.n	80116c0 <__lo0bits+0x22>
 80116a8:	07d9      	lsls	r1, r3, #31
 80116aa:	d421      	bmi.n	80116f0 <__lo0bits+0x52>
 80116ac:	0798      	lsls	r0, r3, #30
 80116ae:	bf49      	itett	mi
 80116b0:	085b      	lsrmi	r3, r3, #1
 80116b2:	089b      	lsrpl	r3, r3, #2
 80116b4:	2001      	movmi	r0, #1
 80116b6:	6013      	strmi	r3, [r2, #0]
 80116b8:	bf5c      	itt	pl
 80116ba:	6013      	strpl	r3, [r2, #0]
 80116bc:	2002      	movpl	r0, #2
 80116be:	4770      	bx	lr
 80116c0:	b299      	uxth	r1, r3
 80116c2:	b909      	cbnz	r1, 80116c8 <__lo0bits+0x2a>
 80116c4:	0c1b      	lsrs	r3, r3, #16
 80116c6:	2010      	movs	r0, #16
 80116c8:	b2d9      	uxtb	r1, r3
 80116ca:	b909      	cbnz	r1, 80116d0 <__lo0bits+0x32>
 80116cc:	3008      	adds	r0, #8
 80116ce:	0a1b      	lsrs	r3, r3, #8
 80116d0:	0719      	lsls	r1, r3, #28
 80116d2:	bf04      	itt	eq
 80116d4:	091b      	lsreq	r3, r3, #4
 80116d6:	3004      	addeq	r0, #4
 80116d8:	0799      	lsls	r1, r3, #30
 80116da:	bf04      	itt	eq
 80116dc:	089b      	lsreq	r3, r3, #2
 80116de:	3002      	addeq	r0, #2
 80116e0:	07d9      	lsls	r1, r3, #31
 80116e2:	d403      	bmi.n	80116ec <__lo0bits+0x4e>
 80116e4:	085b      	lsrs	r3, r3, #1
 80116e6:	f100 0001 	add.w	r0, r0, #1
 80116ea:	d003      	beq.n	80116f4 <__lo0bits+0x56>
 80116ec:	6013      	str	r3, [r2, #0]
 80116ee:	4770      	bx	lr
 80116f0:	2000      	movs	r0, #0
 80116f2:	4770      	bx	lr
 80116f4:	2020      	movs	r0, #32
 80116f6:	4770      	bx	lr

080116f8 <__i2b>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	460c      	mov	r4, r1
 80116fc:	2101      	movs	r1, #1
 80116fe:	f7ff febd 	bl	801147c <_Balloc>
 8011702:	4602      	mov	r2, r0
 8011704:	b928      	cbnz	r0, 8011712 <__i2b+0x1a>
 8011706:	4b05      	ldr	r3, [pc, #20]	@ (801171c <__i2b+0x24>)
 8011708:	4805      	ldr	r0, [pc, #20]	@ (8011720 <__i2b+0x28>)
 801170a:	f240 1145 	movw	r1, #325	@ 0x145
 801170e:	f001 faed 	bl	8012cec <__assert_func>
 8011712:	2301      	movs	r3, #1
 8011714:	6144      	str	r4, [r0, #20]
 8011716:	6103      	str	r3, [r0, #16]
 8011718:	bd10      	pop	{r4, pc}
 801171a:	bf00      	nop
 801171c:	0801527f 	.word	0x0801527f
 8011720:	080152f0 	.word	0x080152f0

08011724 <__multiply>:
 8011724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011728:	4614      	mov	r4, r2
 801172a:	690a      	ldr	r2, [r1, #16]
 801172c:	6923      	ldr	r3, [r4, #16]
 801172e:	429a      	cmp	r2, r3
 8011730:	bfa8      	it	ge
 8011732:	4623      	movge	r3, r4
 8011734:	460f      	mov	r7, r1
 8011736:	bfa4      	itt	ge
 8011738:	460c      	movge	r4, r1
 801173a:	461f      	movge	r7, r3
 801173c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011740:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011744:	68a3      	ldr	r3, [r4, #8]
 8011746:	6861      	ldr	r1, [r4, #4]
 8011748:	eb0a 0609 	add.w	r6, sl, r9
 801174c:	42b3      	cmp	r3, r6
 801174e:	b085      	sub	sp, #20
 8011750:	bfb8      	it	lt
 8011752:	3101      	addlt	r1, #1
 8011754:	f7ff fe92 	bl	801147c <_Balloc>
 8011758:	b930      	cbnz	r0, 8011768 <__multiply+0x44>
 801175a:	4602      	mov	r2, r0
 801175c:	4b44      	ldr	r3, [pc, #272]	@ (8011870 <__multiply+0x14c>)
 801175e:	4845      	ldr	r0, [pc, #276]	@ (8011874 <__multiply+0x150>)
 8011760:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011764:	f001 fac2 	bl	8012cec <__assert_func>
 8011768:	f100 0514 	add.w	r5, r0, #20
 801176c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011770:	462b      	mov	r3, r5
 8011772:	2200      	movs	r2, #0
 8011774:	4543      	cmp	r3, r8
 8011776:	d321      	bcc.n	80117bc <__multiply+0x98>
 8011778:	f107 0114 	add.w	r1, r7, #20
 801177c:	f104 0214 	add.w	r2, r4, #20
 8011780:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011784:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011788:	9302      	str	r3, [sp, #8]
 801178a:	1b13      	subs	r3, r2, r4
 801178c:	3b15      	subs	r3, #21
 801178e:	f023 0303 	bic.w	r3, r3, #3
 8011792:	3304      	adds	r3, #4
 8011794:	f104 0715 	add.w	r7, r4, #21
 8011798:	42ba      	cmp	r2, r7
 801179a:	bf38      	it	cc
 801179c:	2304      	movcc	r3, #4
 801179e:	9301      	str	r3, [sp, #4]
 80117a0:	9b02      	ldr	r3, [sp, #8]
 80117a2:	9103      	str	r1, [sp, #12]
 80117a4:	428b      	cmp	r3, r1
 80117a6:	d80c      	bhi.n	80117c2 <__multiply+0x9e>
 80117a8:	2e00      	cmp	r6, #0
 80117aa:	dd03      	ble.n	80117b4 <__multiply+0x90>
 80117ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d05b      	beq.n	801186c <__multiply+0x148>
 80117b4:	6106      	str	r6, [r0, #16]
 80117b6:	b005      	add	sp, #20
 80117b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117bc:	f843 2b04 	str.w	r2, [r3], #4
 80117c0:	e7d8      	b.n	8011774 <__multiply+0x50>
 80117c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80117c6:	f1ba 0f00 	cmp.w	sl, #0
 80117ca:	d024      	beq.n	8011816 <__multiply+0xf2>
 80117cc:	f104 0e14 	add.w	lr, r4, #20
 80117d0:	46a9      	mov	r9, r5
 80117d2:	f04f 0c00 	mov.w	ip, #0
 80117d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80117da:	f8d9 3000 	ldr.w	r3, [r9]
 80117de:	fa1f fb87 	uxth.w	fp, r7
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80117e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80117ec:	f8d9 7000 	ldr.w	r7, [r9]
 80117f0:	4463      	add	r3, ip
 80117f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80117f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80117fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80117fe:	b29b      	uxth	r3, r3
 8011800:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011804:	4572      	cmp	r2, lr
 8011806:	f849 3b04 	str.w	r3, [r9], #4
 801180a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801180e:	d8e2      	bhi.n	80117d6 <__multiply+0xb2>
 8011810:	9b01      	ldr	r3, [sp, #4]
 8011812:	f845 c003 	str.w	ip, [r5, r3]
 8011816:	9b03      	ldr	r3, [sp, #12]
 8011818:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801181c:	3104      	adds	r1, #4
 801181e:	f1b9 0f00 	cmp.w	r9, #0
 8011822:	d021      	beq.n	8011868 <__multiply+0x144>
 8011824:	682b      	ldr	r3, [r5, #0]
 8011826:	f104 0c14 	add.w	ip, r4, #20
 801182a:	46ae      	mov	lr, r5
 801182c:	f04f 0a00 	mov.w	sl, #0
 8011830:	f8bc b000 	ldrh.w	fp, [ip]
 8011834:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011838:	fb09 770b 	mla	r7, r9, fp, r7
 801183c:	4457      	add	r7, sl
 801183e:	b29b      	uxth	r3, r3
 8011840:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011844:	f84e 3b04 	str.w	r3, [lr], #4
 8011848:	f85c 3b04 	ldr.w	r3, [ip], #4
 801184c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011850:	f8be 3000 	ldrh.w	r3, [lr]
 8011854:	fb09 330a 	mla	r3, r9, sl, r3
 8011858:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801185c:	4562      	cmp	r2, ip
 801185e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011862:	d8e5      	bhi.n	8011830 <__multiply+0x10c>
 8011864:	9f01      	ldr	r7, [sp, #4]
 8011866:	51eb      	str	r3, [r5, r7]
 8011868:	3504      	adds	r5, #4
 801186a:	e799      	b.n	80117a0 <__multiply+0x7c>
 801186c:	3e01      	subs	r6, #1
 801186e:	e79b      	b.n	80117a8 <__multiply+0x84>
 8011870:	0801527f 	.word	0x0801527f
 8011874:	080152f0 	.word	0x080152f0

08011878 <__pow5mult>:
 8011878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801187c:	4615      	mov	r5, r2
 801187e:	f012 0203 	ands.w	r2, r2, #3
 8011882:	4607      	mov	r7, r0
 8011884:	460e      	mov	r6, r1
 8011886:	d007      	beq.n	8011898 <__pow5mult+0x20>
 8011888:	4c25      	ldr	r4, [pc, #148]	@ (8011920 <__pow5mult+0xa8>)
 801188a:	3a01      	subs	r2, #1
 801188c:	2300      	movs	r3, #0
 801188e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011892:	f7ff fe55 	bl	8011540 <__multadd>
 8011896:	4606      	mov	r6, r0
 8011898:	10ad      	asrs	r5, r5, #2
 801189a:	d03d      	beq.n	8011918 <__pow5mult+0xa0>
 801189c:	69fc      	ldr	r4, [r7, #28]
 801189e:	b97c      	cbnz	r4, 80118c0 <__pow5mult+0x48>
 80118a0:	2010      	movs	r0, #16
 80118a2:	f7fc fd69 	bl	800e378 <malloc>
 80118a6:	4602      	mov	r2, r0
 80118a8:	61f8      	str	r0, [r7, #28]
 80118aa:	b928      	cbnz	r0, 80118b8 <__pow5mult+0x40>
 80118ac:	4b1d      	ldr	r3, [pc, #116]	@ (8011924 <__pow5mult+0xac>)
 80118ae:	481e      	ldr	r0, [pc, #120]	@ (8011928 <__pow5mult+0xb0>)
 80118b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80118b4:	f001 fa1a 	bl	8012cec <__assert_func>
 80118b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118bc:	6004      	str	r4, [r0, #0]
 80118be:	60c4      	str	r4, [r0, #12]
 80118c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80118c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118c8:	b94c      	cbnz	r4, 80118de <__pow5mult+0x66>
 80118ca:	f240 2171 	movw	r1, #625	@ 0x271
 80118ce:	4638      	mov	r0, r7
 80118d0:	f7ff ff12 	bl	80116f8 <__i2b>
 80118d4:	2300      	movs	r3, #0
 80118d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80118da:	4604      	mov	r4, r0
 80118dc:	6003      	str	r3, [r0, #0]
 80118de:	f04f 0900 	mov.w	r9, #0
 80118e2:	07eb      	lsls	r3, r5, #31
 80118e4:	d50a      	bpl.n	80118fc <__pow5mult+0x84>
 80118e6:	4631      	mov	r1, r6
 80118e8:	4622      	mov	r2, r4
 80118ea:	4638      	mov	r0, r7
 80118ec:	f7ff ff1a 	bl	8011724 <__multiply>
 80118f0:	4631      	mov	r1, r6
 80118f2:	4680      	mov	r8, r0
 80118f4:	4638      	mov	r0, r7
 80118f6:	f7ff fe01 	bl	80114fc <_Bfree>
 80118fa:	4646      	mov	r6, r8
 80118fc:	106d      	asrs	r5, r5, #1
 80118fe:	d00b      	beq.n	8011918 <__pow5mult+0xa0>
 8011900:	6820      	ldr	r0, [r4, #0]
 8011902:	b938      	cbnz	r0, 8011914 <__pow5mult+0x9c>
 8011904:	4622      	mov	r2, r4
 8011906:	4621      	mov	r1, r4
 8011908:	4638      	mov	r0, r7
 801190a:	f7ff ff0b 	bl	8011724 <__multiply>
 801190e:	6020      	str	r0, [r4, #0]
 8011910:	f8c0 9000 	str.w	r9, [r0]
 8011914:	4604      	mov	r4, r0
 8011916:	e7e4      	b.n	80118e2 <__pow5mult+0x6a>
 8011918:	4630      	mov	r0, r6
 801191a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801191e:	bf00      	nop
 8011920:	0801534c 	.word	0x0801534c
 8011924:	08015210 	.word	0x08015210
 8011928:	080152f0 	.word	0x080152f0

0801192c <__lshift>:
 801192c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011930:	460c      	mov	r4, r1
 8011932:	6849      	ldr	r1, [r1, #4]
 8011934:	6923      	ldr	r3, [r4, #16]
 8011936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801193a:	68a3      	ldr	r3, [r4, #8]
 801193c:	4607      	mov	r7, r0
 801193e:	4691      	mov	r9, r2
 8011940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011944:	f108 0601 	add.w	r6, r8, #1
 8011948:	42b3      	cmp	r3, r6
 801194a:	db0b      	blt.n	8011964 <__lshift+0x38>
 801194c:	4638      	mov	r0, r7
 801194e:	f7ff fd95 	bl	801147c <_Balloc>
 8011952:	4605      	mov	r5, r0
 8011954:	b948      	cbnz	r0, 801196a <__lshift+0x3e>
 8011956:	4602      	mov	r2, r0
 8011958:	4b28      	ldr	r3, [pc, #160]	@ (80119fc <__lshift+0xd0>)
 801195a:	4829      	ldr	r0, [pc, #164]	@ (8011a00 <__lshift+0xd4>)
 801195c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011960:	f001 f9c4 	bl	8012cec <__assert_func>
 8011964:	3101      	adds	r1, #1
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	e7ee      	b.n	8011948 <__lshift+0x1c>
 801196a:	2300      	movs	r3, #0
 801196c:	f100 0114 	add.w	r1, r0, #20
 8011970:	f100 0210 	add.w	r2, r0, #16
 8011974:	4618      	mov	r0, r3
 8011976:	4553      	cmp	r3, sl
 8011978:	db33      	blt.n	80119e2 <__lshift+0xb6>
 801197a:	6920      	ldr	r0, [r4, #16]
 801197c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011980:	f104 0314 	add.w	r3, r4, #20
 8011984:	f019 091f 	ands.w	r9, r9, #31
 8011988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801198c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011990:	d02b      	beq.n	80119ea <__lshift+0xbe>
 8011992:	f1c9 0e20 	rsb	lr, r9, #32
 8011996:	468a      	mov	sl, r1
 8011998:	2200      	movs	r2, #0
 801199a:	6818      	ldr	r0, [r3, #0]
 801199c:	fa00 f009 	lsl.w	r0, r0, r9
 80119a0:	4310      	orrs	r0, r2
 80119a2:	f84a 0b04 	str.w	r0, [sl], #4
 80119a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80119aa:	459c      	cmp	ip, r3
 80119ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80119b0:	d8f3      	bhi.n	801199a <__lshift+0x6e>
 80119b2:	ebac 0304 	sub.w	r3, ip, r4
 80119b6:	3b15      	subs	r3, #21
 80119b8:	f023 0303 	bic.w	r3, r3, #3
 80119bc:	3304      	adds	r3, #4
 80119be:	f104 0015 	add.w	r0, r4, #21
 80119c2:	4584      	cmp	ip, r0
 80119c4:	bf38      	it	cc
 80119c6:	2304      	movcc	r3, #4
 80119c8:	50ca      	str	r2, [r1, r3]
 80119ca:	b10a      	cbz	r2, 80119d0 <__lshift+0xa4>
 80119cc:	f108 0602 	add.w	r6, r8, #2
 80119d0:	3e01      	subs	r6, #1
 80119d2:	4638      	mov	r0, r7
 80119d4:	612e      	str	r6, [r5, #16]
 80119d6:	4621      	mov	r1, r4
 80119d8:	f7ff fd90 	bl	80114fc <_Bfree>
 80119dc:	4628      	mov	r0, r5
 80119de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80119e6:	3301      	adds	r3, #1
 80119e8:	e7c5      	b.n	8011976 <__lshift+0x4a>
 80119ea:	3904      	subs	r1, #4
 80119ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80119f4:	459c      	cmp	ip, r3
 80119f6:	d8f9      	bhi.n	80119ec <__lshift+0xc0>
 80119f8:	e7ea      	b.n	80119d0 <__lshift+0xa4>
 80119fa:	bf00      	nop
 80119fc:	0801527f 	.word	0x0801527f
 8011a00:	080152f0 	.word	0x080152f0

08011a04 <__mcmp>:
 8011a04:	690a      	ldr	r2, [r1, #16]
 8011a06:	4603      	mov	r3, r0
 8011a08:	6900      	ldr	r0, [r0, #16]
 8011a0a:	1a80      	subs	r0, r0, r2
 8011a0c:	b530      	push	{r4, r5, lr}
 8011a0e:	d10e      	bne.n	8011a2e <__mcmp+0x2a>
 8011a10:	3314      	adds	r3, #20
 8011a12:	3114      	adds	r1, #20
 8011a14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a24:	4295      	cmp	r5, r2
 8011a26:	d003      	beq.n	8011a30 <__mcmp+0x2c>
 8011a28:	d205      	bcs.n	8011a36 <__mcmp+0x32>
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	bd30      	pop	{r4, r5, pc}
 8011a30:	42a3      	cmp	r3, r4
 8011a32:	d3f3      	bcc.n	8011a1c <__mcmp+0x18>
 8011a34:	e7fb      	b.n	8011a2e <__mcmp+0x2a>
 8011a36:	2001      	movs	r0, #1
 8011a38:	e7f9      	b.n	8011a2e <__mcmp+0x2a>
	...

08011a3c <__mdiff>:
 8011a3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a40:	4689      	mov	r9, r1
 8011a42:	4606      	mov	r6, r0
 8011a44:	4611      	mov	r1, r2
 8011a46:	4648      	mov	r0, r9
 8011a48:	4614      	mov	r4, r2
 8011a4a:	f7ff ffdb 	bl	8011a04 <__mcmp>
 8011a4e:	1e05      	subs	r5, r0, #0
 8011a50:	d112      	bne.n	8011a78 <__mdiff+0x3c>
 8011a52:	4629      	mov	r1, r5
 8011a54:	4630      	mov	r0, r6
 8011a56:	f7ff fd11 	bl	801147c <_Balloc>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	b928      	cbnz	r0, 8011a6a <__mdiff+0x2e>
 8011a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8011b5c <__mdiff+0x120>)
 8011a60:	f240 2137 	movw	r1, #567	@ 0x237
 8011a64:	483e      	ldr	r0, [pc, #248]	@ (8011b60 <__mdiff+0x124>)
 8011a66:	f001 f941 	bl	8012cec <__assert_func>
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a70:	4610      	mov	r0, r2
 8011a72:	b003      	add	sp, #12
 8011a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a78:	bfbc      	itt	lt
 8011a7a:	464b      	movlt	r3, r9
 8011a7c:	46a1      	movlt	r9, r4
 8011a7e:	4630      	mov	r0, r6
 8011a80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011a84:	bfba      	itte	lt
 8011a86:	461c      	movlt	r4, r3
 8011a88:	2501      	movlt	r5, #1
 8011a8a:	2500      	movge	r5, #0
 8011a8c:	f7ff fcf6 	bl	801147c <_Balloc>
 8011a90:	4602      	mov	r2, r0
 8011a92:	b918      	cbnz	r0, 8011a9c <__mdiff+0x60>
 8011a94:	4b31      	ldr	r3, [pc, #196]	@ (8011b5c <__mdiff+0x120>)
 8011a96:	f240 2145 	movw	r1, #581	@ 0x245
 8011a9a:	e7e3      	b.n	8011a64 <__mdiff+0x28>
 8011a9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011aa0:	6926      	ldr	r6, [r4, #16]
 8011aa2:	60c5      	str	r5, [r0, #12]
 8011aa4:	f109 0310 	add.w	r3, r9, #16
 8011aa8:	f109 0514 	add.w	r5, r9, #20
 8011aac:	f104 0e14 	add.w	lr, r4, #20
 8011ab0:	f100 0b14 	add.w	fp, r0, #20
 8011ab4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011ab8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011abc:	9301      	str	r3, [sp, #4]
 8011abe:	46d9      	mov	r9, fp
 8011ac0:	f04f 0c00 	mov.w	ip, #0
 8011ac4:	9b01      	ldr	r3, [sp, #4]
 8011ac6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011aca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011ace:	9301      	str	r3, [sp, #4]
 8011ad0:	fa1f f38a 	uxth.w	r3, sl
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	b283      	uxth	r3, r0
 8011ad8:	1acb      	subs	r3, r1, r3
 8011ada:	0c00      	lsrs	r0, r0, #16
 8011adc:	4463      	add	r3, ip
 8011ade:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011ae2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011aec:	4576      	cmp	r6, lr
 8011aee:	f849 3b04 	str.w	r3, [r9], #4
 8011af2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011af6:	d8e5      	bhi.n	8011ac4 <__mdiff+0x88>
 8011af8:	1b33      	subs	r3, r6, r4
 8011afa:	3b15      	subs	r3, #21
 8011afc:	f023 0303 	bic.w	r3, r3, #3
 8011b00:	3415      	adds	r4, #21
 8011b02:	3304      	adds	r3, #4
 8011b04:	42a6      	cmp	r6, r4
 8011b06:	bf38      	it	cc
 8011b08:	2304      	movcc	r3, #4
 8011b0a:	441d      	add	r5, r3
 8011b0c:	445b      	add	r3, fp
 8011b0e:	461e      	mov	r6, r3
 8011b10:	462c      	mov	r4, r5
 8011b12:	4544      	cmp	r4, r8
 8011b14:	d30e      	bcc.n	8011b34 <__mdiff+0xf8>
 8011b16:	f108 0103 	add.w	r1, r8, #3
 8011b1a:	1b49      	subs	r1, r1, r5
 8011b1c:	f021 0103 	bic.w	r1, r1, #3
 8011b20:	3d03      	subs	r5, #3
 8011b22:	45a8      	cmp	r8, r5
 8011b24:	bf38      	it	cc
 8011b26:	2100      	movcc	r1, #0
 8011b28:	440b      	add	r3, r1
 8011b2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011b2e:	b191      	cbz	r1, 8011b56 <__mdiff+0x11a>
 8011b30:	6117      	str	r7, [r2, #16]
 8011b32:	e79d      	b.n	8011a70 <__mdiff+0x34>
 8011b34:	f854 1b04 	ldr.w	r1, [r4], #4
 8011b38:	46e6      	mov	lr, ip
 8011b3a:	0c08      	lsrs	r0, r1, #16
 8011b3c:	fa1c fc81 	uxtah	ip, ip, r1
 8011b40:	4471      	add	r1, lr
 8011b42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011b46:	b289      	uxth	r1, r1
 8011b48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011b4c:	f846 1b04 	str.w	r1, [r6], #4
 8011b50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b54:	e7dd      	b.n	8011b12 <__mdiff+0xd6>
 8011b56:	3f01      	subs	r7, #1
 8011b58:	e7e7      	b.n	8011b2a <__mdiff+0xee>
 8011b5a:	bf00      	nop
 8011b5c:	0801527f 	.word	0x0801527f
 8011b60:	080152f0 	.word	0x080152f0

08011b64 <__ulp>:
 8011b64:	b082      	sub	sp, #8
 8011b66:	ed8d 0b00 	vstr	d0, [sp]
 8011b6a:	9a01      	ldr	r2, [sp, #4]
 8011b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8011bac <__ulp+0x48>)
 8011b6e:	4013      	ands	r3, r2
 8011b70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	dc08      	bgt.n	8011b8a <__ulp+0x26>
 8011b78:	425b      	negs	r3, r3
 8011b7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011b7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011b82:	da04      	bge.n	8011b8e <__ulp+0x2a>
 8011b84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011b88:	4113      	asrs	r3, r2
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	e008      	b.n	8011ba0 <__ulp+0x3c>
 8011b8e:	f1a2 0314 	sub.w	r3, r2, #20
 8011b92:	2b1e      	cmp	r3, #30
 8011b94:	bfda      	itte	le
 8011b96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011b9a:	40da      	lsrle	r2, r3
 8011b9c:	2201      	movgt	r2, #1
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	4619      	mov	r1, r3
 8011ba2:	4610      	mov	r0, r2
 8011ba4:	ec41 0b10 	vmov	d0, r0, r1
 8011ba8:	b002      	add	sp, #8
 8011baa:	4770      	bx	lr
 8011bac:	7ff00000 	.word	0x7ff00000

08011bb0 <__b2d>:
 8011bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bb4:	6906      	ldr	r6, [r0, #16]
 8011bb6:	f100 0814 	add.w	r8, r0, #20
 8011bba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011bbe:	1f37      	subs	r7, r6, #4
 8011bc0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	f7ff fd4b 	bl	8011660 <__hi0bits>
 8011bca:	f1c0 0320 	rsb	r3, r0, #32
 8011bce:	280a      	cmp	r0, #10
 8011bd0:	600b      	str	r3, [r1, #0]
 8011bd2:	491b      	ldr	r1, [pc, #108]	@ (8011c40 <__b2d+0x90>)
 8011bd4:	dc15      	bgt.n	8011c02 <__b2d+0x52>
 8011bd6:	f1c0 0c0b 	rsb	ip, r0, #11
 8011bda:	fa22 f30c 	lsr.w	r3, r2, ip
 8011bde:	45b8      	cmp	r8, r7
 8011be0:	ea43 0501 	orr.w	r5, r3, r1
 8011be4:	bf34      	ite	cc
 8011be6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011bea:	2300      	movcs	r3, #0
 8011bec:	3015      	adds	r0, #21
 8011bee:	fa02 f000 	lsl.w	r0, r2, r0
 8011bf2:	fa23 f30c 	lsr.w	r3, r3, ip
 8011bf6:	4303      	orrs	r3, r0
 8011bf8:	461c      	mov	r4, r3
 8011bfa:	ec45 4b10 	vmov	d0, r4, r5
 8011bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c02:	45b8      	cmp	r8, r7
 8011c04:	bf3a      	itte	cc
 8011c06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c0a:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c0e:	2300      	movcs	r3, #0
 8011c10:	380b      	subs	r0, #11
 8011c12:	d012      	beq.n	8011c3a <__b2d+0x8a>
 8011c14:	f1c0 0120 	rsb	r1, r0, #32
 8011c18:	fa23 f401 	lsr.w	r4, r3, r1
 8011c1c:	4082      	lsls	r2, r0
 8011c1e:	4322      	orrs	r2, r4
 8011c20:	4547      	cmp	r7, r8
 8011c22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c26:	bf8c      	ite	hi
 8011c28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011c2c:	2200      	movls	r2, #0
 8011c2e:	4083      	lsls	r3, r0
 8011c30:	40ca      	lsrs	r2, r1
 8011c32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011c36:	4313      	orrs	r3, r2
 8011c38:	e7de      	b.n	8011bf8 <__b2d+0x48>
 8011c3a:	ea42 0501 	orr.w	r5, r2, r1
 8011c3e:	e7db      	b.n	8011bf8 <__b2d+0x48>
 8011c40:	3ff00000 	.word	0x3ff00000

08011c44 <__d2b>:
 8011c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c48:	460f      	mov	r7, r1
 8011c4a:	2101      	movs	r1, #1
 8011c4c:	ec59 8b10 	vmov	r8, r9, d0
 8011c50:	4616      	mov	r6, r2
 8011c52:	f7ff fc13 	bl	801147c <_Balloc>
 8011c56:	4604      	mov	r4, r0
 8011c58:	b930      	cbnz	r0, 8011c68 <__d2b+0x24>
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	4b23      	ldr	r3, [pc, #140]	@ (8011cec <__d2b+0xa8>)
 8011c5e:	4824      	ldr	r0, [pc, #144]	@ (8011cf0 <__d2b+0xac>)
 8011c60:	f240 310f 	movw	r1, #783	@ 0x30f
 8011c64:	f001 f842 	bl	8012cec <__assert_func>
 8011c68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011c6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011c70:	b10d      	cbz	r5, 8011c76 <__d2b+0x32>
 8011c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011c76:	9301      	str	r3, [sp, #4]
 8011c78:	f1b8 0300 	subs.w	r3, r8, #0
 8011c7c:	d023      	beq.n	8011cc6 <__d2b+0x82>
 8011c7e:	4668      	mov	r0, sp
 8011c80:	9300      	str	r3, [sp, #0]
 8011c82:	f7ff fd0c 	bl	801169e <__lo0bits>
 8011c86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011c8a:	b1d0      	cbz	r0, 8011cc2 <__d2b+0x7e>
 8011c8c:	f1c0 0320 	rsb	r3, r0, #32
 8011c90:	fa02 f303 	lsl.w	r3, r2, r3
 8011c94:	430b      	orrs	r3, r1
 8011c96:	40c2      	lsrs	r2, r0
 8011c98:	6163      	str	r3, [r4, #20]
 8011c9a:	9201      	str	r2, [sp, #4]
 8011c9c:	9b01      	ldr	r3, [sp, #4]
 8011c9e:	61a3      	str	r3, [r4, #24]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	bf0c      	ite	eq
 8011ca4:	2201      	moveq	r2, #1
 8011ca6:	2202      	movne	r2, #2
 8011ca8:	6122      	str	r2, [r4, #16]
 8011caa:	b1a5      	cbz	r5, 8011cd6 <__d2b+0x92>
 8011cac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011cb0:	4405      	add	r5, r0
 8011cb2:	603d      	str	r5, [r7, #0]
 8011cb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011cb8:	6030      	str	r0, [r6, #0]
 8011cba:	4620      	mov	r0, r4
 8011cbc:	b003      	add	sp, #12
 8011cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cc2:	6161      	str	r1, [r4, #20]
 8011cc4:	e7ea      	b.n	8011c9c <__d2b+0x58>
 8011cc6:	a801      	add	r0, sp, #4
 8011cc8:	f7ff fce9 	bl	801169e <__lo0bits>
 8011ccc:	9b01      	ldr	r3, [sp, #4]
 8011cce:	6163      	str	r3, [r4, #20]
 8011cd0:	3020      	adds	r0, #32
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	e7e8      	b.n	8011ca8 <__d2b+0x64>
 8011cd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011cda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011cde:	6038      	str	r0, [r7, #0]
 8011ce0:	6918      	ldr	r0, [r3, #16]
 8011ce2:	f7ff fcbd 	bl	8011660 <__hi0bits>
 8011ce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cea:	e7e5      	b.n	8011cb8 <__d2b+0x74>
 8011cec:	0801527f 	.word	0x0801527f
 8011cf0:	080152f0 	.word	0x080152f0

08011cf4 <__ratio>:
 8011cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011cf8:	b085      	sub	sp, #20
 8011cfa:	e9cd 1000 	strd	r1, r0, [sp]
 8011cfe:	a902      	add	r1, sp, #8
 8011d00:	f7ff ff56 	bl	8011bb0 <__b2d>
 8011d04:	9800      	ldr	r0, [sp, #0]
 8011d06:	a903      	add	r1, sp, #12
 8011d08:	ec55 4b10 	vmov	r4, r5, d0
 8011d0c:	f7ff ff50 	bl	8011bb0 <__b2d>
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	6919      	ldr	r1, [r3, #16]
 8011d14:	9b00      	ldr	r3, [sp, #0]
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	1ac9      	subs	r1, r1, r3
 8011d1a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d1e:	1a9b      	subs	r3, r3, r2
 8011d20:	ec5b ab10 	vmov	sl, fp, d0
 8011d24:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	bfce      	itee	gt
 8011d2c:	462a      	movgt	r2, r5
 8011d2e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d32:	465a      	movle	r2, fp
 8011d34:	462f      	mov	r7, r5
 8011d36:	46d9      	mov	r9, fp
 8011d38:	bfcc      	ite	gt
 8011d3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d3e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011d42:	464b      	mov	r3, r9
 8011d44:	4652      	mov	r2, sl
 8011d46:	4620      	mov	r0, r4
 8011d48:	4639      	mov	r1, r7
 8011d4a:	f7ee fd67 	bl	800081c <__aeabi_ddiv>
 8011d4e:	ec41 0b10 	vmov	d0, r0, r1
 8011d52:	b005      	add	sp, #20
 8011d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d58 <__copybits>:
 8011d58:	3901      	subs	r1, #1
 8011d5a:	b570      	push	{r4, r5, r6, lr}
 8011d5c:	1149      	asrs	r1, r1, #5
 8011d5e:	6914      	ldr	r4, [r2, #16]
 8011d60:	3101      	adds	r1, #1
 8011d62:	f102 0314 	add.w	r3, r2, #20
 8011d66:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d6e:	1f05      	subs	r5, r0, #4
 8011d70:	42a3      	cmp	r3, r4
 8011d72:	d30c      	bcc.n	8011d8e <__copybits+0x36>
 8011d74:	1aa3      	subs	r3, r4, r2
 8011d76:	3b11      	subs	r3, #17
 8011d78:	f023 0303 	bic.w	r3, r3, #3
 8011d7c:	3211      	adds	r2, #17
 8011d7e:	42a2      	cmp	r2, r4
 8011d80:	bf88      	it	hi
 8011d82:	2300      	movhi	r3, #0
 8011d84:	4418      	add	r0, r3
 8011d86:	2300      	movs	r3, #0
 8011d88:	4288      	cmp	r0, r1
 8011d8a:	d305      	bcc.n	8011d98 <__copybits+0x40>
 8011d8c:	bd70      	pop	{r4, r5, r6, pc}
 8011d8e:	f853 6b04 	ldr.w	r6, [r3], #4
 8011d92:	f845 6f04 	str.w	r6, [r5, #4]!
 8011d96:	e7eb      	b.n	8011d70 <__copybits+0x18>
 8011d98:	f840 3b04 	str.w	r3, [r0], #4
 8011d9c:	e7f4      	b.n	8011d88 <__copybits+0x30>

08011d9e <__any_on>:
 8011d9e:	f100 0214 	add.w	r2, r0, #20
 8011da2:	6900      	ldr	r0, [r0, #16]
 8011da4:	114b      	asrs	r3, r1, #5
 8011da6:	4298      	cmp	r0, r3
 8011da8:	b510      	push	{r4, lr}
 8011daa:	db11      	blt.n	8011dd0 <__any_on+0x32>
 8011dac:	dd0a      	ble.n	8011dc4 <__any_on+0x26>
 8011dae:	f011 011f 	ands.w	r1, r1, #31
 8011db2:	d007      	beq.n	8011dc4 <__any_on+0x26>
 8011db4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011db8:	fa24 f001 	lsr.w	r0, r4, r1
 8011dbc:	fa00 f101 	lsl.w	r1, r0, r1
 8011dc0:	428c      	cmp	r4, r1
 8011dc2:	d10b      	bne.n	8011ddc <__any_on+0x3e>
 8011dc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d803      	bhi.n	8011dd4 <__any_on+0x36>
 8011dcc:	2000      	movs	r0, #0
 8011dce:	bd10      	pop	{r4, pc}
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	e7f7      	b.n	8011dc4 <__any_on+0x26>
 8011dd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011dd8:	2900      	cmp	r1, #0
 8011dda:	d0f5      	beq.n	8011dc8 <__any_on+0x2a>
 8011ddc:	2001      	movs	r0, #1
 8011dde:	e7f6      	b.n	8011dce <__any_on+0x30>

08011de0 <_malloc_usable_size_r>:
 8011de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011de4:	1f18      	subs	r0, r3, #4
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	bfbc      	itt	lt
 8011dea:	580b      	ldrlt	r3, [r1, r0]
 8011dec:	18c0      	addlt	r0, r0, r3
 8011dee:	4770      	bx	lr

08011df0 <__ascii_wctomb>:
 8011df0:	4603      	mov	r3, r0
 8011df2:	4608      	mov	r0, r1
 8011df4:	b141      	cbz	r1, 8011e08 <__ascii_wctomb+0x18>
 8011df6:	2aff      	cmp	r2, #255	@ 0xff
 8011df8:	d904      	bls.n	8011e04 <__ascii_wctomb+0x14>
 8011dfa:	228a      	movs	r2, #138	@ 0x8a
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8011e02:	4770      	bx	lr
 8011e04:	700a      	strb	r2, [r1, #0]
 8011e06:	2001      	movs	r0, #1
 8011e08:	4770      	bx	lr

08011e0a <__ssputs_r>:
 8011e0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e0e:	688e      	ldr	r6, [r1, #8]
 8011e10:	461f      	mov	r7, r3
 8011e12:	42be      	cmp	r6, r7
 8011e14:	680b      	ldr	r3, [r1, #0]
 8011e16:	4682      	mov	sl, r0
 8011e18:	460c      	mov	r4, r1
 8011e1a:	4690      	mov	r8, r2
 8011e1c:	d82d      	bhi.n	8011e7a <__ssputs_r+0x70>
 8011e1e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e22:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011e26:	d026      	beq.n	8011e76 <__ssputs_r+0x6c>
 8011e28:	6965      	ldr	r5, [r4, #20]
 8011e2a:	6909      	ldr	r1, [r1, #16]
 8011e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011e30:	eba3 0901 	sub.w	r9, r3, r1
 8011e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011e38:	1c7b      	adds	r3, r7, #1
 8011e3a:	444b      	add	r3, r9
 8011e3c:	106d      	asrs	r5, r5, #1
 8011e3e:	429d      	cmp	r5, r3
 8011e40:	bf38      	it	cc
 8011e42:	461d      	movcc	r5, r3
 8011e44:	0553      	lsls	r3, r2, #21
 8011e46:	d527      	bpl.n	8011e98 <__ssputs_r+0x8e>
 8011e48:	4629      	mov	r1, r5
 8011e4a:	f7fc fac7 	bl	800e3dc <_malloc_r>
 8011e4e:	4606      	mov	r6, r0
 8011e50:	b360      	cbz	r0, 8011eac <__ssputs_r+0xa2>
 8011e52:	6921      	ldr	r1, [r4, #16]
 8011e54:	464a      	mov	r2, r9
 8011e56:	f7fe f916 	bl	8010086 <memcpy>
 8011e5a:	89a3      	ldrh	r3, [r4, #12]
 8011e5c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e64:	81a3      	strh	r3, [r4, #12]
 8011e66:	6126      	str	r6, [r4, #16]
 8011e68:	6165      	str	r5, [r4, #20]
 8011e6a:	444e      	add	r6, r9
 8011e6c:	eba5 0509 	sub.w	r5, r5, r9
 8011e70:	6026      	str	r6, [r4, #0]
 8011e72:	60a5      	str	r5, [r4, #8]
 8011e74:	463e      	mov	r6, r7
 8011e76:	42be      	cmp	r6, r7
 8011e78:	d900      	bls.n	8011e7c <__ssputs_r+0x72>
 8011e7a:	463e      	mov	r6, r7
 8011e7c:	6820      	ldr	r0, [r4, #0]
 8011e7e:	4632      	mov	r2, r6
 8011e80:	4641      	mov	r1, r8
 8011e82:	f000 fef6 	bl	8012c72 <memmove>
 8011e86:	68a3      	ldr	r3, [r4, #8]
 8011e88:	1b9b      	subs	r3, r3, r6
 8011e8a:	60a3      	str	r3, [r4, #8]
 8011e8c:	6823      	ldr	r3, [r4, #0]
 8011e8e:	4433      	add	r3, r6
 8011e90:	6023      	str	r3, [r4, #0]
 8011e92:	2000      	movs	r0, #0
 8011e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e98:	462a      	mov	r2, r5
 8011e9a:	f7fc fb33 	bl	800e504 <_realloc_r>
 8011e9e:	4606      	mov	r6, r0
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d1e0      	bne.n	8011e66 <__ssputs_r+0x5c>
 8011ea4:	6921      	ldr	r1, [r4, #16]
 8011ea6:	4650      	mov	r0, sl
 8011ea8:	f7fe ff52 	bl	8010d50 <_free_r>
 8011eac:	230c      	movs	r3, #12
 8011eae:	f8ca 3000 	str.w	r3, [sl]
 8011eb2:	89a3      	ldrh	r3, [r4, #12]
 8011eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011eb8:	81a3      	strh	r3, [r4, #12]
 8011eba:	f04f 30ff 	mov.w	r0, #4294967295
 8011ebe:	e7e9      	b.n	8011e94 <__ssputs_r+0x8a>

08011ec0 <_svfiprintf_r>:
 8011ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ec4:	4698      	mov	r8, r3
 8011ec6:	898b      	ldrh	r3, [r1, #12]
 8011ec8:	061b      	lsls	r3, r3, #24
 8011eca:	b09d      	sub	sp, #116	@ 0x74
 8011ecc:	4607      	mov	r7, r0
 8011ece:	460d      	mov	r5, r1
 8011ed0:	4614      	mov	r4, r2
 8011ed2:	d510      	bpl.n	8011ef6 <_svfiprintf_r+0x36>
 8011ed4:	690b      	ldr	r3, [r1, #16]
 8011ed6:	b973      	cbnz	r3, 8011ef6 <_svfiprintf_r+0x36>
 8011ed8:	2140      	movs	r1, #64	@ 0x40
 8011eda:	f7fc fa7f 	bl	800e3dc <_malloc_r>
 8011ede:	6028      	str	r0, [r5, #0]
 8011ee0:	6128      	str	r0, [r5, #16]
 8011ee2:	b930      	cbnz	r0, 8011ef2 <_svfiprintf_r+0x32>
 8011ee4:	230c      	movs	r3, #12
 8011ee6:	603b      	str	r3, [r7, #0]
 8011ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8011eec:	b01d      	add	sp, #116	@ 0x74
 8011eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef2:	2340      	movs	r3, #64	@ 0x40
 8011ef4:	616b      	str	r3, [r5, #20]
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8011efa:	2320      	movs	r3, #32
 8011efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f04:	2330      	movs	r3, #48	@ 0x30
 8011f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80120a4 <_svfiprintf_r+0x1e4>
 8011f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011f0e:	f04f 0901 	mov.w	r9, #1
 8011f12:	4623      	mov	r3, r4
 8011f14:	469a      	mov	sl, r3
 8011f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f1a:	b10a      	cbz	r2, 8011f20 <_svfiprintf_r+0x60>
 8011f1c:	2a25      	cmp	r2, #37	@ 0x25
 8011f1e:	d1f9      	bne.n	8011f14 <_svfiprintf_r+0x54>
 8011f20:	ebba 0b04 	subs.w	fp, sl, r4
 8011f24:	d00b      	beq.n	8011f3e <_svfiprintf_r+0x7e>
 8011f26:	465b      	mov	r3, fp
 8011f28:	4622      	mov	r2, r4
 8011f2a:	4629      	mov	r1, r5
 8011f2c:	4638      	mov	r0, r7
 8011f2e:	f7ff ff6c 	bl	8011e0a <__ssputs_r>
 8011f32:	3001      	adds	r0, #1
 8011f34:	f000 80a7 	beq.w	8012086 <_svfiprintf_r+0x1c6>
 8011f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f3a:	445a      	add	r2, fp
 8011f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8011f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f000 809f 	beq.w	8012086 <_svfiprintf_r+0x1c6>
 8011f48:	2300      	movs	r3, #0
 8011f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011f52:	f10a 0a01 	add.w	sl, sl, #1
 8011f56:	9304      	str	r3, [sp, #16]
 8011f58:	9307      	str	r3, [sp, #28]
 8011f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8011f60:	4654      	mov	r4, sl
 8011f62:	2205      	movs	r2, #5
 8011f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f68:	484e      	ldr	r0, [pc, #312]	@ (80120a4 <_svfiprintf_r+0x1e4>)
 8011f6a:	f7ee f919 	bl	80001a0 <memchr>
 8011f6e:	9a04      	ldr	r2, [sp, #16]
 8011f70:	b9d8      	cbnz	r0, 8011faa <_svfiprintf_r+0xea>
 8011f72:	06d0      	lsls	r0, r2, #27
 8011f74:	bf44      	itt	mi
 8011f76:	2320      	movmi	r3, #32
 8011f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f7c:	0711      	lsls	r1, r2, #28
 8011f7e:	bf44      	itt	mi
 8011f80:	232b      	movmi	r3, #43	@ 0x2b
 8011f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011f86:	f89a 3000 	ldrb.w	r3, [sl]
 8011f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8011f8c:	d015      	beq.n	8011fba <_svfiprintf_r+0xfa>
 8011f8e:	9a07      	ldr	r2, [sp, #28]
 8011f90:	4654      	mov	r4, sl
 8011f92:	2000      	movs	r0, #0
 8011f94:	f04f 0c0a 	mov.w	ip, #10
 8011f98:	4621      	mov	r1, r4
 8011f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f9e:	3b30      	subs	r3, #48	@ 0x30
 8011fa0:	2b09      	cmp	r3, #9
 8011fa2:	d94b      	bls.n	801203c <_svfiprintf_r+0x17c>
 8011fa4:	b1b0      	cbz	r0, 8011fd4 <_svfiprintf_r+0x114>
 8011fa6:	9207      	str	r2, [sp, #28]
 8011fa8:	e014      	b.n	8011fd4 <_svfiprintf_r+0x114>
 8011faa:	eba0 0308 	sub.w	r3, r0, r8
 8011fae:	fa09 f303 	lsl.w	r3, r9, r3
 8011fb2:	4313      	orrs	r3, r2
 8011fb4:	9304      	str	r3, [sp, #16]
 8011fb6:	46a2      	mov	sl, r4
 8011fb8:	e7d2      	b.n	8011f60 <_svfiprintf_r+0xa0>
 8011fba:	9b03      	ldr	r3, [sp, #12]
 8011fbc:	1d19      	adds	r1, r3, #4
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	9103      	str	r1, [sp, #12]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	bfbb      	ittet	lt
 8011fc6:	425b      	neglt	r3, r3
 8011fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8011fcc:	9307      	strge	r3, [sp, #28]
 8011fce:	9307      	strlt	r3, [sp, #28]
 8011fd0:	bfb8      	it	lt
 8011fd2:	9204      	strlt	r2, [sp, #16]
 8011fd4:	7823      	ldrb	r3, [r4, #0]
 8011fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8011fd8:	d10a      	bne.n	8011ff0 <_svfiprintf_r+0x130>
 8011fda:	7863      	ldrb	r3, [r4, #1]
 8011fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011fde:	d132      	bne.n	8012046 <_svfiprintf_r+0x186>
 8011fe0:	9b03      	ldr	r3, [sp, #12]
 8011fe2:	1d1a      	adds	r2, r3, #4
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	9203      	str	r2, [sp, #12]
 8011fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011fec:	3402      	adds	r4, #2
 8011fee:	9305      	str	r3, [sp, #20]
 8011ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80120b4 <_svfiprintf_r+0x1f4>
 8011ff4:	7821      	ldrb	r1, [r4, #0]
 8011ff6:	2203      	movs	r2, #3
 8011ff8:	4650      	mov	r0, sl
 8011ffa:	f7ee f8d1 	bl	80001a0 <memchr>
 8011ffe:	b138      	cbz	r0, 8012010 <_svfiprintf_r+0x150>
 8012000:	9b04      	ldr	r3, [sp, #16]
 8012002:	eba0 000a 	sub.w	r0, r0, sl
 8012006:	2240      	movs	r2, #64	@ 0x40
 8012008:	4082      	lsls	r2, r0
 801200a:	4313      	orrs	r3, r2
 801200c:	3401      	adds	r4, #1
 801200e:	9304      	str	r3, [sp, #16]
 8012010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012014:	4824      	ldr	r0, [pc, #144]	@ (80120a8 <_svfiprintf_r+0x1e8>)
 8012016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801201a:	2206      	movs	r2, #6
 801201c:	f7ee f8c0 	bl	80001a0 <memchr>
 8012020:	2800      	cmp	r0, #0
 8012022:	d036      	beq.n	8012092 <_svfiprintf_r+0x1d2>
 8012024:	4b21      	ldr	r3, [pc, #132]	@ (80120ac <_svfiprintf_r+0x1ec>)
 8012026:	bb1b      	cbnz	r3, 8012070 <_svfiprintf_r+0x1b0>
 8012028:	9b03      	ldr	r3, [sp, #12]
 801202a:	3307      	adds	r3, #7
 801202c:	f023 0307 	bic.w	r3, r3, #7
 8012030:	3308      	adds	r3, #8
 8012032:	9303      	str	r3, [sp, #12]
 8012034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012036:	4433      	add	r3, r6
 8012038:	9309      	str	r3, [sp, #36]	@ 0x24
 801203a:	e76a      	b.n	8011f12 <_svfiprintf_r+0x52>
 801203c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012040:	460c      	mov	r4, r1
 8012042:	2001      	movs	r0, #1
 8012044:	e7a8      	b.n	8011f98 <_svfiprintf_r+0xd8>
 8012046:	2300      	movs	r3, #0
 8012048:	3401      	adds	r4, #1
 801204a:	9305      	str	r3, [sp, #20]
 801204c:	4619      	mov	r1, r3
 801204e:	f04f 0c0a 	mov.w	ip, #10
 8012052:	4620      	mov	r0, r4
 8012054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012058:	3a30      	subs	r2, #48	@ 0x30
 801205a:	2a09      	cmp	r2, #9
 801205c:	d903      	bls.n	8012066 <_svfiprintf_r+0x1a6>
 801205e:	2b00      	cmp	r3, #0
 8012060:	d0c6      	beq.n	8011ff0 <_svfiprintf_r+0x130>
 8012062:	9105      	str	r1, [sp, #20]
 8012064:	e7c4      	b.n	8011ff0 <_svfiprintf_r+0x130>
 8012066:	fb0c 2101 	mla	r1, ip, r1, r2
 801206a:	4604      	mov	r4, r0
 801206c:	2301      	movs	r3, #1
 801206e:	e7f0      	b.n	8012052 <_svfiprintf_r+0x192>
 8012070:	ab03      	add	r3, sp, #12
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	462a      	mov	r2, r5
 8012076:	4b0e      	ldr	r3, [pc, #56]	@ (80120b0 <_svfiprintf_r+0x1f0>)
 8012078:	a904      	add	r1, sp, #16
 801207a:	4638      	mov	r0, r7
 801207c:	f7fd f920 	bl	800f2c0 <_printf_float>
 8012080:	1c42      	adds	r2, r0, #1
 8012082:	4606      	mov	r6, r0
 8012084:	d1d6      	bne.n	8012034 <_svfiprintf_r+0x174>
 8012086:	89ab      	ldrh	r3, [r5, #12]
 8012088:	065b      	lsls	r3, r3, #25
 801208a:	f53f af2d 	bmi.w	8011ee8 <_svfiprintf_r+0x28>
 801208e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012090:	e72c      	b.n	8011eec <_svfiprintf_r+0x2c>
 8012092:	ab03      	add	r3, sp, #12
 8012094:	9300      	str	r3, [sp, #0]
 8012096:	462a      	mov	r2, r5
 8012098:	4b05      	ldr	r3, [pc, #20]	@ (80120b0 <_svfiprintf_r+0x1f0>)
 801209a:	a904      	add	r1, sp, #16
 801209c:	4638      	mov	r0, r7
 801209e:	f7fd fba7 	bl	800f7f0 <_printf_i>
 80120a2:	e7ed      	b.n	8012080 <_svfiprintf_r+0x1c0>
 80120a4:	08015448 	.word	0x08015448
 80120a8:	08015452 	.word	0x08015452
 80120ac:	0800f2c1 	.word	0x0800f2c1
 80120b0:	08011e0b 	.word	0x08011e0b
 80120b4:	0801544e 	.word	0x0801544e

080120b8 <_sungetc_r>:
 80120b8:	b538      	push	{r3, r4, r5, lr}
 80120ba:	1c4b      	adds	r3, r1, #1
 80120bc:	4614      	mov	r4, r2
 80120be:	d103      	bne.n	80120c8 <_sungetc_r+0x10>
 80120c0:	f04f 35ff 	mov.w	r5, #4294967295
 80120c4:	4628      	mov	r0, r5
 80120c6:	bd38      	pop	{r3, r4, r5, pc}
 80120c8:	8993      	ldrh	r3, [r2, #12]
 80120ca:	f023 0320 	bic.w	r3, r3, #32
 80120ce:	8193      	strh	r3, [r2, #12]
 80120d0:	6853      	ldr	r3, [r2, #4]
 80120d2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80120d4:	b2cd      	uxtb	r5, r1
 80120d6:	b18a      	cbz	r2, 80120fc <_sungetc_r+0x44>
 80120d8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80120da:	429a      	cmp	r2, r3
 80120dc:	dd08      	ble.n	80120f0 <_sungetc_r+0x38>
 80120de:	6823      	ldr	r3, [r4, #0]
 80120e0:	1e5a      	subs	r2, r3, #1
 80120e2:	6022      	str	r2, [r4, #0]
 80120e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80120e8:	6863      	ldr	r3, [r4, #4]
 80120ea:	3301      	adds	r3, #1
 80120ec:	6063      	str	r3, [r4, #4]
 80120ee:	e7e9      	b.n	80120c4 <_sungetc_r+0xc>
 80120f0:	4621      	mov	r1, r4
 80120f2:	f000 fd84 	bl	8012bfe <__submore>
 80120f6:	2800      	cmp	r0, #0
 80120f8:	d0f1      	beq.n	80120de <_sungetc_r+0x26>
 80120fa:	e7e1      	b.n	80120c0 <_sungetc_r+0x8>
 80120fc:	6921      	ldr	r1, [r4, #16]
 80120fe:	6822      	ldr	r2, [r4, #0]
 8012100:	b141      	cbz	r1, 8012114 <_sungetc_r+0x5c>
 8012102:	4291      	cmp	r1, r2
 8012104:	d206      	bcs.n	8012114 <_sungetc_r+0x5c>
 8012106:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801210a:	42a9      	cmp	r1, r5
 801210c:	d102      	bne.n	8012114 <_sungetc_r+0x5c>
 801210e:	3a01      	subs	r2, #1
 8012110:	6022      	str	r2, [r4, #0]
 8012112:	e7ea      	b.n	80120ea <_sungetc_r+0x32>
 8012114:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012118:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801211c:	6363      	str	r3, [r4, #52]	@ 0x34
 801211e:	2303      	movs	r3, #3
 8012120:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012122:	4623      	mov	r3, r4
 8012124:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	2301      	movs	r3, #1
 801212c:	e7de      	b.n	80120ec <_sungetc_r+0x34>

0801212e <__ssrefill_r>:
 801212e:	b510      	push	{r4, lr}
 8012130:	460c      	mov	r4, r1
 8012132:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012134:	b169      	cbz	r1, 8012152 <__ssrefill_r+0x24>
 8012136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801213a:	4299      	cmp	r1, r3
 801213c:	d001      	beq.n	8012142 <__ssrefill_r+0x14>
 801213e:	f7fe fe07 	bl	8010d50 <_free_r>
 8012142:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012144:	6063      	str	r3, [r4, #4]
 8012146:	2000      	movs	r0, #0
 8012148:	6360      	str	r0, [r4, #52]	@ 0x34
 801214a:	b113      	cbz	r3, 8012152 <__ssrefill_r+0x24>
 801214c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801214e:	6023      	str	r3, [r4, #0]
 8012150:	bd10      	pop	{r4, pc}
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	2300      	movs	r3, #0
 8012158:	6063      	str	r3, [r4, #4]
 801215a:	89a3      	ldrh	r3, [r4, #12]
 801215c:	f043 0320 	orr.w	r3, r3, #32
 8012160:	81a3      	strh	r3, [r4, #12]
 8012162:	f04f 30ff 	mov.w	r0, #4294967295
 8012166:	e7f3      	b.n	8012150 <__ssrefill_r+0x22>

08012168 <__ssvfiscanf_r>:
 8012168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801216c:	460c      	mov	r4, r1
 801216e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012172:	2100      	movs	r1, #0
 8012174:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012178:	49a5      	ldr	r1, [pc, #660]	@ (8012410 <__ssvfiscanf_r+0x2a8>)
 801217a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801217c:	f10d 0804 	add.w	r8, sp, #4
 8012180:	49a4      	ldr	r1, [pc, #656]	@ (8012414 <__ssvfiscanf_r+0x2ac>)
 8012182:	4fa5      	ldr	r7, [pc, #660]	@ (8012418 <__ssvfiscanf_r+0x2b0>)
 8012184:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012188:	4606      	mov	r6, r0
 801218a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801218c:	9300      	str	r3, [sp, #0]
 801218e:	7813      	ldrb	r3, [r2, #0]
 8012190:	2b00      	cmp	r3, #0
 8012192:	f000 8158 	beq.w	8012446 <__ssvfiscanf_r+0x2de>
 8012196:	5cf9      	ldrb	r1, [r7, r3]
 8012198:	f011 0108 	ands.w	r1, r1, #8
 801219c:	f102 0501 	add.w	r5, r2, #1
 80121a0:	d019      	beq.n	80121d6 <__ssvfiscanf_r+0x6e>
 80121a2:	6863      	ldr	r3, [r4, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	dd0f      	ble.n	80121c8 <__ssvfiscanf_r+0x60>
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	781a      	ldrb	r2, [r3, #0]
 80121ac:	5cba      	ldrb	r2, [r7, r2]
 80121ae:	0712      	lsls	r2, r2, #28
 80121b0:	d401      	bmi.n	80121b6 <__ssvfiscanf_r+0x4e>
 80121b2:	462a      	mov	r2, r5
 80121b4:	e7eb      	b.n	801218e <__ssvfiscanf_r+0x26>
 80121b6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80121b8:	3201      	adds	r2, #1
 80121ba:	9245      	str	r2, [sp, #276]	@ 0x114
 80121bc:	6862      	ldr	r2, [r4, #4]
 80121be:	3301      	adds	r3, #1
 80121c0:	3a01      	subs	r2, #1
 80121c2:	6062      	str	r2, [r4, #4]
 80121c4:	6023      	str	r3, [r4, #0]
 80121c6:	e7ec      	b.n	80121a2 <__ssvfiscanf_r+0x3a>
 80121c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80121ca:	4621      	mov	r1, r4
 80121cc:	4630      	mov	r0, r6
 80121ce:	4798      	blx	r3
 80121d0:	2800      	cmp	r0, #0
 80121d2:	d0e9      	beq.n	80121a8 <__ssvfiscanf_r+0x40>
 80121d4:	e7ed      	b.n	80121b2 <__ssvfiscanf_r+0x4a>
 80121d6:	2b25      	cmp	r3, #37	@ 0x25
 80121d8:	d012      	beq.n	8012200 <__ssvfiscanf_r+0x98>
 80121da:	4699      	mov	r9, r3
 80121dc:	6863      	ldr	r3, [r4, #4]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	f340 8093 	ble.w	801230a <__ssvfiscanf_r+0x1a2>
 80121e4:	6822      	ldr	r2, [r4, #0]
 80121e6:	7813      	ldrb	r3, [r2, #0]
 80121e8:	454b      	cmp	r3, r9
 80121ea:	f040 812c 	bne.w	8012446 <__ssvfiscanf_r+0x2de>
 80121ee:	6863      	ldr	r3, [r4, #4]
 80121f0:	3b01      	subs	r3, #1
 80121f2:	6063      	str	r3, [r4, #4]
 80121f4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80121f6:	3201      	adds	r2, #1
 80121f8:	3301      	adds	r3, #1
 80121fa:	6022      	str	r2, [r4, #0]
 80121fc:	9345      	str	r3, [sp, #276]	@ 0x114
 80121fe:	e7d8      	b.n	80121b2 <__ssvfiscanf_r+0x4a>
 8012200:	9141      	str	r1, [sp, #260]	@ 0x104
 8012202:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012204:	7853      	ldrb	r3, [r2, #1]
 8012206:	2b2a      	cmp	r3, #42	@ 0x2a
 8012208:	bf02      	ittt	eq
 801220a:	2310      	moveq	r3, #16
 801220c:	1c95      	addeq	r5, r2, #2
 801220e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012210:	220a      	movs	r2, #10
 8012212:	46a9      	mov	r9, r5
 8012214:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012218:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801221c:	2b09      	cmp	r3, #9
 801221e:	d91e      	bls.n	801225e <__ssvfiscanf_r+0xf6>
 8012220:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 801241c <__ssvfiscanf_r+0x2b4>
 8012224:	2203      	movs	r2, #3
 8012226:	4650      	mov	r0, sl
 8012228:	f7ed ffba 	bl	80001a0 <memchr>
 801222c:	b138      	cbz	r0, 801223e <__ssvfiscanf_r+0xd6>
 801222e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012230:	eba0 000a 	sub.w	r0, r0, sl
 8012234:	2301      	movs	r3, #1
 8012236:	4083      	lsls	r3, r0
 8012238:	4313      	orrs	r3, r2
 801223a:	9341      	str	r3, [sp, #260]	@ 0x104
 801223c:	464d      	mov	r5, r9
 801223e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012242:	2b78      	cmp	r3, #120	@ 0x78
 8012244:	d806      	bhi.n	8012254 <__ssvfiscanf_r+0xec>
 8012246:	2b57      	cmp	r3, #87	@ 0x57
 8012248:	d810      	bhi.n	801226c <__ssvfiscanf_r+0x104>
 801224a:	2b25      	cmp	r3, #37	@ 0x25
 801224c:	d0c5      	beq.n	80121da <__ssvfiscanf_r+0x72>
 801224e:	d857      	bhi.n	8012300 <__ssvfiscanf_r+0x198>
 8012250:	2b00      	cmp	r3, #0
 8012252:	d065      	beq.n	8012320 <__ssvfiscanf_r+0x1b8>
 8012254:	2303      	movs	r3, #3
 8012256:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012258:	230a      	movs	r3, #10
 801225a:	9342      	str	r3, [sp, #264]	@ 0x108
 801225c:	e078      	b.n	8012350 <__ssvfiscanf_r+0x1e8>
 801225e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012260:	fb02 1103 	mla	r1, r2, r3, r1
 8012264:	3930      	subs	r1, #48	@ 0x30
 8012266:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012268:	464d      	mov	r5, r9
 801226a:	e7d2      	b.n	8012212 <__ssvfiscanf_r+0xaa>
 801226c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012270:	2a20      	cmp	r2, #32
 8012272:	d8ef      	bhi.n	8012254 <__ssvfiscanf_r+0xec>
 8012274:	a101      	add	r1, pc, #4	@ (adr r1, 801227c <__ssvfiscanf_r+0x114>)
 8012276:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801227a:	bf00      	nop
 801227c:	0801232f 	.word	0x0801232f
 8012280:	08012255 	.word	0x08012255
 8012284:	08012255 	.word	0x08012255
 8012288:	08012389 	.word	0x08012389
 801228c:	08012255 	.word	0x08012255
 8012290:	08012255 	.word	0x08012255
 8012294:	08012255 	.word	0x08012255
 8012298:	08012255 	.word	0x08012255
 801229c:	08012255 	.word	0x08012255
 80122a0:	08012255 	.word	0x08012255
 80122a4:	08012255 	.word	0x08012255
 80122a8:	0801239f 	.word	0x0801239f
 80122ac:	08012385 	.word	0x08012385
 80122b0:	08012307 	.word	0x08012307
 80122b4:	08012307 	.word	0x08012307
 80122b8:	08012307 	.word	0x08012307
 80122bc:	08012255 	.word	0x08012255
 80122c0:	08012341 	.word	0x08012341
 80122c4:	08012255 	.word	0x08012255
 80122c8:	08012255 	.word	0x08012255
 80122cc:	08012255 	.word	0x08012255
 80122d0:	08012255 	.word	0x08012255
 80122d4:	080123af 	.word	0x080123af
 80122d8:	08012349 	.word	0x08012349
 80122dc:	08012327 	.word	0x08012327
 80122e0:	08012255 	.word	0x08012255
 80122e4:	08012255 	.word	0x08012255
 80122e8:	080123ab 	.word	0x080123ab
 80122ec:	08012255 	.word	0x08012255
 80122f0:	08012385 	.word	0x08012385
 80122f4:	08012255 	.word	0x08012255
 80122f8:	08012255 	.word	0x08012255
 80122fc:	0801232f 	.word	0x0801232f
 8012300:	3b45      	subs	r3, #69	@ 0x45
 8012302:	2b02      	cmp	r3, #2
 8012304:	d8a6      	bhi.n	8012254 <__ssvfiscanf_r+0xec>
 8012306:	2305      	movs	r3, #5
 8012308:	e021      	b.n	801234e <__ssvfiscanf_r+0x1e6>
 801230a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801230c:	4621      	mov	r1, r4
 801230e:	4630      	mov	r0, r6
 8012310:	4798      	blx	r3
 8012312:	2800      	cmp	r0, #0
 8012314:	f43f af66 	beq.w	80121e4 <__ssvfiscanf_r+0x7c>
 8012318:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801231a:	2800      	cmp	r0, #0
 801231c:	f040 808b 	bne.w	8012436 <__ssvfiscanf_r+0x2ce>
 8012320:	f04f 30ff 	mov.w	r0, #4294967295
 8012324:	e08b      	b.n	801243e <__ssvfiscanf_r+0x2d6>
 8012326:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012328:	f042 0220 	orr.w	r2, r2, #32
 801232c:	9241      	str	r2, [sp, #260]	@ 0x104
 801232e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012330:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012334:	9241      	str	r2, [sp, #260]	@ 0x104
 8012336:	2210      	movs	r2, #16
 8012338:	2b6e      	cmp	r3, #110	@ 0x6e
 801233a:	9242      	str	r2, [sp, #264]	@ 0x108
 801233c:	d902      	bls.n	8012344 <__ssvfiscanf_r+0x1dc>
 801233e:	e005      	b.n	801234c <__ssvfiscanf_r+0x1e4>
 8012340:	2300      	movs	r3, #0
 8012342:	9342      	str	r3, [sp, #264]	@ 0x108
 8012344:	2303      	movs	r3, #3
 8012346:	e002      	b.n	801234e <__ssvfiscanf_r+0x1e6>
 8012348:	2308      	movs	r3, #8
 801234a:	9342      	str	r3, [sp, #264]	@ 0x108
 801234c:	2304      	movs	r3, #4
 801234e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012350:	6863      	ldr	r3, [r4, #4]
 8012352:	2b00      	cmp	r3, #0
 8012354:	dd39      	ble.n	80123ca <__ssvfiscanf_r+0x262>
 8012356:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012358:	0659      	lsls	r1, r3, #25
 801235a:	d404      	bmi.n	8012366 <__ssvfiscanf_r+0x1fe>
 801235c:	6823      	ldr	r3, [r4, #0]
 801235e:	781a      	ldrb	r2, [r3, #0]
 8012360:	5cba      	ldrb	r2, [r7, r2]
 8012362:	0712      	lsls	r2, r2, #28
 8012364:	d438      	bmi.n	80123d8 <__ssvfiscanf_r+0x270>
 8012366:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012368:	2b02      	cmp	r3, #2
 801236a:	dc47      	bgt.n	80123fc <__ssvfiscanf_r+0x294>
 801236c:	466b      	mov	r3, sp
 801236e:	4622      	mov	r2, r4
 8012370:	a941      	add	r1, sp, #260	@ 0x104
 8012372:	4630      	mov	r0, r6
 8012374:	f000 f9ae 	bl	80126d4 <_scanf_chars>
 8012378:	2801      	cmp	r0, #1
 801237a:	d064      	beq.n	8012446 <__ssvfiscanf_r+0x2de>
 801237c:	2802      	cmp	r0, #2
 801237e:	f47f af18 	bne.w	80121b2 <__ssvfiscanf_r+0x4a>
 8012382:	e7c9      	b.n	8012318 <__ssvfiscanf_r+0x1b0>
 8012384:	220a      	movs	r2, #10
 8012386:	e7d7      	b.n	8012338 <__ssvfiscanf_r+0x1d0>
 8012388:	4629      	mov	r1, r5
 801238a:	4640      	mov	r0, r8
 801238c:	f000 fbfe 	bl	8012b8c <__sccl>
 8012390:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012396:	9341      	str	r3, [sp, #260]	@ 0x104
 8012398:	4605      	mov	r5, r0
 801239a:	2301      	movs	r3, #1
 801239c:	e7d7      	b.n	801234e <__ssvfiscanf_r+0x1e6>
 801239e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80123a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80123a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80123a6:	2300      	movs	r3, #0
 80123a8:	e7d1      	b.n	801234e <__ssvfiscanf_r+0x1e6>
 80123aa:	2302      	movs	r3, #2
 80123ac:	e7cf      	b.n	801234e <__ssvfiscanf_r+0x1e6>
 80123ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80123b0:	06c3      	lsls	r3, r0, #27
 80123b2:	f53f aefe 	bmi.w	80121b2 <__ssvfiscanf_r+0x4a>
 80123b6:	9b00      	ldr	r3, [sp, #0]
 80123b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123ba:	1d19      	adds	r1, r3, #4
 80123bc:	9100      	str	r1, [sp, #0]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	07c0      	lsls	r0, r0, #31
 80123c2:	bf4c      	ite	mi
 80123c4:	801a      	strhmi	r2, [r3, #0]
 80123c6:	601a      	strpl	r2, [r3, #0]
 80123c8:	e6f3      	b.n	80121b2 <__ssvfiscanf_r+0x4a>
 80123ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123cc:	4621      	mov	r1, r4
 80123ce:	4630      	mov	r0, r6
 80123d0:	4798      	blx	r3
 80123d2:	2800      	cmp	r0, #0
 80123d4:	d0bf      	beq.n	8012356 <__ssvfiscanf_r+0x1ee>
 80123d6:	e79f      	b.n	8012318 <__ssvfiscanf_r+0x1b0>
 80123d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80123da:	3201      	adds	r2, #1
 80123dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80123de:	6862      	ldr	r2, [r4, #4]
 80123e0:	3a01      	subs	r2, #1
 80123e2:	2a00      	cmp	r2, #0
 80123e4:	6062      	str	r2, [r4, #4]
 80123e6:	dd02      	ble.n	80123ee <__ssvfiscanf_r+0x286>
 80123e8:	3301      	adds	r3, #1
 80123ea:	6023      	str	r3, [r4, #0]
 80123ec:	e7b6      	b.n	801235c <__ssvfiscanf_r+0x1f4>
 80123ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80123f0:	4621      	mov	r1, r4
 80123f2:	4630      	mov	r0, r6
 80123f4:	4798      	blx	r3
 80123f6:	2800      	cmp	r0, #0
 80123f8:	d0b0      	beq.n	801235c <__ssvfiscanf_r+0x1f4>
 80123fa:	e78d      	b.n	8012318 <__ssvfiscanf_r+0x1b0>
 80123fc:	2b04      	cmp	r3, #4
 80123fe:	dc0f      	bgt.n	8012420 <__ssvfiscanf_r+0x2b8>
 8012400:	466b      	mov	r3, sp
 8012402:	4622      	mov	r2, r4
 8012404:	a941      	add	r1, sp, #260	@ 0x104
 8012406:	4630      	mov	r0, r6
 8012408:	f000 f9be 	bl	8012788 <_scanf_i>
 801240c:	e7b4      	b.n	8012378 <__ssvfiscanf_r+0x210>
 801240e:	bf00      	nop
 8012410:	080120b9 	.word	0x080120b9
 8012414:	0801212f 	.word	0x0801212f
 8012418:	080150c9 	.word	0x080150c9
 801241c:	0801544e 	.word	0x0801544e
 8012420:	4b0a      	ldr	r3, [pc, #40]	@ (801244c <__ssvfiscanf_r+0x2e4>)
 8012422:	2b00      	cmp	r3, #0
 8012424:	f43f aec5 	beq.w	80121b2 <__ssvfiscanf_r+0x4a>
 8012428:	466b      	mov	r3, sp
 801242a:	4622      	mov	r2, r4
 801242c:	a941      	add	r1, sp, #260	@ 0x104
 801242e:	4630      	mov	r0, r6
 8012430:	f3af 8000 	nop.w
 8012434:	e7a0      	b.n	8012378 <__ssvfiscanf_r+0x210>
 8012436:	89a3      	ldrh	r3, [r4, #12]
 8012438:	065b      	lsls	r3, r3, #25
 801243a:	f53f af71 	bmi.w	8012320 <__ssvfiscanf_r+0x1b8>
 801243e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012446:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012448:	e7f9      	b.n	801243e <__ssvfiscanf_r+0x2d6>
 801244a:	bf00      	nop
 801244c:	00000000 	.word	0x00000000

08012450 <__sfputc_r>:
 8012450:	6893      	ldr	r3, [r2, #8]
 8012452:	3b01      	subs	r3, #1
 8012454:	2b00      	cmp	r3, #0
 8012456:	b410      	push	{r4}
 8012458:	6093      	str	r3, [r2, #8]
 801245a:	da08      	bge.n	801246e <__sfputc_r+0x1e>
 801245c:	6994      	ldr	r4, [r2, #24]
 801245e:	42a3      	cmp	r3, r4
 8012460:	db01      	blt.n	8012466 <__sfputc_r+0x16>
 8012462:	290a      	cmp	r1, #10
 8012464:	d103      	bne.n	801246e <__sfputc_r+0x1e>
 8012466:	f85d 4b04 	ldr.w	r4, [sp], #4
 801246a:	f7fd bcd6 	b.w	800fe1a <__swbuf_r>
 801246e:	6813      	ldr	r3, [r2, #0]
 8012470:	1c58      	adds	r0, r3, #1
 8012472:	6010      	str	r0, [r2, #0]
 8012474:	7019      	strb	r1, [r3, #0]
 8012476:	4608      	mov	r0, r1
 8012478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801247c:	4770      	bx	lr

0801247e <__sfputs_r>:
 801247e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012480:	4606      	mov	r6, r0
 8012482:	460f      	mov	r7, r1
 8012484:	4614      	mov	r4, r2
 8012486:	18d5      	adds	r5, r2, r3
 8012488:	42ac      	cmp	r4, r5
 801248a:	d101      	bne.n	8012490 <__sfputs_r+0x12>
 801248c:	2000      	movs	r0, #0
 801248e:	e007      	b.n	80124a0 <__sfputs_r+0x22>
 8012490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012494:	463a      	mov	r2, r7
 8012496:	4630      	mov	r0, r6
 8012498:	f7ff ffda 	bl	8012450 <__sfputc_r>
 801249c:	1c43      	adds	r3, r0, #1
 801249e:	d1f3      	bne.n	8012488 <__sfputs_r+0xa>
 80124a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124a4 <_vfiprintf_r>:
 80124a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124a8:	460d      	mov	r5, r1
 80124aa:	b09d      	sub	sp, #116	@ 0x74
 80124ac:	4614      	mov	r4, r2
 80124ae:	4698      	mov	r8, r3
 80124b0:	4606      	mov	r6, r0
 80124b2:	b118      	cbz	r0, 80124bc <_vfiprintf_r+0x18>
 80124b4:	6a03      	ldr	r3, [r0, #32]
 80124b6:	b90b      	cbnz	r3, 80124bc <_vfiprintf_r+0x18>
 80124b8:	f7fd fb46 	bl	800fb48 <__sinit>
 80124bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124be:	07d9      	lsls	r1, r3, #31
 80124c0:	d405      	bmi.n	80124ce <_vfiprintf_r+0x2a>
 80124c2:	89ab      	ldrh	r3, [r5, #12]
 80124c4:	059a      	lsls	r2, r3, #22
 80124c6:	d402      	bmi.n	80124ce <_vfiprintf_r+0x2a>
 80124c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124ca:	f7fd fdda 	bl	8010082 <__retarget_lock_acquire_recursive>
 80124ce:	89ab      	ldrh	r3, [r5, #12]
 80124d0:	071b      	lsls	r3, r3, #28
 80124d2:	d501      	bpl.n	80124d8 <_vfiprintf_r+0x34>
 80124d4:	692b      	ldr	r3, [r5, #16]
 80124d6:	b99b      	cbnz	r3, 8012500 <_vfiprintf_r+0x5c>
 80124d8:	4629      	mov	r1, r5
 80124da:	4630      	mov	r0, r6
 80124dc:	f7fd fcdc 	bl	800fe98 <__swsetup_r>
 80124e0:	b170      	cbz	r0, 8012500 <_vfiprintf_r+0x5c>
 80124e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80124e4:	07dc      	lsls	r4, r3, #31
 80124e6:	d504      	bpl.n	80124f2 <_vfiprintf_r+0x4e>
 80124e8:	f04f 30ff 	mov.w	r0, #4294967295
 80124ec:	b01d      	add	sp, #116	@ 0x74
 80124ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124f2:	89ab      	ldrh	r3, [r5, #12]
 80124f4:	0598      	lsls	r0, r3, #22
 80124f6:	d4f7      	bmi.n	80124e8 <_vfiprintf_r+0x44>
 80124f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80124fa:	f7fd fdc3 	bl	8010084 <__retarget_lock_release_recursive>
 80124fe:	e7f3      	b.n	80124e8 <_vfiprintf_r+0x44>
 8012500:	2300      	movs	r3, #0
 8012502:	9309      	str	r3, [sp, #36]	@ 0x24
 8012504:	2320      	movs	r3, #32
 8012506:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801250a:	f8cd 800c 	str.w	r8, [sp, #12]
 801250e:	2330      	movs	r3, #48	@ 0x30
 8012510:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80126c0 <_vfiprintf_r+0x21c>
 8012514:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012518:	f04f 0901 	mov.w	r9, #1
 801251c:	4623      	mov	r3, r4
 801251e:	469a      	mov	sl, r3
 8012520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012524:	b10a      	cbz	r2, 801252a <_vfiprintf_r+0x86>
 8012526:	2a25      	cmp	r2, #37	@ 0x25
 8012528:	d1f9      	bne.n	801251e <_vfiprintf_r+0x7a>
 801252a:	ebba 0b04 	subs.w	fp, sl, r4
 801252e:	d00b      	beq.n	8012548 <_vfiprintf_r+0xa4>
 8012530:	465b      	mov	r3, fp
 8012532:	4622      	mov	r2, r4
 8012534:	4629      	mov	r1, r5
 8012536:	4630      	mov	r0, r6
 8012538:	f7ff ffa1 	bl	801247e <__sfputs_r>
 801253c:	3001      	adds	r0, #1
 801253e:	f000 80a7 	beq.w	8012690 <_vfiprintf_r+0x1ec>
 8012542:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012544:	445a      	add	r2, fp
 8012546:	9209      	str	r2, [sp, #36]	@ 0x24
 8012548:	f89a 3000 	ldrb.w	r3, [sl]
 801254c:	2b00      	cmp	r3, #0
 801254e:	f000 809f 	beq.w	8012690 <_vfiprintf_r+0x1ec>
 8012552:	2300      	movs	r3, #0
 8012554:	f04f 32ff 	mov.w	r2, #4294967295
 8012558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801255c:	f10a 0a01 	add.w	sl, sl, #1
 8012560:	9304      	str	r3, [sp, #16]
 8012562:	9307      	str	r3, [sp, #28]
 8012564:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012568:	931a      	str	r3, [sp, #104]	@ 0x68
 801256a:	4654      	mov	r4, sl
 801256c:	2205      	movs	r2, #5
 801256e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012572:	4853      	ldr	r0, [pc, #332]	@ (80126c0 <_vfiprintf_r+0x21c>)
 8012574:	f7ed fe14 	bl	80001a0 <memchr>
 8012578:	9a04      	ldr	r2, [sp, #16]
 801257a:	b9d8      	cbnz	r0, 80125b4 <_vfiprintf_r+0x110>
 801257c:	06d1      	lsls	r1, r2, #27
 801257e:	bf44      	itt	mi
 8012580:	2320      	movmi	r3, #32
 8012582:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012586:	0713      	lsls	r3, r2, #28
 8012588:	bf44      	itt	mi
 801258a:	232b      	movmi	r3, #43	@ 0x2b
 801258c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012590:	f89a 3000 	ldrb.w	r3, [sl]
 8012594:	2b2a      	cmp	r3, #42	@ 0x2a
 8012596:	d015      	beq.n	80125c4 <_vfiprintf_r+0x120>
 8012598:	9a07      	ldr	r2, [sp, #28]
 801259a:	4654      	mov	r4, sl
 801259c:	2000      	movs	r0, #0
 801259e:	f04f 0c0a 	mov.w	ip, #10
 80125a2:	4621      	mov	r1, r4
 80125a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125a8:	3b30      	subs	r3, #48	@ 0x30
 80125aa:	2b09      	cmp	r3, #9
 80125ac:	d94b      	bls.n	8012646 <_vfiprintf_r+0x1a2>
 80125ae:	b1b0      	cbz	r0, 80125de <_vfiprintf_r+0x13a>
 80125b0:	9207      	str	r2, [sp, #28]
 80125b2:	e014      	b.n	80125de <_vfiprintf_r+0x13a>
 80125b4:	eba0 0308 	sub.w	r3, r0, r8
 80125b8:	fa09 f303 	lsl.w	r3, r9, r3
 80125bc:	4313      	orrs	r3, r2
 80125be:	9304      	str	r3, [sp, #16]
 80125c0:	46a2      	mov	sl, r4
 80125c2:	e7d2      	b.n	801256a <_vfiprintf_r+0xc6>
 80125c4:	9b03      	ldr	r3, [sp, #12]
 80125c6:	1d19      	adds	r1, r3, #4
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	9103      	str	r1, [sp, #12]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	bfbb      	ittet	lt
 80125d0:	425b      	neglt	r3, r3
 80125d2:	f042 0202 	orrlt.w	r2, r2, #2
 80125d6:	9307      	strge	r3, [sp, #28]
 80125d8:	9307      	strlt	r3, [sp, #28]
 80125da:	bfb8      	it	lt
 80125dc:	9204      	strlt	r2, [sp, #16]
 80125de:	7823      	ldrb	r3, [r4, #0]
 80125e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80125e2:	d10a      	bne.n	80125fa <_vfiprintf_r+0x156>
 80125e4:	7863      	ldrb	r3, [r4, #1]
 80125e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80125e8:	d132      	bne.n	8012650 <_vfiprintf_r+0x1ac>
 80125ea:	9b03      	ldr	r3, [sp, #12]
 80125ec:	1d1a      	adds	r2, r3, #4
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	9203      	str	r2, [sp, #12]
 80125f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80125f6:	3402      	adds	r4, #2
 80125f8:	9305      	str	r3, [sp, #20]
 80125fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80126d0 <_vfiprintf_r+0x22c>
 80125fe:	7821      	ldrb	r1, [r4, #0]
 8012600:	2203      	movs	r2, #3
 8012602:	4650      	mov	r0, sl
 8012604:	f7ed fdcc 	bl	80001a0 <memchr>
 8012608:	b138      	cbz	r0, 801261a <_vfiprintf_r+0x176>
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	eba0 000a 	sub.w	r0, r0, sl
 8012610:	2240      	movs	r2, #64	@ 0x40
 8012612:	4082      	lsls	r2, r0
 8012614:	4313      	orrs	r3, r2
 8012616:	3401      	adds	r4, #1
 8012618:	9304      	str	r3, [sp, #16]
 801261a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801261e:	4829      	ldr	r0, [pc, #164]	@ (80126c4 <_vfiprintf_r+0x220>)
 8012620:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012624:	2206      	movs	r2, #6
 8012626:	f7ed fdbb 	bl	80001a0 <memchr>
 801262a:	2800      	cmp	r0, #0
 801262c:	d03f      	beq.n	80126ae <_vfiprintf_r+0x20a>
 801262e:	4b26      	ldr	r3, [pc, #152]	@ (80126c8 <_vfiprintf_r+0x224>)
 8012630:	bb1b      	cbnz	r3, 801267a <_vfiprintf_r+0x1d6>
 8012632:	9b03      	ldr	r3, [sp, #12]
 8012634:	3307      	adds	r3, #7
 8012636:	f023 0307 	bic.w	r3, r3, #7
 801263a:	3308      	adds	r3, #8
 801263c:	9303      	str	r3, [sp, #12]
 801263e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012640:	443b      	add	r3, r7
 8012642:	9309      	str	r3, [sp, #36]	@ 0x24
 8012644:	e76a      	b.n	801251c <_vfiprintf_r+0x78>
 8012646:	fb0c 3202 	mla	r2, ip, r2, r3
 801264a:	460c      	mov	r4, r1
 801264c:	2001      	movs	r0, #1
 801264e:	e7a8      	b.n	80125a2 <_vfiprintf_r+0xfe>
 8012650:	2300      	movs	r3, #0
 8012652:	3401      	adds	r4, #1
 8012654:	9305      	str	r3, [sp, #20]
 8012656:	4619      	mov	r1, r3
 8012658:	f04f 0c0a 	mov.w	ip, #10
 801265c:	4620      	mov	r0, r4
 801265e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012662:	3a30      	subs	r2, #48	@ 0x30
 8012664:	2a09      	cmp	r2, #9
 8012666:	d903      	bls.n	8012670 <_vfiprintf_r+0x1cc>
 8012668:	2b00      	cmp	r3, #0
 801266a:	d0c6      	beq.n	80125fa <_vfiprintf_r+0x156>
 801266c:	9105      	str	r1, [sp, #20]
 801266e:	e7c4      	b.n	80125fa <_vfiprintf_r+0x156>
 8012670:	fb0c 2101 	mla	r1, ip, r1, r2
 8012674:	4604      	mov	r4, r0
 8012676:	2301      	movs	r3, #1
 8012678:	e7f0      	b.n	801265c <_vfiprintf_r+0x1b8>
 801267a:	ab03      	add	r3, sp, #12
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	462a      	mov	r2, r5
 8012680:	4b12      	ldr	r3, [pc, #72]	@ (80126cc <_vfiprintf_r+0x228>)
 8012682:	a904      	add	r1, sp, #16
 8012684:	4630      	mov	r0, r6
 8012686:	f7fc fe1b 	bl	800f2c0 <_printf_float>
 801268a:	4607      	mov	r7, r0
 801268c:	1c78      	adds	r0, r7, #1
 801268e:	d1d6      	bne.n	801263e <_vfiprintf_r+0x19a>
 8012690:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012692:	07d9      	lsls	r1, r3, #31
 8012694:	d405      	bmi.n	80126a2 <_vfiprintf_r+0x1fe>
 8012696:	89ab      	ldrh	r3, [r5, #12]
 8012698:	059a      	lsls	r2, r3, #22
 801269a:	d402      	bmi.n	80126a2 <_vfiprintf_r+0x1fe>
 801269c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801269e:	f7fd fcf1 	bl	8010084 <__retarget_lock_release_recursive>
 80126a2:	89ab      	ldrh	r3, [r5, #12]
 80126a4:	065b      	lsls	r3, r3, #25
 80126a6:	f53f af1f 	bmi.w	80124e8 <_vfiprintf_r+0x44>
 80126aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126ac:	e71e      	b.n	80124ec <_vfiprintf_r+0x48>
 80126ae:	ab03      	add	r3, sp, #12
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	462a      	mov	r2, r5
 80126b4:	4b05      	ldr	r3, [pc, #20]	@ (80126cc <_vfiprintf_r+0x228>)
 80126b6:	a904      	add	r1, sp, #16
 80126b8:	4630      	mov	r0, r6
 80126ba:	f7fd f899 	bl	800f7f0 <_printf_i>
 80126be:	e7e4      	b.n	801268a <_vfiprintf_r+0x1e6>
 80126c0:	08015448 	.word	0x08015448
 80126c4:	08015452 	.word	0x08015452
 80126c8:	0800f2c1 	.word	0x0800f2c1
 80126cc:	0801247f 	.word	0x0801247f
 80126d0:	0801544e 	.word	0x0801544e

080126d4 <_scanf_chars>:
 80126d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126d8:	4615      	mov	r5, r2
 80126da:	688a      	ldr	r2, [r1, #8]
 80126dc:	4680      	mov	r8, r0
 80126de:	460c      	mov	r4, r1
 80126e0:	b932      	cbnz	r2, 80126f0 <_scanf_chars+0x1c>
 80126e2:	698a      	ldr	r2, [r1, #24]
 80126e4:	2a00      	cmp	r2, #0
 80126e6:	bf14      	ite	ne
 80126e8:	f04f 32ff 	movne.w	r2, #4294967295
 80126ec:	2201      	moveq	r2, #1
 80126ee:	608a      	str	r2, [r1, #8]
 80126f0:	6822      	ldr	r2, [r4, #0]
 80126f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012784 <_scanf_chars+0xb0>
 80126f6:	06d1      	lsls	r1, r2, #27
 80126f8:	bf5f      	itttt	pl
 80126fa:	681a      	ldrpl	r2, [r3, #0]
 80126fc:	1d11      	addpl	r1, r2, #4
 80126fe:	6019      	strpl	r1, [r3, #0]
 8012700:	6816      	ldrpl	r6, [r2, #0]
 8012702:	2700      	movs	r7, #0
 8012704:	69a0      	ldr	r0, [r4, #24]
 8012706:	b188      	cbz	r0, 801272c <_scanf_chars+0x58>
 8012708:	2801      	cmp	r0, #1
 801270a:	d107      	bne.n	801271c <_scanf_chars+0x48>
 801270c:	682b      	ldr	r3, [r5, #0]
 801270e:	781a      	ldrb	r2, [r3, #0]
 8012710:	6963      	ldr	r3, [r4, #20]
 8012712:	5c9b      	ldrb	r3, [r3, r2]
 8012714:	b953      	cbnz	r3, 801272c <_scanf_chars+0x58>
 8012716:	2f00      	cmp	r7, #0
 8012718:	d031      	beq.n	801277e <_scanf_chars+0xaa>
 801271a:	e022      	b.n	8012762 <_scanf_chars+0x8e>
 801271c:	2802      	cmp	r0, #2
 801271e:	d120      	bne.n	8012762 <_scanf_chars+0x8e>
 8012720:	682b      	ldr	r3, [r5, #0]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012728:	071b      	lsls	r3, r3, #28
 801272a:	d41a      	bmi.n	8012762 <_scanf_chars+0x8e>
 801272c:	6823      	ldr	r3, [r4, #0]
 801272e:	06da      	lsls	r2, r3, #27
 8012730:	bf5e      	ittt	pl
 8012732:	682b      	ldrpl	r3, [r5, #0]
 8012734:	781b      	ldrbpl	r3, [r3, #0]
 8012736:	f806 3b01 	strbpl.w	r3, [r6], #1
 801273a:	682a      	ldr	r2, [r5, #0]
 801273c:	686b      	ldr	r3, [r5, #4]
 801273e:	3201      	adds	r2, #1
 8012740:	602a      	str	r2, [r5, #0]
 8012742:	68a2      	ldr	r2, [r4, #8]
 8012744:	3b01      	subs	r3, #1
 8012746:	3a01      	subs	r2, #1
 8012748:	606b      	str	r3, [r5, #4]
 801274a:	3701      	adds	r7, #1
 801274c:	60a2      	str	r2, [r4, #8]
 801274e:	b142      	cbz	r2, 8012762 <_scanf_chars+0x8e>
 8012750:	2b00      	cmp	r3, #0
 8012752:	dcd7      	bgt.n	8012704 <_scanf_chars+0x30>
 8012754:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012758:	4629      	mov	r1, r5
 801275a:	4640      	mov	r0, r8
 801275c:	4798      	blx	r3
 801275e:	2800      	cmp	r0, #0
 8012760:	d0d0      	beq.n	8012704 <_scanf_chars+0x30>
 8012762:	6823      	ldr	r3, [r4, #0]
 8012764:	f013 0310 	ands.w	r3, r3, #16
 8012768:	d105      	bne.n	8012776 <_scanf_chars+0xa2>
 801276a:	68e2      	ldr	r2, [r4, #12]
 801276c:	3201      	adds	r2, #1
 801276e:	60e2      	str	r2, [r4, #12]
 8012770:	69a2      	ldr	r2, [r4, #24]
 8012772:	b102      	cbz	r2, 8012776 <_scanf_chars+0xa2>
 8012774:	7033      	strb	r3, [r6, #0]
 8012776:	6923      	ldr	r3, [r4, #16]
 8012778:	443b      	add	r3, r7
 801277a:	6123      	str	r3, [r4, #16]
 801277c:	2000      	movs	r0, #0
 801277e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012782:	bf00      	nop
 8012784:	080150c9 	.word	0x080150c9

08012788 <_scanf_i>:
 8012788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801278c:	4698      	mov	r8, r3
 801278e:	4b74      	ldr	r3, [pc, #464]	@ (8012960 <_scanf_i+0x1d8>)
 8012790:	460c      	mov	r4, r1
 8012792:	4682      	mov	sl, r0
 8012794:	4616      	mov	r6, r2
 8012796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801279a:	b087      	sub	sp, #28
 801279c:	ab03      	add	r3, sp, #12
 801279e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80127a2:	4b70      	ldr	r3, [pc, #448]	@ (8012964 <_scanf_i+0x1dc>)
 80127a4:	69a1      	ldr	r1, [r4, #24]
 80127a6:	4a70      	ldr	r2, [pc, #448]	@ (8012968 <_scanf_i+0x1e0>)
 80127a8:	2903      	cmp	r1, #3
 80127aa:	bf08      	it	eq
 80127ac:	461a      	moveq	r2, r3
 80127ae:	68a3      	ldr	r3, [r4, #8]
 80127b0:	9201      	str	r2, [sp, #4]
 80127b2:	1e5a      	subs	r2, r3, #1
 80127b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80127b8:	bf88      	it	hi
 80127ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80127be:	4627      	mov	r7, r4
 80127c0:	bf82      	ittt	hi
 80127c2:	eb03 0905 	addhi.w	r9, r3, r5
 80127c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80127ca:	60a3      	strhi	r3, [r4, #8]
 80127cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80127d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80127d4:	bf98      	it	ls
 80127d6:	f04f 0900 	movls.w	r9, #0
 80127da:	6023      	str	r3, [r4, #0]
 80127dc:	463d      	mov	r5, r7
 80127de:	f04f 0b00 	mov.w	fp, #0
 80127e2:	6831      	ldr	r1, [r6, #0]
 80127e4:	ab03      	add	r3, sp, #12
 80127e6:	7809      	ldrb	r1, [r1, #0]
 80127e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80127ec:	2202      	movs	r2, #2
 80127ee:	f7ed fcd7 	bl	80001a0 <memchr>
 80127f2:	b328      	cbz	r0, 8012840 <_scanf_i+0xb8>
 80127f4:	f1bb 0f01 	cmp.w	fp, #1
 80127f8:	d159      	bne.n	80128ae <_scanf_i+0x126>
 80127fa:	6862      	ldr	r2, [r4, #4]
 80127fc:	b92a      	cbnz	r2, 801280a <_scanf_i+0x82>
 80127fe:	6822      	ldr	r2, [r4, #0]
 8012800:	2108      	movs	r1, #8
 8012802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012806:	6061      	str	r1, [r4, #4]
 8012808:	6022      	str	r2, [r4, #0]
 801280a:	6822      	ldr	r2, [r4, #0]
 801280c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012810:	6022      	str	r2, [r4, #0]
 8012812:	68a2      	ldr	r2, [r4, #8]
 8012814:	1e51      	subs	r1, r2, #1
 8012816:	60a1      	str	r1, [r4, #8]
 8012818:	b192      	cbz	r2, 8012840 <_scanf_i+0xb8>
 801281a:	6832      	ldr	r2, [r6, #0]
 801281c:	1c51      	adds	r1, r2, #1
 801281e:	6031      	str	r1, [r6, #0]
 8012820:	7812      	ldrb	r2, [r2, #0]
 8012822:	f805 2b01 	strb.w	r2, [r5], #1
 8012826:	6872      	ldr	r2, [r6, #4]
 8012828:	3a01      	subs	r2, #1
 801282a:	2a00      	cmp	r2, #0
 801282c:	6072      	str	r2, [r6, #4]
 801282e:	dc07      	bgt.n	8012840 <_scanf_i+0xb8>
 8012830:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012834:	4631      	mov	r1, r6
 8012836:	4650      	mov	r0, sl
 8012838:	4790      	blx	r2
 801283a:	2800      	cmp	r0, #0
 801283c:	f040 8085 	bne.w	801294a <_scanf_i+0x1c2>
 8012840:	f10b 0b01 	add.w	fp, fp, #1
 8012844:	f1bb 0f03 	cmp.w	fp, #3
 8012848:	d1cb      	bne.n	80127e2 <_scanf_i+0x5a>
 801284a:	6863      	ldr	r3, [r4, #4]
 801284c:	b90b      	cbnz	r3, 8012852 <_scanf_i+0xca>
 801284e:	230a      	movs	r3, #10
 8012850:	6063      	str	r3, [r4, #4]
 8012852:	6863      	ldr	r3, [r4, #4]
 8012854:	4945      	ldr	r1, [pc, #276]	@ (801296c <_scanf_i+0x1e4>)
 8012856:	6960      	ldr	r0, [r4, #20]
 8012858:	1ac9      	subs	r1, r1, r3
 801285a:	f000 f997 	bl	8012b8c <__sccl>
 801285e:	f04f 0b00 	mov.w	fp, #0
 8012862:	68a3      	ldr	r3, [r4, #8]
 8012864:	6822      	ldr	r2, [r4, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d03d      	beq.n	80128e6 <_scanf_i+0x15e>
 801286a:	6831      	ldr	r1, [r6, #0]
 801286c:	6960      	ldr	r0, [r4, #20]
 801286e:	f891 c000 	ldrb.w	ip, [r1]
 8012872:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012876:	2800      	cmp	r0, #0
 8012878:	d035      	beq.n	80128e6 <_scanf_i+0x15e>
 801287a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801287e:	d124      	bne.n	80128ca <_scanf_i+0x142>
 8012880:	0510      	lsls	r0, r2, #20
 8012882:	d522      	bpl.n	80128ca <_scanf_i+0x142>
 8012884:	f10b 0b01 	add.w	fp, fp, #1
 8012888:	f1b9 0f00 	cmp.w	r9, #0
 801288c:	d003      	beq.n	8012896 <_scanf_i+0x10e>
 801288e:	3301      	adds	r3, #1
 8012890:	f109 39ff 	add.w	r9, r9, #4294967295
 8012894:	60a3      	str	r3, [r4, #8]
 8012896:	6873      	ldr	r3, [r6, #4]
 8012898:	3b01      	subs	r3, #1
 801289a:	2b00      	cmp	r3, #0
 801289c:	6073      	str	r3, [r6, #4]
 801289e:	dd1b      	ble.n	80128d8 <_scanf_i+0x150>
 80128a0:	6833      	ldr	r3, [r6, #0]
 80128a2:	3301      	adds	r3, #1
 80128a4:	6033      	str	r3, [r6, #0]
 80128a6:	68a3      	ldr	r3, [r4, #8]
 80128a8:	3b01      	subs	r3, #1
 80128aa:	60a3      	str	r3, [r4, #8]
 80128ac:	e7d9      	b.n	8012862 <_scanf_i+0xda>
 80128ae:	f1bb 0f02 	cmp.w	fp, #2
 80128b2:	d1ae      	bne.n	8012812 <_scanf_i+0x8a>
 80128b4:	6822      	ldr	r2, [r4, #0]
 80128b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80128ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80128be:	d1bf      	bne.n	8012840 <_scanf_i+0xb8>
 80128c0:	2110      	movs	r1, #16
 80128c2:	6061      	str	r1, [r4, #4]
 80128c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80128c8:	e7a2      	b.n	8012810 <_scanf_i+0x88>
 80128ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80128ce:	6022      	str	r2, [r4, #0]
 80128d0:	780b      	ldrb	r3, [r1, #0]
 80128d2:	f805 3b01 	strb.w	r3, [r5], #1
 80128d6:	e7de      	b.n	8012896 <_scanf_i+0x10e>
 80128d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80128dc:	4631      	mov	r1, r6
 80128de:	4650      	mov	r0, sl
 80128e0:	4798      	blx	r3
 80128e2:	2800      	cmp	r0, #0
 80128e4:	d0df      	beq.n	80128a6 <_scanf_i+0x11e>
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	05d9      	lsls	r1, r3, #23
 80128ea:	d50d      	bpl.n	8012908 <_scanf_i+0x180>
 80128ec:	42bd      	cmp	r5, r7
 80128ee:	d909      	bls.n	8012904 <_scanf_i+0x17c>
 80128f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80128f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80128f8:	4632      	mov	r2, r6
 80128fa:	4650      	mov	r0, sl
 80128fc:	4798      	blx	r3
 80128fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8012902:	464d      	mov	r5, r9
 8012904:	42bd      	cmp	r5, r7
 8012906:	d028      	beq.n	801295a <_scanf_i+0x1d2>
 8012908:	6822      	ldr	r2, [r4, #0]
 801290a:	f012 0210 	ands.w	r2, r2, #16
 801290e:	d113      	bne.n	8012938 <_scanf_i+0x1b0>
 8012910:	702a      	strb	r2, [r5, #0]
 8012912:	6863      	ldr	r3, [r4, #4]
 8012914:	9e01      	ldr	r6, [sp, #4]
 8012916:	4639      	mov	r1, r7
 8012918:	4650      	mov	r0, sl
 801291a:	47b0      	blx	r6
 801291c:	f8d8 3000 	ldr.w	r3, [r8]
 8012920:	6821      	ldr	r1, [r4, #0]
 8012922:	1d1a      	adds	r2, r3, #4
 8012924:	f8c8 2000 	str.w	r2, [r8]
 8012928:	f011 0f20 	tst.w	r1, #32
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	d00f      	beq.n	8012950 <_scanf_i+0x1c8>
 8012930:	6018      	str	r0, [r3, #0]
 8012932:	68e3      	ldr	r3, [r4, #12]
 8012934:	3301      	adds	r3, #1
 8012936:	60e3      	str	r3, [r4, #12]
 8012938:	6923      	ldr	r3, [r4, #16]
 801293a:	1bed      	subs	r5, r5, r7
 801293c:	445d      	add	r5, fp
 801293e:	442b      	add	r3, r5
 8012940:	6123      	str	r3, [r4, #16]
 8012942:	2000      	movs	r0, #0
 8012944:	b007      	add	sp, #28
 8012946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294a:	f04f 0b00 	mov.w	fp, #0
 801294e:	e7ca      	b.n	80128e6 <_scanf_i+0x15e>
 8012950:	07ca      	lsls	r2, r1, #31
 8012952:	bf4c      	ite	mi
 8012954:	8018      	strhmi	r0, [r3, #0]
 8012956:	6018      	strpl	r0, [r3, #0]
 8012958:	e7eb      	b.n	8012932 <_scanf_i+0x1aa>
 801295a:	2001      	movs	r0, #1
 801295c:	e7f2      	b.n	8012944 <_scanf_i+0x1bc>
 801295e:	bf00      	nop
 8012960:	08013e60 	.word	0x08013e60
 8012964:	08012e45 	.word	0x08012e45
 8012968:	08012f25 	.word	0x08012f25
 801296c:	08015469 	.word	0x08015469

08012970 <__sflush_r>:
 8012970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012978:	0716      	lsls	r6, r2, #28
 801297a:	4605      	mov	r5, r0
 801297c:	460c      	mov	r4, r1
 801297e:	d454      	bmi.n	8012a2a <__sflush_r+0xba>
 8012980:	684b      	ldr	r3, [r1, #4]
 8012982:	2b00      	cmp	r3, #0
 8012984:	dc02      	bgt.n	801298c <__sflush_r+0x1c>
 8012986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012988:	2b00      	cmp	r3, #0
 801298a:	dd48      	ble.n	8012a1e <__sflush_r+0xae>
 801298c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801298e:	2e00      	cmp	r6, #0
 8012990:	d045      	beq.n	8012a1e <__sflush_r+0xae>
 8012992:	2300      	movs	r3, #0
 8012994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012998:	682f      	ldr	r7, [r5, #0]
 801299a:	6a21      	ldr	r1, [r4, #32]
 801299c:	602b      	str	r3, [r5, #0]
 801299e:	d030      	beq.n	8012a02 <__sflush_r+0x92>
 80129a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80129a2:	89a3      	ldrh	r3, [r4, #12]
 80129a4:	0759      	lsls	r1, r3, #29
 80129a6:	d505      	bpl.n	80129b4 <__sflush_r+0x44>
 80129a8:	6863      	ldr	r3, [r4, #4]
 80129aa:	1ad2      	subs	r2, r2, r3
 80129ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80129ae:	b10b      	cbz	r3, 80129b4 <__sflush_r+0x44>
 80129b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80129b2:	1ad2      	subs	r2, r2, r3
 80129b4:	2300      	movs	r3, #0
 80129b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129b8:	6a21      	ldr	r1, [r4, #32]
 80129ba:	4628      	mov	r0, r5
 80129bc:	47b0      	blx	r6
 80129be:	1c43      	adds	r3, r0, #1
 80129c0:	89a3      	ldrh	r3, [r4, #12]
 80129c2:	d106      	bne.n	80129d2 <__sflush_r+0x62>
 80129c4:	6829      	ldr	r1, [r5, #0]
 80129c6:	291d      	cmp	r1, #29
 80129c8:	d82b      	bhi.n	8012a22 <__sflush_r+0xb2>
 80129ca:	4a2a      	ldr	r2, [pc, #168]	@ (8012a74 <__sflush_r+0x104>)
 80129cc:	410a      	asrs	r2, r1
 80129ce:	07d6      	lsls	r6, r2, #31
 80129d0:	d427      	bmi.n	8012a22 <__sflush_r+0xb2>
 80129d2:	2200      	movs	r2, #0
 80129d4:	6062      	str	r2, [r4, #4]
 80129d6:	04d9      	lsls	r1, r3, #19
 80129d8:	6922      	ldr	r2, [r4, #16]
 80129da:	6022      	str	r2, [r4, #0]
 80129dc:	d504      	bpl.n	80129e8 <__sflush_r+0x78>
 80129de:	1c42      	adds	r2, r0, #1
 80129e0:	d101      	bne.n	80129e6 <__sflush_r+0x76>
 80129e2:	682b      	ldr	r3, [r5, #0]
 80129e4:	b903      	cbnz	r3, 80129e8 <__sflush_r+0x78>
 80129e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80129e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80129ea:	602f      	str	r7, [r5, #0]
 80129ec:	b1b9      	cbz	r1, 8012a1e <__sflush_r+0xae>
 80129ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80129f2:	4299      	cmp	r1, r3
 80129f4:	d002      	beq.n	80129fc <__sflush_r+0x8c>
 80129f6:	4628      	mov	r0, r5
 80129f8:	f7fe f9aa 	bl	8010d50 <_free_r>
 80129fc:	2300      	movs	r3, #0
 80129fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a00:	e00d      	b.n	8012a1e <__sflush_r+0xae>
 8012a02:	2301      	movs	r3, #1
 8012a04:	4628      	mov	r0, r5
 8012a06:	47b0      	blx	r6
 8012a08:	4602      	mov	r2, r0
 8012a0a:	1c50      	adds	r0, r2, #1
 8012a0c:	d1c9      	bne.n	80129a2 <__sflush_r+0x32>
 8012a0e:	682b      	ldr	r3, [r5, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d0c6      	beq.n	80129a2 <__sflush_r+0x32>
 8012a14:	2b1d      	cmp	r3, #29
 8012a16:	d001      	beq.n	8012a1c <__sflush_r+0xac>
 8012a18:	2b16      	cmp	r3, #22
 8012a1a:	d11e      	bne.n	8012a5a <__sflush_r+0xea>
 8012a1c:	602f      	str	r7, [r5, #0]
 8012a1e:	2000      	movs	r0, #0
 8012a20:	e022      	b.n	8012a68 <__sflush_r+0xf8>
 8012a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a26:	b21b      	sxth	r3, r3
 8012a28:	e01b      	b.n	8012a62 <__sflush_r+0xf2>
 8012a2a:	690f      	ldr	r7, [r1, #16]
 8012a2c:	2f00      	cmp	r7, #0
 8012a2e:	d0f6      	beq.n	8012a1e <__sflush_r+0xae>
 8012a30:	0793      	lsls	r3, r2, #30
 8012a32:	680e      	ldr	r6, [r1, #0]
 8012a34:	bf08      	it	eq
 8012a36:	694b      	ldreq	r3, [r1, #20]
 8012a38:	600f      	str	r7, [r1, #0]
 8012a3a:	bf18      	it	ne
 8012a3c:	2300      	movne	r3, #0
 8012a3e:	eba6 0807 	sub.w	r8, r6, r7
 8012a42:	608b      	str	r3, [r1, #8]
 8012a44:	f1b8 0f00 	cmp.w	r8, #0
 8012a48:	dde9      	ble.n	8012a1e <__sflush_r+0xae>
 8012a4a:	6a21      	ldr	r1, [r4, #32]
 8012a4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012a4e:	4643      	mov	r3, r8
 8012a50:	463a      	mov	r2, r7
 8012a52:	4628      	mov	r0, r5
 8012a54:	47b0      	blx	r6
 8012a56:	2800      	cmp	r0, #0
 8012a58:	dc08      	bgt.n	8012a6c <__sflush_r+0xfc>
 8012a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a62:	81a3      	strh	r3, [r4, #12]
 8012a64:	f04f 30ff 	mov.w	r0, #4294967295
 8012a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a6c:	4407      	add	r7, r0
 8012a6e:	eba8 0800 	sub.w	r8, r8, r0
 8012a72:	e7e7      	b.n	8012a44 <__sflush_r+0xd4>
 8012a74:	dfbffffe 	.word	0xdfbffffe

08012a78 <_fflush_r>:
 8012a78:	b538      	push	{r3, r4, r5, lr}
 8012a7a:	690b      	ldr	r3, [r1, #16]
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	460c      	mov	r4, r1
 8012a80:	b913      	cbnz	r3, 8012a88 <_fflush_r+0x10>
 8012a82:	2500      	movs	r5, #0
 8012a84:	4628      	mov	r0, r5
 8012a86:	bd38      	pop	{r3, r4, r5, pc}
 8012a88:	b118      	cbz	r0, 8012a92 <_fflush_r+0x1a>
 8012a8a:	6a03      	ldr	r3, [r0, #32]
 8012a8c:	b90b      	cbnz	r3, 8012a92 <_fflush_r+0x1a>
 8012a8e:	f7fd f85b 	bl	800fb48 <__sinit>
 8012a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d0f3      	beq.n	8012a82 <_fflush_r+0xa>
 8012a9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012a9c:	07d0      	lsls	r0, r2, #31
 8012a9e:	d404      	bmi.n	8012aaa <_fflush_r+0x32>
 8012aa0:	0599      	lsls	r1, r3, #22
 8012aa2:	d402      	bmi.n	8012aaa <_fflush_r+0x32>
 8012aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012aa6:	f7fd faec 	bl	8010082 <__retarget_lock_acquire_recursive>
 8012aaa:	4628      	mov	r0, r5
 8012aac:	4621      	mov	r1, r4
 8012aae:	f7ff ff5f 	bl	8012970 <__sflush_r>
 8012ab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012ab4:	07da      	lsls	r2, r3, #31
 8012ab6:	4605      	mov	r5, r0
 8012ab8:	d4e4      	bmi.n	8012a84 <_fflush_r+0xc>
 8012aba:	89a3      	ldrh	r3, [r4, #12]
 8012abc:	059b      	lsls	r3, r3, #22
 8012abe:	d4e1      	bmi.n	8012a84 <_fflush_r+0xc>
 8012ac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012ac2:	f7fd fadf 	bl	8010084 <__retarget_lock_release_recursive>
 8012ac6:	e7dd      	b.n	8012a84 <_fflush_r+0xc>

08012ac8 <__swhatbuf_r>:
 8012ac8:	b570      	push	{r4, r5, r6, lr}
 8012aca:	460c      	mov	r4, r1
 8012acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ad0:	2900      	cmp	r1, #0
 8012ad2:	b096      	sub	sp, #88	@ 0x58
 8012ad4:	4615      	mov	r5, r2
 8012ad6:	461e      	mov	r6, r3
 8012ad8:	da0d      	bge.n	8012af6 <__swhatbuf_r+0x2e>
 8012ada:	89a3      	ldrh	r3, [r4, #12]
 8012adc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012ae0:	f04f 0100 	mov.w	r1, #0
 8012ae4:	bf14      	ite	ne
 8012ae6:	2340      	movne	r3, #64	@ 0x40
 8012ae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012aec:	2000      	movs	r0, #0
 8012aee:	6031      	str	r1, [r6, #0]
 8012af0:	602b      	str	r3, [r5, #0]
 8012af2:	b016      	add	sp, #88	@ 0x58
 8012af4:	bd70      	pop	{r4, r5, r6, pc}
 8012af6:	466a      	mov	r2, sp
 8012af8:	f000 f8d6 	bl	8012ca8 <_fstat_r>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	dbec      	blt.n	8012ada <__swhatbuf_r+0x12>
 8012b00:	9901      	ldr	r1, [sp, #4]
 8012b02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012b06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012b0a:	4259      	negs	r1, r3
 8012b0c:	4159      	adcs	r1, r3
 8012b0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012b12:	e7eb      	b.n	8012aec <__swhatbuf_r+0x24>

08012b14 <__smakebuf_r>:
 8012b14:	898b      	ldrh	r3, [r1, #12]
 8012b16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b18:	079d      	lsls	r5, r3, #30
 8012b1a:	4606      	mov	r6, r0
 8012b1c:	460c      	mov	r4, r1
 8012b1e:	d507      	bpl.n	8012b30 <__smakebuf_r+0x1c>
 8012b20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012b24:	6023      	str	r3, [r4, #0]
 8012b26:	6123      	str	r3, [r4, #16]
 8012b28:	2301      	movs	r3, #1
 8012b2a:	6163      	str	r3, [r4, #20]
 8012b2c:	b003      	add	sp, #12
 8012b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b30:	ab01      	add	r3, sp, #4
 8012b32:	466a      	mov	r2, sp
 8012b34:	f7ff ffc8 	bl	8012ac8 <__swhatbuf_r>
 8012b38:	9f00      	ldr	r7, [sp, #0]
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	4639      	mov	r1, r7
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f7fb fc4c 	bl	800e3dc <_malloc_r>
 8012b44:	b948      	cbnz	r0, 8012b5a <__smakebuf_r+0x46>
 8012b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b4a:	059a      	lsls	r2, r3, #22
 8012b4c:	d4ee      	bmi.n	8012b2c <__smakebuf_r+0x18>
 8012b4e:	f023 0303 	bic.w	r3, r3, #3
 8012b52:	f043 0302 	orr.w	r3, r3, #2
 8012b56:	81a3      	strh	r3, [r4, #12]
 8012b58:	e7e2      	b.n	8012b20 <__smakebuf_r+0xc>
 8012b5a:	89a3      	ldrh	r3, [r4, #12]
 8012b5c:	6020      	str	r0, [r4, #0]
 8012b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b62:	81a3      	strh	r3, [r4, #12]
 8012b64:	9b01      	ldr	r3, [sp, #4]
 8012b66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012b6a:	b15b      	cbz	r3, 8012b84 <__smakebuf_r+0x70>
 8012b6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b70:	4630      	mov	r0, r6
 8012b72:	f000 f8ab 	bl	8012ccc <_isatty_r>
 8012b76:	b128      	cbz	r0, 8012b84 <__smakebuf_r+0x70>
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	f023 0303 	bic.w	r3, r3, #3
 8012b7e:	f043 0301 	orr.w	r3, r3, #1
 8012b82:	81a3      	strh	r3, [r4, #12]
 8012b84:	89a3      	ldrh	r3, [r4, #12]
 8012b86:	431d      	orrs	r5, r3
 8012b88:	81a5      	strh	r5, [r4, #12]
 8012b8a:	e7cf      	b.n	8012b2c <__smakebuf_r+0x18>

08012b8c <__sccl>:
 8012b8c:	b570      	push	{r4, r5, r6, lr}
 8012b8e:	780b      	ldrb	r3, [r1, #0]
 8012b90:	4604      	mov	r4, r0
 8012b92:	2b5e      	cmp	r3, #94	@ 0x5e
 8012b94:	bf0b      	itete	eq
 8012b96:	784b      	ldrbeq	r3, [r1, #1]
 8012b98:	1c4a      	addne	r2, r1, #1
 8012b9a:	1c8a      	addeq	r2, r1, #2
 8012b9c:	2100      	movne	r1, #0
 8012b9e:	bf08      	it	eq
 8012ba0:	2101      	moveq	r1, #1
 8012ba2:	3801      	subs	r0, #1
 8012ba4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8012ba8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8012bac:	42a8      	cmp	r0, r5
 8012bae:	d1fb      	bne.n	8012ba8 <__sccl+0x1c>
 8012bb0:	b90b      	cbnz	r3, 8012bb6 <__sccl+0x2a>
 8012bb2:	1e50      	subs	r0, r2, #1
 8012bb4:	bd70      	pop	{r4, r5, r6, pc}
 8012bb6:	f081 0101 	eor.w	r1, r1, #1
 8012bba:	54e1      	strb	r1, [r4, r3]
 8012bbc:	4610      	mov	r0, r2
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012bc4:	2d2d      	cmp	r5, #45	@ 0x2d
 8012bc6:	d005      	beq.n	8012bd4 <__sccl+0x48>
 8012bc8:	2d5d      	cmp	r5, #93	@ 0x5d
 8012bca:	d016      	beq.n	8012bfa <__sccl+0x6e>
 8012bcc:	2d00      	cmp	r5, #0
 8012bce:	d0f1      	beq.n	8012bb4 <__sccl+0x28>
 8012bd0:	462b      	mov	r3, r5
 8012bd2:	e7f2      	b.n	8012bba <__sccl+0x2e>
 8012bd4:	7846      	ldrb	r6, [r0, #1]
 8012bd6:	2e5d      	cmp	r6, #93	@ 0x5d
 8012bd8:	d0fa      	beq.n	8012bd0 <__sccl+0x44>
 8012bda:	42b3      	cmp	r3, r6
 8012bdc:	dcf8      	bgt.n	8012bd0 <__sccl+0x44>
 8012bde:	3002      	adds	r0, #2
 8012be0:	461a      	mov	r2, r3
 8012be2:	3201      	adds	r2, #1
 8012be4:	4296      	cmp	r6, r2
 8012be6:	54a1      	strb	r1, [r4, r2]
 8012be8:	dcfb      	bgt.n	8012be2 <__sccl+0x56>
 8012bea:	1af2      	subs	r2, r6, r3
 8012bec:	3a01      	subs	r2, #1
 8012bee:	1c5d      	adds	r5, r3, #1
 8012bf0:	42b3      	cmp	r3, r6
 8012bf2:	bfa8      	it	ge
 8012bf4:	2200      	movge	r2, #0
 8012bf6:	18ab      	adds	r3, r5, r2
 8012bf8:	e7e1      	b.n	8012bbe <__sccl+0x32>
 8012bfa:	4610      	mov	r0, r2
 8012bfc:	e7da      	b.n	8012bb4 <__sccl+0x28>

08012bfe <__submore>:
 8012bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c02:	460c      	mov	r4, r1
 8012c04:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c0a:	4299      	cmp	r1, r3
 8012c0c:	d11d      	bne.n	8012c4a <__submore+0x4c>
 8012c0e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8012c12:	f7fb fbe3 	bl	800e3dc <_malloc_r>
 8012c16:	b918      	cbnz	r0, 8012c20 <__submore+0x22>
 8012c18:	f04f 30ff 	mov.w	r0, #4294967295
 8012c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c24:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012c26:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8012c2a:	6360      	str	r0, [r4, #52]	@ 0x34
 8012c2c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8012c30:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8012c34:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8012c38:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012c3c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8012c40:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8012c44:	6020      	str	r0, [r4, #0]
 8012c46:	2000      	movs	r0, #0
 8012c48:	e7e8      	b.n	8012c1c <__submore+0x1e>
 8012c4a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8012c4c:	0077      	lsls	r7, r6, #1
 8012c4e:	463a      	mov	r2, r7
 8012c50:	f7fb fc58 	bl	800e504 <_realloc_r>
 8012c54:	4605      	mov	r5, r0
 8012c56:	2800      	cmp	r0, #0
 8012c58:	d0de      	beq.n	8012c18 <__submore+0x1a>
 8012c5a:	eb00 0806 	add.w	r8, r0, r6
 8012c5e:	4601      	mov	r1, r0
 8012c60:	4632      	mov	r2, r6
 8012c62:	4640      	mov	r0, r8
 8012c64:	f7fd fa0f 	bl	8010086 <memcpy>
 8012c68:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8012c6c:	f8c4 8000 	str.w	r8, [r4]
 8012c70:	e7e9      	b.n	8012c46 <__submore+0x48>

08012c72 <memmove>:
 8012c72:	4288      	cmp	r0, r1
 8012c74:	b510      	push	{r4, lr}
 8012c76:	eb01 0402 	add.w	r4, r1, r2
 8012c7a:	d902      	bls.n	8012c82 <memmove+0x10>
 8012c7c:	4284      	cmp	r4, r0
 8012c7e:	4623      	mov	r3, r4
 8012c80:	d807      	bhi.n	8012c92 <memmove+0x20>
 8012c82:	1e43      	subs	r3, r0, #1
 8012c84:	42a1      	cmp	r1, r4
 8012c86:	d008      	beq.n	8012c9a <memmove+0x28>
 8012c88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012c8c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012c90:	e7f8      	b.n	8012c84 <memmove+0x12>
 8012c92:	4402      	add	r2, r0
 8012c94:	4601      	mov	r1, r0
 8012c96:	428a      	cmp	r2, r1
 8012c98:	d100      	bne.n	8012c9c <memmove+0x2a>
 8012c9a:	bd10      	pop	{r4, pc}
 8012c9c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ca0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012ca4:	e7f7      	b.n	8012c96 <memmove+0x24>
	...

08012ca8 <_fstat_r>:
 8012ca8:	b538      	push	{r3, r4, r5, lr}
 8012caa:	4d07      	ldr	r5, [pc, #28]	@ (8012cc8 <_fstat_r+0x20>)
 8012cac:	2300      	movs	r3, #0
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4608      	mov	r0, r1
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	602b      	str	r3, [r5, #0]
 8012cb6:	f7ee fddd 	bl	8001874 <_fstat>
 8012cba:	1c43      	adds	r3, r0, #1
 8012cbc:	d102      	bne.n	8012cc4 <_fstat_r+0x1c>
 8012cbe:	682b      	ldr	r3, [r5, #0]
 8012cc0:	b103      	cbz	r3, 8012cc4 <_fstat_r+0x1c>
 8012cc2:	6023      	str	r3, [r4, #0]
 8012cc4:	bd38      	pop	{r3, r4, r5, pc}
 8012cc6:	bf00      	nop
 8012cc8:	200009c4 	.word	0x200009c4

08012ccc <_isatty_r>:
 8012ccc:	b538      	push	{r3, r4, r5, lr}
 8012cce:	4d06      	ldr	r5, [pc, #24]	@ (8012ce8 <_isatty_r+0x1c>)
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	4604      	mov	r4, r0
 8012cd4:	4608      	mov	r0, r1
 8012cd6:	602b      	str	r3, [r5, #0]
 8012cd8:	f7ee fddc 	bl	8001894 <_isatty>
 8012cdc:	1c43      	adds	r3, r0, #1
 8012cde:	d102      	bne.n	8012ce6 <_isatty_r+0x1a>
 8012ce0:	682b      	ldr	r3, [r5, #0]
 8012ce2:	b103      	cbz	r3, 8012ce6 <_isatty_r+0x1a>
 8012ce4:	6023      	str	r3, [r4, #0]
 8012ce6:	bd38      	pop	{r3, r4, r5, pc}
 8012ce8:	200009c4 	.word	0x200009c4

08012cec <__assert_func>:
 8012cec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012cee:	4614      	mov	r4, r2
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4b09      	ldr	r3, [pc, #36]	@ (8012d18 <__assert_func+0x2c>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	4605      	mov	r5, r0
 8012cf8:	68d8      	ldr	r0, [r3, #12]
 8012cfa:	b954      	cbnz	r4, 8012d12 <__assert_func+0x26>
 8012cfc:	4b07      	ldr	r3, [pc, #28]	@ (8012d1c <__assert_func+0x30>)
 8012cfe:	461c      	mov	r4, r3
 8012d00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012d04:	9100      	str	r1, [sp, #0]
 8012d06:	462b      	mov	r3, r5
 8012d08:	4905      	ldr	r1, [pc, #20]	@ (8012d20 <__assert_func+0x34>)
 8012d0a:	f000 f90d 	bl	8012f28 <fiprintf>
 8012d0e:	f000 f91d 	bl	8012f4c <abort>
 8012d12:	4b04      	ldr	r3, [pc, #16]	@ (8012d24 <__assert_func+0x38>)
 8012d14:	e7f4      	b.n	8012d00 <__assert_func+0x14>
 8012d16:	bf00      	nop
 8012d18:	200001b0 	.word	0x200001b0
 8012d1c:	080154af 	.word	0x080154af
 8012d20:	08015481 	.word	0x08015481
 8012d24:	08015474 	.word	0x08015474

08012d28 <_calloc_r>:
 8012d28:	b570      	push	{r4, r5, r6, lr}
 8012d2a:	fba1 5402 	umull	r5, r4, r1, r2
 8012d2e:	b93c      	cbnz	r4, 8012d40 <_calloc_r+0x18>
 8012d30:	4629      	mov	r1, r5
 8012d32:	f7fb fb53 	bl	800e3dc <_malloc_r>
 8012d36:	4606      	mov	r6, r0
 8012d38:	b928      	cbnz	r0, 8012d46 <_calloc_r+0x1e>
 8012d3a:	2600      	movs	r6, #0
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	bd70      	pop	{r4, r5, r6, pc}
 8012d40:	220c      	movs	r2, #12
 8012d42:	6002      	str	r2, [r0, #0]
 8012d44:	e7f9      	b.n	8012d3a <_calloc_r+0x12>
 8012d46:	462a      	mov	r2, r5
 8012d48:	4621      	mov	r1, r4
 8012d4a:	f7fd f8fb 	bl	800ff44 <memset>
 8012d4e:	e7f5      	b.n	8012d3c <_calloc_r+0x14>

08012d50 <_strtol_l.constprop.0>:
 8012d50:	2b24      	cmp	r3, #36	@ 0x24
 8012d52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d56:	4686      	mov	lr, r0
 8012d58:	4690      	mov	r8, r2
 8012d5a:	d801      	bhi.n	8012d60 <_strtol_l.constprop.0+0x10>
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d106      	bne.n	8012d6e <_strtol_l.constprop.0+0x1e>
 8012d60:	f7fd f964 	bl	801002c <__errno>
 8012d64:	2316      	movs	r3, #22
 8012d66:	6003      	str	r3, [r0, #0]
 8012d68:	2000      	movs	r0, #0
 8012d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6e:	4834      	ldr	r0, [pc, #208]	@ (8012e40 <_strtol_l.constprop.0+0xf0>)
 8012d70:	460d      	mov	r5, r1
 8012d72:	462a      	mov	r2, r5
 8012d74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012d78:	5d06      	ldrb	r6, [r0, r4]
 8012d7a:	f016 0608 	ands.w	r6, r6, #8
 8012d7e:	d1f8      	bne.n	8012d72 <_strtol_l.constprop.0+0x22>
 8012d80:	2c2d      	cmp	r4, #45	@ 0x2d
 8012d82:	d12d      	bne.n	8012de0 <_strtol_l.constprop.0+0x90>
 8012d84:	782c      	ldrb	r4, [r5, #0]
 8012d86:	2601      	movs	r6, #1
 8012d88:	1c95      	adds	r5, r2, #2
 8012d8a:	f033 0210 	bics.w	r2, r3, #16
 8012d8e:	d109      	bne.n	8012da4 <_strtol_l.constprop.0+0x54>
 8012d90:	2c30      	cmp	r4, #48	@ 0x30
 8012d92:	d12a      	bne.n	8012dea <_strtol_l.constprop.0+0x9a>
 8012d94:	782a      	ldrb	r2, [r5, #0]
 8012d96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012d9a:	2a58      	cmp	r2, #88	@ 0x58
 8012d9c:	d125      	bne.n	8012dea <_strtol_l.constprop.0+0x9a>
 8012d9e:	786c      	ldrb	r4, [r5, #1]
 8012da0:	2310      	movs	r3, #16
 8012da2:	3502      	adds	r5, #2
 8012da4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012da8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012dac:	2200      	movs	r2, #0
 8012dae:	fbbc f9f3 	udiv	r9, ip, r3
 8012db2:	4610      	mov	r0, r2
 8012db4:	fb03 ca19 	mls	sl, r3, r9, ip
 8012db8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012dbc:	2f09      	cmp	r7, #9
 8012dbe:	d81b      	bhi.n	8012df8 <_strtol_l.constprop.0+0xa8>
 8012dc0:	463c      	mov	r4, r7
 8012dc2:	42a3      	cmp	r3, r4
 8012dc4:	dd27      	ble.n	8012e16 <_strtol_l.constprop.0+0xc6>
 8012dc6:	1c57      	adds	r7, r2, #1
 8012dc8:	d007      	beq.n	8012dda <_strtol_l.constprop.0+0x8a>
 8012dca:	4581      	cmp	r9, r0
 8012dcc:	d320      	bcc.n	8012e10 <_strtol_l.constprop.0+0xc0>
 8012dce:	d101      	bne.n	8012dd4 <_strtol_l.constprop.0+0x84>
 8012dd0:	45a2      	cmp	sl, r4
 8012dd2:	db1d      	blt.n	8012e10 <_strtol_l.constprop.0+0xc0>
 8012dd4:	fb00 4003 	mla	r0, r0, r3, r4
 8012dd8:	2201      	movs	r2, #1
 8012dda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012dde:	e7eb      	b.n	8012db8 <_strtol_l.constprop.0+0x68>
 8012de0:	2c2b      	cmp	r4, #43	@ 0x2b
 8012de2:	bf04      	itt	eq
 8012de4:	782c      	ldrbeq	r4, [r5, #0]
 8012de6:	1c95      	addeq	r5, r2, #2
 8012de8:	e7cf      	b.n	8012d8a <_strtol_l.constprop.0+0x3a>
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d1da      	bne.n	8012da4 <_strtol_l.constprop.0+0x54>
 8012dee:	2c30      	cmp	r4, #48	@ 0x30
 8012df0:	bf0c      	ite	eq
 8012df2:	2308      	moveq	r3, #8
 8012df4:	230a      	movne	r3, #10
 8012df6:	e7d5      	b.n	8012da4 <_strtol_l.constprop.0+0x54>
 8012df8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012dfc:	2f19      	cmp	r7, #25
 8012dfe:	d801      	bhi.n	8012e04 <_strtol_l.constprop.0+0xb4>
 8012e00:	3c37      	subs	r4, #55	@ 0x37
 8012e02:	e7de      	b.n	8012dc2 <_strtol_l.constprop.0+0x72>
 8012e04:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012e08:	2f19      	cmp	r7, #25
 8012e0a:	d804      	bhi.n	8012e16 <_strtol_l.constprop.0+0xc6>
 8012e0c:	3c57      	subs	r4, #87	@ 0x57
 8012e0e:	e7d8      	b.n	8012dc2 <_strtol_l.constprop.0+0x72>
 8012e10:	f04f 32ff 	mov.w	r2, #4294967295
 8012e14:	e7e1      	b.n	8012dda <_strtol_l.constprop.0+0x8a>
 8012e16:	1c53      	adds	r3, r2, #1
 8012e18:	d108      	bne.n	8012e2c <_strtol_l.constprop.0+0xdc>
 8012e1a:	2322      	movs	r3, #34	@ 0x22
 8012e1c:	f8ce 3000 	str.w	r3, [lr]
 8012e20:	4660      	mov	r0, ip
 8012e22:	f1b8 0f00 	cmp.w	r8, #0
 8012e26:	d0a0      	beq.n	8012d6a <_strtol_l.constprop.0+0x1a>
 8012e28:	1e69      	subs	r1, r5, #1
 8012e2a:	e006      	b.n	8012e3a <_strtol_l.constprop.0+0xea>
 8012e2c:	b106      	cbz	r6, 8012e30 <_strtol_l.constprop.0+0xe0>
 8012e2e:	4240      	negs	r0, r0
 8012e30:	f1b8 0f00 	cmp.w	r8, #0
 8012e34:	d099      	beq.n	8012d6a <_strtol_l.constprop.0+0x1a>
 8012e36:	2a00      	cmp	r2, #0
 8012e38:	d1f6      	bne.n	8012e28 <_strtol_l.constprop.0+0xd8>
 8012e3a:	f8c8 1000 	str.w	r1, [r8]
 8012e3e:	e794      	b.n	8012d6a <_strtol_l.constprop.0+0x1a>
 8012e40:	080150c9 	.word	0x080150c9

08012e44 <_strtol_r>:
 8012e44:	f7ff bf84 	b.w	8012d50 <_strtol_l.constprop.0>

08012e48 <_strtoul_l.constprop.0>:
 8012e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012e4c:	4e34      	ldr	r6, [pc, #208]	@ (8012f20 <_strtoul_l.constprop.0+0xd8>)
 8012e4e:	4686      	mov	lr, r0
 8012e50:	460d      	mov	r5, r1
 8012e52:	4628      	mov	r0, r5
 8012e54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012e58:	5d37      	ldrb	r7, [r6, r4]
 8012e5a:	f017 0708 	ands.w	r7, r7, #8
 8012e5e:	d1f8      	bne.n	8012e52 <_strtoul_l.constprop.0+0xa>
 8012e60:	2c2d      	cmp	r4, #45	@ 0x2d
 8012e62:	d12f      	bne.n	8012ec4 <_strtoul_l.constprop.0+0x7c>
 8012e64:	782c      	ldrb	r4, [r5, #0]
 8012e66:	2701      	movs	r7, #1
 8012e68:	1c85      	adds	r5, r0, #2
 8012e6a:	f033 0010 	bics.w	r0, r3, #16
 8012e6e:	d109      	bne.n	8012e84 <_strtoul_l.constprop.0+0x3c>
 8012e70:	2c30      	cmp	r4, #48	@ 0x30
 8012e72:	d12c      	bne.n	8012ece <_strtoul_l.constprop.0+0x86>
 8012e74:	7828      	ldrb	r0, [r5, #0]
 8012e76:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8012e7a:	2858      	cmp	r0, #88	@ 0x58
 8012e7c:	d127      	bne.n	8012ece <_strtoul_l.constprop.0+0x86>
 8012e7e:	786c      	ldrb	r4, [r5, #1]
 8012e80:	2310      	movs	r3, #16
 8012e82:	3502      	adds	r5, #2
 8012e84:	f04f 38ff 	mov.w	r8, #4294967295
 8012e88:	2600      	movs	r6, #0
 8012e8a:	fbb8 f8f3 	udiv	r8, r8, r3
 8012e8e:	fb03 f908 	mul.w	r9, r3, r8
 8012e92:	ea6f 0909 	mvn.w	r9, r9
 8012e96:	4630      	mov	r0, r6
 8012e98:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8012e9c:	f1bc 0f09 	cmp.w	ip, #9
 8012ea0:	d81c      	bhi.n	8012edc <_strtoul_l.constprop.0+0x94>
 8012ea2:	4664      	mov	r4, ip
 8012ea4:	42a3      	cmp	r3, r4
 8012ea6:	dd2a      	ble.n	8012efe <_strtoul_l.constprop.0+0xb6>
 8012ea8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8012eac:	d007      	beq.n	8012ebe <_strtoul_l.constprop.0+0x76>
 8012eae:	4580      	cmp	r8, r0
 8012eb0:	d322      	bcc.n	8012ef8 <_strtoul_l.constprop.0+0xb0>
 8012eb2:	d101      	bne.n	8012eb8 <_strtoul_l.constprop.0+0x70>
 8012eb4:	45a1      	cmp	r9, r4
 8012eb6:	db1f      	blt.n	8012ef8 <_strtoul_l.constprop.0+0xb0>
 8012eb8:	fb00 4003 	mla	r0, r0, r3, r4
 8012ebc:	2601      	movs	r6, #1
 8012ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012ec2:	e7e9      	b.n	8012e98 <_strtoul_l.constprop.0+0x50>
 8012ec4:	2c2b      	cmp	r4, #43	@ 0x2b
 8012ec6:	bf04      	itt	eq
 8012ec8:	782c      	ldrbeq	r4, [r5, #0]
 8012eca:	1c85      	addeq	r5, r0, #2
 8012ecc:	e7cd      	b.n	8012e6a <_strtoul_l.constprop.0+0x22>
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d1d8      	bne.n	8012e84 <_strtoul_l.constprop.0+0x3c>
 8012ed2:	2c30      	cmp	r4, #48	@ 0x30
 8012ed4:	bf0c      	ite	eq
 8012ed6:	2308      	moveq	r3, #8
 8012ed8:	230a      	movne	r3, #10
 8012eda:	e7d3      	b.n	8012e84 <_strtoul_l.constprop.0+0x3c>
 8012edc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8012ee0:	f1bc 0f19 	cmp.w	ip, #25
 8012ee4:	d801      	bhi.n	8012eea <_strtoul_l.constprop.0+0xa2>
 8012ee6:	3c37      	subs	r4, #55	@ 0x37
 8012ee8:	e7dc      	b.n	8012ea4 <_strtoul_l.constprop.0+0x5c>
 8012eea:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8012eee:	f1bc 0f19 	cmp.w	ip, #25
 8012ef2:	d804      	bhi.n	8012efe <_strtoul_l.constprop.0+0xb6>
 8012ef4:	3c57      	subs	r4, #87	@ 0x57
 8012ef6:	e7d5      	b.n	8012ea4 <_strtoul_l.constprop.0+0x5c>
 8012ef8:	f04f 36ff 	mov.w	r6, #4294967295
 8012efc:	e7df      	b.n	8012ebe <_strtoul_l.constprop.0+0x76>
 8012efe:	1c73      	adds	r3, r6, #1
 8012f00:	d106      	bne.n	8012f10 <_strtoul_l.constprop.0+0xc8>
 8012f02:	2322      	movs	r3, #34	@ 0x22
 8012f04:	f8ce 3000 	str.w	r3, [lr]
 8012f08:	4630      	mov	r0, r6
 8012f0a:	b932      	cbnz	r2, 8012f1a <_strtoul_l.constprop.0+0xd2>
 8012f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012f10:	b107      	cbz	r7, 8012f14 <_strtoul_l.constprop.0+0xcc>
 8012f12:	4240      	negs	r0, r0
 8012f14:	2a00      	cmp	r2, #0
 8012f16:	d0f9      	beq.n	8012f0c <_strtoul_l.constprop.0+0xc4>
 8012f18:	b106      	cbz	r6, 8012f1c <_strtoul_l.constprop.0+0xd4>
 8012f1a:	1e69      	subs	r1, r5, #1
 8012f1c:	6011      	str	r1, [r2, #0]
 8012f1e:	e7f5      	b.n	8012f0c <_strtoul_l.constprop.0+0xc4>
 8012f20:	080150c9 	.word	0x080150c9

08012f24 <_strtoul_r>:
 8012f24:	f7ff bf90 	b.w	8012e48 <_strtoul_l.constprop.0>

08012f28 <fiprintf>:
 8012f28:	b40e      	push	{r1, r2, r3}
 8012f2a:	b503      	push	{r0, r1, lr}
 8012f2c:	4601      	mov	r1, r0
 8012f2e:	ab03      	add	r3, sp, #12
 8012f30:	4805      	ldr	r0, [pc, #20]	@ (8012f48 <fiprintf+0x20>)
 8012f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f36:	6800      	ldr	r0, [r0, #0]
 8012f38:	9301      	str	r3, [sp, #4]
 8012f3a:	f7ff fab3 	bl	80124a4 <_vfiprintf_r>
 8012f3e:	b002      	add	sp, #8
 8012f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f44:	b003      	add	sp, #12
 8012f46:	4770      	bx	lr
 8012f48:	200001b0 	.word	0x200001b0

08012f4c <abort>:
 8012f4c:	b508      	push	{r3, lr}
 8012f4e:	2006      	movs	r0, #6
 8012f50:	f000 f82c 	bl	8012fac <raise>
 8012f54:	2001      	movs	r0, #1
 8012f56:	f7ee fc59 	bl	800180c <_exit>

08012f5a <_raise_r>:
 8012f5a:	291f      	cmp	r1, #31
 8012f5c:	b538      	push	{r3, r4, r5, lr}
 8012f5e:	4605      	mov	r5, r0
 8012f60:	460c      	mov	r4, r1
 8012f62:	d904      	bls.n	8012f6e <_raise_r+0x14>
 8012f64:	2316      	movs	r3, #22
 8012f66:	6003      	str	r3, [r0, #0]
 8012f68:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6c:	bd38      	pop	{r3, r4, r5, pc}
 8012f6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012f70:	b112      	cbz	r2, 8012f78 <_raise_r+0x1e>
 8012f72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012f76:	b94b      	cbnz	r3, 8012f8c <_raise_r+0x32>
 8012f78:	4628      	mov	r0, r5
 8012f7a:	f000 f831 	bl	8012fe0 <_getpid_r>
 8012f7e:	4622      	mov	r2, r4
 8012f80:	4601      	mov	r1, r0
 8012f82:	4628      	mov	r0, r5
 8012f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f88:	f000 b818 	b.w	8012fbc <_kill_r>
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	d00a      	beq.n	8012fa6 <_raise_r+0x4c>
 8012f90:	1c59      	adds	r1, r3, #1
 8012f92:	d103      	bne.n	8012f9c <_raise_r+0x42>
 8012f94:	2316      	movs	r3, #22
 8012f96:	6003      	str	r3, [r0, #0]
 8012f98:	2001      	movs	r0, #1
 8012f9a:	e7e7      	b.n	8012f6c <_raise_r+0x12>
 8012f9c:	2100      	movs	r1, #0
 8012f9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	4798      	blx	r3
 8012fa6:	2000      	movs	r0, #0
 8012fa8:	e7e0      	b.n	8012f6c <_raise_r+0x12>
	...

08012fac <raise>:
 8012fac:	4b02      	ldr	r3, [pc, #8]	@ (8012fb8 <raise+0xc>)
 8012fae:	4601      	mov	r1, r0
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f7ff bfd2 	b.w	8012f5a <_raise_r>
 8012fb6:	bf00      	nop
 8012fb8:	200001b0 	.word	0x200001b0

08012fbc <_kill_r>:
 8012fbc:	b538      	push	{r3, r4, r5, lr}
 8012fbe:	4d07      	ldr	r5, [pc, #28]	@ (8012fdc <_kill_r+0x20>)
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4608      	mov	r0, r1
 8012fc6:	4611      	mov	r1, r2
 8012fc8:	602b      	str	r3, [r5, #0]
 8012fca:	f7ee fc0f 	bl	80017ec <_kill>
 8012fce:	1c43      	adds	r3, r0, #1
 8012fd0:	d102      	bne.n	8012fd8 <_kill_r+0x1c>
 8012fd2:	682b      	ldr	r3, [r5, #0]
 8012fd4:	b103      	cbz	r3, 8012fd8 <_kill_r+0x1c>
 8012fd6:	6023      	str	r3, [r4, #0]
 8012fd8:	bd38      	pop	{r3, r4, r5, pc}
 8012fda:	bf00      	nop
 8012fdc:	200009c4 	.word	0x200009c4

08012fe0 <_getpid_r>:
 8012fe0:	f7ee bbfc 	b.w	80017dc <_getpid>

08012fe4 <fminf>:
 8012fe4:	b508      	push	{r3, lr}
 8012fe6:	ed2d 8b02 	vpush	{d8}
 8012fea:	eeb0 8a40 	vmov.f32	s16, s0
 8012fee:	eef0 8a60 	vmov.f32	s17, s1
 8012ff2:	f000 f815 	bl	8013020 <__fpclassifyf>
 8012ff6:	b930      	cbnz	r0, 8013006 <fminf+0x22>
 8012ff8:	eeb0 8a68 	vmov.f32	s16, s17
 8012ffc:	eeb0 0a48 	vmov.f32	s0, s16
 8013000:	ecbd 8b02 	vpop	{d8}
 8013004:	bd08      	pop	{r3, pc}
 8013006:	eeb0 0a68 	vmov.f32	s0, s17
 801300a:	f000 f809 	bl	8013020 <__fpclassifyf>
 801300e:	2800      	cmp	r0, #0
 8013010:	d0f4      	beq.n	8012ffc <fminf+0x18>
 8013012:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301a:	d5ed      	bpl.n	8012ff8 <fminf+0x14>
 801301c:	e7ee      	b.n	8012ffc <fminf+0x18>
	...

08013020 <__fpclassifyf>:
 8013020:	ee10 3a10 	vmov	r3, s0
 8013024:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8013028:	d00d      	beq.n	8013046 <__fpclassifyf+0x26>
 801302a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 801302e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8013032:	d30a      	bcc.n	801304a <__fpclassifyf+0x2a>
 8013034:	4b07      	ldr	r3, [pc, #28]	@ (8013054 <__fpclassifyf+0x34>)
 8013036:	1e42      	subs	r2, r0, #1
 8013038:	429a      	cmp	r2, r3
 801303a:	d908      	bls.n	801304e <__fpclassifyf+0x2e>
 801303c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8013040:	4258      	negs	r0, r3
 8013042:	4158      	adcs	r0, r3
 8013044:	4770      	bx	lr
 8013046:	2002      	movs	r0, #2
 8013048:	4770      	bx	lr
 801304a:	2004      	movs	r0, #4
 801304c:	4770      	bx	lr
 801304e:	2003      	movs	r0, #3
 8013050:	4770      	bx	lr
 8013052:	bf00      	nop
 8013054:	007ffffe 	.word	0x007ffffe

08013058 <_init>:
 8013058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801305a:	bf00      	nop
 801305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801305e:	bc08      	pop	{r3}
 8013060:	469e      	mov	lr, r3
 8013062:	4770      	bx	lr

08013064 <_fini>:
 8013064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013066:	bf00      	nop
 8013068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801306a:	bc08      	pop	{r3}
 801306c:	469e      	mov	lr, r3
 801306e:	4770      	bx	lr
