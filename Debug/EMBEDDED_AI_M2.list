
EMBEDDED_AI_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae8c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  0800afd0  0800afd0  0000bfd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c6f8  0800c6f8  0000d6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c700  0800c700  0000d700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c704  0800c704  0000d704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000008  0800c708  0000e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000338  200001f4  0800c8f4  0000e1f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000052c  0800c8f4  0000e52c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e151  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004095  00000000  00000000  0002c375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001fc8  00000000  00000000  00030410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000188d  00000000  00000000  000323d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000264e7  00000000  00000000  00033c65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022784  00000000  00000000  0005a14c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000e8740  00000000  00000000  0007c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000087  00000000  00000000  00165010  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009764  00000000  00000000  00165098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  0016e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800afb4 	.word	0x0800afb4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	0800afb4 	.word	0x0800afb4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e70:	e000      	b.n	8000e74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e009      	b.n	8000eee <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffb0 	bl	8000e48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbf1      	blt.n	8000eda <_write+0x12>
	}
	return len;
 8000ef6:	687b      	ldr	r3, [r7, #4]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08e      	sub	sp, #56	@ 0x38
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fe2b 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f859 	bl	8000fc0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f0e:	f000 f8af 	bl	8001070 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f9e3 	bl	80012dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f16:	f000 f8c9 	bl	80010ac <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000f1a:	f000 f907 	bl	800112c <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000f1e:	f000 f951 	bl	80011c4 <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000f22:	f006 fc83 	bl	800782c <MX_FATFS_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <main+0x30>
    Error_Handler();
 8000f2c:	f000 fa1a 	bl	8001364 <Error_Handler>
  }
  MX_TIM2_Init();
 8000f30:	f000 f986 	bl	8001240 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

//SET SA0 = "1"
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000f34:	2201      	movs	r2, #1
 8000f36:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3e:	f001 f9bd 	bl	80022bc <HAL_GPIO_WritePin>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(&hi2c1,
 8000f42:	2364      	movs	r3, #100	@ 0x64
 8000f44:	2203      	movs	r2, #3
 8000f46:	21d6      	movs	r1, #214	@ 0xd6
 8000f48:	4818      	ldr	r0, [pc, #96]	@ (8000fac <main+0xac>)
 8000f4a:	f001 fc9d 	bl	8002888 <HAL_I2C_IsDeviceReady>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	ISM330DHCX_I2C_ADDRESS, 3, 100);

	if (status == HAL_OK) {
 8000f54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d103      	bne.n	8000f64 <main+0x64>
		// Device is ready
		printf("ISM330DHCX is ready for communication.\n");
 8000f5c:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <main+0xb0>)
 8000f5e:	f008 f87f 	bl	8009060 <puts>
 8000f62:	e005      	b.n	8000f70 <main+0x70>
	} else {
		// Device not ready or communication failed
		printf("ISM330DHCX is not ready. HAL_StatusTypeDef: %d\n", status);
 8000f64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <main+0xb4>)
 8000f6c:	f008 f810 	bl	8008f90 <iprintf>
	}

	InitializeISM330DHCX2();
 8000f70:	f000 fcda 	bl	8001928 <InitializeISM330DHCX2>
	InitializeNanoEdgeAI();
 8000f74:	f000 fcc0 	bl	80018f8 <InitializeNanoEdgeAI>
	//TMP1826_Init();
	TMP1826_Init();
 8000f78:	f006 fab2 	bl	80074e0 <TMP1826_Init>
//    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x0F, I2C_MEMADD_SIZE_8BIT, &who_am_i, 1, 100);
//    HAL_Delay(500);
//    printf("ISM330DHCX WHO_AM_I: 0x%02X\n", who_am_i); // should get  0x6B
	AccelerometerData accel;
	GyroscopeData gyro;
	HAL_TIM_Base_Start(&htim2);
 8000f7c:	480e      	ldr	r0, [pc, #56]	@ (8000fb8 <main+0xb8>)
 8000f7e:	f005 fa11 	bl	80063a4 <HAL_TIM_Base_Start>
	int count = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	@ 0x30
	while (1) {

		       float temperature = TMP1826_ReadTemperature();
 8000f86:	f006 fb7b 	bl	8007680 <TMP1826_ReadTemperature>
 8000f8a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
		       printf("Temperature: %.2f C\r\n", temperature);
 8000f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000f90:	f7ff fab2 	bl	80004f8 <__aeabi_f2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4808      	ldr	r0, [pc, #32]	@ (8000fbc <main+0xbc>)
 8000f9a:	f007 fff9 	bl	8008f90 <iprintf>



		           HAL_Delay(1000);  // Read temperature every 2 seconds
 8000f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fa2:	f000 fe63 	bl	8001c6c <HAL_Delay>
	while (1) {
 8000fa6:	bf00      	nop
 8000fa8:	e7ed      	b.n	8000f86 <main+0x86>
 8000faa:	bf00      	nop
 8000fac:	20000210 	.word	0x20000210
 8000fb0:	0800afd0 	.word	0x0800afd0
 8000fb4:	0800aff8 	.word	0x0800aff8
 8000fb8:	2000035c 	.word	0x2000035c
 8000fbc:	0800b028 	.word	0x0800b028

08000fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b09a      	sub	sp, #104	@ 0x68
 8000fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	2248      	movs	r2, #72	@ 0x48
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f008 f926 	bl	8009220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <SystemClock_Config+0xac>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fee:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <SystemClock_Config+0xac>)
 8000ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <SystemClock_Config+0xac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8001002:	2322      	movs	r3, #34	@ 0x22
 8001004:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001006:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800100c:	2301      	movs	r3, #1
 800100e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001014:	2300      	movs	r3, #0
 8001016:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8001018:	23a0      	movs	r3, #160	@ 0xa0
 800101a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f003 f98d 	bl	8004344 <HAL_RCC_OscConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001030:	f000 f998 	bl	8001364 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001034:	236f      	movs	r3, #111	@ 0x6f
 8001036:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2101      	movs	r1, #1
 8001054:	4618      	mov	r0, r3
 8001056:	f003 fce9 	bl	8004a2c <HAL_RCC_ClockConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001060:	f000 f980 	bl	8001364 <Error_Handler>
  }
}
 8001064:	bf00      	nop
 8001066:	3768      	adds	r7, #104	@ 0x68
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58000400 	.word	0x58000400

08001070 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	@ 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001076:	463b      	mov	r3, r7
 8001078:	2250      	movs	r2, #80	@ 0x50
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f008 f8cf 	bl	8009220 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001086:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001088:	2300      	movs	r3, #0
 800108a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800108c:	2310      	movs	r3, #16
 800108e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4618      	mov	r0, r3
 8001094:	f004 f909 	bl	80052aa <HAL_RCCEx_PeriphCLKConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800109e:	f000 f961 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80010a2:	bf00      	nop
 80010a4:	3750      	adds	r7, #80	@ 0x50
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <MX_I2C1_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <MX_I2C1_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010bc:	4b18      	ldr	r3, [pc, #96]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010e8:	f001 f900 	bl	80022ec <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 f937 	bl	8001364 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	@ (8001120 <MX_I2C1_Init+0x74>)
 80010fa:	f002 fcf7 	bl	8003aec <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 f92e 	bl	8001364 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_I2C1_Init+0x74>)
 800110c:	f002 fd39 	bl	8003b82 <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 f925 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000210 	.word	0x20000210
 8001124:	40005400 	.word	0x40005400
 8001128:	00b07cb4 	.word	0x00b07cb4

0800112c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001132:	4a23      	ldr	r2, [pc, #140]	@ (80011c0 <MX_LPUART1_UART_Init+0x94>)
 8001134:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800114a:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001164:	2200      	movs	r2, #0
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001170:	2200      	movs	r2, #0
 8001172:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001174:	4811      	ldr	r0, [pc, #68]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001176:	f005 fbb1 	bl	80068dc <HAL_UART_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 f8f0 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	480d      	ldr	r0, [pc, #52]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 8001188:	f006 f878 	bl	800727c <HAL_UARTEx_SetTxFifoThreshold>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001192:	f000 f8e7 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001196:	2100      	movs	r1, #0
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 800119a:	f006 f8ad 	bl	80072f8 <HAL_UARTEx_SetRxFifoThreshold>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80011a4:	f000 f8de 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80011a8:	4804      	ldr	r0, [pc, #16]	@ (80011bc <MX_LPUART1_UART_Init+0x90>)
 80011aa:	f006 f82e 	bl	800720a <HAL_UARTEx_DisableFifoMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80011b4:	f000 f8d6 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000264 	.word	0x20000264
 80011c0:	40008000 	.word	0x40008000

080011c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <MX_SPI1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d6:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011dc:	4b16      	ldr	r3, [pc, #88]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_SPI1_Init+0x74>)
 80011fa:	2230      	movs	r2, #48	@ 0x30
 80011fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_SPI1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_SPI1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_SPI1_Init+0x74>)
 8001212:	2207      	movs	r2, #7
 8001214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_SPI1_Init+0x74>)
 800121e:	2208      	movs	r2, #8
 8001220:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_SPI1_Init+0x74>)
 8001224:	f004 fac8 	bl	80057b8 <HAL_SPI_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 f899 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200002f8 	.word	0x200002f8
 800123c:	40013000 	.word	0x40013000

08001240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800125e:	4b1e      	ldr	r3, [pc, #120]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001264:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001268:	221f      	movs	r2, #31
 800126a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <MX_TIM2_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b17      	ldr	r3, [pc, #92]	@ (80012d8 <MX_TIM2_Init+0x98>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001286:	4814      	ldr	r0, [pc, #80]	@ (80012d8 <MX_TIM2_Init+0x98>)
 8001288:	f005 f834 	bl	80062f4 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001292:	f000 f867 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800129a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4619      	mov	r1, r3
 80012a2:	480d      	ldr	r0, [pc, #52]	@ (80012d8 <MX_TIM2_Init+0x98>)
 80012a4:	f005 f8c4 	bl	8006430 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ae:	f000 f859 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	4619      	mov	r1, r3
 80012be:	4806      	ldr	r0, [pc, #24]	@ (80012d8 <MX_TIM2_Init+0x98>)
 80012c0:	f005 fa8c 	bl	80067dc <HAL_TIMEx_MasterConfigSynchronization>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012ca:	f000 f84b 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000035c 	.word	0x2000035c

080012dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	2002      	movs	r0, #2
 80012f2:	f7ff fdd0 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2001      	movs	r0, #1
 80012f8:	f7ff fdcd 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fc:	2004      	movs	r0, #4
 80012fe:	f7ff fdca 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|SA0_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f000 ffd6 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_io_GPIO_Port, temp_io_Pin, GPIO_PIN_RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001316:	4812      	ldr	r0, [pc, #72]	@ (8001360 <MX_GPIO_Init+0x84>)
 8001318:	f000 ffd0 	bl	80022bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SA0_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SA0_Pin;
 800131c:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 8001320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001336:	f000 fe39 	bl	8001fac <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_io_Pin */
  GPIO_InitStruct.Pin = temp_io_Pin;
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001340:	2311      	movs	r3, #17
 8001342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001344:	2301      	movs	r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(temp_io_GPIO_Port, &GPIO_InitStruct);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_GPIO_Init+0x84>)
 8001352:	f000 fe2b 	bl	8001fac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	48000800 	.word	0x48000800

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <Error_Handler+0x8>

08001370 <LL_AHB2_GRP1_EnableClock>:
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800137e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4313      	orrs	r3, r2
 8001386:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800138c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4013      	ands	r3, r2
 8001392:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80013ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4013      	ands	r3, r2
 80013c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	bf00      	nop
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80013ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800140e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001412:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4313      	orrs	r3, r2
 800141c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800141e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001422:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b09c      	sub	sp, #112	@ 0x70
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2250      	movs	r2, #80	@ 0x50
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f007 fed9 	bl	8009220 <memset>
  if(hi2c->Instance==I2C1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a1f      	ldr	r2, [pc, #124]	@ (80014f0 <HAL_I2C_MspInit+0xa8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d136      	bne.n	80014e6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001478:	2304      	movs	r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4618      	mov	r0, r3
 8001488:	f003 ff0f 	bl	80052aa <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001492:	f7ff ff67 	bl	8001364 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2002      	movs	r0, #2
 8001498:	f7ff ff6a 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800149c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a2:	2312      	movs	r3, #18
 80014a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ae:	2304      	movs	r3, #4
 80014b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014b6:	4619      	mov	r1, r3
 80014b8:	480e      	ldr	r0, [pc, #56]	@ (80014f4 <HAL_I2C_MspInit+0xac>)
 80014ba:	f000 fd77 	bl	8001fac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014be:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80014c2:	f7ff ff6e 	bl	80013a2 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	201e      	movs	r0, #30
 80014cc:	f000 fccd 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014d0:	201e      	movs	r0, #30
 80014d2:	f000 fce4 	bl	8001e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	201f      	movs	r0, #31
 80014dc:	f000 fcc5 	bl	8001e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014e0:	201f      	movs	r0, #31
 80014e2:	f000 fcdc 	bl	8001e9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014e6:	bf00      	nop
 80014e8:	3770      	adds	r7, #112	@ 0x70
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40005400 	.word	0x40005400
 80014f4:	48000400 	.word	0x48000400

080014f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b09c      	sub	sp, #112	@ 0x70
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	f107 030c 	add.w	r3, r7, #12
 8001514:	2250      	movs	r2, #80	@ 0x50
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f007 fe81 	bl	8009220 <memset>
  if(huart->Instance==LPUART1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a16      	ldr	r2, [pc, #88]	@ (800157c <HAL_UART_MspInit+0x84>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d124      	bne.n	8001572 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001528:	2302      	movs	r3, #2
 800152a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800152c:	2300      	movs	r3, #0
 800152e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4618      	mov	r0, r3
 8001536:	f003 feb8 	bl	80052aa <HAL_RCCEx_PeriphCLKConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001540:	f7ff ff10 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001544:	2001      	movs	r0, #1
 8001546:	f7ff ff45 	bl	80013d4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2002      	movs	r0, #2
 800154c:	f7ff ff10 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001550:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001554:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001562:	2308      	movs	r3, #8
 8001564:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800156a:	4619      	mov	r1, r3
 800156c:	4804      	ldr	r0, [pc, #16]	@ (8001580 <HAL_UART_MspInit+0x88>)
 800156e:	f000 fd1d 	bl	8001fac <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8001572:	bf00      	nop
 8001574:	3770      	adds	r7, #112	@ 0x70
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40008000 	.word	0x40008000
 8001580:	48000400 	.word	0x48000400

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0f      	ldr	r2, [pc, #60]	@ (80015e0 <HAL_SPI_MspInit+0x5c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d117      	bne.n	80015d6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015a6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80015aa:	f7ff ff2c 	bl	8001406 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2001      	movs	r0, #1
 80015b0:	f7ff fede 	bl	8001370 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80015b4:	23c2      	movs	r3, #194	@ 0xc2
 80015b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015c4:	2305      	movs	r3, #5
 80015c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 030c 	add.w	r3, r7, #12
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d2:	f000 fceb 	bl	8001fac <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40013000 	.word	0x40013000

080015e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015f4:	d102      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f6:	2001      	movs	r0, #1
 80015f8:	f7ff fed3 	bl	80013a2 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <NMI_Handler+0x4>

0800160c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <MemManage_Handler+0x4>

0800161c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <BusFault_Handler+0x4>

08001624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <UsageFault_Handler+0x4>

0800162c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165a:	f000 fadb 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <I2C1_EV_IRQHandler+0x10>)
 800166a:	f001 f9f9 	bl	8002a60 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000210 	.word	0x20000210

08001678 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <I2C1_ER_IRQHandler+0x10>)
 800167e:	f001 fa09 	bl	8002a94 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000210 	.word	0x20000210

0800168c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_kill>:

int _kill(int pid, int sig)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a6:	f007 fe0d 	bl	80092c4 <__errno>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2216      	movs	r2, #22
 80016ae:	601a      	str	r2, [r3, #0]
  return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <_exit>:

void _exit (int status)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7ff ffe7 	bl	800169c <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ce:	bf00      	nop
 80016d0:	e7fd      	b.n	80016ce <_exit+0x12>

080016d2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e00a      	b.n	80016fa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e4:	f3af 8000 	nop.w
 80016e8:	4601      	mov	r1, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	60ba      	str	r2, [r7, #8]
 80016f0:	b2ca      	uxtb	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	429a      	cmp	r2, r3
 8001700:	dbf0      	blt.n	80016e4 <_read+0x12>
  }

  return len;
 8001702:	687b      	ldr	r3, [r7, #4]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <_close>:
  }
  return len;
}

int _close(int file)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001734:	605a      	str	r2, [r3, #4]
  return 0;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_isatty>:

int _isatty(int file)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800175a:	b480      	push	{r7}
 800175c:	b085      	sub	sp, #20
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	@ (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f007 fd8e 	bl	80092c4 <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a05      	ldr	r2, [pc, #20]	@ (80017d8 <_sbrk+0x64>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20030000 	.word	0x20030000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	200003a8 	.word	0x200003a8
 80017dc:	20000530 	.word	0x20000530

080017e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80017e4:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <SystemInit+0x98>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ea:	4a23      	ldr	r2, [pc, #140]	@ (8001878 <SystemInit+0x98>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001808:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800180c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001818:	4b18      	ldr	r3, [pc, #96]	@ (800187c <SystemInit+0x9c>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800181e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800182a:	f023 0305 	bic.w	r3, r3, #5
 800182e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001836:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800183a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800183e:	f023 0301 	bic.w	r3, r3, #1
 8001842:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800184a:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <SystemInit+0xa0>)
 800184c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800184e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001852:	4a0b      	ldr	r2, [pc, #44]	@ (8001880 <SystemInit+0xa0>)
 8001854:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001864:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00
 800187c:	faf6fefb 	.word	0xfaf6fefb
 8001880:	22041000 	.word	0x22041000

08001884 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001884:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001886:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001888:	3304      	adds	r3, #4

0800188a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800188e:	d3f9      	bcc.n	8001884 <CopyDataInit>
  bx lr
 8001890:	4770      	bx	lr

08001892 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001892:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001894:	3004      	adds	r0, #4

08001896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001896:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001898:	d3fb      	bcc.n	8001892 <FillZerobss>
  bx lr
 800189a:	4770      	bx	lr

0800189c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800189c:	480c      	ldr	r0, [pc, #48]	@ (80018d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800189e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018a0:	f7ff ff9e 	bl	80017e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80018a4:	480b      	ldr	r0, [pc, #44]	@ (80018d4 <LoopForever+0x6>)
 80018a6:	490c      	ldr	r1, [pc, #48]	@ (80018d8 <LoopForever+0xa>)
 80018a8:	4a0c      	ldr	r2, [pc, #48]	@ (80018dc <LoopForever+0xe>)
 80018aa:	2300      	movs	r3, #0
 80018ac:	f7ff ffed 	bl	800188a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80018b0:	480b      	ldr	r0, [pc, #44]	@ (80018e0 <LoopForever+0x12>)
 80018b2:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <LoopForever+0x16>)
 80018b4:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <LoopForever+0x1a>)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f7ff ffe7 	bl	800188a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80018bc:	480b      	ldr	r0, [pc, #44]	@ (80018ec <LoopForever+0x1e>)
 80018be:	490c      	ldr	r1, [pc, #48]	@ (80018f0 <LoopForever+0x22>)
 80018c0:	2300      	movs	r3, #0
 80018c2:	f7ff ffe8 	bl	8001896 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018c6:	f007 fd03 	bl	80092d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80018ca:	f7ff fb19 	bl	8000f00 <main>

080018ce <LoopForever>:

LoopForever:
  b LoopForever
 80018ce:	e7fe      	b.n	80018ce <LoopForever>
  ldr   r0, =_estack
 80018d0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80018d4:	20000008 	.word	0x20000008
 80018d8:	200001f4 	.word	0x200001f4
 80018dc:	0800c708 	.word	0x0800c708
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80018e0:	20030000 	.word	0x20030000
 80018e4:	20030000 	.word	0x20030000
 80018e8:	0800c8f4 	.word	0x0800c8f4
  INIT_BSS _sbss, _ebss
 80018ec:	200001f4 	.word	0x200001f4
 80018f0:	2000052c 	.word	0x2000052c

080018f4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_IRQHandler>
	...

080018f8 <InitializeNanoEdgeAI>:

#include "AI.h"



void InitializeNanoEdgeAI(void) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
    if (neai_classification_init(knowledge) != NEAI_OK) {
 80018fc:	4807      	ldr	r0, [pc, #28]	@ (800191c <InitializeNanoEdgeAI+0x24>)
 80018fe:	f006 fd39 	bl	8008374 <neai_classification_init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <InitializeNanoEdgeAI+0x18>
        printf(" NanoEdge AI Initialization Failed!\n");
 8001908:	4805      	ldr	r0, [pc, #20]	@ (8001920 <InitializeNanoEdgeAI+0x28>)
 800190a:	f007 fba9 	bl	8009060 <puts>
    } else {
        printf(" NanoEdge AI Model Loaded Successfully!\n");
    }
}
 800190e:	e002      	b.n	8001916 <InitializeNanoEdgeAI+0x1e>
        printf(" NanoEdge AI Model Loaded Successfully!\n");
 8001910:	4804      	ldr	r0, [pc, #16]	@ (8001924 <InitializeNanoEdgeAI+0x2c>)
 8001912:	f007 fba5 	bl	8009060 <puts>
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	0800b5c8 	.word	0x0800b5c8
 8001920:	0800b0b4 	.word	0x0800b0b4
 8001924:	0800b0d8 	.word	0x0800b0d8

08001928 <InitializeISM330DHCX2>:
//    printf(" CTRL7_G  = 0x%02X (Should be 0x00 - High-Perf Gyro Confirmed)\n", ctrl7_g);
//}


//added low pass filter
void InitializeISM330DHCX2(void) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
    uint8_t config[2];
    uint8_t readback;
    HAL_StatusTypeDef status;

    printf("Initializing ISM330DHCX...\n");
 800192e:	487d      	ldr	r0, [pc, #500]	@ (8001b24 <InitializeISM330DHCX2+0x1fc>)
 8001930:	f007 fb96 	bl	8009060 <puts>

    // Step 1: Enable Register Auto-Increment & Block Data Update (CTRL3_C)
    config[0] = 0x12;
 8001934:	2312      	movs	r3, #18
 8001936:	713b      	strb	r3, [r7, #4]
    config[1] = 0x44; // IF_INC = 1, BDU = 1
 8001938:	2344      	movs	r3, #68	@ 0x44
 800193a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 800193c:	1d3a      	adds	r2, r7, #4
 800193e:	2364      	movs	r3, #100	@ 0x64
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	2302      	movs	r3, #2
 8001944:	21d6      	movs	r1, #214	@ 0xd6
 8001946:	4878      	ldr	r0, [pc, #480]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001948:	f000 fd6c 	bl	8002424 <HAL_I2C_Master_Transmit>
 800194c:	4603      	mov	r3, r0
 800194e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL3_C setup failed\n");
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <InitializeISM330DHCX2+0x34>
 8001956:	4875      	ldr	r0, [pc, #468]	@ (8001b2c <InitializeISM330DHCX2+0x204>)
 8001958:	f007 fb82 	bl	8009060 <puts>

    HAL_Delay(10);
 800195c:	200a      	movs	r0, #10
 800195e:	f000 f985 	bl	8001c6c <HAL_Delay>

    // Read back CTRL3_C to verify
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x12, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001962:	2364      	movs	r3, #100	@ 0x64
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2301      	movs	r3, #1
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	1cfb      	adds	r3, r7, #3
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2212      	movs	r2, #18
 8001972:	21d6      	movs	r1, #214	@ 0xd6
 8001974:	486c      	ldr	r0, [pc, #432]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001976:	f000 fe6d 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL3_C Readback: 0x%02X (Expected: 0x44)\n", readback);
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	4619      	mov	r1, r3
 800197e:	486c      	ldr	r0, [pc, #432]	@ (8001b30 <InitializeISM330DHCX2+0x208>)
 8001980:	f007 fb06 	bl	8008f90 <iprintf>

    // Step 2: Enable Accelerometer - 104Hz ODR, ±2g Full Scale, High-Performance Mode (CTRL1_XL)
    config[0] = 0x10;
 8001984:	2310      	movs	r3, #16
 8001986:	713b      	strb	r3, [r7, #4]
    config[1] = 0x50;
 8001988:	2350      	movs	r3, #80	@ 0x50
 800198a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 800198c:	1d3a      	adds	r2, r7, #4
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2302      	movs	r3, #2
 8001994:	21d6      	movs	r1, #214	@ 0xd6
 8001996:	4864      	ldr	r0, [pc, #400]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001998:	f000 fd44 	bl	8002424 <HAL_I2C_Master_Transmit>
 800199c:	4603      	mov	r3, r0
 800199e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL1_XL setup failed\n");
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <InitializeISM330DHCX2+0x84>
 80019a6:	4863      	ldr	r0, [pc, #396]	@ (8001b34 <InitializeISM330DHCX2+0x20c>)
 80019a8:	f007 fb5a 	bl	8009060 <puts>

    HAL_Delay(10);
 80019ac:	200a      	movs	r0, #10
 80019ae:	f000 f95d 	bl	8001c6c <HAL_Delay>

    // Read back CTRL1_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 80019b2:	2364      	movs	r3, #100	@ 0x64
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	2301      	movs	r3, #1
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	1cfb      	adds	r3, r7, #3
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	2301      	movs	r3, #1
 80019c0:	2210      	movs	r2, #16
 80019c2:	21d6      	movs	r1, #214	@ 0xd6
 80019c4:	4858      	ldr	r0, [pc, #352]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 80019c6:	f000 fe45 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL1_XL Readback: 0x%02X (Expected: 0x50)\n", readback);
 80019ca:	78fb      	ldrb	r3, [r7, #3]
 80019cc:	4619      	mov	r1, r3
 80019ce:	485a      	ldr	r0, [pc, #360]	@ (8001b38 <InitializeISM330DHCX2+0x210>)
 80019d0:	f007 fade 	bl	8008f90 <iprintf>

    // Step 3: Enable Gyroscope - 104Hz ODR, ±1000 dps Full Scale (CTRL2_G)
    config[0] = 0x11;
 80019d4:	2311      	movs	r3, #17
 80019d6:	713b      	strb	r3, [r7, #4]
    config[1] = 0x48;
 80019d8:	2348      	movs	r3, #72	@ 0x48
 80019da:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 80019dc:	1d3a      	adds	r2, r7, #4
 80019de:	2364      	movs	r3, #100	@ 0x64
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2302      	movs	r3, #2
 80019e4:	21d6      	movs	r1, #214	@ 0xd6
 80019e6:	4850      	ldr	r0, [pc, #320]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 80019e8:	f000 fd1c 	bl	8002424 <HAL_I2C_Master_Transmit>
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL2_G setup failed\n");
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <InitializeISM330DHCX2+0xd4>
 80019f6:	4851      	ldr	r0, [pc, #324]	@ (8001b3c <InitializeISM330DHCX2+0x214>)
 80019f8:	f007 fb32 	bl	8009060 <puts>

    HAL_Delay(10);
 80019fc:	200a      	movs	r0, #10
 80019fe:	f000 f935 	bl	8001c6c <HAL_Delay>

    // Read back CTRL2_G
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001a02:	2364      	movs	r3, #100	@ 0x64
 8001a04:	9302      	str	r3, [sp, #8]
 8001a06:	2301      	movs	r3, #1
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	1cfb      	adds	r3, r7, #3
 8001a0c:	9300      	str	r3, [sp, #0]
 8001a0e:	2301      	movs	r3, #1
 8001a10:	2211      	movs	r2, #17
 8001a12:	21d6      	movs	r1, #214	@ 0xd6
 8001a14:	4844      	ldr	r0, [pc, #272]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001a16:	f000 fe1d 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL2_G Readback: 0x%02X (Expected: 0x48)\n", readback);
 8001a1a:	78fb      	ldrb	r3, [r7, #3]
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4848      	ldr	r0, [pc, #288]	@ (8001b40 <InitializeISM330DHCX2+0x218>)
 8001a20:	f007 fab6 	bl	8008f90 <iprintf>

    // Step 4: Enable LPF2 for Accelerometer & Set Cutoff Frequency to ODR/20
    config[0] = 0x17;  // CTRL8_XL register
 8001a24:	2317      	movs	r3, #23
 8001a26:	713b      	strb	r3, [r7, #4]
    config[1] = 0x82;  // LPF2_XL_EN = 1, HPCF_XL = 010 (ODR/20)
 8001a28:	2382      	movs	r3, #130	@ 0x82
 8001a2a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001a2c:	1d3a      	adds	r2, r7, #4
 8001a2e:	2364      	movs	r3, #100	@ 0x64
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2302      	movs	r3, #2
 8001a34:	21d6      	movs	r1, #214	@ 0xd6
 8001a36:	483c      	ldr	r0, [pc, #240]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001a38:	f000 fcf4 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL8_XL setup failed\n");
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <InitializeISM330DHCX2+0x124>
 8001a46:	483f      	ldr	r0, [pc, #252]	@ (8001b44 <InitializeISM330DHCX2+0x21c>)
 8001a48:	f007 fb0a 	bl	8009060 <puts>

    HAL_Delay(10);
 8001a4c:	200a      	movs	r0, #10
 8001a4e:	f000 f90d 	bl	8001c6c <HAL_Delay>

    // Read back CTRL8_XL
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x17, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001a52:	2364      	movs	r3, #100	@ 0x64
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2301      	movs	r3, #1
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	1cfb      	adds	r3, r7, #3
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2301      	movs	r3, #1
 8001a60:	2217      	movs	r2, #23
 8001a62:	21d6      	movs	r1, #214	@ 0xd6
 8001a64:	4830      	ldr	r0, [pc, #192]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001a66:	f000 fdf5 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL8_XL Readback: 0x%02X (Expected: 0x82)\n", readback);
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4836      	ldr	r0, [pc, #216]	@ (8001b48 <InitializeISM330DHCX2+0x220>)
 8001a70:	f007 fa8e 	bl	8008f90 <iprintf>

    // Step 5: Enable LPF1 for Gyroscope (CTRL4_C)
    config[0] = 0x13;
 8001a74:	2313      	movs	r3, #19
 8001a76:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // LPF1_SEL_G = 1 (Enable LPF1)
 8001a78:	2302      	movs	r3, #2
 8001a7a:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001a7c:	1d3a      	adds	r2, r7, #4
 8001a7e:	2364      	movs	r3, #100	@ 0x64
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2302      	movs	r3, #2
 8001a84:	21d6      	movs	r1, #214	@ 0xd6
 8001a86:	4828      	ldr	r0, [pc, #160]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001a88:	f000 fccc 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL4_C setup failed\n");
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <InitializeISM330DHCX2+0x174>
 8001a96:	482d      	ldr	r0, [pc, #180]	@ (8001b4c <InitializeISM330DHCX2+0x224>)
 8001a98:	f007 fae2 	bl	8009060 <puts>

    HAL_Delay(10);
 8001a9c:	200a      	movs	r0, #10
 8001a9e:	f000 f8e5 	bl	8001c6c <HAL_Delay>

    // Read back CTRL4_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x13, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001aa2:	2364      	movs	r3, #100	@ 0x64
 8001aa4:	9302      	str	r3, [sp, #8]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	1cfb      	adds	r3, r7, #3
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2213      	movs	r2, #19
 8001ab2:	21d6      	movs	r1, #214	@ 0xd6
 8001ab4:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001ab6:	f000 fdcd 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL4_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4824      	ldr	r0, [pc, #144]	@ (8001b50 <InitializeISM330DHCX2+0x228>)
 8001ac0:	f007 fa66 	bl	8008f90 <iprintf>

    // Step 6: Set Gyroscope Cutoff Frequency to ODR/10 (CTRL6_C)
    config[0] = 0x15;
 8001ac4:	2315      	movs	r3, #21
 8001ac6:	713b      	strb	r3, [r7, #4]
    config[1] = 0x02; // FTYPE = 10 (ODR/10)
 8001ac8:	2302      	movs	r3, #2
 8001aca:	717b      	strb	r3, [r7, #5]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001acc:	1d3a      	adds	r2, r7, #4
 8001ace:	2364      	movs	r3, #100	@ 0x64
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	21d6      	movs	r1, #214	@ 0xd6
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001ad8:	f000 fca4 	bl	8002424 <HAL_I2C_Master_Transmit>
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) printf("Error: CTRL6_C setup failed\n");
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <InitializeISM330DHCX2+0x1c4>
 8001ae6:	481b      	ldr	r0, [pc, #108]	@ (8001b54 <InitializeISM330DHCX2+0x22c>)
 8001ae8:	f007 faba 	bl	8009060 <puts>

    HAL_Delay(10);
 8001aec:	200a      	movs	r0, #10
 8001aee:	f000 f8bd 	bl	8001c6c <HAL_Delay>

    // Read back CTRL6_C
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x15, I2C_MEMADD_SIZE_8BIT, &readback, 1, 100);
 8001af2:	2364      	movs	r3, #100	@ 0x64
 8001af4:	9302      	str	r3, [sp, #8]
 8001af6:	2301      	movs	r3, #1
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	1cfb      	adds	r3, r7, #3
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2301      	movs	r3, #1
 8001b00:	2215      	movs	r2, #21
 8001b02:	21d6      	movs	r1, #214	@ 0xd6
 8001b04:	4808      	ldr	r0, [pc, #32]	@ (8001b28 <InitializeISM330DHCX2+0x200>)
 8001b06:	f000 fda5 	bl	8002654 <HAL_I2C_Mem_Read>
    printf("CTRL6_C Readback: 0x%02X (Expected: 0x02)\n", readback);
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4812      	ldr	r0, [pc, #72]	@ (8001b58 <InitializeISM330DHCX2+0x230>)
 8001b10:	f007 fa3e 	bl	8008f90 <iprintf>

    printf("ISM330DHCX Initialization Complete with LPF Enabled!\n");
 8001b14:	4811      	ldr	r0, [pc, #68]	@ (8001b5c <InitializeISM330DHCX2+0x234>)
 8001b16:	f007 faa3 	bl	8009060 <puts>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	0800b164 	.word	0x0800b164
 8001b28:	20000210 	.word	0x20000210
 8001b2c:	0800b180 	.word	0x0800b180
 8001b30:	0800b19c 	.word	0x0800b19c
 8001b34:	0800b1c8 	.word	0x0800b1c8
 8001b38:	0800b1e8 	.word	0x0800b1e8
 8001b3c:	0800b214 	.word	0x0800b214
 8001b40:	0800b230 	.word	0x0800b230
 8001b44:	0800b25c 	.word	0x0800b25c
 8001b48:	0800b27c 	.word	0x0800b27c
 8001b4c:	0800b2a8 	.word	0x0800b2a8
 8001b50:	0800b2c4 	.word	0x0800b2c4
 8001b54:	0800b2f0 	.word	0x0800b2f0
 8001b58:	0800b30c 	.word	0x0800b30c
 8001b5c:	0800b338 	.word	0x0800b338

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <HAL_Init+0x3c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b9c <HAL_Init+0x3c>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b76:	2003      	movs	r0, #3
 8001b78:	f000 f96c 	bl	8001e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b7c:	200f      	movs	r0, #15
 8001b7e:	f000 f80f 	bl	8001ba0 <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	e001      	b.n	8001b92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b8e:	f7ff fc53 	bl	8001438 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b92:	79fb      	ldrb	r3, [r7, #7]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	58004000 	.word	0x58004000

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001bac:	4b17      	ldr	r3, [pc, #92]	@ (8001c0c <HAL_InitTick+0x6c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d024      	beq.n	8001bfe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bb4:	f003 f8e8 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <HAL_InitTick+0x6c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc4:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 f974 	bl	8001eba <HAL_SYSTICK_Config>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b0f      	cmp	r3, #15
 8001bdc:	d809      	bhi.n	8001bf2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bde:	2200      	movs	r2, #0
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	f04f 30ff 	mov.w	r0, #4294967295
 8001be6:	f000 f940 	bl	8001e6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bea:	4a09      	ldr	r2, [pc, #36]	@ (8001c10 <HAL_InitTick+0x70>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	e004      	b.n	8001c02 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
 8001bfc:	e001      	b.n	8001c02 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000010 	.word	0x20000010
 8001c10:	2000000c 	.word	0x2000000c

08001c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000010 	.word	0x20000010
 8001c38:	200003ac 	.word	0x200003ac

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200003ac 	.word	0x200003ac

08001c54 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_GetTickPrio+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff ffe2 	bl	8001c3c <HAL_GetTick>
 8001c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c84:	d005      	beq.n	8001c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_Delay+0x44>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4413      	add	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c92:	bf00      	nop
 8001c94:	f7ff ffd2 	bl	8001c3c <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d8f7      	bhi.n	8001c94 <HAL_Delay+0x28>
  {
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000010 	.word	0x20000010

08001cb4 <__NVIC_SetPriorityGrouping>:
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_EnableIRQ>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	db0b      	blt.n	8001d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4907      	ldr	r1, [pc, #28]	@ (8001d50 <__NVIC_EnableIRQ+0x38>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	2001      	movs	r0, #1
 8001d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000e100 	.word	0xe000e100

08001d54 <__NVIC_SetPriority>:
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6039      	str	r1, [r7, #0]
 8001d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	db0a      	blt.n	8001d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	490c      	ldr	r1, [pc, #48]	@ (8001da0 <__NVIC_SetPriority+0x4c>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	0112      	lsls	r2, r2, #4
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	440b      	add	r3, r1
 8001d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001d7c:	e00a      	b.n	8001d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	4908      	ldr	r1, [pc, #32]	@ (8001da4 <__NVIC_SetPriority+0x50>)
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	3b04      	subs	r3, #4
 8001d8c:	0112      	lsls	r2, r2, #4
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	440b      	add	r3, r1
 8001d92:	761a      	strb	r2, [r3, #24]
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <NVIC_EncodePriority>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b089      	sub	sp, #36	@ 0x24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f1c3 0307 	rsb	r3, r3, #7
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	bf28      	it	cs
 8001dc6:	2304      	movcs	r3, #4
 8001dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3304      	adds	r3, #4
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d902      	bls.n	8001dd8 <NVIC_EncodePriority+0x30>
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3b03      	subs	r3, #3
 8001dd6:	e000      	b.n	8001dda <NVIC_EncodePriority+0x32>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	401a      	ands	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dfa:	43d9      	mvns	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e00:	4313      	orrs	r3, r2
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3724      	adds	r7, #36	@ 0x24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <SysTick_Config>:
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d301      	bcc.n	8001e26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00f      	b.n	8001e46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e26:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <SysTick_Config+0x40>)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e2e:	210f      	movs	r1, #15
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f7ff ff8e 	bl	8001d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <SysTick_Config+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <SysTick_Config+0x40>)
 8001e40:	2207      	movs	r2, #7
 8001e42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	e000e010 	.word	0xe000e010

08001e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ff29 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b086      	sub	sp, #24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	60b9      	str	r1, [r7, #8]
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e78:	f7ff ff40 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6978      	ldr	r0, [r7, #20]
 8001e84:	f7ff ff90 	bl	8001da8 <NVIC_EncodePriority>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	4611      	mov	r1, r2
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff5f 	bl	8001d54 <__NVIC_SetPriority>
}
 8001e96:	bf00      	nop
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff ff33 	bl	8001d18 <__NVIC_EnableIRQ>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ffa4 	bl	8001e10 <SysTick_Config>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d005      	beq.n	8001ef6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2204      	movs	r2, #4
 8001eee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
 8001ef4:	e047      	b.n	8001f86 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 020e 	bic.w	r2, r2, #14
 8001f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f022 0201 	bic.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2a:	f003 021c 	and.w	r2, r3, #28
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	2101      	movs	r1, #1
 8001f34:	fa01 f202 	lsl.w	r2, r1, r2
 8001f38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001f42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00c      	beq.n	8001f66 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001f64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4798      	blx	r3
    }
  }
  return status;
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f9e:	b2db      	uxtb	r3, r3
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	e14c      	b.n	8002256 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	f000 813e 	beq.w	8002250 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d005      	beq.n	8001fec <HAL_GPIO_Init+0x40>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d130      	bne.n	800204e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002022:	2201      	movs	r2, #1
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa02 f303 	lsl.w	r3, r2, r3
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	091b      	lsrs	r3, r3, #4
 8002038:	f003 0201 	and.w	r2, r3, #1
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d017      	beq.n	800208a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d123      	bne.n	80020de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	08da      	lsrs	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3208      	adds	r2, #8
 80020d8:	6939      	ldr	r1, [r7, #16]
 80020da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 0203 	and.w	r2, r3, #3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8098 	beq.w	8002250 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002120:	4a54      	ldr	r2, [pc, #336]	@ (8002274 <HAL_GPIO_Init+0x2c8>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800214a:	d019      	beq.n	8002180 <HAL_GPIO_Init+0x1d4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a4a      	ldr	r2, [pc, #296]	@ (8002278 <HAL_GPIO_Init+0x2cc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d013      	beq.n	800217c <HAL_GPIO_Init+0x1d0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a49      	ldr	r2, [pc, #292]	@ (800227c <HAL_GPIO_Init+0x2d0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00d      	beq.n	8002178 <HAL_GPIO_Init+0x1cc>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a48      	ldr	r2, [pc, #288]	@ (8002280 <HAL_GPIO_Init+0x2d4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x1c8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a47      	ldr	r2, [pc, #284]	@ (8002284 <HAL_GPIO_Init+0x2d8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d101      	bne.n	8002170 <HAL_GPIO_Init+0x1c4>
 800216c:	2304      	movs	r3, #4
 800216e:	e008      	b.n	8002182 <HAL_GPIO_Init+0x1d6>
 8002170:	2307      	movs	r3, #7
 8002172:	e006      	b.n	8002182 <HAL_GPIO_Init+0x1d6>
 8002174:	2303      	movs	r3, #3
 8002176:	e004      	b.n	8002182 <HAL_GPIO_Init+0x1d6>
 8002178:	2302      	movs	r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x1d6>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_GPIO_Init+0x1d6>
 8002180:	2300      	movs	r3, #0
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	f002 0203 	and.w	r2, r2, #3
 8002188:	0092      	lsls	r2, r2, #2
 800218a:	4093      	lsls	r3, r2
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002192:	4938      	ldr	r1, [pc, #224]	@ (8002274 <HAL_GPIO_Init+0x2c8>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021a0:	4b39      	ldr	r3, [pc, #228]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021c4:	4a30      	ldr	r2, [pc, #192]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ca:	4b2f      	ldr	r3, [pc, #188]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ee:	4a26      	ldr	r2, [pc, #152]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 80021f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800221a:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002222:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 8002224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002248:	4a0f      	ldr	r2, [pc, #60]	@ (8002288 <HAL_GPIO_Init+0x2dc>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	3301      	adds	r3, #1
 8002254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f aeab 	bne.w	8001fbc <HAL_GPIO_Init+0x10>
  }
}
 8002266:	bf00      	nop
 8002268:	bf00      	nop
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40010000 	.word	0x40010000
 8002278:	48000400 	.word	0x48000400
 800227c:	48000800 	.word	0x48000800
 8002280:	48000c00 	.word	0x48000c00
 8002284:	48001000 	.word	0x48001000
 8002288:	58000800 	.word	0x58000800

0800228c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	887b      	ldrh	r3, [r7, #2]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e001      	b.n	80022ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022d8:	e002      	b.n	80022e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e08d      	b.n	800241a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff f898 	bl	8001448 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	@ 0x24
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800233c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800234c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e006      	b.n	8002374 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689a      	ldr	r2, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002372:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b02      	cmp	r3, #2
 800237a:	d108      	bne.n	800238e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	e007      	b.n	800239e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800239c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691a      	ldr	r2, [r3, #16]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1a      	ldr	r2, [r3, #32]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af02      	add	r7, sp, #8
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607a      	str	r2, [r7, #4]
 800242e:	461a      	mov	r2, r3
 8002430:	460b      	mov	r3, r1
 8002432:	817b      	strh	r3, [r7, #10]
 8002434:	4613      	mov	r3, r2
 8002436:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b20      	cmp	r3, #32
 8002442:	f040 80fd 	bne.w	8002640 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_I2C_Master_Transmit+0x30>
 8002450:	2302      	movs	r3, #2
 8002452:	e0f6      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800245c:	f7ff fbee 	bl	8001c3c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2319      	movs	r3, #25
 8002468:	2201      	movs	r2, #1
 800246a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f001 f8e9 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0e1      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2221      	movs	r2, #33	@ 0x21
 8002482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2210      	movs	r2, #16
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	893a      	ldrh	r2, [r7, #8]
 800249e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2bff      	cmp	r3, #255	@ 0xff
 80024ae:	d906      	bls.n	80024be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	22ff      	movs	r2, #255	@ 0xff
 80024b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80024b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	e007      	b.n	80024ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d024      	beq.n	8002520 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fe:	3b01      	subs	r3, #1
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	b2db      	uxtb	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	b2da      	uxtb	r2, r3
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	4b4e      	ldr	r3, [pc, #312]	@ (800264c <HAL_I2C_Master_Transmit+0x228>)
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f001 fa57 	bl	80039cc <I2C_TransferConfig>
 800251e:	e066      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002524:	b2da      	uxtb	r2, r3
 8002526:	8979      	ldrh	r1, [r7, #10]
 8002528:	4b48      	ldr	r3, [pc, #288]	@ (800264c <HAL_I2C_Master_Transmit+0x228>)
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f001 fa4c 	bl	80039cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002534:	e05b      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	6a39      	ldr	r1, [r7, #32]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f001 f8dc 	bl	80036f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e07b      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d034      	beq.n	80025ee <HAL_I2C_Master_Transmit+0x1ca>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002588:	2b00      	cmp	r3, #0
 800258a:	d130      	bne.n	80025ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6a3b      	ldr	r3, [r7, #32]
 8002592:	2200      	movs	r2, #0
 8002594:	2180      	movs	r1, #128	@ 0x80
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 f855 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e04d      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2bff      	cmp	r3, #255	@ 0xff
 80025ae:	d90e      	bls.n	80025ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	22ff      	movs	r2, #255	@ 0xff
 80025b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f001 fa00 	bl	80039cc <I2C_TransferConfig>
 80025cc:	e00f      	b.n	80025ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	2300      	movs	r3, #0
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f001 f9ef 	bl	80039cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d19e      	bne.n	8002536 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	6a39      	ldr	r1, [r7, #32]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f001 f8c2 	bl	8003786 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e01a      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2220      	movs	r2, #32
 8002612:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b0c      	ldr	r3, [pc, #48]	@ (8002650 <HAL_I2C_Master_Transmit+0x22c>)
 8002620:	400b      	ands	r3, r1
 8002622:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	80002000 	.word	0x80002000
 8002650:	fe00e800 	.word	0xfe00e800

08002654 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	4608      	mov	r0, r1
 800265e:	4611      	mov	r1, r2
 8002660:	461a      	mov	r2, r3
 8002662:	4603      	mov	r3, r0
 8002664:	817b      	strh	r3, [r7, #10]
 8002666:	460b      	mov	r3, r1
 8002668:	813b      	strh	r3, [r7, #8]
 800266a:	4613      	mov	r3, r2
 800266c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b20      	cmp	r3, #32
 8002678:	f040 80fd 	bne.w	8002876 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800267c:	6a3b      	ldr	r3, [r7, #32]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d002      	beq.n	8002688 <HAL_I2C_Mem_Read+0x34>
 8002682:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d105      	bne.n	8002694 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800268e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f1      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_I2C_Mem_Read+0x4e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e0ea      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026aa:	f7ff fac7 	bl	8001c3c <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2319      	movs	r3, #25
 80026b6:	2201      	movs	r2, #1
 80026b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 ffc2 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d5      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2222      	movs	r2, #34	@ 0x22
 80026d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a3a      	ldr	r2, [r7, #32]
 80026e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f4:	88f8      	ldrh	r0, [r7, #6]
 80026f6:	893a      	ldrh	r2, [r7, #8]
 80026f8:	8979      	ldrh	r1, [r7, #10]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	4603      	mov	r3, r0
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fb59 	bl	8002dbc <I2C_RequestMemoryRead>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0ad      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2bff      	cmp	r3, #255	@ 0xff
 8002724:	d90e      	bls.n	8002744 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	22ff      	movs	r2, #255	@ 0xff
 800272a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002730:	b2da      	uxtb	r2, r3
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	4b52      	ldr	r3, [pc, #328]	@ (8002880 <HAL_I2C_Mem_Read+0x22c>)
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f001 f945 	bl	80039cc <I2C_TransferConfig>
 8002742:	e00f      	b.n	8002764 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002752:	b2da      	uxtb	r2, r3
 8002754:	8979      	ldrh	r1, [r7, #10]
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <HAL_I2C_Mem_Read+0x22c>)
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f001 f934 	bl	80039cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800276a:	2200      	movs	r2, #0
 800276c:	2104      	movs	r1, #4
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 ff69 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07c      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d034      	beq.n	8002824 <HAL_I2C_Mem_Read+0x1d0>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d130      	bne.n	8002824 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	2200      	movs	r2, #0
 80027ca:	2180      	movs	r1, #128	@ 0x80
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 ff3a 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e04d      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2bff      	cmp	r3, #255	@ 0xff
 80027e4:	d90e      	bls.n	8002804 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	22ff      	movs	r2, #255	@ 0xff
 80027ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	2300      	movs	r3, #0
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f001 f8e5 	bl	80039cc <I2C_TransferConfig>
 8002802:	e00f      	b.n	8002824 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002812:	b2da      	uxtb	r2, r3
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	2300      	movs	r3, #0
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f001 f8d4 	bl	80039cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d19a      	bne.n	8002764 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 ffa7 	bl	8003786 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e01a      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_I2C_Mem_Read+0x230>)
 8002856:	400b      	ands	r3, r1
 8002858:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002876:	2302      	movs	r3, #2
  }
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	80002400 	.word	0x80002400
 8002884:	fe00e800 	.word	0xfe00e800

08002888 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	@ 0x28
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	460b      	mov	r3, r1
 8002896:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	f040 80d6 	bne.w	8002a56 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028b8:	d101      	bne.n	80028be <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0cc      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_I2C_IsDeviceReady+0x44>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0c5      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2224      	movs	r2, #36	@ 0x24
 80028d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d107      	bne.n	80028fa <HAL_I2C_IsDeviceReady+0x72>
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028f8:	e006      	b.n	8002908 <HAL_I2C_IsDeviceReady+0x80>
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002900:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002904:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800290e:	f7ff f995 	bl	8001c3c <HAL_GetTick>
 8002912:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b20      	cmp	r3, #32
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b10      	cmp	r3, #16
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002940:	e034      	b.n	80029ac <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d01a      	beq.n	8002980 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f977 	bl	8001c3c <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <HAL_I2C_IsDeviceReady+0xd8>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10f      	bne.n	8002980 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2220      	movs	r2, #32
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296c:	f043 0220 	orr.w	r2, r3, #32
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e06b      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b20      	cmp	r3, #32
 800298c:	bf0c      	ite	eq
 800298e:	2301      	moveq	r3, #1
 8002990:	2300      	movne	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	bf0c      	ite	eq
 80029a4:	2301      	moveq	r3, #1
 80029a6:	2300      	movne	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029ac:	7ffb      	ldrb	r3, [r7, #31]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_I2C_IsDeviceReady+0x130>
 80029b2:	7fbb      	ldrb	r3, [r7, #30]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0c4      	beq.n	8002942 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d01a      	beq.n	80029fc <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	2200      	movs	r2, #0
 80029ce:	2120      	movs	r1, #32
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 fe38 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e03b      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2220      	movs	r2, #32
 80029e6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80029f8:	2300      	movs	r3, #0
 80029fa:	e02d      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2120      	movs	r1, #32
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fe1d 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e020      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2210      	movs	r2, #16
 8002a1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2220      	movs	r2, #32
 8002a24:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	f63f af56 	bhi.w	80028e2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2220      	movs	r2, #32
 8002a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f043 0220 	orr.w	r2, r3, #32
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002a56:	2302      	movs	r3, #2
  }
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d005      	beq.n	8002a8c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	68f9      	ldr	r1, [r7, #12]
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	4798      	blx	r3
  }
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00f      	beq.n	8002ad6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ad4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00f      	beq.n	8002b00 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f043 0208 	orr.w	r2, r3, #8
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002afe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00f      	beq.n	8002b2a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b18:	f043 0202 	orr.w	r2, r3, #2
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b28:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 030b 	and.w	r3, r3, #11
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fc29 	bl	8003394 <I2C_ITError>
  }
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	70fb      	strb	r3, [r7, #3]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b82:	bf00      	nop
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <I2C_Slave_ISR_IT+0x24>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0e2      	b.n	8002db4 <I2C_Slave_ISR_IT+0x1ea>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d009      	beq.n	8002c14 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d004      	beq.n	8002c14 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c0a:	6939      	ldr	r1, [r7, #16]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fa09 	bl	8003024 <I2C_ITSlaveCplt>
 8002c12:	e0ca      	b.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d04b      	beq.n	8002cb6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d046      	beq.n	8002cb6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d128      	bne.n	8002c84 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b28      	cmp	r3, #40	@ 0x28
 8002c3c:	d108      	bne.n	8002c50 <I2C_Slave_ISR_IT+0x86>
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c44:	d104      	bne.n	8002c50 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002c46:	6939      	ldr	r1, [r7, #16]
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 fb4f 	bl	80032ec <I2C_ITListenCplt>
 8002c4e:	e031      	b.n	8002cb4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b29      	cmp	r3, #41	@ 0x29
 8002c5a:	d10e      	bne.n	8002c7a <I2C_Slave_ISR_IT+0xb0>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c62:	d00a      	beq.n	8002c7a <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 fca8 	bl	80035c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f97a 	bl	8002f6c <I2C_ITSlaveSeqCplt>
 8002c78:	e01c      	b.n	8002cb4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2210      	movs	r2, #16
 8002c80:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002c82:	e08f      	b.n	8002da4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2210      	movs	r2, #16
 8002c8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c90:	f043 0204 	orr.w	r2, r3, #4
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <I2C_Slave_ISR_IT+0xdc>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ca4:	d17e      	bne.n	8002da4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002caa:	4619      	mov	r1, r3
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fb71 	bl	8003394 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002cb2:	e077      	b.n	8002da4 <I2C_Slave_ISR_IT+0x1da>
 8002cb4:	e076      	b.n	8002da4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d02f      	beq.n	8002d20 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02a      	beq.n	8002d20 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d018      	beq.n	8002d06 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d14b      	bne.n	8002da8 <I2C_Slave_ISR_IT+0x1de>
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d16:	d047      	beq.n	8002da8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f927 	bl	8002f6c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d1e:	e043      	b.n	8002da8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d004      	beq.n	8002d3e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d34:	6939      	ldr	r1, [r7, #16]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f894 	bl	8002e64 <I2C_ITAddrCplt>
 8002d3c:	e035      	b.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d030      	beq.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d02b      	beq.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d018      	beq.n	8002d8e <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002d8c:	e00d      	b.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d94:	d002      	beq.n	8002d9c <I2C_Slave_ISR_IT+0x1d2>
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d106      	bne.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f8e5 	bl	8002f6c <I2C_ITSlaveSeqCplt>
 8002da2:	e002      	b.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002da8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	4608      	mov	r0, r1
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	817b      	strh	r3, [r7, #10]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	813b      	strh	r3, [r7, #8]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	8979      	ldrh	r1, [r7, #10]
 8002ddc:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <I2C_RequestMemoryRead+0xa4>)
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2300      	movs	r3, #0
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fdf2 	bl	80039cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fc83 	bl	80036f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e02c      	b.n	8002e56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d105      	bne.n	8002e0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e02:	893b      	ldrh	r3, [r7, #8]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0c:	e015      	b.n	8002e3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fc69 	bl	80036f8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e012      	b.n	8002e56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2140      	movs	r1, #64	@ 0x40
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbfe 	bl	8003646 <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	80002000 	.word	0x80002000

08002e64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002e7a:	2b28      	cmp	r3, #40	@ 0x28
 8002e7c:	d16a      	bne.n	8002f54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002e9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002eb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d138      	bne.n	8002f34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002ec2:	897b      	ldrh	r3, [r7, #10]
 8002ec4:	09db      	lsrs	r3, r3, #7
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	89bb      	ldrh	r3, [r7, #12]
 8002eca:	4053      	eors	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f003 0306 	and.w	r3, r3, #6
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11c      	bne.n	8002f10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d13b      	bne.n	8002f64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f02:	89ba      	ldrh	r2, [r7, #12]
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff fe32 	bl	8002b72 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f0e:	e029      	b.n	8002f64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f10:	893b      	ldrh	r3, [r7, #8]
 8002f12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fd89 	bl	8003a30 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f26:	89ba      	ldrh	r2, [r7, #12]
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff fe20 	bl	8002b72 <HAL_I2C_AddrCallback>
}
 8002f32:	e017      	b.n	8002f64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fd79 	bl	8003a30 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f46:	89ba      	ldrh	r2, [r7, #12]
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fe10 	bl	8002b72 <HAL_I2C_AddrCallback>
}
 8002f52:	e007      	b.n	8002f64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2208      	movs	r2, #8
 8002f5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e00c      	b.n	8002fba <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d007      	beq.n	8002fba <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fb8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b29      	cmp	r3, #41	@ 0x29
 8002fc4:	d112      	bne.n	8002fec <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2228      	movs	r2, #40	@ 0x28
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2221      	movs	r2, #33	@ 0x21
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fd2a 	bl	8003a30 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff fdb0 	bl	8002b4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002fea:	e017      	b.n	800301c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ff6:	d111      	bne.n	800301c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2228      	movs	r2, #40	@ 0x28
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2222      	movs	r2, #34	@ 0x22
 8003004:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003006:	2102      	movs	r1, #2
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fd11 	bl	8003a30 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fda1 	bl	8002b5e <HAL_I2C_SlaveRxCpltCallback>
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003046:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2220      	movs	r2, #32
 800304e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003050:	7afb      	ldrb	r3, [r7, #11]
 8003052:	2b21      	cmp	r3, #33	@ 0x21
 8003054:	d002      	beq.n	800305c <I2C_ITSlaveCplt+0x38>
 8003056:	7afb      	ldrb	r3, [r7, #11]
 8003058:	2b29      	cmp	r3, #41	@ 0x29
 800305a:	d108      	bne.n	800306e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800305c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 fce5 	bl	8003a30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2221      	movs	r2, #33	@ 0x21
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
 800306c:	e019      	b.n	80030a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800306e:	7afb      	ldrb	r3, [r7, #11]
 8003070:	2b22      	cmp	r3, #34	@ 0x22
 8003072:	d002      	beq.n	800307a <I2C_ITSlaveCplt+0x56>
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	2b2a      	cmp	r3, #42	@ 0x2a
 8003078:	d108      	bne.n	800308c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800307a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fcd6 	bl	8003a30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2222      	movs	r2, #34	@ 0x22
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
 800308a:	e00a      	b.n	80030a2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	2b28      	cmp	r3, #40	@ 0x28
 8003090:	d107      	bne.n	80030a2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003092:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fcca 	bl	8003a30 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030b0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6859      	ldr	r1, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b89      	ldr	r3, [pc, #548]	@ (80032e4 <I2C_ITSlaveCplt+0x2c0>)
 80030be:	400b      	ands	r3, r1
 80030c0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fa7d 	bl	80035c2 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d013      	beq.n	80030fa <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80030e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d01f      	beq.n	800312a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030f8:	e017      	b.n	800312a <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003112:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003118:	2b00      	cmp	r3, #0
 800311a:	d006      	beq.n	800312a <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	b29a      	uxth	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d020      	beq.n	8003176 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00c      	beq.n	8003176 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003184:	f043 0204 	orr.w	r2, r3, #4
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d049      	beq.n	800322a <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800319c:	2b00      	cmp	r3, #0
 800319e:	d044      	beq.n	800322a <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d128      	bne.n	80031fc <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b28      	cmp	r3, #40	@ 0x28
 80031b4:	d108      	bne.n	80031c8 <I2C_ITSlaveCplt+0x1a4>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031bc:	d104      	bne.n	80031c8 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80031be:	6979      	ldr	r1, [r7, #20]
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f893 	bl	80032ec <I2C_ITListenCplt>
 80031c6:	e030      	b.n	800322a <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b29      	cmp	r3, #41	@ 0x29
 80031d2:	d10e      	bne.n	80031f2 <I2C_ITSlaveCplt+0x1ce>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031da:	d00a      	beq.n	80031f2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2210      	movs	r2, #16
 80031e2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f9ec 	bl	80035c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff febe 	bl	8002f6c <I2C_ITSlaveSeqCplt>
 80031f0:	e01b      	b.n	800322a <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2210      	movs	r2, #16
 80031f8:	61da      	str	r2, [r3, #28]
 80031fa:	e016      	b.n	800322a <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2210      	movs	r2, #16
 8003202:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003208:	f043 0204 	orr.w	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <I2C_ITSlaveCplt+0x1fa>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800321c:	d105      	bne.n	800322a <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	4619      	mov	r1, r3
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f8b5 	bl	8003394 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	2b00      	cmp	r3, #0
 800323e:	d010      	beq.n	8003262 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8a4 	bl	8003394 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b28      	cmp	r3, #40	@ 0x28
 8003256:	d141      	bne.n	80032dc <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003258:	6979      	ldr	r1, [r7, #20]
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f846 	bl	80032ec <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003260:	e03c      	b.n	80032dc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800326a:	d014      	beq.n	8003296 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff fe7d 	bl	8002f6c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a1c      	ldr	r2, [pc, #112]	@ (80032e8 <I2C_ITSlaveCplt+0x2c4>)
 8003276:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fc7d 	bl	8002b8e <HAL_I2C_ListenCpltCallback>
}
 8003294:	e022      	b.n	80032dc <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b22      	cmp	r3, #34	@ 0x22
 80032a0:	d10e      	bne.n	80032c0 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fc50 	bl	8002b5e <HAL_I2C_SlaveRxCpltCallback>
}
 80032be:	e00d      	b.n	80032dc <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7ff fc37 	bl	8002b4a <HAL_I2C_SlaveTxCpltCallback>
}
 80032dc:	bf00      	nop
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	fe00e800 	.word	0xfe00e800
 80032e8:	ffff0000 	.word	0xffff0000

080032ec <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a25      	ldr	r2, [pc, #148]	@ (8003390 <I2C_ITListenCplt+0xa4>)
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	f003 0304 	and.w	r3, r3, #4
 800331e:	2b00      	cmp	r3, #0
 8003320:	d022      	beq.n	8003368 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333e:	2b00      	cmp	r3, #0
 8003340:	d012      	beq.n	8003368 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003368:	f248 0103 	movw	r1, #32771	@ 0x8003
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fb5f 	bl	8003a30 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2210      	movs	r2, #16
 8003378:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7ff fc03 	bl	8002b8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	ffff0000 	.word	0xffff0000

08003394 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033a4:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a6d      	ldr	r2, [pc, #436]	@ (8003568 <I2C_ITError+0x1d4>)
 80033b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b28      	cmp	r3, #40	@ 0x28
 80033ca:	d005      	beq.n	80033d8 <I2C_ITError+0x44>
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b29      	cmp	r3, #41	@ 0x29
 80033d0:	d002      	beq.n	80033d8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80033d6:	d10b      	bne.n	80033f0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033d8:	2103      	movs	r1, #3
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fb28 	bl	8003a30 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2228      	movs	r2, #40	@ 0x28
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a60      	ldr	r2, [pc, #384]	@ (800356c <I2C_ITError+0x1d8>)
 80033ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ee:	e030      	b.n	8003452 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033f0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fb1b 	bl	8003a30 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8e1 	bl	80035c2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b60      	cmp	r3, #96	@ 0x60
 800340a:	d01f      	beq.n	800344c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0320 	and.w	r3, r3, #32
 800341e:	2b20      	cmp	r3, #32
 8003420:	d114      	bne.n	800344c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b10      	cmp	r3, #16
 800342e:	d109      	bne.n	8003444 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343c:	f043 0204 	orr.w	r2, r3, #4
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2220      	movs	r2, #32
 800344a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	2b00      	cmp	r3, #0
 800345e:	d039      	beq.n	80034d4 <I2C_ITError+0x140>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2b11      	cmp	r3, #17
 8003464:	d002      	beq.n	800346c <I2C_ITError+0xd8>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b21      	cmp	r3, #33	@ 0x21
 800346a:	d133      	bne.n	80034d4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003476:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800347a:	d107      	bne.n	800348c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800348a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fd7d 	bl	8001f90 <HAL_DMA_GetState>
 8003496:	4603      	mov	r3, r0
 8003498:	2b01      	cmp	r3, #1
 800349a:	d017      	beq.n	80034cc <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a0:	4a33      	ldr	r2, [pc, #204]	@ (8003570 <I2C_ITError+0x1dc>)
 80034a2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fd0e 	bl	8001ed2 <HAL_DMA_Abort_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d04d      	beq.n	8003558 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034c6:	4610      	mov	r0, r2
 80034c8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034ca:	e045      	b.n	8003558 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f851 	bl	8003574 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034d2:	e041      	b.n	8003558 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d039      	beq.n	8003550 <I2C_ITError+0x1bc>
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	2b12      	cmp	r3, #18
 80034e0:	d002      	beq.n	80034e8 <I2C_ITError+0x154>
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	2b22      	cmp	r3, #34	@ 0x22
 80034e6:	d133      	bne.n	8003550 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f6:	d107      	bne.n	8003508 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003506:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fd3f 	bl	8001f90 <HAL_DMA_GetState>
 8003512:	4603      	mov	r3, r0
 8003514:	2b01      	cmp	r3, #1
 8003516:	d017      	beq.n	8003548 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	4a14      	ldr	r2, [pc, #80]	@ (8003570 <I2C_ITError+0x1dc>)
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fcd0 	bl	8001ed2 <HAL_DMA_Abort_IT>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d011      	beq.n	800355c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003542:	4610      	mov	r0, r2
 8003544:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003546:	e009      	b.n	800355c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f813 	bl	8003574 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800354e:	e005      	b.n	800355c <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f80f 	bl	8003574 <I2C_TreatErrorCallback>
  }
}
 8003556:	e002      	b.n	800355e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800355c:	bf00      	nop
}
 800355e:	bf00      	nop
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	ffff0000 	.word	0xffff0000
 800356c:	08002bcb 	.word	0x08002bcb
 8003570:	0800360b 	.word	0x0800360b

08003574 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b60      	cmp	r3, #96	@ 0x60
 8003586:	d10e      	bne.n	80035a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff fb09 	bl	8002bb6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035a4:	e009      	b.n	80035ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff faf4 	bl	8002ba2 <HAL_I2C_ErrorCallback>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d103      	bne.n	80035e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2200      	movs	r2, #0
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d007      	beq.n	80035fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	699a      	ldr	r2, [r3, #24]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	619a      	str	r2, [r3, #24]
  }
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b084      	sub	sp, #16
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003624:	2200      	movs	r2, #0
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003634:	2200      	movs	r2, #0
 8003636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff9b 	bl	8003574 <I2C_TreatErrorCallback>
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	4613      	mov	r3, r2
 8003654:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003656:	e03b      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f000 f8d5 	bl	800380c <I2C_IsErrorOccurred>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e041      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d02d      	beq.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003674:	f7fe fae2 	bl	8001c3c <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d122      	bne.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699a      	ldr	r2, [r3, #24]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d113      	bne.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e00f      	b.n	80036f0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	429a      	cmp	r2, r3
 80036de:	bf0c      	ite	eq
 80036e0:	2301      	moveq	r3, #1
 80036e2:	2300      	movne	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	461a      	mov	r2, r3
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d0b4      	beq.n	8003658 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003704:	e033      	b.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f87e 	bl	800380c <I2C_IsErrorOccurred>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e031      	b.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d025      	beq.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fa8b 	bl	8001c3c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11a      	bne.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b02      	cmp	r3, #2
 8003744:	d013      	beq.n	800376e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	f043 0220 	orr.w	r2, r3, #32
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e007      	b.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b02      	cmp	r3, #2
 800377a:	d1c4      	bne.n	8003706 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003792:	e02f      	b.n	80037f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f837 	bl	800380c <I2C_IsErrorOccurred>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e02d      	b.n	8003804 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fe fa48 	bl	8001c3c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d11a      	bne.n	80037f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d013      	beq.n	80037f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2220      	movs	r2, #32
 80037dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e007      	b.n	8003804 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 0320 	and.w	r3, r3, #32
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d1c8      	bne.n	8003794 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	@ 0x28
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b00      	cmp	r3, #0
 8003836:	d068      	beq.n	800390a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2210      	movs	r2, #16
 800383e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003840:	e049      	b.n	80038d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d045      	beq.n	80038d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fe f9f7 	bl	8001c3c <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <I2C_IsErrorOccurred+0x54>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d13a      	bne.n	80038d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800386a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003872:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800387e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003882:	d121      	bne.n	80038c8 <I2C_IsErrorOccurred+0xbc>
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800388a:	d01d      	beq.n	80038c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	2b20      	cmp	r3, #32
 8003890:	d01a      	beq.n	80038c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038a2:	f7fe f9cb 	bl	8001c3c <HAL_GetTick>
 80038a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a8:	e00e      	b.n	80038c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038aa:	f7fe f9c7 	bl	8001c3c <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b19      	cmp	r3, #25
 80038b6:	d907      	bls.n	80038c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	f043 0320 	orr.w	r3, r3, #32
 80038be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038c6:	e006      	b.n	80038d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d1e9      	bne.n	80038aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d003      	beq.n	80038ec <I2C_IsErrorOccurred+0xe0>
 80038e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0aa      	beq.n	8003842 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2220      	movs	r2, #32
 80038fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00b      	beq.n	8003934 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800392c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00b      	beq.n	8003956 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	f043 0308 	orr.w	r3, r3, #8
 8003944:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800394e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00b      	beq.n	8003978 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003978:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01c      	beq.n	80039ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff fe1e 	bl	80035c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0d      	ldr	r3, [pc, #52]	@ (80039c8 <I2C_IsErrorOccurred+0x1bc>)
 8003992:	400b      	ands	r3, r1
 8003994:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80039ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3728      	adds	r7, #40	@ 0x28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	fe00e800 	.word	0xfe00e800

080039cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	817b      	strh	r3, [r7, #10]
 80039da:	4613      	mov	r3, r2
 80039dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039e4:	7a7b      	ldrb	r3, [r7, #9]
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	0d5b      	lsrs	r3, r3, #21
 8003a06:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a0a:	4b08      	ldr	r3, [pc, #32]	@ (8003a2c <I2C_TransferConfig+0x60>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	ea02 0103 	and.w	r1, r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	03ff63ff 	.word	0x03ff63ff

08003a30 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a40:	887b      	ldrh	r3, [r7, #2]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00f      	beq.n	8003a6a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003a50:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a5e:	2b28      	cmp	r3, #40	@ 0x28
 8003a60:	d003      	beq.n	8003a6a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a68:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00f      	beq.n	8003a94 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003a7a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003a88:	2b28      	cmp	r3, #40	@ 0x28
 8003a8a:	d003      	beq.n	8003a94 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003a92:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da03      	bge.n	8003aa4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003aa4:	887b      	ldrh	r3, [r7, #2]
 8003aa6:	2b10      	cmp	r3, #16
 8003aa8:	d103      	bne.n	8003ab2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003ab2:	887b      	ldrh	r3, [r7, #2]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d103      	bne.n	8003ac0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f043 0320 	orr.w	r3, r3, #32
 8003abe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ac0:	887b      	ldrh	r3, [r7, #2]
 8003ac2:	2b40      	cmp	r3, #64	@ 0x40
 8003ac4:	d103      	bne.n	8003ace <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003acc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d138      	bne.n	8003b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e032      	b.n	8003b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2224      	movs	r2, #36	@ 0x24
 8003b1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6819      	ldr	r1, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 0201 	orr.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	e000      	b.n	8003b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b74:	2302      	movs	r3, #2
  }
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d139      	bne.n	8003c0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e033      	b.n	8003c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2224      	movs	r2, #36	@ 0x24
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003bd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	021b      	lsls	r3, r3, #8
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0201 	orr.w	r2, r2, #1
 8003bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e000      	b.n	8003c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
	...

08003c1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c20:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a04      	ldr	r2, [pc, #16]	@ (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	58000400 	.word	0x58000400

08003c3c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c40:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	58000400 	.word	0x58000400

08003c58 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003c5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c6a:	d101      	bne.n	8003c70 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e000      	b.n	8003c72 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c8e:	6013      	str	r3, [r2, #0]
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cac:	6013      	str	r3, [r2, #0]
}
 8003cae:	bf00      	nop
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cca:	d101      	bne.n	8003cd0 <LL_RCC_HSE_IsReady+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_RCC_HSE_IsReady+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d0c:	6013      	str	r3, [r2, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d2a:	d101      	bne.n	8003d30 <LL_RCC_HSI_IsReady+0x18>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <LL_RCC_HSI_IsReady+0x1a>
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003d66:	b480      	push	{r7}
 8003d68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003daa:	b480      	push	{r7}
 8003dac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d101      	bne.n	8003dc2 <LL_RCC_HSI48_IsReady+0x18>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <LL_RCC_HSI48_IsReady+0x1a>
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003dd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dde:	f043 0301 	orr.w	r3, r3, #1
 8003de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003de6:	bf00      	nop
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dfc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e00:	f023 0301 	bic.w	r3, r3, #1
 8003e04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003e12:	b480      	push	{r7}
 8003e14:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e22:	f043 0304 	orr.w	r3, r3, #4
 8003e26:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e2a:	bf00      	nop
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e44:	f023 0304 	bic.w	r3, r3, #4
 8003e48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d101      	bne.n	8003e6e <LL_RCC_LSE_IsReady+0x18>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <LL_RCC_LSE_IsReady+0x1a>
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e8a:	f043 0301 	orr.w	r3, r3, #1
 8003e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ea8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d101      	bne.n	8003ed6 <LL_RCC_LSI1_IsReady+0x18>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_RCC_LSI1_IsReady+0x1a>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003ee6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003efa:	bf00      	nop
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f14:	f023 0304 	bic.w	r3, r3, #4
 8003f18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003f26:	b480      	push	{r7}
 8003f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d101      	bne.n	8003f3e <LL_RCC_LSI2_IsReady+0x18>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <LL_RCC_LSI2_IsReady+0x1a>
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f5a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	021b      	lsls	r3, r3, #8
 8003f62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003f96:	b480      	push	{r7}
 8003f98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	6013      	str	r3, [r2, #0]
}
 8003faa:	bf00      	nop
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d101      	bne.n	8003fca <LL_RCC_MSI_IsReady+0x16>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <LL_RCC_MSI_IsReady+0x18>
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003fde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800400e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2bb0      	cmp	r3, #176	@ 0xb0
 8004014:	d901      	bls.n	800401a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004016:	23b0      	movs	r3, #176	@ 0xb0
 8004018:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800401a:	687b      	ldr	r3, [r7, #4]
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8004052:	b480      	push	{r7}
 8004054:	b083      	sub	sp, #12
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800405a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f023 0203 	bic.w	r2, r3, #3
 8004064:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	608b      	str	r3, [r1, #8]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800407a:	b480      	push	{r7}
 800407c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800407e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	f003 030c 	and.w	r3, r3, #12
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800409a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80040c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040ca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b083      	sub	sp, #12
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80040ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800411c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004126:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4313      	orrs	r3, r2
 800412e:	608b      	str	r3, [r1, #8]
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800414e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004172:	4618      	mov	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004180:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004184:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80041be:	4618      	mov	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80041ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041f8:	6013      	str	r3, [r2, #0]
}
 80041fa:	bf00      	nop
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004212:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004216:	d101      	bne.n	800421c <LL_RCC_PLL_IsReady+0x18>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <LL_RCC_PLL_IsReady+0x1a>
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800422c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004250:	4618      	mov	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800425a:	b480      	push	{r7}
 800425c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004268:	4618      	mov	r0, r3
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004272:	b480      	push	{r7}
 8004274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	f003 0303 	and.w	r3, r3, #3
}
 8004280:	4618      	mov	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800428a:	b480      	push	{r7}
 800428c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800428e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429c:	d101      	bne.n	80042a2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80042ae:	b480      	push	{r7}
 80042b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80042b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80042ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042c2:	d101      	bne.n	80042c8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80042e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042e8:	d101      	bne.n	80042ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e000      	b.n	80042f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800430c:	d101      	bne.n	8004312 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800432c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004330:	d101      	bne.n	8004336 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004344:	b590      	push	{r4, r7, lr}
 8004346:	b08d      	sub	sp, #52	@ 0x34
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e363      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	f000 808d 	beq.w	800447e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004364:	f7ff fe89 	bl	800407a <LL_RCC_GetSysClkSource>
 8004368:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800436a:	f7ff ff82 	bl	8004272 <LL_RCC_PLL_GetMainSource>
 800436e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x3e>
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d147      	bne.n	800440c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800437c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437e:	2b01      	cmp	r3, #1
 8004380:	d144      	bne.n	800440c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e347      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004392:	f7ff fe34 	bl	8003ffe <LL_RCC_MSI_GetRange>
 8004396:	4603      	mov	r3, r0
 8004398:	429c      	cmp	r4, r3
 800439a:	d914      	bls.n	80043c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fd31 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e336      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff fe0e 	bl	8003fd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fe32 	bl	8004028 <LL_RCC_MSI_SetCalibTrimming>
 80043c4:	e013      	b.n	80043ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe03 	bl	8003fd6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7ff fe27 	bl	8004028 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fd12 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e317      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80043ee:	f000 fccb 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4aa4      	ldr	r2, [pc, #656]	@ (8004688 <HAL_RCC_OscConfig+0x344>)
 80043f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043f8:	4ba4      	ldr	r3, [pc, #656]	@ (800468c <HAL_RCC_OscConfig+0x348>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fd fbcf 	bl	8001ba0 <HAL_InitTick>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d039      	beq.n	800447c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e308      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d01e      	beq.n	8004452 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004414:	f7ff fdb0 	bl	8003f78 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004418:	f7fd fc10 	bl	8001c3c <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004420:	f7fd fc0c 	bl	8001c3c <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b02      	cmp	r3, #2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e2f5      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004432:	f7ff fdbf 	bl	8003fb4 <LL_RCC_MSI_IsReady>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f1      	beq.n	8004420 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004440:	4618      	mov	r0, r3
 8004442:	f7ff fdc8 	bl	8003fd6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	4618      	mov	r0, r3
 800444c:	f7ff fdec 	bl	8004028 <LL_RCC_MSI_SetCalibTrimming>
 8004450:	e015      	b.n	800447e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004452:	f7ff fda0 	bl	8003f96 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004456:	f7fd fbf1 	bl	8001c3c <HAL_GetTick>
 800445a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445e:	f7fd fbed 	bl	8001c3c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e2d6      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004470:	f7ff fda0 	bl	8003fb4 <LL_RCC_MSI_IsReady>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f1      	bne.n	800445e <HAL_RCC_OscConfig+0x11a>
 800447a:	e000      	b.n	800447e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800447c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d047      	beq.n	800451a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800448a:	f7ff fdf6 	bl	800407a <LL_RCC_GetSysClkSource>
 800448e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004490:	f7ff feef 	bl	8004272 <LL_RCC_PLL_GetMainSource>
 8004494:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	2b08      	cmp	r3, #8
 800449a:	d005      	beq.n	80044a8 <HAL_RCC_OscConfig+0x164>
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d108      	bne.n	80044b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d105      	bne.n	80044b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d134      	bne.n	800451a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e2b4      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044bc:	d102      	bne.n	80044c4 <HAL_RCC_OscConfig+0x180>
 80044be:	f7ff fbdd 	bl	8003c7c <LL_RCC_HSE_Enable>
 80044c2:	e001      	b.n	80044c8 <HAL_RCC_OscConfig+0x184>
 80044c4:	f7ff fbe9 	bl	8003c9a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fbb4 	bl	8001c3c <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd fbb0 	bl	8001c3c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e299      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80044ea:	f7ff fbe5 	bl	8003cb8 <LL_RCC_HSE_IsReady>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0f1      	beq.n	80044d8 <HAL_RCC_OscConfig+0x194>
 80044f4:	e011      	b.n	800451a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f6:	f7fd fba1 	bl	8001c3c <HAL_GetTick>
 80044fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fe:	f7fd fb9d 	bl	8001c3c <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b64      	cmp	r3, #100	@ 0x64
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e286      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004510:	f7ff fbd2 	bl	8003cb8 <LL_RCC_HSE_IsReady>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f1      	bne.n	80044fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004526:	f7ff fda8 	bl	800407a <LL_RCC_GetSysClkSource>
 800452a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452c:	f7ff fea1 	bl	8004272 <LL_RCC_PLL_GetMainSource>
 8004530:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b04      	cmp	r3, #4
 8004536:	d005      	beq.n	8004544 <HAL_RCC_OscConfig+0x200>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d10e      	bne.n	800455c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b02      	cmp	r3, #2
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e266      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fbf1 	bl	8003d3c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800455a:	e031      	b.n	80045c0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	f7ff fbba 	bl	8003cdc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fb68 	bl	8001c3c <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fd fb64 	bl	8001c3c <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e24d      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004582:	f7ff fbc9 	bl	8003d18 <LL_RCC_HSI_IsReady>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0f1      	beq.n	8004570 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fbd3 	bl	8003d3c <LL_RCC_HSI_SetCalibTrimming>
 8004596:	e013      	b.n	80045c0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004598:	f7ff fbaf 	bl	8003cfa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fb4e 	bl	8001c3c <HAL_GetTick>
 80045a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fd fb4a 	bl	8001c3c <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e233      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80045b6:	f7ff fbaf 	bl	8003d18 <LL_RCC_HSI_IsReady>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f1      	bne.n	80045a4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0308 	and.w	r3, r3, #8
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f000 80a3 	beq.w	8004720 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d076      	beq.n	80046d0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0310 	and.w	r3, r3, #16
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d046      	beq.n	800467c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80045ee:	f7ff fc66 	bl	8003ebe <LL_RCC_LSI1_IsReady>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80045f8:	f7ff fc3f 	bl	8003e7a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045fc:	f7fd fb1e 	bl	8001c3c <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004604:	f7fd fb1a 	bl	8001c3c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e203      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004616:	f7ff fc52 	bl	8003ebe <LL_RCC_LSI1_IsReady>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f1      	beq.n	8004604 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004620:	f7ff fc5f 	bl	8003ee2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004624:	f7fd fb0a 	bl	8001c3c <HAL_GetTick>
 8004628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800462c:	f7fd fb06 	bl	8001c3c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b03      	cmp	r3, #3
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e1ef      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800463e:	f7ff fc72 	bl	8003f26 <LL_RCC_LSI2_IsReady>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f1      	beq.n	800462c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fc7c 	bl	8003f4a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004652:	f7ff fc23 	bl	8003e9c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004656:	f7fd faf1 	bl	8001c3c <HAL_GetTick>
 800465a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800465e:	f7fd faed 	bl	8001c3c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e1d6      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004670:	f7ff fc25 	bl	8003ebe <LL_RCC_LSI1_IsReady>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f1      	bne.n	800465e <HAL_RCC_OscConfig+0x31a>
 800467a:	e051      	b.n	8004720 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800467c:	f7ff fbfd 	bl	8003e7a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd fadc 	bl	8001c3c <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004686:	e00c      	b.n	80046a2 <HAL_RCC_OscConfig+0x35e>
 8004688:	20000008 	.word	0x20000008
 800468c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004690:	f7fd fad4 	bl	8001c3c <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1bd      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80046a2:	f7ff fc0c 	bl	8003ebe <LL_RCC_LSI1_IsReady>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f1      	beq.n	8004690 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80046ac:	f7ff fc2a 	bl	8003f04 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046b2:	f7fd fac3 	bl	8001c3c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e1ac      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80046c4:	f7ff fc2f 	bl	8003f26 <LL_RCC_LSI2_IsReady>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f1      	bne.n	80046b2 <HAL_RCC_OscConfig+0x36e>
 80046ce:	e027      	b.n	8004720 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80046d0:	f7ff fc18 	bl	8003f04 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd fab2 	bl	8001c3c <HAL_GetTick>
 80046d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80046dc:	f7fd faae 	bl	8001c3c <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e197      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80046ee:	f7ff fc1a 	bl	8003f26 <LL_RCC_LSI2_IsReady>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80046f8:	f7ff fbd0 	bl	8003e9c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd fa9e 	bl	8001c3c <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004704:	f7fd fa9a 	bl	8001c3c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e183      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004716:	f7ff fbd2 	bl	8003ebe <LL_RCC_LSI1_IsReady>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1f1      	bne.n	8004704 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d05b      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800472c:	4ba7      	ldr	r3, [pc, #668]	@ (80049cc <HAL_RCC_OscConfig+0x688>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d114      	bne.n	8004762 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004738:	f7ff fa70 	bl	8003c1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473c:	f7fd fa7e 	bl	8001c3c <HAL_GetTick>
 8004740:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004744:	f7fd fa7a 	bl	8001c3c <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e163      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004756:	4b9d      	ldr	r3, [pc, #628]	@ (80049cc <HAL_RCC_OscConfig+0x688>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d102      	bne.n	8004770 <HAL_RCC_OscConfig+0x42c>
 800476a:	f7ff fb30 	bl	8003dce <LL_RCC_LSE_Enable>
 800476e:	e00c      	b.n	800478a <HAL_RCC_OscConfig+0x446>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b05      	cmp	r3, #5
 8004776:	d104      	bne.n	8004782 <HAL_RCC_OscConfig+0x43e>
 8004778:	f7ff fb4b 	bl	8003e12 <LL_RCC_LSE_EnableBypass>
 800477c:	f7ff fb27 	bl	8003dce <LL_RCC_LSE_Enable>
 8004780:	e003      	b.n	800478a <HAL_RCC_OscConfig+0x446>
 8004782:	f7ff fb35 	bl	8003df0 <LL_RCC_LSE_Disable>
 8004786:	f7ff fb55 	bl	8003e34 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d014      	beq.n	80047bc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004792:	f7fd fa53 	bl	8001c3c <HAL_GetTick>
 8004796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004798:	e00a      	b.n	80047b0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479a:	f7fd fa4f 	bl	8001c3c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e136      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80047b0:	f7ff fb51 	bl	8003e56 <LL_RCC_LSE_IsReady>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0ef      	beq.n	800479a <HAL_RCC_OscConfig+0x456>
 80047ba:	e013      	b.n	80047e4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fd fa3e 	bl	8001c3c <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fd fa3a 	bl	8001c3c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e121      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80047da:	f7ff fb3c 	bl	8003e56 <LL_RCC_LSE_IsReady>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ef      	bne.n	80047c4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02c      	beq.n	800484a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d014      	beq.n	8004822 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f8:	f7ff fab5 	bl	8003d66 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fc:	f7fd fa1e 	bl	8001c3c <HAL_GetTick>
 8004800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004804:	f7fd fa1a 	bl	8001c3c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e103      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004816:	f7ff fac8 	bl	8003daa <LL_RCC_HSI48_IsReady>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f1      	beq.n	8004804 <HAL_RCC_OscConfig+0x4c0>
 8004820:	e013      	b.n	800484a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004822:	f7ff fab1 	bl	8003d88 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004826:	f7fd fa09 	bl	8001c3c <HAL_GetTick>
 800482a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800482e:	f7fd fa05 	bl	8001c3c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0ee      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004840:	f7ff fab3 	bl	8003daa <LL_RCC_HSI48_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1f1      	bne.n	800482e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 80e4 	beq.w	8004a1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004854:	f7ff fc11 	bl	800407a <LL_RCC_GetSysClkSource>
 8004858:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	2b02      	cmp	r3, #2
 8004868:	f040 80b4 	bne.w	80049d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f003 0203 	and.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004876:	429a      	cmp	r2, r3
 8004878:	d123      	bne.n	80048c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d11c      	bne.n	80048c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004894:	429a      	cmp	r2, r3
 8004896:	d114      	bne.n	80048c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d10d      	bne.n	80048c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d05d      	beq.n	800497e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d058      	beq.n	800497a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0a1      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048da:	f7ff fc84 	bl	80041e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048de:	f7fd f9ad 	bl	8001c3c <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fd f9a9 	bl	8001c3c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e092      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ef      	bne.n	80048e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	4b30      	ldr	r3, [pc, #192]	@ (80049d0 <HAL_RCC_OscConfig+0x68c>)
 800490e:	4013      	ands	r3, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800491e:	0212      	lsls	r2, r2, #8
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004926:	4311      	orrs	r1, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004932:	430a      	orrs	r2, r1
 8004934:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004938:	4313      	orrs	r3, r2
 800493a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800493c:	f7ff fc44 	bl	80041c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800494a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800494e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004950:	f7fd f974 	bl	8001c3c <HAL_GetTick>
 8004954:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd f970 	bl	8001c3c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e059      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004978:	e050      	b.n	8004a1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e04f      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d147      	bne.n	8004a1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800498c:	f7ff fc1c 	bl	80041c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049a0:	f7fd f94c 	bl	8001c3c <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fd f948 	bl	8001c3c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e031      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <HAL_RCC_OscConfig+0x664>
 80049c8:	e028      	b.n	8004a1c <HAL_RCC_OscConfig+0x6d8>
 80049ca:	bf00      	nop
 80049cc:	58000400 	.word	0x58000400
 80049d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d01e      	beq.n	8004a18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	f7ff fc04 	bl	80041e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fd f92d 	bl	8001c3c <HAL_GetTick>
 80049e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e6:	f7fd f929 	bl	8001c3c <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e012      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1ef      	bne.n	80049e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a0a:	68da      	ldr	r2, [r3, #12]
 8004a0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a10:	4b05      	ldr	r3, [pc, #20]	@ (8004a28 <HAL_RCC_OscConfig+0x6e4>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	60cb      	str	r3, [r1, #12]
 8004a16:	e001      	b.n	8004a1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3734      	adds	r7, #52	@ 0x34
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd90      	pop	{r4, r7, pc}
 8004a26:	bf00      	nop
 8004a28:	eefefffc 	.word	0xeefefffc

08004a2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e12d      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a40:	4b98      	ldr	r3, [pc, #608]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d91b      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b95      	ldr	r3, [pc, #596]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 0207 	bic.w	r2, r3, #7
 8004a56:	4993      	ldr	r1, [pc, #588]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5e:	f7fd f8ed 	bl	8001c3c <HAL_GetTick>
 8004a62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004a66:	f7fd f8e9 	bl	8001c3c <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e111      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a78:	4b8a      	ldr	r3, [pc, #552]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d1ef      	bne.n	8004a66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff fafb 	bl	8004092 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a9c:	f7fd f8ce 	bl	8001c3c <HAL_GetTick>
 8004aa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004aa4:	f7fd f8ca 	bl	8001c3c <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e0f2      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004ab6:	f7ff fbe8 	bl	800428a <LL_RCC_IsActiveFlag_HPRE>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f1      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d016      	beq.n	8004afa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff faf2 	bl	80040ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ad6:	f7fd f8b1 	bl	8001c3c <HAL_GetTick>
 8004ada:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ade:	f7fd f8ad 	bl	8001c3c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e0d5      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004af0:	f7ff fbdd 	bl	80042ae <LL_RCC_IsActiveFlag_C2HPRE>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f1      	beq.n	8004ade <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d016      	beq.n	8004b34 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff faeb 	bl	80040e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b10:	f7fd f894 	bl	8001c3c <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b18:	f7fd f890 	bl	8001c3c <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0b8      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b2a:	f7ff fbd3 	bl	80042d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d0f1      	beq.n	8004b18 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fae5 	bl	8004114 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b4a:	f7fd f877 	bl	8001c3c <HAL_GetTick>
 8004b4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b52:	f7fd f873 	bl	8001c3c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e09b      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004b64:	f7ff fbc9 	bl	80042fa <LL_RCC_IsActiveFlag_PPRE1>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f1      	beq.n	8004b52 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d017      	beq.n	8004baa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fadb 	bl	800413c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b86:	f7fd f859 	bl	8001c3c <HAL_GetTick>
 8004b8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b8e:	f7fd f855 	bl	8001c3c <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e07d      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ba0:	f7ff fbbd 	bl	800431e <LL_RCC_IsActiveFlag_PPRE2>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f1      	beq.n	8004b8e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d043      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004bbe:	f7ff f87b 	bl	8003cb8 <LL_RCC_HSE_IsReady>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d11e      	bne.n	8004c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e067      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004bd4:	f7ff fb16 	bl	8004204 <LL_RCC_PLL_IsReady>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d113      	bne.n	8004c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e05c      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004bea:	f7ff f9e3 	bl	8003fb4 <LL_RCC_MSI_IsReady>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d108      	bne.n	8004c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e051      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004bf8:	f7ff f88e 	bl	8003d18 <LL_RCC_HSI_IsReady>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e04a      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7ff fa21 	bl	8004052 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fd f814 	bl	8001c3c <HAL_GetTick>
 8004c14:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c18:	f7fd f810 	bl	8001c3c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e036      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2e:	f7ff fa24 	bl	800407a <LL_RCC_GetSysClkSource>
 8004c32:	4602      	mov	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d1ec      	bne.n	8004c18 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d21b      	bcs.n	8004c84 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4c:	4b15      	ldr	r3, [pc, #84]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f023 0207 	bic.w	r2, r3, #7
 8004c54:	4913      	ldr	r1, [pc, #76]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fc ffee 	bl	8001c3c <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004c64:	f7fc ffea 	bl	8001c3c <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e012      	b.n	8004c9c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca4 <HAL_RCC_ClockConfig+0x278>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d1ef      	bne.n	8004c64 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c84:	f000 f880 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a07      	ldr	r2, [pc, #28]	@ (8004ca8 <HAL_RCC_ClockConfig+0x27c>)
 8004c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c8e:	f7fc ffe1 	bl	8001c54 <HAL_GetTickPrio>
 8004c92:	4603      	mov	r3, r0
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fc ff83 	bl	8001ba0 <HAL_InitTick>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	58004000 	.word	0x58004000
 8004ca8:	20000008 	.word	0x20000008

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	b590      	push	{r4, r7, lr}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cb2:	f7ff f9e2 	bl	800407a <LL_RCC_GetSysClkSource>
 8004cb6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004cbe:	f7ff f99e 	bl	8003ffe <LL_RCC_MSI_GetRange>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	091b      	lsrs	r3, r3, #4
 8004cc6:	f003 030f 	and.w	r3, r3, #15
 8004cca:	4a2b      	ldr	r2, [pc, #172]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	e04b      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d102      	bne.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cda:	4b28      	ldr	r3, [pc, #160]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e045      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	d10a      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004ce6:	f7fe ffb7 	bl	8003c58 <LL_RCC_HSE_IsEnabledDiv2>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d102      	bne.n	8004cf6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004cf0:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e03a      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004cf6:	4b23      	ldr	r3, [pc, #140]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e037      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004cfc:	f7ff fab9 	bl	8004272 <LL_RCC_PLL_GetMainSource>
 8004d00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d003      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x64>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x6a>
 8004d0e:	e00d      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	@ (8004d7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d12:	60bb      	str	r3, [r7, #8]
        break;
 8004d14:	e015      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d16:	f7fe ff9f 	bl	8003c58 <LL_RCC_HSE_IsEnabledDiv2>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004d20:	4b17      	ldr	r3, [pc, #92]	@ (8004d80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d22:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004d24:	e00d      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004d26:	4b17      	ldr	r3, [pc, #92]	@ (8004d84 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004d28:	60bb      	str	r3, [r7, #8]
        break;
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d2c:	f7ff f967 	bl	8003ffe <LL_RCC_MSI_GetRange>
 8004d30:	4603      	mov	r3, r0
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	4a0f      	ldr	r2, [pc, #60]	@ (8004d78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d3e:	60bb      	str	r3, [r7, #8]
        break;
 8004d40:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004d42:	f7ff fa71 	bl	8004228 <LL_RCC_PLL_GetN>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	fb03 f402 	mul.w	r4, r3, r2
 8004d4e:	f7ff fa84 	bl	800425a <LL_RCC_PLL_GetDivider>
 8004d52:	4603      	mov	r3, r0
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	3301      	adds	r3, #1
 8004d58:	fbb4 f4f3 	udiv	r4, r4, r3
 8004d5c:	f7ff fa71 	bl	8004242 <LL_RCC_PLL_GetR>
 8004d60:	4603      	mov	r3, r0
 8004d62:	0f5b      	lsrs	r3, r3, #29
 8004d64:	3301      	adds	r3, #1
 8004d66:	fbb4 f3f3 	udiv	r3, r4, r3
 8004d6a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd90      	pop	{r4, r7, pc}
 8004d76:	bf00      	nop
 8004d78:	0800c320 	.word	0x0800c320
 8004d7c:	00f42400 	.word	0x00f42400
 8004d80:	003d0900 	.word	0x003d0900
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d88:	b598      	push	{r3, r4, r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d8c:	f7ff ff8e 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004d90:	4604      	mov	r4, r0
 8004d92:	f7ff f9e7 	bl	8004164 <LL_RCC_GetAHBPrescaler>
 8004d96:	4603      	mov	r3, r0
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	4a03      	ldr	r2, [pc, #12]	@ (8004dac <HAL_RCC_GetHCLKFreq+0x24>)
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd98      	pop	{r3, r4, r7, pc}
 8004dac:	0800c2c0 	.word	0x0800c2c0

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b598      	push	{r3, r4, r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004db4:	f7ff ffe8 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004db8:	4604      	mov	r4, r0
 8004dba:	f7ff f9ed 	bl	8004198 <LL_RCC_GetAPB1Prescaler>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	0a1b      	lsrs	r3, r3, #8
 8004dc2:	f003 0307 	and.w	r3, r3, #7
 8004dc6:	4a04      	ldr	r2, [pc, #16]	@ (8004dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dcc:	f003 031f 	and.w	r3, r3, #31
 8004dd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	bd98      	pop	{r3, r4, r7, pc}
 8004dd8:	0800c300 	.word	0x0800c300

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b598      	push	{r3, r4, r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004de0:	f7ff ffd2 	bl	8004d88 <HAL_RCC_GetHCLKFreq>
 8004de4:	4604      	mov	r4, r0
 8004de6:	f7ff f9e3 	bl	80041b0 <LL_RCC_GetAPB2Prescaler>
 8004dea:	4603      	mov	r3, r0
 8004dec:	0adb      	lsrs	r3, r3, #11
 8004dee:	f003 0307 	and.w	r3, r3, #7
 8004df2:	4a04      	ldr	r2, [pc, #16]	@ (8004e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd98      	pop	{r3, r4, r7, pc}
 8004e04:	0800c300 	.word	0x0800c300

08004e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e08:	b590      	push	{r4, r7, lr}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2bb0      	cmp	r3, #176	@ 0xb0
 8004e14:	d903      	bls.n	8004e1e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e16:	4b15      	ldr	r3, [pc, #84]	@ (8004e6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e007      	b.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	4a11      	ldr	r2, [pc, #68]	@ (8004e6c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004e2e:	f7ff f9a5 	bl	800417c <LL_RCC_GetAHB4Prescaler>
 8004e32:	4603      	mov	r3, r0
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	4a0d      	ldr	r2, [pc, #52]	@ (8004e70 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e74 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e50:	0c9c      	lsrs	r4, r3, #18
 8004e52:	f7fe fef3 	bl	8003c3c <HAL_PWREx_GetVoltageRange>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 f80c 	bl	8004e78 <RCC_SetFlashLatency>
 8004e60:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3714      	adds	r7, #20
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	0800c320 	.word	0x0800c320
 8004e70:	0800c2c0 	.word	0x0800c2c0
 8004e74:	431bde83 	.word	0x431bde83

08004e78 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b093      	sub	sp, #76	@ 0x4c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004e82:	4b37      	ldr	r3, [pc, #220]	@ (8004f60 <RCC_SetFlashLatency+0xe8>)
 8004e84:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004e88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004e8e:	4a35      	ldr	r2, [pc, #212]	@ (8004f64 <RCC_SetFlashLatency+0xec>)
 8004e90:	f107 031c 	add.w	r3, r7, #28
 8004e94:	ca07      	ldmia	r2, {r0, r1, r2}
 8004e96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004e9a:	4b33      	ldr	r3, [pc, #204]	@ (8004f68 <RCC_SetFlashLatency+0xf0>)
 8004e9c:	f107 040c 	add.w	r4, r7, #12
 8004ea0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ea2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eb0:	d11a      	bne.n	8004ee8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eb6:	e013      	b.n	8004ee0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004eb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	3348      	adds	r3, #72	@ 0x48
 8004ebe:	443b      	add	r3, r7
 8004ec0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d807      	bhi.n	8004eda <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	3348      	adds	r3, #72	@ 0x48
 8004ed0:	443b      	add	r3, r7
 8004ed2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004ed6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004ed8:	e020      	b.n	8004f1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004edc:	3301      	adds	r3, #1
 8004ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ee2:	2b03      	cmp	r3, #3
 8004ee4:	d9e8      	bls.n	8004eb8 <RCC_SetFlashLatency+0x40>
 8004ee6:	e019      	b.n	8004f1c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eec:	e013      	b.n	8004f16 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3348      	adds	r3, #72	@ 0x48
 8004ef4:	443b      	add	r3, r7
 8004ef6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d807      	bhi.n	8004f10 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	3348      	adds	r3, #72	@ 0x48
 8004f06:	443b      	add	r3, r7
 8004f08:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f0c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f0e:	e005      	b.n	8004f1c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f12:	3301      	adds	r3, #1
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d9e8      	bls.n	8004eee <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004f1c:	4b13      	ldr	r3, [pc, #76]	@ (8004f6c <RCC_SetFlashLatency+0xf4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 0207 	bic.w	r2, r3, #7
 8004f24:	4911      	ldr	r1, [pc, #68]	@ (8004f6c <RCC_SetFlashLatency+0xf4>)
 8004f26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f2c:	f7fc fe86 	bl	8001c3c <HAL_GetTick>
 8004f30:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f32:	e008      	b.n	8004f46 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f34:	f7fc fe82 	bl	8001c3c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e007      	b.n	8004f56 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f46:	4b09      	ldr	r3, [pc, #36]	@ (8004f6c <RCC_SetFlashLatency+0xf4>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d1ef      	bne.n	8004f34 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	374c      	adds	r7, #76	@ 0x4c
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd90      	pop	{r4, r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	0800b440 	.word	0x0800b440
 8004f64:	0800b450 	.word	0x0800b450
 8004f68:	0800b45c 	.word	0x0800b45c
 8004f6c:	58004000 	.word	0x58004000

08004f70 <LL_RCC_LSE_IsEnabled>:
{
 8004f70:	b480      	push	{r7}
 8004f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <LL_RCC_LSE_IsEnabled+0x18>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <LL_RCC_LSE_IsEnabled+0x1a>
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <LL_RCC_LSE_IsReady>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d101      	bne.n	8004fac <LL_RCC_LSE_IsReady+0x18>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <LL_RCC_LSE_IsReady+0x1a>
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_SetRFWKPClockSource>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004fcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <LL_RCC_SetSMPSClockSource>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <LL_RCC_SetSMPSPrescaler>:
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800501e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4313      	orrs	r3, r2
 8005026:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005028:	bf00      	nop
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <LL_RCC_SetUSARTClockSource>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005044:	f023 0203 	bic.w	r2, r3, #3
 8005048:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_RCC_SetLPUARTClockSource>:
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800506c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005070:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005074:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_RCC_SetI2CClockSource>:
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005098:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80050a4:	43db      	mvns	r3, r3
 80050a6:	401a      	ands	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80050b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <LL_RCC_SetLPTIMClockSource>:
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80050ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	041b      	lsls	r3, r3, #16
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <LL_RCC_SetSAIClockSource>:
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <LL_RCC_SetRNGClockSource>:
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800512e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800513a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <LL_RCC_SetCLK48ClockSource>:
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800515a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005166:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <LL_RCC_SetUSBClockSource>:
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7ff ffe3 	bl	8005152 <LL_RCC_SetCLK48ClockSource>
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <LL_RCC_SetADCClockSource>:
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <LL_RCC_SetRTCClockSource>:
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80051d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_RCC_GetRTCClockSource>:
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_RCC_ForceBackupDomainReset>:
{
 8005206:	b480      	push	{r7}
 8005208:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800520a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005234:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800523c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <LL_RCC_PLLSAI1_Enable>:
{
 800524a:	b480      	push	{r7}
 800524c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800524e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005258:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800525c:	6013      	str	r3, [r2, #0]
}
 800525e:	bf00      	nop
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <LL_RCC_PLLSAI1_Disable>:
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800526c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005276:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800527a:	6013      	str	r3, [r2, #0]
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <LL_RCC_PLLSAI1_IsReady>:
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005294:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005298:	d101      	bne.n	800529e <LL_RCC_PLLSAI1_IsReady+0x18>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b088      	sub	sp, #32
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80052b2:	2300      	movs	r3, #0
 80052b4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80052b6:	2300      	movs	r3, #0
 80052b8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d034      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052ce:	d021      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80052d0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80052d4:	d81b      	bhi.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052da:	d01d      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80052dc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052e0:	d815      	bhi.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x54>
 80052e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052ea:	d110      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80052ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052fa:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80052fc:	e00d      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f000 f947 	bl	8005596 <RCCEx_PLLSAI1_ConfigNP>
 8005308:	4603      	mov	r3, r0
 800530a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800530c:	e005      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	77fb      	strb	r3, [r7, #31]
        break;
 8005312:	e002      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005314:	bf00      	nop
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	7ffb      	ldrb	r3, [r7, #31]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff fee8 	bl	80050fa <LL_RCC_SetSAIClockSource>
 800532a:	e001      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800532c:	7ffb      	ldrb	r3, [r7, #31]
 800532e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005338:	2b00      	cmp	r3, #0
 800533a:	d046      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800533c:	f7ff ff56 	bl	80051ec <LL_RCC_GetRTCClockSource>
 8005340:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	429a      	cmp	r2, r3
 800534a:	d03c      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800534c:	f7fe fc66 	bl	8003c1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff ff30 	bl	80051c0 <LL_RCC_SetRTCClockSource>
 8005360:	e02e      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800536a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800536c:	f7ff ff4b 	bl	8005206 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005370:	f7ff ff5a 	bl	8005228 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800538c:	f7ff fdf0 	bl	8004f70 <LL_RCC_LSE_IsEnabled>
 8005390:	4603      	mov	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d114      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005396:	f7fc fc51 	bl	8001c3c <HAL_GetTick>
 800539a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800539c:	e00b      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800539e:	f7fc fc4d 	bl	8001c3c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d902      	bls.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	77fb      	strb	r3, [r7, #31]
              break;
 80053b4:	e004      	b.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80053b6:	f7ff fded 	bl	8004f94 <LL_RCC_LSE_IsReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d1ee      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80053c0:	7ffb      	ldrb	r3, [r7, #31]
 80053c2:	77bb      	strb	r3, [r7, #30]
 80053c4:	e001      	b.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c6:	7ffb      	ldrb	r3, [r7, #31]
 80053c8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	4618      	mov	r0, r3
 80053dc:	f7ff fe2a 	bl	8005034 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d004      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7ff fe35 	bl	8005060 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fe5d 	bl	80050c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fe52 	bl	80050c6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	d004      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fe2a 	bl	800508c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d004      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	4618      	mov	r0, r3
 800544a:	f7ff fe1f 	bl	800508c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005456:	2b00      	cmp	r3, #0
 8005458:	d022      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff fe8d 	bl	800517e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800546e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800547c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005482:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005486:	d10b      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3304      	adds	r3, #4
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f8dd 	bl	800564c <RCCEx_PLLSAI1_ConfigNQ>
 8005492:	4603      	mov	r3, r0
 8005494:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005496:	7ffb      	ldrb	r3, [r7, #31]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800549c:	7ffb      	ldrb	r3, [r7, #31]
 800549e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d02b      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b4:	d008      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054be:	d003      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d105      	bne.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff fe2a 	bl	8005126 <LL_RCC_SetRNGClockSource>
 80054d2:	e00a      	b.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x240>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	2000      	movs	r0, #0
 80054e0:	f7ff fe21 	bl	8005126 <LL_RCC_SetRNGClockSource>
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fe34 	bl	8005152 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ee:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80054f2:	d107      	bne.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005502:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800550c:	2b00      	cmp	r3, #0
 800550e:	d022      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff fe3d 	bl	8005194 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005522:	d107      	bne.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800552e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005532:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800553c:	d10b      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f8dd 	bl	8005702 <RCCEx_PLLSAI1_ConfigNR>
 8005548:	4603      	mov	r3, r0
 800554a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800554c:	7ffb      	ldrb	r3, [r7, #31]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005552:	7ffb      	ldrb	r3, [r7, #31]
 8005554:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d004      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff fd26 	bl	8004fb8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d009      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fd45 	bl	800500c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005586:	4618      	mov	r0, r3
 8005588:	f7ff fd2c 	bl	8004fe4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800558c:	7fbb      	ldrb	r3, [r7, #30]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b084      	sub	sp, #16
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055a2:	f7ff fe61 	bl	8005268 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80055a6:	f7fc fb49 	bl	8001c3c <HAL_GetTick>
 80055aa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055ac:	e009      	b.n	80055c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055ae:	f7fc fb45 	bl	8001c3c <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d902      	bls.n	80055c2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e004      	b.n	80055cc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80055c2:	f7ff fe60 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f0      	bne.n	80055ae <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d137      	bne.n	8005642 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	021b      	lsls	r3, r3, #8
 80055e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055e6:	4313      	orrs	r3, r2
 80055e8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80055ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055fc:	4313      	orrs	r3, r2
 80055fe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005600:	f7ff fe23 	bl	800524a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005604:	f7fc fb1a 	bl	8001c3c <HAL_GetTick>
 8005608:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800560a:	e009      	b.n	8005620 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800560c:	f7fc fb16 	bl	8001c3c <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d902      	bls.n	8005620 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	73fb      	strb	r3, [r7, #15]
        break;
 800561e:	e004      	b.n	800562a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005620:	f7ff fe31 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 8005624:	4603      	mov	r3, r0
 8005626:	2b01      	cmp	r3, #1
 8005628:	d1f0      	bne.n	800560c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d108      	bne.n	8005642 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005634:	691a      	ldr	r2, [r3, #16]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800563e:	4313      	orrs	r3, r2
 8005640:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005658:	f7ff fe06 	bl	8005268 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800565c:	f7fc faee 	bl	8001c3c <HAL_GetTick>
 8005660:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005662:	e009      	b.n	8005678 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005664:	f7fc faea 	bl	8001c3c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d902      	bls.n	8005678 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	73fb      	strb	r3, [r7, #15]
      break;
 8005676:	e004      	b.n	8005682 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005678:	f7ff fe05 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1f0      	bne.n	8005664 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d137      	bne.n	80056f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	021b      	lsls	r3, r3, #8
 8005698:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800569c:	4313      	orrs	r3, r2
 800569e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056b2:	4313      	orrs	r3, r2
 80056b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80056b6:	f7ff fdc8 	bl	800524a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ba:	f7fc fabf 	bl	8001c3c <HAL_GetTick>
 80056be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056c0:	e009      	b.n	80056d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056c2:	f7fc fabb 	bl	8001c3c <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d902      	bls.n	80056d6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	73fb      	strb	r3, [r7, #15]
        break;
 80056d4:	e004      	b.n	80056e0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80056d6:	f7ff fdd6 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d1f0      	bne.n	80056c2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d108      	bne.n	80056f8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056f4:	4313      	orrs	r3, r2
 80056f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800570a:	2300      	movs	r3, #0
 800570c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800570e:	f7ff fdab 	bl	8005268 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005712:	f7fc fa93 	bl	8001c3c <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005718:	e009      	b.n	800572e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800571a:	f7fc fa8f 	bl	8001c3c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d902      	bls.n	800572e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e004      	b.n	8005738 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800572e:	f7ff fdaa 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1f0      	bne.n	800571a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d137      	bne.n	80057ae <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800573e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	021b      	lsls	r3, r3, #8
 800574e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005752:	4313      	orrs	r3, r2
 8005754:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005756:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005768:	4313      	orrs	r3, r2
 800576a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800576c:	f7ff fd6d 	bl	800524a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005770:	f7fc fa64 	bl	8001c3c <HAL_GetTick>
 8005774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005776:	e009      	b.n	800578c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005778:	f7fc fa60 	bl	8001c3c <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d902      	bls.n	800578c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
        break;
 800578a:	e004      	b.n	8005796 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800578c:	f7ff fd7b 	bl	8005286 <LL_RCC_PLLSAI1_IsReady>
 8005790:	4603      	mov	r3, r0
 8005792:	2b01      	cmp	r3, #1
 8005794:	d1f0      	bne.n	8005778 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005796:	7bfb      	ldrb	r3, [r7, #15]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d108      	bne.n	80057ae <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057aa:	4313      	orrs	r3, r2
 80057ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80057ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e095      	b.n	80058f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d108      	bne.n	80057e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057da:	d009      	beq.n	80057f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	61da      	str	r2, [r3, #28]
 80057e2:	e005      	b.n	80057f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d106      	bne.n	8005810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f7fb feba 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005826:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005830:	d902      	bls.n	8005838 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
 8005836:	e002      	b.n	800583e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005838:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800583c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005846:	d007      	beq.n	8005858 <HAL_SPI_Init+0xa0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005868:	431a      	orrs	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589a:	ea42 0103 	orr.w	r1, r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	0c1b      	lsrs	r3, r3, #16
 80058b4:	f003 0204 	and.w	r2, r3, #4
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80058d4:	ea42 0103 	orr.w	r1, r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b088      	sub	sp, #32
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	603b      	str	r3, [r7, #0]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_SPI_Transmit+0x22>
 800591c:	2302      	movs	r3, #2
 800591e:	e15f      	b.n	8005be0 <HAL_SPI_Transmit+0x2e2>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005928:	f7fc f988 	bl	8001c3c <HAL_GetTick>
 800592c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	d002      	beq.n	8005944 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800593e:	2302      	movs	r3, #2
 8005940:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005942:	e148      	b.n	8005bd6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_SPI_Transmit+0x52>
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005954:	e13f      	b.n	8005bd6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2203      	movs	r2, #3
 800595a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	88fa      	ldrh	r2, [r7, #6]
 800596e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	88fa      	ldrh	r2, [r7, #6]
 8005974:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059a0:	d10f      	bne.n	80059c2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059cc:	2b40      	cmp	r3, #64	@ 0x40
 80059ce:	d007      	beq.n	80059e0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80059e8:	d94f      	bls.n	8005a8a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_SPI_Transmit+0xfa>
 80059f2:	8afb      	ldrh	r3, [r7, #22]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d142      	bne.n	8005a7e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	881a      	ldrh	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	1c9a      	adds	r2, r3, #2
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a1c:	e02f      	b.n	8005a7e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d112      	bne.n	8005a52 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	1c9a      	adds	r2, r3, #2
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a50:	e015      	b.n	8005a7e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a52:	f7fc f8f3 	bl	8001c3c <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d803      	bhi.n	8005a6a <HAL_SPI_Transmit+0x16c>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d102      	bne.n	8005a70 <HAL_SPI_Transmit+0x172>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d106      	bne.n	8005a7e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005a7c:	e0ab      	b.n	8005bd6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ca      	bne.n	8005a1e <HAL_SPI_Transmit+0x120>
 8005a88:	e080      	b.n	8005b8c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_SPI_Transmit+0x19a>
 8005a92:	8afb      	ldrh	r3, [r7, #22]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d174      	bne.n	8005b82 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d912      	bls.n	8005ac8 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	881a      	ldrh	r2, [r3, #0]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab2:	1c9a      	adds	r2, r3, #2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	3b02      	subs	r3, #2
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ac6:	e05c      	b.n	8005b82 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	7812      	ldrb	r2, [r2, #0]
 8005ad4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ada:	1c5a      	adds	r2, r3, #1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005aee:	e048      	b.n	8005b82 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d12b      	bne.n	8005b56 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d912      	bls.n	8005b2e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0c:	881a      	ldrh	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b18:	1c9a      	adds	r2, r3, #2
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b02      	subs	r3, #2
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b2c:	e029      	b.n	8005b82 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	1c5a      	adds	r2, r3, #1
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b54:	e015      	b.n	8005b82 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b56:	f7fc f871 	bl	8001c3c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d803      	bhi.n	8005b6e <HAL_SPI_Transmit+0x270>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6c:	d102      	bne.n	8005b74 <HAL_SPI_Transmit+0x276>
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005b80:	e029      	b.n	8005bd6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1b1      	bne.n	8005af0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fb69 	bl	8006268 <SPI_EndRxTxTransaction>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005baa:	2300      	movs	r3, #0
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	613b      	str	r3, [r7, #16]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e003      	b.n	8005bd6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005bde:	7ffb      	ldrb	r3, [r7, #31]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3720      	adds	r7, #32
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b08a      	sub	sp, #40	@ 0x28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_SPI_TransmitReceive+0x26>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e20a      	b.n	8006024 <HAL_SPI_TransmitReceive+0x43c>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c16:	f7fc f811 	bl	8001c3c <HAL_GetTick>
 8005c1a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c22:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c2e:	887b      	ldrh	r3, [r7, #2]
 8005c30:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c32:	7efb      	ldrb	r3, [r7, #27]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d00e      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x6e>
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c3e:	d106      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_TransmitReceive+0x66>
 8005c48:	7efb      	ldrb	r3, [r7, #27]
 8005c4a:	2b04      	cmp	r3, #4
 8005c4c:	d003      	beq.n	8005c56 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c54:	e1e0      	b.n	8006018 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x80>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_TransmitReceive+0x80>
 8005c62:	887b      	ldrh	r3, [r7, #2]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005c6e:	e1d3      	b.n	8006018 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	d003      	beq.n	8005c84 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2205      	movs	r2, #5
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	887a      	ldrh	r2, [r7, #2]
 8005c9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	887a      	ldrh	r2, [r7, #2]
 8005cb0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cc6:	d802      	bhi.n	8005cce <HAL_SPI_TransmitReceive+0xe6>
 8005cc8:	8a3b      	ldrh	r3, [r7, #16]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d908      	bls.n	8005ce0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cdc:	605a      	str	r2, [r3, #4]
 8005cde:	e007      	b.n	8005cf0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005cee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d007      	beq.n	8005d0e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d16:	f240 8081 	bls.w	8005e1c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x140>
 8005d22:	8a7b      	ldrh	r3, [r7, #18]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d16d      	bne.n	8005e04 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	3b01      	subs	r3, #1
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d4c:	e05a      	b.n	8005e04 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d11b      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x1ac>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d016      	beq.n	8005d94 <HAL_SPI_TransmitReceive+0x1ac>
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d113      	bne.n	8005d94 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	881a      	ldrh	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7c:	1c9a      	adds	r2, r3, #2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d11c      	bne.n	8005ddc <HAL_SPI_TransmitReceive+0x1f4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	b292      	uxth	r2, r2
 8005dba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	1c9a      	adds	r2, r3, #2
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ddc:	f7fb ff2e 	bl	8001c3c <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d80b      	bhi.n	8005e04 <HAL_SPI_TransmitReceive+0x21c>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df2:	d007      	beq.n	8005e04 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e02:	e109      	b.n	8006018 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d19f      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x166>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d199      	bne.n	8005d4e <HAL_SPI_TransmitReceive+0x166>
 8005e1a:	e0e3      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <HAL_SPI_TransmitReceive+0x244>
 8005e24:	8a7b      	ldrh	r3, [r7, #18]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	f040 80cf 	bne.w	8005fca <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d912      	bls.n	8005e5c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	881a      	ldrh	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b02      	subs	r3, #2
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e5a:	e0b6      	b.n	8005fca <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	7812      	ldrb	r2, [r2, #0]
 8005e68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e82:	e0a2      	b.n	8005fca <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d134      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x314>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d02f      	beq.n	8005efc <HAL_SPI_TransmitReceive+0x314>
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d12c      	bne.n	8005efc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d912      	bls.n	8005ed2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb0:	881a      	ldrh	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ebc:	1c9a      	adds	r2, r3, #2
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b02      	subs	r3, #2
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ed0:	e012      	b.n	8005ef8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	330c      	adds	r3, #12
 8005edc:	7812      	ldrb	r2, [r2, #0]
 8005ede:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d148      	bne.n	8005f9c <HAL_SPI_TransmitReceive+0x3b4>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d042      	beq.n	8005f9c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d923      	bls.n	8005f6a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f2c:	b292      	uxth	r2, r2
 8005f2e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f34:	1c9a      	adds	r2, r3, #2
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b02      	subs	r3, #2
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d81f      	bhi.n	8005f98 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f66:	605a      	str	r2, [r3, #4]
 8005f68:	e016      	b.n	8005f98 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f103 020c 	add.w	r2, r3, #12
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f9c:	f7fb fe4e 	bl	8001c3c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d803      	bhi.n	8005fb4 <HAL_SPI_TransmitReceive+0x3cc>
 8005fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d102      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x3d2>
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d107      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005fc8:	e026      	b.n	8006018 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f47f af57 	bne.w	8005e84 <HAL_SPI_TransmitReceive+0x29c>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f47f af50 	bne.w	8005e84 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 f93d 	bl	8006268 <SPI_EndRxTxTransaction>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800600e:	e003      	b.n	8006018 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8006020:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006024:	4618      	mov	r0, r3
 8006026:	3728      	adds	r7, #40	@ 0x28
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800603c:	f7fb fdfe 	bl	8001c3c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	1a9b      	subs	r3, r3, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	4413      	add	r3, r2
 800604a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800604c:	f7fb fdf6 	bl	8001c3c <HAL_GetTick>
 8006050:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006052:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	015b      	lsls	r3, r3, #5
 8006058:	0d1b      	lsrs	r3, r3, #20
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	fb02 f303 	mul.w	r3, r2, r3
 8006060:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006062:	e054      	b.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d050      	beq.n	800610e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606c:	f7fb fde6 	bl	8001c3c <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	69fa      	ldr	r2, [r7, #28]
 8006078:	429a      	cmp	r2, r3
 800607a:	d902      	bls.n	8006082 <SPI_WaitFlagStateUntilTimeout+0x56>
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d13d      	bne.n	80060fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006090:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800609a:	d111      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060a4:	d004      	beq.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ae:	d107      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060c8:	d10f      	bne.n	80060ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e017      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4013      	ands	r3, r2
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	429a      	cmp	r2, r3
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	429a      	cmp	r2, r3
 800612a:	d19b      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000008 	.word	0x20000008

0800613c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	@ 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800614e:	f7fb fd75 	bl	8001c3c <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	4413      	add	r3, r2
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800615e:	f7fb fd6d 	bl	8001c3c <HAL_GetTick>
 8006162:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800616c:	4b3d      	ldr	r3, [pc, #244]	@ (8006264 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4613      	mov	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	00da      	lsls	r2, r3, #3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	0d1b      	lsrs	r3, r3, #20
 800617c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800617e:	fb02 f303 	mul.w	r3, r2, r3
 8006182:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006184:	e060      	b.n	8006248 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800618c:	d107      	bne.n	800619e <SPI_WaitFifoStateUntilTimeout+0x62>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d104      	bne.n	800619e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800619c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d050      	beq.n	8006248 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061a6:	f7fb fd49 	bl	8001c3c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d902      	bls.n	80061bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80061b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d13d      	bne.n	8006238 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061d4:	d111      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061de:	d004      	beq.n	80061ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061e8:	d107      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006202:	d10f      	bne.n	8006224 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006212:	601a      	str	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006222:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e010      	b.n	800625a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	3b01      	subs	r3, #1
 8006246:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	4013      	ands	r3, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d196      	bne.n	8006186 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3728      	adds	r7, #40	@ 0x28
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000008 	.word	0x20000008

08006268 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2200      	movs	r2, #0
 800627c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f7ff ff5b 	bl	800613c <SPI_WaitFifoStateUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006290:	f043 0220 	orr.w	r2, r3, #32
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e027      	b.n	80062ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2200      	movs	r2, #0
 80062a4:	2180      	movs	r1, #128	@ 0x80
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f7ff fec0 	bl	800602c <SPI_WaitFlagStateUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b6:	f043 0220 	orr.w	r2, r3, #32
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e014      	b.n	80062ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ff34 	bl	800613c <SPI_WaitFifoStateUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062de:	f043 0220 	orr.w	r2, r3, #32
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e000      	b.n	80062ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e049      	b.n	800639a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fb f962 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2202      	movs	r2, #2
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3304      	adds	r3, #4
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 f946 	bl	80065c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
	...

080063a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d001      	beq.n	80063bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02e      	b.n	800641a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2202      	movs	r2, #2
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a17      	ldr	r2, [pc, #92]	@ (8006428 <HAL_TIM_Base_Start+0x84>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_TIM_Base_Start+0x34>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063d6:	d115      	bne.n	8006404 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689a      	ldr	r2, [r3, #8]
 80063de:	4b13      	ldr	r3, [pc, #76]	@ (800642c <HAL_TIM_Base_Start+0x88>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2b06      	cmp	r3, #6
 80063e8:	d015      	beq.n	8006416 <HAL_TIM_Base_Start+0x72>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063f0:	d011      	beq.n	8006416 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0201 	orr.w	r2, r2, #1
 8006400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006402:	e008      	b.n	8006416 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	e000      	b.n	8006418 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40012c00 	.word	0x40012c00
 800642c:	00010007 	.word	0x00010007

08006430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006444:	2b01      	cmp	r3, #1
 8006446:	d101      	bne.n	800644c <HAL_TIM_ConfigClockSource+0x1c>
 8006448:	2302      	movs	r3, #2
 800644a:	e0b6      	b.n	80065ba <HAL_TIM_ConfigClockSource+0x18a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800646a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800646e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006488:	d03e      	beq.n	8006508 <HAL_TIM_ConfigClockSource+0xd8>
 800648a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800648e:	f200 8087 	bhi.w	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006496:	f000 8086 	beq.w	80065a6 <HAL_TIM_ConfigClockSource+0x176>
 800649a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800649e:	d87f      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064a0:	2b70      	cmp	r3, #112	@ 0x70
 80064a2:	d01a      	beq.n	80064da <HAL_TIM_ConfigClockSource+0xaa>
 80064a4:	2b70      	cmp	r3, #112	@ 0x70
 80064a6:	d87b      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064a8:	2b60      	cmp	r3, #96	@ 0x60
 80064aa:	d050      	beq.n	800654e <HAL_TIM_ConfigClockSource+0x11e>
 80064ac:	2b60      	cmp	r3, #96	@ 0x60
 80064ae:	d877      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064b0:	2b50      	cmp	r3, #80	@ 0x50
 80064b2:	d03c      	beq.n	800652e <HAL_TIM_ConfigClockSource+0xfe>
 80064b4:	2b50      	cmp	r3, #80	@ 0x50
 80064b6:	d873      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064b8:	2b40      	cmp	r3, #64	@ 0x40
 80064ba:	d058      	beq.n	800656e <HAL_TIM_ConfigClockSource+0x13e>
 80064bc:	2b40      	cmp	r3, #64	@ 0x40
 80064be:	d86f      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064c0:	2b30      	cmp	r3, #48	@ 0x30
 80064c2:	d064      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x15e>
 80064c4:	2b30      	cmp	r3, #48	@ 0x30
 80064c6:	d86b      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d060      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x15e>
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d867      	bhi.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d05c      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x15e>
 80064d4:	2b10      	cmp	r3, #16
 80064d6:	d05a      	beq.n	800658e <HAL_TIM_ConfigClockSource+0x15e>
 80064d8:	e062      	b.n	80065a0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064ea:	f000 f957 	bl	800679c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	609a      	str	r2, [r3, #8]
      break;
 8006506:	e04f      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006518:	f000 f940 	bl	800679c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800652a:	609a      	str	r2, [r3, #8]
      break;
 800652c:	e03c      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800653a:	461a      	mov	r2, r3
 800653c:	f000 f8b2 	bl	80066a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2150      	movs	r1, #80	@ 0x50
 8006546:	4618      	mov	r0, r3
 8006548:	f000 f90b 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800654c:	e02c      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800655a:	461a      	mov	r2, r3
 800655c:	f000 f8d1 	bl	8006702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2160      	movs	r1, #96	@ 0x60
 8006566:	4618      	mov	r0, r3
 8006568:	f000 f8fb 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800656c:	e01c      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800657a:	461a      	mov	r2, r3
 800657c:	f000 f892 	bl	80066a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2140      	movs	r1, #64	@ 0x40
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f8eb 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800658c:	e00c      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f000 f8e2 	bl	8006762 <TIM_ITRx_SetConfig>
      break;
 800659e:	e003      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
      break;
 80065a4:	e000      	b.n	80065a8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80065a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a30      	ldr	r2, [pc, #192]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x20>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a27      	ldr	r2, [pc, #156]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a24      	ldr	r2, [pc, #144]	@ (800669c <TIM_Base_SetConfig+0xd8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x52>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a23      	ldr	r2, [pc, #140]	@ (80066a0 <TIM_Base_SetConfig+0xdc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a12      	ldr	r2, [pc, #72]	@ (8006698 <TIM_Base_SetConfig+0xd4>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a11      	ldr	r2, [pc, #68]	@ (800669c <TIM_Base_SetConfig+0xd8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_Base_SetConfig+0xa0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a10      	ldr	r2, [pc, #64]	@ (80066a0 <TIM_Base_SetConfig+0xdc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d103      	bne.n	800666c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	691a      	ldr	r2, [r3, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	2b01      	cmp	r3, #1
 800667c:	d105      	bne.n	800668a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f023 0201 	bic.w	r2, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	611a      	str	r2, [r3, #16]
  }
}
 800668a:	bf00      	nop
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40014400 	.word	0x40014400
 80066a0:	40014800 	.word	0x40014800

080066a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	f023 0201 	bic.w	r2, r3, #1
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f023 030a 	bic.w	r3, r3, #10
 80066e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	621a      	str	r2, [r3, #32]
}
 80066f6:	bf00      	nop
 80066f8:	371c      	adds	r7, #28
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006702:	b480      	push	{r7}
 8006704:	b087      	sub	sp, #28
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f023 0210 	bic.w	r2, r3, #16
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800672c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	031b      	lsls	r3, r3, #12
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800673e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	4313      	orrs	r3, r2
 8006748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	621a      	str	r2, [r3, #32]
}
 8006756:	bf00      	nop
 8006758:	371c      	adds	r7, #28
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800677c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	f043 0307 	orr.w	r3, r3, #7
 8006788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	609a      	str	r2, [r3, #8]
}
 8006790:	bf00      	nop
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800679c:	b480      	push	{r7}
 800679e:	b087      	sub	sp, #28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	021a      	lsls	r2, r3, #8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	431a      	orrs	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	697a      	ldr	r2, [r7, #20]
 80067ce:	609a      	str	r2, [r3, #8]
}
 80067d0:	bf00      	nop
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d101      	bne.n	80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e04a      	b.n	800688a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1f      	ldr	r2, [pc, #124]	@ (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006824:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a12      	ldr	r2, [pc, #72]	@ (8006898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d004      	beq.n	800685e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685c:	d10c      	bne.n	8006878 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	4313      	orrs	r3, r2
 800686e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40012c00 	.word	0x40012c00

0800689c <LL_RCC_GetUSARTClockSource>:
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80068a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4013      	ands	r3, r2
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <LL_RCC_GetLPUARTClockSource>:
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80068c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4013      	ands	r3, r2
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e042      	b.n	8006974 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d106      	bne.n	8006906 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7fa fdf9 	bl	80014f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2224      	movs	r2, #36	@ 0x24
 800690a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 0201 	bic.w	r2, r2, #1
 800691c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa50 	bl	8006dcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f825 	bl	800697c <UART_SetConfig>
 8006932:	4603      	mov	r3, r0
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e01b      	b.n	8006974 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800694a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800695a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 facf 	bl	8006f10 <UART_CheckIdleState>
 8006972:	4603      	mov	r3, r0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800697c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006980:	b08c      	sub	sp, #48	@ 0x30
 8006982:	af00      	add	r7, sp, #0
 8006984:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	431a      	orrs	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	431a      	orrs	r2, r3
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	4baf      	ldr	r3, [pc, #700]	@ (8006c68 <UART_SetConfig+0x2ec>)
 80069ac:	4013      	ands	r3, r2
 80069ae:	697a      	ldr	r2, [r7, #20]
 80069b0:	6812      	ldr	r2, [r2, #0]
 80069b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4aa4      	ldr	r2, [pc, #656]	@ (8006c6c <UART_SetConfig+0x2f0>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069e4:	4313      	orrs	r3, r2
 80069e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80069f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a06:	f023 010f 	bic.w	r1, r3, #15
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a95      	ldr	r2, [pc, #596]	@ (8006c70 <UART_SetConfig+0x2f4>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d125      	bne.n	8006a6c <UART_SetConfig+0xf0>
 8006a20:	2003      	movs	r0, #3
 8006a22:	f7ff ff3b 	bl	800689c <LL_RCC_GetUSARTClockSource>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b03      	cmp	r3, #3
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0xe8>
 8006a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a34 <UART_SetConfig+0xb8>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a45 	.word	0x08006a45
 8006a38:	08006a55 	.word	0x08006a55
 8006a3c:	08006a4d 	.word	0x08006a4d
 8006a40:	08006a5d 	.word	0x08006a5d
 8006a44:	2301      	movs	r3, #1
 8006a46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a4a:	e042      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a52:	e03e      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a5a:	e03a      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a62:	e036      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006a6a:	e032      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a7e      	ldr	r2, [pc, #504]	@ (8006c6c <UART_SetConfig+0x2f0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d12a      	bne.n	8006acc <UART_SetConfig+0x150>
 8006a76:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006a7a:	f7ff ff1f 	bl	80068bc <LL_RCC_GetLPUARTClockSource>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a84:	d01a      	beq.n	8006abc <UART_SetConfig+0x140>
 8006a86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006a8a:	d81b      	bhi.n	8006ac4 <UART_SetConfig+0x148>
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a90:	d00c      	beq.n	8006aac <UART_SetConfig+0x130>
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a96:	d815      	bhi.n	8006ac4 <UART_SetConfig+0x148>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <UART_SetConfig+0x128>
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa0:	d008      	beq.n	8006ab4 <UART_SetConfig+0x138>
 8006aa2:	e00f      	b.n	8006ac4 <UART_SetConfig+0x148>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aaa:	e012      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ab2:	e00e      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aba:	e00a      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ac2:	e006      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006aca:	e002      	b.n	8006ad2 <UART_SetConfig+0x156>
 8006acc:	2310      	movs	r3, #16
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a65      	ldr	r2, [pc, #404]	@ (8006c6c <UART_SetConfig+0x2f0>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	f040 8097 	bne.w	8006c0c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ade:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d823      	bhi.n	8006b2e <UART_SetConfig+0x1b2>
 8006ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8006aec <UART_SetConfig+0x170>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b2f 	.word	0x08006b2f
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b2f 	.word	0x08006b2f
 8006afc:	08006b1f 	.word	0x08006b1f
 8006b00:	08006b2f 	.word	0x08006b2f
 8006b04:	08006b2f 	.word	0x08006b2f
 8006b08:	08006b2f 	.word	0x08006b2f
 8006b0c:	08006b27 	.word	0x08006b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe f94e 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006b14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b16:	e010      	b.n	8006b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b18:	4b56      	ldr	r3, [pc, #344]	@ (8006c74 <UART_SetConfig+0x2f8>)
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b1c:	e00d      	b.n	8006b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b1e:	f7fe f8c5 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8006b22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b24:	e009      	b.n	8006b3a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b2c:	e005      	b.n	8006b3a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 812b 	beq.w	8006d98 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b46:	4a4c      	ldr	r2, [pc, #304]	@ (8006c78 <UART_SetConfig+0x2fc>)
 8006b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d305      	bcc.n	8006b72 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d903      	bls.n	8006b7a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b78:	e10e      	b.n	8006d98 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	60fa      	str	r2, [r7, #12]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b86:	4a3c      	ldr	r2, [pc, #240]	@ (8006c78 <UART_SetConfig+0x2fc>)
 8006b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2200      	movs	r2, #0
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b9c:	f7f9 ffdc 	bl	8000b58 <__aeabi_uldivmod>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	020b      	lsls	r3, r1, #8
 8006bb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006bb6:	0202      	lsls	r2, r0, #8
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	6849      	ldr	r1, [r1, #4]
 8006bbc:	0849      	lsrs	r1, r1, #1
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	4605      	mov	r5, r0
 8006bc4:	eb12 0804 	adds.w	r8, r2, r4
 8006bc8:	eb43 0905 	adc.w	r9, r3, r5
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	469a      	mov	sl, r3
 8006bd4:	4693      	mov	fp, r2
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	465b      	mov	r3, fp
 8006bda:	4640      	mov	r0, r8
 8006bdc:	4649      	mov	r1, r9
 8006bde:	f7f9 ffbb 	bl	8000b58 <__aeabi_uldivmod>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4613      	mov	r3, r2
 8006be8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bea:	6a3b      	ldr	r3, [r7, #32]
 8006bec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006bf0:	d308      	bcc.n	8006c04 <UART_SetConfig+0x288>
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bf8:	d204      	bcs.n	8006c04 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a3a      	ldr	r2, [r7, #32]
 8006c00:	60da      	str	r2, [r3, #12]
 8006c02:	e0c9      	b.n	8006d98 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006c0a:	e0c5      	b.n	8006d98 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c14:	d16d      	bne.n	8006cf2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006c16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	2b07      	cmp	r3, #7
 8006c1e:	d82d      	bhi.n	8006c7c <UART_SetConfig+0x300>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0x2ac>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c7d 	.word	0x08006c7d
 8006c34:	08006c57 	.word	0x08006c57
 8006c38:	08006c7d 	.word	0x08006c7d
 8006c3c:	08006c7d 	.word	0x08006c7d
 8006c40:	08006c7d 	.word	0x08006c7d
 8006c44:	08006c5f 	.word	0x08006c5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c48:	f7fe f8c8 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006c4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c4e:	e01b      	b.n	8006c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c50:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <UART_SetConfig+0x2f8>)
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c54:	e018      	b.n	8006c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c56:	f7fe f829 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8006c5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c5c:	e014      	b.n	8006c88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c64:	e010      	b.n	8006c88 <UART_SetConfig+0x30c>
 8006c66:	bf00      	nop
 8006c68:	cfff69f3 	.word	0xcfff69f3
 8006c6c:	40008000 	.word	0x40008000
 8006c70:	40013800 	.word	0x40013800
 8006c74:	00f42400 	.word	0x00f42400
 8006c78:	0800c360 	.word	0x0800c360
      default:
        pclk = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 8084 	beq.w	8006d98 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c94:	4a4b      	ldr	r2, [pc, #300]	@ (8006dc4 <UART_SetConfig+0x448>)
 8006c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ca2:	005a      	lsls	r2, r3, #1
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	085b      	lsrs	r3, r3, #1
 8006caa:	441a      	add	r2, r3
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	2b0f      	cmp	r3, #15
 8006cba:	d916      	bls.n	8006cea <UART_SetConfig+0x36e>
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006cc2:	d212      	bcs.n	8006cea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006cc4:	6a3b      	ldr	r3, [r7, #32]
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	f023 030f 	bic.w	r3, r3, #15
 8006ccc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	085b      	lsrs	r3, r3, #1
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f003 0307 	and.w	r3, r3, #7
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	8bfb      	ldrh	r3, [r7, #30]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	8bfa      	ldrh	r2, [r7, #30]
 8006ce6:	60da      	str	r2, [r3, #12]
 8006ce8:	e056      	b.n	8006d98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006cf0:	e052      	b.n	8006d98 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	2b07      	cmp	r3, #7
 8006cfa:	d822      	bhi.n	8006d42 <UART_SetConfig+0x3c6>
 8006cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8006d04 <UART_SetConfig+0x388>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d25 	.word	0x08006d25
 8006d08:	08006d2d 	.word	0x08006d2d
 8006d0c:	08006d43 	.word	0x08006d43
 8006d10:	08006d33 	.word	0x08006d33
 8006d14:	08006d43 	.word	0x08006d43
 8006d18:	08006d43 	.word	0x08006d43
 8006d1c:	08006d43 	.word	0x08006d43
 8006d20:	08006d3b 	.word	0x08006d3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d24:	f7fe f85a 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006d28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d2a:	e010      	b.n	8006d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d2c:	4b26      	ldr	r3, [pc, #152]	@ (8006dc8 <UART_SetConfig+0x44c>)
 8006d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d30:	e00d      	b.n	8006d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d32:	f7fd ffbb 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8006d36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d38:	e009      	b.n	8006d4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d40:	e005      	b.n	8006d4e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006d4c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d021      	beq.n	8006d98 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d58:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc4 <UART_SetConfig+0x448>)
 8006d5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d62:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	085b      	lsrs	r3, r3, #1
 8006d6c:	441a      	add	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b0f      	cmp	r3, #15
 8006d7c:	d909      	bls.n	8006d92 <UART_SetConfig+0x416>
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d84:	d205      	bcs.n	8006d92 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	60da      	str	r2, [r3, #12]
 8006d90:	e002      	b.n	8006d98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	2200      	movs	r2, #0
 8006dac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2200      	movs	r2, #0
 8006db2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006db4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3730      	adds	r7, #48	@ 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dc2:	bf00      	nop
 8006dc4:	0800c360 	.word	0x0800c360
 8006dc8:	00f42400 	.word	0x00f42400

08006dcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd8:	f003 0308 	and.w	r3, r3, #8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	f003 0301 	and.w	r3, r3, #1
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	430a      	orrs	r2, r1
 8006e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	430a      	orrs	r2, r1
 8006e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e60:	f003 0310 	and.w	r3, r3, #16
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e82:	f003 0320 	and.w	r3, r3, #32
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01a      	beq.n	8006ee2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eca:	d10a      	bne.n	8006ee2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	430a      	orrs	r2, r1
 8006f02:	605a      	str	r2, [r3, #4]
  }
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b098      	sub	sp, #96	@ 0x60
 8006f14:	af02      	add	r7, sp, #8
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f20:	f7fa fe8c 	bl	8001c3c <HAL_GetTick>
 8006f24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b08      	cmp	r3, #8
 8006f32:	d12f      	bne.n	8006f94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f88e 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d022      	beq.n	8006f94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f56:	e853 3f00 	ldrex	r3, [r3]
 8006f5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f62:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f74:	e841 2300 	strex	r3, r2, [r1]
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1e6      	bne.n	8006f4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e063      	b.n	800705c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d149      	bne.n	8007036 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006fa6:	9300      	str	r3, [sp, #0]
 8006fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006faa:	2200      	movs	r2, #0
 8006fac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f857 	bl	8007064 <UART_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d03c      	beq.n	8007036 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006fda:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fe0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e6      	bne.n	8006fbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3308      	adds	r3, #8
 8006ff4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f023 0301 	bic.w	r3, r3, #1
 8007004:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800700e:	61fa      	str	r2, [r7, #28]
 8007010:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	69fa      	ldr	r2, [r7, #28]
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	617b      	str	r3, [r7, #20]
   return(result);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1e5      	bne.n	8006fee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e012      	b.n	800705c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3758      	adds	r7, #88	@ 0x58
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	603b      	str	r3, [r7, #0]
 8007070:	4613      	mov	r3, r2
 8007072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007074:	e04f      	b.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800707c:	d04b      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fa fddd 	bl	8001c3c <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	429a      	cmp	r2, r3
 800708c:	d302      	bcc.n	8007094 <UART_WaitOnFlagUntilTimeout+0x30>
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d101      	bne.n	8007098 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007094:	2303      	movs	r3, #3
 8007096:	e04e      	b.n	8007136 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d037      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b80      	cmp	r3, #128	@ 0x80
 80070aa:	d034      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	2b40      	cmp	r3, #64	@ 0x40
 80070b0:	d031      	beq.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 0308 	and.w	r3, r3, #8
 80070bc:	2b08      	cmp	r3, #8
 80070be:	d110      	bne.n	80070e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2208      	movs	r2, #8
 80070c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f000 f838 	bl	800713e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2208      	movs	r2, #8
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e029      	b.n	8007136 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69db      	ldr	r3, [r3, #28]
 80070e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070f0:	d111      	bne.n	8007116 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	f000 f81e 	bl	800713e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e00f      	b.n	8007136 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	69da      	ldr	r2, [r3, #28]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	429a      	cmp	r2, r3
 8007124:	bf0c      	ite	eq
 8007126:	2301      	moveq	r3, #1
 8007128:	2300      	movne	r3, #0
 800712a:	b2db      	uxtb	r3, r3
 800712c:	461a      	mov	r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	429a      	cmp	r2, r3
 8007132:	d0a0      	beq.n	8007076 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800713e:	b480      	push	{r7}
 8007140:	b095      	sub	sp, #84	@ 0x54
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007156:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800715a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007164:	643b      	str	r3, [r7, #64]	@ 0x40
 8007166:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007168:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800716a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800716c:	e841 2300 	strex	r3, r2, [r1]
 8007170:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1e6      	bne.n	8007146 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	e853 3f00 	ldrex	r3, [r3]
 8007186:	61fb      	str	r3, [r7, #28]
   return(result);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	3308      	adds	r3, #8
 800719a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800719c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e3      	bne.n	8007178 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d118      	bne.n	80071ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	f023 0310 	bic.w	r3, r3, #16
 80071cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6979      	ldr	r1, [r7, #20]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	613b      	str	r3, [r7, #16]
   return(result);
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e6      	bne.n	80071b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80071fe:	bf00      	nop
 8007200:	3754      	adds	r7, #84	@ 0x54
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_UARTEx_DisableFifoMode+0x16>
 800721c:	2302      	movs	r3, #2
 800721e:	e027      	b.n	8007270 <HAL_UARTEx_DisableFifoMode+0x66>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2224      	movs	r2, #36	@ 0x24
 800722c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f022 0201 	bic.w	r2, r2, #1
 8007246:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800724e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007290:	2302      	movs	r3, #2
 8007292:	e02d      	b.n	80072f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2224      	movs	r2, #36	@ 0x24
 80072a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f84f 	bl	8007374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800730c:	2302      	movs	r3, #2
 800730e:	e02d      	b.n	800736c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2224      	movs	r2, #36	@ 0x24
 800731c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0201 	bic.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f811 	bl	8007374 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007380:	2b00      	cmp	r3, #0
 8007382:	d108      	bne.n	8007396 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007394:	e031      	b.n	80073fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007396:	2308      	movs	r3, #8
 8007398:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800739a:	2308      	movs	r3, #8
 800739c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	0e5b      	lsrs	r3, r3, #25
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	f003 0307 	and.w	r3, r3, #7
 80073ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	0f5b      	lsrs	r3, r3, #29
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073be:	7bbb      	ldrb	r3, [r7, #14]
 80073c0:	7b3a      	ldrb	r2, [r7, #12]
 80073c2:	4911      	ldr	r1, [pc, #68]	@ (8007408 <UARTEx_SetNbDataToProcess+0x94>)
 80073c4:	5c8a      	ldrb	r2, [r1, r2]
 80073c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80073ca:	7b3a      	ldrb	r2, [r7, #12]
 80073cc:	490f      	ldr	r1, [pc, #60]	@ (800740c <UARTEx_SetNbDataToProcess+0x98>)
 80073ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80073d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	7b7a      	ldrb	r2, [r7, #13]
 80073e0:	4909      	ldr	r1, [pc, #36]	@ (8007408 <UARTEx_SetNbDataToProcess+0x94>)
 80073e2:	5c8a      	ldrb	r2, [r1, r2]
 80073e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80073e8:	7b7a      	ldrb	r2, [r7, #13]
 80073ea:	4908      	ldr	r1, [pc, #32]	@ (800740c <UARTEx_SetNbDataToProcess+0x98>)
 80073ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80073ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80073fa:	bf00      	nop
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	0800c378 	.word	0x0800c378
 800740c:	0800c380 	.word	0x0800c380

08007410 <delay_us>:
#include "temp.h"
#include <stdio.h>
#include <stdbool.h>
// Utility function for microsecond delay
void delay_us(uint32_t us) {
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	uint32_t start_time = __HAL_TIM_GET_COUNTER(&htim2);
 8007418:	4b0a      	ldr	r3, [pc, #40]	@ (8007444 <delay_us+0x34>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741e:	60fb      	str	r3, [r7, #12]
	uint32_t target_time = start_time + us;
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4413      	add	r3, r2
 8007426:	60bb      	str	r3, [r7, #8]

	while (__HAL_TIM_GET_COUNTER(&htim2) < target_time)
 8007428:	bf00      	nop
 800742a:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <delay_us+0x34>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	d8f9      	bhi.n	800742a <delay_us+0x1a>
		;
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	2000035c 	.word	0x2000035c

08007448 <set_gpio_output>:

// Configure GPIO as Output
void set_gpio_output(void) {
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800744e:	1d3b      	adds	r3, r7, #4
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	605a      	str	r2, [r3, #4]
 8007456:	609a      	str	r2, [r3, #8]
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = TMP1826_PIN;
 800745c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007460:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007462:	2311      	movs	r3, #17
 8007464:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007466:	2300      	movs	r3, #0
 8007468:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(TMP1826_PORT, &GPIO_InitStruct);
 800746a:	1d3b      	adds	r3, r7, #4
 800746c:	4619      	mov	r1, r3
 800746e:	4803      	ldr	r0, [pc, #12]	@ (800747c <set_gpio_output+0x34>)
 8007470:	f7fa fd9c 	bl	8001fac <HAL_GPIO_Init>
}
 8007474:	bf00      	nop
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	48000800 	.word	0x48000800

08007480 <set_gpio_input>:

// Configure GPIO as Input
// Function to configure GPIO as Input
void set_gpio_input(void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	605a      	str	r2, [r3, #4]
 800748e:	609a      	str	r2, [r3, #8]
 8007490:	60da      	str	r2, [r3, #12]
 8007492:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = TMP1826_PIN;
 8007494:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007498:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800749a:	2300      	movs	r3, #0
 800749c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(TMP1826_PORT, &GPIO_InitStruct);
 80074a2:	1d3b      	adds	r3, r7, #4
 80074a4:	4619      	mov	r1, r3
 80074a6:	4803      	ldr	r0, [pc, #12]	@ (80074b4 <set_gpio_input+0x34>)
 80074a8:	f7fa fd80 	bl	8001fac <HAL_GPIO_Init>
}
 80074ac:	bf00      	nop
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	48000800 	.word	0x48000800

080074b8 <delayus>:

void delayus(uint32_t us) {
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	volatile uint32_t counter = 8 * us;  // Adjust for your MCU clock speed
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	60fb      	str	r3, [r7, #12]
	while (counter--)
 80074c6:	bf00      	nop
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	1e5a      	subs	r2, r3, #1
 80074cc:	60fa      	str	r2, [r7, #12]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1fa      	bne.n	80074c8 <delayus+0x10>
		;
}
 80074d2:	bf00      	nop
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <TMP1826_Init>:

// Initialize TMP1826
void TMP1826_Init(void) {
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
	set_gpio_output();
 80074e4:	f7ff ffb0 	bl	8007448 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_SET);
 80074e8:	2201      	movs	r2, #1
 80074ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80074ee:	4804      	ldr	r0, [pc, #16]	@ (8007500 <TMP1826_Init+0x20>)
 80074f0:	f7fa fee4 	bl	80022bc <HAL_GPIO_WritePin>
	printf("TMP1826 Initialized on PC10\n");
 80074f4:	4803      	ldr	r0, [pc, #12]	@ (8007504 <TMP1826_Init+0x24>)
 80074f6:	f001 fdb3 	bl	8009060 <puts>
}
 80074fa:	bf00      	nop
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	48000800 	.word	0x48000800
 8007504:	0800b46c 	.word	0x0800b46c

08007508 <TMP1826_Reset>:

// Send a reset signal and check for presence response
uint8_t TMP1826_Reset(void) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
	//printf("TMP1826 Reset Start\n");

	set_gpio_output();
 800750e:	f7ff ff9b 	bl	8007448 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_RESET);
 8007512:	2200      	movs	r2, #0
 8007514:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007518:	4813      	ldr	r0, [pc, #76]	@ (8007568 <TMP1826_Reset+0x60>)
 800751a:	f7fa fecf 	bl	80022bc <HAL_GPIO_WritePin>
//	printf("TMP1826 Pulled Low for Reset\n");

	delayus(480);  // Hold LOW for 480µs
 800751e:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8007522:	f7ff ffc9 	bl	80074b8 <delayus>

	set_gpio_input();
 8007526:	f7ff ffab 	bl	8007480 <set_gpio_input>
	delayus(70);  // Short delay before checking presence
 800752a:	2046      	movs	r0, #70	@ 0x46
 800752c:	f7ff ffc4 	bl	80074b8 <delayus>

	uint8_t presence = HAL_GPIO_ReadPin(TMP1826_PORT, TMP1826_PIN);
 8007530:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007534:	480c      	ldr	r0, [pc, #48]	@ (8007568 <TMP1826_Reset+0x60>)
 8007536:	f7fa fea9 	bl	800228c <HAL_GPIO_ReadPin>
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
//	printf("PC10 Read After Presence Pulse Wait: %d\n", presence);

	delayus(410);  // Complete reset window
 800753e:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8007542:	f7ff ffb9 	bl	80074b8 <delayus>

	if (presence == 0) {
 8007546:	79fb      	ldrb	r3, [r7, #7]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <TMP1826_Reset+0x4a>
	//	printf("TMP1826 Detected (Presence Pulse Received) ✅\n");
	} else {
		printf("TMP1826 NOT Detected (Timing Issue?) ❌\n");
 800754c:	4807      	ldr	r0, [pc, #28]	@ (800756c <TMP1826_Reset+0x64>)
 800754e:	f001 fd87 	bl	8009060 <puts>
	}

	return (presence == 0) ? 1 : 0;
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2301      	moveq	r3, #1
 800755a:	2300      	movne	r3, #0
 800755c:	b2db      	uxtb	r3, r3
}
 800755e:	4618      	mov	r0, r3
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	48000800 	.word	0x48000800
 800756c:	0800b488 	.word	0x0800b488

08007570 <TMP1826_WriteBit>:

void TMP1826_WriteBit(uint8_t bit) {
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
	set_gpio_output();
 800757a:	f7ff ff65 	bl	8007448 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_RESET);
 800757e:	2200      	movs	r2, #0
 8007580:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007584:	480d      	ldr	r0, [pc, #52]	@ (80075bc <TMP1826_WriteBit+0x4c>)
 8007586:	f7fa fe99 	bl	80022bc <HAL_GPIO_WritePin>

	if (bit) {
 800758a:	79fb      	ldrb	r3, [r7, #7]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d008      	beq.n	80075a2 <TMP1826_WriteBit+0x32>
		delayus(6);  // Write '1' - Short low time
 8007590:	2006      	movs	r0, #6
 8007592:	f7ff ff91 	bl	80074b8 <delayus>
		set_gpio_input();  // Release bus early
 8007596:	f7ff ff73 	bl	8007480 <set_gpio_input>
		delayus(64);
 800759a:	2040      	movs	r0, #64	@ 0x40
 800759c:	f7ff ff8c 	bl	80074b8 <delayus>
		set_gpio_input();
		delayus(10);
	}

	//printf("Write Bit: %d\n", bit);
}
 80075a0:	e007      	b.n	80075b2 <TMP1826_WriteBit+0x42>
		delayus(60);  // Write '0' - Long low time
 80075a2:	203c      	movs	r0, #60	@ 0x3c
 80075a4:	f7ff ff88 	bl	80074b8 <delayus>
		set_gpio_input();
 80075a8:	f7ff ff6a 	bl	8007480 <set_gpio_input>
		delayus(10);
 80075ac:	200a      	movs	r0, #10
 80075ae:	f7ff ff83 	bl	80074b8 <delayus>
}
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	48000800 	.word	0x48000800

080075c0 <TMP1826_ReadBit>:

// Read a single bit from the bus
uint8_t TMP1826_ReadBit(void) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
	uint8_t bit;

	set_gpio_output();
 80075c6:	f7ff ff3f 	bl	8007448 <set_gpio_output>
	HAL_GPIO_WritePin(TMP1826_PORT, TMP1826_PIN, GPIO_PIN_RESET);
 80075ca:	2200      	movs	r2, #0
 80075cc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075d0:	480c      	ldr	r0, [pc, #48]	@ (8007604 <TMP1826_ReadBit+0x44>)
 80075d2:	f7fa fe73 	bl	80022bc <HAL_GPIO_WritePin>
	delay_us(2);  // tRL timing: Start read slot
 80075d6:	2002      	movs	r0, #2
 80075d8:	f7ff ff1a 	bl	8007410 <delay_us>

	set_gpio_input(); // Release the bus
 80075dc:	f7ff ff50 	bl	8007480 <set_gpio_input>
	delay_us(10);  // Allow sensor to drive the bus (tRDV = 15us max)
 80075e0:	200a      	movs	r0, #10
 80075e2:	f7ff ff15 	bl	8007410 <delay_us>

	bit = HAL_GPIO_ReadPin(TMP1826_PORT, TMP1826_PIN);
 80075e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075ea:	4806      	ldr	r0, [pc, #24]	@ (8007604 <TMP1826_ReadBit+0x44>)
 80075ec:	f7fa fe4e 	bl	800228c <HAL_GPIO_ReadPin>
 80075f0:	4603      	mov	r3, r0
 80075f2:	71fb      	strb	r3, [r7, #7]
	delay_us(50);  // tSLOT timing: Ensure the full bit time is observed
 80075f4:	2032      	movs	r0, #50	@ 0x32
 80075f6:	f7ff ff0b 	bl	8007410 <delay_us>

	return bit;
 80075fa:	79fb      	ldrb	r3, [r7, #7]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	48000800 	.word	0x48000800

08007608 <TMP1826_WriteByte>:

// Write a byte (8 bits)
void TMP1826_WriteByte(uint8_t byte) {
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	71fb      	strb	r3, [r7, #7]
	//printf("Writing Byte: 0x%02X\n", byte);

	for (uint8_t i = 0; i < 8; i++) {
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
 8007616:	e00c      	b.n	8007632 <TMP1826_WriteByte+0x2a>
		TMP1826_WriteBit(byte & 0x01);
 8007618:	79fb      	ldrb	r3, [r7, #7]
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	b2db      	uxtb	r3, r3
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff ffa5 	bl	8007570 <TMP1826_WriteBit>
		byte >>= 1;
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	085b      	lsrs	r3, r3, #1
 800762a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	3301      	adds	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b07      	cmp	r3, #7
 8007636:	d9ef      	bls.n	8007618 <TMP1826_WriteByte+0x10>
	}
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <TMP1826_ReadByte>:

// Read a byte (8 bits)
uint8_t TMP1826_ReadByte(void) {
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
	uint8_t byte = 0;
 8007648:	2300      	movs	r3, #0
 800764a:	71fb      	strb	r3, [r7, #7]

	for (uint8_t i = 0; i < 8; i++) {
 800764c:	2300      	movs	r3, #0
 800764e:	71bb      	strb	r3, [r7, #6]
 8007650:	e00e      	b.n	8007670 <TMP1826_ReadByte+0x2e>
		byte >>= 1;  // Shift previous bits right
 8007652:	79fb      	ldrb	r3, [r7, #7]
 8007654:	085b      	lsrs	r3, r3, #1
 8007656:	71fb      	strb	r3, [r7, #7]
		if (TMP1826_ReadBit())
 8007658:	f7ff ffb2 	bl	80075c0 <TMP1826_ReadBit>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <TMP1826_ReadByte+0x28>
			byte |= 0x80;  // Set the MSB if the bit read was 1
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007668:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 8; i++) {
 800766a:	79bb      	ldrb	r3, [r7, #6]
 800766c:	3301      	adds	r3, #1
 800766e:	71bb      	strb	r3, [r7, #6]
 8007670:	79bb      	ldrb	r3, [r7, #6]
 8007672:	2b07      	cmp	r3, #7
 8007674:	d9ed      	bls.n	8007652 <TMP1826_ReadByte+0x10>
	}

//	printf("Read Byte: 0x%02X\n", byte);
	return byte;
 8007676:	79fb      	ldrb	r3, [r7, #7]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <TMP1826_ReadTemperature>:





float TMP1826_ReadTemperature(void) {
 8007680:	b590      	push	{r4, r7, lr}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 //   printf("🌡️ Starting TMP1826_ReadTemperature()\n");

    if (!TMP1826_Reset()) {
 8007686:	f7ff ff3f 	bl	8007508 <TMP1826_Reset>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d104      	bne.n	800769a <TMP1826_ReadTemperature+0x1a>
        printf("❌ TMP1826 not detected!\n");
 8007690:	485d      	ldr	r0, [pc, #372]	@ (8007808 <TMP1826_ReadTemperature+0x188>)
 8007692:	f001 fce5 	bl	8009060 <puts>
        return -999.0f;
 8007696:	4b5d      	ldr	r3, [pc, #372]	@ (800780c <TMP1826_ReadTemperature+0x18c>)
 8007698:	e0af      	b.n	80077fa <TMP1826_ReadTemperature+0x17a>
    }

    TMP1826_WriteByte(0xCC);  // Skip ROM
 800769a:	20cc      	movs	r0, #204	@ 0xcc
 800769c:	f7ff ffb4 	bl	8007608 <TMP1826_WriteByte>
    TMP1826_WriteByte(0x44);  // Start Temperature Conversion
 80076a0:	2044      	movs	r0, #68	@ 0x44
 80076a2:	f7ff ffb1 	bl	8007608 <TMP1826_WriteByte>
 //   printf("⏳ TMP1826 Conversion Command Sent\n");

    // ✅ **Improved: Increase polling delay & add timeout mechanism**
    set_gpio_input();
 80076a6:	f7ff feeb 	bl	8007480 <set_gpio_input>
    int timeout = 1000;  // Avoid infinite loop
 80076aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80076ae:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(TMP1826_PORT, TMP1826_PIN) == GPIO_PIN_RESET && timeout > 0) {
 80076b0:	e005      	b.n	80076be <TMP1826_ReadTemperature+0x3e>
        delay_us(200);  // Increased from 100us → 200us
 80076b2:	20c8      	movs	r0, #200	@ 0xc8
 80076b4:	f7ff feac 	bl	8007410 <delay_us>
        timeout--;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	617b      	str	r3, [r7, #20]
    while (HAL_GPIO_ReadPin(TMP1826_PORT, TMP1826_PIN) == GPIO_PIN_RESET && timeout > 0) {
 80076be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80076c2:	4853      	ldr	r0, [pc, #332]	@ (8007810 <TMP1826_ReadTemperature+0x190>)
 80076c4:	f7fa fde2 	bl	800228c <HAL_GPIO_ReadPin>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <TMP1826_ReadTemperature+0x54>
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	dcee      	bgt.n	80076b2 <TMP1826_ReadTemperature+0x32>
    }

    if (timeout == 0) {
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d104      	bne.n	80076e4 <TMP1826_ReadTemperature+0x64>
        printf("❌ TMP1826 Conversion Timeout!\n");
 80076da:	484e      	ldr	r0, [pc, #312]	@ (8007814 <TMP1826_ReadTemperature+0x194>)
 80076dc:	f001 fcc0 	bl	8009060 <puts>
        return -999.0f;
 80076e0:	4b4a      	ldr	r3, [pc, #296]	@ (800780c <TMP1826_ReadTemperature+0x18c>)
 80076e2:	e08a      	b.n	80077fa <TMP1826_ReadTemperature+0x17a>
    }

  //  printf("✅ TMP1826 Conversion Complete\n");

    if (!TMP1826_Reset()) {
 80076e4:	f7ff ff10 	bl	8007508 <TMP1826_Reset>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d104      	bne.n	80076f8 <TMP1826_ReadTemperature+0x78>
        printf("❌ TMP1826 not responding after conversion!\n");
 80076ee:	484a      	ldr	r0, [pc, #296]	@ (8007818 <TMP1826_ReadTemperature+0x198>)
 80076f0:	f001 fcb6 	bl	8009060 <puts>
        return -999.0f;
 80076f4:	4b45      	ldr	r3, [pc, #276]	@ (800780c <TMP1826_ReadTemperature+0x18c>)
 80076f6:	e080      	b.n	80077fa <TMP1826_ReadTemperature+0x17a>
    }

    TMP1826_WriteByte(0xCC);
 80076f8:	20cc      	movs	r0, #204	@ 0xcc
 80076fa:	f7ff ff85 	bl	8007608 <TMP1826_WriteByte>
    TMP1826_WriteByte(0xBE);  // Read Scratchpad
 80076fe:	20be      	movs	r0, #190	@ 0xbe
 8007700:	f7ff ff82 	bl	8007608 <TMP1826_WriteByte>
  //  printf("📖 TMP1826 Read Scratchpad Command Sent\n");

    // ✅ **Increase delay before reading Scratchpad**
    HAL_Delay(15);  // Increased from 5ms → 15ms
 8007704:	200f      	movs	r0, #15
 8007706:	f7fa fab1 	bl	8001c6c <HAL_Delay>

    uint8_t temp_LSB = TMP1826_ReadByte();
 800770a:	f7ff ff9a 	bl	8007642 <TMP1826_ReadByte>
 800770e:	4603      	mov	r3, r0
 8007710:	74fb      	strb	r3, [r7, #19]

    // ✅ **Extra delay before reading MSB**
    HAL_Delay(2);
 8007712:	2002      	movs	r0, #2
 8007714:	f7fa faaa 	bl	8001c6c <HAL_Delay>

    uint8_t temp_MSB = TMP1826_ReadByte();
 8007718:	f7ff ff93 	bl	8007642 <TMP1826_ReadByte>
 800771c:	4603      	mov	r3, r0
 800771e:	74bb      	strb	r3, [r7, #18]





    HAL_Delay(2);
 8007720:	2002      	movs	r0, #2
 8007722:	f7fa faa3 	bl	8001c6c <HAL_Delay>
    uint8_t config1 = TMP1826_ReadByte();  // ✅ Read Configuration Register
 8007726:	f7ff ff8c 	bl	8007642 <TMP1826_ReadByte>
 800772a:	4603      	mov	r3, r0
 800772c:	70fb      	strb	r3, [r7, #3]

    // Print Config Register
  //  printf("Config-1 Register: 0x%02X\n", config1);

    // Check if in 16-bit mode or 12-bit mode
    bool is_16bit_mode = (config1 & (1 << 2)) != 0;
 800772e:	78fb      	ldrb	r3, [r7, #3]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	bf14      	ite	ne
 8007738:	2301      	movne	r3, #1
 800773a:	2300      	moveq	r3, #0
 800773c:	70bb      	strb	r3, [r7, #2]


 //   printf("📖 TMP1826 Data Read: LSB = 0x%02X, MSB = 0x%02X\n", temp_LSB, temp_MSB);

    // ✅ **Improve retry mechanism with longer delays**
    int attempt = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
    while ((temp_LSB == 0xFF && temp_MSB == 0xFF) && attempt < 3) {
 8007742:	e013      	b.n	800776c <TMP1826_ReadTemperature+0xec>
        printf("⚠️ TMP1826 Read Error (0xFFFF), Retrying %d...\n", attempt + 1);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	4619      	mov	r1, r3
 800774a:	4834      	ldr	r0, [pc, #208]	@ (800781c <TMP1826_ReadTemperature+0x19c>)
 800774c:	f001 fc20 	bl	8008f90 <iprintf>
        HAL_Delay(50);  // Increased retry delay from 10ms → 50ms
 8007750:	2032      	movs	r0, #50	@ 0x32
 8007752:	f7fa fa8b 	bl	8001c6c <HAL_Delay>
        temp_LSB = TMP1826_ReadByte();
 8007756:	f7ff ff74 	bl	8007642 <TMP1826_ReadByte>
 800775a:	4603      	mov	r3, r0
 800775c:	74fb      	strb	r3, [r7, #19]
        temp_MSB = TMP1826_ReadByte();
 800775e:	f7ff ff70 	bl	8007642 <TMP1826_ReadByte>
 8007762:	4603      	mov	r3, r0
 8007764:	74bb      	strb	r3, [r7, #18]
        attempt++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
    while ((temp_LSB == 0xFF && temp_MSB == 0xFF) && attempt < 3) {
 800776c:	7cfb      	ldrb	r3, [r7, #19]
 800776e:	2bff      	cmp	r3, #255	@ 0xff
 8007770:	d105      	bne.n	800777e <TMP1826_ReadTemperature+0xfe>
 8007772:	7cbb      	ldrb	r3, [r7, #18]
 8007774:	2bff      	cmp	r3, #255	@ 0xff
 8007776:	d102      	bne.n	800777e <TMP1826_ReadTemperature+0xfe>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b02      	cmp	r3, #2
 800777c:	dde2      	ble.n	8007744 <TMP1826_ReadTemperature+0xc4>
    }

    if (temp_LSB == 0xFF && temp_MSB == 0xFF) {
 800777e:	7cfb      	ldrb	r3, [r7, #19]
 8007780:	2bff      	cmp	r3, #255	@ 0xff
 8007782:	d108      	bne.n	8007796 <TMP1826_ReadTemperature+0x116>
 8007784:	7cbb      	ldrb	r3, [r7, #18]
 8007786:	2bff      	cmp	r3, #255	@ 0xff
 8007788:	d105      	bne.n	8007796 <TMP1826_ReadTemperature+0x116>
        printf("❌ TMP1826 returned invalid data (0xFFFF) after %d attempts\n", attempt);
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	4824      	ldr	r0, [pc, #144]	@ (8007820 <TMP1826_ReadTemperature+0x1a0>)
 800778e:	f001 fbff 	bl	8008f90 <iprintf>
        return -999.0f;
 8007792:	4b1e      	ldr	r3, [pc, #120]	@ (800780c <TMP1826_ReadTemperature+0x18c>)
 8007794:	e031      	b.n	80077fa <TMP1826_ReadTemperature+0x17a>
    }

    int16_t temp_raw = (temp_MSB << 8) | temp_LSB;
 8007796:	7cbb      	ldrb	r3, [r7, #18]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	b21a      	sxth	r2, r3
 800779c:	7cfb      	ldrb	r3, [r7, #19]
 800779e:	b21b      	sxth	r3, r3
 80077a0:	4313      	orrs	r3, r2
 80077a2:	817b      	strh	r3, [r7, #10]

    // ✅ **Handle negative temperatures correctly (Two’s Complement)**
    if (temp_raw & 0x8000) {
 80077a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077a8:	2b00      	cmp	r3, #0
        temp_raw = -((~temp_raw + 1) & 0xFFFF);
    }

//    float temp_C = temp_raw / 16.0f;
    float temp_C;
    if (is_16bit_mode) {
 80077aa:	78bb      	ldrb	r3, [r7, #2]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00c      	beq.n	80077ca <TMP1826_ReadTemperature+0x14a>
        temp_C = temp_raw / 128.0f;  // ✅ High-Precision Mode
 80077b0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077bc:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8007824 <TMP1826_ReadTemperature+0x1a4>
 80077c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077c4:	edc7 7a01 	vstr	s15, [r7, #4]
 80077c8:	e00b      	b.n	80077e2 <TMP1826_ReadTemperature+0x162>
    //    printf("✅ Using High-Precision Mode (16-bit): %.2f°C\n", temp_C);
    } else {
        temp_C = temp_raw / 16.0f;   // ✅ Legacy Mode (12-bit)
 80077ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80077ce:	ee07 3a90 	vmov	s15, r3
 80077d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077d6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80077da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077de:	edc7 7a01 	vstr	s15, [r7, #4]
      //  printf("✅ Using Legacy Mode (12-bit): %.2f°C\n", temp_C);
    }
    printf("✅ Temperature Raw: 0x%04X, Converted: %.2f°C\n", temp_raw, temp_C);
 80077e2:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7f8 fe86 	bl	80004f8 <__aeabi_f2d>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4621      	mov	r1, r4
 80077f2:	480d      	ldr	r0, [pc, #52]	@ (8007828 <TMP1826_ReadTemperature+0x1a8>)
 80077f4:	f001 fbcc 	bl	8008f90 <iprintf>

    return temp_C;
 80077f8:	687b      	ldr	r3, [r7, #4]
}
 80077fa:	ee07 3a90 	vmov	s15, r3
 80077fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd90      	pop	{r4, r7, pc}
 8007808:	0800b4b4 	.word	0x0800b4b4
 800780c:	c479c000 	.word	0xc479c000
 8007810:	48000800 	.word	0x48000800
 8007814:	0800b4d0 	.word	0x0800b4d0
 8007818:	0800b4f0 	.word	0x0800b4f0
 800781c:	0800b520 	.word	0x0800b520
 8007820:	0800b554 	.word	0x0800b554
 8007824:	43000000 	.word	0x43000000
 8007828:	0800b594 	.word	0x0800b594

0800782c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8007830:	4907      	ldr	r1, [pc, #28]	@ (8007850 <MX_FATFS_Init+0x24>)
 8007832:	4808      	ldr	r0, [pc, #32]	@ (8007854 <MX_FATFS_Init+0x28>)
 8007834:	f000 fd8c 	bl	8008350 <FATFS_LinkDriver>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d002      	beq.n	8007844 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	e003      	b.n	800784c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8007844:	4b04      	ldr	r3, [pc, #16]	@ (8007858 <MX_FATFS_Init+0x2c>)
 8007846:	2201      	movs	r2, #1
 8007848:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800784a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800784c:	4618      	mov	r0, r3
 800784e:	bd80      	pop	{r7, pc}
 8007850:	200003b0 	.word	0x200003b0
 8007854:	20000014 	.word	0x20000014
 8007858:	200003b4 	.word	0x200003b4

0800785c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	4603      	mov	r3, r0
 8007864:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
	return USER_SPI_initialize(pdrv);
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 f9d1 	bl	8007c10 <USER_SPI_initialize>
 800786e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007870:	4618      	mov	r0, r3
 8007872:	3708      	adds	r7, #8
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return USER_SPI_status(pdrv);
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 faaf 	bl	8007de8 <USER_SPI_status>
 800788a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800788c:	4618      	mov	r0, r3
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80078a4:	7bf8      	ldrb	r0, [r7, #15]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	68b9      	ldr	r1, [r7, #8]
 80078ac:	f000 fab2 	bl	8007e14 <USER_SPI_read>
 80078b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b084      	sub	sp, #16
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4603      	mov	r3, r0
 80078c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80078ca:	7bf8      	ldrb	r0, [r7, #15]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	f000 fb05 	bl	8007ee0 <USER_SPI_write>
 80078d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	603a      	str	r2, [r7, #0]
 80078ea:	71fb      	strb	r3, [r7, #7]
 80078ec:	460b      	mov	r3, r1
 80078ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80078f0:	79b9      	ldrb	r1, [r7, #6]
 80078f2:	79fb      	ldrb	r3, [r7, #7]
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fb6e 	bl	8007fd8 <USER_SPI_ioctl>
 80078fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8007910:	f7fa f994 	bl	8001c3c <HAL_GetTick>
 8007914:	4603      	mov	r3, r0
 8007916:	4a04      	ldr	r2, [pc, #16]	@ (8007928 <SPI_Timer_On+0x20>)
 8007918:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800791a:	4a04      	ldr	r2, [pc, #16]	@ (800792c <SPI_Timer_On+0x24>)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6013      	str	r3, [r2, #0]
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200003b8 	.word	0x200003b8
 800792c:	200003bc 	.word	0x200003bc

08007930 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8007934:	f7fa f982 	bl	8001c3c <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <SPI_Timer_Status+0x24>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	1ad2      	subs	r2, r2, r3
 8007940:	4b05      	ldr	r3, [pc, #20]	@ (8007958 <SPI_Timer_Status+0x28>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	bf34      	ite	cc
 8007948:	2301      	movcc	r3, #1
 800794a:	2300      	movcs	r3, #0
 800794c:	b2db      	uxtb	r3, r3
}
 800794e:	4618      	mov	r0, r3
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	200003b8 	.word	0x200003b8
 8007958:	200003bc 	.word	0x200003bc

0800795c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af02      	add	r7, sp, #8
 8007962:	4603      	mov	r3, r0
 8007964:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007966:	f107 020f 	add.w	r2, r7, #15
 800796a:	1df9      	adds	r1, r7, #7
 800796c:	2332      	movs	r3, #50	@ 0x32
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	2301      	movs	r3, #1
 8007972:	4804      	ldr	r0, [pc, #16]	@ (8007984 <xchg_spi+0x28>)
 8007974:	f7fe f938 	bl	8005be8 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007978:	7bfb      	ldrb	r3, [r7, #15]
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200002f8 	.word	0x200002f8

08007988 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	e00a      	b.n	80079ae <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	18d4      	adds	r4, r2, r3
 800799e:	20ff      	movs	r0, #255	@ 0xff
 80079a0:	f7ff ffdc 	bl	800795c <xchg_spi>
 80079a4:	4603      	mov	r3, r0
 80079a6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3301      	adds	r3, #1
 80079ac:	60fb      	str	r3, [r7, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	429a      	cmp	r2, r3
 80079b4:	d3f0      	bcc.n	8007998 <rcvr_spi_multi+0x10>
	}
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd90      	pop	{r4, r7, pc}

080079c0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	f04f 33ff 	mov.w	r3, #4294967295
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	4803      	ldr	r0, [pc, #12]	@ (80079e4 <xmit_spi_multi+0x24>)
 80079d6:	f7fd ff92 	bl	80058fe <HAL_SPI_Transmit>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200002f8 	.word	0x200002f8

080079e8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80079f0:	f7fa f924 	bl	8001c3c <HAL_GetTick>
 80079f4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80079fa:	20ff      	movs	r0, #255	@ 0xff
 80079fc:	f7ff ffae 	bl	800795c <xchg_spi>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2bff      	cmp	r3, #255	@ 0xff
 8007a08:	d007      	beq.n	8007a1a <wait_ready+0x32>
 8007a0a:	f7fa f917 	bl	8001c3c <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d8ef      	bhi.n	80079fa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2bff      	cmp	r3, #255	@ 0xff
 8007a1e:	bf0c      	ite	eq
 8007a20:	2301      	moveq	r3, #1
 8007a22:	2300      	movne	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8007a32:	2201      	movs	r2, #1
 8007a34:	2110      	movs	r1, #16
 8007a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a3a:	f7fa fc3f 	bl	80022bc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007a3e:	20ff      	movs	r0, #255	@ 0xff
 8007a40:	f7ff ff8c 	bl	800795c <xchg_spi>

}
 8007a44:	bf00      	nop
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	2110      	movs	r1, #16
 8007a50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a54:	f7fa fc32 	bl	80022bc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007a58:	20ff      	movs	r0, #255	@ 0xff
 8007a5a:	f7ff ff7f 	bl	800795c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8007a5e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007a62:	f7ff ffc1 	bl	80079e8 <wait_ready>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <spiselect+0x28>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e002      	b.n	8007a76 <spiselect+0x2e>

	despiselect();
 8007a70:	f7ff ffdd 	bl	8007a2e <despiselect>
	return 0;	/* Timeout */
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b084      	sub	sp, #16
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007a84:	20c8      	movs	r0, #200	@ 0xc8
 8007a86:	f7ff ff3f 	bl	8007908 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007a8a:	20ff      	movs	r0, #255	@ 0xff
 8007a8c:	f7ff ff66 	bl	800795c <xchg_spi>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	2bff      	cmp	r3, #255	@ 0xff
 8007a98:	d104      	bne.n	8007aa4 <rcvr_datablock+0x2a>
 8007a9a:	f7ff ff49 	bl	8007930 <SPI_Timer_Status>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f2      	bne.n	8007a8a <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	2bfe      	cmp	r3, #254	@ 0xfe
 8007aa8:	d001      	beq.n	8007aae <rcvr_datablock+0x34>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e00a      	b.n	8007ac4 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff ff69 	bl	8007988 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007ab6:	20ff      	movs	r0, #255	@ 0xff
 8007ab8:	f7ff ff50 	bl	800795c <xchg_spi>
 8007abc:	20ff      	movs	r0, #255	@ 0xff
 8007abe:	f7ff ff4d 	bl	800795c <xchg_spi>

	return 1;						/* Function succeeded */
 8007ac2:	2301      	movs	r3, #1
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007ad8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007adc:	f7ff ff84 	bl	80079e8 <wait_ready>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d101      	bne.n	8007aea <xmit_datablock+0x1e>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e01e      	b.n	8007b28 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff ff35 	bl	800795c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8007af2:	78fb      	ldrb	r3, [r7, #3]
 8007af4:	2bfd      	cmp	r3, #253	@ 0xfd
 8007af6:	d016      	beq.n	8007b26 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007af8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f7ff ff5f 	bl	80079c0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8007b02:	20ff      	movs	r0, #255	@ 0xff
 8007b04:	f7ff ff2a 	bl	800795c <xchg_spi>
 8007b08:	20ff      	movs	r0, #255	@ 0xff
 8007b0a:	f7ff ff27 	bl	800795c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007b0e:	20ff      	movs	r0, #255	@ 0xff
 8007b10:	f7ff ff24 	bl	800795c <xchg_spi>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b05      	cmp	r3, #5
 8007b20:	d001      	beq.n	8007b26 <xmit_datablock+0x5a>
 8007b22:	2300      	movs	r3, #0
 8007b24:	e000      	b.n	8007b28 <xmit_datablock+0x5c>
	}
	return 1;
 8007b26:	2301      	movs	r3, #1
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	4603      	mov	r3, r0
 8007b38:	6039      	str	r1, [r7, #0]
 8007b3a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da0e      	bge.n	8007b62 <send_cmd+0x32>
		cmd &= 0x7F;
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b4a:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	2037      	movs	r0, #55	@ 0x37
 8007b50:	f7ff ffee 	bl	8007b30 <send_cmd>
 8007b54:	4603      	mov	r3, r0
 8007b56:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d901      	bls.n	8007b62 <send_cmd+0x32>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	e051      	b.n	8007c06 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b0c      	cmp	r3, #12
 8007b66:	d008      	beq.n	8007b7a <send_cmd+0x4a>
		despiselect();
 8007b68:	f7ff ff61 	bl	8007a2e <despiselect>
		if (!spiselect()) return 0xFF;
 8007b6c:	f7ff ff6c 	bl	8007a48 <spiselect>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <send_cmd+0x4a>
 8007b76:	23ff      	movs	r3, #255	@ 0xff
 8007b78:	e045      	b.n	8007c06 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff feea 	bl	800795c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	0e1b      	lsrs	r3, r3, #24
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7ff fee4 	bl	800795c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	0c1b      	lsrs	r3, r3, #16
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fede 	bl	800795c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	0a1b      	lsrs	r3, r3, #8
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fed8 	bl	800795c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fed3 	bl	800795c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d101      	bne.n	8007bc4 <send_cmd+0x94>
 8007bc0:	2395      	movs	r3, #149	@ 0x95
 8007bc2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d101      	bne.n	8007bce <send_cmd+0x9e>
 8007bca:	2387      	movs	r3, #135	@ 0x87
 8007bcc:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fec3 	bl	800795c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d102      	bne.n	8007be2 <send_cmd+0xb2>
 8007bdc:	20ff      	movs	r0, #255	@ 0xff
 8007bde:	f7ff febd 	bl	800795c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8007be2:	230a      	movs	r3, #10
 8007be4:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007be6:	20ff      	movs	r0, #255	@ 0xff
 8007be8:	f7ff feb8 	bl	800795c <xchg_spi>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8007bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	da05      	bge.n	8007c04 <send_cmd+0xd4>
 8007bf8:	7bfb      	ldrb	r3, [r7, #15]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	73fb      	strb	r3, [r7, #15]
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d1f0      	bne.n	8007be6 <send_cmd+0xb6>

	return res;							/* Return received response */
 8007c04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
	...

08007c10 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <USER_SPI_initialize+0x14>
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0d6      	b.n	8007dd2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007c24:	4b6d      	ldr	r3, [pc, #436]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	f003 0302 	and.w	r3, r3, #2
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <USER_SPI_initialize+0x2a>
 8007c32:	4b6a      	ldr	r3, [pc, #424]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	e0cb      	b.n	8007dd2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8007c3a:	4b69      	ldr	r3, [pc, #420]	@ (8007de0 <USER_SPI_initialize+0x1d0>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007c44:	4b66      	ldr	r3, [pc, #408]	@ (8007de0 <USER_SPI_initialize+0x1d0>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007c4c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007c4e:	230a      	movs	r3, #10
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e005      	b.n	8007c60 <USER_SPI_initialize+0x50>
 8007c54:	20ff      	movs	r0, #255	@ 0xff
 8007c56:	f7ff fe81 	bl	800795c <xchg_spi>
 8007c5a:	7bfb      	ldrb	r3, [r7, #15]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	73fb      	strb	r3, [r7, #15]
 8007c60:	7bfb      	ldrb	r3, [r7, #15]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1f6      	bne.n	8007c54 <USER_SPI_initialize+0x44>

	ty = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f7ff ff5f 	bl	8007b30 <send_cmd>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	f040 808b 	bne.w	8007d90 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007c7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c7e:	f7ff fe43 	bl	8007908 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007c82:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007c86:	2008      	movs	r0, #8
 8007c88:	f7ff ff52 	bl	8007b30 <send_cmd>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d151      	bne.n	8007d36 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]
 8007c96:	e00d      	b.n	8007cb4 <USER_SPI_initialize+0xa4>
 8007c98:	7bfc      	ldrb	r4, [r7, #15]
 8007c9a:	20ff      	movs	r0, #255	@ 0xff
 8007c9c:	f7ff fe5e 	bl	800795c <xchg_spi>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f104 0310 	add.w	r3, r4, #16
 8007ca8:	443b      	add	r3, r7
 8007caa:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007cae:	7bfb      	ldrb	r3, [r7, #15]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d9ee      	bls.n	8007c98 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007cba:	7abb      	ldrb	r3, [r7, #10]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d167      	bne.n	8007d90 <USER_SPI_initialize+0x180>
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	2baa      	cmp	r3, #170	@ 0xaa
 8007cc4:	d164      	bne.n	8007d90 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007cc6:	bf00      	nop
 8007cc8:	f7ff fe32 	bl	8007930 <SPI_Timer_Status>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d007      	beq.n	8007ce2 <USER_SPI_initialize+0xd2>
 8007cd2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007cd6:	20a9      	movs	r0, #169	@ 0xa9
 8007cd8:	f7ff ff2a 	bl	8007b30 <send_cmd>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f2      	bne.n	8007cc8 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8007ce2:	f7ff fe25 	bl	8007930 <SPI_Timer_Status>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d051      	beq.n	8007d90 <USER_SPI_initialize+0x180>
 8007cec:	2100      	movs	r1, #0
 8007cee:	203a      	movs	r0, #58	@ 0x3a
 8007cf0:	f7ff ff1e 	bl	8007b30 <send_cmd>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d14a      	bne.n	8007d90 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]
 8007cfe:	e00d      	b.n	8007d1c <USER_SPI_initialize+0x10c>
 8007d00:	7bfc      	ldrb	r4, [r7, #15]
 8007d02:	20ff      	movs	r0, #255	@ 0xff
 8007d04:	f7ff fe2a 	bl	800795c <xchg_spi>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f104 0310 	add.w	r3, r4, #16
 8007d10:	443b      	add	r3, r7
 8007d12:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	3301      	adds	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d9ee      	bls.n	8007d00 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007d22:	7a3b      	ldrb	r3, [r7, #8]
 8007d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <USER_SPI_initialize+0x120>
 8007d2c:	230c      	movs	r3, #12
 8007d2e:	e000      	b.n	8007d32 <USER_SPI_initialize+0x122>
 8007d30:	2304      	movs	r3, #4
 8007d32:	737b      	strb	r3, [r7, #13]
 8007d34:	e02c      	b.n	8007d90 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007d36:	2100      	movs	r1, #0
 8007d38:	20a9      	movs	r0, #169	@ 0xa9
 8007d3a:	f7ff fef9 	bl	8007b30 <send_cmd>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d804      	bhi.n	8007d4e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007d44:	2302      	movs	r3, #2
 8007d46:	737b      	strb	r3, [r7, #13]
 8007d48:	23a9      	movs	r3, #169	@ 0xa9
 8007d4a:	73bb      	strb	r3, [r7, #14]
 8007d4c:	e003      	b.n	8007d56 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007d4e:	2301      	movs	r3, #1
 8007d50:	737b      	strb	r3, [r7, #13]
 8007d52:	2301      	movs	r3, #1
 8007d54:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007d56:	bf00      	nop
 8007d58:	f7ff fdea 	bl	8007930 <SPI_Timer_Status>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d007      	beq.n	8007d72 <USER_SPI_initialize+0x162>
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	2100      	movs	r1, #0
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fee2 	bl	8007b30 <send_cmd>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f2      	bne.n	8007d58 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007d72:	f7ff fddd 	bl	8007930 <SPI_Timer_Status>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d007      	beq.n	8007d8c <USER_SPI_initialize+0x17c>
 8007d7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007d80:	2010      	movs	r0, #16
 8007d82:	f7ff fed5 	bl	8007b30 <send_cmd>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d001      	beq.n	8007d90 <USER_SPI_initialize+0x180>
				ty = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007d90:	4a14      	ldr	r2, [pc, #80]	@ (8007de4 <USER_SPI_initialize+0x1d4>)
 8007d92:	7b7b      	ldrb	r3, [r7, #13]
 8007d94:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007d96:	f7ff fe4a 	bl	8007a2e <despiselect>

	if (ty) {			/* OK */
 8007d9a:	7b7b      	ldrb	r3, [r7, #13]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d012      	beq.n	8007dc6 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007da0:	4b0f      	ldr	r3, [pc, #60]	@ (8007de0 <USER_SPI_initialize+0x1d0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007daa:	4b0d      	ldr	r3, [pc, #52]	@ (8007de0 <USER_SPI_initialize+0x1d0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0210 	orr.w	r2, r2, #16
 8007db2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007db4:	4b09      	ldr	r3, [pc, #36]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	4b06      	ldr	r3, [pc, #24]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007dc2:	701a      	strb	r2, [r3, #0]
 8007dc4:	e002      	b.n	8007dcc <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007dcc:	4b03      	ldr	r3, [pc, #12]	@ (8007ddc <USER_SPI_initialize+0x1cc>)
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	b2db      	uxtb	r3, r3
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3714      	adds	r7, #20
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd90      	pop	{r4, r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	20000028 	.word	0x20000028
 8007de0:	200002f8 	.word	0x200002f8
 8007de4:	200003b5 	.word	0x200003b5

08007de8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <USER_SPI_status+0x14>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e002      	b.n	8007e02 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007dfc:	4b04      	ldr	r3, [pc, #16]	@ (8007e10 <USER_SPI_status+0x28>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	b2db      	uxtb	r3, r3
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000028 	.word	0x20000028

08007e14 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	4603      	mov	r3, r0
 8007e22:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d102      	bne.n	8007e30 <USER_SPI_read+0x1c>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <USER_SPI_read+0x20>
 8007e30:	2304      	movs	r3, #4
 8007e32:	e04d      	b.n	8007ed0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007e34:	4b28      	ldr	r3, [pc, #160]	@ (8007ed8 <USER_SPI_read+0xc4>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <USER_SPI_read+0x32>
 8007e42:	2303      	movs	r3, #3
 8007e44:	e044      	b.n	8007ed0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007e46:	4b25      	ldr	r3, [pc, #148]	@ (8007edc <USER_SPI_read+0xc8>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <USER_SPI_read+0x44>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	025b      	lsls	r3, r3, #9
 8007e56:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d111      	bne.n	8007e82 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	2011      	movs	r0, #17
 8007e62:	f7ff fe65 	bl	8007b30 <send_cmd>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d129      	bne.n	8007ec0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007e6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f7ff fe02 	bl	8007a7a <rcvr_datablock>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d021      	beq.n	8007ec0 <USER_SPI_read+0xac>
			count = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	e01e      	b.n	8007ec0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	2012      	movs	r0, #18
 8007e86:	f7ff fe53 	bl	8007b30 <send_cmd>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d117      	bne.n	8007ec0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007e90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007e94:	68b8      	ldr	r0, [r7, #8]
 8007e96:	f7ff fdf0 	bl	8007a7a <rcvr_datablock>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <USER_SPI_read+0xa2>
				buff += 512;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007ea6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d1ed      	bne.n	8007e90 <USER_SPI_read+0x7c>
 8007eb4:	e000      	b.n	8007eb8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007eb6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007eb8:	2100      	movs	r1, #0
 8007eba:	200c      	movs	r0, #12
 8007ebc:	f7ff fe38 	bl	8007b30 <send_cmd>
		}
	}
	despiselect();
 8007ec0:	f7ff fdb5 	bl	8007a2e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bf14      	ite	ne
 8007eca:	2301      	movne	r3, #1
 8007ecc:	2300      	moveq	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000028 	.word	0x20000028
 8007edc:	200003b5 	.word	0x200003b5

08007ee0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60b9      	str	r1, [r7, #8]
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <USER_SPI_write+0x1c>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USER_SPI_write+0x20>
 8007efc:	2304      	movs	r3, #4
 8007efe:	e063      	b.n	8007fc8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007f00:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <USER_SPI_write+0xf0>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <USER_SPI_write+0x32>
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e05a      	b.n	8007fc8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007f12:	4b2f      	ldr	r3, [pc, #188]	@ (8007fd0 <USER_SPI_write+0xf0>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <USER_SPI_write+0x44>
 8007f20:	2302      	movs	r3, #2
 8007f22:	e051      	b.n	8007fc8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007f24:	4b2b      	ldr	r3, [pc, #172]	@ (8007fd4 <USER_SPI_write+0xf4>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	f003 0308 	and.w	r3, r3, #8
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <USER_SPI_write+0x56>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	025b      	lsls	r3, r3, #9
 8007f34:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d110      	bne.n	8007f5e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	2018      	movs	r0, #24
 8007f40:	f7ff fdf6 	bl	8007b30 <send_cmd>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d136      	bne.n	8007fb8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007f4a:	21fe      	movs	r1, #254	@ 0xfe
 8007f4c:	68b8      	ldr	r0, [r7, #8]
 8007f4e:	f7ff fdbd 	bl	8007acc <xmit_datablock>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02f      	beq.n	8007fb8 <USER_SPI_write+0xd8>
			count = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	e02c      	b.n	8007fb8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd4 <USER_SPI_write+0xf4>)
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	f003 0306 	and.w	r3, r3, #6
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <USER_SPI_write+0x92>
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	2097      	movs	r0, #151	@ 0x97
 8007f6e:	f7ff fddf 	bl	8007b30 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	2019      	movs	r0, #25
 8007f76:	f7ff fddb 	bl	8007b30 <send_cmd>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d11b      	bne.n	8007fb8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007f80:	21fc      	movs	r1, #252	@ 0xfc
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f7ff fda2 	bl	8007acc <xmit_datablock>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <USER_SPI_write+0xc4>
				buff += 512;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007f94:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	603b      	str	r3, [r7, #0]
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ee      	bne.n	8007f80 <USER_SPI_write+0xa0>
 8007fa2:	e000      	b.n	8007fa6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007fa4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007fa6:	21fd      	movs	r1, #253	@ 0xfd
 8007fa8:	2000      	movs	r0, #0
 8007faa:	f7ff fd8f 	bl	8007acc <xmit_datablock>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <USER_SPI_write+0xd8>
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007fb8:	f7ff fd39 	bl	8007a2e <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20000028 	.word	0x20000028
 8007fd4:	200003b5 	.word	0x200003b5

08007fd8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	@ 0x30
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	603a      	str	r2, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <USER_SPI_ioctl+0x1a>
 8007fee:	2304      	movs	r3, #4
 8007ff0:	e15a      	b.n	80082a8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007ff2:	4baf      	ldr	r3, [pc, #700]	@ (80082b0 <USER_SPI_ioctl+0x2d8>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <USER_SPI_ioctl+0x2c>
 8008000:	2303      	movs	r3, #3
 8008002:	e151      	b.n	80082a8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800800a:	79bb      	ldrb	r3, [r7, #6]
 800800c:	2b04      	cmp	r3, #4
 800800e:	f200 8136 	bhi.w	800827e <USER_SPI_ioctl+0x2a6>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <USER_SPI_ioctl+0x40>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	0800802d 	.word	0x0800802d
 800801c:	08008041 	.word	0x08008041
 8008020:	0800827f 	.word	0x0800827f
 8008024:	080080ed 	.word	0x080080ed
 8008028:	080081e3 	.word	0x080081e3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800802c:	f7ff fd0c 	bl	8007a48 <spiselect>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8127 	beq.w	8008286 <USER_SPI_ioctl+0x2ae>
 8008038:	2300      	movs	r3, #0
 800803a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800803e:	e122      	b.n	8008286 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8008040:	2100      	movs	r1, #0
 8008042:	2009      	movs	r0, #9
 8008044:	f7ff fd74 	bl	8007b30 <send_cmd>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	f040 811d 	bne.w	800828a <USER_SPI_ioctl+0x2b2>
 8008050:	f107 030c 	add.w	r3, r7, #12
 8008054:	2110      	movs	r1, #16
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff fd0f 	bl	8007a7a <rcvr_datablock>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8113 	beq.w	800828a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8008064:	7b3b      	ldrb	r3, [r7, #12]
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b01      	cmp	r3, #1
 800806c:	d111      	bne.n	8008092 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800806e:	7d7b      	ldrb	r3, [r7, #21]
 8008070:	461a      	mov	r2, r3
 8008072:	7d3b      	ldrb	r3, [r7, #20]
 8008074:	021b      	lsls	r3, r3, #8
 8008076:	4413      	add	r3, r2
 8008078:	461a      	mov	r2, r3
 800807a:	7cfb      	ldrb	r3, [r7, #19]
 800807c:	041b      	lsls	r3, r3, #16
 800807e:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8008082:	4413      	add	r3, r2
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	029a      	lsls	r2, r3, #10
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	e028      	b.n	80080e4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8008092:	7c7b      	ldrb	r3, [r7, #17]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	b2da      	uxtb	r2, r3
 800809a:	7dbb      	ldrb	r3, [r7, #22]
 800809c:	09db      	lsrs	r3, r3, #7
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	4413      	add	r3, r2
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	7d7b      	ldrb	r3, [r7, #21]
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	f003 0306 	and.w	r3, r3, #6
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4413      	add	r3, r2
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	3302      	adds	r3, #2
 80080b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80080ba:	7d3b      	ldrb	r3, [r7, #20]
 80080bc:	099b      	lsrs	r3, r3, #6
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	461a      	mov	r2, r3
 80080c2:	7cfb      	ldrb	r3, [r7, #19]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	441a      	add	r2, r3
 80080c8:	7cbb      	ldrb	r3, [r7, #18]
 80080ca:	029b      	lsls	r3, r3, #10
 80080cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080d0:	4413      	add	r3, r2
 80080d2:	3301      	adds	r3, #1
 80080d4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80080d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80080da:	3b09      	subs	r3, #9
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	409a      	lsls	r2, r3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80080ea:	e0ce      	b.n	800828a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80080ec:	4b71      	ldr	r3, [pc, #452]	@ (80082b4 <USER_SPI_ioctl+0x2dc>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 0304 	and.w	r3, r3, #4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d031      	beq.n	800815c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80080f8:	2100      	movs	r1, #0
 80080fa:	208d      	movs	r0, #141	@ 0x8d
 80080fc:	f7ff fd18 	bl	8007b30 <send_cmd>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	f040 80c3 	bne.w	800828e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8008108:	20ff      	movs	r0, #255	@ 0xff
 800810a:	f7ff fc27 	bl	800795c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800810e:	f107 030c 	add.w	r3, r7, #12
 8008112:	2110      	movs	r1, #16
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff fcb0 	bl	8007a7a <rcvr_datablock>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 80b6 	beq.w	800828e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8008122:	2330      	movs	r3, #48	@ 0x30
 8008124:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8008128:	e007      	b.n	800813a <USER_SPI_ioctl+0x162>
 800812a:	20ff      	movs	r0, #255	@ 0xff
 800812c:	f7ff fc16 	bl	800795c <xchg_spi>
 8008130:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008134:	3b01      	subs	r3, #1
 8008136:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800813a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1f3      	bne.n	800812a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8008142:	7dbb      	ldrb	r3, [r7, #22]
 8008144:	091b      	lsrs	r3, r3, #4
 8008146:	b2db      	uxtb	r3, r3
 8008148:	461a      	mov	r2, r3
 800814a:	2310      	movs	r3, #16
 800814c:	fa03 f202 	lsl.w	r2, r3, r2
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8008154:	2300      	movs	r3, #0
 8008156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800815a:	e098      	b.n	800828e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800815c:	2100      	movs	r1, #0
 800815e:	2009      	movs	r0, #9
 8008160:	f7ff fce6 	bl	8007b30 <send_cmd>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	f040 8091 	bne.w	800828e <USER_SPI_ioctl+0x2b6>
 800816c:	f107 030c 	add.w	r3, r7, #12
 8008170:	2110      	movs	r1, #16
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fc81 	bl	8007a7a <rcvr_datablock>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8087 	beq.w	800828e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8008180:	4b4c      	ldr	r3, [pc, #304]	@ (80082b4 <USER_SPI_ioctl+0x2dc>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b00      	cmp	r3, #0
 800818a:	d012      	beq.n	80081b2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800818c:	7dbb      	ldrb	r3, [r7, #22]
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8008194:	7dfa      	ldrb	r2, [r7, #23]
 8008196:	09d2      	lsrs	r2, r2, #7
 8008198:	b2d2      	uxtb	r2, r2
 800819a:	4413      	add	r3, r2
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	7e7b      	ldrb	r3, [r7, #25]
 80081a0:	099b      	lsrs	r3, r3, #6
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	461a      	mov	r2, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e013      	b.n	80081da <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80081b2:	7dbb      	ldrb	r3, [r7, #22]
 80081b4:	109b      	asrs	r3, r3, #2
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	f003 031f 	and.w	r3, r3, #31
 80081bc:	3301      	adds	r3, #1
 80081be:	7dfa      	ldrb	r2, [r7, #23]
 80081c0:	00d2      	lsls	r2, r2, #3
 80081c2:	f002 0218 	and.w	r2, r2, #24
 80081c6:	7df9      	ldrb	r1, [r7, #23]
 80081c8:	0949      	lsrs	r1, r1, #5
 80081ca:	b2c9      	uxtb	r1, r1
 80081cc:	440a      	add	r2, r1
 80081ce:	3201      	adds	r2, #1
 80081d0:	fb02 f303 	mul.w	r3, r2, r3
 80081d4:	461a      	mov	r2, r3
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80081e0:	e055      	b.n	800828e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80081e2:	4b34      	ldr	r3, [pc, #208]	@ (80082b4 <USER_SPI_ioctl+0x2dc>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 0306 	and.w	r3, r3, #6
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d051      	beq.n	8008292 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80081ee:	f107 020c 	add.w	r2, r7, #12
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	210b      	movs	r1, #11
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff feee 	bl	8007fd8 <USER_SPI_ioctl>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d149      	bne.n	8008296 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8008202:	7b3b      	ldrb	r3, [r7, #12]
 8008204:	099b      	lsrs	r3, r3, #6
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <USER_SPI_ioctl+0x23e>
 800820c:	7dbb      	ldrb	r3, [r7, #22]
 800820e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008212:	2b00      	cmp	r3, #0
 8008214:	d041      	beq.n	800829a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8008226:	4b23      	ldr	r3, [pc, #140]	@ (80082b4 <USER_SPI_ioctl+0x2dc>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b00      	cmp	r3, #0
 8008230:	d105      	bne.n	800823e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	025b      	lsls	r3, r3, #9
 8008236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	025b      	lsls	r3, r3, #9
 800823c:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800823e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008240:	2020      	movs	r0, #32
 8008242:	f7ff fc75 	bl	8007b30 <send_cmd>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d128      	bne.n	800829e <USER_SPI_ioctl+0x2c6>
 800824c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800824e:	2021      	movs	r0, #33	@ 0x21
 8008250:	f7ff fc6e 	bl	8007b30 <send_cmd>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d121      	bne.n	800829e <USER_SPI_ioctl+0x2c6>
 800825a:	2100      	movs	r1, #0
 800825c:	2026      	movs	r0, #38	@ 0x26
 800825e:	f7ff fc67 	bl	8007b30 <send_cmd>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d11a      	bne.n	800829e <USER_SPI_ioctl+0x2c6>
 8008268:	f247 5030 	movw	r0, #30000	@ 0x7530
 800826c:	f7ff fbbc 	bl	80079e8 <wait_ready>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8008276:	2300      	movs	r3, #0
 8008278:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800827c:	e00f      	b.n	800829e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800827e:	2304      	movs	r3, #4
 8008280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008284:	e00c      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		break;
 8008286:	bf00      	nop
 8008288:	e00a      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		break;
 800828a:	bf00      	nop
 800828c:	e008      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		break;
 800828e:	bf00      	nop
 8008290:	e006      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8008292:	bf00      	nop
 8008294:	e004      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8008296:	bf00      	nop
 8008298:	e002      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800829a:	bf00      	nop
 800829c:	e000      	b.n	80082a0 <USER_SPI_ioctl+0x2c8>
		break;
 800829e:	bf00      	nop
	}

	despiselect();
 80082a0:	f7ff fbc5 	bl	8007a2e <despiselect>

	return res;
 80082a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3730      	adds	r7, #48	@ 0x30
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000028 	.word	0x20000028
 80082b4:	200003b5 	.word	0x200003b5

080082b8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082c6:	2301      	movs	r3, #1
 80082c8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082ce:	4b1f      	ldr	r3, [pc, #124]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082d0:	7a5b      	ldrb	r3, [r3, #9]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d131      	bne.n	800833c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082d8:	4b1c      	ldr	r3, [pc, #112]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082da:	7a5b      	ldrb	r3, [r3, #9]
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	461a      	mov	r2, r3
 80082e0:	4b1a      	ldr	r3, [pc, #104]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082e2:	2100      	movs	r1, #0
 80082e4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082e6:	4b19      	ldr	r3, [pc, #100]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082e8:	7a5b      	ldrb	r3, [r3, #9]
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	4a17      	ldr	r2, [pc, #92]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082f6:	4b15      	ldr	r3, [pc, #84]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 80082f8:	7a5b      	ldrb	r3, [r3, #9]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	4b13      	ldr	r3, [pc, #76]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 8008300:	4413      	add	r3, r2
 8008302:	79fa      	ldrb	r2, [r7, #7]
 8008304:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008306:	4b11      	ldr	r3, [pc, #68]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 8008308:	7a5b      	ldrb	r3, [r3, #9]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	1c5a      	adds	r2, r3, #1
 800830e:	b2d1      	uxtb	r1, r2
 8008310:	4a0e      	ldr	r2, [pc, #56]	@ (800834c <FATFS_LinkDriverEx+0x94>)
 8008312:	7251      	strb	r1, [r2, #9]
 8008314:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008316:	7dbb      	ldrb	r3, [r7, #22]
 8008318:	3330      	adds	r3, #48	@ 0x30
 800831a:	b2da      	uxtb	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	3301      	adds	r3, #1
 8008324:	223a      	movs	r2, #58	@ 0x3a
 8008326:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	3302      	adds	r3, #2
 800832c:	222f      	movs	r2, #47	@ 0x2f
 800832e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	3303      	adds	r3, #3
 8008334:	2200      	movs	r2, #0
 8008336:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800833c:	7dfb      	ldrb	r3, [r7, #23]
}
 800833e:	4618      	mov	r0, r3
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop
 800834c:	200003c0 	.word	0x200003c0

08008350 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff ffaa 	bl	80082b8 <FATFS_LinkDriverEx>
 8008364:	4603      	mov	r3, r0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <_fminf>:
 8008370:	f002 bde6 	b.w	800af40 <fminf>

08008374 <neai_classification_init>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	f600 42b4 	addw	r2, r0, #3252	@ 0xcb4
 800837a:	4b6d      	ldr	r3, [pc, #436]	@ (8008530 <neai_classification_init+0x1bc>)
 800837c:	ed92 7a00 	vldr	s14, [r2]
 8008380:	4a6c      	ldr	r2, [pc, #432]	@ (8008534 <neai_classification_init+0x1c0>)
 8008382:	496d      	ldr	r1, [pc, #436]	@ (8008538 <neai_classification_init+0x1c4>)
 8008384:	ed2d 8b02 	vpush	{d8}
 8008388:	25a2      	movs	r5, #162	@ 0xa2
 800838a:	6018      	str	r0, [r3, #0]
 800838c:	4b6b      	ldr	r3, [pc, #428]	@ (800853c <neai_classification_init+0x1c8>)
 800838e:	6015      	str	r5, [r2, #0]
 8008390:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008394:	f500 62a2 	add.w	r2, r0, #1296	@ 0x510
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	eeb4 7a67 	vcmp.f32	s14, s15
 800839e:	4b68      	ldr	r3, [pc, #416]	@ (8008540 <neai_classification_init+0x1cc>)
 80083a0:	f500 7422 	add.w	r4, r0, #648	@ 0x288
 80083a4:	f600 42a8 	addw	r2, r0, #3240	@ 0xca8
 80083a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ac:	600c      	str	r4, [r1, #0]
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	f040 80a6 	bne.w	8008500 <neai_classification_init+0x18c>
 80083b4:	f600 43b8 	addw	r3, r0, #3256	@ 0xcb8
 80083b8:	edd3 6a00 	vldr	s13, [r3]
 80083bc:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 80083c0:	eef4 6a47 	vcmp.f32	s13, s14
 80083c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c8:	f040 809a 	bne.w	8008500 <neai_classification_init+0x18c>
 80083cc:	f600 43bc 	addw	r3, r0, #3260	@ 0xcbc
 80083d0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008544 <neai_classification_init+0x1d0>
 80083d4:	edd3 6a00 	vldr	s13, [r3]
 80083d8:	eef4 6a47 	vcmp.f32	s13, s14
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	f040 808e 	bne.w	8008500 <neai_classification_init+0x18c>
 80083e4:	f500 634c 	add.w	r3, r0, #3264	@ 0xcc0
 80083e8:	edd3 6a00 	vldr	s13, [r3]
 80083ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f0:	eef4 6a47 	vcmp.f32	s13, s14
 80083f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f8:	f040 8082 	bne.w	8008500 <neai_classification_init+0x18c>
 80083fc:	f600 43c4 	addw	r3, r0, #3268	@ 0xcc4
 8008400:	ed93 7a00 	vldr	s14, [r3]
 8008404:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840c:	d178      	bne.n	8008500 <neai_classification_init+0x18c>
 800840e:	f600 43c8 	addw	r3, r0, #3272	@ 0xcc8
 8008412:	ed93 7a00 	vldr	s14, [r3]
 8008416:	eeb4 7a67 	vcmp.f32	s14, s15
 800841a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800841e:	d16f      	bne.n	8008500 <neai_classification_init+0x18c>
 8008420:	f600 43cc 	addw	r3, r0, #3276	@ 0xccc
 8008424:	edd3 7a00 	vldr	s15, [r3]
 8008428:	eef5 7a40 	vcmp.f32	s15, #0.0
 800842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008430:	d166      	bne.n	8008500 <neai_classification_init+0x18c>
 8008432:	f500 634d 	add.w	r3, r0, #3280	@ 0xcd0
 8008436:	edd3 7a00 	vldr	s15, [r3]
 800843a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800843e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008442:	d15d      	bne.n	8008500 <neai_classification_init+0x18c>
 8008444:	f600 43d4 	addw	r3, r0, #3284	@ 0xcd4
 8008448:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8008548 <neai_classification_init+0x1d4>
 800844c:	ed93 7a00 	vldr	s14, [r3]
 8008450:	eeb4 7a67 	vcmp.f32	s14, s15
 8008454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008458:	d152      	bne.n	8008500 <neai_classification_init+0x18c>
 800845a:	f600 43d8 	addw	r3, r0, #3288	@ 0xcd8
 800845e:	ed93 7a00 	vldr	s14, [r3]
 8008462:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8008466:	eeb4 7a67 	vcmp.f32	s14, s15
 800846a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800846e:	d147      	bne.n	8008500 <neai_classification_init+0x18c>
 8008470:	f600 43dc 	addw	r3, r0, #3292	@ 0xcdc
 8008474:	edd3 7a00 	vldr	s15, [r3]
 8008478:	eef5 7a40 	vcmp.f32	s15, #0.0
 800847c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008480:	d13e      	bne.n	8008500 <neai_classification_init+0x18c>
 8008482:	f500 634e 	add.w	r3, r0, #3296	@ 0xce0
 8008486:	ed93 7a00 	vldr	s14, [r3]
 800848a:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800848e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008496:	d133      	bne.n	8008500 <neai_classification_init+0x18c>
 8008498:	f600 43e4 	addw	r3, r0, #3300	@ 0xce4
 800849c:	ed93 7a00 	vldr	s14, [r3]
 80084a0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80084a4:	eeb4 7a67 	vcmp.f32	s14, s15
 80084a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ac:	d128      	bne.n	8008500 <neai_classification_init+0x18c>
 80084ae:	f600 43e8 	addw	r3, r0, #3304	@ 0xce8
 80084b2:	edd3 7a00 	vldr	s15, [r3]
 80084b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084be:	d11f      	bne.n	8008500 <neai_classification_init+0x18c>
 80084c0:	f600 43ec 	addw	r3, r0, #3308	@ 0xcec
 80084c4:	edd3 7a00 	vldr	s15, [r3]
 80084c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d0:	d116      	bne.n	8008500 <neai_classification_init+0x18c>
 80084d2:	f500 634f 	add.w	r3, r0, #3312	@ 0xcf0
 80084d6:	edd3 7a00 	vldr	s15, [r3]
 80084da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80084de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e2:	d10d      	bne.n	8008500 <neai_classification_init+0x18c>
 80084e4:	f600 40f4 	addw	r0, r0, #3316	@ 0xcf4
 80084e8:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800854c <neai_classification_init+0x1d8>
 80084ec:	ed90 7a00 	vldr	s14, [r0]
 80084f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80084f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084f8:	bf14      	ite	ne
 80084fa:	237d      	movne	r3, #125	@ 0x7d
 80084fc:	2300      	moveq	r3, #0
 80084fe:	e000      	b.n	8008502 <neai_classification_init+0x18e>
 8008500:	237d      	movs	r3, #125	@ 0x7d
 8008502:	ed9f 8a13 	vldr	s16, [pc, #76]	@ 8008550 <neai_classification_init+0x1dc>
 8008506:	4c13      	ldr	r4, [pc, #76]	@ (8008554 <neai_classification_init+0x1e0>)
 8008508:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8008558 <neai_classification_init+0x1e4>
 800850c:	7023      	strb	r3, [r4, #0]
 800850e:	eeb0 0a48 	vmov.f32	s0, s16
 8008512:	f7ff ff2d 	bl	8008370 <_fminf>
 8008516:	eeb4 0a48 	vcmp.f32	s0, s16
 800851a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800851e:	bf1c      	itt	ne
 8008520:	2081      	movne	r0, #129	@ 0x81
 8008522:	7020      	strbne	r0, [r4, #0]
 8008524:	ecbd 8b02 	vpop	{d8}
 8008528:	bf08      	it	eq
 800852a:	7820      	ldrbeq	r0, [r4, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	200003d8 	.word	0x200003d8
 8008534:	200003d4 	.word	0x200003d4
 8008538:	200003dc 	.word	0x200003dc
 800853c:	200003d0 	.word	0x200003d0
 8008540:	200003cc 	.word	0x200003cc
 8008544:	43800000 	.word	0x43800000
 8008548:	42c80000 	.word	0x42c80000
 800854c:	49742400 	.word	0x49742400
 8008550:	3f8ccccd 	.word	0x3f8ccccd
 8008554:	20000029 	.word	0x20000029
 8008558:	40066666 	.word	0x40066666

0800855c <__cvt>:
 800855c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008560:	ec57 6b10 	vmov	r6, r7, d0
 8008564:	2f00      	cmp	r7, #0
 8008566:	460c      	mov	r4, r1
 8008568:	4619      	mov	r1, r3
 800856a:	463b      	mov	r3, r7
 800856c:	bfbb      	ittet	lt
 800856e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008572:	461f      	movlt	r7, r3
 8008574:	2300      	movge	r3, #0
 8008576:	232d      	movlt	r3, #45	@ 0x2d
 8008578:	700b      	strb	r3, [r1, #0]
 800857a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800857c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008580:	4691      	mov	r9, r2
 8008582:	f023 0820 	bic.w	r8, r3, #32
 8008586:	bfbc      	itt	lt
 8008588:	4632      	movlt	r2, r6
 800858a:	4616      	movlt	r6, r2
 800858c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008590:	d005      	beq.n	800859e <__cvt+0x42>
 8008592:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008596:	d100      	bne.n	800859a <__cvt+0x3e>
 8008598:	3401      	adds	r4, #1
 800859a:	2102      	movs	r1, #2
 800859c:	e000      	b.n	80085a0 <__cvt+0x44>
 800859e:	2103      	movs	r1, #3
 80085a0:	ab03      	add	r3, sp, #12
 80085a2:	9301      	str	r3, [sp, #4]
 80085a4:	ab02      	add	r3, sp, #8
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	ec47 6b10 	vmov	d0, r6, r7
 80085ac:	4653      	mov	r3, sl
 80085ae:	4622      	mov	r2, r4
 80085b0:	f000 ff4e 	bl	8009450 <_dtoa_r>
 80085b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80085b8:	4605      	mov	r5, r0
 80085ba:	d119      	bne.n	80085f0 <__cvt+0x94>
 80085bc:	f019 0f01 	tst.w	r9, #1
 80085c0:	d00e      	beq.n	80085e0 <__cvt+0x84>
 80085c2:	eb00 0904 	add.w	r9, r0, r4
 80085c6:	2200      	movs	r2, #0
 80085c8:	2300      	movs	r3, #0
 80085ca:	4630      	mov	r0, r6
 80085cc:	4639      	mov	r1, r7
 80085ce:	f7f8 fa53 	bl	8000a78 <__aeabi_dcmpeq>
 80085d2:	b108      	cbz	r0, 80085d8 <__cvt+0x7c>
 80085d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80085d8:	2230      	movs	r2, #48	@ 0x30
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	454b      	cmp	r3, r9
 80085de:	d31e      	bcc.n	800861e <__cvt+0xc2>
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e4:	1b5b      	subs	r3, r3, r5
 80085e6:	4628      	mov	r0, r5
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	b004      	add	sp, #16
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085f4:	eb00 0904 	add.w	r9, r0, r4
 80085f8:	d1e5      	bne.n	80085c6 <__cvt+0x6a>
 80085fa:	7803      	ldrb	r3, [r0, #0]
 80085fc:	2b30      	cmp	r3, #48	@ 0x30
 80085fe:	d10a      	bne.n	8008616 <__cvt+0xba>
 8008600:	2200      	movs	r2, #0
 8008602:	2300      	movs	r3, #0
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fa36 	bl	8000a78 <__aeabi_dcmpeq>
 800860c:	b918      	cbnz	r0, 8008616 <__cvt+0xba>
 800860e:	f1c4 0401 	rsb	r4, r4, #1
 8008612:	f8ca 4000 	str.w	r4, [sl]
 8008616:	f8da 3000 	ldr.w	r3, [sl]
 800861a:	4499      	add	r9, r3
 800861c:	e7d3      	b.n	80085c6 <__cvt+0x6a>
 800861e:	1c59      	adds	r1, r3, #1
 8008620:	9103      	str	r1, [sp, #12]
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e7d9      	b.n	80085da <__cvt+0x7e>

08008626 <__exponent>:
 8008626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008628:	2900      	cmp	r1, #0
 800862a:	bfba      	itte	lt
 800862c:	4249      	neglt	r1, r1
 800862e:	232d      	movlt	r3, #45	@ 0x2d
 8008630:	232b      	movge	r3, #43	@ 0x2b
 8008632:	2909      	cmp	r1, #9
 8008634:	7002      	strb	r2, [r0, #0]
 8008636:	7043      	strb	r3, [r0, #1]
 8008638:	dd29      	ble.n	800868e <__exponent+0x68>
 800863a:	f10d 0307 	add.w	r3, sp, #7
 800863e:	461d      	mov	r5, r3
 8008640:	270a      	movs	r7, #10
 8008642:	461a      	mov	r2, r3
 8008644:	fbb1 f6f7 	udiv	r6, r1, r7
 8008648:	fb07 1416 	mls	r4, r7, r6, r1
 800864c:	3430      	adds	r4, #48	@ 0x30
 800864e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008652:	460c      	mov	r4, r1
 8008654:	2c63      	cmp	r4, #99	@ 0x63
 8008656:	f103 33ff 	add.w	r3, r3, #4294967295
 800865a:	4631      	mov	r1, r6
 800865c:	dcf1      	bgt.n	8008642 <__exponent+0x1c>
 800865e:	3130      	adds	r1, #48	@ 0x30
 8008660:	1e94      	subs	r4, r2, #2
 8008662:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008666:	1c41      	adds	r1, r0, #1
 8008668:	4623      	mov	r3, r4
 800866a:	42ab      	cmp	r3, r5
 800866c:	d30a      	bcc.n	8008684 <__exponent+0x5e>
 800866e:	f10d 0309 	add.w	r3, sp, #9
 8008672:	1a9b      	subs	r3, r3, r2
 8008674:	42ac      	cmp	r4, r5
 8008676:	bf88      	it	hi
 8008678:	2300      	movhi	r3, #0
 800867a:	3302      	adds	r3, #2
 800867c:	4403      	add	r3, r0
 800867e:	1a18      	subs	r0, r3, r0
 8008680:	b003      	add	sp, #12
 8008682:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008684:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008688:	f801 6f01 	strb.w	r6, [r1, #1]!
 800868c:	e7ed      	b.n	800866a <__exponent+0x44>
 800868e:	2330      	movs	r3, #48	@ 0x30
 8008690:	3130      	adds	r1, #48	@ 0x30
 8008692:	7083      	strb	r3, [r0, #2]
 8008694:	70c1      	strb	r1, [r0, #3]
 8008696:	1d03      	adds	r3, r0, #4
 8008698:	e7f1      	b.n	800867e <__exponent+0x58>
	...

0800869c <_printf_float>:
 800869c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a0:	b08d      	sub	sp, #52	@ 0x34
 80086a2:	460c      	mov	r4, r1
 80086a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80086a8:	4616      	mov	r6, r2
 80086aa:	461f      	mov	r7, r3
 80086ac:	4605      	mov	r5, r0
 80086ae:	f000 fdbf 	bl	8009230 <_localeconv_r>
 80086b2:	6803      	ldr	r3, [r0, #0]
 80086b4:	9304      	str	r3, [sp, #16]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7f7 fdb2 	bl	8000220 <strlen>
 80086bc:	2300      	movs	r3, #0
 80086be:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c0:	f8d8 3000 	ldr.w	r3, [r8]
 80086c4:	9005      	str	r0, [sp, #20]
 80086c6:	3307      	adds	r3, #7
 80086c8:	f023 0307 	bic.w	r3, r3, #7
 80086cc:	f103 0208 	add.w	r2, r3, #8
 80086d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086d4:	f8d4 b000 	ldr.w	fp, [r4]
 80086d8:	f8c8 2000 	str.w	r2, [r8]
 80086dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086e4:	9307      	str	r3, [sp, #28]
 80086e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80086ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086f2:	4b9c      	ldr	r3, [pc, #624]	@ (8008964 <_printf_float+0x2c8>)
 80086f4:	f04f 32ff 	mov.w	r2, #4294967295
 80086f8:	f7f8 f9f0 	bl	8000adc <__aeabi_dcmpun>
 80086fc:	bb70      	cbnz	r0, 800875c <_printf_float+0xc0>
 80086fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008702:	4b98      	ldr	r3, [pc, #608]	@ (8008964 <_printf_float+0x2c8>)
 8008704:	f04f 32ff 	mov.w	r2, #4294967295
 8008708:	f7f8 f9ca 	bl	8000aa0 <__aeabi_dcmple>
 800870c:	bb30      	cbnz	r0, 800875c <_printf_float+0xc0>
 800870e:	2200      	movs	r2, #0
 8008710:	2300      	movs	r3, #0
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f8 f9b9 	bl	8000a8c <__aeabi_dcmplt>
 800871a:	b110      	cbz	r0, 8008722 <_printf_float+0x86>
 800871c:	232d      	movs	r3, #45	@ 0x2d
 800871e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008722:	4a91      	ldr	r2, [pc, #580]	@ (8008968 <_printf_float+0x2cc>)
 8008724:	4b91      	ldr	r3, [pc, #580]	@ (800896c <_printf_float+0x2d0>)
 8008726:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800872a:	bf94      	ite	ls
 800872c:	4690      	movls	r8, r2
 800872e:	4698      	movhi	r8, r3
 8008730:	2303      	movs	r3, #3
 8008732:	6123      	str	r3, [r4, #16]
 8008734:	f02b 0304 	bic.w	r3, fp, #4
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	f04f 0900 	mov.w	r9, #0
 800873e:	9700      	str	r7, [sp, #0]
 8008740:	4633      	mov	r3, r6
 8008742:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008744:	4621      	mov	r1, r4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 f9d2 	bl	8008af0 <_printf_common>
 800874c:	3001      	adds	r0, #1
 800874e:	f040 808d 	bne.w	800886c <_printf_float+0x1d0>
 8008752:	f04f 30ff 	mov.w	r0, #4294967295
 8008756:	b00d      	add	sp, #52	@ 0x34
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	4642      	mov	r2, r8
 800875e:	464b      	mov	r3, r9
 8008760:	4640      	mov	r0, r8
 8008762:	4649      	mov	r1, r9
 8008764:	f7f8 f9ba 	bl	8000adc <__aeabi_dcmpun>
 8008768:	b140      	cbz	r0, 800877c <_printf_float+0xe0>
 800876a:	464b      	mov	r3, r9
 800876c:	2b00      	cmp	r3, #0
 800876e:	bfbc      	itt	lt
 8008770:	232d      	movlt	r3, #45	@ 0x2d
 8008772:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008776:	4a7e      	ldr	r2, [pc, #504]	@ (8008970 <_printf_float+0x2d4>)
 8008778:	4b7e      	ldr	r3, [pc, #504]	@ (8008974 <_printf_float+0x2d8>)
 800877a:	e7d4      	b.n	8008726 <_printf_float+0x8a>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008782:	9206      	str	r2, [sp, #24]
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	d13b      	bne.n	8008800 <_printf_float+0x164>
 8008788:	2306      	movs	r3, #6
 800878a:	6063      	str	r3, [r4, #4]
 800878c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008790:	2300      	movs	r3, #0
 8008792:	6022      	str	r2, [r4, #0]
 8008794:	9303      	str	r3, [sp, #12]
 8008796:	ab0a      	add	r3, sp, #40	@ 0x28
 8008798:	e9cd a301 	strd	sl, r3, [sp, #4]
 800879c:	ab09      	add	r3, sp, #36	@ 0x24
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	6861      	ldr	r1, [r4, #4]
 80087a2:	ec49 8b10 	vmov	d0, r8, r9
 80087a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80087aa:	4628      	mov	r0, r5
 80087ac:	f7ff fed6 	bl	800855c <__cvt>
 80087b0:	9b06      	ldr	r3, [sp, #24]
 80087b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80087b4:	2b47      	cmp	r3, #71	@ 0x47
 80087b6:	4680      	mov	r8, r0
 80087b8:	d129      	bne.n	800880e <_printf_float+0x172>
 80087ba:	1cc8      	adds	r0, r1, #3
 80087bc:	db02      	blt.n	80087c4 <_printf_float+0x128>
 80087be:	6863      	ldr	r3, [r4, #4]
 80087c0:	4299      	cmp	r1, r3
 80087c2:	dd41      	ble.n	8008848 <_printf_float+0x1ac>
 80087c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80087c8:	fa5f fa8a 	uxtb.w	sl, sl
 80087cc:	3901      	subs	r1, #1
 80087ce:	4652      	mov	r2, sl
 80087d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80087d6:	f7ff ff26 	bl	8008626 <__exponent>
 80087da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087dc:	1813      	adds	r3, r2, r0
 80087de:	2a01      	cmp	r2, #1
 80087e0:	4681      	mov	r9, r0
 80087e2:	6123      	str	r3, [r4, #16]
 80087e4:	dc02      	bgt.n	80087ec <_printf_float+0x150>
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	07d2      	lsls	r2, r2, #31
 80087ea:	d501      	bpl.n	80087f0 <_printf_float+0x154>
 80087ec:	3301      	adds	r3, #1
 80087ee:	6123      	str	r3, [r4, #16]
 80087f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0a2      	beq.n	800873e <_printf_float+0xa2>
 80087f8:	232d      	movs	r3, #45	@ 0x2d
 80087fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087fe:	e79e      	b.n	800873e <_printf_float+0xa2>
 8008800:	9a06      	ldr	r2, [sp, #24]
 8008802:	2a47      	cmp	r2, #71	@ 0x47
 8008804:	d1c2      	bne.n	800878c <_printf_float+0xf0>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1c0      	bne.n	800878c <_printf_float+0xf0>
 800880a:	2301      	movs	r3, #1
 800880c:	e7bd      	b.n	800878a <_printf_float+0xee>
 800880e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008812:	d9db      	bls.n	80087cc <_printf_float+0x130>
 8008814:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008818:	d118      	bne.n	800884c <_printf_float+0x1b0>
 800881a:	2900      	cmp	r1, #0
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	dd0b      	ble.n	8008838 <_printf_float+0x19c>
 8008820:	6121      	str	r1, [r4, #16]
 8008822:	b913      	cbnz	r3, 800882a <_printf_float+0x18e>
 8008824:	6822      	ldr	r2, [r4, #0]
 8008826:	07d0      	lsls	r0, r2, #31
 8008828:	d502      	bpl.n	8008830 <_printf_float+0x194>
 800882a:	3301      	adds	r3, #1
 800882c:	440b      	add	r3, r1
 800882e:	6123      	str	r3, [r4, #16]
 8008830:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008832:	f04f 0900 	mov.w	r9, #0
 8008836:	e7db      	b.n	80087f0 <_printf_float+0x154>
 8008838:	b913      	cbnz	r3, 8008840 <_printf_float+0x1a4>
 800883a:	6822      	ldr	r2, [r4, #0]
 800883c:	07d2      	lsls	r2, r2, #31
 800883e:	d501      	bpl.n	8008844 <_printf_float+0x1a8>
 8008840:	3302      	adds	r3, #2
 8008842:	e7f4      	b.n	800882e <_printf_float+0x192>
 8008844:	2301      	movs	r3, #1
 8008846:	e7f2      	b.n	800882e <_printf_float+0x192>
 8008848:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800884c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800884e:	4299      	cmp	r1, r3
 8008850:	db05      	blt.n	800885e <_printf_float+0x1c2>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	6121      	str	r1, [r4, #16]
 8008856:	07d8      	lsls	r0, r3, #31
 8008858:	d5ea      	bpl.n	8008830 <_printf_float+0x194>
 800885a:	1c4b      	adds	r3, r1, #1
 800885c:	e7e7      	b.n	800882e <_printf_float+0x192>
 800885e:	2900      	cmp	r1, #0
 8008860:	bfd4      	ite	le
 8008862:	f1c1 0202 	rsble	r2, r1, #2
 8008866:	2201      	movgt	r2, #1
 8008868:	4413      	add	r3, r2
 800886a:	e7e0      	b.n	800882e <_printf_float+0x192>
 800886c:	6823      	ldr	r3, [r4, #0]
 800886e:	055a      	lsls	r2, r3, #21
 8008870:	d407      	bmi.n	8008882 <_printf_float+0x1e6>
 8008872:	6923      	ldr	r3, [r4, #16]
 8008874:	4642      	mov	r2, r8
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	d12b      	bne.n	80088d8 <_printf_float+0x23c>
 8008880:	e767      	b.n	8008752 <_printf_float+0xb6>
 8008882:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008886:	f240 80dd 	bls.w	8008a44 <_printf_float+0x3a8>
 800888a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800888e:	2200      	movs	r2, #0
 8008890:	2300      	movs	r3, #0
 8008892:	f7f8 f8f1 	bl	8000a78 <__aeabi_dcmpeq>
 8008896:	2800      	cmp	r0, #0
 8008898:	d033      	beq.n	8008902 <_printf_float+0x266>
 800889a:	4a37      	ldr	r2, [pc, #220]	@ (8008978 <_printf_float+0x2dc>)
 800889c:	2301      	movs	r3, #1
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	f43f af54 	beq.w	8008752 <_printf_float+0xb6>
 80088aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80088ae:	4543      	cmp	r3, r8
 80088b0:	db02      	blt.n	80088b8 <_printf_float+0x21c>
 80088b2:	6823      	ldr	r3, [r4, #0]
 80088b4:	07d8      	lsls	r0, r3, #31
 80088b6:	d50f      	bpl.n	80088d8 <_printf_float+0x23c>
 80088b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	f43f af45 	beq.w	8008752 <_printf_float+0xb6>
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80088d0:	f104 0a1a 	add.w	sl, r4, #26
 80088d4:	45c8      	cmp	r8, r9
 80088d6:	dc09      	bgt.n	80088ec <_printf_float+0x250>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	079b      	lsls	r3, r3, #30
 80088dc:	f100 8103 	bmi.w	8008ae6 <_printf_float+0x44a>
 80088e0:	68e0      	ldr	r0, [r4, #12]
 80088e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088e4:	4298      	cmp	r0, r3
 80088e6:	bfb8      	it	lt
 80088e8:	4618      	movlt	r0, r3
 80088ea:	e734      	b.n	8008756 <_printf_float+0xba>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4652      	mov	r2, sl
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f af2b 	beq.w	8008752 <_printf_float+0xb6>
 80088fc:	f109 0901 	add.w	r9, r9, #1
 8008900:	e7e8      	b.n	80088d4 <_printf_float+0x238>
 8008902:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	dc39      	bgt.n	800897c <_printf_float+0x2e0>
 8008908:	4a1b      	ldr	r2, [pc, #108]	@ (8008978 <_printf_float+0x2dc>)
 800890a:	2301      	movs	r3, #1
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f af1d 	beq.w	8008752 <_printf_float+0xb6>
 8008918:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800891c:	ea59 0303 	orrs.w	r3, r9, r3
 8008920:	d102      	bne.n	8008928 <_printf_float+0x28c>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	07d9      	lsls	r1, r3, #31
 8008926:	d5d7      	bpl.n	80088d8 <_printf_float+0x23c>
 8008928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892c:	4631      	mov	r1, r6
 800892e:	4628      	mov	r0, r5
 8008930:	47b8      	blx	r7
 8008932:	3001      	adds	r0, #1
 8008934:	f43f af0d 	beq.w	8008752 <_printf_float+0xb6>
 8008938:	f04f 0a00 	mov.w	sl, #0
 800893c:	f104 0b1a 	add.w	fp, r4, #26
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	425b      	negs	r3, r3
 8008944:	4553      	cmp	r3, sl
 8008946:	dc01      	bgt.n	800894c <_printf_float+0x2b0>
 8008948:	464b      	mov	r3, r9
 800894a:	e793      	b.n	8008874 <_printf_float+0x1d8>
 800894c:	2301      	movs	r3, #1
 800894e:	465a      	mov	r2, fp
 8008950:	4631      	mov	r1, r6
 8008952:	4628      	mov	r0, r5
 8008954:	47b8      	blx	r7
 8008956:	3001      	adds	r0, #1
 8008958:	f43f aefb 	beq.w	8008752 <_printf_float+0xb6>
 800895c:	f10a 0a01 	add.w	sl, sl, #1
 8008960:	e7ee      	b.n	8008940 <_printf_float+0x2a4>
 8008962:	bf00      	nop
 8008964:	7fefffff 	.word	0x7fefffff
 8008968:	0800c388 	.word	0x0800c388
 800896c:	0800c38c 	.word	0x0800c38c
 8008970:	0800c390 	.word	0x0800c390
 8008974:	0800c394 	.word	0x0800c394
 8008978:	0800c398 	.word	0x0800c398
 800897c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800897e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008982:	4553      	cmp	r3, sl
 8008984:	bfa8      	it	ge
 8008986:	4653      	movge	r3, sl
 8008988:	2b00      	cmp	r3, #0
 800898a:	4699      	mov	r9, r3
 800898c:	dc36      	bgt.n	80089fc <_printf_float+0x360>
 800898e:	f04f 0b00 	mov.w	fp, #0
 8008992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008996:	f104 021a 	add.w	r2, r4, #26
 800899a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800899c:	9306      	str	r3, [sp, #24]
 800899e:	eba3 0309 	sub.w	r3, r3, r9
 80089a2:	455b      	cmp	r3, fp
 80089a4:	dc31      	bgt.n	8008a0a <_printf_float+0x36e>
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	459a      	cmp	sl, r3
 80089aa:	dc3a      	bgt.n	8008a22 <_printf_float+0x386>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	07da      	lsls	r2, r3, #31
 80089b0:	d437      	bmi.n	8008a22 <_printf_float+0x386>
 80089b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b4:	ebaa 0903 	sub.w	r9, sl, r3
 80089b8:	9b06      	ldr	r3, [sp, #24]
 80089ba:	ebaa 0303 	sub.w	r3, sl, r3
 80089be:	4599      	cmp	r9, r3
 80089c0:	bfa8      	it	ge
 80089c2:	4699      	movge	r9, r3
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	dc33      	bgt.n	8008a32 <_printf_float+0x396>
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089d2:	f104 0b1a 	add.w	fp, r4, #26
 80089d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089d8:	ebaa 0303 	sub.w	r3, sl, r3
 80089dc:	eba3 0309 	sub.w	r3, r3, r9
 80089e0:	4543      	cmp	r3, r8
 80089e2:	f77f af79 	ble.w	80088d8 <_printf_float+0x23c>
 80089e6:	2301      	movs	r3, #1
 80089e8:	465a      	mov	r2, fp
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b8      	blx	r7
 80089f0:	3001      	adds	r0, #1
 80089f2:	f43f aeae 	beq.w	8008752 <_printf_float+0xb6>
 80089f6:	f108 0801 	add.w	r8, r8, #1
 80089fa:	e7ec      	b.n	80089d6 <_printf_float+0x33a>
 80089fc:	4642      	mov	r2, r8
 80089fe:	4631      	mov	r1, r6
 8008a00:	4628      	mov	r0, r5
 8008a02:	47b8      	blx	r7
 8008a04:	3001      	adds	r0, #1
 8008a06:	d1c2      	bne.n	800898e <_printf_float+0x2f2>
 8008a08:	e6a3      	b.n	8008752 <_printf_float+0xb6>
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	9206      	str	r2, [sp, #24]
 8008a12:	47b8      	blx	r7
 8008a14:	3001      	adds	r0, #1
 8008a16:	f43f ae9c 	beq.w	8008752 <_printf_float+0xb6>
 8008a1a:	9a06      	ldr	r2, [sp, #24]
 8008a1c:	f10b 0b01 	add.w	fp, fp, #1
 8008a20:	e7bb      	b.n	800899a <_printf_float+0x2fe>
 8008a22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	d1c0      	bne.n	80089b2 <_printf_float+0x316>
 8008a30:	e68f      	b.n	8008752 <_printf_float+0xb6>
 8008a32:	9a06      	ldr	r2, [sp, #24]
 8008a34:	464b      	mov	r3, r9
 8008a36:	4442      	add	r2, r8
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d1c3      	bne.n	80089ca <_printf_float+0x32e>
 8008a42:	e686      	b.n	8008752 <_printf_float+0xb6>
 8008a44:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a48:	f1ba 0f01 	cmp.w	sl, #1
 8008a4c:	dc01      	bgt.n	8008a52 <_printf_float+0x3b6>
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d536      	bpl.n	8008ac0 <_printf_float+0x424>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4642      	mov	r2, r8
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae78 	beq.w	8008752 <_printf_float+0xb6>
 8008a62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae70 	beq.w	8008752 <_printf_float+0xb6>
 8008a72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a76:	2200      	movs	r2, #0
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a7e:	f7f7 fffb 	bl	8000a78 <__aeabi_dcmpeq>
 8008a82:	b9c0      	cbnz	r0, 8008ab6 <_printf_float+0x41a>
 8008a84:	4653      	mov	r3, sl
 8008a86:	f108 0201 	add.w	r2, r8, #1
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4628      	mov	r0, r5
 8008a8e:	47b8      	blx	r7
 8008a90:	3001      	adds	r0, #1
 8008a92:	d10c      	bne.n	8008aae <_printf_float+0x412>
 8008a94:	e65d      	b.n	8008752 <_printf_float+0xb6>
 8008a96:	2301      	movs	r3, #1
 8008a98:	465a      	mov	r2, fp
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	f43f ae56 	beq.w	8008752 <_printf_float+0xb6>
 8008aa6:	f108 0801 	add.w	r8, r8, #1
 8008aaa:	45d0      	cmp	r8, sl
 8008aac:	dbf3      	blt.n	8008a96 <_printf_float+0x3fa>
 8008aae:	464b      	mov	r3, r9
 8008ab0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ab4:	e6df      	b.n	8008876 <_printf_float+0x1da>
 8008ab6:	f04f 0800 	mov.w	r8, #0
 8008aba:	f104 0b1a 	add.w	fp, r4, #26
 8008abe:	e7f4      	b.n	8008aaa <_printf_float+0x40e>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4642      	mov	r2, r8
 8008ac4:	e7e1      	b.n	8008a8a <_printf_float+0x3ee>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	464a      	mov	r2, r9
 8008aca:	4631      	mov	r1, r6
 8008acc:	4628      	mov	r0, r5
 8008ace:	47b8      	blx	r7
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	f43f ae3e 	beq.w	8008752 <_printf_float+0xb6>
 8008ad6:	f108 0801 	add.w	r8, r8, #1
 8008ada:	68e3      	ldr	r3, [r4, #12]
 8008adc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ade:	1a5b      	subs	r3, r3, r1
 8008ae0:	4543      	cmp	r3, r8
 8008ae2:	dcf0      	bgt.n	8008ac6 <_printf_float+0x42a>
 8008ae4:	e6fc      	b.n	80088e0 <_printf_float+0x244>
 8008ae6:	f04f 0800 	mov.w	r8, #0
 8008aea:	f104 0919 	add.w	r9, r4, #25
 8008aee:	e7f4      	b.n	8008ada <_printf_float+0x43e>

08008af0 <_printf_common>:
 8008af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af4:	4616      	mov	r6, r2
 8008af6:	4698      	mov	r8, r3
 8008af8:	688a      	ldr	r2, [r1, #8]
 8008afa:	690b      	ldr	r3, [r1, #16]
 8008afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008b00:	4293      	cmp	r3, r2
 8008b02:	bfb8      	it	lt
 8008b04:	4613      	movlt	r3, r2
 8008b06:	6033      	str	r3, [r6, #0]
 8008b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	460c      	mov	r4, r1
 8008b10:	b10a      	cbz	r2, 8008b16 <_printf_common+0x26>
 8008b12:	3301      	adds	r3, #1
 8008b14:	6033      	str	r3, [r6, #0]
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	0699      	lsls	r1, r3, #26
 8008b1a:	bf42      	ittt	mi
 8008b1c:	6833      	ldrmi	r3, [r6, #0]
 8008b1e:	3302      	addmi	r3, #2
 8008b20:	6033      	strmi	r3, [r6, #0]
 8008b22:	6825      	ldr	r5, [r4, #0]
 8008b24:	f015 0506 	ands.w	r5, r5, #6
 8008b28:	d106      	bne.n	8008b38 <_printf_common+0x48>
 8008b2a:	f104 0a19 	add.w	sl, r4, #25
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	6832      	ldr	r2, [r6, #0]
 8008b32:	1a9b      	subs	r3, r3, r2
 8008b34:	42ab      	cmp	r3, r5
 8008b36:	dc26      	bgt.n	8008b86 <_printf_common+0x96>
 8008b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b3c:	6822      	ldr	r2, [r4, #0]
 8008b3e:	3b00      	subs	r3, #0
 8008b40:	bf18      	it	ne
 8008b42:	2301      	movne	r3, #1
 8008b44:	0692      	lsls	r2, r2, #26
 8008b46:	d42b      	bmi.n	8008ba0 <_printf_common+0xb0>
 8008b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	4638      	mov	r0, r7
 8008b50:	47c8      	blx	r9
 8008b52:	3001      	adds	r0, #1
 8008b54:	d01e      	beq.n	8008b94 <_printf_common+0xa4>
 8008b56:	6823      	ldr	r3, [r4, #0]
 8008b58:	6922      	ldr	r2, [r4, #16]
 8008b5a:	f003 0306 	and.w	r3, r3, #6
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	bf02      	ittt	eq
 8008b62:	68e5      	ldreq	r5, [r4, #12]
 8008b64:	6833      	ldreq	r3, [r6, #0]
 8008b66:	1aed      	subeq	r5, r5, r3
 8008b68:	68a3      	ldr	r3, [r4, #8]
 8008b6a:	bf0c      	ite	eq
 8008b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b70:	2500      	movne	r5, #0
 8008b72:	4293      	cmp	r3, r2
 8008b74:	bfc4      	itt	gt
 8008b76:	1a9b      	subgt	r3, r3, r2
 8008b78:	18ed      	addgt	r5, r5, r3
 8008b7a:	2600      	movs	r6, #0
 8008b7c:	341a      	adds	r4, #26
 8008b7e:	42b5      	cmp	r5, r6
 8008b80:	d11a      	bne.n	8008bb8 <_printf_common+0xc8>
 8008b82:	2000      	movs	r0, #0
 8008b84:	e008      	b.n	8008b98 <_printf_common+0xa8>
 8008b86:	2301      	movs	r3, #1
 8008b88:	4652      	mov	r2, sl
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	47c8      	blx	r9
 8008b90:	3001      	adds	r0, #1
 8008b92:	d103      	bne.n	8008b9c <_printf_common+0xac>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9c:	3501      	adds	r5, #1
 8008b9e:	e7c6      	b.n	8008b2e <_printf_common+0x3e>
 8008ba0:	18e1      	adds	r1, r4, r3
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	2030      	movs	r0, #48	@ 0x30
 8008ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008baa:	4422      	add	r2, r4
 8008bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	e7c7      	b.n	8008b48 <_printf_common+0x58>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	4622      	mov	r2, r4
 8008bbc:	4641      	mov	r1, r8
 8008bbe:	4638      	mov	r0, r7
 8008bc0:	47c8      	blx	r9
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d0e6      	beq.n	8008b94 <_printf_common+0xa4>
 8008bc6:	3601      	adds	r6, #1
 8008bc8:	e7d9      	b.n	8008b7e <_printf_common+0x8e>
	...

08008bcc <_printf_i>:
 8008bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	7e0f      	ldrb	r7, [r1, #24]
 8008bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bd4:	2f78      	cmp	r7, #120	@ 0x78
 8008bd6:	4691      	mov	r9, r2
 8008bd8:	4680      	mov	r8, r0
 8008bda:	460c      	mov	r4, r1
 8008bdc:	469a      	mov	sl, r3
 8008bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008be2:	d807      	bhi.n	8008bf4 <_printf_i+0x28>
 8008be4:	2f62      	cmp	r7, #98	@ 0x62
 8008be6:	d80a      	bhi.n	8008bfe <_printf_i+0x32>
 8008be8:	2f00      	cmp	r7, #0
 8008bea:	f000 80d2 	beq.w	8008d92 <_printf_i+0x1c6>
 8008bee:	2f58      	cmp	r7, #88	@ 0x58
 8008bf0:	f000 80b9 	beq.w	8008d66 <_printf_i+0x19a>
 8008bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bfc:	e03a      	b.n	8008c74 <_printf_i+0xa8>
 8008bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008c02:	2b15      	cmp	r3, #21
 8008c04:	d8f6      	bhi.n	8008bf4 <_printf_i+0x28>
 8008c06:	a101      	add	r1, pc, #4	@ (adr r1, 8008c0c <_printf_i+0x40>)
 8008c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c0c:	08008c65 	.word	0x08008c65
 8008c10:	08008c79 	.word	0x08008c79
 8008c14:	08008bf5 	.word	0x08008bf5
 8008c18:	08008bf5 	.word	0x08008bf5
 8008c1c:	08008bf5 	.word	0x08008bf5
 8008c20:	08008bf5 	.word	0x08008bf5
 8008c24:	08008c79 	.word	0x08008c79
 8008c28:	08008bf5 	.word	0x08008bf5
 8008c2c:	08008bf5 	.word	0x08008bf5
 8008c30:	08008bf5 	.word	0x08008bf5
 8008c34:	08008bf5 	.word	0x08008bf5
 8008c38:	08008d79 	.word	0x08008d79
 8008c3c:	08008ca3 	.word	0x08008ca3
 8008c40:	08008d33 	.word	0x08008d33
 8008c44:	08008bf5 	.word	0x08008bf5
 8008c48:	08008bf5 	.word	0x08008bf5
 8008c4c:	08008d9b 	.word	0x08008d9b
 8008c50:	08008bf5 	.word	0x08008bf5
 8008c54:	08008ca3 	.word	0x08008ca3
 8008c58:	08008bf5 	.word	0x08008bf5
 8008c5c:	08008bf5 	.word	0x08008bf5
 8008c60:	08008d3b 	.word	0x08008d3b
 8008c64:	6833      	ldr	r3, [r6, #0]
 8008c66:	1d1a      	adds	r2, r3, #4
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6032      	str	r2, [r6, #0]
 8008c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c74:	2301      	movs	r3, #1
 8008c76:	e09d      	b.n	8008db4 <_printf_i+0x1e8>
 8008c78:	6833      	ldr	r3, [r6, #0]
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	1d19      	adds	r1, r3, #4
 8008c7e:	6031      	str	r1, [r6, #0]
 8008c80:	0606      	lsls	r6, r0, #24
 8008c82:	d501      	bpl.n	8008c88 <_printf_i+0xbc>
 8008c84:	681d      	ldr	r5, [r3, #0]
 8008c86:	e003      	b.n	8008c90 <_printf_i+0xc4>
 8008c88:	0645      	lsls	r5, r0, #25
 8008c8a:	d5fb      	bpl.n	8008c84 <_printf_i+0xb8>
 8008c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	da03      	bge.n	8008c9c <_printf_i+0xd0>
 8008c94:	232d      	movs	r3, #45	@ 0x2d
 8008c96:	426d      	negs	r5, r5
 8008c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c9c:	4859      	ldr	r0, [pc, #356]	@ (8008e04 <_printf_i+0x238>)
 8008c9e:	230a      	movs	r3, #10
 8008ca0:	e011      	b.n	8008cc6 <_printf_i+0xfa>
 8008ca2:	6821      	ldr	r1, [r4, #0]
 8008ca4:	6833      	ldr	r3, [r6, #0]
 8008ca6:	0608      	lsls	r0, r1, #24
 8008ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008cac:	d402      	bmi.n	8008cb4 <_printf_i+0xe8>
 8008cae:	0649      	lsls	r1, r1, #25
 8008cb0:	bf48      	it	mi
 8008cb2:	b2ad      	uxthmi	r5, r5
 8008cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008cb6:	4853      	ldr	r0, [pc, #332]	@ (8008e04 <_printf_i+0x238>)
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	bf14      	ite	ne
 8008cbc:	230a      	movne	r3, #10
 8008cbe:	2308      	moveq	r3, #8
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008cc6:	6866      	ldr	r6, [r4, #4]
 8008cc8:	60a6      	str	r6, [r4, #8]
 8008cca:	2e00      	cmp	r6, #0
 8008ccc:	bfa2      	ittt	ge
 8008cce:	6821      	ldrge	r1, [r4, #0]
 8008cd0:	f021 0104 	bicge.w	r1, r1, #4
 8008cd4:	6021      	strge	r1, [r4, #0]
 8008cd6:	b90d      	cbnz	r5, 8008cdc <_printf_i+0x110>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d04b      	beq.n	8008d74 <_printf_i+0x1a8>
 8008cdc:	4616      	mov	r6, r2
 8008cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8008ce6:	5dc7      	ldrb	r7, [r0, r7]
 8008ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cec:	462f      	mov	r7, r5
 8008cee:	42bb      	cmp	r3, r7
 8008cf0:	460d      	mov	r5, r1
 8008cf2:	d9f4      	bls.n	8008cde <_printf_i+0x112>
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d10b      	bne.n	8008d10 <_printf_i+0x144>
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	07df      	lsls	r7, r3, #31
 8008cfc:	d508      	bpl.n	8008d10 <_printf_i+0x144>
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	6861      	ldr	r1, [r4, #4]
 8008d02:	4299      	cmp	r1, r3
 8008d04:	bfde      	ittt	le
 8008d06:	2330      	movle	r3, #48	@ 0x30
 8008d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d10:	1b92      	subs	r2, r2, r6
 8008d12:	6122      	str	r2, [r4, #16]
 8008d14:	f8cd a000 	str.w	sl, [sp]
 8008d18:	464b      	mov	r3, r9
 8008d1a:	aa03      	add	r2, sp, #12
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	4640      	mov	r0, r8
 8008d20:	f7ff fee6 	bl	8008af0 <_printf_common>
 8008d24:	3001      	adds	r0, #1
 8008d26:	d14a      	bne.n	8008dbe <_printf_i+0x1f2>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	b004      	add	sp, #16
 8008d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	f043 0320 	orr.w	r3, r3, #32
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	4833      	ldr	r0, [pc, #204]	@ (8008e08 <_printf_i+0x23c>)
 8008d3c:	2778      	movs	r7, #120	@ 0x78
 8008d3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	6831      	ldr	r1, [r6, #0]
 8008d46:	061f      	lsls	r7, r3, #24
 8008d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d4c:	d402      	bmi.n	8008d54 <_printf_i+0x188>
 8008d4e:	065f      	lsls	r7, r3, #25
 8008d50:	bf48      	it	mi
 8008d52:	b2ad      	uxthmi	r5, r5
 8008d54:	6031      	str	r1, [r6, #0]
 8008d56:	07d9      	lsls	r1, r3, #31
 8008d58:	bf44      	itt	mi
 8008d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d5e:	6023      	strmi	r3, [r4, #0]
 8008d60:	b11d      	cbz	r5, 8008d6a <_printf_i+0x19e>
 8008d62:	2310      	movs	r3, #16
 8008d64:	e7ac      	b.n	8008cc0 <_printf_i+0xf4>
 8008d66:	4827      	ldr	r0, [pc, #156]	@ (8008e04 <_printf_i+0x238>)
 8008d68:	e7e9      	b.n	8008d3e <_printf_i+0x172>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	f023 0320 	bic.w	r3, r3, #32
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	e7f6      	b.n	8008d62 <_printf_i+0x196>
 8008d74:	4616      	mov	r6, r2
 8008d76:	e7bd      	b.n	8008cf4 <_printf_i+0x128>
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	6825      	ldr	r5, [r4, #0]
 8008d7c:	6961      	ldr	r1, [r4, #20]
 8008d7e:	1d18      	adds	r0, r3, #4
 8008d80:	6030      	str	r0, [r6, #0]
 8008d82:	062e      	lsls	r6, r5, #24
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0x1c0>
 8008d88:	6019      	str	r1, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0x1c6>
 8008d8c:	0668      	lsls	r0, r5, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0x1bc>
 8008d90:	8019      	strh	r1, [r3, #0]
 8008d92:	2300      	movs	r3, #0
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	4616      	mov	r6, r2
 8008d98:	e7bc      	b.n	8008d14 <_printf_i+0x148>
 8008d9a:	6833      	ldr	r3, [r6, #0]
 8008d9c:	1d1a      	adds	r2, r3, #4
 8008d9e:	6032      	str	r2, [r6, #0]
 8008da0:	681e      	ldr	r6, [r3, #0]
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	2100      	movs	r1, #0
 8008da6:	4630      	mov	r0, r6
 8008da8:	f7f7 f9ea 	bl	8000180 <memchr>
 8008dac:	b108      	cbz	r0, 8008db2 <_printf_i+0x1e6>
 8008dae:	1b80      	subs	r0, r0, r6
 8008db0:	6060      	str	r0, [r4, #4]
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	6123      	str	r3, [r4, #16]
 8008db6:	2300      	movs	r3, #0
 8008db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008dbc:	e7aa      	b.n	8008d14 <_printf_i+0x148>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	4632      	mov	r2, r6
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	47d0      	blx	sl
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0ad      	beq.n	8008d28 <_printf_i+0x15c>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	079b      	lsls	r3, r3, #30
 8008dd0:	d413      	bmi.n	8008dfa <_printf_i+0x22e>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	4298      	cmp	r0, r3
 8008dd8:	bfb8      	it	lt
 8008dda:	4618      	movlt	r0, r3
 8008ddc:	e7a6      	b.n	8008d2c <_printf_i+0x160>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4632      	mov	r2, r6
 8008de2:	4649      	mov	r1, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	47d0      	blx	sl
 8008de8:	3001      	adds	r0, #1
 8008dea:	d09d      	beq.n	8008d28 <_printf_i+0x15c>
 8008dec:	3501      	adds	r5, #1
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	9903      	ldr	r1, [sp, #12]
 8008df2:	1a5b      	subs	r3, r3, r1
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	dcf2      	bgt.n	8008dde <_printf_i+0x212>
 8008df8:	e7eb      	b.n	8008dd2 <_printf_i+0x206>
 8008dfa:	2500      	movs	r5, #0
 8008dfc:	f104 0619 	add.w	r6, r4, #25
 8008e00:	e7f5      	b.n	8008dee <_printf_i+0x222>
 8008e02:	bf00      	nop
 8008e04:	0800c39a 	.word	0x0800c39a
 8008e08:	0800c3ab 	.word	0x0800c3ab

08008e0c <std>:
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	b510      	push	{r4, lr}
 8008e10:	4604      	mov	r4, r0
 8008e12:	e9c0 3300 	strd	r3, r3, [r0]
 8008e16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e1a:	6083      	str	r3, [r0, #8]
 8008e1c:	8181      	strh	r1, [r0, #12]
 8008e1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e20:	81c2      	strh	r2, [r0, #14]
 8008e22:	6183      	str	r3, [r0, #24]
 8008e24:	4619      	mov	r1, r3
 8008e26:	2208      	movs	r2, #8
 8008e28:	305c      	adds	r0, #92	@ 0x5c
 8008e2a:	f000 f9f9 	bl	8009220 <memset>
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e64 <std+0x58>)
 8008e30:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e32:	4b0d      	ldr	r3, [pc, #52]	@ (8008e68 <std+0x5c>)
 8008e34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e36:	4b0d      	ldr	r3, [pc, #52]	@ (8008e6c <std+0x60>)
 8008e38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e70 <std+0x64>)
 8008e3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e74 <std+0x68>)
 8008e40:	6224      	str	r4, [r4, #32]
 8008e42:	429c      	cmp	r4, r3
 8008e44:	d006      	beq.n	8008e54 <std+0x48>
 8008e46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e4a:	4294      	cmp	r4, r2
 8008e4c:	d002      	beq.n	8008e54 <std+0x48>
 8008e4e:	33d0      	adds	r3, #208	@ 0xd0
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d105      	bne.n	8008e60 <std+0x54>
 8008e54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e5c:	f000 ba5c 	b.w	8009318 <__retarget_lock_init_recursive>
 8008e60:	bd10      	pop	{r4, pc}
 8008e62:	bf00      	nop
 8008e64:	08009071 	.word	0x08009071
 8008e68:	08009093 	.word	0x08009093
 8008e6c:	080090cb 	.word	0x080090cb
 8008e70:	080090ef 	.word	0x080090ef
 8008e74:	200003e0 	.word	0x200003e0

08008e78 <stdio_exit_handler>:
 8008e78:	4a02      	ldr	r2, [pc, #8]	@ (8008e84 <stdio_exit_handler+0xc>)
 8008e7a:	4903      	ldr	r1, [pc, #12]	@ (8008e88 <stdio_exit_handler+0x10>)
 8008e7c:	4803      	ldr	r0, [pc, #12]	@ (8008e8c <stdio_exit_handler+0x14>)
 8008e7e:	f000 b869 	b.w	8008f54 <_fwalk_sglue>
 8008e82:	bf00      	nop
 8008e84:	2000002c 	.word	0x2000002c
 8008e88:	0800ac69 	.word	0x0800ac69
 8008e8c:	2000003c 	.word	0x2000003c

08008e90 <cleanup_stdio>:
 8008e90:	6841      	ldr	r1, [r0, #4]
 8008e92:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec4 <cleanup_stdio+0x34>)
 8008e94:	4299      	cmp	r1, r3
 8008e96:	b510      	push	{r4, lr}
 8008e98:	4604      	mov	r4, r0
 8008e9a:	d001      	beq.n	8008ea0 <cleanup_stdio+0x10>
 8008e9c:	f001 fee4 	bl	800ac68 <_fflush_r>
 8008ea0:	68a1      	ldr	r1, [r4, #8]
 8008ea2:	4b09      	ldr	r3, [pc, #36]	@ (8008ec8 <cleanup_stdio+0x38>)
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <cleanup_stdio+0x1e>
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 fedd 	bl	800ac68 <_fflush_r>
 8008eae:	68e1      	ldr	r1, [r4, #12]
 8008eb0:	4b06      	ldr	r3, [pc, #24]	@ (8008ecc <cleanup_stdio+0x3c>)
 8008eb2:	4299      	cmp	r1, r3
 8008eb4:	d004      	beq.n	8008ec0 <cleanup_stdio+0x30>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ebc:	f001 bed4 	b.w	800ac68 <_fflush_r>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200003e0 	.word	0x200003e0
 8008ec8:	20000448 	.word	0x20000448
 8008ecc:	200004b0 	.word	0x200004b0

08008ed0 <global_stdio_init.part.0>:
 8008ed0:	b510      	push	{r4, lr}
 8008ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f00 <global_stdio_init.part.0+0x30>)
 8008ed4:	4c0b      	ldr	r4, [pc, #44]	@ (8008f04 <global_stdio_init.part.0+0x34>)
 8008ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f08 <global_stdio_init.part.0+0x38>)
 8008ed8:	601a      	str	r2, [r3, #0]
 8008eda:	4620      	mov	r0, r4
 8008edc:	2200      	movs	r2, #0
 8008ede:	2104      	movs	r1, #4
 8008ee0:	f7ff ff94 	bl	8008e0c <std>
 8008ee4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ee8:	2201      	movs	r2, #1
 8008eea:	2109      	movs	r1, #9
 8008eec:	f7ff ff8e 	bl	8008e0c <std>
 8008ef0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008efa:	2112      	movs	r1, #18
 8008efc:	f7ff bf86 	b.w	8008e0c <std>
 8008f00:	20000518 	.word	0x20000518
 8008f04:	200003e0 	.word	0x200003e0
 8008f08:	08008e79 	.word	0x08008e79

08008f0c <__sfp_lock_acquire>:
 8008f0c:	4801      	ldr	r0, [pc, #4]	@ (8008f14 <__sfp_lock_acquire+0x8>)
 8008f0e:	f000 ba04 	b.w	800931a <__retarget_lock_acquire_recursive>
 8008f12:	bf00      	nop
 8008f14:	20000521 	.word	0x20000521

08008f18 <__sfp_lock_release>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__sfp_lock_release+0x8>)
 8008f1a:	f000 b9ff 	b.w	800931c <__retarget_lock_release_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20000521 	.word	0x20000521

08008f24 <__sinit>:
 8008f24:	b510      	push	{r4, lr}
 8008f26:	4604      	mov	r4, r0
 8008f28:	f7ff fff0 	bl	8008f0c <__sfp_lock_acquire>
 8008f2c:	6a23      	ldr	r3, [r4, #32]
 8008f2e:	b11b      	cbz	r3, 8008f38 <__sinit+0x14>
 8008f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f34:	f7ff bff0 	b.w	8008f18 <__sfp_lock_release>
 8008f38:	4b04      	ldr	r3, [pc, #16]	@ (8008f4c <__sinit+0x28>)
 8008f3a:	6223      	str	r3, [r4, #32]
 8008f3c:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <__sinit+0x2c>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1f5      	bne.n	8008f30 <__sinit+0xc>
 8008f44:	f7ff ffc4 	bl	8008ed0 <global_stdio_init.part.0>
 8008f48:	e7f2      	b.n	8008f30 <__sinit+0xc>
 8008f4a:	bf00      	nop
 8008f4c:	08008e91 	.word	0x08008e91
 8008f50:	20000518 	.word	0x20000518

08008f54 <_fwalk_sglue>:
 8008f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f58:	4607      	mov	r7, r0
 8008f5a:	4688      	mov	r8, r1
 8008f5c:	4614      	mov	r4, r2
 8008f5e:	2600      	movs	r6, #0
 8008f60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f64:	f1b9 0901 	subs.w	r9, r9, #1
 8008f68:	d505      	bpl.n	8008f76 <_fwalk_sglue+0x22>
 8008f6a:	6824      	ldr	r4, [r4, #0]
 8008f6c:	2c00      	cmp	r4, #0
 8008f6e:	d1f7      	bne.n	8008f60 <_fwalk_sglue+0xc>
 8008f70:	4630      	mov	r0, r6
 8008f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f76:	89ab      	ldrh	r3, [r5, #12]
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d907      	bls.n	8008f8c <_fwalk_sglue+0x38>
 8008f7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f80:	3301      	adds	r3, #1
 8008f82:	d003      	beq.n	8008f8c <_fwalk_sglue+0x38>
 8008f84:	4629      	mov	r1, r5
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c0      	blx	r8
 8008f8a:	4306      	orrs	r6, r0
 8008f8c:	3568      	adds	r5, #104	@ 0x68
 8008f8e:	e7e9      	b.n	8008f64 <_fwalk_sglue+0x10>

08008f90 <iprintf>:
 8008f90:	b40f      	push	{r0, r1, r2, r3}
 8008f92:	b507      	push	{r0, r1, r2, lr}
 8008f94:	4906      	ldr	r1, [pc, #24]	@ (8008fb0 <iprintf+0x20>)
 8008f96:	ab04      	add	r3, sp, #16
 8008f98:	6808      	ldr	r0, [r1, #0]
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	6881      	ldr	r1, [r0, #8]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f001 fcc5 	bl	800a930 <_vfiprintf_r>
 8008fa6:	b003      	add	sp, #12
 8008fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fac:	b004      	add	sp, #16
 8008fae:	4770      	bx	lr
 8008fb0:	20000038 	.word	0x20000038

08008fb4 <_puts_r>:
 8008fb4:	6a03      	ldr	r3, [r0, #32]
 8008fb6:	b570      	push	{r4, r5, r6, lr}
 8008fb8:	6884      	ldr	r4, [r0, #8]
 8008fba:	4605      	mov	r5, r0
 8008fbc:	460e      	mov	r6, r1
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <_puts_r+0x10>
 8008fc0:	f7ff ffb0 	bl	8008f24 <__sinit>
 8008fc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	d405      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	0598      	lsls	r0, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_puts_r+0x22>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fd2:	f000 f9a2 	bl	800931a <__retarget_lock_acquire_recursive>
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	0719      	lsls	r1, r3, #28
 8008fda:	d502      	bpl.n	8008fe2 <_puts_r+0x2e>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d135      	bne.n	800904e <_puts_r+0x9a>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	f000 f8c5 	bl	8009174 <__swsetup_r>
 8008fea:	b380      	cbz	r0, 800904e <_puts_r+0x9a>
 8008fec:	f04f 35ff 	mov.w	r5, #4294967295
 8008ff0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ff2:	07da      	lsls	r2, r3, #31
 8008ff4:	d405      	bmi.n	8009002 <_puts_r+0x4e>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	059b      	lsls	r3, r3, #22
 8008ffa:	d402      	bmi.n	8009002 <_puts_r+0x4e>
 8008ffc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ffe:	f000 f98d 	bl	800931c <__retarget_lock_release_recursive>
 8009002:	4628      	mov	r0, r5
 8009004:	bd70      	pop	{r4, r5, r6, pc}
 8009006:	2b00      	cmp	r3, #0
 8009008:	da04      	bge.n	8009014 <_puts_r+0x60>
 800900a:	69a2      	ldr	r2, [r4, #24]
 800900c:	429a      	cmp	r2, r3
 800900e:	dc17      	bgt.n	8009040 <_puts_r+0x8c>
 8009010:	290a      	cmp	r1, #10
 8009012:	d015      	beq.n	8009040 <_puts_r+0x8c>
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	1c5a      	adds	r2, r3, #1
 8009018:	6022      	str	r2, [r4, #0]
 800901a:	7019      	strb	r1, [r3, #0]
 800901c:	68a3      	ldr	r3, [r4, #8]
 800901e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009022:	3b01      	subs	r3, #1
 8009024:	60a3      	str	r3, [r4, #8]
 8009026:	2900      	cmp	r1, #0
 8009028:	d1ed      	bne.n	8009006 <_puts_r+0x52>
 800902a:	2b00      	cmp	r3, #0
 800902c:	da11      	bge.n	8009052 <_puts_r+0x9e>
 800902e:	4622      	mov	r2, r4
 8009030:	210a      	movs	r1, #10
 8009032:	4628      	mov	r0, r5
 8009034:	f000 f85f 	bl	80090f6 <__swbuf_r>
 8009038:	3001      	adds	r0, #1
 800903a:	d0d7      	beq.n	8008fec <_puts_r+0x38>
 800903c:	250a      	movs	r5, #10
 800903e:	e7d7      	b.n	8008ff0 <_puts_r+0x3c>
 8009040:	4622      	mov	r2, r4
 8009042:	4628      	mov	r0, r5
 8009044:	f000 f857 	bl	80090f6 <__swbuf_r>
 8009048:	3001      	adds	r0, #1
 800904a:	d1e7      	bne.n	800901c <_puts_r+0x68>
 800904c:	e7ce      	b.n	8008fec <_puts_r+0x38>
 800904e:	3e01      	subs	r6, #1
 8009050:	e7e4      	b.n	800901c <_puts_r+0x68>
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	1c5a      	adds	r2, r3, #1
 8009056:	6022      	str	r2, [r4, #0]
 8009058:	220a      	movs	r2, #10
 800905a:	701a      	strb	r2, [r3, #0]
 800905c:	e7ee      	b.n	800903c <_puts_r+0x88>
	...

08009060 <puts>:
 8009060:	4b02      	ldr	r3, [pc, #8]	@ (800906c <puts+0xc>)
 8009062:	4601      	mov	r1, r0
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	f7ff bfa5 	b.w	8008fb4 <_puts_r>
 800906a:	bf00      	nop
 800906c:	20000038 	.word	0x20000038

08009070 <__sread>:
 8009070:	b510      	push	{r4, lr}
 8009072:	460c      	mov	r4, r1
 8009074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009078:	f000 f900 	bl	800927c <_read_r>
 800907c:	2800      	cmp	r0, #0
 800907e:	bfab      	itete	ge
 8009080:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009082:	89a3      	ldrhlt	r3, [r4, #12]
 8009084:	181b      	addge	r3, r3, r0
 8009086:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800908a:	bfac      	ite	ge
 800908c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800908e:	81a3      	strhlt	r3, [r4, #12]
 8009090:	bd10      	pop	{r4, pc}

08009092 <__swrite>:
 8009092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009096:	461f      	mov	r7, r3
 8009098:	898b      	ldrh	r3, [r1, #12]
 800909a:	05db      	lsls	r3, r3, #23
 800909c:	4605      	mov	r5, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	4616      	mov	r6, r2
 80090a2:	d505      	bpl.n	80090b0 <__swrite+0x1e>
 80090a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a8:	2302      	movs	r3, #2
 80090aa:	2200      	movs	r2, #0
 80090ac:	f000 f8d4 	bl	8009258 <_lseek_r>
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80090ba:	81a3      	strh	r3, [r4, #12]
 80090bc:	4632      	mov	r2, r6
 80090be:	463b      	mov	r3, r7
 80090c0:	4628      	mov	r0, r5
 80090c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c6:	f000 b8eb 	b.w	80092a0 <_write_r>

080090ca <__sseek>:
 80090ca:	b510      	push	{r4, lr}
 80090cc:	460c      	mov	r4, r1
 80090ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090d2:	f000 f8c1 	bl	8009258 <_lseek_r>
 80090d6:	1c43      	adds	r3, r0, #1
 80090d8:	89a3      	ldrh	r3, [r4, #12]
 80090da:	bf15      	itete	ne
 80090dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090e6:	81a3      	strheq	r3, [r4, #12]
 80090e8:	bf18      	it	ne
 80090ea:	81a3      	strhne	r3, [r4, #12]
 80090ec:	bd10      	pop	{r4, pc}

080090ee <__sclose>:
 80090ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090f2:	f000 b8a1 	b.w	8009238 <_close_r>

080090f6 <__swbuf_r>:
 80090f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f8:	460e      	mov	r6, r1
 80090fa:	4614      	mov	r4, r2
 80090fc:	4605      	mov	r5, r0
 80090fe:	b118      	cbz	r0, 8009108 <__swbuf_r+0x12>
 8009100:	6a03      	ldr	r3, [r0, #32]
 8009102:	b90b      	cbnz	r3, 8009108 <__swbuf_r+0x12>
 8009104:	f7ff ff0e 	bl	8008f24 <__sinit>
 8009108:	69a3      	ldr	r3, [r4, #24]
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	071a      	lsls	r2, r3, #28
 8009110:	d501      	bpl.n	8009116 <__swbuf_r+0x20>
 8009112:	6923      	ldr	r3, [r4, #16]
 8009114:	b943      	cbnz	r3, 8009128 <__swbuf_r+0x32>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f000 f82b 	bl	8009174 <__swsetup_r>
 800911e:	b118      	cbz	r0, 8009128 <__swbuf_r+0x32>
 8009120:	f04f 37ff 	mov.w	r7, #4294967295
 8009124:	4638      	mov	r0, r7
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	6922      	ldr	r2, [r4, #16]
 800912c:	1a98      	subs	r0, r3, r2
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	b2f6      	uxtb	r6, r6
 8009132:	4283      	cmp	r3, r0
 8009134:	4637      	mov	r7, r6
 8009136:	dc05      	bgt.n	8009144 <__swbuf_r+0x4e>
 8009138:	4621      	mov	r1, r4
 800913a:	4628      	mov	r0, r5
 800913c:	f001 fd94 	bl	800ac68 <_fflush_r>
 8009140:	2800      	cmp	r0, #0
 8009142:	d1ed      	bne.n	8009120 <__swbuf_r+0x2a>
 8009144:	68a3      	ldr	r3, [r4, #8]
 8009146:	3b01      	subs	r3, #1
 8009148:	60a3      	str	r3, [r4, #8]
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	6022      	str	r2, [r4, #0]
 8009150:	701e      	strb	r6, [r3, #0]
 8009152:	6962      	ldr	r2, [r4, #20]
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	429a      	cmp	r2, r3
 8009158:	d004      	beq.n	8009164 <__swbuf_r+0x6e>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	07db      	lsls	r3, r3, #31
 800915e:	d5e1      	bpl.n	8009124 <__swbuf_r+0x2e>
 8009160:	2e0a      	cmp	r6, #10
 8009162:	d1df      	bne.n	8009124 <__swbuf_r+0x2e>
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f001 fd7e 	bl	800ac68 <_fflush_r>
 800916c:	2800      	cmp	r0, #0
 800916e:	d0d9      	beq.n	8009124 <__swbuf_r+0x2e>
 8009170:	e7d6      	b.n	8009120 <__swbuf_r+0x2a>
	...

08009174 <__swsetup_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4b29      	ldr	r3, [pc, #164]	@ (800921c <__swsetup_r+0xa8>)
 8009178:	4605      	mov	r5, r0
 800917a:	6818      	ldr	r0, [r3, #0]
 800917c:	460c      	mov	r4, r1
 800917e:	b118      	cbz	r0, 8009188 <__swsetup_r+0x14>
 8009180:	6a03      	ldr	r3, [r0, #32]
 8009182:	b90b      	cbnz	r3, 8009188 <__swsetup_r+0x14>
 8009184:	f7ff fece 	bl	8008f24 <__sinit>
 8009188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918c:	0719      	lsls	r1, r3, #28
 800918e:	d422      	bmi.n	80091d6 <__swsetup_r+0x62>
 8009190:	06da      	lsls	r2, r3, #27
 8009192:	d407      	bmi.n	80091a4 <__swsetup_r+0x30>
 8009194:	2209      	movs	r2, #9
 8009196:	602a      	str	r2, [r5, #0]
 8009198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800919c:	81a3      	strh	r3, [r4, #12]
 800919e:	f04f 30ff 	mov.w	r0, #4294967295
 80091a2:	e033      	b.n	800920c <__swsetup_r+0x98>
 80091a4:	0758      	lsls	r0, r3, #29
 80091a6:	d512      	bpl.n	80091ce <__swsetup_r+0x5a>
 80091a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091aa:	b141      	cbz	r1, 80091be <__swsetup_r+0x4a>
 80091ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091b0:	4299      	cmp	r1, r3
 80091b2:	d002      	beq.n	80091ba <__swsetup_r+0x46>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 ff0f 	bl	8009fd8 <_free_r>
 80091ba:	2300      	movs	r3, #0
 80091bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091be:	89a3      	ldrh	r3, [r4, #12]
 80091c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	2300      	movs	r3, #0
 80091c8:	6063      	str	r3, [r4, #4]
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6023      	str	r3, [r4, #0]
 80091ce:	89a3      	ldrh	r3, [r4, #12]
 80091d0:	f043 0308 	orr.w	r3, r3, #8
 80091d4:	81a3      	strh	r3, [r4, #12]
 80091d6:	6923      	ldr	r3, [r4, #16]
 80091d8:	b94b      	cbnz	r3, 80091ee <__swsetup_r+0x7a>
 80091da:	89a3      	ldrh	r3, [r4, #12]
 80091dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091e4:	d003      	beq.n	80091ee <__swsetup_r+0x7a>
 80091e6:	4621      	mov	r1, r4
 80091e8:	4628      	mov	r0, r5
 80091ea:	f001 fd8b 	bl	800ad04 <__smakebuf_r>
 80091ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091f2:	f013 0201 	ands.w	r2, r3, #1
 80091f6:	d00a      	beq.n	800920e <__swsetup_r+0x9a>
 80091f8:	2200      	movs	r2, #0
 80091fa:	60a2      	str	r2, [r4, #8]
 80091fc:	6962      	ldr	r2, [r4, #20]
 80091fe:	4252      	negs	r2, r2
 8009200:	61a2      	str	r2, [r4, #24]
 8009202:	6922      	ldr	r2, [r4, #16]
 8009204:	b942      	cbnz	r2, 8009218 <__swsetup_r+0xa4>
 8009206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800920a:	d1c5      	bne.n	8009198 <__swsetup_r+0x24>
 800920c:	bd38      	pop	{r3, r4, r5, pc}
 800920e:	0799      	lsls	r1, r3, #30
 8009210:	bf58      	it	pl
 8009212:	6962      	ldrpl	r2, [r4, #20]
 8009214:	60a2      	str	r2, [r4, #8]
 8009216:	e7f4      	b.n	8009202 <__swsetup_r+0x8e>
 8009218:	2000      	movs	r0, #0
 800921a:	e7f7      	b.n	800920c <__swsetup_r+0x98>
 800921c:	20000038 	.word	0x20000038

08009220 <memset>:
 8009220:	4402      	add	r2, r0
 8009222:	4603      	mov	r3, r0
 8009224:	4293      	cmp	r3, r2
 8009226:	d100      	bne.n	800922a <memset+0xa>
 8009228:	4770      	bx	lr
 800922a:	f803 1b01 	strb.w	r1, [r3], #1
 800922e:	e7f9      	b.n	8009224 <memset+0x4>

08009230 <_localeconv_r>:
 8009230:	4800      	ldr	r0, [pc, #0]	@ (8009234 <_localeconv_r+0x4>)
 8009232:	4770      	bx	lr
 8009234:	20000178 	.word	0x20000178

08009238 <_close_r>:
 8009238:	b538      	push	{r3, r4, r5, lr}
 800923a:	4d06      	ldr	r5, [pc, #24]	@ (8009254 <_close_r+0x1c>)
 800923c:	2300      	movs	r3, #0
 800923e:	4604      	mov	r4, r0
 8009240:	4608      	mov	r0, r1
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	f7f8 fa62 	bl	800170c <_close>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_close_r+0x1a>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_close_r+0x1a>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	2000051c 	.word	0x2000051c

08009258 <_lseek_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_lseek_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f8 fa77 	bl	800175a <_lseek>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_lseek_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_lseek_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	2000051c 	.word	0x2000051c

0800927c <_read_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_read_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 fa21 	bl	80016d2 <_read>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_read_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_read_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	2000051c 	.word	0x2000051c

080092a0 <_write_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d07      	ldr	r5, [pc, #28]	@ (80092c0 <_write_r+0x20>)
 80092a4:	4604      	mov	r4, r0
 80092a6:	4608      	mov	r0, r1
 80092a8:	4611      	mov	r1, r2
 80092aa:	2200      	movs	r2, #0
 80092ac:	602a      	str	r2, [r5, #0]
 80092ae:	461a      	mov	r2, r3
 80092b0:	f7f7 fe0a 	bl	8000ec8 <_write>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_write_r+0x1e>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_write_r+0x1e>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	2000051c 	.word	0x2000051c

080092c4 <__errno>:
 80092c4:	4b01      	ldr	r3, [pc, #4]	@ (80092cc <__errno+0x8>)
 80092c6:	6818      	ldr	r0, [r3, #0]
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	20000038 	.word	0x20000038

080092d0 <__libc_init_array>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009308 <__libc_init_array+0x38>)
 80092d4:	4c0d      	ldr	r4, [pc, #52]	@ (800930c <__libc_init_array+0x3c>)
 80092d6:	1b64      	subs	r4, r4, r5
 80092d8:	10a4      	asrs	r4, r4, #2
 80092da:	2600      	movs	r6, #0
 80092dc:	42a6      	cmp	r6, r4
 80092de:	d109      	bne.n	80092f4 <__libc_init_array+0x24>
 80092e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009310 <__libc_init_array+0x40>)
 80092e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009314 <__libc_init_array+0x44>)
 80092e4:	f001 fe66 	bl	800afb4 <_init>
 80092e8:	1b64      	subs	r4, r4, r5
 80092ea:	10a4      	asrs	r4, r4, #2
 80092ec:	2600      	movs	r6, #0
 80092ee:	42a6      	cmp	r6, r4
 80092f0:	d105      	bne.n	80092fe <__libc_init_array+0x2e>
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092f8:	4798      	blx	r3
 80092fa:	3601      	adds	r6, #1
 80092fc:	e7ee      	b.n	80092dc <__libc_init_array+0xc>
 80092fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009302:	4798      	blx	r3
 8009304:	3601      	adds	r6, #1
 8009306:	e7f2      	b.n	80092ee <__libc_init_array+0x1e>
 8009308:	0800c700 	.word	0x0800c700
 800930c:	0800c700 	.word	0x0800c700
 8009310:	0800c700 	.word	0x0800c700
 8009314:	0800c704 	.word	0x0800c704

08009318 <__retarget_lock_init_recursive>:
 8009318:	4770      	bx	lr

0800931a <__retarget_lock_acquire_recursive>:
 800931a:	4770      	bx	lr

0800931c <__retarget_lock_release_recursive>:
 800931c:	4770      	bx	lr

0800931e <memcpy>:
 800931e:	440a      	add	r2, r1
 8009320:	4291      	cmp	r1, r2
 8009322:	f100 33ff 	add.w	r3, r0, #4294967295
 8009326:	d100      	bne.n	800932a <memcpy+0xc>
 8009328:	4770      	bx	lr
 800932a:	b510      	push	{r4, lr}
 800932c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009334:	4291      	cmp	r1, r2
 8009336:	d1f9      	bne.n	800932c <memcpy+0xe>
 8009338:	bd10      	pop	{r4, pc}

0800933a <quorem>:
 800933a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800933e:	6903      	ldr	r3, [r0, #16]
 8009340:	690c      	ldr	r4, [r1, #16]
 8009342:	42a3      	cmp	r3, r4
 8009344:	4607      	mov	r7, r0
 8009346:	db7e      	blt.n	8009446 <quorem+0x10c>
 8009348:	3c01      	subs	r4, #1
 800934a:	f101 0814 	add.w	r8, r1, #20
 800934e:	00a3      	lsls	r3, r4, #2
 8009350:	f100 0514 	add.w	r5, r0, #20
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009364:	3301      	adds	r3, #1
 8009366:	429a      	cmp	r2, r3
 8009368:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800936c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009370:	d32e      	bcc.n	80093d0 <quorem+0x96>
 8009372:	f04f 0a00 	mov.w	sl, #0
 8009376:	46c4      	mov	ip, r8
 8009378:	46ae      	mov	lr, r5
 800937a:	46d3      	mov	fp, sl
 800937c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009380:	b298      	uxth	r0, r3
 8009382:	fb06 a000 	mla	r0, r6, r0, sl
 8009386:	0c02      	lsrs	r2, r0, #16
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	fb06 2303 	mla	r3, r6, r3, r2
 800938e:	f8de 2000 	ldr.w	r2, [lr]
 8009392:	b280      	uxth	r0, r0
 8009394:	b292      	uxth	r2, r2
 8009396:	1a12      	subs	r2, r2, r0
 8009398:	445a      	add	r2, fp
 800939a:	f8de 0000 	ldr.w	r0, [lr]
 800939e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80093a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80093ac:	b292      	uxth	r2, r2
 80093ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80093b2:	45e1      	cmp	r9, ip
 80093b4:	f84e 2b04 	str.w	r2, [lr], #4
 80093b8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093bc:	d2de      	bcs.n	800937c <quorem+0x42>
 80093be:	9b00      	ldr	r3, [sp, #0]
 80093c0:	58eb      	ldr	r3, [r5, r3]
 80093c2:	b92b      	cbnz	r3, 80093d0 <quorem+0x96>
 80093c4:	9b01      	ldr	r3, [sp, #4]
 80093c6:	3b04      	subs	r3, #4
 80093c8:	429d      	cmp	r5, r3
 80093ca:	461a      	mov	r2, r3
 80093cc:	d32f      	bcc.n	800942e <quorem+0xf4>
 80093ce:	613c      	str	r4, [r7, #16]
 80093d0:	4638      	mov	r0, r7
 80093d2:	f001 f97b 	bl	800a6cc <__mcmp>
 80093d6:	2800      	cmp	r0, #0
 80093d8:	db25      	blt.n	8009426 <quorem+0xec>
 80093da:	4629      	mov	r1, r5
 80093dc:	2000      	movs	r0, #0
 80093de:	f858 2b04 	ldr.w	r2, [r8], #4
 80093e2:	f8d1 c000 	ldr.w	ip, [r1]
 80093e6:	fa1f fe82 	uxth.w	lr, r2
 80093ea:	fa1f f38c 	uxth.w	r3, ip
 80093ee:	eba3 030e 	sub.w	r3, r3, lr
 80093f2:	4403      	add	r3, r0
 80093f4:	0c12      	lsrs	r2, r2, #16
 80093f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093fe:	b29b      	uxth	r3, r3
 8009400:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009404:	45c1      	cmp	r9, r8
 8009406:	f841 3b04 	str.w	r3, [r1], #4
 800940a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800940e:	d2e6      	bcs.n	80093de <quorem+0xa4>
 8009410:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009414:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009418:	b922      	cbnz	r2, 8009424 <quorem+0xea>
 800941a:	3b04      	subs	r3, #4
 800941c:	429d      	cmp	r5, r3
 800941e:	461a      	mov	r2, r3
 8009420:	d30b      	bcc.n	800943a <quorem+0x100>
 8009422:	613c      	str	r4, [r7, #16]
 8009424:	3601      	adds	r6, #1
 8009426:	4630      	mov	r0, r6
 8009428:	b003      	add	sp, #12
 800942a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800942e:	6812      	ldr	r2, [r2, #0]
 8009430:	3b04      	subs	r3, #4
 8009432:	2a00      	cmp	r2, #0
 8009434:	d1cb      	bne.n	80093ce <quorem+0x94>
 8009436:	3c01      	subs	r4, #1
 8009438:	e7c6      	b.n	80093c8 <quorem+0x8e>
 800943a:	6812      	ldr	r2, [r2, #0]
 800943c:	3b04      	subs	r3, #4
 800943e:	2a00      	cmp	r2, #0
 8009440:	d1ef      	bne.n	8009422 <quorem+0xe8>
 8009442:	3c01      	subs	r4, #1
 8009444:	e7ea      	b.n	800941c <quorem+0xe2>
 8009446:	2000      	movs	r0, #0
 8009448:	e7ee      	b.n	8009428 <quorem+0xee>
 800944a:	0000      	movs	r0, r0
 800944c:	0000      	movs	r0, r0
	...

08009450 <_dtoa_r>:
 8009450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009454:	69c7      	ldr	r7, [r0, #28]
 8009456:	b099      	sub	sp, #100	@ 0x64
 8009458:	ed8d 0b02 	vstr	d0, [sp, #8]
 800945c:	ec55 4b10 	vmov	r4, r5, d0
 8009460:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009462:	9109      	str	r1, [sp, #36]	@ 0x24
 8009464:	4683      	mov	fp, r0
 8009466:	920e      	str	r2, [sp, #56]	@ 0x38
 8009468:	9313      	str	r3, [sp, #76]	@ 0x4c
 800946a:	b97f      	cbnz	r7, 800948c <_dtoa_r+0x3c>
 800946c:	2010      	movs	r0, #16
 800946e:	f000 fdfd 	bl	800a06c <malloc>
 8009472:	4602      	mov	r2, r0
 8009474:	f8cb 001c 	str.w	r0, [fp, #28]
 8009478:	b920      	cbnz	r0, 8009484 <_dtoa_r+0x34>
 800947a:	4ba7      	ldr	r3, [pc, #668]	@ (8009718 <_dtoa_r+0x2c8>)
 800947c:	21ef      	movs	r1, #239	@ 0xef
 800947e:	48a7      	ldr	r0, [pc, #668]	@ (800971c <_dtoa_r+0x2cc>)
 8009480:	f001 fcae 	bl	800ade0 <__assert_func>
 8009484:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009488:	6007      	str	r7, [r0, #0]
 800948a:	60c7      	str	r7, [r0, #12]
 800948c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009490:	6819      	ldr	r1, [r3, #0]
 8009492:	b159      	cbz	r1, 80094ac <_dtoa_r+0x5c>
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	604a      	str	r2, [r1, #4]
 8009498:	2301      	movs	r3, #1
 800949a:	4093      	lsls	r3, r2
 800949c:	608b      	str	r3, [r1, #8]
 800949e:	4658      	mov	r0, fp
 80094a0:	f000 feda 	bl	800a258 <_Bfree>
 80094a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	1e2b      	subs	r3, r5, #0
 80094ae:	bfb9      	ittee	lt
 80094b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80094b4:	9303      	strlt	r3, [sp, #12]
 80094b6:	2300      	movge	r3, #0
 80094b8:	6033      	strge	r3, [r6, #0]
 80094ba:	9f03      	ldr	r7, [sp, #12]
 80094bc:	4b98      	ldr	r3, [pc, #608]	@ (8009720 <_dtoa_r+0x2d0>)
 80094be:	bfbc      	itt	lt
 80094c0:	2201      	movlt	r2, #1
 80094c2:	6032      	strlt	r2, [r6, #0]
 80094c4:	43bb      	bics	r3, r7
 80094c6:	d112      	bne.n	80094ee <_dtoa_r+0x9e>
 80094c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094d4:	4323      	orrs	r3, r4
 80094d6:	f000 854d 	beq.w	8009f74 <_dtoa_r+0xb24>
 80094da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009734 <_dtoa_r+0x2e4>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 854f 	beq.w	8009f84 <_dtoa_r+0xb34>
 80094e6:	f10a 0303 	add.w	r3, sl, #3
 80094ea:	f000 bd49 	b.w	8009f80 <_dtoa_r+0xb30>
 80094ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094f2:	2200      	movs	r2, #0
 80094f4:	ec51 0b17 	vmov	r0, r1, d7
 80094f8:	2300      	movs	r3, #0
 80094fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094fe:	f7f7 fabb 	bl	8000a78 <__aeabi_dcmpeq>
 8009502:	4680      	mov	r8, r0
 8009504:	b158      	cbz	r0, 800951e <_dtoa_r+0xce>
 8009506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009508:	2301      	movs	r3, #1
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800950e:	b113      	cbz	r3, 8009516 <_dtoa_r+0xc6>
 8009510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009512:	4b84      	ldr	r3, [pc, #528]	@ (8009724 <_dtoa_r+0x2d4>)
 8009514:	6013      	str	r3, [r2, #0]
 8009516:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009738 <_dtoa_r+0x2e8>
 800951a:	f000 bd33 	b.w	8009f84 <_dtoa_r+0xb34>
 800951e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009522:	aa16      	add	r2, sp, #88	@ 0x58
 8009524:	a917      	add	r1, sp, #92	@ 0x5c
 8009526:	4658      	mov	r0, fp
 8009528:	f001 f980 	bl	800a82c <__d2b>
 800952c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009530:	4681      	mov	r9, r0
 8009532:	2e00      	cmp	r6, #0
 8009534:	d077      	beq.n	8009626 <_dtoa_r+0x1d6>
 8009536:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009538:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800953c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009544:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009548:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800954c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009550:	4619      	mov	r1, r3
 8009552:	2200      	movs	r2, #0
 8009554:	4b74      	ldr	r3, [pc, #464]	@ (8009728 <_dtoa_r+0x2d8>)
 8009556:	f7f6 fe6f 	bl	8000238 <__aeabi_dsub>
 800955a:	a369      	add	r3, pc, #420	@ (adr r3, 8009700 <_dtoa_r+0x2b0>)
 800955c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009560:	f7f7 f822 	bl	80005a8 <__aeabi_dmul>
 8009564:	a368      	add	r3, pc, #416	@ (adr r3, 8009708 <_dtoa_r+0x2b8>)
 8009566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956a:	f7f6 fe67 	bl	800023c <__adddf3>
 800956e:	4604      	mov	r4, r0
 8009570:	4630      	mov	r0, r6
 8009572:	460d      	mov	r5, r1
 8009574:	f7f6 ffae 	bl	80004d4 <__aeabi_i2d>
 8009578:	a365      	add	r3, pc, #404	@ (adr r3, 8009710 <_dtoa_r+0x2c0>)
 800957a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957e:	f7f7 f813 	bl	80005a8 <__aeabi_dmul>
 8009582:	4602      	mov	r2, r0
 8009584:	460b      	mov	r3, r1
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f6 fe57 	bl	800023c <__adddf3>
 800958e:	4604      	mov	r4, r0
 8009590:	460d      	mov	r5, r1
 8009592:	f7f7 fab9 	bl	8000b08 <__aeabi_d2iz>
 8009596:	2200      	movs	r2, #0
 8009598:	4607      	mov	r7, r0
 800959a:	2300      	movs	r3, #0
 800959c:	4620      	mov	r0, r4
 800959e:	4629      	mov	r1, r5
 80095a0:	f7f7 fa74 	bl	8000a8c <__aeabi_dcmplt>
 80095a4:	b140      	cbz	r0, 80095b8 <_dtoa_r+0x168>
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7f6 ff94 	bl	80004d4 <__aeabi_i2d>
 80095ac:	4622      	mov	r2, r4
 80095ae:	462b      	mov	r3, r5
 80095b0:	f7f7 fa62 	bl	8000a78 <__aeabi_dcmpeq>
 80095b4:	b900      	cbnz	r0, 80095b8 <_dtoa_r+0x168>
 80095b6:	3f01      	subs	r7, #1
 80095b8:	2f16      	cmp	r7, #22
 80095ba:	d851      	bhi.n	8009660 <_dtoa_r+0x210>
 80095bc:	4b5b      	ldr	r3, [pc, #364]	@ (800972c <_dtoa_r+0x2dc>)
 80095be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ca:	f7f7 fa5f 	bl	8000a8c <__aeabi_dcmplt>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d048      	beq.n	8009664 <_dtoa_r+0x214>
 80095d2:	3f01      	subs	r7, #1
 80095d4:	2300      	movs	r3, #0
 80095d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80095d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095da:	1b9b      	subs	r3, r3, r6
 80095dc:	1e5a      	subs	r2, r3, #1
 80095de:	bf44      	itt	mi
 80095e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80095e4:	2300      	movmi	r3, #0
 80095e6:	9208      	str	r2, [sp, #32]
 80095e8:	bf54      	ite	pl
 80095ea:	f04f 0800 	movpl.w	r8, #0
 80095ee:	9308      	strmi	r3, [sp, #32]
 80095f0:	2f00      	cmp	r7, #0
 80095f2:	db39      	blt.n	8009668 <_dtoa_r+0x218>
 80095f4:	9b08      	ldr	r3, [sp, #32]
 80095f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095f8:	443b      	add	r3, r7
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	2300      	movs	r3, #0
 80095fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009600:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009602:	2b09      	cmp	r3, #9
 8009604:	d864      	bhi.n	80096d0 <_dtoa_r+0x280>
 8009606:	2b05      	cmp	r3, #5
 8009608:	bfc4      	itt	gt
 800960a:	3b04      	subgt	r3, #4
 800960c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800960e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009610:	f1a3 0302 	sub.w	r3, r3, #2
 8009614:	bfcc      	ite	gt
 8009616:	2400      	movgt	r4, #0
 8009618:	2401      	movle	r4, #1
 800961a:	2b03      	cmp	r3, #3
 800961c:	d863      	bhi.n	80096e6 <_dtoa_r+0x296>
 800961e:	e8df f003 	tbb	[pc, r3]
 8009622:	372a      	.short	0x372a
 8009624:	5535      	.short	0x5535
 8009626:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800962a:	441e      	add	r6, r3
 800962c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009630:	2b20      	cmp	r3, #32
 8009632:	bfc1      	itttt	gt
 8009634:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009638:	409f      	lslgt	r7, r3
 800963a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800963e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009642:	bfd6      	itet	le
 8009644:	f1c3 0320 	rsble	r3, r3, #32
 8009648:	ea47 0003 	orrgt.w	r0, r7, r3
 800964c:	fa04 f003 	lslle.w	r0, r4, r3
 8009650:	f7f6 ff30 	bl	80004b4 <__aeabi_ui2d>
 8009654:	2201      	movs	r2, #1
 8009656:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800965a:	3e01      	subs	r6, #1
 800965c:	9214      	str	r2, [sp, #80]	@ 0x50
 800965e:	e777      	b.n	8009550 <_dtoa_r+0x100>
 8009660:	2301      	movs	r3, #1
 8009662:	e7b8      	b.n	80095d6 <_dtoa_r+0x186>
 8009664:	9012      	str	r0, [sp, #72]	@ 0x48
 8009666:	e7b7      	b.n	80095d8 <_dtoa_r+0x188>
 8009668:	427b      	negs	r3, r7
 800966a:	930a      	str	r3, [sp, #40]	@ 0x28
 800966c:	2300      	movs	r3, #0
 800966e:	eba8 0807 	sub.w	r8, r8, r7
 8009672:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009674:	e7c4      	b.n	8009600 <_dtoa_r+0x1b0>
 8009676:	2300      	movs	r3, #0
 8009678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800967a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967c:	2b00      	cmp	r3, #0
 800967e:	dc35      	bgt.n	80096ec <_dtoa_r+0x29c>
 8009680:	2301      	movs	r3, #1
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	9307      	str	r3, [sp, #28]
 8009686:	461a      	mov	r2, r3
 8009688:	920e      	str	r2, [sp, #56]	@ 0x38
 800968a:	e00b      	b.n	80096a4 <_dtoa_r+0x254>
 800968c:	2301      	movs	r3, #1
 800968e:	e7f3      	b.n	8009678 <_dtoa_r+0x228>
 8009690:	2300      	movs	r3, #0
 8009692:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009694:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009696:	18fb      	adds	r3, r7, r3
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	3301      	adds	r3, #1
 800969c:	2b01      	cmp	r3, #1
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	bfb8      	it	lt
 80096a2:	2301      	movlt	r3, #1
 80096a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80096a8:	2100      	movs	r1, #0
 80096aa:	2204      	movs	r2, #4
 80096ac:	f102 0514 	add.w	r5, r2, #20
 80096b0:	429d      	cmp	r5, r3
 80096b2:	d91f      	bls.n	80096f4 <_dtoa_r+0x2a4>
 80096b4:	6041      	str	r1, [r0, #4]
 80096b6:	4658      	mov	r0, fp
 80096b8:	f000 fd8e 	bl	800a1d8 <_Balloc>
 80096bc:	4682      	mov	sl, r0
 80096be:	2800      	cmp	r0, #0
 80096c0:	d13c      	bne.n	800973c <_dtoa_r+0x2ec>
 80096c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009730 <_dtoa_r+0x2e0>)
 80096c4:	4602      	mov	r2, r0
 80096c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80096ca:	e6d8      	b.n	800947e <_dtoa_r+0x2e>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e7e0      	b.n	8009692 <_dtoa_r+0x242>
 80096d0:	2401      	movs	r4, #1
 80096d2:	2300      	movs	r3, #0
 80096d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096d8:	f04f 33ff 	mov.w	r3, #4294967295
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	9307      	str	r3, [sp, #28]
 80096e0:	2200      	movs	r2, #0
 80096e2:	2312      	movs	r3, #18
 80096e4:	e7d0      	b.n	8009688 <_dtoa_r+0x238>
 80096e6:	2301      	movs	r3, #1
 80096e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096ea:	e7f5      	b.n	80096d8 <_dtoa_r+0x288>
 80096ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	e7d7      	b.n	80096a4 <_dtoa_r+0x254>
 80096f4:	3101      	adds	r1, #1
 80096f6:	0052      	lsls	r2, r2, #1
 80096f8:	e7d8      	b.n	80096ac <_dtoa_r+0x25c>
 80096fa:	bf00      	nop
 80096fc:	f3af 8000 	nop.w
 8009700:	636f4361 	.word	0x636f4361
 8009704:	3fd287a7 	.word	0x3fd287a7
 8009708:	8b60c8b3 	.word	0x8b60c8b3
 800970c:	3fc68a28 	.word	0x3fc68a28
 8009710:	509f79fb 	.word	0x509f79fb
 8009714:	3fd34413 	.word	0x3fd34413
 8009718:	0800c3c9 	.word	0x0800c3c9
 800971c:	0800c3e0 	.word	0x0800c3e0
 8009720:	7ff00000 	.word	0x7ff00000
 8009724:	0800c399 	.word	0x0800c399
 8009728:	3ff80000 	.word	0x3ff80000
 800972c:	0800c4d8 	.word	0x0800c4d8
 8009730:	0800c438 	.word	0x0800c438
 8009734:	0800c3c5 	.word	0x0800c3c5
 8009738:	0800c398 	.word	0x0800c398
 800973c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009740:	6018      	str	r0, [r3, #0]
 8009742:	9b07      	ldr	r3, [sp, #28]
 8009744:	2b0e      	cmp	r3, #14
 8009746:	f200 80a4 	bhi.w	8009892 <_dtoa_r+0x442>
 800974a:	2c00      	cmp	r4, #0
 800974c:	f000 80a1 	beq.w	8009892 <_dtoa_r+0x442>
 8009750:	2f00      	cmp	r7, #0
 8009752:	dd33      	ble.n	80097bc <_dtoa_r+0x36c>
 8009754:	4bad      	ldr	r3, [pc, #692]	@ (8009a0c <_dtoa_r+0x5bc>)
 8009756:	f007 020f 	and.w	r2, r7, #15
 800975a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800975e:	ed93 7b00 	vldr	d7, [r3]
 8009762:	05f8      	lsls	r0, r7, #23
 8009764:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009768:	ea4f 1427 	mov.w	r4, r7, asr #4
 800976c:	d516      	bpl.n	800979c <_dtoa_r+0x34c>
 800976e:	4ba8      	ldr	r3, [pc, #672]	@ (8009a10 <_dtoa_r+0x5c0>)
 8009770:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009774:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009778:	f7f7 f840 	bl	80007fc <__aeabi_ddiv>
 800977c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009780:	f004 040f 	and.w	r4, r4, #15
 8009784:	2603      	movs	r6, #3
 8009786:	4da2      	ldr	r5, [pc, #648]	@ (8009a10 <_dtoa_r+0x5c0>)
 8009788:	b954      	cbnz	r4, 80097a0 <_dtoa_r+0x350>
 800978a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800978e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009792:	f7f7 f833 	bl	80007fc <__aeabi_ddiv>
 8009796:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800979a:	e028      	b.n	80097ee <_dtoa_r+0x39e>
 800979c:	2602      	movs	r6, #2
 800979e:	e7f2      	b.n	8009786 <_dtoa_r+0x336>
 80097a0:	07e1      	lsls	r1, r4, #31
 80097a2:	d508      	bpl.n	80097b6 <_dtoa_r+0x366>
 80097a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097ac:	f7f6 fefc 	bl	80005a8 <__aeabi_dmul>
 80097b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097b4:	3601      	adds	r6, #1
 80097b6:	1064      	asrs	r4, r4, #1
 80097b8:	3508      	adds	r5, #8
 80097ba:	e7e5      	b.n	8009788 <_dtoa_r+0x338>
 80097bc:	f000 80d2 	beq.w	8009964 <_dtoa_r+0x514>
 80097c0:	427c      	negs	r4, r7
 80097c2:	4b92      	ldr	r3, [pc, #584]	@ (8009a0c <_dtoa_r+0x5bc>)
 80097c4:	4d92      	ldr	r5, [pc, #584]	@ (8009a10 <_dtoa_r+0x5c0>)
 80097c6:	f004 020f 	and.w	r2, r4, #15
 80097ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097d6:	f7f6 fee7 	bl	80005a8 <__aeabi_dmul>
 80097da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097de:	1124      	asrs	r4, r4, #4
 80097e0:	2300      	movs	r3, #0
 80097e2:	2602      	movs	r6, #2
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	f040 80b2 	bne.w	800994e <_dtoa_r+0x4fe>
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1d3      	bne.n	8009796 <_dtoa_r+0x346>
 80097ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	f000 80b7 	beq.w	8009968 <_dtoa_r+0x518>
 80097fa:	4b86      	ldr	r3, [pc, #536]	@ (8009a14 <_dtoa_r+0x5c4>)
 80097fc:	2200      	movs	r2, #0
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f7 f943 	bl	8000a8c <__aeabi_dcmplt>
 8009806:	2800      	cmp	r0, #0
 8009808:	f000 80ae 	beq.w	8009968 <_dtoa_r+0x518>
 800980c:	9b07      	ldr	r3, [sp, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80aa 	beq.w	8009968 <_dtoa_r+0x518>
 8009814:	9b00      	ldr	r3, [sp, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	dd37      	ble.n	800988a <_dtoa_r+0x43a>
 800981a:	1e7b      	subs	r3, r7, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	4620      	mov	r0, r4
 8009820:	4b7d      	ldr	r3, [pc, #500]	@ (8009a18 <_dtoa_r+0x5c8>)
 8009822:	2200      	movs	r2, #0
 8009824:	4629      	mov	r1, r5
 8009826:	f7f6 febf 	bl	80005a8 <__aeabi_dmul>
 800982a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800982e:	9c00      	ldr	r4, [sp, #0]
 8009830:	3601      	adds	r6, #1
 8009832:	4630      	mov	r0, r6
 8009834:	f7f6 fe4e 	bl	80004d4 <__aeabi_i2d>
 8009838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800983c:	f7f6 feb4 	bl	80005a8 <__aeabi_dmul>
 8009840:	4b76      	ldr	r3, [pc, #472]	@ (8009a1c <_dtoa_r+0x5cc>)
 8009842:	2200      	movs	r2, #0
 8009844:	f7f6 fcfa 	bl	800023c <__adddf3>
 8009848:	4605      	mov	r5, r0
 800984a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800984e:	2c00      	cmp	r4, #0
 8009850:	f040 808d 	bne.w	800996e <_dtoa_r+0x51e>
 8009854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009858:	4b71      	ldr	r3, [pc, #452]	@ (8009a20 <_dtoa_r+0x5d0>)
 800985a:	2200      	movs	r2, #0
 800985c:	f7f6 fcec 	bl	8000238 <__aeabi_dsub>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009868:	462a      	mov	r2, r5
 800986a:	4633      	mov	r3, r6
 800986c:	f7f7 f92c 	bl	8000ac8 <__aeabi_dcmpgt>
 8009870:	2800      	cmp	r0, #0
 8009872:	f040 828b 	bne.w	8009d8c <_dtoa_r+0x93c>
 8009876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800987a:	462a      	mov	r2, r5
 800987c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009880:	f7f7 f904 	bl	8000a8c <__aeabi_dcmplt>
 8009884:	2800      	cmp	r0, #0
 8009886:	f040 8128 	bne.w	8009ada <_dtoa_r+0x68a>
 800988a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800988e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009892:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009894:	2b00      	cmp	r3, #0
 8009896:	f2c0 815a 	blt.w	8009b4e <_dtoa_r+0x6fe>
 800989a:	2f0e      	cmp	r7, #14
 800989c:	f300 8157 	bgt.w	8009b4e <_dtoa_r+0x6fe>
 80098a0:	4b5a      	ldr	r3, [pc, #360]	@ (8009a0c <_dtoa_r+0x5bc>)
 80098a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098a6:	ed93 7b00 	vldr	d7, [r3]
 80098aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	ed8d 7b00 	vstr	d7, [sp]
 80098b2:	da03      	bge.n	80098bc <_dtoa_r+0x46c>
 80098b4:	9b07      	ldr	r3, [sp, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f340 8101 	ble.w	8009abe <_dtoa_r+0x66e>
 80098bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80098c0:	4656      	mov	r6, sl
 80098c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f6 ff97 	bl	80007fc <__aeabi_ddiv>
 80098ce:	f7f7 f91b 	bl	8000b08 <__aeabi_d2iz>
 80098d2:	4680      	mov	r8, r0
 80098d4:	f7f6 fdfe 	bl	80004d4 <__aeabi_i2d>
 80098d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098dc:	f7f6 fe64 	bl	80005a8 <__aeabi_dmul>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4620      	mov	r0, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098ec:	f7f6 fca4 	bl	8000238 <__aeabi_dsub>
 80098f0:	f806 4b01 	strb.w	r4, [r6], #1
 80098f4:	9d07      	ldr	r5, [sp, #28]
 80098f6:	eba6 040a 	sub.w	r4, r6, sl
 80098fa:	42a5      	cmp	r5, r4
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	f040 8117 	bne.w	8009b32 <_dtoa_r+0x6e2>
 8009904:	f7f6 fc9a 	bl	800023c <__adddf3>
 8009908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800990c:	4604      	mov	r4, r0
 800990e:	460d      	mov	r5, r1
 8009910:	f7f7 f8da 	bl	8000ac8 <__aeabi_dcmpgt>
 8009914:	2800      	cmp	r0, #0
 8009916:	f040 80f9 	bne.w	8009b0c <_dtoa_r+0x6bc>
 800991a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800991e:	4620      	mov	r0, r4
 8009920:	4629      	mov	r1, r5
 8009922:	f7f7 f8a9 	bl	8000a78 <__aeabi_dcmpeq>
 8009926:	b118      	cbz	r0, 8009930 <_dtoa_r+0x4e0>
 8009928:	f018 0f01 	tst.w	r8, #1
 800992c:	f040 80ee 	bne.w	8009b0c <_dtoa_r+0x6bc>
 8009930:	4649      	mov	r1, r9
 8009932:	4658      	mov	r0, fp
 8009934:	f000 fc90 	bl	800a258 <_Bfree>
 8009938:	2300      	movs	r3, #0
 800993a:	7033      	strb	r3, [r6, #0]
 800993c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800993e:	3701      	adds	r7, #1
 8009940:	601f      	str	r7, [r3, #0]
 8009942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 831d 	beq.w	8009f84 <_dtoa_r+0xb34>
 800994a:	601e      	str	r6, [r3, #0]
 800994c:	e31a      	b.n	8009f84 <_dtoa_r+0xb34>
 800994e:	07e2      	lsls	r2, r4, #31
 8009950:	d505      	bpl.n	800995e <_dtoa_r+0x50e>
 8009952:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009956:	f7f6 fe27 	bl	80005a8 <__aeabi_dmul>
 800995a:	3601      	adds	r6, #1
 800995c:	2301      	movs	r3, #1
 800995e:	1064      	asrs	r4, r4, #1
 8009960:	3508      	adds	r5, #8
 8009962:	e73f      	b.n	80097e4 <_dtoa_r+0x394>
 8009964:	2602      	movs	r6, #2
 8009966:	e742      	b.n	80097ee <_dtoa_r+0x39e>
 8009968:	9c07      	ldr	r4, [sp, #28]
 800996a:	9704      	str	r7, [sp, #16]
 800996c:	e761      	b.n	8009832 <_dtoa_r+0x3e2>
 800996e:	4b27      	ldr	r3, [pc, #156]	@ (8009a0c <_dtoa_r+0x5bc>)
 8009970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009972:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009976:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800997a:	4454      	add	r4, sl
 800997c:	2900      	cmp	r1, #0
 800997e:	d053      	beq.n	8009a28 <_dtoa_r+0x5d8>
 8009980:	4928      	ldr	r1, [pc, #160]	@ (8009a24 <_dtoa_r+0x5d4>)
 8009982:	2000      	movs	r0, #0
 8009984:	f7f6 ff3a 	bl	80007fc <__aeabi_ddiv>
 8009988:	4633      	mov	r3, r6
 800998a:	462a      	mov	r2, r5
 800998c:	f7f6 fc54 	bl	8000238 <__aeabi_dsub>
 8009990:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009994:	4656      	mov	r6, sl
 8009996:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800999a:	f7f7 f8b5 	bl	8000b08 <__aeabi_d2iz>
 800999e:	4605      	mov	r5, r0
 80099a0:	f7f6 fd98 	bl	80004d4 <__aeabi_i2d>
 80099a4:	4602      	mov	r2, r0
 80099a6:	460b      	mov	r3, r1
 80099a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099ac:	f7f6 fc44 	bl	8000238 <__aeabi_dsub>
 80099b0:	3530      	adds	r5, #48	@ 0x30
 80099b2:	4602      	mov	r2, r0
 80099b4:	460b      	mov	r3, r1
 80099b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099ba:	f806 5b01 	strb.w	r5, [r6], #1
 80099be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099c2:	f7f7 f863 	bl	8000a8c <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d171      	bne.n	8009aae <_dtoa_r+0x65e>
 80099ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099ce:	4911      	ldr	r1, [pc, #68]	@ (8009a14 <_dtoa_r+0x5c4>)
 80099d0:	2000      	movs	r0, #0
 80099d2:	f7f6 fc31 	bl	8000238 <__aeabi_dsub>
 80099d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099da:	f7f7 f857 	bl	8000a8c <__aeabi_dcmplt>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f040 8095 	bne.w	8009b0e <_dtoa_r+0x6be>
 80099e4:	42a6      	cmp	r6, r4
 80099e6:	f43f af50 	beq.w	800988a <_dtoa_r+0x43a>
 80099ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <_dtoa_r+0x5c8>)
 80099f0:	2200      	movs	r2, #0
 80099f2:	f7f6 fdd9 	bl	80005a8 <__aeabi_dmul>
 80099f6:	4b08      	ldr	r3, [pc, #32]	@ (8009a18 <_dtoa_r+0x5c8>)
 80099f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099fc:	2200      	movs	r2, #0
 80099fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a02:	f7f6 fdd1 	bl	80005a8 <__aeabi_dmul>
 8009a06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a0a:	e7c4      	b.n	8009996 <_dtoa_r+0x546>
 8009a0c:	0800c4d8 	.word	0x0800c4d8
 8009a10:	0800c4b0 	.word	0x0800c4b0
 8009a14:	3ff00000 	.word	0x3ff00000
 8009a18:	40240000 	.word	0x40240000
 8009a1c:	401c0000 	.word	0x401c0000
 8009a20:	40140000 	.word	0x40140000
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	4631      	mov	r1, r6
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7f6 fdbc 	bl	80005a8 <__aeabi_dmul>
 8009a30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a34:	9415      	str	r4, [sp, #84]	@ 0x54
 8009a36:	4656      	mov	r6, sl
 8009a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3c:	f7f7 f864 	bl	8000b08 <__aeabi_d2iz>
 8009a40:	4605      	mov	r5, r0
 8009a42:	f7f6 fd47 	bl	80004d4 <__aeabi_i2d>
 8009a46:	4602      	mov	r2, r0
 8009a48:	460b      	mov	r3, r1
 8009a4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4e:	f7f6 fbf3 	bl	8000238 <__aeabi_dsub>
 8009a52:	3530      	adds	r5, #48	@ 0x30
 8009a54:	f806 5b01 	strb.w	r5, [r6], #1
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	42a6      	cmp	r6, r4
 8009a5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a62:	f04f 0200 	mov.w	r2, #0
 8009a66:	d124      	bne.n	8009ab2 <_dtoa_r+0x662>
 8009a68:	4bac      	ldr	r3, [pc, #688]	@ (8009d1c <_dtoa_r+0x8cc>)
 8009a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a6e:	f7f6 fbe5 	bl	800023c <__adddf3>
 8009a72:	4602      	mov	r2, r0
 8009a74:	460b      	mov	r3, r1
 8009a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7a:	f7f7 f825 	bl	8000ac8 <__aeabi_dcmpgt>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	d145      	bne.n	8009b0e <_dtoa_r+0x6be>
 8009a82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a86:	49a5      	ldr	r1, [pc, #660]	@ (8009d1c <_dtoa_r+0x8cc>)
 8009a88:	2000      	movs	r0, #0
 8009a8a:	f7f6 fbd5 	bl	8000238 <__aeabi_dsub>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a96:	f7f6 fff9 	bl	8000a8c <__aeabi_dcmplt>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	f43f aef5 	beq.w	800988a <_dtoa_r+0x43a>
 8009aa0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009aa2:	1e73      	subs	r3, r6, #1
 8009aa4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009aa6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009aaa:	2b30      	cmp	r3, #48	@ 0x30
 8009aac:	d0f8      	beq.n	8009aa0 <_dtoa_r+0x650>
 8009aae:	9f04      	ldr	r7, [sp, #16]
 8009ab0:	e73e      	b.n	8009930 <_dtoa_r+0x4e0>
 8009ab2:	4b9b      	ldr	r3, [pc, #620]	@ (8009d20 <_dtoa_r+0x8d0>)
 8009ab4:	f7f6 fd78 	bl	80005a8 <__aeabi_dmul>
 8009ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009abc:	e7bc      	b.n	8009a38 <_dtoa_r+0x5e8>
 8009abe:	d10c      	bne.n	8009ada <_dtoa_r+0x68a>
 8009ac0:	4b98      	ldr	r3, [pc, #608]	@ (8009d24 <_dtoa_r+0x8d4>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ac8:	f7f6 fd6e 	bl	80005a8 <__aeabi_dmul>
 8009acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ad0:	f7f6 fff0 	bl	8000ab4 <__aeabi_dcmpge>
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	f000 8157 	beq.w	8009d88 <_dtoa_r+0x938>
 8009ada:	2400      	movs	r4, #0
 8009adc:	4625      	mov	r5, r4
 8009ade:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	4656      	mov	r6, sl
 8009ae6:	2700      	movs	r7, #0
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4658      	mov	r0, fp
 8009aec:	f000 fbb4 	bl	800a258 <_Bfree>
 8009af0:	2d00      	cmp	r5, #0
 8009af2:	d0dc      	beq.n	8009aae <_dtoa_r+0x65e>
 8009af4:	b12f      	cbz	r7, 8009b02 <_dtoa_r+0x6b2>
 8009af6:	42af      	cmp	r7, r5
 8009af8:	d003      	beq.n	8009b02 <_dtoa_r+0x6b2>
 8009afa:	4639      	mov	r1, r7
 8009afc:	4658      	mov	r0, fp
 8009afe:	f000 fbab 	bl	800a258 <_Bfree>
 8009b02:	4629      	mov	r1, r5
 8009b04:	4658      	mov	r0, fp
 8009b06:	f000 fba7 	bl	800a258 <_Bfree>
 8009b0a:	e7d0      	b.n	8009aae <_dtoa_r+0x65e>
 8009b0c:	9704      	str	r7, [sp, #16]
 8009b0e:	4633      	mov	r3, r6
 8009b10:	461e      	mov	r6, r3
 8009b12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b16:	2a39      	cmp	r2, #57	@ 0x39
 8009b18:	d107      	bne.n	8009b2a <_dtoa_r+0x6da>
 8009b1a:	459a      	cmp	sl, r3
 8009b1c:	d1f8      	bne.n	8009b10 <_dtoa_r+0x6c0>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	3201      	adds	r2, #1
 8009b22:	9204      	str	r2, [sp, #16]
 8009b24:	2230      	movs	r2, #48	@ 0x30
 8009b26:	f88a 2000 	strb.w	r2, [sl]
 8009b2a:	781a      	ldrb	r2, [r3, #0]
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]
 8009b30:	e7bd      	b.n	8009aae <_dtoa_r+0x65e>
 8009b32:	4b7b      	ldr	r3, [pc, #492]	@ (8009d20 <_dtoa_r+0x8d0>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	f7f6 fd37 	bl	80005a8 <__aeabi_dmul>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4604      	mov	r4, r0
 8009b40:	460d      	mov	r5, r1
 8009b42:	f7f6 ff99 	bl	8000a78 <__aeabi_dcmpeq>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f43f aebb 	beq.w	80098c2 <_dtoa_r+0x472>
 8009b4c:	e6f0      	b.n	8009930 <_dtoa_r+0x4e0>
 8009b4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	f000 80db 	beq.w	8009d0c <_dtoa_r+0x8bc>
 8009b56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b58:	2a01      	cmp	r2, #1
 8009b5a:	f300 80bf 	bgt.w	8009cdc <_dtoa_r+0x88c>
 8009b5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b60:	2a00      	cmp	r2, #0
 8009b62:	f000 80b7 	beq.w	8009cd4 <_dtoa_r+0x884>
 8009b66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b6c:	4646      	mov	r6, r8
 8009b6e:	9a08      	ldr	r2, [sp, #32]
 8009b70:	2101      	movs	r1, #1
 8009b72:	441a      	add	r2, r3
 8009b74:	4658      	mov	r0, fp
 8009b76:	4498      	add	r8, r3
 8009b78:	9208      	str	r2, [sp, #32]
 8009b7a:	f000 fc21 	bl	800a3c0 <__i2b>
 8009b7e:	4605      	mov	r5, r0
 8009b80:	b15e      	cbz	r6, 8009b9a <_dtoa_r+0x74a>
 8009b82:	9b08      	ldr	r3, [sp, #32]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dd08      	ble.n	8009b9a <_dtoa_r+0x74a>
 8009b88:	42b3      	cmp	r3, r6
 8009b8a:	9a08      	ldr	r2, [sp, #32]
 8009b8c:	bfa8      	it	ge
 8009b8e:	4633      	movge	r3, r6
 8009b90:	eba8 0803 	sub.w	r8, r8, r3
 8009b94:	1af6      	subs	r6, r6, r3
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	9308      	str	r3, [sp, #32]
 8009b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b9c:	b1f3      	cbz	r3, 8009bdc <_dtoa_r+0x78c>
 8009b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80b7 	beq.w	8009d14 <_dtoa_r+0x8c4>
 8009ba6:	b18c      	cbz	r4, 8009bcc <_dtoa_r+0x77c>
 8009ba8:	4629      	mov	r1, r5
 8009baa:	4622      	mov	r2, r4
 8009bac:	4658      	mov	r0, fp
 8009bae:	f000 fcc7 	bl	800a540 <__pow5mult>
 8009bb2:	464a      	mov	r2, r9
 8009bb4:	4601      	mov	r1, r0
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	4658      	mov	r0, fp
 8009bba:	f000 fc17 	bl	800a3ec <__multiply>
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	9004      	str	r0, [sp, #16]
 8009bc2:	4658      	mov	r0, fp
 8009bc4:	f000 fb48 	bl	800a258 <_Bfree>
 8009bc8:	9b04      	ldr	r3, [sp, #16]
 8009bca:	4699      	mov	r9, r3
 8009bcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bce:	1b1a      	subs	r2, r3, r4
 8009bd0:	d004      	beq.n	8009bdc <_dtoa_r+0x78c>
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4658      	mov	r0, fp
 8009bd6:	f000 fcb3 	bl	800a540 <__pow5mult>
 8009bda:	4681      	mov	r9, r0
 8009bdc:	2101      	movs	r1, #1
 8009bde:	4658      	mov	r0, fp
 8009be0:	f000 fbee 	bl	800a3c0 <__i2b>
 8009be4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009be6:	4604      	mov	r4, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 81cf 	beq.w	8009f8c <_dtoa_r+0xb3c>
 8009bee:	461a      	mov	r2, r3
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 fca4 	bl	800a540 <__pow5mult>
 8009bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	f300 8095 	bgt.w	8009d2c <_dtoa_r+0x8dc>
 8009c02:	9b02      	ldr	r3, [sp, #8]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 8087 	bne.w	8009d18 <_dtoa_r+0x8c8>
 8009c0a:	9b03      	ldr	r3, [sp, #12]
 8009c0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8089 	bne.w	8009d28 <_dtoa_r+0x8d8>
 8009c16:	9b03      	ldr	r3, [sp, #12]
 8009c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c1c:	0d1b      	lsrs	r3, r3, #20
 8009c1e:	051b      	lsls	r3, r3, #20
 8009c20:	b12b      	cbz	r3, 8009c2e <_dtoa_r+0x7de>
 8009c22:	9b08      	ldr	r3, [sp, #32]
 8009c24:	3301      	adds	r3, #1
 8009c26:	9308      	str	r3, [sp, #32]
 8009c28:	f108 0801 	add.w	r8, r8, #1
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	f000 81b0 	beq.w	8009f98 <_dtoa_r+0xb48>
 8009c38:	6923      	ldr	r3, [r4, #16]
 8009c3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c3e:	6918      	ldr	r0, [r3, #16]
 8009c40:	f000 fb72 	bl	800a328 <__hi0bits>
 8009c44:	f1c0 0020 	rsb	r0, r0, #32
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	4418      	add	r0, r3
 8009c4c:	f010 001f 	ands.w	r0, r0, #31
 8009c50:	d077      	beq.n	8009d42 <_dtoa_r+0x8f2>
 8009c52:	f1c0 0320 	rsb	r3, r0, #32
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	dd6b      	ble.n	8009d32 <_dtoa_r+0x8e2>
 8009c5a:	9b08      	ldr	r3, [sp, #32]
 8009c5c:	f1c0 001c 	rsb	r0, r0, #28
 8009c60:	4403      	add	r3, r0
 8009c62:	4480      	add	r8, r0
 8009c64:	4406      	add	r6, r0
 8009c66:	9308      	str	r3, [sp, #32]
 8009c68:	f1b8 0f00 	cmp.w	r8, #0
 8009c6c:	dd05      	ble.n	8009c7a <_dtoa_r+0x82a>
 8009c6e:	4649      	mov	r1, r9
 8009c70:	4642      	mov	r2, r8
 8009c72:	4658      	mov	r0, fp
 8009c74:	f000 fcbe 	bl	800a5f4 <__lshift>
 8009c78:	4681      	mov	r9, r0
 8009c7a:	9b08      	ldr	r3, [sp, #32]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dd05      	ble.n	8009c8c <_dtoa_r+0x83c>
 8009c80:	4621      	mov	r1, r4
 8009c82:	461a      	mov	r2, r3
 8009c84:	4658      	mov	r0, fp
 8009c86:	f000 fcb5 	bl	800a5f4 <__lshift>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d059      	beq.n	8009d46 <_dtoa_r+0x8f6>
 8009c92:	4621      	mov	r1, r4
 8009c94:	4648      	mov	r0, r9
 8009c96:	f000 fd19 	bl	800a6cc <__mcmp>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	da53      	bge.n	8009d46 <_dtoa_r+0x8f6>
 8009c9e:	1e7b      	subs	r3, r7, #1
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	4649      	mov	r1, r9
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	220a      	movs	r2, #10
 8009ca8:	4658      	mov	r0, fp
 8009caa:	f000 faf7 	bl	800a29c <__multadd>
 8009cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb0:	4681      	mov	r9, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8172 	beq.w	8009f9c <_dtoa_r+0xb4c>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4629      	mov	r1, r5
 8009cbc:	220a      	movs	r2, #10
 8009cbe:	4658      	mov	r0, fp
 8009cc0:	f000 faec 	bl	800a29c <__multadd>
 8009cc4:	9b00      	ldr	r3, [sp, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	4605      	mov	r5, r0
 8009cca:	dc67      	bgt.n	8009d9c <_dtoa_r+0x94c>
 8009ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	dc41      	bgt.n	8009d56 <_dtoa_r+0x906>
 8009cd2:	e063      	b.n	8009d9c <_dtoa_r+0x94c>
 8009cd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cda:	e746      	b.n	8009b6a <_dtoa_r+0x71a>
 8009cdc:	9b07      	ldr	r3, [sp, #28]
 8009cde:	1e5c      	subs	r4, r3, #1
 8009ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ce2:	42a3      	cmp	r3, r4
 8009ce4:	bfbf      	itttt	lt
 8009ce6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ce8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009cea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cec:	1ae3      	sublt	r3, r4, r3
 8009cee:	bfb4      	ite	lt
 8009cf0:	18d2      	addlt	r2, r2, r3
 8009cf2:	1b1c      	subge	r4, r3, r4
 8009cf4:	9b07      	ldr	r3, [sp, #28]
 8009cf6:	bfbc      	itt	lt
 8009cf8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009cfa:	2400      	movlt	r4, #0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	bfb5      	itete	lt
 8009d00:	eba8 0603 	sublt.w	r6, r8, r3
 8009d04:	9b07      	ldrge	r3, [sp, #28]
 8009d06:	2300      	movlt	r3, #0
 8009d08:	4646      	movge	r6, r8
 8009d0a:	e730      	b.n	8009b6e <_dtoa_r+0x71e>
 8009d0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d10:	4646      	mov	r6, r8
 8009d12:	e735      	b.n	8009b80 <_dtoa_r+0x730>
 8009d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d16:	e75c      	b.n	8009bd2 <_dtoa_r+0x782>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e788      	b.n	8009c2e <_dtoa_r+0x7de>
 8009d1c:	3fe00000 	.word	0x3fe00000
 8009d20:	40240000 	.word	0x40240000
 8009d24:	40140000 	.word	0x40140000
 8009d28:	9b02      	ldr	r3, [sp, #8]
 8009d2a:	e780      	b.n	8009c2e <_dtoa_r+0x7de>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d30:	e782      	b.n	8009c38 <_dtoa_r+0x7e8>
 8009d32:	d099      	beq.n	8009c68 <_dtoa_r+0x818>
 8009d34:	9a08      	ldr	r2, [sp, #32]
 8009d36:	331c      	adds	r3, #28
 8009d38:	441a      	add	r2, r3
 8009d3a:	4498      	add	r8, r3
 8009d3c:	441e      	add	r6, r3
 8009d3e:	9208      	str	r2, [sp, #32]
 8009d40:	e792      	b.n	8009c68 <_dtoa_r+0x818>
 8009d42:	4603      	mov	r3, r0
 8009d44:	e7f6      	b.n	8009d34 <_dtoa_r+0x8e4>
 8009d46:	9b07      	ldr	r3, [sp, #28]
 8009d48:	9704      	str	r7, [sp, #16]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	dc20      	bgt.n	8009d90 <_dtoa_r+0x940>
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	dd1e      	ble.n	8009d94 <_dtoa_r+0x944>
 8009d56:	9b00      	ldr	r3, [sp, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f47f aec0 	bne.w	8009ade <_dtoa_r+0x68e>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	2205      	movs	r2, #5
 8009d62:	4658      	mov	r0, fp
 8009d64:	f000 fa9a 	bl	800a29c <__multadd>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	4604      	mov	r4, r0
 8009d6c:	4648      	mov	r0, r9
 8009d6e:	f000 fcad 	bl	800a6cc <__mcmp>
 8009d72:	2800      	cmp	r0, #0
 8009d74:	f77f aeb3 	ble.w	8009ade <_dtoa_r+0x68e>
 8009d78:	4656      	mov	r6, sl
 8009d7a:	2331      	movs	r3, #49	@ 0x31
 8009d7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d80:	9b04      	ldr	r3, [sp, #16]
 8009d82:	3301      	adds	r3, #1
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	e6ae      	b.n	8009ae6 <_dtoa_r+0x696>
 8009d88:	9c07      	ldr	r4, [sp, #28]
 8009d8a:	9704      	str	r7, [sp, #16]
 8009d8c:	4625      	mov	r5, r4
 8009d8e:	e7f3      	b.n	8009d78 <_dtoa_r+0x928>
 8009d90:	9b07      	ldr	r3, [sp, #28]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 8104 	beq.w	8009fa4 <_dtoa_r+0xb54>
 8009d9c:	2e00      	cmp	r6, #0
 8009d9e:	dd05      	ble.n	8009dac <_dtoa_r+0x95c>
 8009da0:	4629      	mov	r1, r5
 8009da2:	4632      	mov	r2, r6
 8009da4:	4658      	mov	r0, fp
 8009da6:	f000 fc25 	bl	800a5f4 <__lshift>
 8009daa:	4605      	mov	r5, r0
 8009dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d05a      	beq.n	8009e68 <_dtoa_r+0xa18>
 8009db2:	6869      	ldr	r1, [r5, #4]
 8009db4:	4658      	mov	r0, fp
 8009db6:	f000 fa0f 	bl	800a1d8 <_Balloc>
 8009dba:	4606      	mov	r6, r0
 8009dbc:	b928      	cbnz	r0, 8009dca <_dtoa_r+0x97a>
 8009dbe:	4b84      	ldr	r3, [pc, #528]	@ (8009fd0 <_dtoa_r+0xb80>)
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dc6:	f7ff bb5a 	b.w	800947e <_dtoa_r+0x2e>
 8009dca:	692a      	ldr	r2, [r5, #16]
 8009dcc:	3202      	adds	r2, #2
 8009dce:	0092      	lsls	r2, r2, #2
 8009dd0:	f105 010c 	add.w	r1, r5, #12
 8009dd4:	300c      	adds	r0, #12
 8009dd6:	f7ff faa2 	bl	800931e <memcpy>
 8009dda:	2201      	movs	r2, #1
 8009ddc:	4631      	mov	r1, r6
 8009dde:	4658      	mov	r0, fp
 8009de0:	f000 fc08 	bl	800a5f4 <__lshift>
 8009de4:	f10a 0301 	add.w	r3, sl, #1
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	9b00      	ldr	r3, [sp, #0]
 8009dec:	4453      	add	r3, sl
 8009dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009df0:	9b02      	ldr	r3, [sp, #8]
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	462f      	mov	r7, r5
 8009df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	4621      	mov	r1, r4
 8009e00:	3b01      	subs	r3, #1
 8009e02:	4648      	mov	r0, r9
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	f7ff fa98 	bl	800933a <quorem>
 8009e0a:	4639      	mov	r1, r7
 8009e0c:	9002      	str	r0, [sp, #8]
 8009e0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e12:	4648      	mov	r0, r9
 8009e14:	f000 fc5a 	bl	800a6cc <__mcmp>
 8009e18:	462a      	mov	r2, r5
 8009e1a:	9008      	str	r0, [sp, #32]
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	4658      	mov	r0, fp
 8009e20:	f000 fc70 	bl	800a704 <__mdiff>
 8009e24:	68c2      	ldr	r2, [r0, #12]
 8009e26:	4606      	mov	r6, r0
 8009e28:	bb02      	cbnz	r2, 8009e6c <_dtoa_r+0xa1c>
 8009e2a:	4601      	mov	r1, r0
 8009e2c:	4648      	mov	r0, r9
 8009e2e:	f000 fc4d 	bl	800a6cc <__mcmp>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4631      	mov	r1, r6
 8009e36:	4658      	mov	r0, fp
 8009e38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e3a:	f000 fa0d 	bl	800a258 <_Bfree>
 8009e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e42:	9e07      	ldr	r6, [sp, #28]
 8009e44:	ea43 0102 	orr.w	r1, r3, r2
 8009e48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e4a:	4319      	orrs	r1, r3
 8009e4c:	d110      	bne.n	8009e70 <_dtoa_r+0xa20>
 8009e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e52:	d029      	beq.n	8009ea8 <_dtoa_r+0xa58>
 8009e54:	9b08      	ldr	r3, [sp, #32]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	dd02      	ble.n	8009e60 <_dtoa_r+0xa10>
 8009e5a:	9b02      	ldr	r3, [sp, #8]
 8009e5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e60:	9b00      	ldr	r3, [sp, #0]
 8009e62:	f883 8000 	strb.w	r8, [r3]
 8009e66:	e63f      	b.n	8009ae8 <_dtoa_r+0x698>
 8009e68:	4628      	mov	r0, r5
 8009e6a:	e7bb      	b.n	8009de4 <_dtoa_r+0x994>
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	e7e1      	b.n	8009e34 <_dtoa_r+0x9e4>
 8009e70:	9b08      	ldr	r3, [sp, #32]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	db04      	blt.n	8009e80 <_dtoa_r+0xa30>
 8009e76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	d120      	bne.n	8009ec2 <_dtoa_r+0xa72>
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	dded      	ble.n	8009e60 <_dtoa_r+0xa10>
 8009e84:	4649      	mov	r1, r9
 8009e86:	2201      	movs	r2, #1
 8009e88:	4658      	mov	r0, fp
 8009e8a:	f000 fbb3 	bl	800a5f4 <__lshift>
 8009e8e:	4621      	mov	r1, r4
 8009e90:	4681      	mov	r9, r0
 8009e92:	f000 fc1b 	bl	800a6cc <__mcmp>
 8009e96:	2800      	cmp	r0, #0
 8009e98:	dc03      	bgt.n	8009ea2 <_dtoa_r+0xa52>
 8009e9a:	d1e1      	bne.n	8009e60 <_dtoa_r+0xa10>
 8009e9c:	f018 0f01 	tst.w	r8, #1
 8009ea0:	d0de      	beq.n	8009e60 <_dtoa_r+0xa10>
 8009ea2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ea6:	d1d8      	bne.n	8009e5a <_dtoa_r+0xa0a>
 8009ea8:	9a00      	ldr	r2, [sp, #0]
 8009eaa:	2339      	movs	r3, #57	@ 0x39
 8009eac:	7013      	strb	r3, [r2, #0]
 8009eae:	4633      	mov	r3, r6
 8009eb0:	461e      	mov	r6, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eb8:	2a39      	cmp	r2, #57	@ 0x39
 8009eba:	d052      	beq.n	8009f62 <_dtoa_r+0xb12>
 8009ebc:	3201      	adds	r2, #1
 8009ebe:	701a      	strb	r2, [r3, #0]
 8009ec0:	e612      	b.n	8009ae8 <_dtoa_r+0x698>
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	dd07      	ble.n	8009ed6 <_dtoa_r+0xa86>
 8009ec6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009eca:	d0ed      	beq.n	8009ea8 <_dtoa_r+0xa58>
 8009ecc:	9a00      	ldr	r2, [sp, #0]
 8009ece:	f108 0301 	add.w	r3, r8, #1
 8009ed2:	7013      	strb	r3, [r2, #0]
 8009ed4:	e608      	b.n	8009ae8 <_dtoa_r+0x698>
 8009ed6:	9b07      	ldr	r3, [sp, #28]
 8009ed8:	9a07      	ldr	r2, [sp, #28]
 8009eda:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d028      	beq.n	8009f36 <_dtoa_r+0xae6>
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	220a      	movs	r2, #10
 8009eea:	4658      	mov	r0, fp
 8009eec:	f000 f9d6 	bl	800a29c <__multadd>
 8009ef0:	42af      	cmp	r7, r5
 8009ef2:	4681      	mov	r9, r0
 8009ef4:	f04f 0300 	mov.w	r3, #0
 8009ef8:	f04f 020a 	mov.w	r2, #10
 8009efc:	4639      	mov	r1, r7
 8009efe:	4658      	mov	r0, fp
 8009f00:	d107      	bne.n	8009f12 <_dtoa_r+0xac2>
 8009f02:	f000 f9cb 	bl	800a29c <__multadd>
 8009f06:	4607      	mov	r7, r0
 8009f08:	4605      	mov	r5, r0
 8009f0a:	9b07      	ldr	r3, [sp, #28]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	e774      	b.n	8009dfc <_dtoa_r+0x9ac>
 8009f12:	f000 f9c3 	bl	800a29c <__multadd>
 8009f16:	4629      	mov	r1, r5
 8009f18:	4607      	mov	r7, r0
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	220a      	movs	r2, #10
 8009f1e:	4658      	mov	r0, fp
 8009f20:	f000 f9bc 	bl	800a29c <__multadd>
 8009f24:	4605      	mov	r5, r0
 8009f26:	e7f0      	b.n	8009f0a <_dtoa_r+0xaba>
 8009f28:	9b00      	ldr	r3, [sp, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	bfcc      	ite	gt
 8009f2e:	461e      	movgt	r6, r3
 8009f30:	2601      	movle	r6, #1
 8009f32:	4456      	add	r6, sl
 8009f34:	2700      	movs	r7, #0
 8009f36:	4649      	mov	r1, r9
 8009f38:	2201      	movs	r2, #1
 8009f3a:	4658      	mov	r0, fp
 8009f3c:	f000 fb5a 	bl	800a5f4 <__lshift>
 8009f40:	4621      	mov	r1, r4
 8009f42:	4681      	mov	r9, r0
 8009f44:	f000 fbc2 	bl	800a6cc <__mcmp>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dcb0      	bgt.n	8009eae <_dtoa_r+0xa5e>
 8009f4c:	d102      	bne.n	8009f54 <_dtoa_r+0xb04>
 8009f4e:	f018 0f01 	tst.w	r8, #1
 8009f52:	d1ac      	bne.n	8009eae <_dtoa_r+0xa5e>
 8009f54:	4633      	mov	r3, r6
 8009f56:	461e      	mov	r6, r3
 8009f58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f5c:	2a30      	cmp	r2, #48	@ 0x30
 8009f5e:	d0fa      	beq.n	8009f56 <_dtoa_r+0xb06>
 8009f60:	e5c2      	b.n	8009ae8 <_dtoa_r+0x698>
 8009f62:	459a      	cmp	sl, r3
 8009f64:	d1a4      	bne.n	8009eb0 <_dtoa_r+0xa60>
 8009f66:	9b04      	ldr	r3, [sp, #16]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	2331      	movs	r3, #49	@ 0x31
 8009f6e:	f88a 3000 	strb.w	r3, [sl]
 8009f72:	e5b9      	b.n	8009ae8 <_dtoa_r+0x698>
 8009f74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009fd4 <_dtoa_r+0xb84>
 8009f7a:	b11b      	cbz	r3, 8009f84 <_dtoa_r+0xb34>
 8009f7c:	f10a 0308 	add.w	r3, sl, #8
 8009f80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	4650      	mov	r0, sl
 8009f86:	b019      	add	sp, #100	@ 0x64
 8009f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	f77f ae37 	ble.w	8009c02 <_dtoa_r+0x7b2>
 8009f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f98:	2001      	movs	r0, #1
 8009f9a:	e655      	b.n	8009c48 <_dtoa_r+0x7f8>
 8009f9c:	9b00      	ldr	r3, [sp, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f77f aed6 	ble.w	8009d50 <_dtoa_r+0x900>
 8009fa4:	4656      	mov	r6, sl
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4648      	mov	r0, r9
 8009faa:	f7ff f9c6 	bl	800933a <quorem>
 8009fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009fb2:	f806 8b01 	strb.w	r8, [r6], #1
 8009fb6:	9b00      	ldr	r3, [sp, #0]
 8009fb8:	eba6 020a 	sub.w	r2, r6, sl
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	ddb3      	ble.n	8009f28 <_dtoa_r+0xad8>
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	4658      	mov	r0, fp
 8009fc8:	f000 f968 	bl	800a29c <__multadd>
 8009fcc:	4681      	mov	r9, r0
 8009fce:	e7ea      	b.n	8009fa6 <_dtoa_r+0xb56>
 8009fd0:	0800c438 	.word	0x0800c438
 8009fd4:	0800c3bc 	.word	0x0800c3bc

08009fd8 <_free_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4605      	mov	r5, r0
 8009fdc:	2900      	cmp	r1, #0
 8009fde:	d041      	beq.n	800a064 <_free_r+0x8c>
 8009fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fe4:	1f0c      	subs	r4, r1, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	bfb8      	it	lt
 8009fea:	18e4      	addlt	r4, r4, r3
 8009fec:	f000 f8e8 	bl	800a1c0 <__malloc_lock>
 8009ff0:	4a1d      	ldr	r2, [pc, #116]	@ (800a068 <_free_r+0x90>)
 8009ff2:	6813      	ldr	r3, [r2, #0]
 8009ff4:	b933      	cbnz	r3, 800a004 <_free_r+0x2c>
 8009ff6:	6063      	str	r3, [r4, #4]
 8009ff8:	6014      	str	r4, [r2, #0]
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a000:	f000 b8e4 	b.w	800a1cc <__malloc_unlock>
 800a004:	42a3      	cmp	r3, r4
 800a006:	d908      	bls.n	800a01a <_free_r+0x42>
 800a008:	6820      	ldr	r0, [r4, #0]
 800a00a:	1821      	adds	r1, r4, r0
 800a00c:	428b      	cmp	r3, r1
 800a00e:	bf01      	itttt	eq
 800a010:	6819      	ldreq	r1, [r3, #0]
 800a012:	685b      	ldreq	r3, [r3, #4]
 800a014:	1809      	addeq	r1, r1, r0
 800a016:	6021      	streq	r1, [r4, #0]
 800a018:	e7ed      	b.n	8009ff6 <_free_r+0x1e>
 800a01a:	461a      	mov	r2, r3
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	b10b      	cbz	r3, 800a024 <_free_r+0x4c>
 800a020:	42a3      	cmp	r3, r4
 800a022:	d9fa      	bls.n	800a01a <_free_r+0x42>
 800a024:	6811      	ldr	r1, [r2, #0]
 800a026:	1850      	adds	r0, r2, r1
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d10b      	bne.n	800a044 <_free_r+0x6c>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	4401      	add	r1, r0
 800a030:	1850      	adds	r0, r2, r1
 800a032:	4283      	cmp	r3, r0
 800a034:	6011      	str	r1, [r2, #0]
 800a036:	d1e0      	bne.n	8009ffa <_free_r+0x22>
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	6053      	str	r3, [r2, #4]
 800a03e:	4408      	add	r0, r1
 800a040:	6010      	str	r0, [r2, #0]
 800a042:	e7da      	b.n	8009ffa <_free_r+0x22>
 800a044:	d902      	bls.n	800a04c <_free_r+0x74>
 800a046:	230c      	movs	r3, #12
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	e7d6      	b.n	8009ffa <_free_r+0x22>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	1821      	adds	r1, r4, r0
 800a050:	428b      	cmp	r3, r1
 800a052:	bf04      	itt	eq
 800a054:	6819      	ldreq	r1, [r3, #0]
 800a056:	685b      	ldreq	r3, [r3, #4]
 800a058:	6063      	str	r3, [r4, #4]
 800a05a:	bf04      	itt	eq
 800a05c:	1809      	addeq	r1, r1, r0
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	6054      	str	r4, [r2, #4]
 800a062:	e7ca      	b.n	8009ffa <_free_r+0x22>
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20000528 	.word	0x20000528

0800a06c <malloc>:
 800a06c:	4b02      	ldr	r3, [pc, #8]	@ (800a078 <malloc+0xc>)
 800a06e:	4601      	mov	r1, r0
 800a070:	6818      	ldr	r0, [r3, #0]
 800a072:	f000 b825 	b.w	800a0c0 <_malloc_r>
 800a076:	bf00      	nop
 800a078:	20000038 	.word	0x20000038

0800a07c <sbrk_aligned>:
 800a07c:	b570      	push	{r4, r5, r6, lr}
 800a07e:	4e0f      	ldr	r6, [pc, #60]	@ (800a0bc <sbrk_aligned+0x40>)
 800a080:	460c      	mov	r4, r1
 800a082:	6831      	ldr	r1, [r6, #0]
 800a084:	4605      	mov	r5, r0
 800a086:	b911      	cbnz	r1, 800a08e <sbrk_aligned+0x12>
 800a088:	f000 fe9a 	bl	800adc0 <_sbrk_r>
 800a08c:	6030      	str	r0, [r6, #0]
 800a08e:	4621      	mov	r1, r4
 800a090:	4628      	mov	r0, r5
 800a092:	f000 fe95 	bl	800adc0 <_sbrk_r>
 800a096:	1c43      	adds	r3, r0, #1
 800a098:	d103      	bne.n	800a0a2 <sbrk_aligned+0x26>
 800a09a:	f04f 34ff 	mov.w	r4, #4294967295
 800a09e:	4620      	mov	r0, r4
 800a0a0:	bd70      	pop	{r4, r5, r6, pc}
 800a0a2:	1cc4      	adds	r4, r0, #3
 800a0a4:	f024 0403 	bic.w	r4, r4, #3
 800a0a8:	42a0      	cmp	r0, r4
 800a0aa:	d0f8      	beq.n	800a09e <sbrk_aligned+0x22>
 800a0ac:	1a21      	subs	r1, r4, r0
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f000 fe86 	bl	800adc0 <_sbrk_r>
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d1f2      	bne.n	800a09e <sbrk_aligned+0x22>
 800a0b8:	e7ef      	b.n	800a09a <sbrk_aligned+0x1e>
 800a0ba:	bf00      	nop
 800a0bc:	20000524 	.word	0x20000524

0800a0c0 <_malloc_r>:
 800a0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c4:	1ccd      	adds	r5, r1, #3
 800a0c6:	f025 0503 	bic.w	r5, r5, #3
 800a0ca:	3508      	adds	r5, #8
 800a0cc:	2d0c      	cmp	r5, #12
 800a0ce:	bf38      	it	cc
 800a0d0:	250c      	movcc	r5, #12
 800a0d2:	2d00      	cmp	r5, #0
 800a0d4:	4606      	mov	r6, r0
 800a0d6:	db01      	blt.n	800a0dc <_malloc_r+0x1c>
 800a0d8:	42a9      	cmp	r1, r5
 800a0da:	d904      	bls.n	800a0e6 <_malloc_r+0x26>
 800a0dc:	230c      	movs	r3, #12
 800a0de:	6033      	str	r3, [r6, #0]
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1bc <_malloc_r+0xfc>
 800a0ea:	f000 f869 	bl	800a1c0 <__malloc_lock>
 800a0ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a0f2:	461c      	mov	r4, r3
 800a0f4:	bb44      	cbnz	r4, 800a148 <_malloc_r+0x88>
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffbf 	bl	800a07c <sbrk_aligned>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	4604      	mov	r4, r0
 800a102:	d158      	bne.n	800a1b6 <_malloc_r+0xf6>
 800a104:	f8d8 4000 	ldr.w	r4, [r8]
 800a108:	4627      	mov	r7, r4
 800a10a:	2f00      	cmp	r7, #0
 800a10c:	d143      	bne.n	800a196 <_malloc_r+0xd6>
 800a10e:	2c00      	cmp	r4, #0
 800a110:	d04b      	beq.n	800a1aa <_malloc_r+0xea>
 800a112:	6823      	ldr	r3, [r4, #0]
 800a114:	4639      	mov	r1, r7
 800a116:	4630      	mov	r0, r6
 800a118:	eb04 0903 	add.w	r9, r4, r3
 800a11c:	f000 fe50 	bl	800adc0 <_sbrk_r>
 800a120:	4581      	cmp	r9, r0
 800a122:	d142      	bne.n	800a1aa <_malloc_r+0xea>
 800a124:	6821      	ldr	r1, [r4, #0]
 800a126:	1a6d      	subs	r5, r5, r1
 800a128:	4629      	mov	r1, r5
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7ff ffa6 	bl	800a07c <sbrk_aligned>
 800a130:	3001      	adds	r0, #1
 800a132:	d03a      	beq.n	800a1aa <_malloc_r+0xea>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	442b      	add	r3, r5
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	f8d8 3000 	ldr.w	r3, [r8]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	bb62      	cbnz	r2, 800a19c <_malloc_r+0xdc>
 800a142:	f8c8 7000 	str.w	r7, [r8]
 800a146:	e00f      	b.n	800a168 <_malloc_r+0xa8>
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	1b52      	subs	r2, r2, r5
 800a14c:	d420      	bmi.n	800a190 <_malloc_r+0xd0>
 800a14e:	2a0b      	cmp	r2, #11
 800a150:	d917      	bls.n	800a182 <_malloc_r+0xc2>
 800a152:	1961      	adds	r1, r4, r5
 800a154:	42a3      	cmp	r3, r4
 800a156:	6025      	str	r5, [r4, #0]
 800a158:	bf18      	it	ne
 800a15a:	6059      	strne	r1, [r3, #4]
 800a15c:	6863      	ldr	r3, [r4, #4]
 800a15e:	bf08      	it	eq
 800a160:	f8c8 1000 	streq.w	r1, [r8]
 800a164:	5162      	str	r2, [r4, r5]
 800a166:	604b      	str	r3, [r1, #4]
 800a168:	4630      	mov	r0, r6
 800a16a:	f000 f82f 	bl	800a1cc <__malloc_unlock>
 800a16e:	f104 000b 	add.w	r0, r4, #11
 800a172:	1d23      	adds	r3, r4, #4
 800a174:	f020 0007 	bic.w	r0, r0, #7
 800a178:	1ac2      	subs	r2, r0, r3
 800a17a:	bf1c      	itt	ne
 800a17c:	1a1b      	subne	r3, r3, r0
 800a17e:	50a3      	strne	r3, [r4, r2]
 800a180:	e7af      	b.n	800a0e2 <_malloc_r+0x22>
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	42a3      	cmp	r3, r4
 800a186:	bf0c      	ite	eq
 800a188:	f8c8 2000 	streq.w	r2, [r8]
 800a18c:	605a      	strne	r2, [r3, #4]
 800a18e:	e7eb      	b.n	800a168 <_malloc_r+0xa8>
 800a190:	4623      	mov	r3, r4
 800a192:	6864      	ldr	r4, [r4, #4]
 800a194:	e7ae      	b.n	800a0f4 <_malloc_r+0x34>
 800a196:	463c      	mov	r4, r7
 800a198:	687f      	ldr	r7, [r7, #4]
 800a19a:	e7b6      	b.n	800a10a <_malloc_r+0x4a>
 800a19c:	461a      	mov	r2, r3
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	42a3      	cmp	r3, r4
 800a1a2:	d1fb      	bne.n	800a19c <_malloc_r+0xdc>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6053      	str	r3, [r2, #4]
 800a1a8:	e7de      	b.n	800a168 <_malloc_r+0xa8>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	6033      	str	r3, [r6, #0]
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 f80c 	bl	800a1cc <__malloc_unlock>
 800a1b4:	e794      	b.n	800a0e0 <_malloc_r+0x20>
 800a1b6:	6005      	str	r5, [r0, #0]
 800a1b8:	e7d6      	b.n	800a168 <_malloc_r+0xa8>
 800a1ba:	bf00      	nop
 800a1bc:	20000528 	.word	0x20000528

0800a1c0 <__malloc_lock>:
 800a1c0:	4801      	ldr	r0, [pc, #4]	@ (800a1c8 <__malloc_lock+0x8>)
 800a1c2:	f7ff b8aa 	b.w	800931a <__retarget_lock_acquire_recursive>
 800a1c6:	bf00      	nop
 800a1c8:	20000520 	.word	0x20000520

0800a1cc <__malloc_unlock>:
 800a1cc:	4801      	ldr	r0, [pc, #4]	@ (800a1d4 <__malloc_unlock+0x8>)
 800a1ce:	f7ff b8a5 	b.w	800931c <__retarget_lock_release_recursive>
 800a1d2:	bf00      	nop
 800a1d4:	20000520 	.word	0x20000520

0800a1d8 <_Balloc>:
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	69c6      	ldr	r6, [r0, #28]
 800a1dc:	4604      	mov	r4, r0
 800a1de:	460d      	mov	r5, r1
 800a1e0:	b976      	cbnz	r6, 800a200 <_Balloc+0x28>
 800a1e2:	2010      	movs	r0, #16
 800a1e4:	f7ff ff42 	bl	800a06c <malloc>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	61e0      	str	r0, [r4, #28]
 800a1ec:	b920      	cbnz	r0, 800a1f8 <_Balloc+0x20>
 800a1ee:	4b18      	ldr	r3, [pc, #96]	@ (800a250 <_Balloc+0x78>)
 800a1f0:	4818      	ldr	r0, [pc, #96]	@ (800a254 <_Balloc+0x7c>)
 800a1f2:	216b      	movs	r1, #107	@ 0x6b
 800a1f4:	f000 fdf4 	bl	800ade0 <__assert_func>
 800a1f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1fc:	6006      	str	r6, [r0, #0]
 800a1fe:	60c6      	str	r6, [r0, #12]
 800a200:	69e6      	ldr	r6, [r4, #28]
 800a202:	68f3      	ldr	r3, [r6, #12]
 800a204:	b183      	cbz	r3, 800a228 <_Balloc+0x50>
 800a206:	69e3      	ldr	r3, [r4, #28]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a20e:	b9b8      	cbnz	r0, 800a240 <_Balloc+0x68>
 800a210:	2101      	movs	r1, #1
 800a212:	fa01 f605 	lsl.w	r6, r1, r5
 800a216:	1d72      	adds	r2, r6, #5
 800a218:	0092      	lsls	r2, r2, #2
 800a21a:	4620      	mov	r0, r4
 800a21c:	f000 fdfe 	bl	800ae1c <_calloc_r>
 800a220:	b160      	cbz	r0, 800a23c <_Balloc+0x64>
 800a222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a226:	e00e      	b.n	800a246 <_Balloc+0x6e>
 800a228:	2221      	movs	r2, #33	@ 0x21
 800a22a:	2104      	movs	r1, #4
 800a22c:	4620      	mov	r0, r4
 800a22e:	f000 fdf5 	bl	800ae1c <_calloc_r>
 800a232:	69e3      	ldr	r3, [r4, #28]
 800a234:	60f0      	str	r0, [r6, #12]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1e4      	bne.n	800a206 <_Balloc+0x2e>
 800a23c:	2000      	movs	r0, #0
 800a23e:	bd70      	pop	{r4, r5, r6, pc}
 800a240:	6802      	ldr	r2, [r0, #0]
 800a242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a246:	2300      	movs	r3, #0
 800a248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a24c:	e7f7      	b.n	800a23e <_Balloc+0x66>
 800a24e:	bf00      	nop
 800a250:	0800c3c9 	.word	0x0800c3c9
 800a254:	0800c449 	.word	0x0800c449

0800a258 <_Bfree>:
 800a258:	b570      	push	{r4, r5, r6, lr}
 800a25a:	69c6      	ldr	r6, [r0, #28]
 800a25c:	4605      	mov	r5, r0
 800a25e:	460c      	mov	r4, r1
 800a260:	b976      	cbnz	r6, 800a280 <_Bfree+0x28>
 800a262:	2010      	movs	r0, #16
 800a264:	f7ff ff02 	bl	800a06c <malloc>
 800a268:	4602      	mov	r2, r0
 800a26a:	61e8      	str	r0, [r5, #28]
 800a26c:	b920      	cbnz	r0, 800a278 <_Bfree+0x20>
 800a26e:	4b09      	ldr	r3, [pc, #36]	@ (800a294 <_Bfree+0x3c>)
 800a270:	4809      	ldr	r0, [pc, #36]	@ (800a298 <_Bfree+0x40>)
 800a272:	218f      	movs	r1, #143	@ 0x8f
 800a274:	f000 fdb4 	bl	800ade0 <__assert_func>
 800a278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a27c:	6006      	str	r6, [r0, #0]
 800a27e:	60c6      	str	r6, [r0, #12]
 800a280:	b13c      	cbz	r4, 800a292 <_Bfree+0x3a>
 800a282:	69eb      	ldr	r3, [r5, #28]
 800a284:	6862      	ldr	r2, [r4, #4]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a28c:	6021      	str	r1, [r4, #0]
 800a28e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	0800c3c9 	.word	0x0800c3c9
 800a298:	0800c449 	.word	0x0800c449

0800a29c <__multadd>:
 800a29c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a0:	690d      	ldr	r5, [r1, #16]
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	460c      	mov	r4, r1
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	f101 0c14 	add.w	ip, r1, #20
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a2b2:	b299      	uxth	r1, r3
 800a2b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2b8:	0c1e      	lsrs	r6, r3, #16
 800a2ba:	0c0b      	lsrs	r3, r1, #16
 800a2bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a2c0:	b289      	uxth	r1, r1
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2c8:	4285      	cmp	r5, r0
 800a2ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a2ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2d2:	dcec      	bgt.n	800a2ae <__multadd+0x12>
 800a2d4:	b30e      	cbz	r6, 800a31a <__multadd+0x7e>
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	42ab      	cmp	r3, r5
 800a2da:	dc19      	bgt.n	800a310 <__multadd+0x74>
 800a2dc:	6861      	ldr	r1, [r4, #4]
 800a2de:	4638      	mov	r0, r7
 800a2e0:	3101      	adds	r1, #1
 800a2e2:	f7ff ff79 	bl	800a1d8 <_Balloc>
 800a2e6:	4680      	mov	r8, r0
 800a2e8:	b928      	cbnz	r0, 800a2f6 <__multadd+0x5a>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <__multadd+0x84>)
 800a2ee:	480d      	ldr	r0, [pc, #52]	@ (800a324 <__multadd+0x88>)
 800a2f0:	21ba      	movs	r1, #186	@ 0xba
 800a2f2:	f000 fd75 	bl	800ade0 <__assert_func>
 800a2f6:	6922      	ldr	r2, [r4, #16]
 800a2f8:	3202      	adds	r2, #2
 800a2fa:	f104 010c 	add.w	r1, r4, #12
 800a2fe:	0092      	lsls	r2, r2, #2
 800a300:	300c      	adds	r0, #12
 800a302:	f7ff f80c 	bl	800931e <memcpy>
 800a306:	4621      	mov	r1, r4
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ffa5 	bl	800a258 <_Bfree>
 800a30e:	4644      	mov	r4, r8
 800a310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a314:	3501      	adds	r5, #1
 800a316:	615e      	str	r6, [r3, #20]
 800a318:	6125      	str	r5, [r4, #16]
 800a31a:	4620      	mov	r0, r4
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a320:	0800c438 	.word	0x0800c438
 800a324:	0800c449 	.word	0x0800c449

0800a328 <__hi0bits>:
 800a328:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a32c:	4603      	mov	r3, r0
 800a32e:	bf36      	itet	cc
 800a330:	0403      	lslcc	r3, r0, #16
 800a332:	2000      	movcs	r0, #0
 800a334:	2010      	movcc	r0, #16
 800a336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a33a:	bf3c      	itt	cc
 800a33c:	021b      	lslcc	r3, r3, #8
 800a33e:	3008      	addcc	r0, #8
 800a340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a344:	bf3c      	itt	cc
 800a346:	011b      	lslcc	r3, r3, #4
 800a348:	3004      	addcc	r0, #4
 800a34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a34e:	bf3c      	itt	cc
 800a350:	009b      	lslcc	r3, r3, #2
 800a352:	3002      	addcc	r0, #2
 800a354:	2b00      	cmp	r3, #0
 800a356:	db05      	blt.n	800a364 <__hi0bits+0x3c>
 800a358:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a35c:	f100 0001 	add.w	r0, r0, #1
 800a360:	bf08      	it	eq
 800a362:	2020      	moveq	r0, #32
 800a364:	4770      	bx	lr

0800a366 <__lo0bits>:
 800a366:	6803      	ldr	r3, [r0, #0]
 800a368:	4602      	mov	r2, r0
 800a36a:	f013 0007 	ands.w	r0, r3, #7
 800a36e:	d00b      	beq.n	800a388 <__lo0bits+0x22>
 800a370:	07d9      	lsls	r1, r3, #31
 800a372:	d421      	bmi.n	800a3b8 <__lo0bits+0x52>
 800a374:	0798      	lsls	r0, r3, #30
 800a376:	bf49      	itett	mi
 800a378:	085b      	lsrmi	r3, r3, #1
 800a37a:	089b      	lsrpl	r3, r3, #2
 800a37c:	2001      	movmi	r0, #1
 800a37e:	6013      	strmi	r3, [r2, #0]
 800a380:	bf5c      	itt	pl
 800a382:	6013      	strpl	r3, [r2, #0]
 800a384:	2002      	movpl	r0, #2
 800a386:	4770      	bx	lr
 800a388:	b299      	uxth	r1, r3
 800a38a:	b909      	cbnz	r1, 800a390 <__lo0bits+0x2a>
 800a38c:	0c1b      	lsrs	r3, r3, #16
 800a38e:	2010      	movs	r0, #16
 800a390:	b2d9      	uxtb	r1, r3
 800a392:	b909      	cbnz	r1, 800a398 <__lo0bits+0x32>
 800a394:	3008      	adds	r0, #8
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	0719      	lsls	r1, r3, #28
 800a39a:	bf04      	itt	eq
 800a39c:	091b      	lsreq	r3, r3, #4
 800a39e:	3004      	addeq	r0, #4
 800a3a0:	0799      	lsls	r1, r3, #30
 800a3a2:	bf04      	itt	eq
 800a3a4:	089b      	lsreq	r3, r3, #2
 800a3a6:	3002      	addeq	r0, #2
 800a3a8:	07d9      	lsls	r1, r3, #31
 800a3aa:	d403      	bmi.n	800a3b4 <__lo0bits+0x4e>
 800a3ac:	085b      	lsrs	r3, r3, #1
 800a3ae:	f100 0001 	add.w	r0, r0, #1
 800a3b2:	d003      	beq.n	800a3bc <__lo0bits+0x56>
 800a3b4:	6013      	str	r3, [r2, #0]
 800a3b6:	4770      	bx	lr
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	4770      	bx	lr
 800a3bc:	2020      	movs	r0, #32
 800a3be:	4770      	bx	lr

0800a3c0 <__i2b>:
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	460c      	mov	r4, r1
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	f7ff ff07 	bl	800a1d8 <_Balloc>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	b928      	cbnz	r0, 800a3da <__i2b+0x1a>
 800a3ce:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <__i2b+0x24>)
 800a3d0:	4805      	ldr	r0, [pc, #20]	@ (800a3e8 <__i2b+0x28>)
 800a3d2:	f240 1145 	movw	r1, #325	@ 0x145
 800a3d6:	f000 fd03 	bl	800ade0 <__assert_func>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	6144      	str	r4, [r0, #20]
 800a3de:	6103      	str	r3, [r0, #16]
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	bf00      	nop
 800a3e4:	0800c438 	.word	0x0800c438
 800a3e8:	0800c449 	.word	0x0800c449

0800a3ec <__multiply>:
 800a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	4614      	mov	r4, r2
 800a3f2:	690a      	ldr	r2, [r1, #16]
 800a3f4:	6923      	ldr	r3, [r4, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	bfa8      	it	ge
 800a3fa:	4623      	movge	r3, r4
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	bfa4      	itt	ge
 800a400:	460c      	movge	r4, r1
 800a402:	461f      	movge	r7, r3
 800a404:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a408:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a40c:	68a3      	ldr	r3, [r4, #8]
 800a40e:	6861      	ldr	r1, [r4, #4]
 800a410:	eb0a 0609 	add.w	r6, sl, r9
 800a414:	42b3      	cmp	r3, r6
 800a416:	b085      	sub	sp, #20
 800a418:	bfb8      	it	lt
 800a41a:	3101      	addlt	r1, #1
 800a41c:	f7ff fedc 	bl	800a1d8 <_Balloc>
 800a420:	b930      	cbnz	r0, 800a430 <__multiply+0x44>
 800a422:	4602      	mov	r2, r0
 800a424:	4b44      	ldr	r3, [pc, #272]	@ (800a538 <__multiply+0x14c>)
 800a426:	4845      	ldr	r0, [pc, #276]	@ (800a53c <__multiply+0x150>)
 800a428:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a42c:	f000 fcd8 	bl	800ade0 <__assert_func>
 800a430:	f100 0514 	add.w	r5, r0, #20
 800a434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a438:	462b      	mov	r3, r5
 800a43a:	2200      	movs	r2, #0
 800a43c:	4543      	cmp	r3, r8
 800a43e:	d321      	bcc.n	800a484 <__multiply+0x98>
 800a440:	f107 0114 	add.w	r1, r7, #20
 800a444:	f104 0214 	add.w	r2, r4, #20
 800a448:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a44c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	1b13      	subs	r3, r2, r4
 800a454:	3b15      	subs	r3, #21
 800a456:	f023 0303 	bic.w	r3, r3, #3
 800a45a:	3304      	adds	r3, #4
 800a45c:	f104 0715 	add.w	r7, r4, #21
 800a460:	42ba      	cmp	r2, r7
 800a462:	bf38      	it	cc
 800a464:	2304      	movcc	r3, #4
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	9b02      	ldr	r3, [sp, #8]
 800a46a:	9103      	str	r1, [sp, #12]
 800a46c:	428b      	cmp	r3, r1
 800a46e:	d80c      	bhi.n	800a48a <__multiply+0x9e>
 800a470:	2e00      	cmp	r6, #0
 800a472:	dd03      	ble.n	800a47c <__multiply+0x90>
 800a474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d05b      	beq.n	800a534 <__multiply+0x148>
 800a47c:	6106      	str	r6, [r0, #16]
 800a47e:	b005      	add	sp, #20
 800a480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a484:	f843 2b04 	str.w	r2, [r3], #4
 800a488:	e7d8      	b.n	800a43c <__multiply+0x50>
 800a48a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a48e:	f1ba 0f00 	cmp.w	sl, #0
 800a492:	d024      	beq.n	800a4de <__multiply+0xf2>
 800a494:	f104 0e14 	add.w	lr, r4, #20
 800a498:	46a9      	mov	r9, r5
 800a49a:	f04f 0c00 	mov.w	ip, #0
 800a49e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4a2:	f8d9 3000 	ldr.w	r3, [r9]
 800a4a6:	fa1f fb87 	uxth.w	fp, r7
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800a4b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a4b4:	f8d9 7000 	ldr.w	r7, [r9]
 800a4b8:	4463      	add	r3, ip
 800a4ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4be:	fb0a c70b 	mla	r7, sl, fp, ip
 800a4c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a4cc:	4572      	cmp	r2, lr
 800a4ce:	f849 3b04 	str.w	r3, [r9], #4
 800a4d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a4d6:	d8e2      	bhi.n	800a49e <__multiply+0xb2>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	f845 c003 	str.w	ip, [r5, r3]
 800a4de:	9b03      	ldr	r3, [sp, #12]
 800a4e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4e4:	3104      	adds	r1, #4
 800a4e6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ea:	d021      	beq.n	800a530 <__multiply+0x144>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	f104 0c14 	add.w	ip, r4, #20
 800a4f2:	46ae      	mov	lr, r5
 800a4f4:	f04f 0a00 	mov.w	sl, #0
 800a4f8:	f8bc b000 	ldrh.w	fp, [ip]
 800a4fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a500:	fb09 770b 	mla	r7, r9, fp, r7
 800a504:	4457      	add	r7, sl
 800a506:	b29b      	uxth	r3, r3
 800a508:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a50c:	f84e 3b04 	str.w	r3, [lr], #4
 800a510:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a518:	f8be 3000 	ldrh.w	r3, [lr]
 800a51c:	fb09 330a 	mla	r3, r9, sl, r3
 800a520:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a524:	4562      	cmp	r2, ip
 800a526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a52a:	d8e5      	bhi.n	800a4f8 <__multiply+0x10c>
 800a52c:	9f01      	ldr	r7, [sp, #4]
 800a52e:	51eb      	str	r3, [r5, r7]
 800a530:	3504      	adds	r5, #4
 800a532:	e799      	b.n	800a468 <__multiply+0x7c>
 800a534:	3e01      	subs	r6, #1
 800a536:	e79b      	b.n	800a470 <__multiply+0x84>
 800a538:	0800c438 	.word	0x0800c438
 800a53c:	0800c449 	.word	0x0800c449

0800a540 <__pow5mult>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	4615      	mov	r5, r2
 800a546:	f012 0203 	ands.w	r2, r2, #3
 800a54a:	4607      	mov	r7, r0
 800a54c:	460e      	mov	r6, r1
 800a54e:	d007      	beq.n	800a560 <__pow5mult+0x20>
 800a550:	4c25      	ldr	r4, [pc, #148]	@ (800a5e8 <__pow5mult+0xa8>)
 800a552:	3a01      	subs	r2, #1
 800a554:	2300      	movs	r3, #0
 800a556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a55a:	f7ff fe9f 	bl	800a29c <__multadd>
 800a55e:	4606      	mov	r6, r0
 800a560:	10ad      	asrs	r5, r5, #2
 800a562:	d03d      	beq.n	800a5e0 <__pow5mult+0xa0>
 800a564:	69fc      	ldr	r4, [r7, #28]
 800a566:	b97c      	cbnz	r4, 800a588 <__pow5mult+0x48>
 800a568:	2010      	movs	r0, #16
 800a56a:	f7ff fd7f 	bl	800a06c <malloc>
 800a56e:	4602      	mov	r2, r0
 800a570:	61f8      	str	r0, [r7, #28]
 800a572:	b928      	cbnz	r0, 800a580 <__pow5mult+0x40>
 800a574:	4b1d      	ldr	r3, [pc, #116]	@ (800a5ec <__pow5mult+0xac>)
 800a576:	481e      	ldr	r0, [pc, #120]	@ (800a5f0 <__pow5mult+0xb0>)
 800a578:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a57c:	f000 fc30 	bl	800ade0 <__assert_func>
 800a580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a584:	6004      	str	r4, [r0, #0]
 800a586:	60c4      	str	r4, [r0, #12]
 800a588:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a58c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a590:	b94c      	cbnz	r4, 800a5a6 <__pow5mult+0x66>
 800a592:	f240 2171 	movw	r1, #625	@ 0x271
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff ff12 	bl	800a3c0 <__i2b>
 800a59c:	2300      	movs	r3, #0
 800a59e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	6003      	str	r3, [r0, #0]
 800a5a6:	f04f 0900 	mov.w	r9, #0
 800a5aa:	07eb      	lsls	r3, r5, #31
 800a5ac:	d50a      	bpl.n	800a5c4 <__pow5mult+0x84>
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4622      	mov	r2, r4
 800a5b2:	4638      	mov	r0, r7
 800a5b4:	f7ff ff1a 	bl	800a3ec <__multiply>
 800a5b8:	4631      	mov	r1, r6
 800a5ba:	4680      	mov	r8, r0
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f7ff fe4b 	bl	800a258 <_Bfree>
 800a5c2:	4646      	mov	r6, r8
 800a5c4:	106d      	asrs	r5, r5, #1
 800a5c6:	d00b      	beq.n	800a5e0 <__pow5mult+0xa0>
 800a5c8:	6820      	ldr	r0, [r4, #0]
 800a5ca:	b938      	cbnz	r0, 800a5dc <__pow5mult+0x9c>
 800a5cc:	4622      	mov	r2, r4
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4638      	mov	r0, r7
 800a5d2:	f7ff ff0b 	bl	800a3ec <__multiply>
 800a5d6:	6020      	str	r0, [r4, #0]
 800a5d8:	f8c0 9000 	str.w	r9, [r0]
 800a5dc:	4604      	mov	r4, r0
 800a5de:	e7e4      	b.n	800a5aa <__pow5mult+0x6a>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5e6:	bf00      	nop
 800a5e8:	0800c4a4 	.word	0x0800c4a4
 800a5ec:	0800c3c9 	.word	0x0800c3c9
 800a5f0:	0800c449 	.word	0x0800c449

0800a5f4 <__lshift>:
 800a5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	460c      	mov	r4, r1
 800a5fa:	6849      	ldr	r1, [r1, #4]
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	4607      	mov	r7, r0
 800a606:	4691      	mov	r9, r2
 800a608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a60c:	f108 0601 	add.w	r6, r8, #1
 800a610:	42b3      	cmp	r3, r6
 800a612:	db0b      	blt.n	800a62c <__lshift+0x38>
 800a614:	4638      	mov	r0, r7
 800a616:	f7ff fddf 	bl	800a1d8 <_Balloc>
 800a61a:	4605      	mov	r5, r0
 800a61c:	b948      	cbnz	r0, 800a632 <__lshift+0x3e>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b28      	ldr	r3, [pc, #160]	@ (800a6c4 <__lshift+0xd0>)
 800a622:	4829      	ldr	r0, [pc, #164]	@ (800a6c8 <__lshift+0xd4>)
 800a624:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a628:	f000 fbda 	bl	800ade0 <__assert_func>
 800a62c:	3101      	adds	r1, #1
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	e7ee      	b.n	800a610 <__lshift+0x1c>
 800a632:	2300      	movs	r3, #0
 800a634:	f100 0114 	add.w	r1, r0, #20
 800a638:	f100 0210 	add.w	r2, r0, #16
 800a63c:	4618      	mov	r0, r3
 800a63e:	4553      	cmp	r3, sl
 800a640:	db33      	blt.n	800a6aa <__lshift+0xb6>
 800a642:	6920      	ldr	r0, [r4, #16]
 800a644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a648:	f104 0314 	add.w	r3, r4, #20
 800a64c:	f019 091f 	ands.w	r9, r9, #31
 800a650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a658:	d02b      	beq.n	800a6b2 <__lshift+0xbe>
 800a65a:	f1c9 0e20 	rsb	lr, r9, #32
 800a65e:	468a      	mov	sl, r1
 800a660:	2200      	movs	r2, #0
 800a662:	6818      	ldr	r0, [r3, #0]
 800a664:	fa00 f009 	lsl.w	r0, r0, r9
 800a668:	4310      	orrs	r0, r2
 800a66a:	f84a 0b04 	str.w	r0, [sl], #4
 800a66e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a672:	459c      	cmp	ip, r3
 800a674:	fa22 f20e 	lsr.w	r2, r2, lr
 800a678:	d8f3      	bhi.n	800a662 <__lshift+0x6e>
 800a67a:	ebac 0304 	sub.w	r3, ip, r4
 800a67e:	3b15      	subs	r3, #21
 800a680:	f023 0303 	bic.w	r3, r3, #3
 800a684:	3304      	adds	r3, #4
 800a686:	f104 0015 	add.w	r0, r4, #21
 800a68a:	4584      	cmp	ip, r0
 800a68c:	bf38      	it	cc
 800a68e:	2304      	movcc	r3, #4
 800a690:	50ca      	str	r2, [r1, r3]
 800a692:	b10a      	cbz	r2, 800a698 <__lshift+0xa4>
 800a694:	f108 0602 	add.w	r6, r8, #2
 800a698:	3e01      	subs	r6, #1
 800a69a:	4638      	mov	r0, r7
 800a69c:	612e      	str	r6, [r5, #16]
 800a69e:	4621      	mov	r1, r4
 800a6a0:	f7ff fdda 	bl	800a258 <_Bfree>
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	e7c5      	b.n	800a63e <__lshift+0x4a>
 800a6b2:	3904      	subs	r1, #4
 800a6b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6bc:	459c      	cmp	ip, r3
 800a6be:	d8f9      	bhi.n	800a6b4 <__lshift+0xc0>
 800a6c0:	e7ea      	b.n	800a698 <__lshift+0xa4>
 800a6c2:	bf00      	nop
 800a6c4:	0800c438 	.word	0x0800c438
 800a6c8:	0800c449 	.word	0x0800c449

0800a6cc <__mcmp>:
 800a6cc:	690a      	ldr	r2, [r1, #16]
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	6900      	ldr	r0, [r0, #16]
 800a6d2:	1a80      	subs	r0, r0, r2
 800a6d4:	b530      	push	{r4, r5, lr}
 800a6d6:	d10e      	bne.n	800a6f6 <__mcmp+0x2a>
 800a6d8:	3314      	adds	r3, #20
 800a6da:	3114      	adds	r1, #20
 800a6dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6ec:	4295      	cmp	r5, r2
 800a6ee:	d003      	beq.n	800a6f8 <__mcmp+0x2c>
 800a6f0:	d205      	bcs.n	800a6fe <__mcmp+0x32>
 800a6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6f6:	bd30      	pop	{r4, r5, pc}
 800a6f8:	42a3      	cmp	r3, r4
 800a6fa:	d3f3      	bcc.n	800a6e4 <__mcmp+0x18>
 800a6fc:	e7fb      	b.n	800a6f6 <__mcmp+0x2a>
 800a6fe:	2001      	movs	r0, #1
 800a700:	e7f9      	b.n	800a6f6 <__mcmp+0x2a>
	...

0800a704 <__mdiff>:
 800a704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a708:	4689      	mov	r9, r1
 800a70a:	4606      	mov	r6, r0
 800a70c:	4611      	mov	r1, r2
 800a70e:	4648      	mov	r0, r9
 800a710:	4614      	mov	r4, r2
 800a712:	f7ff ffdb 	bl	800a6cc <__mcmp>
 800a716:	1e05      	subs	r5, r0, #0
 800a718:	d112      	bne.n	800a740 <__mdiff+0x3c>
 800a71a:	4629      	mov	r1, r5
 800a71c:	4630      	mov	r0, r6
 800a71e:	f7ff fd5b 	bl	800a1d8 <_Balloc>
 800a722:	4602      	mov	r2, r0
 800a724:	b928      	cbnz	r0, 800a732 <__mdiff+0x2e>
 800a726:	4b3f      	ldr	r3, [pc, #252]	@ (800a824 <__mdiff+0x120>)
 800a728:	f240 2137 	movw	r1, #567	@ 0x237
 800a72c:	483e      	ldr	r0, [pc, #248]	@ (800a828 <__mdiff+0x124>)
 800a72e:	f000 fb57 	bl	800ade0 <__assert_func>
 800a732:	2301      	movs	r3, #1
 800a734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a738:	4610      	mov	r0, r2
 800a73a:	b003      	add	sp, #12
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a740:	bfbc      	itt	lt
 800a742:	464b      	movlt	r3, r9
 800a744:	46a1      	movlt	r9, r4
 800a746:	4630      	mov	r0, r6
 800a748:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a74c:	bfba      	itte	lt
 800a74e:	461c      	movlt	r4, r3
 800a750:	2501      	movlt	r5, #1
 800a752:	2500      	movge	r5, #0
 800a754:	f7ff fd40 	bl	800a1d8 <_Balloc>
 800a758:	4602      	mov	r2, r0
 800a75a:	b918      	cbnz	r0, 800a764 <__mdiff+0x60>
 800a75c:	4b31      	ldr	r3, [pc, #196]	@ (800a824 <__mdiff+0x120>)
 800a75e:	f240 2145 	movw	r1, #581	@ 0x245
 800a762:	e7e3      	b.n	800a72c <__mdiff+0x28>
 800a764:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a768:	6926      	ldr	r6, [r4, #16]
 800a76a:	60c5      	str	r5, [r0, #12]
 800a76c:	f109 0310 	add.w	r3, r9, #16
 800a770:	f109 0514 	add.w	r5, r9, #20
 800a774:	f104 0e14 	add.w	lr, r4, #20
 800a778:	f100 0b14 	add.w	fp, r0, #20
 800a77c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a780:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a784:	9301      	str	r3, [sp, #4]
 800a786:	46d9      	mov	r9, fp
 800a788:	f04f 0c00 	mov.w	ip, #0
 800a78c:	9b01      	ldr	r3, [sp, #4]
 800a78e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a792:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	fa1f f38a 	uxth.w	r3, sl
 800a79c:	4619      	mov	r1, r3
 800a79e:	b283      	uxth	r3, r0
 800a7a0:	1acb      	subs	r3, r1, r3
 800a7a2:	0c00      	lsrs	r0, r0, #16
 800a7a4:	4463      	add	r3, ip
 800a7a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a7aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a7b4:	4576      	cmp	r6, lr
 800a7b6:	f849 3b04 	str.w	r3, [r9], #4
 800a7ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7be:	d8e5      	bhi.n	800a78c <__mdiff+0x88>
 800a7c0:	1b33      	subs	r3, r6, r4
 800a7c2:	3b15      	subs	r3, #21
 800a7c4:	f023 0303 	bic.w	r3, r3, #3
 800a7c8:	3415      	adds	r4, #21
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	42a6      	cmp	r6, r4
 800a7ce:	bf38      	it	cc
 800a7d0:	2304      	movcc	r3, #4
 800a7d2:	441d      	add	r5, r3
 800a7d4:	445b      	add	r3, fp
 800a7d6:	461e      	mov	r6, r3
 800a7d8:	462c      	mov	r4, r5
 800a7da:	4544      	cmp	r4, r8
 800a7dc:	d30e      	bcc.n	800a7fc <__mdiff+0xf8>
 800a7de:	f108 0103 	add.w	r1, r8, #3
 800a7e2:	1b49      	subs	r1, r1, r5
 800a7e4:	f021 0103 	bic.w	r1, r1, #3
 800a7e8:	3d03      	subs	r5, #3
 800a7ea:	45a8      	cmp	r8, r5
 800a7ec:	bf38      	it	cc
 800a7ee:	2100      	movcc	r1, #0
 800a7f0:	440b      	add	r3, r1
 800a7f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7f6:	b191      	cbz	r1, 800a81e <__mdiff+0x11a>
 800a7f8:	6117      	str	r7, [r2, #16]
 800a7fa:	e79d      	b.n	800a738 <__mdiff+0x34>
 800a7fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a800:	46e6      	mov	lr, ip
 800a802:	0c08      	lsrs	r0, r1, #16
 800a804:	fa1c fc81 	uxtah	ip, ip, r1
 800a808:	4471      	add	r1, lr
 800a80a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a80e:	b289      	uxth	r1, r1
 800a810:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a814:	f846 1b04 	str.w	r1, [r6], #4
 800a818:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a81c:	e7dd      	b.n	800a7da <__mdiff+0xd6>
 800a81e:	3f01      	subs	r7, #1
 800a820:	e7e7      	b.n	800a7f2 <__mdiff+0xee>
 800a822:	bf00      	nop
 800a824:	0800c438 	.word	0x0800c438
 800a828:	0800c449 	.word	0x0800c449

0800a82c <__d2b>:
 800a82c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a830:	460f      	mov	r7, r1
 800a832:	2101      	movs	r1, #1
 800a834:	ec59 8b10 	vmov	r8, r9, d0
 800a838:	4616      	mov	r6, r2
 800a83a:	f7ff fccd 	bl	800a1d8 <_Balloc>
 800a83e:	4604      	mov	r4, r0
 800a840:	b930      	cbnz	r0, 800a850 <__d2b+0x24>
 800a842:	4602      	mov	r2, r0
 800a844:	4b23      	ldr	r3, [pc, #140]	@ (800a8d4 <__d2b+0xa8>)
 800a846:	4824      	ldr	r0, [pc, #144]	@ (800a8d8 <__d2b+0xac>)
 800a848:	f240 310f 	movw	r1, #783	@ 0x30f
 800a84c:	f000 fac8 	bl	800ade0 <__assert_func>
 800a850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a858:	b10d      	cbz	r5, 800a85e <__d2b+0x32>
 800a85a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	f1b8 0300 	subs.w	r3, r8, #0
 800a864:	d023      	beq.n	800a8ae <__d2b+0x82>
 800a866:	4668      	mov	r0, sp
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	f7ff fd7c 	bl	800a366 <__lo0bits>
 800a86e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a872:	b1d0      	cbz	r0, 800a8aa <__d2b+0x7e>
 800a874:	f1c0 0320 	rsb	r3, r0, #32
 800a878:	fa02 f303 	lsl.w	r3, r2, r3
 800a87c:	430b      	orrs	r3, r1
 800a87e:	40c2      	lsrs	r2, r0
 800a880:	6163      	str	r3, [r4, #20]
 800a882:	9201      	str	r2, [sp, #4]
 800a884:	9b01      	ldr	r3, [sp, #4]
 800a886:	61a3      	str	r3, [r4, #24]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	bf0c      	ite	eq
 800a88c:	2201      	moveq	r2, #1
 800a88e:	2202      	movne	r2, #2
 800a890:	6122      	str	r2, [r4, #16]
 800a892:	b1a5      	cbz	r5, 800a8be <__d2b+0x92>
 800a894:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a898:	4405      	add	r5, r0
 800a89a:	603d      	str	r5, [r7, #0]
 800a89c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a8a0:	6030      	str	r0, [r6, #0]
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	b003      	add	sp, #12
 800a8a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8aa:	6161      	str	r1, [r4, #20]
 800a8ac:	e7ea      	b.n	800a884 <__d2b+0x58>
 800a8ae:	a801      	add	r0, sp, #4
 800a8b0:	f7ff fd59 	bl	800a366 <__lo0bits>
 800a8b4:	9b01      	ldr	r3, [sp, #4]
 800a8b6:	6163      	str	r3, [r4, #20]
 800a8b8:	3020      	adds	r0, #32
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	e7e8      	b.n	800a890 <__d2b+0x64>
 800a8be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a8c6:	6038      	str	r0, [r7, #0]
 800a8c8:	6918      	ldr	r0, [r3, #16]
 800a8ca:	f7ff fd2d 	bl	800a328 <__hi0bits>
 800a8ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8d2:	e7e5      	b.n	800a8a0 <__d2b+0x74>
 800a8d4:	0800c438 	.word	0x0800c438
 800a8d8:	0800c449 	.word	0x0800c449

0800a8dc <__sfputc_r>:
 800a8dc:	6893      	ldr	r3, [r2, #8]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	b410      	push	{r4}
 800a8e4:	6093      	str	r3, [r2, #8]
 800a8e6:	da08      	bge.n	800a8fa <__sfputc_r+0x1e>
 800a8e8:	6994      	ldr	r4, [r2, #24]
 800a8ea:	42a3      	cmp	r3, r4
 800a8ec:	db01      	blt.n	800a8f2 <__sfputc_r+0x16>
 800a8ee:	290a      	cmp	r1, #10
 800a8f0:	d103      	bne.n	800a8fa <__sfputc_r+0x1e>
 800a8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f6:	f7fe bbfe 	b.w	80090f6 <__swbuf_r>
 800a8fa:	6813      	ldr	r3, [r2, #0]
 800a8fc:	1c58      	adds	r0, r3, #1
 800a8fe:	6010      	str	r0, [r2, #0]
 800a900:	7019      	strb	r1, [r3, #0]
 800a902:	4608      	mov	r0, r1
 800a904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <__sfputs_r>:
 800a90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a90c:	4606      	mov	r6, r0
 800a90e:	460f      	mov	r7, r1
 800a910:	4614      	mov	r4, r2
 800a912:	18d5      	adds	r5, r2, r3
 800a914:	42ac      	cmp	r4, r5
 800a916:	d101      	bne.n	800a91c <__sfputs_r+0x12>
 800a918:	2000      	movs	r0, #0
 800a91a:	e007      	b.n	800a92c <__sfputs_r+0x22>
 800a91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a920:	463a      	mov	r2, r7
 800a922:	4630      	mov	r0, r6
 800a924:	f7ff ffda 	bl	800a8dc <__sfputc_r>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d1f3      	bne.n	800a914 <__sfputs_r+0xa>
 800a92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a930 <_vfiprintf_r>:
 800a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a934:	460d      	mov	r5, r1
 800a936:	b09d      	sub	sp, #116	@ 0x74
 800a938:	4614      	mov	r4, r2
 800a93a:	4698      	mov	r8, r3
 800a93c:	4606      	mov	r6, r0
 800a93e:	b118      	cbz	r0, 800a948 <_vfiprintf_r+0x18>
 800a940:	6a03      	ldr	r3, [r0, #32]
 800a942:	b90b      	cbnz	r3, 800a948 <_vfiprintf_r+0x18>
 800a944:	f7fe faee 	bl	8008f24 <__sinit>
 800a948:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a94a:	07d9      	lsls	r1, r3, #31
 800a94c:	d405      	bmi.n	800a95a <_vfiprintf_r+0x2a>
 800a94e:	89ab      	ldrh	r3, [r5, #12]
 800a950:	059a      	lsls	r2, r3, #22
 800a952:	d402      	bmi.n	800a95a <_vfiprintf_r+0x2a>
 800a954:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a956:	f7fe fce0 	bl	800931a <__retarget_lock_acquire_recursive>
 800a95a:	89ab      	ldrh	r3, [r5, #12]
 800a95c:	071b      	lsls	r3, r3, #28
 800a95e:	d501      	bpl.n	800a964 <_vfiprintf_r+0x34>
 800a960:	692b      	ldr	r3, [r5, #16]
 800a962:	b99b      	cbnz	r3, 800a98c <_vfiprintf_r+0x5c>
 800a964:	4629      	mov	r1, r5
 800a966:	4630      	mov	r0, r6
 800a968:	f7fe fc04 	bl	8009174 <__swsetup_r>
 800a96c:	b170      	cbz	r0, 800a98c <_vfiprintf_r+0x5c>
 800a96e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a970:	07dc      	lsls	r4, r3, #31
 800a972:	d504      	bpl.n	800a97e <_vfiprintf_r+0x4e>
 800a974:	f04f 30ff 	mov.w	r0, #4294967295
 800a978:	b01d      	add	sp, #116	@ 0x74
 800a97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a97e:	89ab      	ldrh	r3, [r5, #12]
 800a980:	0598      	lsls	r0, r3, #22
 800a982:	d4f7      	bmi.n	800a974 <_vfiprintf_r+0x44>
 800a984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a986:	f7fe fcc9 	bl	800931c <__retarget_lock_release_recursive>
 800a98a:	e7f3      	b.n	800a974 <_vfiprintf_r+0x44>
 800a98c:	2300      	movs	r3, #0
 800a98e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a990:	2320      	movs	r3, #32
 800a992:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a996:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99a:	2330      	movs	r3, #48	@ 0x30
 800a99c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab4c <_vfiprintf_r+0x21c>
 800a9a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9a4:	f04f 0901 	mov.w	r9, #1
 800a9a8:	4623      	mov	r3, r4
 800a9aa:	469a      	mov	sl, r3
 800a9ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b0:	b10a      	cbz	r2, 800a9b6 <_vfiprintf_r+0x86>
 800a9b2:	2a25      	cmp	r2, #37	@ 0x25
 800a9b4:	d1f9      	bne.n	800a9aa <_vfiprintf_r+0x7a>
 800a9b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a9ba:	d00b      	beq.n	800a9d4 <_vfiprintf_r+0xa4>
 800a9bc:	465b      	mov	r3, fp
 800a9be:	4622      	mov	r2, r4
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	4630      	mov	r0, r6
 800a9c4:	f7ff ffa1 	bl	800a90a <__sfputs_r>
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f000 80a7 	beq.w	800ab1c <_vfiprintf_r+0x1ec>
 800a9ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9d0:	445a      	add	r2, fp
 800a9d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 809f 	beq.w	800ab1c <_vfiprintf_r+0x1ec>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	9307      	str	r3, [sp, #28]
 800a9f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9f6:	4654      	mov	r4, sl
 800a9f8:	2205      	movs	r2, #5
 800a9fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9fe:	4853      	ldr	r0, [pc, #332]	@ (800ab4c <_vfiprintf_r+0x21c>)
 800aa00:	f7f5 fbbe 	bl	8000180 <memchr>
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	b9d8      	cbnz	r0, 800aa40 <_vfiprintf_r+0x110>
 800aa08:	06d1      	lsls	r1, r2, #27
 800aa0a:	bf44      	itt	mi
 800aa0c:	2320      	movmi	r3, #32
 800aa0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa12:	0713      	lsls	r3, r2, #28
 800aa14:	bf44      	itt	mi
 800aa16:	232b      	movmi	r3, #43	@ 0x2b
 800aa18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa1c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa20:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa22:	d015      	beq.n	800aa50 <_vfiprintf_r+0x120>
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	4654      	mov	r4, sl
 800aa28:	2000      	movs	r0, #0
 800aa2a:	f04f 0c0a 	mov.w	ip, #10
 800aa2e:	4621      	mov	r1, r4
 800aa30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa34:	3b30      	subs	r3, #48	@ 0x30
 800aa36:	2b09      	cmp	r3, #9
 800aa38:	d94b      	bls.n	800aad2 <_vfiprintf_r+0x1a2>
 800aa3a:	b1b0      	cbz	r0, 800aa6a <_vfiprintf_r+0x13a>
 800aa3c:	9207      	str	r2, [sp, #28]
 800aa3e:	e014      	b.n	800aa6a <_vfiprintf_r+0x13a>
 800aa40:	eba0 0308 	sub.w	r3, r0, r8
 800aa44:	fa09 f303 	lsl.w	r3, r9, r3
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	9304      	str	r3, [sp, #16]
 800aa4c:	46a2      	mov	sl, r4
 800aa4e:	e7d2      	b.n	800a9f6 <_vfiprintf_r+0xc6>
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	1d19      	adds	r1, r3, #4
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	9103      	str	r1, [sp, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bfbb      	ittet	lt
 800aa5c:	425b      	neglt	r3, r3
 800aa5e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa62:	9307      	strge	r3, [sp, #28]
 800aa64:	9307      	strlt	r3, [sp, #28]
 800aa66:	bfb8      	it	lt
 800aa68:	9204      	strlt	r2, [sp, #16]
 800aa6a:	7823      	ldrb	r3, [r4, #0]
 800aa6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa6e:	d10a      	bne.n	800aa86 <_vfiprintf_r+0x156>
 800aa70:	7863      	ldrb	r3, [r4, #1]
 800aa72:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa74:	d132      	bne.n	800aadc <_vfiprintf_r+0x1ac>
 800aa76:	9b03      	ldr	r3, [sp, #12]
 800aa78:	1d1a      	adds	r2, r3, #4
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	9203      	str	r2, [sp, #12]
 800aa7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa82:	3402      	adds	r4, #2
 800aa84:	9305      	str	r3, [sp, #20]
 800aa86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab5c <_vfiprintf_r+0x22c>
 800aa8a:	7821      	ldrb	r1, [r4, #0]
 800aa8c:	2203      	movs	r2, #3
 800aa8e:	4650      	mov	r0, sl
 800aa90:	f7f5 fb76 	bl	8000180 <memchr>
 800aa94:	b138      	cbz	r0, 800aaa6 <_vfiprintf_r+0x176>
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	eba0 000a 	sub.w	r0, r0, sl
 800aa9c:	2240      	movs	r2, #64	@ 0x40
 800aa9e:	4082      	lsls	r2, r0
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	3401      	adds	r4, #1
 800aaa4:	9304      	str	r3, [sp, #16]
 800aaa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaaa:	4829      	ldr	r0, [pc, #164]	@ (800ab50 <_vfiprintf_r+0x220>)
 800aaac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aab0:	2206      	movs	r2, #6
 800aab2:	f7f5 fb65 	bl	8000180 <memchr>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d03f      	beq.n	800ab3a <_vfiprintf_r+0x20a>
 800aaba:	4b26      	ldr	r3, [pc, #152]	@ (800ab54 <_vfiprintf_r+0x224>)
 800aabc:	bb1b      	cbnz	r3, 800ab06 <_vfiprintf_r+0x1d6>
 800aabe:	9b03      	ldr	r3, [sp, #12]
 800aac0:	3307      	adds	r3, #7
 800aac2:	f023 0307 	bic.w	r3, r3, #7
 800aac6:	3308      	adds	r3, #8
 800aac8:	9303      	str	r3, [sp, #12]
 800aaca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aacc:	443b      	add	r3, r7
 800aace:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad0:	e76a      	b.n	800a9a8 <_vfiprintf_r+0x78>
 800aad2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad6:	460c      	mov	r4, r1
 800aad8:	2001      	movs	r0, #1
 800aada:	e7a8      	b.n	800aa2e <_vfiprintf_r+0xfe>
 800aadc:	2300      	movs	r3, #0
 800aade:	3401      	adds	r4, #1
 800aae0:	9305      	str	r3, [sp, #20]
 800aae2:	4619      	mov	r1, r3
 800aae4:	f04f 0c0a 	mov.w	ip, #10
 800aae8:	4620      	mov	r0, r4
 800aaea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaee:	3a30      	subs	r2, #48	@ 0x30
 800aaf0:	2a09      	cmp	r2, #9
 800aaf2:	d903      	bls.n	800aafc <_vfiprintf_r+0x1cc>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d0c6      	beq.n	800aa86 <_vfiprintf_r+0x156>
 800aaf8:	9105      	str	r1, [sp, #20]
 800aafa:	e7c4      	b.n	800aa86 <_vfiprintf_r+0x156>
 800aafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab00:	4604      	mov	r4, r0
 800ab02:	2301      	movs	r3, #1
 800ab04:	e7f0      	b.n	800aae8 <_vfiprintf_r+0x1b8>
 800ab06:	ab03      	add	r3, sp, #12
 800ab08:	9300      	str	r3, [sp, #0]
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	4b12      	ldr	r3, [pc, #72]	@ (800ab58 <_vfiprintf_r+0x228>)
 800ab0e:	a904      	add	r1, sp, #16
 800ab10:	4630      	mov	r0, r6
 800ab12:	f7fd fdc3 	bl	800869c <_printf_float>
 800ab16:	4607      	mov	r7, r0
 800ab18:	1c78      	adds	r0, r7, #1
 800ab1a:	d1d6      	bne.n	800aaca <_vfiprintf_r+0x19a>
 800ab1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab1e:	07d9      	lsls	r1, r3, #31
 800ab20:	d405      	bmi.n	800ab2e <_vfiprintf_r+0x1fe>
 800ab22:	89ab      	ldrh	r3, [r5, #12]
 800ab24:	059a      	lsls	r2, r3, #22
 800ab26:	d402      	bmi.n	800ab2e <_vfiprintf_r+0x1fe>
 800ab28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab2a:	f7fe fbf7 	bl	800931c <__retarget_lock_release_recursive>
 800ab2e:	89ab      	ldrh	r3, [r5, #12]
 800ab30:	065b      	lsls	r3, r3, #25
 800ab32:	f53f af1f 	bmi.w	800a974 <_vfiprintf_r+0x44>
 800ab36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab38:	e71e      	b.n	800a978 <_vfiprintf_r+0x48>
 800ab3a:	ab03      	add	r3, sp, #12
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	462a      	mov	r2, r5
 800ab40:	4b05      	ldr	r3, [pc, #20]	@ (800ab58 <_vfiprintf_r+0x228>)
 800ab42:	a904      	add	r1, sp, #16
 800ab44:	4630      	mov	r0, r6
 800ab46:	f7fe f841 	bl	8008bcc <_printf_i>
 800ab4a:	e7e4      	b.n	800ab16 <_vfiprintf_r+0x1e6>
 800ab4c:	0800c5a0 	.word	0x0800c5a0
 800ab50:	0800c5aa 	.word	0x0800c5aa
 800ab54:	0800869d 	.word	0x0800869d
 800ab58:	0800a90b 	.word	0x0800a90b
 800ab5c:	0800c5a6 	.word	0x0800c5a6

0800ab60 <__sflush_r>:
 800ab60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab68:	0716      	lsls	r6, r2, #28
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	d454      	bmi.n	800ac1a <__sflush_r+0xba>
 800ab70:	684b      	ldr	r3, [r1, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dc02      	bgt.n	800ab7c <__sflush_r+0x1c>
 800ab76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dd48      	ble.n	800ac0e <__sflush_r+0xae>
 800ab7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab7e:	2e00      	cmp	r6, #0
 800ab80:	d045      	beq.n	800ac0e <__sflush_r+0xae>
 800ab82:	2300      	movs	r3, #0
 800ab84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab88:	682f      	ldr	r7, [r5, #0]
 800ab8a:	6a21      	ldr	r1, [r4, #32]
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	d030      	beq.n	800abf2 <__sflush_r+0x92>
 800ab90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	0759      	lsls	r1, r3, #29
 800ab96:	d505      	bpl.n	800aba4 <__sflush_r+0x44>
 800ab98:	6863      	ldr	r3, [r4, #4]
 800ab9a:	1ad2      	subs	r2, r2, r3
 800ab9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab9e:	b10b      	cbz	r3, 800aba4 <__sflush_r+0x44>
 800aba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aba2:	1ad2      	subs	r2, r2, r3
 800aba4:	2300      	movs	r3, #0
 800aba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	4628      	mov	r0, r5
 800abac:	47b0      	blx	r6
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	d106      	bne.n	800abc2 <__sflush_r+0x62>
 800abb4:	6829      	ldr	r1, [r5, #0]
 800abb6:	291d      	cmp	r1, #29
 800abb8:	d82b      	bhi.n	800ac12 <__sflush_r+0xb2>
 800abba:	4a2a      	ldr	r2, [pc, #168]	@ (800ac64 <__sflush_r+0x104>)
 800abbc:	410a      	asrs	r2, r1
 800abbe:	07d6      	lsls	r6, r2, #31
 800abc0:	d427      	bmi.n	800ac12 <__sflush_r+0xb2>
 800abc2:	2200      	movs	r2, #0
 800abc4:	6062      	str	r2, [r4, #4]
 800abc6:	04d9      	lsls	r1, r3, #19
 800abc8:	6922      	ldr	r2, [r4, #16]
 800abca:	6022      	str	r2, [r4, #0]
 800abcc:	d504      	bpl.n	800abd8 <__sflush_r+0x78>
 800abce:	1c42      	adds	r2, r0, #1
 800abd0:	d101      	bne.n	800abd6 <__sflush_r+0x76>
 800abd2:	682b      	ldr	r3, [r5, #0]
 800abd4:	b903      	cbnz	r3, 800abd8 <__sflush_r+0x78>
 800abd6:	6560      	str	r0, [r4, #84]	@ 0x54
 800abd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abda:	602f      	str	r7, [r5, #0]
 800abdc:	b1b9      	cbz	r1, 800ac0e <__sflush_r+0xae>
 800abde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abe2:	4299      	cmp	r1, r3
 800abe4:	d002      	beq.n	800abec <__sflush_r+0x8c>
 800abe6:	4628      	mov	r0, r5
 800abe8:	f7ff f9f6 	bl	8009fd8 <_free_r>
 800abec:	2300      	movs	r3, #0
 800abee:	6363      	str	r3, [r4, #52]	@ 0x34
 800abf0:	e00d      	b.n	800ac0e <__sflush_r+0xae>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4628      	mov	r0, r5
 800abf6:	47b0      	blx	r6
 800abf8:	4602      	mov	r2, r0
 800abfa:	1c50      	adds	r0, r2, #1
 800abfc:	d1c9      	bne.n	800ab92 <__sflush_r+0x32>
 800abfe:	682b      	ldr	r3, [r5, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d0c6      	beq.n	800ab92 <__sflush_r+0x32>
 800ac04:	2b1d      	cmp	r3, #29
 800ac06:	d001      	beq.n	800ac0c <__sflush_r+0xac>
 800ac08:	2b16      	cmp	r3, #22
 800ac0a:	d11e      	bne.n	800ac4a <__sflush_r+0xea>
 800ac0c:	602f      	str	r7, [r5, #0]
 800ac0e:	2000      	movs	r0, #0
 800ac10:	e022      	b.n	800ac58 <__sflush_r+0xf8>
 800ac12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac16:	b21b      	sxth	r3, r3
 800ac18:	e01b      	b.n	800ac52 <__sflush_r+0xf2>
 800ac1a:	690f      	ldr	r7, [r1, #16]
 800ac1c:	2f00      	cmp	r7, #0
 800ac1e:	d0f6      	beq.n	800ac0e <__sflush_r+0xae>
 800ac20:	0793      	lsls	r3, r2, #30
 800ac22:	680e      	ldr	r6, [r1, #0]
 800ac24:	bf08      	it	eq
 800ac26:	694b      	ldreq	r3, [r1, #20]
 800ac28:	600f      	str	r7, [r1, #0]
 800ac2a:	bf18      	it	ne
 800ac2c:	2300      	movne	r3, #0
 800ac2e:	eba6 0807 	sub.w	r8, r6, r7
 800ac32:	608b      	str	r3, [r1, #8]
 800ac34:	f1b8 0f00 	cmp.w	r8, #0
 800ac38:	dde9      	ble.n	800ac0e <__sflush_r+0xae>
 800ac3a:	6a21      	ldr	r1, [r4, #32]
 800ac3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac3e:	4643      	mov	r3, r8
 800ac40:	463a      	mov	r2, r7
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b0      	blx	r6
 800ac46:	2800      	cmp	r0, #0
 800ac48:	dc08      	bgt.n	800ac5c <__sflush_r+0xfc>
 800ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac5c:	4407      	add	r7, r0
 800ac5e:	eba8 0800 	sub.w	r8, r8, r0
 800ac62:	e7e7      	b.n	800ac34 <__sflush_r+0xd4>
 800ac64:	dfbffffe 	.word	0xdfbffffe

0800ac68 <_fflush_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	690b      	ldr	r3, [r1, #16]
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	b913      	cbnz	r3, 800ac78 <_fflush_r+0x10>
 800ac72:	2500      	movs	r5, #0
 800ac74:	4628      	mov	r0, r5
 800ac76:	bd38      	pop	{r3, r4, r5, pc}
 800ac78:	b118      	cbz	r0, 800ac82 <_fflush_r+0x1a>
 800ac7a:	6a03      	ldr	r3, [r0, #32]
 800ac7c:	b90b      	cbnz	r3, 800ac82 <_fflush_r+0x1a>
 800ac7e:	f7fe f951 	bl	8008f24 <__sinit>
 800ac82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0f3      	beq.n	800ac72 <_fflush_r+0xa>
 800ac8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac8c:	07d0      	lsls	r0, r2, #31
 800ac8e:	d404      	bmi.n	800ac9a <_fflush_r+0x32>
 800ac90:	0599      	lsls	r1, r3, #22
 800ac92:	d402      	bmi.n	800ac9a <_fflush_r+0x32>
 800ac94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac96:	f7fe fb40 	bl	800931a <__retarget_lock_acquire_recursive>
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	f7ff ff5f 	bl	800ab60 <__sflush_r>
 800aca2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aca4:	07da      	lsls	r2, r3, #31
 800aca6:	4605      	mov	r5, r0
 800aca8:	d4e4      	bmi.n	800ac74 <_fflush_r+0xc>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	059b      	lsls	r3, r3, #22
 800acae:	d4e1      	bmi.n	800ac74 <_fflush_r+0xc>
 800acb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acb2:	f7fe fb33 	bl	800931c <__retarget_lock_release_recursive>
 800acb6:	e7dd      	b.n	800ac74 <_fflush_r+0xc>

0800acb8 <__swhatbuf_r>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	460c      	mov	r4, r1
 800acbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc0:	2900      	cmp	r1, #0
 800acc2:	b096      	sub	sp, #88	@ 0x58
 800acc4:	4615      	mov	r5, r2
 800acc6:	461e      	mov	r6, r3
 800acc8:	da0d      	bge.n	800ace6 <__swhatbuf_r+0x2e>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acd0:	f04f 0100 	mov.w	r1, #0
 800acd4:	bf14      	ite	ne
 800acd6:	2340      	movne	r3, #64	@ 0x40
 800acd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acdc:	2000      	movs	r0, #0
 800acde:	6031      	str	r1, [r6, #0]
 800ace0:	602b      	str	r3, [r5, #0]
 800ace2:	b016      	add	sp, #88	@ 0x58
 800ace4:	bd70      	pop	{r4, r5, r6, pc}
 800ace6:	466a      	mov	r2, sp
 800ace8:	f000 f848 	bl	800ad7c <_fstat_r>
 800acec:	2800      	cmp	r0, #0
 800acee:	dbec      	blt.n	800acca <__swhatbuf_r+0x12>
 800acf0:	9901      	ldr	r1, [sp, #4]
 800acf2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acf6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acfa:	4259      	negs	r1, r3
 800acfc:	4159      	adcs	r1, r3
 800acfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad02:	e7eb      	b.n	800acdc <__swhatbuf_r+0x24>

0800ad04 <__smakebuf_r>:
 800ad04:	898b      	ldrh	r3, [r1, #12]
 800ad06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad08:	079d      	lsls	r5, r3, #30
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	d507      	bpl.n	800ad20 <__smakebuf_r+0x1c>
 800ad10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	6123      	str	r3, [r4, #16]
 800ad18:	2301      	movs	r3, #1
 800ad1a:	6163      	str	r3, [r4, #20]
 800ad1c:	b003      	add	sp, #12
 800ad1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad20:	ab01      	add	r3, sp, #4
 800ad22:	466a      	mov	r2, sp
 800ad24:	f7ff ffc8 	bl	800acb8 <__swhatbuf_r>
 800ad28:	9f00      	ldr	r7, [sp, #0]
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	4639      	mov	r1, r7
 800ad2e:	4630      	mov	r0, r6
 800ad30:	f7ff f9c6 	bl	800a0c0 <_malloc_r>
 800ad34:	b948      	cbnz	r0, 800ad4a <__smakebuf_r+0x46>
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	059a      	lsls	r2, r3, #22
 800ad3c:	d4ee      	bmi.n	800ad1c <__smakebuf_r+0x18>
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	f043 0302 	orr.w	r3, r3, #2
 800ad46:	81a3      	strh	r3, [r4, #12]
 800ad48:	e7e2      	b.n	800ad10 <__smakebuf_r+0xc>
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	6020      	str	r0, [r4, #0]
 800ad4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad5a:	b15b      	cbz	r3, 800ad74 <__smakebuf_r+0x70>
 800ad5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad60:	4630      	mov	r0, r6
 800ad62:	f000 f81d 	bl	800ada0 <_isatty_r>
 800ad66:	b128      	cbz	r0, 800ad74 <__smakebuf_r+0x70>
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	f023 0303 	bic.w	r3, r3, #3
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	81a3      	strh	r3, [r4, #12]
 800ad74:	89a3      	ldrh	r3, [r4, #12]
 800ad76:	431d      	orrs	r5, r3
 800ad78:	81a5      	strh	r5, [r4, #12]
 800ad7a:	e7cf      	b.n	800ad1c <__smakebuf_r+0x18>

0800ad7c <_fstat_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	@ (800ad9c <_fstat_r+0x20>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	4611      	mov	r1, r2
 800ad88:	602b      	str	r3, [r5, #0]
 800ad8a:	f7f6 fccb 	bl	8001724 <_fstat>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d102      	bne.n	800ad98 <_fstat_r+0x1c>
 800ad92:	682b      	ldr	r3, [r5, #0]
 800ad94:	b103      	cbz	r3, 800ad98 <_fstat_r+0x1c>
 800ad96:	6023      	str	r3, [r4, #0]
 800ad98:	bd38      	pop	{r3, r4, r5, pc}
 800ad9a:	bf00      	nop
 800ad9c:	2000051c 	.word	0x2000051c

0800ada0 <_isatty_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	@ (800adbc <_isatty_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f6 fcca 	bl	8001744 <_isatty>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_isatty_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_isatty_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	2000051c 	.word	0x2000051c

0800adc0 <_sbrk_r>:
 800adc0:	b538      	push	{r3, r4, r5, lr}
 800adc2:	4d06      	ldr	r5, [pc, #24]	@ (800addc <_sbrk_r+0x1c>)
 800adc4:	2300      	movs	r3, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	4608      	mov	r0, r1
 800adca:	602b      	str	r3, [r5, #0]
 800adcc:	f7f6 fcd2 	bl	8001774 <_sbrk>
 800add0:	1c43      	adds	r3, r0, #1
 800add2:	d102      	bne.n	800adda <_sbrk_r+0x1a>
 800add4:	682b      	ldr	r3, [r5, #0]
 800add6:	b103      	cbz	r3, 800adda <_sbrk_r+0x1a>
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	bd38      	pop	{r3, r4, r5, pc}
 800addc:	2000051c 	.word	0x2000051c

0800ade0 <__assert_func>:
 800ade0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ade2:	4614      	mov	r4, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b09      	ldr	r3, [pc, #36]	@ (800ae0c <__assert_func+0x2c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4605      	mov	r5, r0
 800adec:	68d8      	ldr	r0, [r3, #12]
 800adee:	b954      	cbnz	r4, 800ae06 <__assert_func+0x26>
 800adf0:	4b07      	ldr	r3, [pc, #28]	@ (800ae10 <__assert_func+0x30>)
 800adf2:	461c      	mov	r4, r3
 800adf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adf8:	9100      	str	r1, [sp, #0]
 800adfa:	462b      	mov	r3, r5
 800adfc:	4905      	ldr	r1, [pc, #20]	@ (800ae14 <__assert_func+0x34>)
 800adfe:	f000 f841 	bl	800ae84 <fiprintf>
 800ae02:	f000 f851 	bl	800aea8 <abort>
 800ae06:	4b04      	ldr	r3, [pc, #16]	@ (800ae18 <__assert_func+0x38>)
 800ae08:	e7f4      	b.n	800adf4 <__assert_func+0x14>
 800ae0a:	bf00      	nop
 800ae0c:	20000038 	.word	0x20000038
 800ae10:	0800c5f6 	.word	0x0800c5f6
 800ae14:	0800c5c8 	.word	0x0800c5c8
 800ae18:	0800c5bb 	.word	0x0800c5bb

0800ae1c <_calloc_r>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	fba1 5402 	umull	r5, r4, r1, r2
 800ae22:	b93c      	cbnz	r4, 800ae34 <_calloc_r+0x18>
 800ae24:	4629      	mov	r1, r5
 800ae26:	f7ff f94b 	bl	800a0c0 <_malloc_r>
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	b928      	cbnz	r0, 800ae3a <_calloc_r+0x1e>
 800ae2e:	2600      	movs	r6, #0
 800ae30:	4630      	mov	r0, r6
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	220c      	movs	r2, #12
 800ae36:	6002      	str	r2, [r0, #0]
 800ae38:	e7f9      	b.n	800ae2e <_calloc_r+0x12>
 800ae3a:	462a      	mov	r2, r5
 800ae3c:	4621      	mov	r1, r4
 800ae3e:	f7fe f9ef 	bl	8009220 <memset>
 800ae42:	e7f5      	b.n	800ae30 <_calloc_r+0x14>

0800ae44 <__ascii_mbtowc>:
 800ae44:	b082      	sub	sp, #8
 800ae46:	b901      	cbnz	r1, 800ae4a <__ascii_mbtowc+0x6>
 800ae48:	a901      	add	r1, sp, #4
 800ae4a:	b142      	cbz	r2, 800ae5e <__ascii_mbtowc+0x1a>
 800ae4c:	b14b      	cbz	r3, 800ae62 <__ascii_mbtowc+0x1e>
 800ae4e:	7813      	ldrb	r3, [r2, #0]
 800ae50:	600b      	str	r3, [r1, #0]
 800ae52:	7812      	ldrb	r2, [r2, #0]
 800ae54:	1e10      	subs	r0, r2, #0
 800ae56:	bf18      	it	ne
 800ae58:	2001      	movne	r0, #1
 800ae5a:	b002      	add	sp, #8
 800ae5c:	4770      	bx	lr
 800ae5e:	4610      	mov	r0, r2
 800ae60:	e7fb      	b.n	800ae5a <__ascii_mbtowc+0x16>
 800ae62:	f06f 0001 	mvn.w	r0, #1
 800ae66:	e7f8      	b.n	800ae5a <__ascii_mbtowc+0x16>

0800ae68 <__ascii_wctomb>:
 800ae68:	4603      	mov	r3, r0
 800ae6a:	4608      	mov	r0, r1
 800ae6c:	b141      	cbz	r1, 800ae80 <__ascii_wctomb+0x18>
 800ae6e:	2aff      	cmp	r2, #255	@ 0xff
 800ae70:	d904      	bls.n	800ae7c <__ascii_wctomb+0x14>
 800ae72:	228a      	movs	r2, #138	@ 0x8a
 800ae74:	601a      	str	r2, [r3, #0]
 800ae76:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7a:	4770      	bx	lr
 800ae7c:	700a      	strb	r2, [r1, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	4770      	bx	lr
	...

0800ae84 <fiprintf>:
 800ae84:	b40e      	push	{r1, r2, r3}
 800ae86:	b503      	push	{r0, r1, lr}
 800ae88:	4601      	mov	r1, r0
 800ae8a:	ab03      	add	r3, sp, #12
 800ae8c:	4805      	ldr	r0, [pc, #20]	@ (800aea4 <fiprintf+0x20>)
 800ae8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae92:	6800      	ldr	r0, [r0, #0]
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	f7ff fd4b 	bl	800a930 <_vfiprintf_r>
 800ae9a:	b002      	add	sp, #8
 800ae9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea0:	b003      	add	sp, #12
 800aea2:	4770      	bx	lr
 800aea4:	20000038 	.word	0x20000038

0800aea8 <abort>:
 800aea8:	b508      	push	{r3, lr}
 800aeaa:	2006      	movs	r0, #6
 800aeac:	f000 f82c 	bl	800af08 <raise>
 800aeb0:	2001      	movs	r0, #1
 800aeb2:	f7f6 fc03 	bl	80016bc <_exit>

0800aeb6 <_raise_r>:
 800aeb6:	291f      	cmp	r1, #31
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4605      	mov	r5, r0
 800aebc:	460c      	mov	r4, r1
 800aebe:	d904      	bls.n	800aeca <_raise_r+0x14>
 800aec0:	2316      	movs	r3, #22
 800aec2:	6003      	str	r3, [r0, #0]
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	bd38      	pop	{r3, r4, r5, pc}
 800aeca:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aecc:	b112      	cbz	r2, 800aed4 <_raise_r+0x1e>
 800aece:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aed2:	b94b      	cbnz	r3, 800aee8 <_raise_r+0x32>
 800aed4:	4628      	mov	r0, r5
 800aed6:	f000 f831 	bl	800af3c <_getpid_r>
 800aeda:	4622      	mov	r2, r4
 800aedc:	4601      	mov	r1, r0
 800aede:	4628      	mov	r0, r5
 800aee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aee4:	f000 b818 	b.w	800af18 <_kill_r>
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d00a      	beq.n	800af02 <_raise_r+0x4c>
 800aeec:	1c59      	adds	r1, r3, #1
 800aeee:	d103      	bne.n	800aef8 <_raise_r+0x42>
 800aef0:	2316      	movs	r3, #22
 800aef2:	6003      	str	r3, [r0, #0]
 800aef4:	2001      	movs	r0, #1
 800aef6:	e7e7      	b.n	800aec8 <_raise_r+0x12>
 800aef8:	2100      	movs	r1, #0
 800aefa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aefe:	4620      	mov	r0, r4
 800af00:	4798      	blx	r3
 800af02:	2000      	movs	r0, #0
 800af04:	e7e0      	b.n	800aec8 <_raise_r+0x12>
	...

0800af08 <raise>:
 800af08:	4b02      	ldr	r3, [pc, #8]	@ (800af14 <raise+0xc>)
 800af0a:	4601      	mov	r1, r0
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	f7ff bfd2 	b.w	800aeb6 <_raise_r>
 800af12:	bf00      	nop
 800af14:	20000038 	.word	0x20000038

0800af18 <_kill_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	4d07      	ldr	r5, [pc, #28]	@ (800af38 <_kill_r+0x20>)
 800af1c:	2300      	movs	r3, #0
 800af1e:	4604      	mov	r4, r0
 800af20:	4608      	mov	r0, r1
 800af22:	4611      	mov	r1, r2
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	f7f6 fbb9 	bl	800169c <_kill>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	d102      	bne.n	800af34 <_kill_r+0x1c>
 800af2e:	682b      	ldr	r3, [r5, #0]
 800af30:	b103      	cbz	r3, 800af34 <_kill_r+0x1c>
 800af32:	6023      	str	r3, [r4, #0]
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	bf00      	nop
 800af38:	2000051c 	.word	0x2000051c

0800af3c <_getpid_r>:
 800af3c:	f7f6 bba6 	b.w	800168c <_getpid>

0800af40 <fminf>:
 800af40:	b508      	push	{r3, lr}
 800af42:	ed2d 8b02 	vpush	{d8}
 800af46:	eeb0 8a40 	vmov.f32	s16, s0
 800af4a:	eef0 8a60 	vmov.f32	s17, s1
 800af4e:	f000 f815 	bl	800af7c <__fpclassifyf>
 800af52:	b930      	cbnz	r0, 800af62 <fminf+0x22>
 800af54:	eeb0 8a68 	vmov.f32	s16, s17
 800af58:	eeb0 0a48 	vmov.f32	s0, s16
 800af5c:	ecbd 8b02 	vpop	{d8}
 800af60:	bd08      	pop	{r3, pc}
 800af62:	eeb0 0a68 	vmov.f32	s0, s17
 800af66:	f000 f809 	bl	800af7c <__fpclassifyf>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0f4      	beq.n	800af58 <fminf+0x18>
 800af6e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800af72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af76:	d5ed      	bpl.n	800af54 <fminf+0x14>
 800af78:	e7ee      	b.n	800af58 <fminf+0x18>
	...

0800af7c <__fpclassifyf>:
 800af7c:	ee10 3a10 	vmov	r3, s0
 800af80:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800af84:	d00d      	beq.n	800afa2 <__fpclassifyf+0x26>
 800af86:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800af8a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800af8e:	d30a      	bcc.n	800afa6 <__fpclassifyf+0x2a>
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <__fpclassifyf+0x34>)
 800af92:	1e42      	subs	r2, r0, #1
 800af94:	429a      	cmp	r2, r3
 800af96:	d908      	bls.n	800afaa <__fpclassifyf+0x2e>
 800af98:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800af9c:	4258      	negs	r0, r3
 800af9e:	4158      	adcs	r0, r3
 800afa0:	4770      	bx	lr
 800afa2:	2002      	movs	r0, #2
 800afa4:	4770      	bx	lr
 800afa6:	2004      	movs	r0, #4
 800afa8:	4770      	bx	lr
 800afaa:	2003      	movs	r0, #3
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	007ffffe 	.word	0x007ffffe

0800afb4 <_init>:
 800afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb6:	bf00      	nop
 800afb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afba:	bc08      	pop	{r3}
 800afbc:	469e      	mov	lr, r3
 800afbe:	4770      	bx	lr

0800afc0 <_fini>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	bf00      	nop
 800afc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afc6:	bc08      	pop	{r3}
 800afc8:	469e      	mov	lr, r3
 800afca:	4770      	bx	lr
