
EMBEDDED_AI_M2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2c0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b0  0800a400  0800a400  0000b400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adb0  0800adb0  0000bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001ec  20000008  0800adc0  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d8  200001f4  0800afac  0000c1f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200004cc  0800afac  0000c4cc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018805  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003862  00000000  00000000  00024a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019c8  00000000  00000000  00028290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013cb  00000000  00000000  00029c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00024a83  00000000  00000000  0002b023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b3d4  00000000  00000000  0004faa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dd948  00000000  00000000  0006ae7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001487c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007c20  00000000  00000000  00148808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000046  00000000  00000000  00150428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a3e8 	.word	0x0800a3e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	0800a3e8 	.word	0x0800a3e8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e50:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e54:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d013      	beq.n	8000e88 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e60:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e64:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000e68:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d00b      	beq.n	8000e88 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e70:	e000      	b.n	8000e74 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e72:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e74:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f9      	beq.n	8000e72 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e88:	687b      	ldr	r3, [r7, #4]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b085      	sub	sp, #20
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eba:	68fb      	ldr	r3, [r7, #12]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr

08000ec8 <_write>:
int _write(int file, char *ptr, int len);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e009      	b.n	8000eee <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	1c5a      	adds	r2, r3, #1
 8000ede:	60ba      	str	r2, [r7, #8]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffb0 	bl	8000e48 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbf1      	blt.n	8000eda <_write+0x12>
	}
	return len;
 8000ef6:	687b      	ldr	r3, [r7, #4]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000f06:	f000 fe71 	bl	8001bec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f83d 	bl	8000f88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f0e:	f000 f893 	bl	8001038 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f12:	f000 f979 	bl	8001208 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f16:	f000 f8ad 	bl	8001074 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000f1a:	f000 f8eb 	bl	80010f4 <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 8000f1e:	f000 f935 	bl	800118c <MX_SPI1_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000f22:	f005 ffcf 	bl	8006ec4 <MX_FATFS_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <main+0x30>
    Error_Handler();
 8000f2c:	f000 f9b0 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f3a:	f001 f9ed 	bl	8002318 <HAL_GPIO_WritePin>
//    }




  HAL_StatusTypeDef  status = HAL_I2C_IsDeviceReady(&hi2c1, ISM330DHCX_I2C_ADDRESS, 3, 100);
 8000f3e:	2364      	movs	r3, #100	@ 0x64
 8000f40:	2203      	movs	r2, #3
 8000f42:	21d6      	movs	r1, #214	@ 0xd6
 8000f44:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <main+0x7c>)
 8000f46:	f001 fccd 	bl	80028e4 <HAL_I2C_IsDeviceReady>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]

	    if (status == HAL_OK)
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <main+0x5c>
	    {
	        // Device is ready
	        printf("Gyro is ready for communication.\n");
 8000f54:	480a      	ldr	r0, [pc, #40]	@ (8000f80 <main+0x80>)
 8000f56:	f007 fad9 	bl	800850c <puts>
 8000f5a:	e004      	b.n	8000f66 <main+0x66>
	    }
	    else
	    {
	        // Device not ready or communication failed
	        printf("Gyro is not ready. HAL_StatusTypeDef: %d\n", status);
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4808      	ldr	r0, [pc, #32]	@ (8000f84 <main+0x84>)
 8000f62:	f007 fa6b 	bl	800843c <iprintf>
//
//
//
//
//
    InitializeISM330DHCX2();
 8000f66:	f000 fc4d 	bl	8001804 <InitializeISM330DHCX2>

    /* USER CODE BEGIN 3 */


	// ReadIMUData(&data,&data_g);
	  ReadIMUData(&accel,&gyro);
 8000f6a:	463a      	mov	r2, r7
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fd3a 	bl	80019ec <ReadIMUData>
 8000f78:	e7f7      	b.n	8000f6a <main+0x6a>
 8000f7a:	bf00      	nop
 8000f7c:	20000210 	.word	0x20000210
 8000f80:	0800a400 	.word	0x0800a400
 8000f84:	0800a424 	.word	0x0800a424

08000f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b09a      	sub	sp, #104	@ 0x68
 8000f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	2248      	movs	r2, #72	@ 0x48
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f007 fb98 	bl	80086cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <SystemClock_Config+0xac>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <SystemClock_Config+0xac>)
 8000fb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <SystemClock_Config+0xac>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 8000fca:	2322      	movs	r3, #34	@ 0x22
 8000fcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fd8:	2340      	movs	r3, #64	@ 0x40
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000fe0:	23a0      	movs	r3, #160	@ 0xa0
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f003 f9d7 	bl	80043a0 <HAL_RCC_OscConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000ff8:	f000 f94a 	bl	8001290 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000ffc:	236f      	movs	r3, #111	@ 0x6f
 8000ffe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fd33 	bl	8004a88 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001028:	f000 f932 	bl	8001290 <Error_Handler>
  }
}
 800102c:	bf00      	nop
 800102e:	3768      	adds	r7, #104	@ 0x68
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58000400 	.word	0x58000400

08001038 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2250      	movs	r2, #80	@ 0x50
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f007 fb41 	bl	80086cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800104a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800104e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001050:	2300      	movs	r3, #0
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001054:	2310      	movs	r3, #16
 8001056:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f004 f953 	bl	8005306 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001066:	f000 f913 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	@ 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800107a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ec <MX_I2C1_Init+0x78>)
 800107c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	@ (80010f0 <MX_I2C1_Init+0x7c>)
 8001082:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800108c:	2201      	movs	r2, #1
 800108e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_I2C1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_I2C1_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	480e      	ldr	r0, [pc, #56]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010b0:	f001 f94a 	bl	8002348 <HAL_I2C_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ba:	f000 f8e9 	bl	8001290 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010be:	2100      	movs	r1, #0
 80010c0:	4809      	ldr	r0, [pc, #36]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010c2:	f002 fd41 	bl	8003b48 <HAL_I2CEx_ConfigAnalogFilter>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010cc:	f000 f8e0 	bl	8001290 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010d0:	2100      	movs	r1, #0
 80010d2:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_I2C1_Init+0x74>)
 80010d4:	f002 fd83 	bl	8003bde <HAL_I2CEx_ConfigDigitalFilter>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010de:	f000 f8d7 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000210 	.word	0x20000210
 80010ec:	40005400 	.word	0x40005400
 80010f0:	00b07cb4 	.word	0x00b07cb4

080010f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <MX_LPUART1_UART_Init+0x94>)
 80010fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80010fe:	4b21      	ldr	r3, [pc, #132]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001112:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001124:	4b17      	ldr	r3, [pc, #92]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001126:	2200      	movs	r2, #0
 8001128:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800112a:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 800112c:	2200      	movs	r2, #0
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b14      	ldr	r3, [pc, #80]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001132:	2200      	movs	r2, #0
 8001134:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001136:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001138:	2200      	movs	r2, #0
 800113a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800113c:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 800113e:	f005 f927 	bl	8006390 <HAL_UART_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001148:	f000 f8a2 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800114c:	2100      	movs	r1, #0
 800114e:	480d      	ldr	r0, [pc, #52]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001150:	f005 fdee 	bl	8006d30 <HAL_UARTEx_SetTxFifoThreshold>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800115a:	f000 f899 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001162:	f005 fe23 	bl	8006dac <HAL_UARTEx_SetRxFifoThreshold>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800116c:	f000 f890 	bl	8001290 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001170:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_LPUART1_UART_Init+0x90>)
 8001172:	f005 fda4 	bl	8006cbe <HAL_UARTEx_DisableFifoMode>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800117c:	f000 f888 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000264 	.word	0x20000264
 8001188:	40008000 	.word	0x40008000

0800118c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_SPI1_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_SPI1_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_SPI1_Init+0x74>)
 8001198:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800119c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011a4:	4b16      	ldr	r3, [pc, #88]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011a6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ac:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011b8:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011c2:	2230      	movs	r2, #48	@ 0x30
 80011c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80011d8:	4b09      	ldr	r3, [pc, #36]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011da:	2207      	movs	r2, #7
 80011dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011de:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011e6:	2208      	movs	r2, #8
 80011e8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_SPI1_Init+0x74>)
 80011ec:	f004 fb12 	bl	8005814 <HAL_SPI_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f84b 	bl	8001290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200002f8 	.word	0x200002f8
 8001204:	40013000 	.word	0x40013000

08001208 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff fe3a 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fe37 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001228:	2004      	movs	r0, #4
 800122a:	f7ff fe34 	bl	8000e96 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|SA0_Pin, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	f44f 6101 	mov.w	r1, #2064	@ 0x810
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f001 f86e 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(temp_io_GPIO_Port, temp_io_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001242:	4812      	ldr	r0, [pc, #72]	@ (800128c <MX_GPIO_Init+0x84>)
 8001244:	f001 f868 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_CS_Pin SA0_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SA0_Pin;
 8001248:	f44f 6301 	mov.w	r3, #2064	@ 0x810
 800124c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001262:	f000 fee9 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : temp_io_Pin */
  GPIO_InitStruct.Pin = temp_io_Pin;
 8001266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(temp_io_GPIO_Port, &GPIO_InitStruct);
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	4619      	mov	r1, r3
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_GPIO_Init+0x84>)
 800127e:	f000 fedb 	bl	8002038 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000800 	.word	0x48000800

08001290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001294:	b672      	cpsid	i
}
 8001296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <Error_Handler+0x8>

0800129c <LL_AHB2_GRP1_EnableClock>:
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4013      	ands	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	bf00      	nop
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012ea:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4013      	ands	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800130c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800130e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4313      	orrs	r3, r2
 8001316:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800131c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4013      	ands	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001324:	68fb      	ldr	r3, [r7, #12]
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001340:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800134a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800134e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4013      	ands	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09c      	sub	sp, #112	@ 0x70
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2250      	movs	r2, #80	@ 0x50
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f007 f999 	bl	80086cc <memset>
  if(hi2c->Instance==I2C1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a1f      	ldr	r2, [pc, #124]	@ (800141c <HAL_I2C_MspInit+0xa8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d136      	bne.n	8001412 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a4:	2304      	movs	r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013a8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4618      	mov	r0, r3
 80013b4:	f003 ffa7 	bl	8005306 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013be:	f7ff ff67 	bl	8001290 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2002      	movs	r0, #2
 80013c4:	f7ff ff6a 	bl	800129c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ce:	2312      	movs	r3, #18
 80013d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013da:	2304      	movs	r3, #4
 80013dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013e2:	4619      	mov	r1, r3
 80013e4:	480e      	ldr	r0, [pc, #56]	@ (8001420 <HAL_I2C_MspInit+0xac>)
 80013e6:	f000 fe27 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ea:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80013ee:	f7ff ff6e 	bl	80012ce <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2100      	movs	r1, #0
 80013f6:	201e      	movs	r0, #30
 80013f8:	f000 fd7d 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013fc:	201e      	movs	r0, #30
 80013fe:	f000 fd94 	bl	8001f2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001402:	2200      	movs	r2, #0
 8001404:	2100      	movs	r1, #0
 8001406:	201f      	movs	r0, #31
 8001408:	f000 fd75 	bl	8001ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800140c:	201f      	movs	r0, #31
 800140e:	f000 fd8c 	bl	8001f2a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001412:	bf00      	nop
 8001414:	3770      	adds	r7, #112	@ 0x70
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40005400 	.word	0x40005400
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	2250      	movs	r2, #80	@ 0x50
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f007 f941 	bl	80086cc <memset>
  if(huart->Instance==LPUART1)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a16      	ldr	r2, [pc, #88]	@ (80014a8 <HAL_UART_MspInit+0x84>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d124      	bne.n	800149e <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001454:	2302      	movs	r3, #2
 8001456:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4618      	mov	r0, r3
 8001462:	f003 ff50 	bl	8005306 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff ff10 	bl	8001290 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff ff45 	bl	8001300 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	2002      	movs	r0, #2
 8001478:	f7ff ff10 	bl	800129c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800147c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001480:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800148e:	2308      	movs	r3, #8
 8001490:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001492:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001496:	4619      	mov	r1, r3
 8001498:	4804      	ldr	r0, [pc, #16]	@ (80014ac <HAL_UART_MspInit+0x88>)
 800149a:	f000 fdcd 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE END LPUART1_MspInit 1 */

  }

}
 800149e:	bf00      	nop
 80014a0:	3770      	adds	r7, #112	@ 0x70
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40008000 	.word	0x40008000
 80014ac:	48000400 	.word	0x48000400

080014b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0f      	ldr	r2, [pc, #60]	@ (800150c <HAL_SPI_MspInit+0x5c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d117      	bne.n	8001502 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80014d6:	f7ff ff2c 	bl	8001332 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fede 	bl	800129c <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 80014e0:	23c2      	movs	r3, #194	@ 0xc2
 80014e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014f0:	2305      	movs	r3, #5
 80014f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fe:	f000 fd9b 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001502:	bf00      	nop
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40013000 	.word	0x40013000

08001510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001514:	bf00      	nop
 8001516:	e7fd      	b.n	8001514 <NMI_Handler+0x4>

08001518 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <HardFault_Handler+0x4>

08001520 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <MemManage_Handler+0x4>

08001528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <BusFault_Handler+0x4>

08001530 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <UsageFault_Handler+0x4>

08001538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001566:	f000 fb9b 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <I2C1_EV_IRQHandler+0x10>)
 8001576:	f001 faa1 	bl	8002abc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000210 	.word	0x20000210

08001584 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <I2C1_ER_IRQHandler+0x10>)
 800158a:	f001 fab1 	bl	8002af0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000210 	.word	0x20000210

08001598 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return 1;
 800159c:	2301      	movs	r3, #1
}
 800159e:	4618      	mov	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015b2:	f007 f8dd 	bl	8008770 <__errno>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2216      	movs	r2, #22
 80015ba:	601a      	str	r2, [r3, #0]
  return -1;
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_exit>:

void _exit (int status)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f7ff ffe7 	bl	80015a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015da:	bf00      	nop
 80015dc:	e7fd      	b.n	80015da <_exit+0x12>

080015de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	e00a      	b.n	8001606 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f0:	f3af 8000 	nop.w
 80015f4:	4601      	mov	r1, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	60ba      	str	r2, [r7, #8]
 80015fc:	b2ca      	uxtb	r2, r1
 80015fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbf0      	blt.n	80015f0 <_read+0x12>
  }

  return len;
 800160e:	687b      	ldr	r3, [r7, #4]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001620:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001640:	605a      	str	r2, [r3, #4]
  return 0;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_isatty>:

int _isatty(int file)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001666:	b480      	push	{r7}
 8001668:	b085      	sub	sp, #20
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001688:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <_sbrk+0x5c>)
 800168a:	4b15      	ldr	r3, [pc, #84]	@ (80016e0 <_sbrk+0x60>)
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d102      	bne.n	80016a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800169c:	4b11      	ldr	r3, [pc, #68]	@ (80016e4 <_sbrk+0x64>)
 800169e:	4a12      	ldr	r2, [pc, #72]	@ (80016e8 <_sbrk+0x68>)
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d207      	bcs.n	80016c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b0:	f007 f85e 	bl	8008770 <__errno>
 80016b4:	4603      	mov	r3, r0
 80016b6:	220c      	movs	r2, #12
 80016b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e009      	b.n	80016d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c0:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <_sbrk+0x64>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c6:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <_sbrk+0x64>)
 80016d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d2:	68fb      	ldr	r3, [r7, #12]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20030000 	.word	0x20030000
 80016e0:	00000400 	.word	0x00000400
 80016e4:	2000035c 	.word	0x2000035c
 80016e8:	200004d0 	.word	0x200004d0

080016ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80016f0:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <SystemInit+0x98>)
 80016f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016f6:	4a23      	ldr	r2, [pc, #140]	@ (8001784 <SystemInit+0x98>)
 80016f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001714:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001718:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001724:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <SystemInit+0x9c>)
 8001726:	4013      	ands	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800172e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001736:	f023 0305 	bic.w	r3, r3, #5
 800173a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001742:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001746:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001756:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <SystemInit+0xa0>)
 8001758:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800175e:	4a0b      	ldr	r2, [pc, #44]	@ (800178c <SystemInit+0xa0>)
 8001760:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001770:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001776:	2200      	movs	r2, #0
 8001778:	619a      	str	r2, [r3, #24]
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00
 8001788:	faf6fefb 	.word	0xfaf6fefb
 800178c:	22041000 	.word	0x22041000

08001790 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001790:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001792:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001794:	3304      	adds	r3, #4

08001796 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001796:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001798:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800179a:	d3f9      	bcc.n	8001790 <CopyDataInit>
  bx lr
 800179c:	4770      	bx	lr

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800179e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80017a0:	3004      	adds	r0, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80017a2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  bx lr
 80017a6:	4770      	bx	lr

080017a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ac:	f7ff ff9e 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80017b0:	480b      	ldr	r0, [pc, #44]	@ (80017e0 <LoopForever+0x6>)
 80017b2:	490c      	ldr	r1, [pc, #48]	@ (80017e4 <LoopForever+0xa>)
 80017b4:	4a0c      	ldr	r2, [pc, #48]	@ (80017e8 <LoopForever+0xe>)
 80017b6:	2300      	movs	r3, #0
 80017b8:	f7ff ffed 	bl	8001796 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017bc:	480b      	ldr	r0, [pc, #44]	@ (80017ec <LoopForever+0x12>)
 80017be:	490c      	ldr	r1, [pc, #48]	@ (80017f0 <LoopForever+0x16>)
 80017c0:	4a0c      	ldr	r2, [pc, #48]	@ (80017f4 <LoopForever+0x1a>)
 80017c2:	2300      	movs	r3, #0
 80017c4:	f7ff ffe7 	bl	8001796 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80017c8:	480b      	ldr	r0, [pc, #44]	@ (80017f8 <LoopForever+0x1e>)
 80017ca:	490c      	ldr	r1, [pc, #48]	@ (80017fc <LoopForever+0x22>)
 80017cc:	2300      	movs	r3, #0
 80017ce:	f7ff ffe8 	bl	80017a2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017d2:	f006 ffd3 	bl	800877c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80017d6:	f7ff fb93 	bl	8000f00 <main>

080017da <LoopForever>:

LoopForever:
  b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   r0, =_estack
 80017dc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80017e0:	20000008 	.word	0x20000008
 80017e4:	200001f4 	.word	0x200001f4
 80017e8:	0800adc0 	.word	0x0800adc0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80017ec:	20030000 	.word	0x20030000
 80017f0:	20030000 	.word	0x20030000
 80017f4:	0800afac 	.word	0x0800afac
  INIT_BSS _sbss, _ebss
 80017f8:	200001f4 	.word	0x200001f4
 80017fc:	200004cc 	.word	0x200004cc

08001800 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_IRQHandler>
	...

08001804 <InitializeISM330DHCX2>:
    "ayoub_marche",
    "mathias_Marche",
    "jade_marcheCSV"
};

void InitializeISM330DHCX2(void) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af04      	add	r7, sp, #16
    uint8_t config[2];
    HAL_StatusTypeDef status;

    // Step 1: Enable Register Auto-Increment & Block Data Update (CTRL3_C)
    config[0] = 0x12; // CTRL3_C register
 800180a:	2312      	movs	r3, #18
 800180c:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44; // 0b01000100: IF_INC = 1 (Auto-Increment), BDU = 1
 800180e:	2344      	movs	r3, #68	@ 0x44
 8001810:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001812:	f107 020c 	add.w	r2, r7, #12
 8001816:	2364      	movs	r3, #100	@ 0x64
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	21d6      	movs	r1, #214	@ 0xd6
 800181e:	4867      	ldr	r0, [pc, #412]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001820:	f000 fe2e 	bl	8002480 <HAL_I2C_Master_Transmit>
 8001824:	4603      	mov	r3, r0
 8001826:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) printf("❌ Error: CTRL3_C setup failed\n");
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <InitializeISM330DHCX2+0x30>
 800182e:	4864      	ldr	r0, [pc, #400]	@ (80019c0 <InitializeISM330DHCX2+0x1bc>)
 8001830:	f006 fe6c 	bl	800850c <puts>

    HAL_Delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f000 fa5f 	bl	8001cf8 <HAL_Delay>

    // Step 2: Enable Accelerometer - 104Hz ODR, ±2g Full Scale, High-Performance Mode (CTRL1_XL)
    config[0] = 0x10; // CTRL1_XL register
 800183a:	2310      	movs	r3, #16
 800183c:	733b      	strb	r3, [r7, #12]
    config[1] = 0x50; // 0b01010000: ODR = 104Hz, ±2g, High-Performance Mode
 800183e:	2350      	movs	r3, #80	@ 0x50
 8001840:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001842:	f107 020c 	add.w	r2, r7, #12
 8001846:	2364      	movs	r3, #100	@ 0x64
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	2302      	movs	r3, #2
 800184c:	21d6      	movs	r1, #214	@ 0xd6
 800184e:	485b      	ldr	r0, [pc, #364]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001850:	f000 fe16 	bl	8002480 <HAL_I2C_Master_Transmit>
 8001854:	4603      	mov	r3, r0
 8001856:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) printf("❌ Error: CTRL1_XL setup failed\n");
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <InitializeISM330DHCX2+0x60>
 800185e:	4859      	ldr	r0, [pc, #356]	@ (80019c4 <InitializeISM330DHCX2+0x1c0>)
 8001860:	f006 fe54 	bl	800850c <puts>

    HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f000 fa47 	bl	8001cf8 <HAL_Delay>

    // Step 3: Enable Gyroscope - 104Hz ODR, ±1000 dps Full Scale (CTRL2_G)
    config[0] = 0x11; // CTRL2_G register
 800186a:	2311      	movs	r3, #17
 800186c:	733b      	strb	r3, [r7, #12]
    config[1] = 0x48; // 0b01001000: ODR = 104Hz, ±1000 dps
 800186e:	2348      	movs	r3, #72	@ 0x48
 8001870:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 8001872:	f107 020c 	add.w	r2, r7, #12
 8001876:	2364      	movs	r3, #100	@ 0x64
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2302      	movs	r3, #2
 800187c:	21d6      	movs	r1, #214	@ 0xd6
 800187e:	484f      	ldr	r0, [pc, #316]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001880:	f000 fdfe 	bl	8002480 <HAL_I2C_Master_Transmit>
 8001884:	4603      	mov	r3, r0
 8001886:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) printf("❌ Error: CTRL2_G setup failed\n");
 8001888:	7bfb      	ldrb	r3, [r7, #15]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <InitializeISM330DHCX2+0x90>
 800188e:	484e      	ldr	r0, [pc, #312]	@ (80019c8 <InitializeISM330DHCX2+0x1c4>)
 8001890:	f006 fe3c 	bl	800850c <puts>

    HAL_Delay(10);
 8001894:	200a      	movs	r0, #10
 8001896:	f000 fa2f 	bl	8001cf8 <HAL_Delay>

    // Step 4: Enable High-Performance Mode for Accelerometer (CTRL6_C)
    config[0] = 0x15; // CTRL6_C register
 800189a:	2315      	movs	r3, #21
 800189c:	733b      	strb	r3, [r7, #12]
    config[1] = 0x00; // 0b00000000: High-Performance Mode enabled for accelerometer
 800189e:	2300      	movs	r3, #0
 80018a0:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 80018a2:	f107 020c 	add.w	r2, r7, #12
 80018a6:	2364      	movs	r3, #100	@ 0x64
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2302      	movs	r3, #2
 80018ac:	21d6      	movs	r1, #214	@ 0xd6
 80018ae:	4843      	ldr	r0, [pc, #268]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 80018b0:	f000 fde6 	bl	8002480 <HAL_I2C_Master_Transmit>
 80018b4:	4603      	mov	r3, r0
 80018b6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) printf("❌ Error: CTRL6_C setup failed\n");
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <InitializeISM330DHCX2+0xc0>
 80018be:	4843      	ldr	r0, [pc, #268]	@ (80019cc <InitializeISM330DHCX2+0x1c8>)
 80018c0:	f006 fe24 	bl	800850c <puts>

    HAL_Delay(10);
 80018c4:	200a      	movs	r0, #10
 80018c6:	f000 fa17 	bl	8001cf8 <HAL_Delay>

    // Step 5: Enable High-Performance Mode for Gyroscope (CTRL7_G) ✅ FIXED
    config[0] = 0x16; // CTRL7_G register
 80018ca:	2316      	movs	r3, #22
 80018cc:	733b      	strb	r3, [r7, #12]
    config[1] = 0x00; // 0b00000000: High-Performance Mode enabled for gyroscope
 80018ce:	2300      	movs	r3, #0
 80018d0:	737b      	strb	r3, [r7, #13]
    status = HAL_I2C_Master_Transmit(&hi2c1, ISM330DHCX_I2C_ADDRESS, config, 2, 100);
 80018d2:	f107 020c 	add.w	r2, r7, #12
 80018d6:	2364      	movs	r3, #100	@ 0x64
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2302      	movs	r3, #2
 80018dc:	21d6      	movs	r1, #214	@ 0xd6
 80018de:	4837      	ldr	r0, [pc, #220]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 80018e0:	f000 fdce 	bl	8002480 <HAL_I2C_Master_Transmit>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) printf("❌ Error: CTRL7_G setup failed\n");
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d002      	beq.n	80018f4 <InitializeISM330DHCX2+0xf0>
 80018ee:	4838      	ldr	r0, [pc, #224]	@ (80019d0 <InitializeISM330DHCX2+0x1cc>)
 80018f0:	f006 fe0c 	bl	800850c <puts>

    HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f000 f9ff 	bl	8001cf8 <HAL_Delay>

    // Step 6: Read Back Register Values for Debugging
    uint8_t ctrl1_xl, ctrl2_g, ctrl3_c, ctrl6_c, ctrl7_g;
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x10, I2C_MEMADD_SIZE_8BIT, &ctrl1_xl, 1, 100);
 80018fa:	2364      	movs	r3, #100	@ 0x64
 80018fc:	9302      	str	r3, [sp, #8]
 80018fe:	2301      	movs	r3, #1
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	f107 030b 	add.w	r3, r7, #11
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	2210      	movs	r2, #16
 800190c:	21d6      	movs	r1, #214	@ 0xd6
 800190e:	482b      	ldr	r0, [pc, #172]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001910:	f000 fece 	bl	80026b0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x11, I2C_MEMADD_SIZE_8BIT, &ctrl2_g, 1, 100);
 8001914:	2364      	movs	r3, #100	@ 0x64
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2301      	movs	r3, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f107 030a 	add.w	r3, r7, #10
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	2211      	movs	r2, #17
 8001926:	21d6      	movs	r1, #214	@ 0xd6
 8001928:	4824      	ldr	r0, [pc, #144]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 800192a:	f000 fec1 	bl	80026b0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x12, I2C_MEMADD_SIZE_8BIT, &ctrl3_c, 1, 100);
 800192e:	2364      	movs	r3, #100	@ 0x64
 8001930:	9302      	str	r3, [sp, #8]
 8001932:	2301      	movs	r3, #1
 8001934:	9301      	str	r3, [sp, #4]
 8001936:	f107 0309 	add.w	r3, r7, #9
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	2212      	movs	r2, #18
 8001940:	21d6      	movs	r1, #214	@ 0xd6
 8001942:	481e      	ldr	r0, [pc, #120]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001944:	f000 feb4 	bl	80026b0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x15, I2C_MEMADD_SIZE_8BIT, &ctrl6_c, 1, 100);
 8001948:	2364      	movs	r3, #100	@ 0x64
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	2301      	movs	r3, #1
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	2215      	movs	r2, #21
 800195a:	21d6      	movs	r1, #214	@ 0xd6
 800195c:	4817      	ldr	r0, [pc, #92]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 800195e:	f000 fea7 	bl	80026b0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x16, I2C_MEMADD_SIZE_8BIT, &ctrl7_g, 1, 100);
 8001962:	2364      	movs	r3, #100	@ 0x64
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	2301      	movs	r3, #1
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	1dfb      	adds	r3, r7, #7
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	2216      	movs	r2, #22
 8001972:	21d6      	movs	r1, #214	@ 0xd6
 8001974:	4811      	ldr	r0, [pc, #68]	@ (80019bc <InitializeISM330DHCX2+0x1b8>)
 8001976:	f000 fe9b 	bl	80026b0 <HAL_I2C_Mem_Read>

    // Debug Print Statements
    printf(" ISM330DHCX Initialization Complete!\n");
 800197a:	4816      	ldr	r0, [pc, #88]	@ (80019d4 <InitializeISM330DHCX2+0x1d0>)
 800197c:	f006 fdc6 	bl	800850c <puts>
    printf(" CTRL1_XL = 0x%02X (Should be 0x50 - High-Perf Accel)\n", ctrl1_xl);
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	4619      	mov	r1, r3
 8001984:	4814      	ldr	r0, [pc, #80]	@ (80019d8 <InitializeISM330DHCX2+0x1d4>)
 8001986:	f006 fd59 	bl	800843c <iprintf>
    printf(" CTRL2_G  = 0x%02X (Should be 0x48 - High-Perf Gyro)\n", ctrl2_g);
 800198a:	7abb      	ldrb	r3, [r7, #10]
 800198c:	4619      	mov	r1, r3
 800198e:	4813      	ldr	r0, [pc, #76]	@ (80019dc <InitializeISM330DHCX2+0x1d8>)
 8001990:	f006 fd54 	bl	800843c <iprintf>
    printf(" CTRL3_C  = 0x%02X (Should be 0x44 - Auto-Inc, BDU)\n", ctrl3_c);
 8001994:	7a7b      	ldrb	r3, [r7, #9]
 8001996:	4619      	mov	r1, r3
 8001998:	4811      	ldr	r0, [pc, #68]	@ (80019e0 <InitializeISM330DHCX2+0x1dc>)
 800199a:	f006 fd4f 	bl	800843c <iprintf>
    printf(" CTRL6_C  = 0x%02X (Should be 0x00 - High-Perf Accel Confirmed)\n", ctrl6_c);
 800199e:	7a3b      	ldrb	r3, [r7, #8]
 80019a0:	4619      	mov	r1, r3
 80019a2:	4810      	ldr	r0, [pc, #64]	@ (80019e4 <InitializeISM330DHCX2+0x1e0>)
 80019a4:	f006 fd4a 	bl	800843c <iprintf>
    printf(" CTRL7_G  = 0x%02X (Should be 0x00 - High-Perf Gyro Confirmed)\n", ctrl7_g);
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	4619      	mov	r1, r3
 80019ac:	480e      	ldr	r0, [pc, #56]	@ (80019e8 <InitializeISM330DHCX2+0x1e4>)
 80019ae:	f006 fd45 	bl	800843c <iprintf>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000210 	.word	0x20000210
 80019c0:	0800a4cc 	.word	0x0800a4cc
 80019c4:	0800a4ec 	.word	0x0800a4ec
 80019c8:	0800a510 	.word	0x0800a510
 80019cc:	0800a530 	.word	0x0800a530
 80019d0:	0800a550 	.word	0x0800a550
 80019d4:	0800a570 	.word	0x0800a570
 80019d8:	0800a598 	.word	0x0800a598
 80019dc:	0800a5d0 	.word	0x0800a5d0
 80019e0:	0800a608 	.word	0x0800a608
 80019e4:	0800a640 	.word	0x0800a640
 80019e8:	0800a684 	.word	0x0800a684

080019ec <ReadIMUData>:
//	// Delay for next reading
//	HAL_Delay(10); // Adjust based on your sampling rate
//}


void ReadIMUData(AccelerometerData *accelData, GyroscopeData *gyroData) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b090      	sub	sp, #64	@ 0x40
 80019f0:	af04      	add	r7, sp, #16
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
    uint8_t accelDataRaw[6] = {0};
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	2300      	movs	r3, #0
 80019fc:	82bb      	strh	r3, [r7, #20]
    uint8_t gyroDataRaw[6] = {0};
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	2300      	movs	r3, #0
 8001a04:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef status;

    // ✅ Read Gyroscope Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x22,
 8001a06:	2364      	movs	r3, #100	@ 0x64
 8001a08:	9302      	str	r3, [sp, #8]
 8001a0a:	2306      	movs	r3, #6
 8001a0c:	9301      	str	r3, [sp, #4]
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2301      	movs	r3, #1
 8001a16:	2222      	movs	r2, #34	@ 0x22
 8001a18:	21d6      	movs	r1, #214	@ 0xd6
 8001a1a:	486e      	ldr	r0, [pc, #440]	@ (8001bd4 <ReadIMUData+0x1e8>)
 8001a1c:	f000 fe48 	bl	80026b0 <HAL_I2C_Mem_Read>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                               I2C_MEMADD_SIZE_8BIT, gyroDataRaw, 6, 100);
    if (status == HAL_OK) {
 8001a26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d156      	bne.n	8001adc <ReadIMUData+0xf0>
        int16_t rawGyroX = (int16_t)((gyroDataRaw[1] << 8) | gyroDataRaw[0]);
 8001a2e:	7a7b      	ldrb	r3, [r7, #9]
 8001a30:	021b      	lsls	r3, r3, #8
 8001a32:	b21a      	sxth	r2, r3
 8001a34:	7a3b      	ldrb	r3, [r7, #8]
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        int16_t rawGyroY = (int16_t)((gyroDataRaw[3] << 8) | gyroDataRaw[2]);
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	021b      	lsls	r3, r3, #8
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	7abb      	ldrb	r3, [r7, #10]
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	857b      	strh	r3, [r7, #42]	@ 0x2a
        int16_t rawGyroZ = (int16_t)((gyroDataRaw[5] << 8) | gyroDataRaw[4]);
 8001a4a:	7b7b      	ldrb	r3, [r7, #13]
 8001a4c:	021b      	lsls	r3, r3, #8
 8001a4e:	b21a      	sxth	r2, r3
 8001a50:	7b3b      	ldrb	r3, [r7, #12]
 8001a52:	b21b      	sxth	r3, r3
 8001a54:	4313      	orrs	r3, r2
 8001a56:	853b      	strh	r3, [r7, #40]	@ 0x28

        // 🔥 Convert to degrees per second (dps)
        float gyroSensitivity = 35.0f; // Sensitivity for ±1000 dps FS
 8001a58:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <ReadIMUData+0x1ec>)
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
        gyroData->x = rawGyroX * gyroSensitivity / 1000.0f; // Convert mdps to dps
 8001a5c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001a60:	ee07 3a90 	vmov	s15, r3
 8001a64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a70:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8001bdc <ReadIMUData+0x1f0>
 8001a74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 3a90 	vmov	r3, s15
 8001a80:	b21a      	sxth	r2, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	801a      	strh	r2, [r3, #0]
        gyroData->y = rawGyroY * gyroSensitivity / 1000.0f;
 8001a86:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a9a:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8001bdc <ReadIMUData+0x1f0>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa6:	ee17 3a90 	vmov	r3, s15
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	805a      	strh	r2, [r3, #2]
        gyroData->z = rawGyroZ * gyroSensitivity / 1000.0f;
 8001ab0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001abc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001bdc <ReadIMUData+0x1f0>
 8001ac8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001acc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad0:	ee17 3a90 	vmov	r3, s15
 8001ad4:	b21a      	sxth	r2, r3
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	809a      	strh	r2, [r3, #4]
 8001ada:	e005      	b.n	8001ae8 <ReadIMUData+0xfc>
    } else {
        printf("❌ Error reading gyroscope data! Status: %d\n", status);
 8001adc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	483f      	ldr	r0, [pc, #252]	@ (8001be0 <ReadIMUData+0x1f4>)
 8001ae4:	f006 fcaa 	bl	800843c <iprintf>
    }

    // ✅ Read Accelerometer Data
    status = HAL_I2C_Mem_Read(&hi2c1, ISM330DHCX_I2C_ADDRESS, 0x28,
 8001ae8:	2364      	movs	r3, #100	@ 0x64
 8001aea:	9302      	str	r3, [sp, #8]
 8001aec:	2306      	movs	r3, #6
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	f107 0310 	add.w	r3, r7, #16
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2301      	movs	r3, #1
 8001af8:	2228      	movs	r2, #40	@ 0x28
 8001afa:	21d6      	movs	r1, #214	@ 0xd6
 8001afc:	4835      	ldr	r0, [pc, #212]	@ (8001bd4 <ReadIMUData+0x1e8>)
 8001afe:	f000 fdd7 	bl	80026b0 <HAL_I2C_Mem_Read>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                               I2C_MEMADD_SIZE_8BIT, accelDataRaw, 6, 100);
    if (status == HAL_OK) {
 8001b08:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d156      	bne.n	8001bbe <ReadIMUData+0x1d2>
        int16_t rawAccelX = (int16_t)((accelDataRaw[1] << 8) | accelDataRaw[0]);
 8001b10:	7c7b      	ldrb	r3, [r7, #17]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b21a      	sxth	r2, r3
 8001b16:	7c3b      	ldrb	r3, [r7, #16]
 8001b18:	b21b      	sxth	r3, r3
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	847b      	strh	r3, [r7, #34]	@ 0x22
        int16_t rawAccelY = (int16_t)((accelDataRaw[3] << 8) | accelDataRaw[2]);
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	7cbb      	ldrb	r3, [r7, #18]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	843b      	strh	r3, [r7, #32]
        int16_t rawAccelZ = (int16_t)((accelDataRaw[5] << 8) | accelDataRaw[4]);
 8001b2c:	7d7b      	ldrb	r3, [r7, #21]
 8001b2e:	021b      	lsls	r3, r3, #8
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	7d3b      	ldrb	r3, [r7, #20]
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4313      	orrs	r3, r2
 8001b38:	83fb      	strh	r3, [r7, #30]

        // 🔥 Convert to g (acceleration)
        float accelSensitivity = 0.061f; // Sensitivity for ±2g FS
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <ReadIMUData+0x1f8>)
 8001b3c:	61bb      	str	r3, [r7, #24]
        accelData->x = rawAccelX * accelSensitivity / 1000.0f; // Convert mg to g
 8001b3e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001bdc <ReadIMUData+0x1f0>
 8001b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5e:	ee17 3a90 	vmov	r3, s15
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	801a      	strh	r2, [r3, #0]
        accelData->y = rawAccelY * accelSensitivity / 1000.0f;
 8001b68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b74:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b7c:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001bdc <ReadIMUData+0x1f0>
 8001b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b88:	ee17 3a90 	vmov	r3, s15
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	805a      	strh	r2, [r3, #2]
        accelData->z = rawAccelZ * accelSensitivity / 1000.0f;
 8001b92:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ba6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001bdc <ReadIMUData+0x1f0>
 8001baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 3a90 	vmov	r3, s15
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	809a      	strh	r2, [r3, #4]
    } else {
        printf("❌ Error reading accelerometer data! Status: %d\n", status);
    }
}
 8001bbc:	e005      	b.n	8001bca <ReadIMUData+0x1de>
        printf("❌ Error reading accelerometer data! Status: %d\n", status);
 8001bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	@ (8001be8 <ReadIMUData+0x1fc>)
 8001bc6:	f006 fc39 	bl	800843c <iprintf>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	@ 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000210 	.word	0x20000210
 8001bd8:	420c0000 	.word	0x420c0000
 8001bdc:	447a0000 	.word	0x447a0000
 8001be0:	0800a6c4 	.word	0x0800a6c4
 8001be4:	3d79db23 	.word	0x3d79db23
 8001be8:	0800a6f4 	.word	0x0800a6f4

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <HAL_Init+0x3c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001c28 <HAL_Init+0x3c>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c02:	2003      	movs	r0, #3
 8001c04:	f000 f96c 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c08:	200f      	movs	r0, #15
 8001c0a:	f000 f80f 	bl	8001c2c <HAL_InitTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	71fb      	strb	r3, [r7, #7]
 8001c18:	e001      	b.n	8001c1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c1a:	f7ff fba3 	bl	8001364 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58004000 	.word	0x58004000

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001c38:	4b17      	ldr	r3, [pc, #92]	@ (8001c98 <HAL_InitTick+0x6c>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d024      	beq.n	8001c8a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c40:	f003 f8d0 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8001c44:	4602      	mov	r2, r0
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_InitTick+0x6c>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f974 	bl	8001f46 <HAL_SYSTICK_Config>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10f      	bne.n	8001c84 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b0f      	cmp	r3, #15
 8001c68:	d809      	bhi.n	8001c7e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	6879      	ldr	r1, [r7, #4]
 8001c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c72:	f000 f940 	bl	8001ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_InitTick+0x70>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	73fb      	strb	r3, [r7, #15]
 8001c82:	e004      	b.n	8001c8e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
 8001c88:	e001      	b.n	8001c8e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000010 	.word	0x20000010
 8001c9c:	2000000c 	.word	0x2000000c

08001ca0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000010 	.word	0x20000010
 8001cc4:	20000360 	.word	0x20000360

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000360 	.word	0x20000360

08001ce0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	@ (8001cf4 <HAL_GetTickPrio+0x14>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	2000000c 	.word	0x2000000c

08001cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d00:	f7ff ffe2 	bl	8001cc8 <HAL_GetTick>
 8001d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d005      	beq.n	8001d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d12:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_Delay+0x44>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1e:	bf00      	nop
 8001d20:	f7ff ffd2 	bl	8001cc8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8f7      	bhi.n	8001d20 <HAL_Delay+0x28>
  {
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000010 	.word	0x20000010

08001d40 <__NVIC_SetPriorityGrouping>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d50:	4b0c      	ldr	r3, [pc, #48]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d72:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <__NVIC_SetPriorityGrouping+0x44>)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	60d3      	str	r3, [r2, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_GetPriorityGrouping>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d8c:	4b04      	ldr	r3, [pc, #16]	@ (8001da0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	f003 0307 	and.w	r3, r3, #7
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000ed00 	.word	0xe000ed00

08001da4 <__NVIC_EnableIRQ>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db0b      	blt.n	8001dce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	f003 021f 	and.w	r2, r3, #31
 8001dbc:	4907      	ldr	r1, [pc, #28]	@ (8001ddc <__NVIC_EnableIRQ+0x38>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	@ (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	@ (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	@ 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	@ (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff29 	bl	8001d40 <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f04:	f7ff ff40 	bl	8001d88 <__NVIC_GetPriorityGrouping>
 8001f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	68b9      	ldr	r1, [r7, #8]
 8001f0e:	6978      	ldr	r0, [r7, #20]
 8001f10:	f7ff ff90 	bl	8001e34 <NVIC_EncodePriority>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff5f 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	4603      	mov	r3, r0
 8001f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff33 	bl	8001da4 <__NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ffa4 	bl	8001e9c <SysTick_Config>
 8001f54:	4603      	mov	r3, r0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d005      	beq.n	8001f82 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2204      	movs	r2, #4
 8001f7a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
 8001f80:	e047      	b.n	8002012 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 020e 	bic.w	r2, r2, #14
 8001f90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f003 021c 	and.w	r2, r3, #28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00c      	beq.n	8001ff2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ff0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
    }
  }
  return status;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002046:	e14c      	b.n	80022e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	fa01 f303 	lsl.w	r3, r1, r3
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 813e 	beq.w	80022dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b01      	cmp	r3, #1
 800206a:	d005      	beq.n	8002078 <HAL_GPIO_Init+0x40>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d130      	bne.n	80020da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020ae:	2201      	movs	r2, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0201 	and.w	r2, r3, #1
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d017      	beq.n	8002116 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d123      	bne.n	800216a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3208      	adds	r2, #8
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	08da      	lsrs	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3208      	adds	r2, #8
 8002164:	6939      	ldr	r1, [r7, #16]
 8002166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 0203 	and.w	r2, r3, #3
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8098 	beq.w	80022dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80021ac:	4a54      	ldr	r2, [pc, #336]	@ (8002300 <HAL_GPIO_Init+0x2c8>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021d6:	d019      	beq.n	800220c <HAL_GPIO_Init+0x1d4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a4a      	ldr	r2, [pc, #296]	@ (8002304 <HAL_GPIO_Init+0x2cc>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <HAL_GPIO_Init+0x1d0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a49      	ldr	r2, [pc, #292]	@ (8002308 <HAL_GPIO_Init+0x2d0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00d      	beq.n	8002204 <HAL_GPIO_Init+0x1cc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a48      	ldr	r2, [pc, #288]	@ (800230c <HAL_GPIO_Init+0x2d4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <HAL_GPIO_Init+0x1c8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a47      	ldr	r2, [pc, #284]	@ (8002310 <HAL_GPIO_Init+0x2d8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d101      	bne.n	80021fc <HAL_GPIO_Init+0x1c4>
 80021f8:	2304      	movs	r3, #4
 80021fa:	e008      	b.n	800220e <HAL_GPIO_Init+0x1d6>
 80021fc:	2307      	movs	r3, #7
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1d6>
 8002200:	2303      	movs	r3, #3
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1d6>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1d6>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1d6>
 800220c:	2300      	movs	r3, #0
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800221e:	4938      	ldr	r1, [pc, #224]	@ (8002300 <HAL_GPIO_Init+0x2c8>)
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800222c:	4b39      	ldr	r3, [pc, #228]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	43db      	mvns	r3, r3
 8002236:	693a      	ldr	r2, [r7, #16]
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002250:	4a30      	ldr	r2, [pc, #192]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002256:	4b2f      	ldr	r3, [pc, #188]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002272:	693a      	ldr	r2, [r7, #16]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800227a:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 8002282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002286:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	43db      	mvns	r3, r3
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4013      	ands	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 80022b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002314 <HAL_GPIO_Init+0x2dc>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	3301      	adds	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	fa22 f303 	lsr.w	r3, r2, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f47f aeab 	bne.w	8002048 <HAL_GPIO_Init+0x10>
  }
}
 80022f2:	bf00      	nop
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	40010000 	.word	0x40010000
 8002304:	48000400 	.word	0x48000400
 8002308:	48000800 	.word	0x48000800
 800230c:	48000c00 	.word	0x48000c00
 8002310:	48001000 	.word	0x48001000
 8002314:	58000800 	.word	0x58000800

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002334:	e002      	b.n	800233c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002336:	887a      	ldrh	r2, [r7, #2]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e08d      	b.n	8002476 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff f800 	bl	8001374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 0201 	bic.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689a      	ldr	r2, [r3, #8]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e006      	b.n	80023d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689a      	ldr	r2, [r3, #8]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d108      	bne.n	80023ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023e6:	605a      	str	r2, [r3, #4]
 80023e8:	e007      	b.n	80023fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800240c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800241c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
	...

08002480 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
 8002490:	4613      	mov	r3, r2
 8002492:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b20      	cmp	r3, #32
 800249e:	f040 80fd 	bne.w	800269c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_I2C_Master_Transmit+0x30>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0f6      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024b8:	f7ff fc06 	bl	8001cc8 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2319      	movs	r3, #25
 80024c4:	2201      	movs	r2, #1
 80024c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f001 f8e9 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0e1      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2221      	movs	r2, #33	@ 0x21
 80024de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2210      	movs	r2, #16
 80024e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	893a      	ldrh	r2, [r7, #8]
 80024fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002506:	b29b      	uxth	r3, r3
 8002508:	2bff      	cmp	r3, #255	@ 0xff
 800250a:	d906      	bls.n	800251a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	22ff      	movs	r2, #255	@ 0xff
 8002510:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002512:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e007      	b.n	800252a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29a      	uxth	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002524:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002528:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252e:	2b00      	cmp	r3, #0
 8002530:	d024      	beq.n	800257c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	781a      	ldrb	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	3b01      	subs	r3, #1
 800255c:	b29a      	uxth	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	8979      	ldrh	r1, [r7, #10]
 800256e:	4b4e      	ldr	r3, [pc, #312]	@ (80026a8 <HAL_I2C_Master_Transmit+0x228>)
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f001 fa57 	bl	8003a28 <I2C_TransferConfig>
 800257a:	e066      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	8979      	ldrh	r1, [r7, #10]
 8002584:	4b48      	ldr	r3, [pc, #288]	@ (80026a8 <HAL_I2C_Master_Transmit+0x228>)
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f001 fa4c 	bl	8003a28 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002590:	e05b      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	6a39      	ldr	r1, [r7, #32]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f001 f8dc 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07b      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d034      	beq.n	800264a <HAL_I2C_Master_Transmit+0x1ca>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d130      	bne.n	800264a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	2200      	movs	r2, #0
 80025f0:	2180      	movs	r1, #128	@ 0x80
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f001 f855 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e04d      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2bff      	cmp	r3, #255	@ 0xff
 800260a:	d90e      	bls.n	800262a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	22ff      	movs	r2, #255	@ 0xff
 8002610:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002616:	b2da      	uxtb	r2, r3
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	2300      	movs	r3, #0
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f001 fa00 	bl	8003a28 <I2C_TransferConfig>
 8002628:	e00f      	b.n	800264a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	2300      	movs	r3, #0
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f001 f9ef 	bl	8003a28 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d19e      	bne.n	8002592 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	6a39      	ldr	r1, [r7, #32]
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f001 f8c2 	bl	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e01a      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	6859      	ldr	r1, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b0c      	ldr	r3, [pc, #48]	@ (80026ac <HAL_I2C_Master_Transmit+0x22c>)
 800267c:	400b      	ands	r3, r1
 800267e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002698:	2300      	movs	r3, #0
 800269a:	e000      	b.n	800269e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800269c:	2302      	movs	r3, #2
  }
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	80002000 	.word	0x80002000
 80026ac:	fe00e800 	.word	0xfe00e800

080026b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	817b      	strh	r3, [r7, #10]
 80026c2:	460b      	mov	r3, r1
 80026c4:	813b      	strh	r3, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	f040 80fd 	bne.w	80028d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d002      	beq.n	80026e4 <HAL_I2C_Mem_Read+0x34>
 80026de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0f1      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_I2C_Mem_Read+0x4e>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e0ea      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002706:	f7ff fadf 	bl	8001cc8 <HAL_GetTick>
 800270a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2319      	movs	r3, #25
 8002712:	2201      	movs	r2, #1
 8002714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 ffc2 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0d5      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2222      	movs	r2, #34	@ 0x22
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2240      	movs	r2, #64	@ 0x40
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6a3a      	ldr	r2, [r7, #32]
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002750:	88f8      	ldrh	r0, [r7, #6]
 8002752:	893a      	ldrh	r2, [r7, #8]
 8002754:	8979      	ldrh	r1, [r7, #10]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	4603      	mov	r3, r0
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fb59 	bl	8002e18 <I2C_RequestMemoryRead>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0ad      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2bff      	cmp	r3, #255	@ 0xff
 8002780:	d90e      	bls.n	80027a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	22ff      	movs	r2, #255	@ 0xff
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278c:	b2da      	uxtb	r2, r3
 800278e:	8979      	ldrh	r1, [r7, #10]
 8002790:	4b52      	ldr	r3, [pc, #328]	@ (80028dc <HAL_I2C_Mem_Read+0x22c>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f001 f945 	bl	8003a28 <I2C_TransferConfig>
 800279e:	e00f      	b.n	80027c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	8979      	ldrh	r1, [r7, #10]
 80027b2:	4b4a      	ldr	r3, [pc, #296]	@ (80028dc <HAL_I2C_Mem_Read+0x22c>)
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f001 f934 	bl	8003a28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c6:	2200      	movs	r2, #0
 80027c8:	2104      	movs	r1, #4
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 ff69 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e07c      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002810:	b29b      	uxth	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d034      	beq.n	8002880 <HAL_I2C_Mem_Read+0x1d0>
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281a:	2b00      	cmp	r3, #0
 800281c:	d130      	bne.n	8002880 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	@ 0x80
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 ff3a 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e04d      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283c:	b29b      	uxth	r3, r3
 800283e:	2bff      	cmp	r3, #255	@ 0xff
 8002840:	d90e      	bls.n	8002860 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	22ff      	movs	r2, #255	@ 0xff
 8002846:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	b2da      	uxtb	r2, r3
 800284e:	8979      	ldrh	r1, [r7, #10]
 8002850:	2300      	movs	r3, #0
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f001 f8e5 	bl	8003a28 <I2C_TransferConfig>
 800285e:	e00f      	b.n	8002880 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002864:	b29a      	uxth	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286e:	b2da      	uxtb	r2, r3
 8002870:	8979      	ldrh	r1, [r7, #10]
 8002872:	2300      	movs	r3, #0
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f001 f8d4 	bl	8003a28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d19a      	bne.n	80027c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 ffa7 	bl	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e01a      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2220      	movs	r2, #32
 80028a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6859      	ldr	r1, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_I2C_Mem_Read+0x230>)
 80028b2:	400b      	ands	r3, r1
 80028b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	80002400 	.word	0x80002400
 80028e0:	fe00e800 	.word	0xfe00e800

080028e4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	607a      	str	r2, [r7, #4]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	460b      	mov	r3, r1
 80028f2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	f040 80d6 	bne.w	8002ab2 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002914:	d101      	bne.n	800291a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e0cc      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_IsDeviceReady+0x44>
 8002924:	2302      	movs	r3, #2
 8002926:	e0c5      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2224      	movs	r2, #36	@ 0x24
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d107      	bne.n	8002956 <HAL_I2C_IsDeviceReady+0x72>
 8002946:	897b      	ldrh	r3, [r7, #10]
 8002948:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800294c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002950:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002954:	e006      	b.n	8002964 <HAL_I2C_IsDeviceReady+0x80>
 8002956:	897b      	ldrh	r3, [r7, #10]
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002960:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800296a:	f7ff f9ad 	bl	8001cc8 <HAL_GetTick>
 800296e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b20      	cmp	r3, #32
 800297c:	bf0c      	ite	eq
 800297e:	2301      	moveq	r3, #1
 8002980:	2300      	movne	r3, #0
 8002982:	b2db      	uxtb	r3, r3
 8002984:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b10      	cmp	r3, #16
 8002992:	bf0c      	ite	eq
 8002994:	2301      	moveq	r3, #1
 8002996:	2300      	movne	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800299c:	e034      	b.n	8002a08 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d01a      	beq.n	80029dc <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7ff f98f 	bl	8001cc8 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <HAL_I2C_IsDeviceReady+0xd8>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c8:	f043 0220 	orr.w	r2, r3, #32
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e06b      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	bf0c      	ite	eq
 80029ea:	2301      	moveq	r3, #1
 80029ec:	2300      	movne	r3, #0
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	bf0c      	ite	eq
 8002a00:	2301      	moveq	r3, #1
 8002a02:	2300      	movne	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_I2C_IsDeviceReady+0x130>
 8002a0e:	7fbb      	ldrb	r3, [r7, #30]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0c4      	beq.n	800299e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0310 	and.w	r3, r3, #16
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d01a      	beq.n	8002a58 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2120      	movs	r1, #32
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fe38 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e03b      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2220      	movs	r2, #32
 8002a42:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	e02d      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2120      	movs	r1, #32
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f000 fe1d 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e020      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2210      	movs	r2, #16
 8002a78:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f63f af56 	bhi.w	800293e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	f043 0220 	orr.w	r2, r3, #32
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3720      	adds	r7, #32
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	4798      	blx	r3
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00f      	beq.n	8002b32 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f043 0201 	orr.w	r2, r3, #1
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b30:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00f      	beq.n	8002b5c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4a:	f043 0208 	orr.w	r2, r3, #8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b5a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00f      	beq.n	8002b86 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00a      	beq.n	8002b86 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b74:	f043 0202 	orr.w	r2, r3, #2
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b84:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 030b 	and.w	r3, r3, #11
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002b96:	68f9      	ldr	r1, [r7, #12]
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fc29 	bl	80033f0 <I2C_ITError>
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	70fb      	strb	r3, [r7, #3]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr

08002c12 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b086      	sub	sp, #24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <I2C_Slave_ISR_IT+0x24>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e0e2      	b.n	8002e10 <I2C_Slave_ISR_IT+0x1ea>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d009      	beq.n	8002c70 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d004      	beq.n	8002c70 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002c66:	6939      	ldr	r1, [r7, #16]
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 fa09 	bl	8003080 <I2C_ITSlaveCplt>
 8002c6e:	e0ca      	b.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d04b      	beq.n	8002d12 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d128      	bne.n	8002ce0 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b28      	cmp	r3, #40	@ 0x28
 8002c98:	d108      	bne.n	8002cac <I2C_Slave_ISR_IT+0x86>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002ca0:	d104      	bne.n	8002cac <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 fb4f 	bl	8003348 <I2C_ITListenCplt>
 8002caa:	e031      	b.n	8002d10 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b29      	cmp	r3, #41	@ 0x29
 8002cb6:	d10e      	bne.n	8002cd6 <I2C_Slave_ISR_IT+0xb0>
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cbe:	d00a      	beq.n	8002cd6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 fca8 	bl	800361e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f97a 	bl	8002fc8 <I2C_ITSlaveSeqCplt>
 8002cd4:	e01c      	b.n	8002d10 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2210      	movs	r2, #16
 8002cdc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002cde:	e08f      	b.n	8002e00 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cec:	f043 0204 	orr.w	r2, r3, #4
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <I2C_Slave_ISR_IT+0xdc>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d00:	d17e      	bne.n	8002e00 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d06:	4619      	mov	r1, r3
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fb71 	bl	80033f0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d0e:	e077      	b.n	8002e00 <I2C_Slave_ISR_IT+0x1da>
 8002d10:	e076      	b.n	8002e00 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02f      	beq.n	8002d7c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02a      	beq.n	8002d7c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d14b      	bne.n	8002e04 <I2C_Slave_ISR_IT+0x1de>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d72:	d047      	beq.n	8002e04 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f927 	bl	8002fc8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002d7a:	e043      	b.n	8002e04 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d004      	beq.n	8002d9a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002d90:	6939      	ldr	r1, [r7, #16]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f894 	bl	8002ec0 <I2C_ITAddrCplt>
 8002d98:	e035      	b.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d030      	beq.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d02b      	beq.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d018      	beq.n	8002dea <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	781a      	ldrb	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002de8:	e00d      	b.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d002      	beq.n	8002df8 <I2C_Slave_ISR_IT+0x1d2>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f000 f8e5 	bl	8002fc8 <I2C_ITSlaveSeqCplt>
 8002dfe:	e002      	b.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002e04:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	4608      	mov	r0, r1
 8002e22:	4611      	mov	r1, r2
 8002e24:	461a      	mov	r2, r3
 8002e26:	4603      	mov	r3, r0
 8002e28:	817b      	strh	r3, [r7, #10]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	813b      	strh	r3, [r7, #8]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <I2C_RequestMemoryRead+0xa4>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fdf2 	bl	8003a28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	69b9      	ldr	r1, [r7, #24]
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 fc83 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e02c      	b.n	8002eb2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d105      	bne.n	8002e6a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e5e:	893b      	ldrh	r3, [r7, #8]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e68:	e015      	b.n	8002e96 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e78:	69fa      	ldr	r2, [r7, #28]
 8002e7a:	69b9      	ldr	r1, [r7, #24]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 fc69 	bl	8003754 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e012      	b.n	8002eb2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e8c:	893b      	ldrh	r3, [r7, #8]
 8002e8e:	b2da      	uxtb	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2140      	movs	r1, #64	@ 0x40
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fbfe 	bl	80036a2 <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	80002000 	.word	0x80002000

08002ec0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002ed6:	2b28      	cmp	r3, #40	@ 0x28
 8002ed8:	d16a      	bne.n	8002fb0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002ef8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f06:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002f14:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d138      	bne.n	8002f90 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002f1e:	897b      	ldrh	r3, [r7, #10]
 8002f20:	09db      	lsrs	r3, r3, #7
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	89bb      	ldrh	r3, [r7, #12]
 8002f26:	4053      	eors	r3, r2
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f003 0306 	and.w	r3, r3, #6
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d11c      	bne.n	8002f6c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002f32:	897b      	ldrh	r3, [r7, #10]
 8002f34:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d13b      	bne.n	8002fc0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2208      	movs	r2, #8
 8002f54:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f5e:	89ba      	ldrh	r2, [r7, #12]
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	4619      	mov	r1, r3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff fe32 	bl	8002bce <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002f6a:	e029      	b.n	8002fc0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 fd89 	bl	8003a8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002f82:	89ba      	ldrh	r2, [r7, #12]
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff fe20 	bl	8002bce <HAL_I2C_AddrCallback>
}
 8002f8e:	e017      	b.n	8002fc0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002f90:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fd79 	bl	8003a8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fa2:	89ba      	ldrh	r2, [r7, #12]
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7ff fe10 	bl	8002bce <HAL_I2C_AddrCallback>
}
 8002fae:	e007      	b.n	8002fc0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e00c      	b.n	8003016 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d007      	beq.n	8003016 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003014:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b29      	cmp	r3, #41	@ 0x29
 8003020:	d112      	bne.n	8003048 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2228      	movs	r2, #40	@ 0x28
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2221      	movs	r2, #33	@ 0x21
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003030:	2101      	movs	r1, #1
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 fd2a 	bl	8003a8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fdb0 	bl	8002ba6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003046:	e017      	b.n	8003078 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b2a      	cmp	r3, #42	@ 0x2a
 8003052:	d111      	bne.n	8003078 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2228      	movs	r2, #40	@ 0x28
 8003058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2222      	movs	r2, #34	@ 0x22
 8003060:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003062:	2102      	movs	r1, #2
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fd11 	bl	8003a8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fda1 	bl	8002bba <HAL_I2C_SlaveRxCpltCallback>
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a2:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2220      	movs	r2, #32
 80030aa:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80030ac:	7afb      	ldrb	r3, [r7, #11]
 80030ae:	2b21      	cmp	r3, #33	@ 0x21
 80030b0:	d002      	beq.n	80030b8 <I2C_ITSlaveCplt+0x38>
 80030b2:	7afb      	ldrb	r3, [r7, #11]
 80030b4:	2b29      	cmp	r3, #41	@ 0x29
 80030b6:	d108      	bne.n	80030ca <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80030b8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fce5 	bl	8003a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2221      	movs	r2, #33	@ 0x21
 80030c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80030c8:	e019      	b.n	80030fe <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80030ca:	7afb      	ldrb	r3, [r7, #11]
 80030cc:	2b22      	cmp	r3, #34	@ 0x22
 80030ce:	d002      	beq.n	80030d6 <I2C_ITSlaveCplt+0x56>
 80030d0:	7afb      	ldrb	r3, [r7, #11]
 80030d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80030d4:	d108      	bne.n	80030e8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80030d6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fcd6 	bl	8003a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2222      	movs	r2, #34	@ 0x22
 80030e4:	631a      	str	r2, [r3, #48]	@ 0x30
 80030e6:	e00a      	b.n	80030fe <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80030e8:	7afb      	ldrb	r3, [r7, #11]
 80030ea:	2b28      	cmp	r3, #40	@ 0x28
 80030ec:	d107      	bne.n	80030fe <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80030ee:	f248 0103 	movw	r1, #32771	@ 0x8003
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fcca 	bl	8003a8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800310c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b89      	ldr	r3, [pc, #548]	@ (8003340 <I2C_ITSlaveCplt+0x2c0>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fa7d 	bl	800361e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800313c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01f      	beq.n	8003186 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	b29a      	uxth	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003154:	e017      	b.n	8003186 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800316e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	2b00      	cmp	r3, #0
 8003176:	d006      	beq.n	8003186 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f023 0304 	bic.w	r3, r3, #4
 8003196:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00c      	beq.n	80031d2 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f003 0310 	and.w	r3, r3, #16
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d049      	beq.n	8003286 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d044      	beq.n	8003286 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d128      	bne.n	8003258 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b28      	cmp	r3, #40	@ 0x28
 8003210:	d108      	bne.n	8003224 <I2C_ITSlaveCplt+0x1a4>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003218:	d104      	bne.n	8003224 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800321a:	6979      	ldr	r1, [r7, #20]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f893 	bl	8003348 <I2C_ITListenCplt>
 8003222:	e030      	b.n	8003286 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b29      	cmp	r3, #41	@ 0x29
 800322e:	d10e      	bne.n	800324e <I2C_ITSlaveCplt+0x1ce>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003236:	d00a      	beq.n	800324e <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2210      	movs	r2, #16
 800323e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f9ec 	bl	800361e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff febe 	bl	8002fc8 <I2C_ITSlaveSeqCplt>
 800324c:	e01b      	b.n	8003286 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2210      	movs	r2, #16
 8003254:	61da      	str	r2, [r3, #28]
 8003256:	e016      	b.n	8003286 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2210      	movs	r2, #16
 800325e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <I2C_ITSlaveCplt+0x1fa>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003278:	d105      	bne.n	8003286 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 f8b5 	bl	80033f0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a0:	4619      	mov	r1, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8a4 	bl	80033f0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b28      	cmp	r3, #40	@ 0x28
 80032b2:	d141      	bne.n	8003338 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80032b4:	6979      	ldr	r1, [r7, #20]
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f846 	bl	8003348 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80032bc:	e03c      	b.n	8003338 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032c6:	d014      	beq.n	80032f2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff fe7d 	bl	8002fc8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003344 <I2C_ITSlaveCplt+0x2c4>)
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff fc7d 	bl	8002bea <HAL_I2C_ListenCpltCallback>
}
 80032f0:	e022      	b.n	8003338 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b22      	cmp	r3, #34	@ 0x22
 80032fc:	d10e      	bne.n	800331c <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fc50 	bl	8002bba <HAL_I2C_SlaveRxCpltCallback>
}
 800331a:	e00d      	b.n	8003338 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fc37 	bl	8002ba6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003338:	bf00      	nop
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	fe00e800 	.word	0xfe00e800
 8003344:	ffff0000 	.word	0xffff0000

08003348 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <I2C_ITListenCplt+0xa4>)
 8003356:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	f003 0304 	and.w	r3, r3, #4
 800337a:	2b00      	cmp	r3, #0
 800337c:	d022      	beq.n	80033c4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033c4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb5f 	bl	8003a8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2210      	movs	r2, #16
 80033d4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff fc03 	bl	8002bea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	ffff0000 	.word	0xffff0000

080033f0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003400:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a6d      	ldr	r2, [pc, #436]	@ (80035c4 <I2C_ITError+0x1d4>)
 800340e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b28      	cmp	r3, #40	@ 0x28
 8003426:	d005      	beq.n	8003434 <I2C_ITError+0x44>
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	2b29      	cmp	r3, #41	@ 0x29
 800342c:	d002      	beq.n	8003434 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800342e:	7bfb      	ldrb	r3, [r7, #15]
 8003430:	2b2a      	cmp	r3, #42	@ 0x2a
 8003432:	d10b      	bne.n	800344c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003434:	2103      	movs	r1, #3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fb28 	bl	8003a8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2228      	movs	r2, #40	@ 0x28
 8003440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a60      	ldr	r2, [pc, #384]	@ (80035c8 <I2C_ITError+0x1d8>)
 8003448:	635a      	str	r2, [r3, #52]	@ 0x34
 800344a:	e030      	b.n	80034ae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800344c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fb1b 	bl	8003a8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f8e1 	bl	800361e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b60      	cmp	r3, #96	@ 0x60
 8003466:	d01f      	beq.n	80034a8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b20      	cmp	r3, #32
 800347c:	d114      	bne.n	80034a8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b10      	cmp	r3, #16
 800348a:	d109      	bne.n	80034a0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2220      	movs	r2, #32
 80034a6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d039      	beq.n	8003530 <I2C_ITError+0x140>
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b11      	cmp	r3, #17
 80034c0:	d002      	beq.n	80034c8 <I2C_ITError+0xd8>
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	2b21      	cmp	r3, #33	@ 0x21
 80034c6:	d133      	bne.n	8003530 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034d6:	d107      	bne.n	80034e8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80034e6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe fd95 	bl	800201c <HAL_DMA_GetState>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d017      	beq.n	8003528 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	4a33      	ldr	r2, [pc, #204]	@ (80035cc <I2C_ITError+0x1dc>)
 80034fe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fd26 	bl	8001f5e <HAL_DMA_Abort_IT>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d04d      	beq.n	80035b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003522:	4610      	mov	r0, r2
 8003524:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003526:	e045      	b.n	80035b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f851 	bl	80035d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800352e:	e041      	b.n	80035b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d039      	beq.n	80035ac <I2C_ITError+0x1bc>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b12      	cmp	r3, #18
 800353c:	d002      	beq.n	8003544 <I2C_ITError+0x154>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b22      	cmp	r3, #34	@ 0x22
 8003542:	d133      	bne.n	80035ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003552:	d107      	bne.n	8003564 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003562:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003568:	4618      	mov	r0, r3
 800356a:	f7fe fd57 	bl	800201c <HAL_DMA_GetState>
 800356e:	4603      	mov	r3, r0
 8003570:	2b01      	cmp	r3, #1
 8003572:	d017      	beq.n	80035a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003578:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <I2C_ITError+0x1dc>)
 800357a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fce8 	bl	8001f5e <HAL_DMA_Abort_IT>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800359e:	4610      	mov	r0, r2
 80035a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035a2:	e009      	b.n	80035b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f813 	bl	80035d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035aa:	e005      	b.n	80035b8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f80f 	bl	80035d0 <I2C_TreatErrorCallback>
  }
}
 80035b2:	e002      	b.n	80035ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035b4:	bf00      	nop
 80035b6:	e000      	b.n	80035ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035b8:	bf00      	nop
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	ffff0000 	.word	0xffff0000
 80035c8:	08002c27 	.word	0x08002c27
 80035cc:	08003667 	.word	0x08003667

080035d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b60      	cmp	r3, #96	@ 0x60
 80035e2:	d10e      	bne.n	8003602 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff fb09 	bl	8002c12 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003600:	e009      	b.n	8003616 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff faf4 	bl	8002bfe <HAL_I2C_ErrorCallback>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	f003 0302 	and.w	r3, r3, #2
 8003630:	2b02      	cmp	r3, #2
 8003632:	d103      	bne.n	800363c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2200      	movs	r2, #0
 800363a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b01      	cmp	r3, #1
 8003648:	d007      	beq.n	800365a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f042 0201 	orr.w	r2, r2, #1
 8003658:	619a      	str	r2, [r3, #24]
  }
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	2200      	movs	r2, #0
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	2200      	movs	r2, #0
 8003692:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff9b 	bl	80035d0 <I2C_TreatErrorCallback>
}
 800369a:	bf00      	nop
 800369c:	3710      	adds	r7, #16
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	4613      	mov	r3, r2
 80036b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b2:	e03b      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	6839      	ldr	r1, [r7, #0]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f8d5 	bl	8003868 <I2C_IsErrorOccurred>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e041      	b.n	800374c <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d02d      	beq.n	800372c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d0:	f7fe fafa 	bl	8001cc8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <I2C_WaitOnFlagUntilTimeout+0x44>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d122      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4013      	ands	r3, r2
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	bf0c      	ite	eq
 80036f6:	2301      	moveq	r3, #1
 80036f8:	2300      	movne	r3, #0
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	461a      	mov	r2, r3
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	429a      	cmp	r2, r3
 8003702:	d113      	bne.n	800372c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e00f      	b.n	800374c <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	429a      	cmp	r2, r3
 8003748:	d0b4      	beq.n	80036b4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003760:	e033      	b.n	80037ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f87e 	bl	8003868 <I2C_IsErrorOccurred>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e031      	b.n	80037da <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d025      	beq.n	80037ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fe faa3 	bl	8001cc8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d11a      	bne.n	80037ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d013      	beq.n	80037ca <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e007      	b.n	80037da <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d1c4      	bne.n	8003762 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ee:	e02f      	b.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f837 	bl	8003868 <I2C_IsErrorOccurred>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02d      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003804:	f7fe fa60 	bl	8001cc8 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	d302      	bcc.n	800381a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11a      	bne.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	f003 0320 	and.w	r3, r3, #32
 8003824:	2b20      	cmp	r3, #32
 8003826:	d013      	beq.n	8003850 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f003 0320 	and.w	r3, r3, #32
 800385a:	2b20      	cmp	r3, #32
 800385c:	d1c8      	bne.n	80037f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d068      	beq.n	8003966 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2210      	movs	r2, #16
 800389a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800389c:	e049      	b.n	8003932 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a4:	d045      	beq.n	8003932 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038a6:	f7fe fa0f 	bl	8001cc8 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d302      	bcc.n	80038bc <I2C_IsErrorOccurred+0x54>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d13a      	bne.n	8003932 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038de:	d121      	bne.n	8003924 <I2C_IsErrorOccurred+0xbc>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e6:	d01d      	beq.n	8003924 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d01a      	beq.n	8003924 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038fe:	f7fe f9e3 	bl	8001cc8 <HAL_GetTick>
 8003902:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003904:	e00e      	b.n	8003924 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003906:	f7fe f9df 	bl	8001cc8 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b19      	cmp	r3, #25
 8003912:	d907      	bls.n	8003924 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003922:	e006      	b.n	8003932 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f003 0320 	and.w	r3, r3, #32
 800392e:	2b20      	cmp	r3, #32
 8003930:	d1e9      	bne.n	8003906 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b20      	cmp	r3, #32
 800393e:	d003      	beq.n	8003948 <I2C_IsErrorOccurred+0xe0>
 8003940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0aa      	beq.n	800389e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800394c:	2b00      	cmp	r3, #0
 800394e:	d103      	bne.n	8003958 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2220      	movs	r2, #32
 8003956:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f043 0304 	orr.w	r3, r3, #4
 800395e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003974:	2b00      	cmp	r3, #0
 8003976:	d00b      	beq.n	8003990 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003978:	6a3b      	ldr	r3, [r7, #32]
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00b      	beq.n	80039b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	f043 0308 	orr.w	r3, r3, #8
 80039a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00b      	beq.n	80039d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	f043 0302 	orr.w	r3, r3, #2
 80039c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80039d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01c      	beq.n	8003a16 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff fe1e 	bl	800361e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <I2C_IsErrorOccurred+0x1bc>)
 80039ee:	400b      	ands	r3, r1
 80039f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3728      	adds	r7, #40	@ 0x28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	fe00e800 	.word	0xfe00e800

08003a28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	817b      	strh	r3, [r7, #10]
 8003a36:	4613      	mov	r3, r2
 8003a38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a3a:	897b      	ldrh	r3, [r7, #10]
 8003a3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a40:	7a7b      	ldrb	r3, [r7, #9]
 8003a42:	041b      	lsls	r3, r3, #16
 8003a44:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a48:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a56:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	0d5b      	lsrs	r3, r3, #21
 8003a62:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003a66:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <I2C_TransferConfig+0x60>)
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	ea02 0103 	and.w	r1, r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a7a:	bf00      	nop
 8003a7c:	371c      	adds	r7, #28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	03ff63ff 	.word	0x03ff63ff

08003a8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003a9c:	887b      	ldrh	r3, [r7, #2]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00f      	beq.n	8003ac6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003aac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003aba:	2b28      	cmp	r3, #40	@ 0x28
 8003abc:	d003      	beq.n	8003ac6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003ac4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00f      	beq.n	8003af0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003ad6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ae4:	2b28      	cmp	r3, #40	@ 0x28
 8003ae6:	d003      	beq.n	8003af0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003aee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003af0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da03      	bge.n	8003b00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003afe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d103      	bne.n	8003b0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b0e:	887b      	ldrh	r3, [r7, #2]
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d103      	bne.n	8003b1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f043 0320 	orr.w	r3, r3, #32
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	2b40      	cmp	r3, #64	@ 0x40
 8003b20:	d103      	bne.n	8003b2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	43da      	mvns	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	400a      	ands	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3714      	adds	r7, #20
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d138      	bne.n	8003bd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e032      	b.n	8003bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2224      	movs	r2, #36	@ 0x24
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0201 	bic.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003b9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6819      	ldr	r1, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e000      	b.n	8003bd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
  }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b085      	sub	sp, #20
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	d139      	bne.n	8003c68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d101      	bne.n	8003c02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bfe:	2302      	movs	r3, #2
 8003c00:	e033      	b.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2224      	movs	r2, #36	@ 0x24
 8003c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0201 	bic.w	r2, r2, #1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	e000      	b.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c68:	2302      	movs	r3, #2
  }
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c7c:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a04      	ldr	r2, [pc, #16]	@ (8003c94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c86:	6013      	str	r3, [r2, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	58000400 	.word	0x58000400

08003c98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003c9c:	4b04      	ldr	r3, [pc, #16]	@ (8003cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	58000400 	.word	0x58000400

08003cb4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cc6:	d101      	bne.n	8003ccc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003cdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d08:	6013      	str	r3, [r2, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003d18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d26:	d101      	bne.n	8003d2c <LL_RCC_HSE_IsReady+0x18>
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <LL_RCC_HSE_IsReady+0x1a>
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d4a:	6013      	str	r3, [r2, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d68:	6013      	str	r3, [r2, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d86:	d101      	bne.n	8003d8c <LL_RCC_HSI_IsReady+0x18>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <LL_RCC_HSI_IsReady+0x1a>
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	061b      	lsls	r3, r3, #24
 8003dae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003db2:	4313      	orrs	r3, r2
 8003db4:	604b      	str	r3, [r1, #4]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003dda:	bf00      	nop
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003dfc:	bf00      	nop
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8003e06:	b480      	push	{r7}
 8003e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d101      	bne.n	8003e1e <LL_RCC_HSI48_IsReady+0x18>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <LL_RCC_HSI48_IsReady+0x1a>
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e42:	bf00      	nop
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e86:	bf00      	nop
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d101      	bne.n	8003eca <LL_RCC_LSE_IsReady+0x18>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <LL_RCC_LSE_IsReady+0x1a>
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f08:	f023 0301 	bic.w	r3, r3, #1
 8003f0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d101      	bne.n	8003f32 <LL_RCC_LSI1_IsReady+0x18>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_RCC_LSI1_IsReady+0x1a>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003f3e:	b480      	push	{r7}
 8003f40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f4e:	f043 0304 	orr.w	r3, r3, #4
 8003f52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f56:	bf00      	nop
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003f82:	b480      	push	{r7}
 8003f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b08      	cmp	r3, #8
 8003f94:	d101      	bne.n	8003f9a <LL_RCC_LSI2_IsReady+0x18>
 8003f96:	2301      	movs	r3, #1
 8003f98:	e000      	b.n	8003f9c <LL_RCC_LSI2_IsReady+0x1a>
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b083      	sub	sp, #12
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6013      	str	r3, [r2, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003ff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	6013      	str	r3, [r2, #0]
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d101      	bne.n	8004026 <LL_RCC_MSI_IsReady+0x16>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <LL_RCC_MSI_IsReady+0x18>
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800403a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004044:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800406a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004070:	d901      	bls.n	8004076 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8004072:	23b0      	movs	r3, #176	@ 0xb0
 8004074:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8004076:	687b      	ldr	r3, [r7, #4]
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800408c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800409e:	4313      	orrs	r3, r2
 80040a0:	604b      	str	r3, [r1, #4]
}
 80040a2:	bf00      	nop
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f023 0203 	bic.w	r2, r3, #3
 80040c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	608b      	str	r3, [r1, #8]
}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f003 030c 	and.w	r3, r3, #12
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80040f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004100:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004122:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004126:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800412a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800414e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004152:	f023 020f 	bic.w	r2, r3, #15
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004182:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80041c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80041f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004202:	4618      	mov	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800421a:	4618      	mov	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004236:	6013      	str	r3, [r2, #0]
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004242:	b480      	push	{r7}
 8004244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004250:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004254:	6013      	str	r3, [r2, #0]
}
 8004256:	bf00      	nop
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004272:	d101      	bne.n	8004278 <LL_RCC_PLL_IsReady+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_RCC_PLL_IsReady+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004294:	4618      	mov	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800429e:	b480      	push	{r7}
 80042a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80042a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80042ce:	b480      	push	{r7}
 80042d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f003 0303 	and.w	r3, r3, #3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042f8:	d101      	bne.n	80042fe <LL_RCC_IsActiveFlag_HPRE+0x18>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004312:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800431e:	d101      	bne.n	8004324 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004338:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800433c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d101      	bne.n	800434a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004356:	b480      	push	{r7}
 8004358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800435a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004364:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004368:	d101      	bne.n	800436e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004388:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800438c:	d101      	bne.n	8004392 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800438e:	2301      	movs	r3, #1
 8004390:	e000      	b.n	8004394 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b08d      	sub	sp, #52	@ 0x34
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e363      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 808d 	beq.w	80044da <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c0:	f7ff fe89 	bl	80040d6 <LL_RCC_GetSysClkSource>
 80043c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043c6:	f7ff ff82 	bl	80042ce <LL_RCC_PLL_GetMainSource>
 80043ca:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d005      	beq.n	80043de <HAL_RCC_OscConfig+0x3e>
 80043d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d4:	2b0c      	cmp	r3, #12
 80043d6:	d147      	bne.n	8004468 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d144      	bne.n	8004468 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e347      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80043ee:	f7ff fe34 	bl	800405a <LL_RCC_MSI_GetRange>
 80043f2:	4603      	mov	r3, r0
 80043f4:	429c      	cmp	r4, r3
 80043f6:	d914      	bls.n	8004422 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fd31 	bl	8004e64 <RCC_SetFlashLatencyFromMSIRange>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e336      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fe0e 	bl	8004032 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fe32 	bl	8004084 <LL_RCC_MSI_SetCalibTrimming>
 8004420:	e013      	b.n	800444a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fe03 	bl	8004032 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fe27 	bl	8004084 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fd12 	bl	8004e64 <RCC_SetFlashLatencyFromMSIRange>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e317      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800444a:	f000 fccb 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 800444e:	4603      	mov	r3, r0
 8004450:	4aa4      	ldr	r2, [pc, #656]	@ (80046e4 <HAL_RCC_OscConfig+0x344>)
 8004452:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004454:	4ba4      	ldr	r3, [pc, #656]	@ (80046e8 <HAL_RCC_OscConfig+0x348>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fd fbe7 	bl	8001c2c <HAL_InitTick>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d039      	beq.n	80044d8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e308      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d01e      	beq.n	80044ae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004470:	f7ff fdb0 	bl	8003fd4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004474:	f7fd fc28 	bl	8001cc8 <HAL_GetTick>
 8004478:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800447c:	f7fd fc24 	bl	8001cc8 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e2f5      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800448e:	f7ff fdbf 	bl	8004010 <LL_RCC_MSI_IsReady>
 8004492:	4603      	mov	r3, r0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f1      	beq.n	800447c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fdc8 	bl	8004032 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fdec 	bl	8004084 <LL_RCC_MSI_SetCalibTrimming>
 80044ac:	e015      	b.n	80044da <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044ae:	f7ff fda0 	bl	8003ff2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044b2:	f7fd fc09 	bl	8001cc8 <HAL_GetTick>
 80044b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044ba:	f7fd fc05 	bl	8001cc8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e2d6      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80044cc:	f7ff fda0 	bl	8004010 <LL_RCC_MSI_IsReady>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1f1      	bne.n	80044ba <HAL_RCC_OscConfig+0x11a>
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80044d8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d047      	beq.n	8004576 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044e6:	f7ff fdf6 	bl	80040d6 <LL_RCC_GetSysClkSource>
 80044ea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ec:	f7ff feef 	bl	80042ce <LL_RCC_PLL_GetMainSource>
 80044f0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_OscConfig+0x164>
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	2b0c      	cmp	r3, #12
 80044fc:	d108      	bne.n	8004510 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d134      	bne.n	8004576 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e2b4      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d102      	bne.n	8004520 <HAL_RCC_OscConfig+0x180>
 800451a:	f7ff fbdd 	bl	8003cd8 <LL_RCC_HSE_Enable>
 800451e:	e001      	b.n	8004524 <HAL_RCC_OscConfig+0x184>
 8004520:	f7ff fbe9 	bl	8003cf6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d012      	beq.n	8004552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fd fbcc 	bl	8001cc8 <HAL_GetTick>
 8004530:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fd fbc8 	bl	8001cc8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	@ 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e299      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004546:	f7ff fbe5 	bl	8003d14 <LL_RCC_HSE_IsReady>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f1      	beq.n	8004534 <HAL_RCC_OscConfig+0x194>
 8004550:	e011      	b.n	8004576 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004552:	f7fd fbb9 	bl	8001cc8 <HAL_GetTick>
 8004556:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004558:	e008      	b.n	800456c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800455a:	f7fd fbb5 	bl	8001cc8 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	@ 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e286      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800456c:	f7ff fbd2 	bl	8003d14 <LL_RCC_HSE_IsReady>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f1      	bne.n	800455a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d04c      	beq.n	800461c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004582:	f7ff fda8 	bl	80040d6 <LL_RCC_GetSysClkSource>
 8004586:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004588:	f7ff fea1 	bl	80042ce <LL_RCC_PLL_GetMainSource>
 800458c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_OscConfig+0x200>
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	2b0c      	cmp	r3, #12
 8004598:	d10e      	bne.n	80045b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d10b      	bne.n	80045b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e266      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7ff fbf1 	bl	8003d98 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80045b6:	e031      	b.n	800461c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d019      	beq.n	80045f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045c0:	f7ff fbba 	bl	8003d38 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c4:	f7fd fb80 	bl	8001cc8 <HAL_GetTick>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045cc:	f7fd fb7c 	bl	8001cc8 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e24d      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80045de:	f7ff fbc9 	bl	8003d74 <LL_RCC_HSI_IsReady>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f1      	beq.n	80045cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fbd3 	bl	8003d98 <LL_RCC_HSI_SetCalibTrimming>
 80045f2:	e013      	b.n	800461c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f4:	f7ff fbaf 	bl	8003d56 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fd fb66 	bl	8001cc8 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004600:	f7fd fb62 	bl	8001cc8 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e233      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004612:	f7ff fbaf 	bl	8003d74 <LL_RCC_HSI_IsReady>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a3 	beq.w	800477c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d076      	beq.n	800472c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d046      	beq.n	80046d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800464a:	f7ff fc66 	bl	8003f1a <LL_RCC_LSI1_IsReady>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d113      	bne.n	800467c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004654:	f7ff fc3f 	bl	8003ed6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004658:	f7fd fb36 	bl	8001cc8 <HAL_GetTick>
 800465c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004660:	f7fd fb32 	bl	8001cc8 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e203      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004672:	f7ff fc52 	bl	8003f1a <LL_RCC_LSI1_IsReady>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f1      	beq.n	8004660 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800467c:	f7ff fc5f 	bl	8003f3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd fb22 	bl	8001cc8 <HAL_GetTick>
 8004684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004688:	f7fd fb1e 	bl	8001cc8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b03      	cmp	r3, #3
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1ef      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800469a:	f7ff fc72 	bl	8003f82 <LL_RCC_LSI2_IsReady>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0f1      	beq.n	8004688 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fc7c 	bl	8003fa6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80046ae:	f7ff fc23 	bl	8003ef8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd fb09 	bl	8001cc8 <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ba:	f7fd fb05 	bl	8001cc8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e1d6      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80046cc:	f7ff fc25 	bl	8003f1a <LL_RCC_LSI1_IsReady>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f1      	bne.n	80046ba <HAL_RCC_OscConfig+0x31a>
 80046d6:	e051      	b.n	800477c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80046d8:	f7ff fbfd 	bl	8003ed6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd faf4 	bl	8001cc8 <HAL_GetTick>
 80046e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80046e2:	e00c      	b.n	80046fe <HAL_RCC_OscConfig+0x35e>
 80046e4:	20000008 	.word	0x20000008
 80046e8:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80046ec:	f7fd faec 	bl	8001cc8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e1bd      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80046fe:	f7ff fc0c 	bl	8003f1a <LL_RCC_LSI1_IsReady>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f1      	beq.n	80046ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004708:	f7ff fc2a 	bl	8003f60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800470e:	f7fd fadb 	bl	8001cc8 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b03      	cmp	r3, #3
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1ac      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004720:	f7ff fc2f 	bl	8003f82 <LL_RCC_LSI2_IsReady>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f1      	bne.n	800470e <HAL_RCC_OscConfig+0x36e>
 800472a:	e027      	b.n	800477c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800472c:	f7ff fc18 	bl	8003f60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004730:	f7fd faca 	bl	8001cc8 <HAL_GetTick>
 8004734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004738:	f7fd fac6 	bl	8001cc8 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b03      	cmp	r3, #3
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e197      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800474a:	f7ff fc1a 	bl	8003f82 <LL_RCC_LSI2_IsReady>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1f1      	bne.n	8004738 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004754:	f7ff fbd0 	bl	8003ef8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd fab6 	bl	8001cc8 <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004760:	f7fd fab2 	bl	8001cc8 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e183      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004772:	f7ff fbd2 	bl	8003f1a <LL_RCC_LSI1_IsReady>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f1      	bne.n	8004760 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d05b      	beq.n	8004840 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004788:	4ba7      	ldr	r3, [pc, #668]	@ (8004a28 <HAL_RCC_OscConfig+0x688>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d114      	bne.n	80047be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004794:	f7ff fa70 	bl	8003c78 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004798:	f7fd fa96 	bl	8001cc8 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a0:	f7fd fa92 	bl	8001cc8 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e163      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b2:	4b9d      	ldr	r3, [pc, #628]	@ (8004a28 <HAL_RCC_OscConfig+0x688>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0f0      	beq.n	80047a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d102      	bne.n	80047cc <HAL_RCC_OscConfig+0x42c>
 80047c6:	f7ff fb30 	bl	8003e2a <LL_RCC_LSE_Enable>
 80047ca:	e00c      	b.n	80047e6 <HAL_RCC_OscConfig+0x446>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d104      	bne.n	80047de <HAL_RCC_OscConfig+0x43e>
 80047d4:	f7ff fb4b 	bl	8003e6e <LL_RCC_LSE_EnableBypass>
 80047d8:	f7ff fb27 	bl	8003e2a <LL_RCC_LSE_Enable>
 80047dc:	e003      	b.n	80047e6 <HAL_RCC_OscConfig+0x446>
 80047de:	f7ff fb35 	bl	8003e4c <LL_RCC_LSE_Disable>
 80047e2:	f7ff fb55 	bl	8003e90 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d014      	beq.n	8004818 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ee:	f7fd fa6b 	bl	8001cc8 <HAL_GetTick>
 80047f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80047f4:	e00a      	b.n	800480c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f6:	f7fd fa67 	bl	8001cc8 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e136      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800480c:	f7ff fb51 	bl	8003eb2 <LL_RCC_LSE_IsReady>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0ef      	beq.n	80047f6 <HAL_RCC_OscConfig+0x456>
 8004816:	e013      	b.n	8004840 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fd fa56 	bl	8001cc8 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800481e:	e00a      	b.n	8004836 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004820:	f7fd fa52 	bl	8001cc8 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e121      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004836:	f7ff fb3c 	bl	8003eb2 <LL_RCC_LSE_IsReady>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ef      	bne.n	8004820 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d02c      	beq.n	80048a6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004850:	2b00      	cmp	r3, #0
 8004852:	d014      	beq.n	800487e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004854:	f7ff fab5 	bl	8003dc2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd fa36 	bl	8001cc8 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004860:	f7fd fa32 	bl	8001cc8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e103      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004872:	f7ff fac8 	bl	8003e06 <LL_RCC_HSI48_IsReady>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f1      	beq.n	8004860 <HAL_RCC_OscConfig+0x4c0>
 800487c:	e013      	b.n	80048a6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800487e:	f7ff fab1 	bl	8003de4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004882:	f7fd fa21 	bl	8001cc8 <HAL_GetTick>
 8004886:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800488a:	f7fd fa1d 	bl	8001cc8 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0ee      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800489c:	f7ff fab3 	bl	8003e06 <LL_RCC_HSI48_IsReady>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f1      	bne.n	800488a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 80e4 	beq.w	8004a78 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048b0:	f7ff fc11 	bl	80040d6 <LL_RCC_GetSysClkSource>
 80048b4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	f040 80b4 	bne.w	8004a30 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 0203 	and.w	r2, r3, #3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d123      	bne.n	800491e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d11c      	bne.n	800491e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d114      	bne.n	800491e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d10d      	bne.n	800491e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800490c:	429a      	cmp	r2, r3
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800491a:	429a      	cmp	r2, r3
 800491c:	d05d      	beq.n	80049da <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d058      	beq.n	80049d6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0a1      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004936:	f7ff fc84 	bl	8004242 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800493a:	f7fd f9c5 	bl	8001cc8 <HAL_GetTick>
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004940:	e008      	b.n	8004954 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004942:	f7fd f9c1 	bl	8001cc8 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	d901      	bls.n	8004954 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e092      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1ef      	bne.n	8004942 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004966:	68da      	ldr	r2, [r3, #12]
 8004968:	4b30      	ldr	r3, [pc, #192]	@ (8004a2c <HAL_RCC_OscConfig+0x68c>)
 800496a:	4013      	ands	r3, r2
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004974:	4311      	orrs	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800497a:	0212      	lsls	r2, r2, #8
 800497c:	4311      	orrs	r1, r2
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004988:	4311      	orrs	r1, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800498e:	430a      	orrs	r2, r1
 8004990:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004994:	4313      	orrs	r3, r2
 8004996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004998:	f7ff fc44 	bl	8004224 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ac:	f7fd f98c 	bl	8001cc8 <HAL_GetTick>
 80049b0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b4:	f7fd f988 	bl	8001cc8 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e059      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0ef      	beq.n	80049b4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d4:	e050      	b.n	8004a78 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e04f      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d147      	bne.n	8004a78 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e8:	f7ff fc1c 	bl	8004224 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049fc:	f7fd f964 	bl	8001cc8 <HAL_GetTick>
 8004a00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a04:	f7fd f960 	bl	8001cc8 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e031      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0ef      	beq.n	8004a04 <HAL_RCC_OscConfig+0x664>
 8004a24:	e028      	b.n	8004a78 <HAL_RCC_OscConfig+0x6d8>
 8004a26:	bf00      	nop
 8004a28:	58000400 	.word	0x58000400
 8004a2c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d01e      	beq.n	8004a74 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a36:	f7ff fc04 	bl	8004242 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3a:	f7fd f945 	bl	8001cc8 <HAL_GetTick>
 8004a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a40:	e008      	b.n	8004a54 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a42:	f7fd f941 	bl	8001cc8 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e012      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1ef      	bne.n	8004a42 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <HAL_RCC_OscConfig+0x6e4>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
 8004a72:	e001      	b.n	8004a78 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3734      	adds	r7, #52	@ 0x34
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}
 8004a82:	bf00      	nop
 8004a84:	eefefffc 	.word	0xeefefffc

08004a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e12d      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b98      	ldr	r3, [pc, #608]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d91b      	bls.n	8004ae2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b95      	ldr	r3, [pc, #596]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 0207 	bic.w	r2, r3, #7
 8004ab2:	4993      	ldr	r1, [pc, #588]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aba:	f7fd f905 	bl	8001cc8 <HAL_GetTick>
 8004abe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ac2:	f7fd f901 	bl	8001cc8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e111      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad4:	4b8a      	ldr	r3, [pc, #552]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d1ef      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fafb 	bl	80040ee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004af8:	f7fd f8e6 	bl	8001cc8 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b00:	f7fd f8e2 	bl	8001cc8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0f2      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004b12:	f7ff fbe8 	bl	80042e6 <LL_RCC_IsActiveFlag_HPRE>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d0f1      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d016      	beq.n	8004b56 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff faf2 	bl	8004116 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b32:	f7fd f8c9 	bl	8001cc8 <HAL_GetTick>
 8004b36:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b38:	e008      	b.n	8004b4c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b3a:	f7fd f8c5 	bl	8001cc8 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d901      	bls.n	8004b4c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e0d5      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004b4c:	f7ff fbdd 	bl	800430a <LL_RCC_IsActiveFlag_C2HPRE>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f1      	beq.n	8004b3a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d016      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff faeb 	bl	8004142 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b6c:	f7fd f8ac 	bl	8001cc8 <HAL_GetTick>
 8004b70:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b74:	f7fd f8a8 	bl	8001cc8 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0b8      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004b86:	f7ff fbd3 	bl	8004330 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f1      	beq.n	8004b74 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d016      	beq.n	8004bca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fae5 	bl	8004170 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ba6:	f7fd f88f 	bl	8001cc8 <HAL_GetTick>
 8004baa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bae:	f7fd f88b 	bl	8001cc8 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e09b      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004bc0:	f7ff fbc9 	bl	8004356 <LL_RCC_IsActiveFlag_PPRE1>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f1      	beq.n	8004bae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d017      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f7ff fadb 	bl	8004198 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004be2:	f7fd f871 	bl	8001cc8 <HAL_GetTick>
 8004be6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004bea:	f7fd f86d 	bl	8001cc8 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e07d      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004bfc:	f7ff fbbd 	bl	800437a <LL_RCC_IsActiveFlag_PPRE2>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f1      	beq.n	8004bea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d043      	beq.n	8004c9a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d106      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004c1a:	f7ff f87b 	bl	8003d14 <LL_RCC_HSE_IsReady>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d11e      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e067      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004c30:	f7ff fb16 	bl	8004260 <LL_RCC_PLL_IsReady>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d113      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e05c      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d106      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004c46:	f7ff f9e3 	bl	8004010 <LL_RCC_MSI_IsReady>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d108      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e051      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004c54:	f7ff f88e 	bl	8003d74 <LL_RCC_HSI_IsReady>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e04a      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fa21 	bl	80040ae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6c:	f7fd f82c 	bl	8001cc8 <HAL_GetTick>
 8004c70:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c72:	e00a      	b.n	8004c8a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c74:	f7fd f828 	bl	8001cc8 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e036      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	f7ff fa24 	bl	80040d6 <LL_RCC_GetSysClkSource>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d1ec      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9a:	4b19      	ldr	r3, [pc, #100]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d21b      	bcs.n	8004ce0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca8:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f023 0207 	bic.w	r2, r3, #7
 8004cb0:	4913      	ldr	r1, [pc, #76]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb8:	f7fd f806 	bl	8001cc8 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cc0:	f7fd f802 	bl	8001cc8 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e012      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <HAL_RCC_ClockConfig+0x278>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d1ef      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ce0:	f000 f880 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a07      	ldr	r2, [pc, #28]	@ (8004d04 <HAL_RCC_ClockConfig+0x27c>)
 8004ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004cea:	f7fc fff9 	bl	8001ce0 <HAL_GetTickPrio>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc ff9b 	bl	8001c2c <HAL_InitTick>
 8004cf6:	4603      	mov	r3, r0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	58004000 	.word	0x58004000
 8004d04:	20000008 	.word	0x20000008

08004d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0e:	f7ff f9e2 	bl	80040d6 <LL_RCC_GetSysClkSource>
 8004d12:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d1a:	f7ff f99e 	bl	800405a <LL_RCC_MSI_GetRange>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e04b      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d36:	4b28      	ldr	r3, [pc, #160]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	e045      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d10a      	bne.n	8004d58 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d42:	f7fe ffb7 	bl	8003cb4 <LL_RCC_HSE_IsEnabledDiv2>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d102      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004d4c:	4b23      	ldr	r3, [pc, #140]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e03a      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004d52:	4b23      	ldr	r3, [pc, #140]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	e037      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004d58:	f7ff fab9 	bl	80042ce <LL_RCC_PLL_GetMainSource>
 8004d5c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d003      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x64>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	2b03      	cmp	r3, #3
 8004d68:	d003      	beq.n	8004d72 <HAL_RCC_GetSysClockFreq+0x6a>
 8004d6a:	e00d      	b.n	8004d88 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004d6e:	60bb      	str	r3, [r7, #8]
        break;
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004d72:	f7fe ff9f 	bl	8003cb4 <LL_RCC_HSE_IsEnabledDiv2>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004d7c:	4b17      	ldr	r3, [pc, #92]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004d7e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004d80:	e00d      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004d82:	4b17      	ldr	r3, [pc, #92]	@ (8004de0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004d84:	60bb      	str	r3, [r7, #8]
        break;
 8004d86:	e00a      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004d88:	f7ff f967 	bl	800405a <LL_RCC_MSI_GetRange>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9a:	60bb      	str	r3, [r7, #8]
        break;
 8004d9c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004d9e:	f7ff fa71 	bl	8004284 <LL_RCC_PLL_GetN>
 8004da2:	4602      	mov	r2, r0
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	fb03 f402 	mul.w	r4, r3, r2
 8004daa:	f7ff fa84 	bl	80042b6 <LL_RCC_PLL_GetDivider>
 8004dae:	4603      	mov	r3, r0
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	3301      	adds	r3, #1
 8004db4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004db8:	f7ff fa71 	bl	800429e <LL_RCC_PLL_GetR>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	0f5b      	lsrs	r3, r3, #29
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004dc6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	0800a9d8 	.word	0x0800a9d8
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	003d0900 	.word	0x003d0900
 8004de0:	007a1200 	.word	0x007a1200

08004de4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de4:	b598      	push	{r3, r4, r7, lr}
 8004de6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004de8:	f7ff ff8e 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 8004dec:	4604      	mov	r4, r0
 8004dee:	f7ff f9e7 	bl	80041c0 <LL_RCC_GetAHBPrescaler>
 8004df2:	4603      	mov	r3, r0
 8004df4:	091b      	lsrs	r3, r3, #4
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	4a03      	ldr	r2, [pc, #12]	@ (8004e08 <HAL_RCC_GetHCLKFreq+0x24>)
 8004dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	bd98      	pop	{r3, r4, r7, pc}
 8004e08:	0800a978 	.word	0x0800a978

08004e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e0c:	b598      	push	{r3, r4, r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e10:	f7ff ffe8 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e14:	4604      	mov	r4, r0
 8004e16:	f7ff f9ed 	bl	80041f4 <LL_RCC_GetAPB1Prescaler>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	0a1b      	lsrs	r3, r3, #8
 8004e1e:	f003 0307 	and.w	r3, r3, #7
 8004e22:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e28:	f003 031f 	and.w	r3, r3, #31
 8004e2c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	bd98      	pop	{r3, r4, r7, pc}
 8004e34:	0800a9b8 	.word	0x0800a9b8

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b598      	push	{r3, r4, r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004e3c:	f7ff ffd2 	bl	8004de4 <HAL_RCC_GetHCLKFreq>
 8004e40:	4604      	mov	r4, r0
 8004e42:	f7ff f9e3 	bl	800420c <LL_RCC_GetAPB2Prescaler>
 8004e46:	4603      	mov	r3, r0
 8004e48:	0adb      	lsrs	r3, r3, #11
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	4a04      	ldr	r2, [pc, #16]	@ (8004e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	bd98      	pop	{r3, r4, r7, pc}
 8004e60:	0800a9b8 	.word	0x0800a9b8

08004e64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004e64:	b590      	push	{r4, r7, lr}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2bb0      	cmp	r3, #176	@ 0xb0
 8004e70:	d903      	bls.n	8004e7a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004e72:	4b15      	ldr	r3, [pc, #84]	@ (8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e007      	b.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	4a11      	ldr	r2, [pc, #68]	@ (8004ec8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e88:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004e8a:	f7ff f9a5 	bl	80041d8 <LL_RCC_GetAHB4Prescaler>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	091b      	lsrs	r3, r3, #4
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ecc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8004eac:	0c9c      	lsrs	r4, r3, #18
 8004eae:	f7fe fef3 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	f000 f80c 	bl	8004ed4 <RCC_SetFlashLatency>
 8004ebc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd90      	pop	{r4, r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	0800a9d8 	.word	0x0800a9d8
 8004ecc:	0800a978 	.word	0x0800a978
 8004ed0:	431bde83 	.word	0x431bde83

08004ed4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004ed4:	b590      	push	{r4, r7, lr}
 8004ed6:	b093      	sub	sp, #76	@ 0x4c
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004ede:	4b37      	ldr	r3, [pc, #220]	@ (8004fbc <RCC_SetFlashLatency+0xe8>)
 8004ee0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8004ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ee6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004eea:	4a35      	ldr	r2, [pc, #212]	@ (8004fc0 <RCC_SetFlashLatency+0xec>)
 8004eec:	f107 031c 	add.w	r3, r7, #28
 8004ef0:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ef2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004ef6:	4b33      	ldr	r3, [pc, #204]	@ (8004fc4 <RCC_SetFlashLatency+0xf0>)
 8004ef8:	f107 040c 	add.w	r4, r7, #12
 8004efc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004efe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004f02:	2300      	movs	r3, #0
 8004f04:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f0c:	d11a      	bne.n	8004f44 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f0e:	2300      	movs	r3, #0
 8004f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f12:	e013      	b.n	8004f3c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004f14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	3348      	adds	r3, #72	@ 0x48
 8004f1a:	443b      	add	r3, r7
 8004f1c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d807      	bhi.n	8004f36 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	3348      	adds	r3, #72	@ 0x48
 8004f2c:	443b      	add	r3, r7
 8004f2e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f34:	e020      	b.n	8004f78 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f38:	3301      	adds	r3, #1
 8004f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d9e8      	bls.n	8004f14 <RCC_SetFlashLatency+0x40>
 8004f42:	e019      	b.n	8004f78 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f44:	2300      	movs	r3, #0
 8004f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f48:	e013      	b.n	8004f72 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	3348      	adds	r3, #72	@ 0x48
 8004f50:	443b      	add	r3, r7
 8004f52:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d807      	bhi.n	8004f6c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	3348      	adds	r3, #72	@ 0x48
 8004f62:	443b      	add	r3, r7
 8004f64:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004f68:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004f6a:	e005      	b.n	8004f78 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d9e8      	bls.n	8004f4a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004f78:	4b13      	ldr	r3, [pc, #76]	@ (8004fc8 <RCC_SetFlashLatency+0xf4>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f023 0207 	bic.w	r2, r3, #7
 8004f80:	4911      	ldr	r1, [pc, #68]	@ (8004fc8 <RCC_SetFlashLatency+0xf4>)
 8004f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f84:	4313      	orrs	r3, r2
 8004f86:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f88:	f7fc fe9e 	bl	8001cc8 <HAL_GetTick>
 8004f8c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004f8e:	e008      	b.n	8004fa2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004f90:	f7fc fe9a 	bl	8001cc8 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d901      	bls.n	8004fa2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e007      	b.n	8004fb2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <RCC_SetFlashLatency+0xf4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d1ef      	bne.n	8004f90 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	374c      	adds	r7, #76	@ 0x4c
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	0800a94c 	.word	0x0800a94c
 8004fc0:	0800a95c 	.word	0x0800a95c
 8004fc4:	0800a968 	.word	0x0800a968
 8004fc8:	58004000 	.word	0x58004000

08004fcc <LL_RCC_LSE_IsEnabled>:
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <LL_RCC_LSE_IsEnabled+0x18>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <LL_RCC_LSE_IsEnabled+0x1a>
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <LL_RCC_LSE_IsReady>:
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d101      	bne.n	8005008 <LL_RCC_LSE_IsReady+0x18>
 8005004:	2301      	movs	r3, #1
 8005006:	e000      	b.n	800500a <LL_RCC_LSE_IsReady+0x1a>
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <LL_RCC_SetRFWKPClockSource>:
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800501c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005024:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <LL_RCC_SetSMPSClockSource>:
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	f023 0203 	bic.w	r2, r3, #3
 8005052:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4313      	orrs	r3, r2
 800505a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_SetSMPSPrescaler>:
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005076:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800507a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4313      	orrs	r3, r2
 8005082:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <LL_RCC_SetUSARTClockSource>:
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f023 0203 	bic.w	r2, r3, #3
 80050a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <LL_RCC_SetLPUARTClockSource>:
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80050c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_RCC_SetI2CClockSource>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	091b      	lsrs	r3, r3, #4
 80050fc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005100:	43db      	mvns	r3, r3
 8005102:	401a      	ands	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	011b      	lsls	r3, r3, #4
 8005108:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800510c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <LL_RCC_SetLPTIMClockSource>:
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800512a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800512e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0c1b      	lsrs	r3, r3, #16
 8005136:	041b      	lsls	r3, r3, #16
 8005138:	43db      	mvns	r3, r3
 800513a:	401a      	ands	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	041b      	lsls	r3, r3, #16
 8005140:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <LL_RCC_SetSAIClockSource>:
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005166:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800516a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <LL_RCC_SetRNGClockSource>:
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800518e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005192:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4313      	orrs	r3, r2
 800519e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_RCC_SetCLK48ClockSource>:
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80051b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <LL_RCC_SetUSBClockSource>:
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff ffe3 	bl	80051ae <LL_RCC_SetCLK48ClockSource>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <LL_RCC_SetADCClockSource>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005204:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4313      	orrs	r3, r2
 800520c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <LL_RCC_SetRTCClockSource>:
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005224:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4313      	orrs	r3, r2
 8005238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <LL_RCC_GetRTCClockSource>:
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800524c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005258:	4618      	mov	r0, r3
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <LL_RCC_ForceBackupDomainReset>:
{
 8005262:	b480      	push	{r7}
 8005264:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005276:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800527a:	bf00      	nop
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800528c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005290:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800529c:	bf00      	nop
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_PLLSAI1_Enable>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052b8:	6013      	str	r3, [r2, #0]
}
 80052ba:	bf00      	nop
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <LL_RCC_PLLSAI1_Disable>:
{
 80052c4:	b480      	push	{r7}
 80052c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80052c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80052d6:	6013      	str	r3, [r2, #0]
}
 80052d8:	bf00      	nop
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <LL_RCC_PLLSAI1_IsReady>:
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80052e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80052f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052f4:	d101      	bne.n	80052fa <LL_RCC_PLLSAI1_IsReady+0x18>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e000      	b.n	80052fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b088      	sub	sp, #32
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800530e:	2300      	movs	r3, #0
 8005310:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005312:	2300      	movs	r3, #0
 8005314:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d034      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005326:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800532a:	d021      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800532c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005330:	d81b      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005332:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005336:	d01d      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005338:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800533c:	d815      	bhi.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005342:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005346:	d110      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005356:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005358:	e00d      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	3304      	adds	r3, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f000 f947 	bl	80055f2 <RCCEx_PLLSAI1_ConfigNP>
 8005364:	4603      	mov	r3, r0
 8005366:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005368:	e005      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	77fb      	strb	r3, [r7, #31]
        break;
 800536e:	e002      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005370:	bf00      	nop
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	7ffb      	ldrb	r3, [r7, #31]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fee8 	bl	8005156 <LL_RCC_SetSAIClockSource>
 8005386:	e001      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005388:	7ffb      	ldrb	r3, [r7, #31]
 800538a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005394:	2b00      	cmp	r3, #0
 8005396:	d046      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005398:	f7ff ff56 	bl	8005248 <LL_RCC_GetRTCClockSource>
 800539c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d03c      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80053a8:	f7fe fc66 	bl	8003c78 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d105      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff ff30 	bl	800521c <LL_RCC_SetRTCClockSource>
 80053bc:	e02e      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80053be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80053c8:	f7ff ff4b 	bl	8005262 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053cc:	f7ff ff5a 	bl	8005284 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053e8:	f7ff fdf0 	bl	8004fcc <LL_RCC_LSE_IsEnabled>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d114      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053f2:	f7fc fc69 	bl	8001cc8 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80053f8:	e00b      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fc fc65 	bl	8001cc8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d902      	bls.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	77fb      	strb	r3, [r7, #31]
              break;
 8005410:	e004      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005412:	f7ff fded 	bl	8004ff0 <LL_RCC_LSE_IsReady>
 8005416:	4603      	mov	r3, r0
 8005418:	2b01      	cmp	r3, #1
 800541a:	d1ee      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800541c:	7ffb      	ldrb	r3, [r7, #31]
 800541e:	77bb      	strb	r3, [r7, #30]
 8005420:	e001      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fe2a 	bl	8005090 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fe35 	bl	80050bc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0310 	and.w	r3, r3, #16
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fe5d 	bl	8005122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fe52 	bl	8005122 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fe2a 	bl	80050e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fe1f 	bl	80050e8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d022      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7ff fe8d 	bl	80051da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80054c8:	d107      	bne.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054d8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054e2:	d10b      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f8dd 	bl	80056a8 <RCCEx_PLLSAI1_ConfigNQ>
 80054ee:	4603      	mov	r3, r0
 80054f0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80054f2:	7ffb      	ldrb	r3, [r7, #31]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80054f8:	7ffb      	ldrb	r3, [r7, #31]
 80054fa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005504:	2b00      	cmp	r3, #0
 8005506:	d02b      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800550c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005510:	d008      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800551a:	d003      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005520:	2b00      	cmp	r3, #0
 8005522:	d105      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff fe2a 	bl	8005182 <LL_RCC_SetRNGClockSource>
 800552e:	e00a      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005534:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	2000      	movs	r0, #0
 800553c:	f7ff fe21 	bl	8005182 <LL_RCC_SetRNGClockSource>
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f7ff fe34 	bl	80051ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800555a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800555e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005568:	2b00      	cmp	r3, #0
 800556a:	d022      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fe3d 	bl	80051f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800557e:	d107      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800558a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800558e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005598:	d10b      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3304      	adds	r3, #4
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 f8dd 	bl	800575e <RCCEx_PLLSAI1_ConfigNR>
 80055a4:	4603      	mov	r3, r0
 80055a6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80055a8:	7ffb      	ldrb	r3, [r7, #31]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80055ae:	7ffb      	ldrb	r3, [r7, #31]
 80055b0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d004      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fd26 	bl	8005014 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d009      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff fd45 	bl	8005068 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fd2c 	bl	8005040 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80055e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80055fe:	f7ff fe61 	bl	80052c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005602:	f7fc fb61 	bl	8001cc8 <HAL_GetTick>
 8005606:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005608:	e009      	b.n	800561e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800560a:	f7fc fb5d 	bl	8001cc8 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d902      	bls.n	800561e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	73fb      	strb	r3, [r7, #15]
      break;
 800561c:	e004      	b.n	8005628 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800561e:	f7ff fe60 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f0      	bne.n	800560a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d137      	bne.n	800569e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800562e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005642:	4313      	orrs	r3, r2
 8005644:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005658:	4313      	orrs	r3, r2
 800565a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800565c:	f7ff fe23 	bl	80052a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005660:	f7fc fb32 	bl	8001cc8 <HAL_GetTick>
 8005664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005666:	e009      	b.n	800567c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005668:	f7fc fb2e 	bl	8001cc8 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d902      	bls.n	800567c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	73fb      	strb	r3, [r7, #15]
        break;
 800567a:	e004      	b.n	8005686 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800567c:	f7ff fe31 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d1f0      	bne.n	8005668 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d108      	bne.n	800569e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800568c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80056b4:	f7ff fe06 	bl	80052c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80056b8:	f7fc fb06 	bl	8001cc8 <HAL_GetTick>
 80056bc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056be:	e009      	b.n	80056d4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056c0:	f7fc fb02 	bl	8001cc8 <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d902      	bls.n	80056d4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80056ce:	2303      	movs	r3, #3
 80056d0:	73fb      	strb	r3, [r7, #15]
      break;
 80056d2:	e004      	b.n	80056de <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80056d4:	f7ff fe05 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f0      	bne.n	80056c0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d137      	bne.n	8005754 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80056e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	021b      	lsls	r3, r3, #8
 80056f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056f8:	4313      	orrs	r3, r2
 80056fa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005712:	f7ff fdc8 	bl	80052a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005716:	f7fc fad7 	bl	8001cc8 <HAL_GetTick>
 800571a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800571c:	e009      	b.n	8005732 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800571e:	f7fc fad3 	bl	8001cc8 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d902      	bls.n	8005732 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	73fb      	strb	r3, [r7, #15]
        break;
 8005730:	e004      	b.n	800573c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005732:	f7ff fdd6 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d1f0      	bne.n	800571e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d108      	bne.n	8005754 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005750:	4313      	orrs	r3, r2
 8005752:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005754:	7bfb      	ldrb	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800576a:	f7ff fdab 	bl	80052c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800576e:	f7fc faab 	bl	8001cc8 <HAL_GetTick>
 8005772:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005774:	e009      	b.n	800578a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005776:	f7fc faa7 	bl	8001cc8 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d902      	bls.n	800578a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	73fb      	strb	r3, [r7, #15]
      break;
 8005788:	e004      	b.n	8005794 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800578a:	f7ff fdaa 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1f0      	bne.n	8005776 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d137      	bne.n	800580a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800579a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	021b      	lsls	r3, r3, #8
 80057aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057ae:	4313      	orrs	r3, r2
 80057b0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057c4:	4313      	orrs	r3, r2
 80057c6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057c8:	f7ff fd6d 	bl	80052a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057cc:	f7fc fa7c 	bl	8001cc8 <HAL_GetTick>
 80057d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057d2:	e009      	b.n	80057e8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057d4:	f7fc fa78 	bl	8001cc8 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d902      	bls.n	80057e8 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	73fb      	strb	r3, [r7, #15]
        break;
 80057e6:	e004      	b.n	80057f2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057e8:	f7ff fd7b 	bl	80052e2 <LL_RCC_PLLSAI1_IsReady>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d1f0      	bne.n	80057d4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80057f2:	7bfb      	ldrb	r3, [r7, #15]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d108      	bne.n	800580a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fc:	691a      	ldr	r2, [r3, #16]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005806:	4313      	orrs	r3, r2
 8005808:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e095      	b.n	8005952 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	2b00      	cmp	r3, #0
 800582c:	d108      	bne.n	8005840 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005836:	d009      	beq.n	800584c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	61da      	str	r2, [r3, #28]
 800583e:	e005      	b.n	800584c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fb fe22 	bl	80014b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005882:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800588c:	d902      	bls.n	8005894 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	e002      	b.n	800589a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005898:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80058a2:	d007      	beq.n	80058b4 <HAL_SPI_Init+0xa0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	431a      	orrs	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	431a      	orrs	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058f6:	ea42 0103 	orr.w	r1, r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f003 0204 	and.w	r2, r3, #4
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005930:	ea42 0103 	orr.w	r1, r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b088      	sub	sp, #32
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_SPI_Transmit+0x22>
 8005978:	2302      	movs	r3, #2
 800597a:	e15f      	b.n	8005c3c <HAL_SPI_Transmit+0x2e2>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005984:	f7fc f9a0 	bl	8001cc8 <HAL_GetTick>
 8005988:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b01      	cmp	r3, #1
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800599a:	2302      	movs	r3, #2
 800599c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800599e:	e148      	b.n	8005c32 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d002      	beq.n	80059ac <HAL_SPI_Transmit+0x52>
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d102      	bne.n	80059b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059b0:	e13f      	b.n	8005c32 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059fc:	d10f      	bne.n	8005a1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d007      	beq.n	8005a3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005a44:	d94f      	bls.n	8005ae6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <HAL_SPI_Transmit+0xfa>
 8005a4e:	8afb      	ldrh	r3, [r7, #22]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d142      	bne.n	8005ada <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a58:	881a      	ldrh	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	1c9a      	adds	r2, r3, #2
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a78:	e02f      	b.n	8005ada <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d112      	bne.n	8005aae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8c:	881a      	ldrh	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a98:	1c9a      	adds	r2, r3, #2
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005aac:	e015      	b.n	8005ada <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aae:	f7fc f90b 	bl	8001cc8 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	683a      	ldr	r2, [r7, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d803      	bhi.n	8005ac6 <HAL_SPI_Transmit+0x16c>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac4:	d102      	bne.n	8005acc <HAL_SPI_Transmit+0x172>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005ad8:	e0ab      	b.n	8005c32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1ca      	bne.n	8005a7a <HAL_SPI_Transmit+0x120>
 8005ae4:	e080      	b.n	8005be8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_SPI_Transmit+0x19a>
 8005aee:	8afb      	ldrh	r3, [r7, #22]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d174      	bne.n	8005bde <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d912      	bls.n	8005b24 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b02:	881a      	ldrh	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	1c9a      	adds	r2, r3, #2
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b02      	subs	r3, #2
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b22:	e05c      	b.n	8005bde <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	7812      	ldrb	r2, [r2, #0]
 8005b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b4a:	e048      	b.n	8005bde <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d12b      	bne.n	8005bb2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d912      	bls.n	8005b8a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b02      	subs	r3, #2
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005b88:	e029      	b.n	8005bde <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bb0:	e015      	b.n	8005bde <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bb2:	f7fc f889 	bl	8001cc8 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d803      	bhi.n	8005bca <HAL_SPI_Transmit+0x270>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d102      	bne.n	8005bd0 <HAL_SPI_Transmit+0x276>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d106      	bne.n	8005bde <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005bdc:	e029      	b.n	8005c32 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1b1      	bne.n	8005b4c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005be8:	69ba      	ldr	r2, [r7, #24]
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fb69 	bl	80062c4 <SPI_EndRxTxTransaction>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10a      	bne.n	8005c1c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c06:	2300      	movs	r3, #0
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d002      	beq.n	8005c2a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e003      	b.n	8005c32 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3720      	adds	r7, #32
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	@ 0x28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c52:	2301      	movs	r3, #1
 8005c54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_SPI_TransmitReceive+0x26>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e20a      	b.n	8006080 <HAL_SPI_TransmitReceive+0x43c>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c72:	f7fc f829 	bl	8001cc8 <HAL_GetTick>
 8005c76:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c7e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c86:	887b      	ldrh	r3, [r7, #2]
 8005c88:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c8e:	7efb      	ldrb	r3, [r7, #27]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d00e      	beq.n	8005cb2 <HAL_SPI_TransmitReceive+0x6e>
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c9a:	d106      	bne.n	8005caa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d102      	bne.n	8005caa <HAL_SPI_TransmitReceive+0x66>
 8005ca4:	7efb      	ldrb	r3, [r7, #27]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d003      	beq.n	8005cb2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005caa:	2302      	movs	r3, #2
 8005cac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005cb0:	e1e0      	b.n	8006074 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d005      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x80>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x80>
 8005cbe:	887b      	ldrh	r3, [r7, #2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d103      	bne.n	8005ccc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005cca:	e1d3      	b.n	8006074 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d003      	beq.n	8005ce0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2205      	movs	r2, #5
 8005cdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	887a      	ldrh	r2, [r7, #2]
 8005cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	887a      	ldrh	r2, [r7, #2]
 8005cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	887a      	ldrh	r2, [r7, #2]
 8005d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	887a      	ldrh	r2, [r7, #2]
 8005d0c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d22:	d802      	bhi.n	8005d2a <HAL_SPI_TransmitReceive+0xe6>
 8005d24:	8a3b      	ldrh	r3, [r7, #16]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d908      	bls.n	8005d3c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	e007      	b.n	8005d4c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d007      	beq.n	8005d6a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d72:	f240 8081 	bls.w	8005e78 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x140>
 8005d7e:	8a7b      	ldrh	r3, [r7, #18]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d16d      	bne.n	8005e60 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d88:	881a      	ldrh	r2, [r3, #0]
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	3b01      	subs	r3, #1
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da8:	e05a      	b.n	8005e60 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d11b      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x1ac>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d016      	beq.n	8005df0 <HAL_SPI_TransmitReceive+0x1ac>
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d113      	bne.n	8005df0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	881a      	ldrh	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	1c9a      	adds	r2, r3, #2
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	3b01      	subs	r3, #1
 8005de6:	b29a      	uxth	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d11c      	bne.n	8005e38 <HAL_SPI_TransmitReceive+0x1f4>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e14:	b292      	uxth	r2, r2
 8005e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1c:	1c9a      	adds	r2, r3, #2
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e34:	2301      	movs	r3, #1
 8005e36:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e38:	f7fb ff46 	bl	8001cc8 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d80b      	bhi.n	8005e60 <HAL_SPI_TransmitReceive+0x21c>
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4e:	d007      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005e5e:	e109      	b.n	8006074 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d19f      	bne.n	8005daa <HAL_SPI_TransmitReceive+0x166>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d199      	bne.n	8005daa <HAL_SPI_TransmitReceive+0x166>
 8005e76:	e0e3      	b.n	8006040 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x244>
 8005e80:	8a7b      	ldrh	r3, [r7, #18]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	f040 80cf 	bne.w	8006026 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d912      	bls.n	8005eb8 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e96:	881a      	ldrh	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b02      	subs	r3, #2
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eb6:	e0b6      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	330c      	adds	r3, #12
 8005ec2:	7812      	ldrb	r2, [r2, #0]
 8005ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ede:	e0a2      	b.n	8006026 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d134      	bne.n	8005f58 <HAL_SPI_TransmitReceive+0x314>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d02f      	beq.n	8005f58 <HAL_SPI_TransmitReceive+0x314>
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d12c      	bne.n	8005f58 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d912      	bls.n	8005f2e <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	881a      	ldrh	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	1c9a      	adds	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b02      	subs	r3, #2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f2c:	e012      	b.n	8005f54 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	330c      	adds	r3, #12
 8005f38:	7812      	ldrb	r2, [r2, #0]
 8005f3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d148      	bne.n	8005ff8 <HAL_SPI_TransmitReceive+0x3b4>
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d042      	beq.n	8005ff8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d923      	bls.n	8005fc6 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f88:	b292      	uxth	r2, r2
 8005f8a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b02      	subs	r3, #2
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d81f      	bhi.n	8005ff4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685a      	ldr	r2, [r3, #4]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	e016      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f103 020c 	add.w	r2, r3, #12
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd2:	7812      	ldrb	r2, [r2, #0]
 8005fd4:	b2d2      	uxtb	r2, r2
 8005fd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	3b01      	subs	r3, #1
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ff8:	f7fb fe66 	bl	8001cc8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006004:	429a      	cmp	r2, r3
 8006006:	d803      	bhi.n	8006010 <HAL_SPI_TransmitReceive+0x3cc>
 8006008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d102      	bne.n	8006016 <HAL_SPI_TransmitReceive+0x3d2>
 8006010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006024:	e026      	b.n	8006074 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f af57 	bne.w	8005ee0 <HAL_SPI_TransmitReceive+0x29c>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	f47f af50 	bne.w	8005ee0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f93d 	bl	80062c4 <SPI_EndRxTxTransaction>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800606a:	e003      	b.n	8006074 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800607c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006080:	4618      	mov	r0, r3
 8006082:	3728      	adds	r7, #40	@ 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b088      	sub	sp, #32
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	603b      	str	r3, [r7, #0]
 8006094:	4613      	mov	r3, r2
 8006096:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006098:	f7fb fe16 	bl	8001cc8 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060a8:	f7fb fe0e 	bl	8001cc8 <HAL_GetTick>
 80060ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060ae:	4b39      	ldr	r3, [pc, #228]	@ (8006194 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	015b      	lsls	r3, r3, #5
 80060b4:	0d1b      	lsrs	r3, r3, #20
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	fb02 f303 	mul.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060be:	e054      	b.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c6:	d050      	beq.n	800616a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060c8:	f7fb fdfe 	bl	8001cc8 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d902      	bls.n	80060de <SPI_WaitFlagStateUntilTimeout+0x56>
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060f6:	d111      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006100:	d004      	beq.n	800610c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800610a:	d107      	bne.n	800611c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006124:	d10f      	bne.n	8006146 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006144:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e017      	b.n	800618a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006160:	2300      	movs	r3, #0
 8006162:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	3b01      	subs	r3, #1
 8006168:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4013      	ands	r3, r2
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	429a      	cmp	r2, r3
 8006178:	bf0c      	ite	eq
 800617a:	2301      	moveq	r3, #1
 800617c:	2300      	movne	r3, #0
 800617e:	b2db      	uxtb	r3, r3
 8006180:	461a      	mov	r2, r3
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	429a      	cmp	r2, r3
 8006186:	d19b      	bne.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3720      	adds	r7, #32
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000008 	.word	0x20000008

08006198 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	@ 0x28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80061aa:	f7fb fd8d 	bl	8001cc8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b2:	1a9b      	subs	r3, r3, r2
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	4413      	add	r3, r2
 80061b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80061ba:	f7fb fd85 	bl	8001cc8 <HAL_GetTick>
 80061be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	330c      	adds	r3, #12
 80061c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80061c8:	4b3d      	ldr	r3, [pc, #244]	@ (80062c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	00da      	lsls	r2, r3, #3
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	0d1b      	lsrs	r3, r3, #20
 80061d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061da:	fb02 f303 	mul.w	r3, r2, r3
 80061de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061e0:	e060      	b.n	80062a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80061e8:	d107      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d104      	bne.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d050      	beq.n	80062a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006202:	f7fb fd61 	bl	8001cc8 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620e:	429a      	cmp	r2, r3
 8006210:	d902      	bls.n	8006218 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d13d      	bne.n	8006294 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006226:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006230:	d111      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623a:	d004      	beq.n	8006246 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006244:	d107      	bne.n	8006256 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006254:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800625e:	d10f      	bne.n	8006280 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800626e:	601a      	str	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800627e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e010      	b.n	80062b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d101      	bne.n	800629e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	3b01      	subs	r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	689a      	ldr	r2, [r3, #8]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d196      	bne.n	80061e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3728      	adds	r7, #40	@ 0x28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000008 	.word	0x20000008

080062c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff ff5b 	bl	8006198 <SPI_WaitFifoStateUntilTimeout>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d007      	beq.n	80062f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062ec:	f043 0220 	orr.w	r2, r3, #32
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e027      	b.n	8006348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2200      	movs	r2, #0
 8006300:	2180      	movs	r1, #128	@ 0x80
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff fec0 	bl	8006088 <SPI_WaitFlagStateUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e014      	b.n	8006348 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	9300      	str	r3, [sp, #0]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2200      	movs	r2, #0
 8006326:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f7ff ff34 	bl	8006198 <SPI_WaitFifoStateUntilTimeout>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d007      	beq.n	8006346 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e000      	b.n	8006348 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <LL_RCC_GetUSARTClockSource>:
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4013      	ands	r3, r2
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <LL_RCC_GetLPUARTClockSource>:
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800637c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4013      	ands	r3, r2
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e042      	b.n	8006428 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d106      	bne.n	80063ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fb f835 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2224      	movs	r2, #36	@ 0x24
 80063be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0201 	bic.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa50 	bl	8006880 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f825 	bl	8006430 <UART_SetConfig>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e01b      	b.n	8006428 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80063fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800640e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 facf 	bl	80069c4 <UART_CheckIdleState>
 8006426:	4603      	mov	r3, r0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3708      	adds	r7, #8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006434:	b08c      	sub	sp, #48	@ 0x30
 8006436:	af00      	add	r7, sp, #0
 8006438:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800643a:	2300      	movs	r3, #0
 800643c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	431a      	orrs	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	431a      	orrs	r2, r3
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	4313      	orrs	r3, r2
 8006456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4baf      	ldr	r3, [pc, #700]	@ (800671c <UART_SetConfig+0x2ec>)
 8006460:	4013      	ands	r3, r2
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006468:	430b      	orrs	r3, r1
 800646a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4aa4      	ldr	r2, [pc, #656]	@ (8006720 <UART_SetConfig+0x2f0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006498:	4313      	orrs	r3, r2
 800649a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80064a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064b0:	430b      	orrs	r3, r1
 80064b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ba:	f023 010f 	bic.w	r1, r3, #15
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	430a      	orrs	r2, r1
 80064c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a95      	ldr	r2, [pc, #596]	@ (8006724 <UART_SetConfig+0x2f4>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d125      	bne.n	8006520 <UART_SetConfig+0xf0>
 80064d4:	2003      	movs	r0, #3
 80064d6:	f7ff ff3b 	bl	8006350 <LL_RCC_GetUSARTClockSource>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d81b      	bhi.n	8006518 <UART_SetConfig+0xe8>
 80064e0:	a201      	add	r2, pc, #4	@ (adr r2, 80064e8 <UART_SetConfig+0xb8>)
 80064e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e6:	bf00      	nop
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	08006509 	.word	0x08006509
 80064f0:	08006501 	.word	0x08006501
 80064f4:	08006511 	.word	0x08006511
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064fe:	e042      	b.n	8006586 <UART_SetConfig+0x156>
 8006500:	2302      	movs	r3, #2
 8006502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006506:	e03e      	b.n	8006586 <UART_SetConfig+0x156>
 8006508:	2304      	movs	r3, #4
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800650e:	e03a      	b.n	8006586 <UART_SetConfig+0x156>
 8006510:	2308      	movs	r3, #8
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006516:	e036      	b.n	8006586 <UART_SetConfig+0x156>
 8006518:	2310      	movs	r3, #16
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651e:	e032      	b.n	8006586 <UART_SetConfig+0x156>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7e      	ldr	r2, [pc, #504]	@ (8006720 <UART_SetConfig+0x2f0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d12a      	bne.n	8006580 <UART_SetConfig+0x150>
 800652a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800652e:	f7ff ff1f 	bl	8006370 <LL_RCC_GetLPUARTClockSource>
 8006532:	4603      	mov	r3, r0
 8006534:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006538:	d01a      	beq.n	8006570 <UART_SetConfig+0x140>
 800653a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800653e:	d81b      	bhi.n	8006578 <UART_SetConfig+0x148>
 8006540:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006544:	d00c      	beq.n	8006560 <UART_SetConfig+0x130>
 8006546:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800654a:	d815      	bhi.n	8006578 <UART_SetConfig+0x148>
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <UART_SetConfig+0x128>
 8006550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006554:	d008      	beq.n	8006568 <UART_SetConfig+0x138>
 8006556:	e00f      	b.n	8006578 <UART_SetConfig+0x148>
 8006558:	2300      	movs	r3, #0
 800655a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655e:	e012      	b.n	8006586 <UART_SetConfig+0x156>
 8006560:	2302      	movs	r3, #2
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006566:	e00e      	b.n	8006586 <UART_SetConfig+0x156>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656e:	e00a      	b.n	8006586 <UART_SetConfig+0x156>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006576:	e006      	b.n	8006586 <UART_SetConfig+0x156>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657e:	e002      	b.n	8006586 <UART_SetConfig+0x156>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a65      	ldr	r2, [pc, #404]	@ (8006720 <UART_SetConfig+0x2f0>)
 800658c:	4293      	cmp	r3, r2
 800658e:	f040 8097 	bne.w	80066c0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006592:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006596:	2b08      	cmp	r3, #8
 8006598:	d823      	bhi.n	80065e2 <UART_SetConfig+0x1b2>
 800659a:	a201      	add	r2, pc, #4	@ (adr r2, 80065a0 <UART_SetConfig+0x170>)
 800659c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a0:	080065c5 	.word	0x080065c5
 80065a4:	080065e3 	.word	0x080065e3
 80065a8:	080065cd 	.word	0x080065cd
 80065ac:	080065e3 	.word	0x080065e3
 80065b0:	080065d3 	.word	0x080065d3
 80065b4:	080065e3 	.word	0x080065e3
 80065b8:	080065e3 	.word	0x080065e3
 80065bc:	080065e3 	.word	0x080065e3
 80065c0:	080065db 	.word	0x080065db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c4:	f7fe fc22 	bl	8004e0c <HAL_RCC_GetPCLK1Freq>
 80065c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065ca:	e010      	b.n	80065ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065cc:	4b56      	ldr	r3, [pc, #344]	@ (8006728 <UART_SetConfig+0x2f8>)
 80065ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065d0:	e00d      	b.n	80065ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d2:	f7fe fb99 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 80065d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065d8:	e009      	b.n	80065ee <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e0:	e005      	b.n	80065ee <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 812b 	beq.w	800684c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	4a4c      	ldr	r2, [pc, #304]	@ (800672c <UART_SetConfig+0x2fc>)
 80065fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006600:	461a      	mov	r2, r3
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	fbb3 f3f2 	udiv	r3, r3, r2
 8006608:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4413      	add	r3, r2
 8006614:	69ba      	ldr	r2, [r7, #24]
 8006616:	429a      	cmp	r2, r3
 8006618:	d305      	bcc.n	8006626 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006620:	69ba      	ldr	r2, [r7, #24]
 8006622:	429a      	cmp	r2, r3
 8006624:	d903      	bls.n	800662e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800662c:	e10e      	b.n	800684c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006630:	2200      	movs	r2, #0
 8006632:	60bb      	str	r3, [r7, #8]
 8006634:	60fa      	str	r2, [r7, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	4a3c      	ldr	r2, [pc, #240]	@ (800672c <UART_SetConfig+0x2fc>)
 800663c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006640:	b29b      	uxth	r3, r3
 8006642:	2200      	movs	r2, #0
 8006644:	603b      	str	r3, [r7, #0]
 8006646:	607a      	str	r2, [r7, #4]
 8006648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800664c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006650:	f7fa fa82 	bl	8000b58 <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4610      	mov	r0, r2
 800665a:	4619      	mov	r1, r3
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	020b      	lsls	r3, r1, #8
 8006666:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800666a:	0202      	lsls	r2, r0, #8
 800666c:	6979      	ldr	r1, [r7, #20]
 800666e:	6849      	ldr	r1, [r1, #4]
 8006670:	0849      	lsrs	r1, r1, #1
 8006672:	2000      	movs	r0, #0
 8006674:	460c      	mov	r4, r1
 8006676:	4605      	mov	r5, r0
 8006678:	eb12 0804 	adds.w	r8, r2, r4
 800667c:	eb43 0905 	adc.w	r9, r3, r5
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	469a      	mov	sl, r3
 8006688:	4693      	mov	fp, r2
 800668a:	4652      	mov	r2, sl
 800668c:	465b      	mov	r3, fp
 800668e:	4640      	mov	r0, r8
 8006690:	4649      	mov	r1, r9
 8006692:	f7fa fa61 	bl	8000b58 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4613      	mov	r3, r2
 800669c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a4:	d308      	bcc.n	80066b8 <UART_SetConfig+0x288>
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066ac:	d204      	bcs.n	80066b8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a3a      	ldr	r2, [r7, #32]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	e0c9      	b.n	800684c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066be:	e0c5      	b.n	800684c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c8:	d16d      	bne.n	80067a6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80066ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80066ce:	3b01      	subs	r3, #1
 80066d0:	2b07      	cmp	r3, #7
 80066d2:	d82d      	bhi.n	8006730 <UART_SetConfig+0x300>
 80066d4:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <UART_SetConfig+0x2ac>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	080066fd 	.word	0x080066fd
 80066e0:	08006705 	.word	0x08006705
 80066e4:	08006731 	.word	0x08006731
 80066e8:	0800670b 	.word	0x0800670b
 80066ec:	08006731 	.word	0x08006731
 80066f0:	08006731 	.word	0x08006731
 80066f4:	08006731 	.word	0x08006731
 80066f8:	08006713 	.word	0x08006713
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066fc:	f7fe fb9c 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8006700:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006702:	e01b      	b.n	800673c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006704:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <UART_SetConfig+0x2f8>)
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006708:	e018      	b.n	800673c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800670a:	f7fe fafd 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 800670e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006710:	e014      	b.n	800673c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006712:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006718:	e010      	b.n	800673c <UART_SetConfig+0x30c>
 800671a:	bf00      	nop
 800671c:	cfff69f3 	.word	0xcfff69f3
 8006720:	40008000 	.word	0x40008000
 8006724:	40013800 	.word	0x40013800
 8006728:	00f42400 	.word	0x00f42400
 800672c:	0800aa18 	.word	0x0800aa18
      default:
        pclk = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800673a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	2b00      	cmp	r3, #0
 8006740:	f000 8084 	beq.w	800684c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006748:	4a4b      	ldr	r2, [pc, #300]	@ (8006878 <UART_SetConfig+0x448>)
 800674a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800674e:	461a      	mov	r2, r3
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	fbb3 f3f2 	udiv	r3, r3, r2
 8006756:	005a      	lsls	r2, r3, #1
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	085b      	lsrs	r3, r3, #1
 800675e:	441a      	add	r2, r3
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	2b0f      	cmp	r3, #15
 800676e:	d916      	bls.n	800679e <UART_SetConfig+0x36e>
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006776:	d212      	bcs.n	800679e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	b29b      	uxth	r3, r3
 800677c:	f023 030f 	bic.w	r3, r3, #15
 8006780:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	085b      	lsrs	r3, r3, #1
 8006786:	b29b      	uxth	r3, r3
 8006788:	f003 0307 	and.w	r3, r3, #7
 800678c:	b29a      	uxth	r2, r3
 800678e:	8bfb      	ldrh	r3, [r7, #30]
 8006790:	4313      	orrs	r3, r2
 8006792:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	8bfa      	ldrh	r2, [r7, #30]
 800679a:	60da      	str	r2, [r3, #12]
 800679c:	e056      	b.n	800684c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80067a4:	e052      	b.n	800684c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80067aa:	3b01      	subs	r3, #1
 80067ac:	2b07      	cmp	r3, #7
 80067ae:	d822      	bhi.n	80067f6 <UART_SetConfig+0x3c6>
 80067b0:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <UART_SetConfig+0x388>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067d9 	.word	0x080067d9
 80067bc:	080067e1 	.word	0x080067e1
 80067c0:	080067f7 	.word	0x080067f7
 80067c4:	080067e7 	.word	0x080067e7
 80067c8:	080067f7 	.word	0x080067f7
 80067cc:	080067f7 	.word	0x080067f7
 80067d0:	080067f7 	.word	0x080067f7
 80067d4:	080067ef 	.word	0x080067ef
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067d8:	f7fe fb2e 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 80067dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067de:	e010      	b.n	8006802 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e0:	4b26      	ldr	r3, [pc, #152]	@ (800687c <UART_SetConfig+0x44c>)
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067e4:	e00d      	b.n	8006802 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e6:	f7fe fa8f 	bl	8004d08 <HAL_RCC_GetSysClockFreq>
 80067ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80067ec:	e009      	b.n	8006802 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067f4:	e005      	b.n	8006802 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006800:	bf00      	nop
    }

    if (pclk != 0U)
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	2b00      	cmp	r3, #0
 8006806:	d021      	beq.n	800684c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	4a1a      	ldr	r2, [pc, #104]	@ (8006878 <UART_SetConfig+0x448>)
 800680e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006812:	461a      	mov	r2, r3
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	fbb3 f2f2 	udiv	r2, r3, r2
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	441a      	add	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	2b0f      	cmp	r3, #15
 8006830:	d909      	bls.n	8006846 <UART_SetConfig+0x416>
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006838:	d205      	bcs.n	8006846 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	b29a      	uxth	r2, r3
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e002      	b.n	800684c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2201      	movs	r2, #1
 8006850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	2201      	movs	r2, #1
 8006858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2200      	movs	r2, #0
 8006860:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	2200      	movs	r2, #0
 8006866:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006868:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800686c:	4618      	mov	r0, r3
 800686e:	3730      	adds	r7, #48	@ 0x30
 8006870:	46bd      	mov	sp, r7
 8006872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006876:	bf00      	nop
 8006878:	0800aa18 	.word	0x0800aa18
 800687c:	00f42400 	.word	0x00f42400

08006880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	f003 0308 	and.w	r3, r3, #8
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00a      	beq.n	80068aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00a      	beq.n	80068cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00a      	beq.n	80068ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	430a      	orrs	r2, r1
 800690e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00a      	beq.n	8006932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00a      	beq.n	8006954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	430a      	orrs	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697e:	d10a      	bne.n	8006996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  }
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b098      	sub	sp, #96	@ 0x60
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069d4:	f7fb f978 	bl	8001cc8 <HAL_GetTick>
 80069d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 0308 	and.w	r3, r3, #8
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d12f      	bne.n	8006a48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069f0:	2200      	movs	r2, #0
 80069f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f88e 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d022      	beq.n	8006a48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e6      	bne.n	8006a02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e063      	b.n	8006b10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d149      	bne.n	8006aea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f857 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d03c      	beq.n	8006aea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e6      	bne.n	8006a70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3308      	adds	r3, #8
 8006ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac2:	61fa      	str	r2, [r7, #28]
 8006ac4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	69b9      	ldr	r1, [r7, #24]
 8006ac8:	69fa      	ldr	r2, [r7, #28]
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e012      	b.n	8006b10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3758      	adds	r7, #88	@ 0x58
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	e04f      	b.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d04b      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fb f8c9 	bl	8001cc8 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e04e      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d037      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b80      	cmp	r3, #128	@ 0x80
 8006b5e:	d034      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d031      	beq.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69db      	ldr	r3, [r3, #28]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d110      	bne.n	8006b96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2208      	movs	r2, #8
 8006b7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f838 	bl	8006bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2208      	movs	r2, #8
 8006b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e029      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69db      	ldr	r3, [r3, #28]
 8006b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ba4:	d111      	bne.n	8006bca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f81e 	bl	8006bf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2220      	movs	r2, #32
 8006bba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e00f      	b.n	8006bea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bf0c      	ite	eq
 8006bda:	2301      	moveq	r3, #1
 8006bdc:	2300      	movne	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	461a      	mov	r2, r3
 8006be2:	79fb      	ldrb	r3, [r7, #7]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d0a0      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b095      	sub	sp, #84	@ 0x54
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c20:	e841 2300 	strex	r3, r2, [r1]
 8006c24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1e6      	bne.n	8006bfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3308      	adds	r3, #8
 8006c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	e853 3f00 	ldrex	r3, [r3]
 8006c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e3      	bne.n	8006c2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d118      	bne.n	8006c9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	f023 0310 	bic.w	r3, r3, #16
 8006c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6979      	ldr	r1, [r7, #20]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	613b      	str	r3, [r7, #16]
   return(result);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e6      	bne.n	8006c6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cb2:	bf00      	nop
 8006cb4:	3754      	adds	r7, #84	@ 0x54
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b085      	sub	sp, #20
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d101      	bne.n	8006cd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e027      	b.n	8006d24 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2224      	movs	r2, #36	@ 0x24
 8006ce0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0201 	bic.w	r2, r2, #1
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e02d      	b.n	8006da4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	@ 0x24
 8006d54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 0201 	bic.w	r2, r2, #1
 8006d6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f84f 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e02d      	b.n	8006e20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	@ 0x24
 8006dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f811 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	@ (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	@ (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	@ (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	@ (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	0800aa30 	.word	0x0800aa30
 8006ec0:	0800aa38 	.word	0x0800aa38

08006ec4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8006ec8:	4907      	ldr	r1, [pc, #28]	@ (8006ee8 <MX_FATFS_Init+0x24>)
 8006eca:	4808      	ldr	r0, [pc, #32]	@ (8006eec <MX_FATFS_Init+0x28>)
 8006ecc:	f000 fd8e 	bl	80079ec <FATFS_LinkDriver>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 8006ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8006eda:	e003      	b.n	8006ee4 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8006edc:	4b04      	ldr	r3, [pc, #16]	@ (8006ef0 <MX_FATFS_Init+0x2c>)
 8006ede:	2201      	movs	r2, #1
 8006ee0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8006ee2:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000364 	.word	0x20000364
 8006eec:	20000014 	.word	0x20000014
 8006ef0:	20000368 	.word	0x20000368

08006ef4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	4603      	mov	r3, r0
 8006efc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   // Stat = STA_NOINIT;
	return USER_SPI_initialize(pdrv);
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f9d3 	bl	80072ac <USER_SPI_initialize>
 8006f06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	4603      	mov	r3, r0
 8006f18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    return USER_SPI_status(pdrv);
 8006f1a:	79fb      	ldrb	r3, [r7, #7]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f000 fab1 	bl	8007484 <USER_SPI_status>
 8006f22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	4603      	mov	r3, r0
 8006f3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8006f3c:	7bf8      	ldrb	r0, [r7, #15]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	f000 fab4 	bl	80074b0 <USER_SPI_read>
 8006f48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8006f62:	7bf8      	ldrb	r0, [r7, #15]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	f000 fb07 	bl	800757c <USER_SPI_write>
 8006f6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	603a      	str	r2, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
 8006f84:	460b      	mov	r3, r1
 8006f86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
    return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8006f8c:	79b9      	ldrb	r1, [r7, #6]
 8006f8e:	79fb      	ldrb	r3, [r7, #7]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 fb6e 	bl	8007674 <USER_SPI_ioctl>
 8006f98:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006fac:	f7fa fe8c 	bl	8001cc8 <HAL_GetTick>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	4a04      	ldr	r2, [pc, #16]	@ (8006fc4 <SPI_Timer_On+0x20>)
 8006fb4:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8006fb6:	4a04      	ldr	r2, [pc, #16]	@ (8006fc8 <SPI_Timer_On+0x24>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6013      	str	r3, [r2, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	2000036c 	.word	0x2000036c
 8006fc8:	20000370 	.word	0x20000370

08006fcc <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006fd0:	f7fa fe7a 	bl	8001cc8 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <SPI_Timer_Status+0x24>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	1ad2      	subs	r2, r2, r3
 8006fdc:	4b05      	ldr	r3, [pc, #20]	@ (8006ff4 <SPI_Timer_Status+0x28>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	bf34      	ite	cc
 8006fe4:	2301      	movcc	r3, #1
 8006fe6:	2300      	movcs	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	2000036c 	.word	0x2000036c
 8006ff4:	20000370 	.word	0x20000370

08006ff8 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b086      	sub	sp, #24
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	4603      	mov	r3, r0
 8007000:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8007002:	f107 020f 	add.w	r2, r7, #15
 8007006:	1df9      	adds	r1, r7, #7
 8007008:	2332      	movs	r3, #50	@ 0x32
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	2301      	movs	r3, #1
 800700e:	4804      	ldr	r0, [pc, #16]	@ (8007020 <xchg_spi+0x28>)
 8007010:	f7fe fe18 	bl	8005c44 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200002f8 	.word	0x200002f8

08007024 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007024:	b590      	push	{r4, r7, lr}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	e00a      	b.n	800704a <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	18d4      	adds	r4, r2, r3
 800703a:	20ff      	movs	r0, #255	@ 0xff
 800703c:	f7ff ffdc 	bl	8006ff8 <xchg_spi>
 8007040:	4603      	mov	r3, r0
 8007042:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d3f0      	bcc.n	8007034 <rcvr_spi_multi+0x10>
	}
}
 8007052:	bf00      	nop
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	bd90      	pop	{r4, r7, pc}

0800705c <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	b29a      	uxth	r2, r3
 800706a:	f04f 33ff 	mov.w	r3, #4294967295
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	4803      	ldr	r0, [pc, #12]	@ (8007080 <xmit_spi_multi+0x24>)
 8007072:	f7fe fc72 	bl	800595a <HAL_SPI_Transmit>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200002f8 	.word	0x200002f8

08007084 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800708c:	f7fa fe1c 	bl	8001cc8 <HAL_GetTick>
 8007090:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8007096:	20ff      	movs	r0, #255	@ 0xff
 8007098:	f7ff ffae 	bl	8006ff8 <xchg_spi>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2bff      	cmp	r3, #255	@ 0xff
 80070a4:	d007      	beq.n	80070b6 <wait_ready+0x32>
 80070a6:	f7fa fe0f 	bl	8001cc8 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d8ef      	bhi.n	8007096 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	2bff      	cmp	r3, #255	@ 0xff
 80070ba:	bf0c      	ite	eq
 80070bc:	2301      	moveq	r3, #1
 80070be:	2300      	movne	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}

080070ca <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80070ce:	2201      	movs	r2, #1
 80070d0:	2110      	movs	r1, #16
 80070d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070d6:	f7fb f91f 	bl	8002318 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80070da:	20ff      	movs	r0, #255	@ 0xff
 80070dc:	f7ff ff8c 	bl	8006ff8 <xchg_spi>

}
 80070e0:	bf00      	nop
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80070e8:	2200      	movs	r2, #0
 80070ea:	2110      	movs	r1, #16
 80070ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070f0:	f7fb f912 	bl	8002318 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80070f4:	20ff      	movs	r0, #255	@ 0xff
 80070f6:	f7ff ff7f 	bl	8006ff8 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80070fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80070fe:	f7ff ffc1 	bl	8007084 <wait_ready>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <spiselect+0x28>
 8007108:	2301      	movs	r3, #1
 800710a:	e002      	b.n	8007112 <spiselect+0x2e>

	despiselect();
 800710c:	f7ff ffdd 	bl	80070ca <despiselect>
	return 0;	/* Timeout */
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	bd80      	pop	{r7, pc}

08007116 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b084      	sub	sp, #16
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8007120:	20c8      	movs	r0, #200	@ 0xc8
 8007122:	f7ff ff3f 	bl	8006fa4 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007126:	20ff      	movs	r0, #255	@ 0xff
 8007128:	f7ff ff66 	bl	8006ff8 <xchg_spi>
 800712c:	4603      	mov	r3, r0
 800712e:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8007130:	7bfb      	ldrb	r3, [r7, #15]
 8007132:	2bff      	cmp	r3, #255	@ 0xff
 8007134:	d104      	bne.n	8007140 <rcvr_datablock+0x2a>
 8007136:	f7ff ff49 	bl	8006fcc <SPI_Timer_Status>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1f2      	bne.n	8007126 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2bfe      	cmp	r3, #254	@ 0xfe
 8007144:	d001      	beq.n	800714a <rcvr_datablock+0x34>
 8007146:	2300      	movs	r3, #0
 8007148:	e00a      	b.n	8007160 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f7ff ff69 	bl	8007024 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8007152:	20ff      	movs	r0, #255	@ 0xff
 8007154:	f7ff ff50 	bl	8006ff8 <xchg_spi>
 8007158:	20ff      	movs	r0, #255	@ 0xff
 800715a:	f7ff ff4d 	bl	8006ff8 <xchg_spi>

	return 1;						/* Function succeeded */
 800715e:	2301      	movs	r3, #1
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8007174:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007178:	f7ff ff84 	bl	8007084 <wait_ready>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d101      	bne.n	8007186 <xmit_datablock+0x1e>
 8007182:	2300      	movs	r3, #0
 8007184:	e01e      	b.n	80071c4 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff ff35 	bl	8006ff8 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	2bfd      	cmp	r3, #253	@ 0xfd
 8007192:	d016      	beq.n	80071c2 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8007194:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff ff5f 	bl	800705c <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800719e:	20ff      	movs	r0, #255	@ 0xff
 80071a0:	f7ff ff2a 	bl	8006ff8 <xchg_spi>
 80071a4:	20ff      	movs	r0, #255	@ 0xff
 80071a6:	f7ff ff27 	bl	8006ff8 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80071aa:	20ff      	movs	r0, #255	@ 0xff
 80071ac:	f7ff ff24 	bl	8006ff8 <xchg_spi>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	f003 031f 	and.w	r3, r3, #31
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d001      	beq.n	80071c2 <xmit_datablock+0x5a>
 80071be:	2300      	movs	r3, #0
 80071c0:	e000      	b.n	80071c4 <xmit_datablock+0x5c>
	}
	return 1;
 80071c2:	2301      	movs	r3, #1
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80071d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	da0e      	bge.n	80071fe <send_cmd+0x32>
		cmd &= 0x7F;
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071e6:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80071e8:	2100      	movs	r1, #0
 80071ea:	2037      	movs	r0, #55	@ 0x37
 80071ec:	f7ff ffee 	bl	80071cc <send_cmd>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d901      	bls.n	80071fe <send_cmd+0x32>
 80071fa:	7bbb      	ldrb	r3, [r7, #14]
 80071fc:	e051      	b.n	80072a2 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	2b0c      	cmp	r3, #12
 8007202:	d008      	beq.n	8007216 <send_cmd+0x4a>
		despiselect();
 8007204:	f7ff ff61 	bl	80070ca <despiselect>
		if (!spiselect()) return 0xFF;
 8007208:	f7ff ff6c 	bl	80070e4 <spiselect>
 800720c:	4603      	mov	r3, r0
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <send_cmd+0x4a>
 8007212:	23ff      	movs	r3, #255	@ 0xff
 8007214:	e045      	b.n	80072a2 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4618      	mov	r0, r3
 8007220:	f7ff feea 	bl	8006ff8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4618      	mov	r0, r3
 800722c:	f7ff fee4 	bl	8006ff8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	0c1b      	lsrs	r3, r3, #16
 8007234:	b2db      	uxtb	r3, r3
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fede 	bl	8006ff8 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	0a1b      	lsrs	r3, r3, #8
 8007240:	b2db      	uxtb	r3, r3
 8007242:	4618      	mov	r0, r3
 8007244:	f7ff fed8 	bl	8006ff8 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff fed3 	bl	8006ff8 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8007252:	2301      	movs	r3, #1
 8007254:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <send_cmd+0x94>
 800725c:	2395      	movs	r3, #149	@ 0x95
 800725e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	2b08      	cmp	r3, #8
 8007264:	d101      	bne.n	800726a <send_cmd+0x9e>
 8007266:	2387      	movs	r3, #135	@ 0x87
 8007268:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800726a:	7bfb      	ldrb	r3, [r7, #15]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fec3 	bl	8006ff8 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	2b0c      	cmp	r3, #12
 8007276:	d102      	bne.n	800727e <send_cmd+0xb2>
 8007278:	20ff      	movs	r0, #255	@ 0xff
 800727a:	f7ff febd 	bl	8006ff8 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800727e:	230a      	movs	r3, #10
 8007280:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8007282:	20ff      	movs	r0, #255	@ 0xff
 8007284:	f7ff feb8 	bl	8006ff8 <xchg_spi>
 8007288:	4603      	mov	r3, r0
 800728a:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800728c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	da05      	bge.n	80072a0 <send_cmd+0xd4>
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	3b01      	subs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1f0      	bne.n	8007282 <send_cmd+0xb6>

	return res;							/* Return received response */
 80072a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3710      	adds	r7, #16
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
	...

080072ac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USER_SPI_initialize+0x14>
 80072bc:	2301      	movs	r3, #1
 80072be:	e0d6      	b.n	800746e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80072c0:	4b6d      	ldr	r3, [pc, #436]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <USER_SPI_initialize+0x2a>
 80072ce:	4b6a      	ldr	r3, [pc, #424]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	e0cb      	b.n	800746e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 80072d6:	4b69      	ldr	r3, [pc, #420]	@ (800747c <USER_SPI_initialize+0x1d0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80072e0:	4b66      	ldr	r3, [pc, #408]	@ (800747c <USER_SPI_initialize+0x1d0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80072e8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80072ea:	230a      	movs	r3, #10
 80072ec:	73fb      	strb	r3, [r7, #15]
 80072ee:	e005      	b.n	80072fc <USER_SPI_initialize+0x50>
 80072f0:	20ff      	movs	r0, #255	@ 0xff
 80072f2:	f7ff fe81 	bl	8006ff8 <xchg_spi>
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	73fb      	strb	r3, [r7, #15]
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1f6      	bne.n	80072f0 <USER_SPI_initialize+0x44>

	ty = 0;
 8007302:	2300      	movs	r3, #0
 8007304:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8007306:	2100      	movs	r1, #0
 8007308:	2000      	movs	r0, #0
 800730a:	f7ff ff5f 	bl	80071cc <send_cmd>
 800730e:	4603      	mov	r3, r0
 8007310:	2b01      	cmp	r3, #1
 8007312:	f040 808b 	bne.w	800742c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8007316:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800731a:	f7ff fe43 	bl	8006fa4 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800731e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8007322:	2008      	movs	r0, #8
 8007324:	f7ff ff52 	bl	80071cc <send_cmd>
 8007328:	4603      	mov	r3, r0
 800732a:	2b01      	cmp	r3, #1
 800732c:	d151      	bne.n	80073d2 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
 8007332:	e00d      	b.n	8007350 <USER_SPI_initialize+0xa4>
 8007334:	7bfc      	ldrb	r4, [r7, #15]
 8007336:	20ff      	movs	r0, #255	@ 0xff
 8007338:	f7ff fe5e 	bl	8006ff8 <xchg_spi>
 800733c:	4603      	mov	r3, r0
 800733e:	461a      	mov	r2, r3
 8007340:	f104 0310 	add.w	r3, r4, #16
 8007344:	443b      	add	r3, r7
 8007346:	f803 2c08 	strb.w	r2, [r3, #-8]
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	3301      	adds	r3, #1
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d9ee      	bls.n	8007334 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8007356:	7abb      	ldrb	r3, [r7, #10]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d167      	bne.n	800742c <USER_SPI_initialize+0x180>
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2baa      	cmp	r3, #170	@ 0xaa
 8007360:	d164      	bne.n	800742c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8007362:	bf00      	nop
 8007364:	f7ff fe32 	bl	8006fcc <SPI_Timer_Status>
 8007368:	4603      	mov	r3, r0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <USER_SPI_initialize+0xd2>
 800736e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007372:	20a9      	movs	r0, #169	@ 0xa9
 8007374:	f7ff ff2a 	bl	80071cc <send_cmd>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f2      	bne.n	8007364 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800737e:	f7ff fe25 	bl	8006fcc <SPI_Timer_Status>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d051      	beq.n	800742c <USER_SPI_initialize+0x180>
 8007388:	2100      	movs	r1, #0
 800738a:	203a      	movs	r0, #58	@ 0x3a
 800738c:	f7ff ff1e 	bl	80071cc <send_cmd>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d14a      	bne.n	800742c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]
 800739a:	e00d      	b.n	80073b8 <USER_SPI_initialize+0x10c>
 800739c:	7bfc      	ldrb	r4, [r7, #15]
 800739e:	20ff      	movs	r0, #255	@ 0xff
 80073a0:	f7ff fe2a 	bl	8006ff8 <xchg_spi>
 80073a4:	4603      	mov	r3, r0
 80073a6:	461a      	mov	r2, r3
 80073a8:	f104 0310 	add.w	r3, r4, #16
 80073ac:	443b      	add	r3, r7
 80073ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	3301      	adds	r3, #1
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d9ee      	bls.n	800739c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80073be:	7a3b      	ldrb	r3, [r7, #8]
 80073c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <USER_SPI_initialize+0x120>
 80073c8:	230c      	movs	r3, #12
 80073ca:	e000      	b.n	80073ce <USER_SPI_initialize+0x122>
 80073cc:	2304      	movs	r3, #4
 80073ce:	737b      	strb	r3, [r7, #13]
 80073d0:	e02c      	b.n	800742c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80073d2:	2100      	movs	r1, #0
 80073d4:	20a9      	movs	r0, #169	@ 0xa9
 80073d6:	f7ff fef9 	bl	80071cc <send_cmd>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d804      	bhi.n	80073ea <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80073e0:	2302      	movs	r3, #2
 80073e2:	737b      	strb	r3, [r7, #13]
 80073e4:	23a9      	movs	r3, #169	@ 0xa9
 80073e6:	73bb      	strb	r3, [r7, #14]
 80073e8:	e003      	b.n	80073f2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80073ea:	2301      	movs	r3, #1
 80073ec:	737b      	strb	r3, [r7, #13]
 80073ee:	2301      	movs	r3, #1
 80073f0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80073f2:	bf00      	nop
 80073f4:	f7ff fdea 	bl	8006fcc <SPI_Timer_Status>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d007      	beq.n	800740e <USER_SPI_initialize+0x162>
 80073fe:	7bbb      	ldrb	r3, [r7, #14]
 8007400:	2100      	movs	r1, #0
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fee2 	bl	80071cc <send_cmd>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1f2      	bne.n	80073f4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800740e:	f7ff fddd 	bl	8006fcc <SPI_Timer_Status>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <USER_SPI_initialize+0x17c>
 8007418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800741c:	2010      	movs	r0, #16
 800741e:	f7ff fed5 	bl	80071cc <send_cmd>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <USER_SPI_initialize+0x180>
				ty = 0;
 8007428:	2300      	movs	r3, #0
 800742a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800742c:	4a14      	ldr	r2, [pc, #80]	@ (8007480 <USER_SPI_initialize+0x1d4>)
 800742e:	7b7b      	ldrb	r3, [r7, #13]
 8007430:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007432:	f7ff fe4a 	bl	80070ca <despiselect>

	if (ty) {			/* OK */
 8007436:	7b7b      	ldrb	r3, [r7, #13]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d012      	beq.n	8007462 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800743c:	4b0f      	ldr	r3, [pc, #60]	@ (800747c <USER_SPI_initialize+0x1d0>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <USER_SPI_initialize+0x1d0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f042 0210 	orr.w	r2, r2, #16
 800744e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007450:	4b09      	ldr	r3, [pc, #36]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	b2da      	uxtb	r2, r3
 800745c:	4b06      	ldr	r3, [pc, #24]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 800745e:	701a      	strb	r2, [r3, #0]
 8007460:	e002      	b.n	8007468 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007462:	4b05      	ldr	r3, [pc, #20]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 8007464:	2201      	movs	r2, #1
 8007466:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007468:	4b03      	ldr	r3, [pc, #12]	@ (8007478 <USER_SPI_initialize+0x1cc>)
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	b2db      	uxtb	r3, r3
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	bd90      	pop	{r4, r7, pc}
 8007476:	bf00      	nop
 8007478:	20000028 	.word	0x20000028
 800747c:	200002f8 	.word	0x200002f8
 8007480:	20000369 	.word	0x20000369

08007484 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800748e:	79fb      	ldrb	r3, [r7, #7]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <USER_SPI_status+0x14>
 8007494:	2301      	movs	r3, #1
 8007496:	e002      	b.n	800749e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007498:	4b04      	ldr	r3, [pc, #16]	@ (80074ac <USER_SPI_status+0x28>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b2db      	uxtb	r3, r3
}
 800749e:	4618      	mov	r0, r3
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000028 	.word	0x20000028

080074b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <USER_SPI_read+0x1c>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <USER_SPI_read+0x20>
 80074cc:	2304      	movs	r3, #4
 80074ce:	e04d      	b.n	800756c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80074d0:	4b28      	ldr	r3, [pc, #160]	@ (8007574 <USER_SPI_read+0xc4>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <USER_SPI_read+0x32>
 80074de:	2303      	movs	r3, #3
 80074e0:	e044      	b.n	800756c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80074e2:	4b25      	ldr	r3, [pc, #148]	@ (8007578 <USER_SPI_read+0xc8>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d102      	bne.n	80074f4 <USER_SPI_read+0x44>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	025b      	lsls	r3, r3, #9
 80074f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d111      	bne.n	800751e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80074fa:	6879      	ldr	r1, [r7, #4]
 80074fc:	2011      	movs	r0, #17
 80074fe:	f7ff fe65 	bl	80071cc <send_cmd>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d129      	bne.n	800755c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007508:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800750c:	68b8      	ldr	r0, [r7, #8]
 800750e:	f7ff fe02 	bl	8007116 <rcvr_datablock>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d021      	beq.n	800755c <USER_SPI_read+0xac>
			count = 0;
 8007518:	2300      	movs	r3, #0
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	e01e      	b.n	800755c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800751e:	6879      	ldr	r1, [r7, #4]
 8007520:	2012      	movs	r0, #18
 8007522:	f7ff fe53 	bl	80071cc <send_cmd>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d117      	bne.n	800755c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800752c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007530:	68b8      	ldr	r0, [r7, #8]
 8007532:	f7ff fdf0 	bl	8007116 <rcvr_datablock>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <USER_SPI_read+0xa2>
				buff += 512;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007542:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	3b01      	subs	r3, #1
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1ed      	bne.n	800752c <USER_SPI_read+0x7c>
 8007550:	e000      	b.n	8007554 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007552:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007554:	2100      	movs	r1, #0
 8007556:	200c      	movs	r0, #12
 8007558:	f7ff fe38 	bl	80071cc <send_cmd>
		}
	}
	despiselect();
 800755c:	f7ff fdb5 	bl	80070ca <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	20000028 	.word	0x20000028
 8007578:	20000369 	.word	0x20000369

0800757c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d102      	bne.n	8007598 <USER_SPI_write+0x1c>
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <USER_SPI_write+0x20>
 8007598:	2304      	movs	r3, #4
 800759a:	e063      	b.n	8007664 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800759c:	4b33      	ldr	r3, [pc, #204]	@ (800766c <USER_SPI_write+0xf0>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <USER_SPI_write+0x32>
 80075aa:	2303      	movs	r3, #3
 80075ac:	e05a      	b.n	8007664 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80075ae:	4b2f      	ldr	r3, [pc, #188]	@ (800766c <USER_SPI_write+0xf0>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <USER_SPI_write+0x44>
 80075bc:	2302      	movs	r3, #2
 80075be:	e051      	b.n	8007664 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80075c0:	4b2b      	ldr	r3, [pc, #172]	@ (8007670 <USER_SPI_write+0xf4>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <USER_SPI_write+0x56>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	025b      	lsls	r3, r3, #9
 80075d0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d110      	bne.n	80075fa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	2018      	movs	r0, #24
 80075dc:	f7ff fdf6 	bl	80071cc <send_cmd>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d136      	bne.n	8007654 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80075e6:	21fe      	movs	r1, #254	@ 0xfe
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f7ff fdbd 	bl	8007168 <xmit_datablock>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02f      	beq.n	8007654 <USER_SPI_write+0xd8>
			count = 0;
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	e02c      	b.n	8007654 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80075fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <USER_SPI_write+0xf4>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0306 	and.w	r3, r3, #6
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <USER_SPI_write+0x92>
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	2097      	movs	r0, #151	@ 0x97
 800760a:	f7ff fddf 	bl	80071cc <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	2019      	movs	r0, #25
 8007612:	f7ff fddb 	bl	80071cc <send_cmd>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d11b      	bne.n	8007654 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800761c:	21fc      	movs	r1, #252	@ 0xfc
 800761e:	68b8      	ldr	r0, [r7, #8]
 8007620:	f7ff fda2 	bl	8007168 <xmit_datablock>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <USER_SPI_write+0xc4>
				buff += 512;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007630:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	3b01      	subs	r3, #1
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1ee      	bne.n	800761c <USER_SPI_write+0xa0>
 800763e:	e000      	b.n	8007642 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007640:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007642:	21fd      	movs	r1, #253	@ 0xfd
 8007644:	2000      	movs	r0, #0
 8007646:	f7ff fd8f 	bl	8007168 <xmit_datablock>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <USER_SPI_write+0xd8>
 8007650:	2301      	movs	r3, #1
 8007652:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007654:	f7ff fd39 	bl	80070ca <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	20000028 	.word	0x20000028
 8007670:	20000369 	.word	0x20000369

08007674 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	@ 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	603a      	str	r2, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
 8007680:	460b      	mov	r3, r1
 8007682:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <USER_SPI_ioctl+0x1a>
 800768a:	2304      	movs	r3, #4
 800768c:	e15a      	b.n	8007944 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800768e:	4baf      	ldr	r3, [pc, #700]	@ (800794c <USER_SPI_ioctl+0x2d8>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <USER_SPI_ioctl+0x2c>
 800769c:	2303      	movs	r3, #3
 800769e:	e151      	b.n	8007944 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80076a6:	79bb      	ldrb	r3, [r7, #6]
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	f200 8136 	bhi.w	800791a <USER_SPI_ioctl+0x2a6>
 80076ae:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <USER_SPI_ioctl+0x40>)
 80076b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076dd 	.word	0x080076dd
 80076bc:	0800791b 	.word	0x0800791b
 80076c0:	08007789 	.word	0x08007789
 80076c4:	0800787f 	.word	0x0800787f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80076c8:	f7ff fd0c 	bl	80070e4 <spiselect>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8127 	beq.w	8007922 <USER_SPI_ioctl+0x2ae>
 80076d4:	2300      	movs	r3, #0
 80076d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80076da:	e122      	b.n	8007922 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80076dc:	2100      	movs	r1, #0
 80076de:	2009      	movs	r0, #9
 80076e0:	f7ff fd74 	bl	80071cc <send_cmd>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f040 811d 	bne.w	8007926 <USER_SPI_ioctl+0x2b2>
 80076ec:	f107 030c 	add.w	r3, r7, #12
 80076f0:	2110      	movs	r1, #16
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fd0f 	bl	8007116 <rcvr_datablock>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f000 8113 	beq.w	8007926 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007700:	7b3b      	ldrb	r3, [r7, #12]
 8007702:	099b      	lsrs	r3, r3, #6
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b01      	cmp	r3, #1
 8007708:	d111      	bne.n	800772e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800770a:	7d7b      	ldrb	r3, [r7, #21]
 800770c:	461a      	mov	r2, r3
 800770e:	7d3b      	ldrb	r3, [r7, #20]
 8007710:	021b      	lsls	r3, r3, #8
 8007712:	4413      	add	r3, r2
 8007714:	461a      	mov	r2, r3
 8007716:	7cfb      	ldrb	r3, [r7, #19]
 8007718:	041b      	lsls	r3, r3, #16
 800771a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800771e:	4413      	add	r3, r2
 8007720:	3301      	adds	r3, #1
 8007722:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	029a      	lsls	r2, r3, #10
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e028      	b.n	8007780 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800772e:	7c7b      	ldrb	r3, [r7, #17]
 8007730:	f003 030f 	and.w	r3, r3, #15
 8007734:	b2da      	uxtb	r2, r3
 8007736:	7dbb      	ldrb	r3, [r7, #22]
 8007738:	09db      	lsrs	r3, r3, #7
 800773a:	b2db      	uxtb	r3, r3
 800773c:	4413      	add	r3, r2
 800773e:	b2da      	uxtb	r2, r3
 8007740:	7d7b      	ldrb	r3, [r7, #21]
 8007742:	005b      	lsls	r3, r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0306 	and.w	r3, r3, #6
 800774a:	b2db      	uxtb	r3, r3
 800774c:	4413      	add	r3, r2
 800774e:	b2db      	uxtb	r3, r3
 8007750:	3302      	adds	r3, #2
 8007752:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007756:	7d3b      	ldrb	r3, [r7, #20]
 8007758:	099b      	lsrs	r3, r3, #6
 800775a:	b2db      	uxtb	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	7cfb      	ldrb	r3, [r7, #19]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	441a      	add	r2, r3
 8007764:	7cbb      	ldrb	r3, [r7, #18]
 8007766:	029b      	lsls	r3, r3, #10
 8007768:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800776c:	4413      	add	r3, r2
 800776e:	3301      	adds	r3, #1
 8007770:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007772:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007776:	3b09      	subs	r3, #9
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	409a      	lsls	r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007786:	e0ce      	b.n	8007926 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007788:	4b71      	ldr	r3, [pc, #452]	@ (8007950 <USER_SPI_ioctl+0x2dc>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	d031      	beq.n	80077f8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007794:	2100      	movs	r1, #0
 8007796:	208d      	movs	r0, #141	@ 0x8d
 8007798:	f7ff fd18 	bl	80071cc <send_cmd>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f040 80c3 	bne.w	800792a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80077a4:	20ff      	movs	r0, #255	@ 0xff
 80077a6:	f7ff fc27 	bl	8006ff8 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80077aa:	f107 030c 	add.w	r3, r7, #12
 80077ae:	2110      	movs	r1, #16
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7ff fcb0 	bl	8007116 <rcvr_datablock>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 80b6 	beq.w	800792a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80077be:	2330      	movs	r3, #48	@ 0x30
 80077c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80077c4:	e007      	b.n	80077d6 <USER_SPI_ioctl+0x162>
 80077c6:	20ff      	movs	r0, #255	@ 0xff
 80077c8:	f7ff fc16 	bl	8006ff8 <xchg_spi>
 80077cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077d0:	3b01      	subs	r3, #1
 80077d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80077d6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f3      	bne.n	80077c6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80077de:	7dbb      	ldrb	r3, [r7, #22]
 80077e0:	091b      	lsrs	r3, r3, #4
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	2310      	movs	r3, #16
 80077e8:	fa03 f202 	lsl.w	r2, r3, r2
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80077f6:	e098      	b.n	800792a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80077f8:	2100      	movs	r1, #0
 80077fa:	2009      	movs	r0, #9
 80077fc:	f7ff fce6 	bl	80071cc <send_cmd>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f040 8091 	bne.w	800792a <USER_SPI_ioctl+0x2b6>
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	2110      	movs	r1, #16
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fc81 	bl	8007116 <rcvr_datablock>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8087 	beq.w	800792a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800781c:	4b4c      	ldr	r3, [pc, #304]	@ (8007950 <USER_SPI_ioctl+0x2dc>)
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d012      	beq.n	800784e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007828:	7dbb      	ldrb	r3, [r7, #22]
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007830:	7dfa      	ldrb	r2, [r7, #23]
 8007832:	09d2      	lsrs	r2, r2, #7
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	4413      	add	r3, r2
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	7e7b      	ldrb	r3, [r7, #25]
 800783c:	099b      	lsrs	r3, r3, #6
 800783e:	b2db      	uxtb	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	fa02 f303 	lsl.w	r3, r2, r3
 8007846:	461a      	mov	r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e013      	b.n	8007876 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800784e:	7dbb      	ldrb	r3, [r7, #22]
 8007850:	109b      	asrs	r3, r3, #2
 8007852:	b29b      	uxth	r3, r3
 8007854:	f003 031f 	and.w	r3, r3, #31
 8007858:	3301      	adds	r3, #1
 800785a:	7dfa      	ldrb	r2, [r7, #23]
 800785c:	00d2      	lsls	r2, r2, #3
 800785e:	f002 0218 	and.w	r2, r2, #24
 8007862:	7df9      	ldrb	r1, [r7, #23]
 8007864:	0949      	lsrs	r1, r1, #5
 8007866:	b2c9      	uxtb	r1, r1
 8007868:	440a      	add	r2, r1
 800786a:	3201      	adds	r2, #1
 800786c:	fb02 f303 	mul.w	r3, r2, r3
 8007870:	461a      	mov	r2, r3
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800787c:	e055      	b.n	800792a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800787e:	4b34      	ldr	r3, [pc, #208]	@ (8007950 <USER_SPI_ioctl+0x2dc>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	f003 0306 	and.w	r3, r3, #6
 8007886:	2b00      	cmp	r3, #0
 8007888:	d051      	beq.n	800792e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800788a:	f107 020c 	add.w	r2, r7, #12
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	210b      	movs	r1, #11
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff feee 	bl	8007674 <USER_SPI_ioctl>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d149      	bne.n	8007932 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800789e:	7b3b      	ldrb	r3, [r7, #12]
 80078a0:	099b      	lsrs	r3, r3, #6
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d104      	bne.n	80078b2 <USER_SPI_ioctl+0x23e>
 80078a8:	7dbb      	ldrb	r3, [r7, #22]
 80078aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d041      	beq.n	8007936 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	623b      	str	r3, [r7, #32]
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078bc:	6a3b      	ldr	r3, [r7, #32]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80078c2:	4b23      	ldr	r3, [pc, #140]	@ (8007950 <USER_SPI_ioctl+0x2dc>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0308 	and.w	r3, r3, #8
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d105      	bne.n	80078da <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80078ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d0:	025b      	lsls	r3, r3, #9
 80078d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d6:	025b      	lsls	r3, r3, #9
 80078d8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80078da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078dc:	2020      	movs	r0, #32
 80078de:	f7ff fc75 	bl	80071cc <send_cmd>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d128      	bne.n	800793a <USER_SPI_ioctl+0x2c6>
 80078e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ea:	2021      	movs	r0, #33	@ 0x21
 80078ec:	f7ff fc6e 	bl	80071cc <send_cmd>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d121      	bne.n	800793a <USER_SPI_ioctl+0x2c6>
 80078f6:	2100      	movs	r1, #0
 80078f8:	2026      	movs	r0, #38	@ 0x26
 80078fa:	f7ff fc67 	bl	80071cc <send_cmd>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d11a      	bne.n	800793a <USER_SPI_ioctl+0x2c6>
 8007904:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007908:	f7ff fbbc 	bl	8007084 <wait_ready>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d013      	beq.n	800793a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007912:	2300      	movs	r3, #0
 8007914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007918:	e00f      	b.n	800793a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800791a:	2304      	movs	r3, #4
 800791c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007920:	e00c      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		break;
 8007922:	bf00      	nop
 8007924:	e00a      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		break;
 8007926:	bf00      	nop
 8007928:	e008      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		break;
 800792a:	bf00      	nop
 800792c:	e006      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800792e:	bf00      	nop
 8007930:	e004      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007932:	bf00      	nop
 8007934:	e002      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007936:	bf00      	nop
 8007938:	e000      	b.n	800793c <USER_SPI_ioctl+0x2c8>
		break;
 800793a:	bf00      	nop
	}

	despiselect();
 800793c:	f7ff fbc5 	bl	80070ca <despiselect>

	return res;
 8007940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007944:	4618      	mov	r0, r3
 8007946:	3730      	adds	r7, #48	@ 0x30
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000028 	.word	0x20000028
 8007950:	20000369 	.word	0x20000369

08007954 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	4613      	mov	r3, r2
 8007960:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007966:	2300      	movs	r3, #0
 8007968:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800796a:	4b1f      	ldr	r3, [pc, #124]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 800796c:	7a5b      	ldrb	r3, [r3, #9]
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d131      	bne.n	80079d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007974:	4b1c      	ldr	r3, [pc, #112]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 8007976:	7a5b      	ldrb	r3, [r3, #9]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	461a      	mov	r2, r3
 800797c:	4b1a      	ldr	r3, [pc, #104]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 800797e:	2100      	movs	r1, #0
 8007980:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007982:	4b19      	ldr	r3, [pc, #100]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 8007984:	7a5b      	ldrb	r3, [r3, #9]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4a17      	ldr	r2, [pc, #92]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007992:	4b15      	ldr	r3, [pc, #84]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 8007994:	7a5b      	ldrb	r3, [r3, #9]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	461a      	mov	r2, r3
 800799a:	4b13      	ldr	r3, [pc, #76]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 800799c:	4413      	add	r3, r2
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079a2:	4b11      	ldr	r3, [pc, #68]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 80079a4:	7a5b      	ldrb	r3, [r3, #9]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	1c5a      	adds	r2, r3, #1
 80079aa:	b2d1      	uxtb	r1, r2
 80079ac:	4a0e      	ldr	r2, [pc, #56]	@ (80079e8 <FATFS_LinkDriverEx+0x94>)
 80079ae:	7251      	strb	r1, [r2, #9]
 80079b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	3330      	adds	r3, #48	@ 0x30
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	3301      	adds	r3, #1
 80079c0:	223a      	movs	r2, #58	@ 0x3a
 80079c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3302      	adds	r3, #2
 80079c8:	222f      	movs	r2, #47	@ 0x2f
 80079ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3303      	adds	r3, #3
 80079d0:	2200      	movs	r2, #0
 80079d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	371c      	adds	r7, #28
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	20000374 	.word	0x20000374

080079ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079f6:	2200      	movs	r2, #0
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff ffaa 	bl	8007954 <FATFS_LinkDriverEx>
 8007a00:	4603      	mov	r3, r0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <__cvt>:
 8007a0a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0e:	ec57 6b10 	vmov	r6, r7, d0
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	460c      	mov	r4, r1
 8007a16:	4619      	mov	r1, r3
 8007a18:	463b      	mov	r3, r7
 8007a1a:	bfbb      	ittet	lt
 8007a1c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a20:	461f      	movlt	r7, r3
 8007a22:	2300      	movge	r3, #0
 8007a24:	232d      	movlt	r3, #45	@ 0x2d
 8007a26:	700b      	strb	r3, [r1, #0]
 8007a28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a2a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a2e:	4691      	mov	r9, r2
 8007a30:	f023 0820 	bic.w	r8, r3, #32
 8007a34:	bfbc      	itt	lt
 8007a36:	4632      	movlt	r2, r6
 8007a38:	4616      	movlt	r6, r2
 8007a3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a3e:	d005      	beq.n	8007a4c <__cvt+0x42>
 8007a40:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a44:	d100      	bne.n	8007a48 <__cvt+0x3e>
 8007a46:	3401      	adds	r4, #1
 8007a48:	2102      	movs	r1, #2
 8007a4a:	e000      	b.n	8007a4e <__cvt+0x44>
 8007a4c:	2103      	movs	r1, #3
 8007a4e:	ab03      	add	r3, sp, #12
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	ab02      	add	r3, sp, #8
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	ec47 6b10 	vmov	d0, r6, r7
 8007a5a:	4653      	mov	r3, sl
 8007a5c:	4622      	mov	r2, r4
 8007a5e:	f000 ff4b 	bl	80088f8 <_dtoa_r>
 8007a62:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a66:	4605      	mov	r5, r0
 8007a68:	d119      	bne.n	8007a9e <__cvt+0x94>
 8007a6a:	f019 0f01 	tst.w	r9, #1
 8007a6e:	d00e      	beq.n	8007a8e <__cvt+0x84>
 8007a70:	eb00 0904 	add.w	r9, r0, r4
 8007a74:	2200      	movs	r2, #0
 8007a76:	2300      	movs	r3, #0
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 fffc 	bl	8000a78 <__aeabi_dcmpeq>
 8007a80:	b108      	cbz	r0, 8007a86 <__cvt+0x7c>
 8007a82:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a86:	2230      	movs	r2, #48	@ 0x30
 8007a88:	9b03      	ldr	r3, [sp, #12]
 8007a8a:	454b      	cmp	r3, r9
 8007a8c:	d31e      	bcc.n	8007acc <__cvt+0xc2>
 8007a8e:	9b03      	ldr	r3, [sp, #12]
 8007a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a92:	1b5b      	subs	r3, r3, r5
 8007a94:	4628      	mov	r0, r5
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	b004      	add	sp, #16
 8007a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007aa2:	eb00 0904 	add.w	r9, r0, r4
 8007aa6:	d1e5      	bne.n	8007a74 <__cvt+0x6a>
 8007aa8:	7803      	ldrb	r3, [r0, #0]
 8007aaa:	2b30      	cmp	r3, #48	@ 0x30
 8007aac:	d10a      	bne.n	8007ac4 <__cvt+0xba>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f8 ffdf 	bl	8000a78 <__aeabi_dcmpeq>
 8007aba:	b918      	cbnz	r0, 8007ac4 <__cvt+0xba>
 8007abc:	f1c4 0401 	rsb	r4, r4, #1
 8007ac0:	f8ca 4000 	str.w	r4, [sl]
 8007ac4:	f8da 3000 	ldr.w	r3, [sl]
 8007ac8:	4499      	add	r9, r3
 8007aca:	e7d3      	b.n	8007a74 <__cvt+0x6a>
 8007acc:	1c59      	adds	r1, r3, #1
 8007ace:	9103      	str	r1, [sp, #12]
 8007ad0:	701a      	strb	r2, [r3, #0]
 8007ad2:	e7d9      	b.n	8007a88 <__cvt+0x7e>

08007ad4 <__exponent>:
 8007ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	bfba      	itte	lt
 8007ada:	4249      	neglt	r1, r1
 8007adc:	232d      	movlt	r3, #45	@ 0x2d
 8007ade:	232b      	movge	r3, #43	@ 0x2b
 8007ae0:	2909      	cmp	r1, #9
 8007ae2:	7002      	strb	r2, [r0, #0]
 8007ae4:	7043      	strb	r3, [r0, #1]
 8007ae6:	dd29      	ble.n	8007b3c <__exponent+0x68>
 8007ae8:	f10d 0307 	add.w	r3, sp, #7
 8007aec:	461d      	mov	r5, r3
 8007aee:	270a      	movs	r7, #10
 8007af0:	461a      	mov	r2, r3
 8007af2:	fbb1 f6f7 	udiv	r6, r1, r7
 8007af6:	fb07 1416 	mls	r4, r7, r6, r1
 8007afa:	3430      	adds	r4, #48	@ 0x30
 8007afc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b00:	460c      	mov	r4, r1
 8007b02:	2c63      	cmp	r4, #99	@ 0x63
 8007b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b08:	4631      	mov	r1, r6
 8007b0a:	dcf1      	bgt.n	8007af0 <__exponent+0x1c>
 8007b0c:	3130      	adds	r1, #48	@ 0x30
 8007b0e:	1e94      	subs	r4, r2, #2
 8007b10:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b14:	1c41      	adds	r1, r0, #1
 8007b16:	4623      	mov	r3, r4
 8007b18:	42ab      	cmp	r3, r5
 8007b1a:	d30a      	bcc.n	8007b32 <__exponent+0x5e>
 8007b1c:	f10d 0309 	add.w	r3, sp, #9
 8007b20:	1a9b      	subs	r3, r3, r2
 8007b22:	42ac      	cmp	r4, r5
 8007b24:	bf88      	it	hi
 8007b26:	2300      	movhi	r3, #0
 8007b28:	3302      	adds	r3, #2
 8007b2a:	4403      	add	r3, r0
 8007b2c:	1a18      	subs	r0, r3, r0
 8007b2e:	b003      	add	sp, #12
 8007b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b32:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b36:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b3a:	e7ed      	b.n	8007b18 <__exponent+0x44>
 8007b3c:	2330      	movs	r3, #48	@ 0x30
 8007b3e:	3130      	adds	r1, #48	@ 0x30
 8007b40:	7083      	strb	r3, [r0, #2]
 8007b42:	70c1      	strb	r1, [r0, #3]
 8007b44:	1d03      	adds	r3, r0, #4
 8007b46:	e7f1      	b.n	8007b2c <__exponent+0x58>

08007b48 <_printf_float>:
 8007b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4c:	b08d      	sub	sp, #52	@ 0x34
 8007b4e:	460c      	mov	r4, r1
 8007b50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b54:	4616      	mov	r6, r2
 8007b56:	461f      	mov	r7, r3
 8007b58:	4605      	mov	r5, r0
 8007b5a:	f000 fdbf 	bl	80086dc <_localeconv_r>
 8007b5e:	6803      	ldr	r3, [r0, #0]
 8007b60:	9304      	str	r3, [sp, #16]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f7f8 fb5c 	bl	8000220 <strlen>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b6c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	3307      	adds	r3, #7
 8007b74:	f023 0307 	bic.w	r3, r3, #7
 8007b78:	f103 0208 	add.w	r2, r3, #8
 8007b7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b80:	f8d4 b000 	ldr.w	fp, [r4]
 8007b84:	f8c8 2000 	str.w	r2, [r8]
 8007b88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b90:	9307      	str	r3, [sp, #28]
 8007b92:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8007e10 <_printf_float+0x2c8>)
 8007ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba4:	f7f8 ff9a 	bl	8000adc <__aeabi_dcmpun>
 8007ba8:	bb70      	cbnz	r0, 8007c08 <_printf_float+0xc0>
 8007baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007bae:	4b98      	ldr	r3, [pc, #608]	@ (8007e10 <_printf_float+0x2c8>)
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	f7f8 ff74 	bl	8000aa0 <__aeabi_dcmple>
 8007bb8:	bb30      	cbnz	r0, 8007c08 <_printf_float+0xc0>
 8007bba:	2200      	movs	r2, #0
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	4640      	mov	r0, r8
 8007bc0:	4649      	mov	r1, r9
 8007bc2:	f7f8 ff63 	bl	8000a8c <__aeabi_dcmplt>
 8007bc6:	b110      	cbz	r0, 8007bce <_printf_float+0x86>
 8007bc8:	232d      	movs	r3, #45	@ 0x2d
 8007bca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bce:	4a91      	ldr	r2, [pc, #580]	@ (8007e14 <_printf_float+0x2cc>)
 8007bd0:	4b91      	ldr	r3, [pc, #580]	@ (8007e18 <_printf_float+0x2d0>)
 8007bd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bd6:	bf94      	ite	ls
 8007bd8:	4690      	movls	r8, r2
 8007bda:	4698      	movhi	r8, r3
 8007bdc:	2303      	movs	r3, #3
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	f02b 0304 	bic.w	r3, fp, #4
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	f04f 0900 	mov.w	r9, #0
 8007bea:	9700      	str	r7, [sp, #0]
 8007bec:	4633      	mov	r3, r6
 8007bee:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f000 f9d2 	bl	8007f9c <_printf_common>
 8007bf8:	3001      	adds	r0, #1
 8007bfa:	f040 808d 	bne.w	8007d18 <_printf_float+0x1d0>
 8007bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8007c02:	b00d      	add	sp, #52	@ 0x34
 8007c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c08:	4642      	mov	r2, r8
 8007c0a:	464b      	mov	r3, r9
 8007c0c:	4640      	mov	r0, r8
 8007c0e:	4649      	mov	r1, r9
 8007c10:	f7f8 ff64 	bl	8000adc <__aeabi_dcmpun>
 8007c14:	b140      	cbz	r0, 8007c28 <_printf_float+0xe0>
 8007c16:	464b      	mov	r3, r9
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	bfbc      	itt	lt
 8007c1c:	232d      	movlt	r3, #45	@ 0x2d
 8007c1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c22:	4a7e      	ldr	r2, [pc, #504]	@ (8007e1c <_printf_float+0x2d4>)
 8007c24:	4b7e      	ldr	r3, [pc, #504]	@ (8007e20 <_printf_float+0x2d8>)
 8007c26:	e7d4      	b.n	8007bd2 <_printf_float+0x8a>
 8007c28:	6863      	ldr	r3, [r4, #4]
 8007c2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c2e:	9206      	str	r2, [sp, #24]
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	d13b      	bne.n	8007cac <_printf_float+0x164>
 8007c34:	2306      	movs	r3, #6
 8007c36:	6063      	str	r3, [r4, #4]
 8007c38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	9303      	str	r3, [sp, #12]
 8007c42:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c44:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c48:	ab09      	add	r3, sp, #36	@ 0x24
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	6861      	ldr	r1, [r4, #4]
 8007c4e:	ec49 8b10 	vmov	d0, r8, r9
 8007c52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c56:	4628      	mov	r0, r5
 8007c58:	f7ff fed7 	bl	8007a0a <__cvt>
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c60:	2b47      	cmp	r3, #71	@ 0x47
 8007c62:	4680      	mov	r8, r0
 8007c64:	d129      	bne.n	8007cba <_printf_float+0x172>
 8007c66:	1cc8      	adds	r0, r1, #3
 8007c68:	db02      	blt.n	8007c70 <_printf_float+0x128>
 8007c6a:	6863      	ldr	r3, [r4, #4]
 8007c6c:	4299      	cmp	r1, r3
 8007c6e:	dd41      	ble.n	8007cf4 <_printf_float+0x1ac>
 8007c70:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c74:	fa5f fa8a 	uxtb.w	sl, sl
 8007c78:	3901      	subs	r1, #1
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c80:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c82:	f7ff ff27 	bl	8007ad4 <__exponent>
 8007c86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c88:	1813      	adds	r3, r2, r0
 8007c8a:	2a01      	cmp	r2, #1
 8007c8c:	4681      	mov	r9, r0
 8007c8e:	6123      	str	r3, [r4, #16]
 8007c90:	dc02      	bgt.n	8007c98 <_printf_float+0x150>
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	07d2      	lsls	r2, r2, #31
 8007c96:	d501      	bpl.n	8007c9c <_printf_float+0x154>
 8007c98:	3301      	adds	r3, #1
 8007c9a:	6123      	str	r3, [r4, #16]
 8007c9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0a2      	beq.n	8007bea <_printf_float+0xa2>
 8007ca4:	232d      	movs	r3, #45	@ 0x2d
 8007ca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007caa:	e79e      	b.n	8007bea <_printf_float+0xa2>
 8007cac:	9a06      	ldr	r2, [sp, #24]
 8007cae:	2a47      	cmp	r2, #71	@ 0x47
 8007cb0:	d1c2      	bne.n	8007c38 <_printf_float+0xf0>
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1c0      	bne.n	8007c38 <_printf_float+0xf0>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e7bd      	b.n	8007c36 <_printf_float+0xee>
 8007cba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007cbe:	d9db      	bls.n	8007c78 <_printf_float+0x130>
 8007cc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007cc4:	d118      	bne.n	8007cf8 <_printf_float+0x1b0>
 8007cc6:	2900      	cmp	r1, #0
 8007cc8:	6863      	ldr	r3, [r4, #4]
 8007cca:	dd0b      	ble.n	8007ce4 <_printf_float+0x19c>
 8007ccc:	6121      	str	r1, [r4, #16]
 8007cce:	b913      	cbnz	r3, 8007cd6 <_printf_float+0x18e>
 8007cd0:	6822      	ldr	r2, [r4, #0]
 8007cd2:	07d0      	lsls	r0, r2, #31
 8007cd4:	d502      	bpl.n	8007cdc <_printf_float+0x194>
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	440b      	add	r3, r1
 8007cda:	6123      	str	r3, [r4, #16]
 8007cdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007cde:	f04f 0900 	mov.w	r9, #0
 8007ce2:	e7db      	b.n	8007c9c <_printf_float+0x154>
 8007ce4:	b913      	cbnz	r3, 8007cec <_printf_float+0x1a4>
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	07d2      	lsls	r2, r2, #31
 8007cea:	d501      	bpl.n	8007cf0 <_printf_float+0x1a8>
 8007cec:	3302      	adds	r3, #2
 8007cee:	e7f4      	b.n	8007cda <_printf_float+0x192>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e7f2      	b.n	8007cda <_printf_float+0x192>
 8007cf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cfa:	4299      	cmp	r1, r3
 8007cfc:	db05      	blt.n	8007d0a <_printf_float+0x1c2>
 8007cfe:	6823      	ldr	r3, [r4, #0]
 8007d00:	6121      	str	r1, [r4, #16]
 8007d02:	07d8      	lsls	r0, r3, #31
 8007d04:	d5ea      	bpl.n	8007cdc <_printf_float+0x194>
 8007d06:	1c4b      	adds	r3, r1, #1
 8007d08:	e7e7      	b.n	8007cda <_printf_float+0x192>
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	bfd4      	ite	le
 8007d0e:	f1c1 0202 	rsble	r2, r1, #2
 8007d12:	2201      	movgt	r2, #1
 8007d14:	4413      	add	r3, r2
 8007d16:	e7e0      	b.n	8007cda <_printf_float+0x192>
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	055a      	lsls	r2, r3, #21
 8007d1c:	d407      	bmi.n	8007d2e <_printf_float+0x1e6>
 8007d1e:	6923      	ldr	r3, [r4, #16]
 8007d20:	4642      	mov	r2, r8
 8007d22:	4631      	mov	r1, r6
 8007d24:	4628      	mov	r0, r5
 8007d26:	47b8      	blx	r7
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d12b      	bne.n	8007d84 <_printf_float+0x23c>
 8007d2c:	e767      	b.n	8007bfe <_printf_float+0xb6>
 8007d2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d32:	f240 80dd 	bls.w	8007ef0 <_printf_float+0x3a8>
 8007d36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f7f8 fe9b 	bl	8000a78 <__aeabi_dcmpeq>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d033      	beq.n	8007dae <_printf_float+0x266>
 8007d46:	4a37      	ldr	r2, [pc, #220]	@ (8007e24 <_printf_float+0x2dc>)
 8007d48:	2301      	movs	r3, #1
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	f43f af54 	beq.w	8007bfe <_printf_float+0xb6>
 8007d56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d5a:	4543      	cmp	r3, r8
 8007d5c:	db02      	blt.n	8007d64 <_printf_float+0x21c>
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	07d8      	lsls	r0, r3, #31
 8007d62:	d50f      	bpl.n	8007d84 <_printf_float+0x23c>
 8007d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	47b8      	blx	r7
 8007d6e:	3001      	adds	r0, #1
 8007d70:	f43f af45 	beq.w	8007bfe <_printf_float+0xb6>
 8007d74:	f04f 0900 	mov.w	r9, #0
 8007d78:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d7c:	f104 0a1a 	add.w	sl, r4, #26
 8007d80:	45c8      	cmp	r8, r9
 8007d82:	dc09      	bgt.n	8007d98 <_printf_float+0x250>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	079b      	lsls	r3, r3, #30
 8007d88:	f100 8103 	bmi.w	8007f92 <_printf_float+0x44a>
 8007d8c:	68e0      	ldr	r0, [r4, #12]
 8007d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d90:	4298      	cmp	r0, r3
 8007d92:	bfb8      	it	lt
 8007d94:	4618      	movlt	r0, r3
 8007d96:	e734      	b.n	8007c02 <_printf_float+0xba>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4652      	mov	r2, sl
 8007d9c:	4631      	mov	r1, r6
 8007d9e:	4628      	mov	r0, r5
 8007da0:	47b8      	blx	r7
 8007da2:	3001      	adds	r0, #1
 8007da4:	f43f af2b 	beq.w	8007bfe <_printf_float+0xb6>
 8007da8:	f109 0901 	add.w	r9, r9, #1
 8007dac:	e7e8      	b.n	8007d80 <_printf_float+0x238>
 8007dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	dc39      	bgt.n	8007e28 <_printf_float+0x2e0>
 8007db4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e24 <_printf_float+0x2dc>)
 8007db6:	2301      	movs	r3, #1
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f af1d 	beq.w	8007bfe <_printf_float+0xb6>
 8007dc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007dc8:	ea59 0303 	orrs.w	r3, r9, r3
 8007dcc:	d102      	bne.n	8007dd4 <_printf_float+0x28c>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	07d9      	lsls	r1, r3, #31
 8007dd2:	d5d7      	bpl.n	8007d84 <_printf_float+0x23c>
 8007dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f af0d 	beq.w	8007bfe <_printf_float+0xb6>
 8007de4:	f04f 0a00 	mov.w	sl, #0
 8007de8:	f104 0b1a 	add.w	fp, r4, #26
 8007dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dee:	425b      	negs	r3, r3
 8007df0:	4553      	cmp	r3, sl
 8007df2:	dc01      	bgt.n	8007df8 <_printf_float+0x2b0>
 8007df4:	464b      	mov	r3, r9
 8007df6:	e793      	b.n	8007d20 <_printf_float+0x1d8>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	465a      	mov	r2, fp
 8007dfc:	4631      	mov	r1, r6
 8007dfe:	4628      	mov	r0, r5
 8007e00:	47b8      	blx	r7
 8007e02:	3001      	adds	r0, #1
 8007e04:	f43f aefb 	beq.w	8007bfe <_printf_float+0xb6>
 8007e08:	f10a 0a01 	add.w	sl, sl, #1
 8007e0c:	e7ee      	b.n	8007dec <_printf_float+0x2a4>
 8007e0e:	bf00      	nop
 8007e10:	7fefffff 	.word	0x7fefffff
 8007e14:	0800aa40 	.word	0x0800aa40
 8007e18:	0800aa44 	.word	0x0800aa44
 8007e1c:	0800aa48 	.word	0x0800aa48
 8007e20:	0800aa4c 	.word	0x0800aa4c
 8007e24:	0800aa50 	.word	0x0800aa50
 8007e28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e2e:	4553      	cmp	r3, sl
 8007e30:	bfa8      	it	ge
 8007e32:	4653      	movge	r3, sl
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	4699      	mov	r9, r3
 8007e38:	dc36      	bgt.n	8007ea8 <_printf_float+0x360>
 8007e3a:	f04f 0b00 	mov.w	fp, #0
 8007e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e42:	f104 021a 	add.w	r2, r4, #26
 8007e46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e48:	9306      	str	r3, [sp, #24]
 8007e4a:	eba3 0309 	sub.w	r3, r3, r9
 8007e4e:	455b      	cmp	r3, fp
 8007e50:	dc31      	bgt.n	8007eb6 <_printf_float+0x36e>
 8007e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e54:	459a      	cmp	sl, r3
 8007e56:	dc3a      	bgt.n	8007ece <_printf_float+0x386>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	07da      	lsls	r2, r3, #31
 8007e5c:	d437      	bmi.n	8007ece <_printf_float+0x386>
 8007e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e60:	ebaa 0903 	sub.w	r9, sl, r3
 8007e64:	9b06      	ldr	r3, [sp, #24]
 8007e66:	ebaa 0303 	sub.w	r3, sl, r3
 8007e6a:	4599      	cmp	r9, r3
 8007e6c:	bfa8      	it	ge
 8007e6e:	4699      	movge	r9, r3
 8007e70:	f1b9 0f00 	cmp.w	r9, #0
 8007e74:	dc33      	bgt.n	8007ede <_printf_float+0x396>
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e7e:	f104 0b1a 	add.w	fp, r4, #26
 8007e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e84:	ebaa 0303 	sub.w	r3, sl, r3
 8007e88:	eba3 0309 	sub.w	r3, r3, r9
 8007e8c:	4543      	cmp	r3, r8
 8007e8e:	f77f af79 	ble.w	8007d84 <_printf_float+0x23c>
 8007e92:	2301      	movs	r3, #1
 8007e94:	465a      	mov	r2, fp
 8007e96:	4631      	mov	r1, r6
 8007e98:	4628      	mov	r0, r5
 8007e9a:	47b8      	blx	r7
 8007e9c:	3001      	adds	r0, #1
 8007e9e:	f43f aeae 	beq.w	8007bfe <_printf_float+0xb6>
 8007ea2:	f108 0801 	add.w	r8, r8, #1
 8007ea6:	e7ec      	b.n	8007e82 <_printf_float+0x33a>
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	4631      	mov	r1, r6
 8007eac:	4628      	mov	r0, r5
 8007eae:	47b8      	blx	r7
 8007eb0:	3001      	adds	r0, #1
 8007eb2:	d1c2      	bne.n	8007e3a <_printf_float+0x2f2>
 8007eb4:	e6a3      	b.n	8007bfe <_printf_float+0xb6>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	9206      	str	r2, [sp, #24]
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f43f ae9c 	beq.w	8007bfe <_printf_float+0xb6>
 8007ec6:	9a06      	ldr	r2, [sp, #24]
 8007ec8:	f10b 0b01 	add.w	fp, fp, #1
 8007ecc:	e7bb      	b.n	8007e46 <_printf_float+0x2fe>
 8007ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	47b8      	blx	r7
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d1c0      	bne.n	8007e5e <_printf_float+0x316>
 8007edc:	e68f      	b.n	8007bfe <_printf_float+0xb6>
 8007ede:	9a06      	ldr	r2, [sp, #24]
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	4442      	add	r2, r8
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	d1c3      	bne.n	8007e76 <_printf_float+0x32e>
 8007eee:	e686      	b.n	8007bfe <_printf_float+0xb6>
 8007ef0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ef4:	f1ba 0f01 	cmp.w	sl, #1
 8007ef8:	dc01      	bgt.n	8007efe <_printf_float+0x3b6>
 8007efa:	07db      	lsls	r3, r3, #31
 8007efc:	d536      	bpl.n	8007f6c <_printf_float+0x424>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4642      	mov	r2, r8
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	47b8      	blx	r7
 8007f08:	3001      	adds	r0, #1
 8007f0a:	f43f ae78 	beq.w	8007bfe <_printf_float+0xb6>
 8007f0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f12:	4631      	mov	r1, r6
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b8      	blx	r7
 8007f18:	3001      	adds	r0, #1
 8007f1a:	f43f ae70 	beq.w	8007bfe <_printf_float+0xb6>
 8007f1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f22:	2200      	movs	r2, #0
 8007f24:	2300      	movs	r3, #0
 8007f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f2a:	f7f8 fda5 	bl	8000a78 <__aeabi_dcmpeq>
 8007f2e:	b9c0      	cbnz	r0, 8007f62 <_printf_float+0x41a>
 8007f30:	4653      	mov	r3, sl
 8007f32:	f108 0201 	add.w	r2, r8, #1
 8007f36:	4631      	mov	r1, r6
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b8      	blx	r7
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d10c      	bne.n	8007f5a <_printf_float+0x412>
 8007f40:	e65d      	b.n	8007bfe <_printf_float+0xb6>
 8007f42:	2301      	movs	r3, #1
 8007f44:	465a      	mov	r2, fp
 8007f46:	4631      	mov	r1, r6
 8007f48:	4628      	mov	r0, r5
 8007f4a:	47b8      	blx	r7
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	f43f ae56 	beq.w	8007bfe <_printf_float+0xb6>
 8007f52:	f108 0801 	add.w	r8, r8, #1
 8007f56:	45d0      	cmp	r8, sl
 8007f58:	dbf3      	blt.n	8007f42 <_printf_float+0x3fa>
 8007f5a:	464b      	mov	r3, r9
 8007f5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f60:	e6df      	b.n	8007d22 <_printf_float+0x1da>
 8007f62:	f04f 0800 	mov.w	r8, #0
 8007f66:	f104 0b1a 	add.w	fp, r4, #26
 8007f6a:	e7f4      	b.n	8007f56 <_printf_float+0x40e>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	4642      	mov	r2, r8
 8007f70:	e7e1      	b.n	8007f36 <_printf_float+0x3ee>
 8007f72:	2301      	movs	r3, #1
 8007f74:	464a      	mov	r2, r9
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f43f ae3e 	beq.w	8007bfe <_printf_float+0xb6>
 8007f82:	f108 0801 	add.w	r8, r8, #1
 8007f86:	68e3      	ldr	r3, [r4, #12]
 8007f88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f8a:	1a5b      	subs	r3, r3, r1
 8007f8c:	4543      	cmp	r3, r8
 8007f8e:	dcf0      	bgt.n	8007f72 <_printf_float+0x42a>
 8007f90:	e6fc      	b.n	8007d8c <_printf_float+0x244>
 8007f92:	f04f 0800 	mov.w	r8, #0
 8007f96:	f104 0919 	add.w	r9, r4, #25
 8007f9a:	e7f4      	b.n	8007f86 <_printf_float+0x43e>

08007f9c <_printf_common>:
 8007f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa0:	4616      	mov	r6, r2
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	688a      	ldr	r2, [r1, #8]
 8007fa6:	690b      	ldr	r3, [r1, #16]
 8007fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fac:	4293      	cmp	r3, r2
 8007fae:	bfb8      	it	lt
 8007fb0:	4613      	movlt	r3, r2
 8007fb2:	6033      	str	r3, [r6, #0]
 8007fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fb8:	4607      	mov	r7, r0
 8007fba:	460c      	mov	r4, r1
 8007fbc:	b10a      	cbz	r2, 8007fc2 <_printf_common+0x26>
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	6033      	str	r3, [r6, #0]
 8007fc2:	6823      	ldr	r3, [r4, #0]
 8007fc4:	0699      	lsls	r1, r3, #26
 8007fc6:	bf42      	ittt	mi
 8007fc8:	6833      	ldrmi	r3, [r6, #0]
 8007fca:	3302      	addmi	r3, #2
 8007fcc:	6033      	strmi	r3, [r6, #0]
 8007fce:	6825      	ldr	r5, [r4, #0]
 8007fd0:	f015 0506 	ands.w	r5, r5, #6
 8007fd4:	d106      	bne.n	8007fe4 <_printf_common+0x48>
 8007fd6:	f104 0a19 	add.w	sl, r4, #25
 8007fda:	68e3      	ldr	r3, [r4, #12]
 8007fdc:	6832      	ldr	r2, [r6, #0]
 8007fde:	1a9b      	subs	r3, r3, r2
 8007fe0:	42ab      	cmp	r3, r5
 8007fe2:	dc26      	bgt.n	8008032 <_printf_common+0x96>
 8007fe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	3b00      	subs	r3, #0
 8007fec:	bf18      	it	ne
 8007fee:	2301      	movne	r3, #1
 8007ff0:	0692      	lsls	r2, r2, #26
 8007ff2:	d42b      	bmi.n	800804c <_printf_common+0xb0>
 8007ff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	47c8      	blx	r9
 8007ffe:	3001      	adds	r0, #1
 8008000:	d01e      	beq.n	8008040 <_printf_common+0xa4>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	6922      	ldr	r2, [r4, #16]
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	2b04      	cmp	r3, #4
 800800c:	bf02      	ittt	eq
 800800e:	68e5      	ldreq	r5, [r4, #12]
 8008010:	6833      	ldreq	r3, [r6, #0]
 8008012:	1aed      	subeq	r5, r5, r3
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	bf0c      	ite	eq
 8008018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800801c:	2500      	movne	r5, #0
 800801e:	4293      	cmp	r3, r2
 8008020:	bfc4      	itt	gt
 8008022:	1a9b      	subgt	r3, r3, r2
 8008024:	18ed      	addgt	r5, r5, r3
 8008026:	2600      	movs	r6, #0
 8008028:	341a      	adds	r4, #26
 800802a:	42b5      	cmp	r5, r6
 800802c:	d11a      	bne.n	8008064 <_printf_common+0xc8>
 800802e:	2000      	movs	r0, #0
 8008030:	e008      	b.n	8008044 <_printf_common+0xa8>
 8008032:	2301      	movs	r3, #1
 8008034:	4652      	mov	r2, sl
 8008036:	4641      	mov	r1, r8
 8008038:	4638      	mov	r0, r7
 800803a:	47c8      	blx	r9
 800803c:	3001      	adds	r0, #1
 800803e:	d103      	bne.n	8008048 <_printf_common+0xac>
 8008040:	f04f 30ff 	mov.w	r0, #4294967295
 8008044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008048:	3501      	adds	r5, #1
 800804a:	e7c6      	b.n	8007fda <_printf_common+0x3e>
 800804c:	18e1      	adds	r1, r4, r3
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	2030      	movs	r0, #48	@ 0x30
 8008052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008056:	4422      	add	r2, r4
 8008058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800805c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008060:	3302      	adds	r3, #2
 8008062:	e7c7      	b.n	8007ff4 <_printf_common+0x58>
 8008064:	2301      	movs	r3, #1
 8008066:	4622      	mov	r2, r4
 8008068:	4641      	mov	r1, r8
 800806a:	4638      	mov	r0, r7
 800806c:	47c8      	blx	r9
 800806e:	3001      	adds	r0, #1
 8008070:	d0e6      	beq.n	8008040 <_printf_common+0xa4>
 8008072:	3601      	adds	r6, #1
 8008074:	e7d9      	b.n	800802a <_printf_common+0x8e>
	...

08008078 <_printf_i>:
 8008078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	7e0f      	ldrb	r7, [r1, #24]
 800807e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008080:	2f78      	cmp	r7, #120	@ 0x78
 8008082:	4691      	mov	r9, r2
 8008084:	4680      	mov	r8, r0
 8008086:	460c      	mov	r4, r1
 8008088:	469a      	mov	sl, r3
 800808a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800808e:	d807      	bhi.n	80080a0 <_printf_i+0x28>
 8008090:	2f62      	cmp	r7, #98	@ 0x62
 8008092:	d80a      	bhi.n	80080aa <_printf_i+0x32>
 8008094:	2f00      	cmp	r7, #0
 8008096:	f000 80d2 	beq.w	800823e <_printf_i+0x1c6>
 800809a:	2f58      	cmp	r7, #88	@ 0x58
 800809c:	f000 80b9 	beq.w	8008212 <_printf_i+0x19a>
 80080a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080a8:	e03a      	b.n	8008120 <_printf_i+0xa8>
 80080aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080ae:	2b15      	cmp	r3, #21
 80080b0:	d8f6      	bhi.n	80080a0 <_printf_i+0x28>
 80080b2:	a101      	add	r1, pc, #4	@ (adr r1, 80080b8 <_printf_i+0x40>)
 80080b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080b8:	08008111 	.word	0x08008111
 80080bc:	08008125 	.word	0x08008125
 80080c0:	080080a1 	.word	0x080080a1
 80080c4:	080080a1 	.word	0x080080a1
 80080c8:	080080a1 	.word	0x080080a1
 80080cc:	080080a1 	.word	0x080080a1
 80080d0:	08008125 	.word	0x08008125
 80080d4:	080080a1 	.word	0x080080a1
 80080d8:	080080a1 	.word	0x080080a1
 80080dc:	080080a1 	.word	0x080080a1
 80080e0:	080080a1 	.word	0x080080a1
 80080e4:	08008225 	.word	0x08008225
 80080e8:	0800814f 	.word	0x0800814f
 80080ec:	080081df 	.word	0x080081df
 80080f0:	080080a1 	.word	0x080080a1
 80080f4:	080080a1 	.word	0x080080a1
 80080f8:	08008247 	.word	0x08008247
 80080fc:	080080a1 	.word	0x080080a1
 8008100:	0800814f 	.word	0x0800814f
 8008104:	080080a1 	.word	0x080080a1
 8008108:	080080a1 	.word	0x080080a1
 800810c:	080081e7 	.word	0x080081e7
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6032      	str	r2, [r6, #0]
 8008118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800811c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008120:	2301      	movs	r3, #1
 8008122:	e09d      	b.n	8008260 <_printf_i+0x1e8>
 8008124:	6833      	ldr	r3, [r6, #0]
 8008126:	6820      	ldr	r0, [r4, #0]
 8008128:	1d19      	adds	r1, r3, #4
 800812a:	6031      	str	r1, [r6, #0]
 800812c:	0606      	lsls	r6, r0, #24
 800812e:	d501      	bpl.n	8008134 <_printf_i+0xbc>
 8008130:	681d      	ldr	r5, [r3, #0]
 8008132:	e003      	b.n	800813c <_printf_i+0xc4>
 8008134:	0645      	lsls	r5, r0, #25
 8008136:	d5fb      	bpl.n	8008130 <_printf_i+0xb8>
 8008138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800813c:	2d00      	cmp	r5, #0
 800813e:	da03      	bge.n	8008148 <_printf_i+0xd0>
 8008140:	232d      	movs	r3, #45	@ 0x2d
 8008142:	426d      	negs	r5, r5
 8008144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008148:	4859      	ldr	r0, [pc, #356]	@ (80082b0 <_printf_i+0x238>)
 800814a:	230a      	movs	r3, #10
 800814c:	e011      	b.n	8008172 <_printf_i+0xfa>
 800814e:	6821      	ldr	r1, [r4, #0]
 8008150:	6833      	ldr	r3, [r6, #0]
 8008152:	0608      	lsls	r0, r1, #24
 8008154:	f853 5b04 	ldr.w	r5, [r3], #4
 8008158:	d402      	bmi.n	8008160 <_printf_i+0xe8>
 800815a:	0649      	lsls	r1, r1, #25
 800815c:	bf48      	it	mi
 800815e:	b2ad      	uxthmi	r5, r5
 8008160:	2f6f      	cmp	r7, #111	@ 0x6f
 8008162:	4853      	ldr	r0, [pc, #332]	@ (80082b0 <_printf_i+0x238>)
 8008164:	6033      	str	r3, [r6, #0]
 8008166:	bf14      	ite	ne
 8008168:	230a      	movne	r3, #10
 800816a:	2308      	moveq	r3, #8
 800816c:	2100      	movs	r1, #0
 800816e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008172:	6866      	ldr	r6, [r4, #4]
 8008174:	60a6      	str	r6, [r4, #8]
 8008176:	2e00      	cmp	r6, #0
 8008178:	bfa2      	ittt	ge
 800817a:	6821      	ldrge	r1, [r4, #0]
 800817c:	f021 0104 	bicge.w	r1, r1, #4
 8008180:	6021      	strge	r1, [r4, #0]
 8008182:	b90d      	cbnz	r5, 8008188 <_printf_i+0x110>
 8008184:	2e00      	cmp	r6, #0
 8008186:	d04b      	beq.n	8008220 <_printf_i+0x1a8>
 8008188:	4616      	mov	r6, r2
 800818a:	fbb5 f1f3 	udiv	r1, r5, r3
 800818e:	fb03 5711 	mls	r7, r3, r1, r5
 8008192:	5dc7      	ldrb	r7, [r0, r7]
 8008194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008198:	462f      	mov	r7, r5
 800819a:	42bb      	cmp	r3, r7
 800819c:	460d      	mov	r5, r1
 800819e:	d9f4      	bls.n	800818a <_printf_i+0x112>
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d10b      	bne.n	80081bc <_printf_i+0x144>
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	07df      	lsls	r7, r3, #31
 80081a8:	d508      	bpl.n	80081bc <_printf_i+0x144>
 80081aa:	6923      	ldr	r3, [r4, #16]
 80081ac:	6861      	ldr	r1, [r4, #4]
 80081ae:	4299      	cmp	r1, r3
 80081b0:	bfde      	ittt	le
 80081b2:	2330      	movle	r3, #48	@ 0x30
 80081b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081bc:	1b92      	subs	r2, r2, r6
 80081be:	6122      	str	r2, [r4, #16]
 80081c0:	f8cd a000 	str.w	sl, [sp]
 80081c4:	464b      	mov	r3, r9
 80081c6:	aa03      	add	r2, sp, #12
 80081c8:	4621      	mov	r1, r4
 80081ca:	4640      	mov	r0, r8
 80081cc:	f7ff fee6 	bl	8007f9c <_printf_common>
 80081d0:	3001      	adds	r0, #1
 80081d2:	d14a      	bne.n	800826a <_printf_i+0x1f2>
 80081d4:	f04f 30ff 	mov.w	r0, #4294967295
 80081d8:	b004      	add	sp, #16
 80081da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	f043 0320 	orr.w	r3, r3, #32
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	4833      	ldr	r0, [pc, #204]	@ (80082b4 <_printf_i+0x23c>)
 80081e8:	2778      	movs	r7, #120	@ 0x78
 80081ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	6831      	ldr	r1, [r6, #0]
 80081f2:	061f      	lsls	r7, r3, #24
 80081f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80081f8:	d402      	bmi.n	8008200 <_printf_i+0x188>
 80081fa:	065f      	lsls	r7, r3, #25
 80081fc:	bf48      	it	mi
 80081fe:	b2ad      	uxthmi	r5, r5
 8008200:	6031      	str	r1, [r6, #0]
 8008202:	07d9      	lsls	r1, r3, #31
 8008204:	bf44      	itt	mi
 8008206:	f043 0320 	orrmi.w	r3, r3, #32
 800820a:	6023      	strmi	r3, [r4, #0]
 800820c:	b11d      	cbz	r5, 8008216 <_printf_i+0x19e>
 800820e:	2310      	movs	r3, #16
 8008210:	e7ac      	b.n	800816c <_printf_i+0xf4>
 8008212:	4827      	ldr	r0, [pc, #156]	@ (80082b0 <_printf_i+0x238>)
 8008214:	e7e9      	b.n	80081ea <_printf_i+0x172>
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	f023 0320 	bic.w	r3, r3, #32
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	e7f6      	b.n	800820e <_printf_i+0x196>
 8008220:	4616      	mov	r6, r2
 8008222:	e7bd      	b.n	80081a0 <_printf_i+0x128>
 8008224:	6833      	ldr	r3, [r6, #0]
 8008226:	6825      	ldr	r5, [r4, #0]
 8008228:	6961      	ldr	r1, [r4, #20]
 800822a:	1d18      	adds	r0, r3, #4
 800822c:	6030      	str	r0, [r6, #0]
 800822e:	062e      	lsls	r6, r5, #24
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	d501      	bpl.n	8008238 <_printf_i+0x1c0>
 8008234:	6019      	str	r1, [r3, #0]
 8008236:	e002      	b.n	800823e <_printf_i+0x1c6>
 8008238:	0668      	lsls	r0, r5, #25
 800823a:	d5fb      	bpl.n	8008234 <_printf_i+0x1bc>
 800823c:	8019      	strh	r1, [r3, #0]
 800823e:	2300      	movs	r3, #0
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	4616      	mov	r6, r2
 8008244:	e7bc      	b.n	80081c0 <_printf_i+0x148>
 8008246:	6833      	ldr	r3, [r6, #0]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	6032      	str	r2, [r6, #0]
 800824c:	681e      	ldr	r6, [r3, #0]
 800824e:	6862      	ldr	r2, [r4, #4]
 8008250:	2100      	movs	r1, #0
 8008252:	4630      	mov	r0, r6
 8008254:	f7f7 ff94 	bl	8000180 <memchr>
 8008258:	b108      	cbz	r0, 800825e <_printf_i+0x1e6>
 800825a:	1b80      	subs	r0, r0, r6
 800825c:	6060      	str	r0, [r4, #4]
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	2300      	movs	r3, #0
 8008264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008268:	e7aa      	b.n	80081c0 <_printf_i+0x148>
 800826a:	6923      	ldr	r3, [r4, #16]
 800826c:	4632      	mov	r2, r6
 800826e:	4649      	mov	r1, r9
 8008270:	4640      	mov	r0, r8
 8008272:	47d0      	blx	sl
 8008274:	3001      	adds	r0, #1
 8008276:	d0ad      	beq.n	80081d4 <_printf_i+0x15c>
 8008278:	6823      	ldr	r3, [r4, #0]
 800827a:	079b      	lsls	r3, r3, #30
 800827c:	d413      	bmi.n	80082a6 <_printf_i+0x22e>
 800827e:	68e0      	ldr	r0, [r4, #12]
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	4298      	cmp	r0, r3
 8008284:	bfb8      	it	lt
 8008286:	4618      	movlt	r0, r3
 8008288:	e7a6      	b.n	80081d8 <_printf_i+0x160>
 800828a:	2301      	movs	r3, #1
 800828c:	4632      	mov	r2, r6
 800828e:	4649      	mov	r1, r9
 8008290:	4640      	mov	r0, r8
 8008292:	47d0      	blx	sl
 8008294:	3001      	adds	r0, #1
 8008296:	d09d      	beq.n	80081d4 <_printf_i+0x15c>
 8008298:	3501      	adds	r5, #1
 800829a:	68e3      	ldr	r3, [r4, #12]
 800829c:	9903      	ldr	r1, [sp, #12]
 800829e:	1a5b      	subs	r3, r3, r1
 80082a0:	42ab      	cmp	r3, r5
 80082a2:	dcf2      	bgt.n	800828a <_printf_i+0x212>
 80082a4:	e7eb      	b.n	800827e <_printf_i+0x206>
 80082a6:	2500      	movs	r5, #0
 80082a8:	f104 0619 	add.w	r6, r4, #25
 80082ac:	e7f5      	b.n	800829a <_printf_i+0x222>
 80082ae:	bf00      	nop
 80082b0:	0800aa52 	.word	0x0800aa52
 80082b4:	0800aa63 	.word	0x0800aa63

080082b8 <std>:
 80082b8:	2300      	movs	r3, #0
 80082ba:	b510      	push	{r4, lr}
 80082bc:	4604      	mov	r4, r0
 80082be:	e9c0 3300 	strd	r3, r3, [r0]
 80082c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082c6:	6083      	str	r3, [r0, #8]
 80082c8:	8181      	strh	r1, [r0, #12]
 80082ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80082cc:	81c2      	strh	r2, [r0, #14]
 80082ce:	6183      	str	r3, [r0, #24]
 80082d0:	4619      	mov	r1, r3
 80082d2:	2208      	movs	r2, #8
 80082d4:	305c      	adds	r0, #92	@ 0x5c
 80082d6:	f000 f9f9 	bl	80086cc <memset>
 80082da:	4b0d      	ldr	r3, [pc, #52]	@ (8008310 <std+0x58>)
 80082dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80082de:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <std+0x5c>)
 80082e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80082e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <std+0x60>)
 80082e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80082e6:	4b0d      	ldr	r3, [pc, #52]	@ (800831c <std+0x64>)
 80082e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80082ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008320 <std+0x68>)
 80082ec:	6224      	str	r4, [r4, #32]
 80082ee:	429c      	cmp	r4, r3
 80082f0:	d006      	beq.n	8008300 <std+0x48>
 80082f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80082f6:	4294      	cmp	r4, r2
 80082f8:	d002      	beq.n	8008300 <std+0x48>
 80082fa:	33d0      	adds	r3, #208	@ 0xd0
 80082fc:	429c      	cmp	r4, r3
 80082fe:	d105      	bne.n	800830c <std+0x54>
 8008300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008308:	f000 ba5c 	b.w	80087c4 <__retarget_lock_init_recursive>
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	0800851d 	.word	0x0800851d
 8008314:	0800853f 	.word	0x0800853f
 8008318:	08008577 	.word	0x08008577
 800831c:	0800859b 	.word	0x0800859b
 8008320:	20000380 	.word	0x20000380

08008324 <stdio_exit_handler>:
 8008324:	4a02      	ldr	r2, [pc, #8]	@ (8008330 <stdio_exit_handler+0xc>)
 8008326:	4903      	ldr	r1, [pc, #12]	@ (8008334 <stdio_exit_handler+0x10>)
 8008328:	4803      	ldr	r0, [pc, #12]	@ (8008338 <stdio_exit_handler+0x14>)
 800832a:	f000 b869 	b.w	8008400 <_fwalk_sglue>
 800832e:	bf00      	nop
 8008330:	2000002c 	.word	0x2000002c
 8008334:	0800a111 	.word	0x0800a111
 8008338:	2000003c 	.word	0x2000003c

0800833c <cleanup_stdio>:
 800833c:	6841      	ldr	r1, [r0, #4]
 800833e:	4b0c      	ldr	r3, [pc, #48]	@ (8008370 <cleanup_stdio+0x34>)
 8008340:	4299      	cmp	r1, r3
 8008342:	b510      	push	{r4, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	d001      	beq.n	800834c <cleanup_stdio+0x10>
 8008348:	f001 fee2 	bl	800a110 <_fflush_r>
 800834c:	68a1      	ldr	r1, [r4, #8]
 800834e:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <cleanup_stdio+0x38>)
 8008350:	4299      	cmp	r1, r3
 8008352:	d002      	beq.n	800835a <cleanup_stdio+0x1e>
 8008354:	4620      	mov	r0, r4
 8008356:	f001 fedb 	bl	800a110 <_fflush_r>
 800835a:	68e1      	ldr	r1, [r4, #12]
 800835c:	4b06      	ldr	r3, [pc, #24]	@ (8008378 <cleanup_stdio+0x3c>)
 800835e:	4299      	cmp	r1, r3
 8008360:	d004      	beq.n	800836c <cleanup_stdio+0x30>
 8008362:	4620      	mov	r0, r4
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008368:	f001 bed2 	b.w	800a110 <_fflush_r>
 800836c:	bd10      	pop	{r4, pc}
 800836e:	bf00      	nop
 8008370:	20000380 	.word	0x20000380
 8008374:	200003e8 	.word	0x200003e8
 8008378:	20000450 	.word	0x20000450

0800837c <global_stdio_init.part.0>:
 800837c:	b510      	push	{r4, lr}
 800837e:	4b0b      	ldr	r3, [pc, #44]	@ (80083ac <global_stdio_init.part.0+0x30>)
 8008380:	4c0b      	ldr	r4, [pc, #44]	@ (80083b0 <global_stdio_init.part.0+0x34>)
 8008382:	4a0c      	ldr	r2, [pc, #48]	@ (80083b4 <global_stdio_init.part.0+0x38>)
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	4620      	mov	r0, r4
 8008388:	2200      	movs	r2, #0
 800838a:	2104      	movs	r1, #4
 800838c:	f7ff ff94 	bl	80082b8 <std>
 8008390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008394:	2201      	movs	r2, #1
 8008396:	2109      	movs	r1, #9
 8008398:	f7ff ff8e 	bl	80082b8 <std>
 800839c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083a0:	2202      	movs	r2, #2
 80083a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083a6:	2112      	movs	r1, #18
 80083a8:	f7ff bf86 	b.w	80082b8 <std>
 80083ac:	200004b8 	.word	0x200004b8
 80083b0:	20000380 	.word	0x20000380
 80083b4:	08008325 	.word	0x08008325

080083b8 <__sfp_lock_acquire>:
 80083b8:	4801      	ldr	r0, [pc, #4]	@ (80083c0 <__sfp_lock_acquire+0x8>)
 80083ba:	f000 ba04 	b.w	80087c6 <__retarget_lock_acquire_recursive>
 80083be:	bf00      	nop
 80083c0:	200004c1 	.word	0x200004c1

080083c4 <__sfp_lock_release>:
 80083c4:	4801      	ldr	r0, [pc, #4]	@ (80083cc <__sfp_lock_release+0x8>)
 80083c6:	f000 b9ff 	b.w	80087c8 <__retarget_lock_release_recursive>
 80083ca:	bf00      	nop
 80083cc:	200004c1 	.word	0x200004c1

080083d0 <__sinit>:
 80083d0:	b510      	push	{r4, lr}
 80083d2:	4604      	mov	r4, r0
 80083d4:	f7ff fff0 	bl	80083b8 <__sfp_lock_acquire>
 80083d8:	6a23      	ldr	r3, [r4, #32]
 80083da:	b11b      	cbz	r3, 80083e4 <__sinit+0x14>
 80083dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e0:	f7ff bff0 	b.w	80083c4 <__sfp_lock_release>
 80083e4:	4b04      	ldr	r3, [pc, #16]	@ (80083f8 <__sinit+0x28>)
 80083e6:	6223      	str	r3, [r4, #32]
 80083e8:	4b04      	ldr	r3, [pc, #16]	@ (80083fc <__sinit+0x2c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d1f5      	bne.n	80083dc <__sinit+0xc>
 80083f0:	f7ff ffc4 	bl	800837c <global_stdio_init.part.0>
 80083f4:	e7f2      	b.n	80083dc <__sinit+0xc>
 80083f6:	bf00      	nop
 80083f8:	0800833d 	.word	0x0800833d
 80083fc:	200004b8 	.word	0x200004b8

08008400 <_fwalk_sglue>:
 8008400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008404:	4607      	mov	r7, r0
 8008406:	4688      	mov	r8, r1
 8008408:	4614      	mov	r4, r2
 800840a:	2600      	movs	r6, #0
 800840c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008410:	f1b9 0901 	subs.w	r9, r9, #1
 8008414:	d505      	bpl.n	8008422 <_fwalk_sglue+0x22>
 8008416:	6824      	ldr	r4, [r4, #0]
 8008418:	2c00      	cmp	r4, #0
 800841a:	d1f7      	bne.n	800840c <_fwalk_sglue+0xc>
 800841c:	4630      	mov	r0, r6
 800841e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008422:	89ab      	ldrh	r3, [r5, #12]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d907      	bls.n	8008438 <_fwalk_sglue+0x38>
 8008428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800842c:	3301      	adds	r3, #1
 800842e:	d003      	beq.n	8008438 <_fwalk_sglue+0x38>
 8008430:	4629      	mov	r1, r5
 8008432:	4638      	mov	r0, r7
 8008434:	47c0      	blx	r8
 8008436:	4306      	orrs	r6, r0
 8008438:	3568      	adds	r5, #104	@ 0x68
 800843a:	e7e9      	b.n	8008410 <_fwalk_sglue+0x10>

0800843c <iprintf>:
 800843c:	b40f      	push	{r0, r1, r2, r3}
 800843e:	b507      	push	{r0, r1, r2, lr}
 8008440:	4906      	ldr	r1, [pc, #24]	@ (800845c <iprintf+0x20>)
 8008442:	ab04      	add	r3, sp, #16
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	f853 2b04 	ldr.w	r2, [r3], #4
 800844a:	6881      	ldr	r1, [r0, #8]
 800844c:	9301      	str	r3, [sp, #4]
 800844e:	f001 fcc3 	bl	8009dd8 <_vfiprintf_r>
 8008452:	b003      	add	sp, #12
 8008454:	f85d eb04 	ldr.w	lr, [sp], #4
 8008458:	b004      	add	sp, #16
 800845a:	4770      	bx	lr
 800845c:	20000038 	.word	0x20000038

08008460 <_puts_r>:
 8008460:	6a03      	ldr	r3, [r0, #32]
 8008462:	b570      	push	{r4, r5, r6, lr}
 8008464:	6884      	ldr	r4, [r0, #8]
 8008466:	4605      	mov	r5, r0
 8008468:	460e      	mov	r6, r1
 800846a:	b90b      	cbnz	r3, 8008470 <_puts_r+0x10>
 800846c:	f7ff ffb0 	bl	80083d0 <__sinit>
 8008470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008472:	07db      	lsls	r3, r3, #31
 8008474:	d405      	bmi.n	8008482 <_puts_r+0x22>
 8008476:	89a3      	ldrh	r3, [r4, #12]
 8008478:	0598      	lsls	r0, r3, #22
 800847a:	d402      	bmi.n	8008482 <_puts_r+0x22>
 800847c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800847e:	f000 f9a2 	bl	80087c6 <__retarget_lock_acquire_recursive>
 8008482:	89a3      	ldrh	r3, [r4, #12]
 8008484:	0719      	lsls	r1, r3, #28
 8008486:	d502      	bpl.n	800848e <_puts_r+0x2e>
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d135      	bne.n	80084fa <_puts_r+0x9a>
 800848e:	4621      	mov	r1, r4
 8008490:	4628      	mov	r0, r5
 8008492:	f000 f8c5 	bl	8008620 <__swsetup_r>
 8008496:	b380      	cbz	r0, 80084fa <_puts_r+0x9a>
 8008498:	f04f 35ff 	mov.w	r5, #4294967295
 800849c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800849e:	07da      	lsls	r2, r3, #31
 80084a0:	d405      	bmi.n	80084ae <_puts_r+0x4e>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_puts_r+0x4e>
 80084a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084aa:	f000 f98d 	bl	80087c8 <__retarget_lock_release_recursive>
 80084ae:	4628      	mov	r0, r5
 80084b0:	bd70      	pop	{r4, r5, r6, pc}
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da04      	bge.n	80084c0 <_puts_r+0x60>
 80084b6:	69a2      	ldr	r2, [r4, #24]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	dc17      	bgt.n	80084ec <_puts_r+0x8c>
 80084bc:	290a      	cmp	r1, #10
 80084be:	d015      	beq.n	80084ec <_puts_r+0x8c>
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	7019      	strb	r1, [r3, #0]
 80084c8:	68a3      	ldr	r3, [r4, #8]
 80084ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80084ce:	3b01      	subs	r3, #1
 80084d0:	60a3      	str	r3, [r4, #8]
 80084d2:	2900      	cmp	r1, #0
 80084d4:	d1ed      	bne.n	80084b2 <_puts_r+0x52>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da11      	bge.n	80084fe <_puts_r+0x9e>
 80084da:	4622      	mov	r2, r4
 80084dc:	210a      	movs	r1, #10
 80084de:	4628      	mov	r0, r5
 80084e0:	f000 f85f 	bl	80085a2 <__swbuf_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0d7      	beq.n	8008498 <_puts_r+0x38>
 80084e8:	250a      	movs	r5, #10
 80084ea:	e7d7      	b.n	800849c <_puts_r+0x3c>
 80084ec:	4622      	mov	r2, r4
 80084ee:	4628      	mov	r0, r5
 80084f0:	f000 f857 	bl	80085a2 <__swbuf_r>
 80084f4:	3001      	adds	r0, #1
 80084f6:	d1e7      	bne.n	80084c8 <_puts_r+0x68>
 80084f8:	e7ce      	b.n	8008498 <_puts_r+0x38>
 80084fa:	3e01      	subs	r6, #1
 80084fc:	e7e4      	b.n	80084c8 <_puts_r+0x68>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	1c5a      	adds	r2, r3, #1
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	220a      	movs	r2, #10
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e7ee      	b.n	80084e8 <_puts_r+0x88>
	...

0800850c <puts>:
 800850c:	4b02      	ldr	r3, [pc, #8]	@ (8008518 <puts+0xc>)
 800850e:	4601      	mov	r1, r0
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	f7ff bfa5 	b.w	8008460 <_puts_r>
 8008516:	bf00      	nop
 8008518:	20000038 	.word	0x20000038

0800851c <__sread>:
 800851c:	b510      	push	{r4, lr}
 800851e:	460c      	mov	r4, r1
 8008520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008524:	f000 f900 	bl	8008728 <_read_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	bfab      	itete	ge
 800852c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800852e:	89a3      	ldrhlt	r3, [r4, #12]
 8008530:	181b      	addge	r3, r3, r0
 8008532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008536:	bfac      	ite	ge
 8008538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800853a:	81a3      	strhlt	r3, [r4, #12]
 800853c:	bd10      	pop	{r4, pc}

0800853e <__swrite>:
 800853e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	461f      	mov	r7, r3
 8008544:	898b      	ldrh	r3, [r1, #12]
 8008546:	05db      	lsls	r3, r3, #23
 8008548:	4605      	mov	r5, r0
 800854a:	460c      	mov	r4, r1
 800854c:	4616      	mov	r6, r2
 800854e:	d505      	bpl.n	800855c <__swrite+0x1e>
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	2302      	movs	r3, #2
 8008556:	2200      	movs	r2, #0
 8008558:	f000 f8d4 	bl	8008704 <_lseek_r>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	4632      	mov	r2, r6
 800856a:	463b      	mov	r3, r7
 800856c:	4628      	mov	r0, r5
 800856e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008572:	f000 b8eb 	b.w	800874c <_write_r>

08008576 <__sseek>:
 8008576:	b510      	push	{r4, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857e:	f000 f8c1 	bl	8008704 <_lseek_r>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	bf15      	itete	ne
 8008588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800858a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800858e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008592:	81a3      	strheq	r3, [r4, #12]
 8008594:	bf18      	it	ne
 8008596:	81a3      	strhne	r3, [r4, #12]
 8008598:	bd10      	pop	{r4, pc}

0800859a <__sclose>:
 800859a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800859e:	f000 b8a1 	b.w	80086e4 <_close_r>

080085a2 <__swbuf_r>:
 80085a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a4:	460e      	mov	r6, r1
 80085a6:	4614      	mov	r4, r2
 80085a8:	4605      	mov	r5, r0
 80085aa:	b118      	cbz	r0, 80085b4 <__swbuf_r+0x12>
 80085ac:	6a03      	ldr	r3, [r0, #32]
 80085ae:	b90b      	cbnz	r3, 80085b4 <__swbuf_r+0x12>
 80085b0:	f7ff ff0e 	bl	80083d0 <__sinit>
 80085b4:	69a3      	ldr	r3, [r4, #24]
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	071a      	lsls	r2, r3, #28
 80085bc:	d501      	bpl.n	80085c2 <__swbuf_r+0x20>
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	b943      	cbnz	r3, 80085d4 <__swbuf_r+0x32>
 80085c2:	4621      	mov	r1, r4
 80085c4:	4628      	mov	r0, r5
 80085c6:	f000 f82b 	bl	8008620 <__swsetup_r>
 80085ca:	b118      	cbz	r0, 80085d4 <__swbuf_r+0x32>
 80085cc:	f04f 37ff 	mov.w	r7, #4294967295
 80085d0:	4638      	mov	r0, r7
 80085d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	6922      	ldr	r2, [r4, #16]
 80085d8:	1a98      	subs	r0, r3, r2
 80085da:	6963      	ldr	r3, [r4, #20]
 80085dc:	b2f6      	uxtb	r6, r6
 80085de:	4283      	cmp	r3, r0
 80085e0:	4637      	mov	r7, r6
 80085e2:	dc05      	bgt.n	80085f0 <__swbuf_r+0x4e>
 80085e4:	4621      	mov	r1, r4
 80085e6:	4628      	mov	r0, r5
 80085e8:	f001 fd92 	bl	800a110 <_fflush_r>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1ed      	bne.n	80085cc <__swbuf_r+0x2a>
 80085f0:	68a3      	ldr	r3, [r4, #8]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	60a3      	str	r3, [r4, #8]
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	6022      	str	r2, [r4, #0]
 80085fc:	701e      	strb	r6, [r3, #0]
 80085fe:	6962      	ldr	r2, [r4, #20]
 8008600:	1c43      	adds	r3, r0, #1
 8008602:	429a      	cmp	r2, r3
 8008604:	d004      	beq.n	8008610 <__swbuf_r+0x6e>
 8008606:	89a3      	ldrh	r3, [r4, #12]
 8008608:	07db      	lsls	r3, r3, #31
 800860a:	d5e1      	bpl.n	80085d0 <__swbuf_r+0x2e>
 800860c:	2e0a      	cmp	r6, #10
 800860e:	d1df      	bne.n	80085d0 <__swbuf_r+0x2e>
 8008610:	4621      	mov	r1, r4
 8008612:	4628      	mov	r0, r5
 8008614:	f001 fd7c 	bl	800a110 <_fflush_r>
 8008618:	2800      	cmp	r0, #0
 800861a:	d0d9      	beq.n	80085d0 <__swbuf_r+0x2e>
 800861c:	e7d6      	b.n	80085cc <__swbuf_r+0x2a>
	...

08008620 <__swsetup_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4b29      	ldr	r3, [pc, #164]	@ (80086c8 <__swsetup_r+0xa8>)
 8008624:	4605      	mov	r5, r0
 8008626:	6818      	ldr	r0, [r3, #0]
 8008628:	460c      	mov	r4, r1
 800862a:	b118      	cbz	r0, 8008634 <__swsetup_r+0x14>
 800862c:	6a03      	ldr	r3, [r0, #32]
 800862e:	b90b      	cbnz	r3, 8008634 <__swsetup_r+0x14>
 8008630:	f7ff fece 	bl	80083d0 <__sinit>
 8008634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008638:	0719      	lsls	r1, r3, #28
 800863a:	d422      	bmi.n	8008682 <__swsetup_r+0x62>
 800863c:	06da      	lsls	r2, r3, #27
 800863e:	d407      	bmi.n	8008650 <__swsetup_r+0x30>
 8008640:	2209      	movs	r2, #9
 8008642:	602a      	str	r2, [r5, #0]
 8008644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008648:	81a3      	strh	r3, [r4, #12]
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	e033      	b.n	80086b8 <__swsetup_r+0x98>
 8008650:	0758      	lsls	r0, r3, #29
 8008652:	d512      	bpl.n	800867a <__swsetup_r+0x5a>
 8008654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008656:	b141      	cbz	r1, 800866a <__swsetup_r+0x4a>
 8008658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800865c:	4299      	cmp	r1, r3
 800865e:	d002      	beq.n	8008666 <__swsetup_r+0x46>
 8008660:	4628      	mov	r0, r5
 8008662:	f000 ff0d 	bl	8009480 <_free_r>
 8008666:	2300      	movs	r3, #0
 8008668:	6363      	str	r3, [r4, #52]	@ 0x34
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008670:	81a3      	strh	r3, [r4, #12]
 8008672:	2300      	movs	r3, #0
 8008674:	6063      	str	r3, [r4, #4]
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	6023      	str	r3, [r4, #0]
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	f043 0308 	orr.w	r3, r3, #8
 8008680:	81a3      	strh	r3, [r4, #12]
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	b94b      	cbnz	r3, 800869a <__swsetup_r+0x7a>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800868c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008690:	d003      	beq.n	800869a <__swsetup_r+0x7a>
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f001 fd89 	bl	800a1ac <__smakebuf_r>
 800869a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800869e:	f013 0201 	ands.w	r2, r3, #1
 80086a2:	d00a      	beq.n	80086ba <__swsetup_r+0x9a>
 80086a4:	2200      	movs	r2, #0
 80086a6:	60a2      	str	r2, [r4, #8]
 80086a8:	6962      	ldr	r2, [r4, #20]
 80086aa:	4252      	negs	r2, r2
 80086ac:	61a2      	str	r2, [r4, #24]
 80086ae:	6922      	ldr	r2, [r4, #16]
 80086b0:	b942      	cbnz	r2, 80086c4 <__swsetup_r+0xa4>
 80086b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086b6:	d1c5      	bne.n	8008644 <__swsetup_r+0x24>
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	0799      	lsls	r1, r3, #30
 80086bc:	bf58      	it	pl
 80086be:	6962      	ldrpl	r2, [r4, #20]
 80086c0:	60a2      	str	r2, [r4, #8]
 80086c2:	e7f4      	b.n	80086ae <__swsetup_r+0x8e>
 80086c4:	2000      	movs	r0, #0
 80086c6:	e7f7      	b.n	80086b8 <__swsetup_r+0x98>
 80086c8:	20000038 	.word	0x20000038

080086cc <memset>:
 80086cc:	4402      	add	r2, r0
 80086ce:	4603      	mov	r3, r0
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d100      	bne.n	80086d6 <memset+0xa>
 80086d4:	4770      	bx	lr
 80086d6:	f803 1b01 	strb.w	r1, [r3], #1
 80086da:	e7f9      	b.n	80086d0 <memset+0x4>

080086dc <_localeconv_r>:
 80086dc:	4800      	ldr	r0, [pc, #0]	@ (80086e0 <_localeconv_r+0x4>)
 80086de:	4770      	bx	lr
 80086e0:	20000178 	.word	0x20000178

080086e4 <_close_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d06      	ldr	r5, [pc, #24]	@ (8008700 <_close_r+0x1c>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f8 ff92 	bl	8001618 <_close>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_close_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_close_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	200004bc 	.word	0x200004bc

08008704 <_lseek_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	@ (8008724 <_lseek_r+0x20>)
 8008708:	4604      	mov	r4, r0
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	2200      	movs	r2, #0
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f8 ffa7 	bl	8001666 <_lseek>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_lseek_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_lseek_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	200004bc 	.word	0x200004bc

08008728 <_read_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4d07      	ldr	r5, [pc, #28]	@ (8008748 <_read_r+0x20>)
 800872c:	4604      	mov	r4, r0
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	2200      	movs	r2, #0
 8008734:	602a      	str	r2, [r5, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	f7f8 ff51 	bl	80015de <_read>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	d102      	bne.n	8008746 <_read_r+0x1e>
 8008740:	682b      	ldr	r3, [r5, #0]
 8008742:	b103      	cbz	r3, 8008746 <_read_r+0x1e>
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	bd38      	pop	{r3, r4, r5, pc}
 8008748:	200004bc 	.word	0x200004bc

0800874c <_write_r>:
 800874c:	b538      	push	{r3, r4, r5, lr}
 800874e:	4d07      	ldr	r5, [pc, #28]	@ (800876c <_write_r+0x20>)
 8008750:	4604      	mov	r4, r0
 8008752:	4608      	mov	r0, r1
 8008754:	4611      	mov	r1, r2
 8008756:	2200      	movs	r2, #0
 8008758:	602a      	str	r2, [r5, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	f7f8 fbb4 	bl	8000ec8 <_write>
 8008760:	1c43      	adds	r3, r0, #1
 8008762:	d102      	bne.n	800876a <_write_r+0x1e>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	b103      	cbz	r3, 800876a <_write_r+0x1e>
 8008768:	6023      	str	r3, [r4, #0]
 800876a:	bd38      	pop	{r3, r4, r5, pc}
 800876c:	200004bc 	.word	0x200004bc

08008770 <__errno>:
 8008770:	4b01      	ldr	r3, [pc, #4]	@ (8008778 <__errno+0x8>)
 8008772:	6818      	ldr	r0, [r3, #0]
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000038 	.word	0x20000038

0800877c <__libc_init_array>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	4d0d      	ldr	r5, [pc, #52]	@ (80087b4 <__libc_init_array+0x38>)
 8008780:	4c0d      	ldr	r4, [pc, #52]	@ (80087b8 <__libc_init_array+0x3c>)
 8008782:	1b64      	subs	r4, r4, r5
 8008784:	10a4      	asrs	r4, r4, #2
 8008786:	2600      	movs	r6, #0
 8008788:	42a6      	cmp	r6, r4
 800878a:	d109      	bne.n	80087a0 <__libc_init_array+0x24>
 800878c:	4d0b      	ldr	r5, [pc, #44]	@ (80087bc <__libc_init_array+0x40>)
 800878e:	4c0c      	ldr	r4, [pc, #48]	@ (80087c0 <__libc_init_array+0x44>)
 8008790:	f001 fe2a 	bl	800a3e8 <_init>
 8008794:	1b64      	subs	r4, r4, r5
 8008796:	10a4      	asrs	r4, r4, #2
 8008798:	2600      	movs	r6, #0
 800879a:	42a6      	cmp	r6, r4
 800879c:	d105      	bne.n	80087aa <__libc_init_array+0x2e>
 800879e:	bd70      	pop	{r4, r5, r6, pc}
 80087a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a4:	4798      	blx	r3
 80087a6:	3601      	adds	r6, #1
 80087a8:	e7ee      	b.n	8008788 <__libc_init_array+0xc>
 80087aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80087ae:	4798      	blx	r3
 80087b0:	3601      	adds	r6, #1
 80087b2:	e7f2      	b.n	800879a <__libc_init_array+0x1e>
 80087b4:	0800adb8 	.word	0x0800adb8
 80087b8:	0800adb8 	.word	0x0800adb8
 80087bc:	0800adb8 	.word	0x0800adb8
 80087c0:	0800adbc 	.word	0x0800adbc

080087c4 <__retarget_lock_init_recursive>:
 80087c4:	4770      	bx	lr

080087c6 <__retarget_lock_acquire_recursive>:
 80087c6:	4770      	bx	lr

080087c8 <__retarget_lock_release_recursive>:
 80087c8:	4770      	bx	lr

080087ca <memcpy>:
 80087ca:	440a      	add	r2, r1
 80087cc:	4291      	cmp	r1, r2
 80087ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80087d2:	d100      	bne.n	80087d6 <memcpy+0xc>
 80087d4:	4770      	bx	lr
 80087d6:	b510      	push	{r4, lr}
 80087d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087e0:	4291      	cmp	r1, r2
 80087e2:	d1f9      	bne.n	80087d8 <memcpy+0xe>
 80087e4:	bd10      	pop	{r4, pc}

080087e6 <quorem>:
 80087e6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ea:	6903      	ldr	r3, [r0, #16]
 80087ec:	690c      	ldr	r4, [r1, #16]
 80087ee:	42a3      	cmp	r3, r4
 80087f0:	4607      	mov	r7, r0
 80087f2:	db7e      	blt.n	80088f2 <quorem+0x10c>
 80087f4:	3c01      	subs	r4, #1
 80087f6:	f101 0814 	add.w	r8, r1, #20
 80087fa:	00a3      	lsls	r3, r4, #2
 80087fc:	f100 0514 	add.w	r5, r0, #20
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800880c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008810:	3301      	adds	r3, #1
 8008812:	429a      	cmp	r2, r3
 8008814:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008818:	fbb2 f6f3 	udiv	r6, r2, r3
 800881c:	d32e      	bcc.n	800887c <quorem+0x96>
 800881e:	f04f 0a00 	mov.w	sl, #0
 8008822:	46c4      	mov	ip, r8
 8008824:	46ae      	mov	lr, r5
 8008826:	46d3      	mov	fp, sl
 8008828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800882c:	b298      	uxth	r0, r3
 800882e:	fb06 a000 	mla	r0, r6, r0, sl
 8008832:	0c02      	lsrs	r2, r0, #16
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	fb06 2303 	mla	r3, r6, r3, r2
 800883a:	f8de 2000 	ldr.w	r2, [lr]
 800883e:	b280      	uxth	r0, r0
 8008840:	b292      	uxth	r2, r2
 8008842:	1a12      	subs	r2, r2, r0
 8008844:	445a      	add	r2, fp
 8008846:	f8de 0000 	ldr.w	r0, [lr]
 800884a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800884e:	b29b      	uxth	r3, r3
 8008850:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008854:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008858:	b292      	uxth	r2, r2
 800885a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800885e:	45e1      	cmp	r9, ip
 8008860:	f84e 2b04 	str.w	r2, [lr], #4
 8008864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008868:	d2de      	bcs.n	8008828 <quorem+0x42>
 800886a:	9b00      	ldr	r3, [sp, #0]
 800886c:	58eb      	ldr	r3, [r5, r3]
 800886e:	b92b      	cbnz	r3, 800887c <quorem+0x96>
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	3b04      	subs	r3, #4
 8008874:	429d      	cmp	r5, r3
 8008876:	461a      	mov	r2, r3
 8008878:	d32f      	bcc.n	80088da <quorem+0xf4>
 800887a:	613c      	str	r4, [r7, #16]
 800887c:	4638      	mov	r0, r7
 800887e:	f001 f979 	bl	8009b74 <__mcmp>
 8008882:	2800      	cmp	r0, #0
 8008884:	db25      	blt.n	80088d2 <quorem+0xec>
 8008886:	4629      	mov	r1, r5
 8008888:	2000      	movs	r0, #0
 800888a:	f858 2b04 	ldr.w	r2, [r8], #4
 800888e:	f8d1 c000 	ldr.w	ip, [r1]
 8008892:	fa1f fe82 	uxth.w	lr, r2
 8008896:	fa1f f38c 	uxth.w	r3, ip
 800889a:	eba3 030e 	sub.w	r3, r3, lr
 800889e:	4403      	add	r3, r0
 80088a0:	0c12      	lsrs	r2, r2, #16
 80088a2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80088a6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80088b0:	45c1      	cmp	r9, r8
 80088b2:	f841 3b04 	str.w	r3, [r1], #4
 80088b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80088ba:	d2e6      	bcs.n	800888a <quorem+0xa4>
 80088bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088c4:	b922      	cbnz	r2, 80088d0 <quorem+0xea>
 80088c6:	3b04      	subs	r3, #4
 80088c8:	429d      	cmp	r5, r3
 80088ca:	461a      	mov	r2, r3
 80088cc:	d30b      	bcc.n	80088e6 <quorem+0x100>
 80088ce:	613c      	str	r4, [r7, #16]
 80088d0:	3601      	adds	r6, #1
 80088d2:	4630      	mov	r0, r6
 80088d4:	b003      	add	sp, #12
 80088d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088da:	6812      	ldr	r2, [r2, #0]
 80088dc:	3b04      	subs	r3, #4
 80088de:	2a00      	cmp	r2, #0
 80088e0:	d1cb      	bne.n	800887a <quorem+0x94>
 80088e2:	3c01      	subs	r4, #1
 80088e4:	e7c6      	b.n	8008874 <quorem+0x8e>
 80088e6:	6812      	ldr	r2, [r2, #0]
 80088e8:	3b04      	subs	r3, #4
 80088ea:	2a00      	cmp	r2, #0
 80088ec:	d1ef      	bne.n	80088ce <quorem+0xe8>
 80088ee:	3c01      	subs	r4, #1
 80088f0:	e7ea      	b.n	80088c8 <quorem+0xe2>
 80088f2:	2000      	movs	r0, #0
 80088f4:	e7ee      	b.n	80088d4 <quorem+0xee>
	...

080088f8 <_dtoa_r>:
 80088f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fc:	69c7      	ldr	r7, [r0, #28]
 80088fe:	b099      	sub	sp, #100	@ 0x64
 8008900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008904:	ec55 4b10 	vmov	r4, r5, d0
 8008908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800890a:	9109      	str	r1, [sp, #36]	@ 0x24
 800890c:	4683      	mov	fp, r0
 800890e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008912:	b97f      	cbnz	r7, 8008934 <_dtoa_r+0x3c>
 8008914:	2010      	movs	r0, #16
 8008916:	f000 fdfd 	bl	8009514 <malloc>
 800891a:	4602      	mov	r2, r0
 800891c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008920:	b920      	cbnz	r0, 800892c <_dtoa_r+0x34>
 8008922:	4ba7      	ldr	r3, [pc, #668]	@ (8008bc0 <_dtoa_r+0x2c8>)
 8008924:	21ef      	movs	r1, #239	@ 0xef
 8008926:	48a7      	ldr	r0, [pc, #668]	@ (8008bc4 <_dtoa_r+0x2cc>)
 8008928:	f001 fcae 	bl	800a288 <__assert_func>
 800892c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008930:	6007      	str	r7, [r0, #0]
 8008932:	60c7      	str	r7, [r0, #12]
 8008934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008938:	6819      	ldr	r1, [r3, #0]
 800893a:	b159      	cbz	r1, 8008954 <_dtoa_r+0x5c>
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	604a      	str	r2, [r1, #4]
 8008940:	2301      	movs	r3, #1
 8008942:	4093      	lsls	r3, r2
 8008944:	608b      	str	r3, [r1, #8]
 8008946:	4658      	mov	r0, fp
 8008948:	f000 feda 	bl	8009700 <_Bfree>
 800894c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	1e2b      	subs	r3, r5, #0
 8008956:	bfb9      	ittee	lt
 8008958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800895c:	9303      	strlt	r3, [sp, #12]
 800895e:	2300      	movge	r3, #0
 8008960:	6033      	strge	r3, [r6, #0]
 8008962:	9f03      	ldr	r7, [sp, #12]
 8008964:	4b98      	ldr	r3, [pc, #608]	@ (8008bc8 <_dtoa_r+0x2d0>)
 8008966:	bfbc      	itt	lt
 8008968:	2201      	movlt	r2, #1
 800896a:	6032      	strlt	r2, [r6, #0]
 800896c:	43bb      	bics	r3, r7
 800896e:	d112      	bne.n	8008996 <_dtoa_r+0x9e>
 8008970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800897c:	4323      	orrs	r3, r4
 800897e:	f000 854d 	beq.w	800941c <_dtoa_r+0xb24>
 8008982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008bdc <_dtoa_r+0x2e4>
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 854f 	beq.w	800942c <_dtoa_r+0xb34>
 800898e:	f10a 0303 	add.w	r3, sl, #3
 8008992:	f000 bd49 	b.w	8009428 <_dtoa_r+0xb30>
 8008996:	ed9d 7b02 	vldr	d7, [sp, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	ec51 0b17 	vmov	r0, r1, d7
 80089a0:	2300      	movs	r3, #0
 80089a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80089a6:	f7f8 f867 	bl	8000a78 <__aeabi_dcmpeq>
 80089aa:	4680      	mov	r8, r0
 80089ac:	b158      	cbz	r0, 80089c6 <_dtoa_r+0xce>
 80089ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089b0:	2301      	movs	r3, #1
 80089b2:	6013      	str	r3, [r2, #0]
 80089b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089b6:	b113      	cbz	r3, 80089be <_dtoa_r+0xc6>
 80089b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80089ba:	4b84      	ldr	r3, [pc, #528]	@ (8008bcc <_dtoa_r+0x2d4>)
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008be0 <_dtoa_r+0x2e8>
 80089c2:	f000 bd33 	b.w	800942c <_dtoa_r+0xb34>
 80089c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80089ca:	aa16      	add	r2, sp, #88	@ 0x58
 80089cc:	a917      	add	r1, sp, #92	@ 0x5c
 80089ce:	4658      	mov	r0, fp
 80089d0:	f001 f980 	bl	8009cd4 <__d2b>
 80089d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80089d8:	4681      	mov	r9, r0
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d077      	beq.n	8008ace <_dtoa_r+0x1d6>
 80089de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80089e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80089f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80089f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80089f8:	4619      	mov	r1, r3
 80089fa:	2200      	movs	r2, #0
 80089fc:	4b74      	ldr	r3, [pc, #464]	@ (8008bd0 <_dtoa_r+0x2d8>)
 80089fe:	f7f7 fc1b 	bl	8000238 <__aeabi_dsub>
 8008a02:	a369      	add	r3, pc, #420	@ (adr r3, 8008ba8 <_dtoa_r+0x2b0>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	f7f7 fdce 	bl	80005a8 <__aeabi_dmul>
 8008a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8008bb0 <_dtoa_r+0x2b8>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fc13 	bl	800023c <__adddf3>
 8008a16:	4604      	mov	r4, r0
 8008a18:	4630      	mov	r0, r6
 8008a1a:	460d      	mov	r5, r1
 8008a1c:	f7f7 fd5a 	bl	80004d4 <__aeabi_i2d>
 8008a20:	a365      	add	r3, pc, #404	@ (adr r3, 8008bb8 <_dtoa_r+0x2c0>)
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f7f7 fdbf 	bl	80005a8 <__aeabi_dmul>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fc03 	bl	800023c <__adddf3>
 8008a36:	4604      	mov	r4, r0
 8008a38:	460d      	mov	r5, r1
 8008a3a:	f7f8 f865 	bl	8000b08 <__aeabi_d2iz>
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4607      	mov	r7, r0
 8008a42:	2300      	movs	r3, #0
 8008a44:	4620      	mov	r0, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	f7f8 f820 	bl	8000a8c <__aeabi_dcmplt>
 8008a4c:	b140      	cbz	r0, 8008a60 <_dtoa_r+0x168>
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7f7 fd40 	bl	80004d4 <__aeabi_i2d>
 8008a54:	4622      	mov	r2, r4
 8008a56:	462b      	mov	r3, r5
 8008a58:	f7f8 f80e 	bl	8000a78 <__aeabi_dcmpeq>
 8008a5c:	b900      	cbnz	r0, 8008a60 <_dtoa_r+0x168>
 8008a5e:	3f01      	subs	r7, #1
 8008a60:	2f16      	cmp	r7, #22
 8008a62:	d851      	bhi.n	8008b08 <_dtoa_r+0x210>
 8008a64:	4b5b      	ldr	r3, [pc, #364]	@ (8008bd4 <_dtoa_r+0x2dc>)
 8008a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a72:	f7f8 f80b 	bl	8000a8c <__aeabi_dcmplt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d048      	beq.n	8008b0c <_dtoa_r+0x214>
 8008a7a:	3f01      	subs	r7, #1
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a82:	1b9b      	subs	r3, r3, r6
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	bf44      	itt	mi
 8008a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8008a8c:	2300      	movmi	r3, #0
 8008a8e:	9208      	str	r2, [sp, #32]
 8008a90:	bf54      	ite	pl
 8008a92:	f04f 0800 	movpl.w	r8, #0
 8008a96:	9308      	strmi	r3, [sp, #32]
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	db39      	blt.n	8008b10 <_dtoa_r+0x218>
 8008a9c:	9b08      	ldr	r3, [sp, #32]
 8008a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008aa0:	443b      	add	r3, r7
 8008aa2:	9308      	str	r3, [sp, #32]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b09      	cmp	r3, #9
 8008aac:	d864      	bhi.n	8008b78 <_dtoa_r+0x280>
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	bfc4      	itt	gt
 8008ab2:	3b04      	subgt	r3, #4
 8008ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8008abc:	bfcc      	ite	gt
 8008abe:	2400      	movgt	r4, #0
 8008ac0:	2401      	movle	r4, #1
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d863      	bhi.n	8008b8e <_dtoa_r+0x296>
 8008ac6:	e8df f003 	tbb	[pc, r3]
 8008aca:	372a      	.short	0x372a
 8008acc:	5535      	.short	0x5535
 8008ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008ad2:	441e      	add	r6, r3
 8008ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	bfc1      	itttt	gt
 8008adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ae0:	409f      	lslgt	r7, r3
 8008ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008aea:	bfd6      	itet	le
 8008aec:	f1c3 0320 	rsble	r3, r3, #32
 8008af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008af4:	fa04 f003 	lslle.w	r0, r4, r3
 8008af8:	f7f7 fcdc 	bl	80004b4 <__aeabi_ui2d>
 8008afc:	2201      	movs	r2, #1
 8008afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b02:	3e01      	subs	r6, #1
 8008b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b06:	e777      	b.n	80089f8 <_dtoa_r+0x100>
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e7b8      	b.n	8008a7e <_dtoa_r+0x186>
 8008b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b0e:	e7b7      	b.n	8008a80 <_dtoa_r+0x188>
 8008b10:	427b      	negs	r3, r7
 8008b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b14:	2300      	movs	r3, #0
 8008b16:	eba8 0807 	sub.w	r8, r8, r7
 8008b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b1c:	e7c4      	b.n	8008aa8 <_dtoa_r+0x1b0>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dc35      	bgt.n	8008b94 <_dtoa_r+0x29c>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	9307      	str	r3, [sp, #28]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b32:	e00b      	b.n	8008b4c <_dtoa_r+0x254>
 8008b34:	2301      	movs	r3, #1
 8008b36:	e7f3      	b.n	8008b20 <_dtoa_r+0x228>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b3e:	18fb      	adds	r3, r7, r3
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	3301      	adds	r3, #1
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	9307      	str	r3, [sp, #28]
 8008b48:	bfb8      	it	lt
 8008b4a:	2301      	movlt	r3, #1
 8008b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008b50:	2100      	movs	r1, #0
 8008b52:	2204      	movs	r2, #4
 8008b54:	f102 0514 	add.w	r5, r2, #20
 8008b58:	429d      	cmp	r5, r3
 8008b5a:	d91f      	bls.n	8008b9c <_dtoa_r+0x2a4>
 8008b5c:	6041      	str	r1, [r0, #4]
 8008b5e:	4658      	mov	r0, fp
 8008b60:	f000 fd8e 	bl	8009680 <_Balloc>
 8008b64:	4682      	mov	sl, r0
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d13c      	bne.n	8008be4 <_dtoa_r+0x2ec>
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bd8 <_dtoa_r+0x2e0>)
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008b72:	e6d8      	b.n	8008926 <_dtoa_r+0x2e>
 8008b74:	2301      	movs	r3, #1
 8008b76:	e7e0      	b.n	8008b3a <_dtoa_r+0x242>
 8008b78:	2401      	movs	r4, #1
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008b80:	f04f 33ff 	mov.w	r3, #4294967295
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	9307      	str	r3, [sp, #28]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	2312      	movs	r3, #18
 8008b8c:	e7d0      	b.n	8008b30 <_dtoa_r+0x238>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b92:	e7f5      	b.n	8008b80 <_dtoa_r+0x288>
 8008b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	9307      	str	r3, [sp, #28]
 8008b9a:	e7d7      	b.n	8008b4c <_dtoa_r+0x254>
 8008b9c:	3101      	adds	r1, #1
 8008b9e:	0052      	lsls	r2, r2, #1
 8008ba0:	e7d8      	b.n	8008b54 <_dtoa_r+0x25c>
 8008ba2:	bf00      	nop
 8008ba4:	f3af 8000 	nop.w
 8008ba8:	636f4361 	.word	0x636f4361
 8008bac:	3fd287a7 	.word	0x3fd287a7
 8008bb0:	8b60c8b3 	.word	0x8b60c8b3
 8008bb4:	3fc68a28 	.word	0x3fc68a28
 8008bb8:	509f79fb 	.word	0x509f79fb
 8008bbc:	3fd34413 	.word	0x3fd34413
 8008bc0:	0800aa81 	.word	0x0800aa81
 8008bc4:	0800aa98 	.word	0x0800aa98
 8008bc8:	7ff00000 	.word	0x7ff00000
 8008bcc:	0800aa51 	.word	0x0800aa51
 8008bd0:	3ff80000 	.word	0x3ff80000
 8008bd4:	0800ab90 	.word	0x0800ab90
 8008bd8:	0800aaf0 	.word	0x0800aaf0
 8008bdc:	0800aa7d 	.word	0x0800aa7d
 8008be0:	0800aa50 	.word	0x0800aa50
 8008be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008be8:	6018      	str	r0, [r3, #0]
 8008bea:	9b07      	ldr	r3, [sp, #28]
 8008bec:	2b0e      	cmp	r3, #14
 8008bee:	f200 80a4 	bhi.w	8008d3a <_dtoa_r+0x442>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	f000 80a1 	beq.w	8008d3a <_dtoa_r+0x442>
 8008bf8:	2f00      	cmp	r7, #0
 8008bfa:	dd33      	ble.n	8008c64 <_dtoa_r+0x36c>
 8008bfc:	4bad      	ldr	r3, [pc, #692]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008bfe:	f007 020f 	and.w	r2, r7, #15
 8008c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c06:	ed93 7b00 	vldr	d7, [r3]
 8008c0a:	05f8      	lsls	r0, r7, #23
 8008c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c14:	d516      	bpl.n	8008c44 <_dtoa_r+0x34c>
 8008c16:	4ba8      	ldr	r3, [pc, #672]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c20:	f7f7 fdec 	bl	80007fc <__aeabi_ddiv>
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	f004 040f 	and.w	r4, r4, #15
 8008c2c:	2603      	movs	r6, #3
 8008c2e:	4da2      	ldr	r5, [pc, #648]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c30:	b954      	cbnz	r4, 8008c48 <_dtoa_r+0x350>
 8008c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3a:	f7f7 fddf 	bl	80007fc <__aeabi_ddiv>
 8008c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c42:	e028      	b.n	8008c96 <_dtoa_r+0x39e>
 8008c44:	2602      	movs	r6, #2
 8008c46:	e7f2      	b.n	8008c2e <_dtoa_r+0x336>
 8008c48:	07e1      	lsls	r1, r4, #31
 8008c4a:	d508      	bpl.n	8008c5e <_dtoa_r+0x366>
 8008c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008c54:	f7f7 fca8 	bl	80005a8 <__aeabi_dmul>
 8008c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008c5c:	3601      	adds	r6, #1
 8008c5e:	1064      	asrs	r4, r4, #1
 8008c60:	3508      	adds	r5, #8
 8008c62:	e7e5      	b.n	8008c30 <_dtoa_r+0x338>
 8008c64:	f000 80d2 	beq.w	8008e0c <_dtoa_r+0x514>
 8008c68:	427c      	negs	r4, r7
 8008c6a:	4b92      	ldr	r3, [pc, #584]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008c6c:	4d92      	ldr	r5, [pc, #584]	@ (8008eb8 <_dtoa_r+0x5c0>)
 8008c6e:	f004 020f 	and.w	r2, r4, #15
 8008c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c7e:	f7f7 fc93 	bl	80005a8 <__aeabi_dmul>
 8008c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c86:	1124      	asrs	r4, r4, #4
 8008c88:	2300      	movs	r3, #0
 8008c8a:	2602      	movs	r6, #2
 8008c8c:	2c00      	cmp	r4, #0
 8008c8e:	f040 80b2 	bne.w	8008df6 <_dtoa_r+0x4fe>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1d3      	bne.n	8008c3e <_dtoa_r+0x346>
 8008c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f000 80b7 	beq.w	8008e10 <_dtoa_r+0x518>
 8008ca2:	4b86      	ldr	r3, [pc, #536]	@ (8008ebc <_dtoa_r+0x5c4>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	4629      	mov	r1, r5
 8008caa:	f7f7 feef 	bl	8000a8c <__aeabi_dcmplt>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f000 80ae 	beq.w	8008e10 <_dtoa_r+0x518>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f000 80aa 	beq.w	8008e10 <_dtoa_r+0x518>
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	dd37      	ble.n	8008d32 <_dtoa_r+0x43a>
 8008cc2:	1e7b      	subs	r3, r7, #1
 8008cc4:	9304      	str	r3, [sp, #16]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	4629      	mov	r1, r5
 8008cce:	f7f7 fc6b 	bl	80005a8 <__aeabi_dmul>
 8008cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd6:	9c00      	ldr	r4, [sp, #0]
 8008cd8:	3601      	adds	r6, #1
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7f7 fbfa 	bl	80004d4 <__aeabi_i2d>
 8008ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ce4:	f7f7 fc60 	bl	80005a8 <__aeabi_dmul>
 8008ce8:	4b76      	ldr	r3, [pc, #472]	@ (8008ec4 <_dtoa_r+0x5cc>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	f7f7 faa6 	bl	800023c <__adddf3>
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008cf6:	2c00      	cmp	r4, #0
 8008cf8:	f040 808d 	bne.w	8008e16 <_dtoa_r+0x51e>
 8008cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d00:	4b71      	ldr	r3, [pc, #452]	@ (8008ec8 <_dtoa_r+0x5d0>)
 8008d02:	2200      	movs	r2, #0
 8008d04:	f7f7 fa98 	bl	8000238 <__aeabi_dsub>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d10:	462a      	mov	r2, r5
 8008d12:	4633      	mov	r3, r6
 8008d14:	f7f7 fed8 	bl	8000ac8 <__aeabi_dcmpgt>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	f040 828b 	bne.w	8009234 <_dtoa_r+0x93c>
 8008d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d22:	462a      	mov	r2, r5
 8008d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d28:	f7f7 feb0 	bl	8000a8c <__aeabi_dcmplt>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f040 8128 	bne.w	8008f82 <_dtoa_r+0x68a>
 8008d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f2c0 815a 	blt.w	8008ff6 <_dtoa_r+0x6fe>
 8008d42:	2f0e      	cmp	r7, #14
 8008d44:	f300 8157 	bgt.w	8008ff6 <_dtoa_r+0x6fe>
 8008d48:	4b5a      	ldr	r3, [pc, #360]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008d4e:	ed93 7b00 	vldr	d7, [r3]
 8008d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	ed8d 7b00 	vstr	d7, [sp]
 8008d5a:	da03      	bge.n	8008d64 <_dtoa_r+0x46c>
 8008d5c:	9b07      	ldr	r3, [sp, #28]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	f340 8101 	ble.w	8008f66 <_dtoa_r+0x66e>
 8008d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d68:	4656      	mov	r6, sl
 8008d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 fd43 	bl	80007fc <__aeabi_ddiv>
 8008d76:	f7f7 fec7 	bl	8000b08 <__aeabi_d2iz>
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	f7f7 fbaa 	bl	80004d4 <__aeabi_i2d>
 8008d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d84:	f7f7 fc10 	bl	80005a8 <__aeabi_dmul>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4629      	mov	r1, r5
 8008d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008d94:	f7f7 fa50 	bl	8000238 <__aeabi_dsub>
 8008d98:	f806 4b01 	strb.w	r4, [r6], #1
 8008d9c:	9d07      	ldr	r5, [sp, #28]
 8008d9e:	eba6 040a 	sub.w	r4, r6, sl
 8008da2:	42a5      	cmp	r5, r4
 8008da4:	4602      	mov	r2, r0
 8008da6:	460b      	mov	r3, r1
 8008da8:	f040 8117 	bne.w	8008fda <_dtoa_r+0x6e2>
 8008dac:	f7f7 fa46 	bl	800023c <__adddf3>
 8008db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008db4:	4604      	mov	r4, r0
 8008db6:	460d      	mov	r5, r1
 8008db8:	f7f7 fe86 	bl	8000ac8 <__aeabi_dcmpgt>
 8008dbc:	2800      	cmp	r0, #0
 8008dbe:	f040 80f9 	bne.w	8008fb4 <_dtoa_r+0x6bc>
 8008dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	f7f7 fe55 	bl	8000a78 <__aeabi_dcmpeq>
 8008dce:	b118      	cbz	r0, 8008dd8 <_dtoa_r+0x4e0>
 8008dd0:	f018 0f01 	tst.w	r8, #1
 8008dd4:	f040 80ee 	bne.w	8008fb4 <_dtoa_r+0x6bc>
 8008dd8:	4649      	mov	r1, r9
 8008dda:	4658      	mov	r0, fp
 8008ddc:	f000 fc90 	bl	8009700 <_Bfree>
 8008de0:	2300      	movs	r3, #0
 8008de2:	7033      	strb	r3, [r6, #0]
 8008de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008de6:	3701      	adds	r7, #1
 8008de8:	601f      	str	r7, [r3, #0]
 8008dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 831d 	beq.w	800942c <_dtoa_r+0xb34>
 8008df2:	601e      	str	r6, [r3, #0]
 8008df4:	e31a      	b.n	800942c <_dtoa_r+0xb34>
 8008df6:	07e2      	lsls	r2, r4, #31
 8008df8:	d505      	bpl.n	8008e06 <_dtoa_r+0x50e>
 8008dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008dfe:	f7f7 fbd3 	bl	80005a8 <__aeabi_dmul>
 8008e02:	3601      	adds	r6, #1
 8008e04:	2301      	movs	r3, #1
 8008e06:	1064      	asrs	r4, r4, #1
 8008e08:	3508      	adds	r5, #8
 8008e0a:	e73f      	b.n	8008c8c <_dtoa_r+0x394>
 8008e0c:	2602      	movs	r6, #2
 8008e0e:	e742      	b.n	8008c96 <_dtoa_r+0x39e>
 8008e10:	9c07      	ldr	r4, [sp, #28]
 8008e12:	9704      	str	r7, [sp, #16]
 8008e14:	e761      	b.n	8008cda <_dtoa_r+0x3e2>
 8008e16:	4b27      	ldr	r3, [pc, #156]	@ (8008eb4 <_dtoa_r+0x5bc>)
 8008e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e22:	4454      	add	r4, sl
 8008e24:	2900      	cmp	r1, #0
 8008e26:	d053      	beq.n	8008ed0 <_dtoa_r+0x5d8>
 8008e28:	4928      	ldr	r1, [pc, #160]	@ (8008ecc <_dtoa_r+0x5d4>)
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	f7f7 fce6 	bl	80007fc <__aeabi_ddiv>
 8008e30:	4633      	mov	r3, r6
 8008e32:	462a      	mov	r2, r5
 8008e34:	f7f7 fa00 	bl	8000238 <__aeabi_dsub>
 8008e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e3c:	4656      	mov	r6, sl
 8008e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e42:	f7f7 fe61 	bl	8000b08 <__aeabi_d2iz>
 8008e46:	4605      	mov	r5, r0
 8008e48:	f7f7 fb44 	bl	80004d4 <__aeabi_i2d>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	460b      	mov	r3, r1
 8008e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e54:	f7f7 f9f0 	bl	8000238 <__aeabi_dsub>
 8008e58:	3530      	adds	r5, #48	@ 0x30
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e62:	f806 5b01 	strb.w	r5, [r6], #1
 8008e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e6a:	f7f7 fe0f 	bl	8000a8c <__aeabi_dcmplt>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	d171      	bne.n	8008f56 <_dtoa_r+0x65e>
 8008e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e76:	4911      	ldr	r1, [pc, #68]	@ (8008ebc <_dtoa_r+0x5c4>)
 8008e78:	2000      	movs	r0, #0
 8008e7a:	f7f7 f9dd 	bl	8000238 <__aeabi_dsub>
 8008e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e82:	f7f7 fe03 	bl	8000a8c <__aeabi_dcmplt>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	f040 8095 	bne.w	8008fb6 <_dtoa_r+0x6be>
 8008e8c:	42a6      	cmp	r6, r4
 8008e8e:	f43f af50 	beq.w	8008d32 <_dtoa_r+0x43a>
 8008e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e96:	4b0a      	ldr	r3, [pc, #40]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f7f7 fb85 	bl	80005a8 <__aeabi_dmul>
 8008e9e:	4b08      	ldr	r3, [pc, #32]	@ (8008ec0 <_dtoa_r+0x5c8>)
 8008ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	f7f7 fb7d 	bl	80005a8 <__aeabi_dmul>
 8008eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb2:	e7c4      	b.n	8008e3e <_dtoa_r+0x546>
 8008eb4:	0800ab90 	.word	0x0800ab90
 8008eb8:	0800ab68 	.word	0x0800ab68
 8008ebc:	3ff00000 	.word	0x3ff00000
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	401c0000 	.word	0x401c0000
 8008ec8:	40140000 	.word	0x40140000
 8008ecc:	3fe00000 	.word	0x3fe00000
 8008ed0:	4631      	mov	r1, r6
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	f7f7 fb68 	bl	80005a8 <__aeabi_dmul>
 8008ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ede:	4656      	mov	r6, sl
 8008ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ee4:	f7f7 fe10 	bl	8000b08 <__aeabi_d2iz>
 8008ee8:	4605      	mov	r5, r0
 8008eea:	f7f7 faf3 	bl	80004d4 <__aeabi_i2d>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef6:	f7f7 f99f 	bl	8000238 <__aeabi_dsub>
 8008efa:	3530      	adds	r5, #48	@ 0x30
 8008efc:	f806 5b01 	strb.w	r5, [r6], #1
 8008f00:	4602      	mov	r2, r0
 8008f02:	460b      	mov	r3, r1
 8008f04:	42a6      	cmp	r6, r4
 8008f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	d124      	bne.n	8008f5a <_dtoa_r+0x662>
 8008f10:	4bac      	ldr	r3, [pc, #688]	@ (80091c4 <_dtoa_r+0x8cc>)
 8008f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f16:	f7f7 f991 	bl	800023c <__adddf3>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f22:	f7f7 fdd1 	bl	8000ac8 <__aeabi_dcmpgt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d145      	bne.n	8008fb6 <_dtoa_r+0x6be>
 8008f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f2e:	49a5      	ldr	r1, [pc, #660]	@ (80091c4 <_dtoa_r+0x8cc>)
 8008f30:	2000      	movs	r0, #0
 8008f32:	f7f7 f981 	bl	8000238 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f3e:	f7f7 fda5 	bl	8000a8c <__aeabi_dcmplt>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	f43f aef5 	beq.w	8008d32 <_dtoa_r+0x43a>
 8008f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008f4a:	1e73      	subs	r3, r6, #1
 8008f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008f52:	2b30      	cmp	r3, #48	@ 0x30
 8008f54:	d0f8      	beq.n	8008f48 <_dtoa_r+0x650>
 8008f56:	9f04      	ldr	r7, [sp, #16]
 8008f58:	e73e      	b.n	8008dd8 <_dtoa_r+0x4e0>
 8008f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80091c8 <_dtoa_r+0x8d0>)
 8008f5c:	f7f7 fb24 	bl	80005a8 <__aeabi_dmul>
 8008f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f64:	e7bc      	b.n	8008ee0 <_dtoa_r+0x5e8>
 8008f66:	d10c      	bne.n	8008f82 <_dtoa_r+0x68a>
 8008f68:	4b98      	ldr	r3, [pc, #608]	@ (80091cc <_dtoa_r+0x8d4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f70:	f7f7 fb1a 	bl	80005a8 <__aeabi_dmul>
 8008f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f78:	f7f7 fd9c 	bl	8000ab4 <__aeabi_dcmpge>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f000 8157 	beq.w	8009230 <_dtoa_r+0x938>
 8008f82:	2400      	movs	r4, #0
 8008f84:	4625      	mov	r5, r4
 8008f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f88:	43db      	mvns	r3, r3
 8008f8a:	9304      	str	r3, [sp, #16]
 8008f8c:	4656      	mov	r6, sl
 8008f8e:	2700      	movs	r7, #0
 8008f90:	4621      	mov	r1, r4
 8008f92:	4658      	mov	r0, fp
 8008f94:	f000 fbb4 	bl	8009700 <_Bfree>
 8008f98:	2d00      	cmp	r5, #0
 8008f9a:	d0dc      	beq.n	8008f56 <_dtoa_r+0x65e>
 8008f9c:	b12f      	cbz	r7, 8008faa <_dtoa_r+0x6b2>
 8008f9e:	42af      	cmp	r7, r5
 8008fa0:	d003      	beq.n	8008faa <_dtoa_r+0x6b2>
 8008fa2:	4639      	mov	r1, r7
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fbab 	bl	8009700 <_Bfree>
 8008faa:	4629      	mov	r1, r5
 8008fac:	4658      	mov	r0, fp
 8008fae:	f000 fba7 	bl	8009700 <_Bfree>
 8008fb2:	e7d0      	b.n	8008f56 <_dtoa_r+0x65e>
 8008fb4:	9704      	str	r7, [sp, #16]
 8008fb6:	4633      	mov	r3, r6
 8008fb8:	461e      	mov	r6, r3
 8008fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fbe:	2a39      	cmp	r2, #57	@ 0x39
 8008fc0:	d107      	bne.n	8008fd2 <_dtoa_r+0x6da>
 8008fc2:	459a      	cmp	sl, r3
 8008fc4:	d1f8      	bne.n	8008fb8 <_dtoa_r+0x6c0>
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	3201      	adds	r2, #1
 8008fca:	9204      	str	r2, [sp, #16]
 8008fcc:	2230      	movs	r2, #48	@ 0x30
 8008fce:	f88a 2000 	strb.w	r2, [sl]
 8008fd2:	781a      	ldrb	r2, [r3, #0]
 8008fd4:	3201      	adds	r2, #1
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e7bd      	b.n	8008f56 <_dtoa_r+0x65e>
 8008fda:	4b7b      	ldr	r3, [pc, #492]	@ (80091c8 <_dtoa_r+0x8d0>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f7f7 fae3 	bl	80005a8 <__aeabi_dmul>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	460d      	mov	r5, r1
 8008fea:	f7f7 fd45 	bl	8000a78 <__aeabi_dcmpeq>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	f43f aebb 	beq.w	8008d6a <_dtoa_r+0x472>
 8008ff4:	e6f0      	b.n	8008dd8 <_dtoa_r+0x4e0>
 8008ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ff8:	2a00      	cmp	r2, #0
 8008ffa:	f000 80db 	beq.w	80091b4 <_dtoa_r+0x8bc>
 8008ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009000:	2a01      	cmp	r2, #1
 8009002:	f300 80bf 	bgt.w	8009184 <_dtoa_r+0x88c>
 8009006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009008:	2a00      	cmp	r2, #0
 800900a:	f000 80b7 	beq.w	800917c <_dtoa_r+0x884>
 800900e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009014:	4646      	mov	r6, r8
 8009016:	9a08      	ldr	r2, [sp, #32]
 8009018:	2101      	movs	r1, #1
 800901a:	441a      	add	r2, r3
 800901c:	4658      	mov	r0, fp
 800901e:	4498      	add	r8, r3
 8009020:	9208      	str	r2, [sp, #32]
 8009022:	f000 fc21 	bl	8009868 <__i2b>
 8009026:	4605      	mov	r5, r0
 8009028:	b15e      	cbz	r6, 8009042 <_dtoa_r+0x74a>
 800902a:	9b08      	ldr	r3, [sp, #32]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dd08      	ble.n	8009042 <_dtoa_r+0x74a>
 8009030:	42b3      	cmp	r3, r6
 8009032:	9a08      	ldr	r2, [sp, #32]
 8009034:	bfa8      	it	ge
 8009036:	4633      	movge	r3, r6
 8009038:	eba8 0803 	sub.w	r8, r8, r3
 800903c:	1af6      	subs	r6, r6, r3
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	9308      	str	r3, [sp, #32]
 8009042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009044:	b1f3      	cbz	r3, 8009084 <_dtoa_r+0x78c>
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 80b7 	beq.w	80091bc <_dtoa_r+0x8c4>
 800904e:	b18c      	cbz	r4, 8009074 <_dtoa_r+0x77c>
 8009050:	4629      	mov	r1, r5
 8009052:	4622      	mov	r2, r4
 8009054:	4658      	mov	r0, fp
 8009056:	f000 fcc7 	bl	80099e8 <__pow5mult>
 800905a:	464a      	mov	r2, r9
 800905c:	4601      	mov	r1, r0
 800905e:	4605      	mov	r5, r0
 8009060:	4658      	mov	r0, fp
 8009062:	f000 fc17 	bl	8009894 <__multiply>
 8009066:	4649      	mov	r1, r9
 8009068:	9004      	str	r0, [sp, #16]
 800906a:	4658      	mov	r0, fp
 800906c:	f000 fb48 	bl	8009700 <_Bfree>
 8009070:	9b04      	ldr	r3, [sp, #16]
 8009072:	4699      	mov	r9, r3
 8009074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009076:	1b1a      	subs	r2, r3, r4
 8009078:	d004      	beq.n	8009084 <_dtoa_r+0x78c>
 800907a:	4649      	mov	r1, r9
 800907c:	4658      	mov	r0, fp
 800907e:	f000 fcb3 	bl	80099e8 <__pow5mult>
 8009082:	4681      	mov	r9, r0
 8009084:	2101      	movs	r1, #1
 8009086:	4658      	mov	r0, fp
 8009088:	f000 fbee 	bl	8009868 <__i2b>
 800908c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908e:	4604      	mov	r4, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 81cf 	beq.w	8009434 <_dtoa_r+0xb3c>
 8009096:	461a      	mov	r2, r3
 8009098:	4601      	mov	r1, r0
 800909a:	4658      	mov	r0, fp
 800909c:	f000 fca4 	bl	80099e8 <__pow5mult>
 80090a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	4604      	mov	r4, r0
 80090a6:	f300 8095 	bgt.w	80091d4 <_dtoa_r+0x8dc>
 80090aa:	9b02      	ldr	r3, [sp, #8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 8087 	bne.w	80091c0 <_dtoa_r+0x8c8>
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 8089 	bne.w	80091d0 <_dtoa_r+0x8d8>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090c4:	0d1b      	lsrs	r3, r3, #20
 80090c6:	051b      	lsls	r3, r3, #20
 80090c8:	b12b      	cbz	r3, 80090d6 <_dtoa_r+0x7de>
 80090ca:	9b08      	ldr	r3, [sp, #32]
 80090cc:	3301      	adds	r3, #1
 80090ce:	9308      	str	r3, [sp, #32]
 80090d0:	f108 0801 	add.w	r8, r8, #1
 80090d4:	2301      	movs	r3, #1
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 81b0 	beq.w	8009440 <_dtoa_r+0xb48>
 80090e0:	6923      	ldr	r3, [r4, #16]
 80090e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80090e6:	6918      	ldr	r0, [r3, #16]
 80090e8:	f000 fb72 	bl	80097d0 <__hi0bits>
 80090ec:	f1c0 0020 	rsb	r0, r0, #32
 80090f0:	9b08      	ldr	r3, [sp, #32]
 80090f2:	4418      	add	r0, r3
 80090f4:	f010 001f 	ands.w	r0, r0, #31
 80090f8:	d077      	beq.n	80091ea <_dtoa_r+0x8f2>
 80090fa:	f1c0 0320 	rsb	r3, r0, #32
 80090fe:	2b04      	cmp	r3, #4
 8009100:	dd6b      	ble.n	80091da <_dtoa_r+0x8e2>
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	f1c0 001c 	rsb	r0, r0, #28
 8009108:	4403      	add	r3, r0
 800910a:	4480      	add	r8, r0
 800910c:	4406      	add	r6, r0
 800910e:	9308      	str	r3, [sp, #32]
 8009110:	f1b8 0f00 	cmp.w	r8, #0
 8009114:	dd05      	ble.n	8009122 <_dtoa_r+0x82a>
 8009116:	4649      	mov	r1, r9
 8009118:	4642      	mov	r2, r8
 800911a:	4658      	mov	r0, fp
 800911c:	f000 fcbe 	bl	8009a9c <__lshift>
 8009120:	4681      	mov	r9, r0
 8009122:	9b08      	ldr	r3, [sp, #32]
 8009124:	2b00      	cmp	r3, #0
 8009126:	dd05      	ble.n	8009134 <_dtoa_r+0x83c>
 8009128:	4621      	mov	r1, r4
 800912a:	461a      	mov	r2, r3
 800912c:	4658      	mov	r0, fp
 800912e:	f000 fcb5 	bl	8009a9c <__lshift>
 8009132:	4604      	mov	r4, r0
 8009134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009136:	2b00      	cmp	r3, #0
 8009138:	d059      	beq.n	80091ee <_dtoa_r+0x8f6>
 800913a:	4621      	mov	r1, r4
 800913c:	4648      	mov	r0, r9
 800913e:	f000 fd19 	bl	8009b74 <__mcmp>
 8009142:	2800      	cmp	r0, #0
 8009144:	da53      	bge.n	80091ee <_dtoa_r+0x8f6>
 8009146:	1e7b      	subs	r3, r7, #1
 8009148:	9304      	str	r3, [sp, #16]
 800914a:	4649      	mov	r1, r9
 800914c:	2300      	movs	r3, #0
 800914e:	220a      	movs	r2, #10
 8009150:	4658      	mov	r0, fp
 8009152:	f000 faf7 	bl	8009744 <__multadd>
 8009156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009158:	4681      	mov	r9, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 8172 	beq.w	8009444 <_dtoa_r+0xb4c>
 8009160:	2300      	movs	r3, #0
 8009162:	4629      	mov	r1, r5
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 faec 	bl	8009744 <__multadd>
 800916c:	9b00      	ldr	r3, [sp, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	4605      	mov	r5, r0
 8009172:	dc67      	bgt.n	8009244 <_dtoa_r+0x94c>
 8009174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009176:	2b02      	cmp	r3, #2
 8009178:	dc41      	bgt.n	80091fe <_dtoa_r+0x906>
 800917a:	e063      	b.n	8009244 <_dtoa_r+0x94c>
 800917c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800917e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009182:	e746      	b.n	8009012 <_dtoa_r+0x71a>
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	1e5c      	subs	r4, r3, #1
 8009188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800918a:	42a3      	cmp	r3, r4
 800918c:	bfbf      	itttt	lt
 800918e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009194:	1ae3      	sublt	r3, r4, r3
 8009196:	bfb4      	ite	lt
 8009198:	18d2      	addlt	r2, r2, r3
 800919a:	1b1c      	subge	r4, r3, r4
 800919c:	9b07      	ldr	r3, [sp, #28]
 800919e:	bfbc      	itt	lt
 80091a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80091a2:	2400      	movlt	r4, #0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	bfb5      	itete	lt
 80091a8:	eba8 0603 	sublt.w	r6, r8, r3
 80091ac:	9b07      	ldrge	r3, [sp, #28]
 80091ae:	2300      	movlt	r3, #0
 80091b0:	4646      	movge	r6, r8
 80091b2:	e730      	b.n	8009016 <_dtoa_r+0x71e>
 80091b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80091b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80091b8:	4646      	mov	r6, r8
 80091ba:	e735      	b.n	8009028 <_dtoa_r+0x730>
 80091bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091be:	e75c      	b.n	800907a <_dtoa_r+0x782>
 80091c0:	2300      	movs	r3, #0
 80091c2:	e788      	b.n	80090d6 <_dtoa_r+0x7de>
 80091c4:	3fe00000 	.word	0x3fe00000
 80091c8:	40240000 	.word	0x40240000
 80091cc:	40140000 	.word	0x40140000
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	e780      	b.n	80090d6 <_dtoa_r+0x7de>
 80091d4:	2300      	movs	r3, #0
 80091d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d8:	e782      	b.n	80090e0 <_dtoa_r+0x7e8>
 80091da:	d099      	beq.n	8009110 <_dtoa_r+0x818>
 80091dc:	9a08      	ldr	r2, [sp, #32]
 80091de:	331c      	adds	r3, #28
 80091e0:	441a      	add	r2, r3
 80091e2:	4498      	add	r8, r3
 80091e4:	441e      	add	r6, r3
 80091e6:	9208      	str	r2, [sp, #32]
 80091e8:	e792      	b.n	8009110 <_dtoa_r+0x818>
 80091ea:	4603      	mov	r3, r0
 80091ec:	e7f6      	b.n	80091dc <_dtoa_r+0x8e4>
 80091ee:	9b07      	ldr	r3, [sp, #28]
 80091f0:	9704      	str	r7, [sp, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dc20      	bgt.n	8009238 <_dtoa_r+0x940>
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	dd1e      	ble.n	800923c <_dtoa_r+0x944>
 80091fe:	9b00      	ldr	r3, [sp, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	f47f aec0 	bne.w	8008f86 <_dtoa_r+0x68e>
 8009206:	4621      	mov	r1, r4
 8009208:	2205      	movs	r2, #5
 800920a:	4658      	mov	r0, fp
 800920c:	f000 fa9a 	bl	8009744 <__multadd>
 8009210:	4601      	mov	r1, r0
 8009212:	4604      	mov	r4, r0
 8009214:	4648      	mov	r0, r9
 8009216:	f000 fcad 	bl	8009b74 <__mcmp>
 800921a:	2800      	cmp	r0, #0
 800921c:	f77f aeb3 	ble.w	8008f86 <_dtoa_r+0x68e>
 8009220:	4656      	mov	r6, sl
 8009222:	2331      	movs	r3, #49	@ 0x31
 8009224:	f806 3b01 	strb.w	r3, [r6], #1
 8009228:	9b04      	ldr	r3, [sp, #16]
 800922a:	3301      	adds	r3, #1
 800922c:	9304      	str	r3, [sp, #16]
 800922e:	e6ae      	b.n	8008f8e <_dtoa_r+0x696>
 8009230:	9c07      	ldr	r4, [sp, #28]
 8009232:	9704      	str	r7, [sp, #16]
 8009234:	4625      	mov	r5, r4
 8009236:	e7f3      	b.n	8009220 <_dtoa_r+0x928>
 8009238:	9b07      	ldr	r3, [sp, #28]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	f000 8104 	beq.w	800944c <_dtoa_r+0xb54>
 8009244:	2e00      	cmp	r6, #0
 8009246:	dd05      	ble.n	8009254 <_dtoa_r+0x95c>
 8009248:	4629      	mov	r1, r5
 800924a:	4632      	mov	r2, r6
 800924c:	4658      	mov	r0, fp
 800924e:	f000 fc25 	bl	8009a9c <__lshift>
 8009252:	4605      	mov	r5, r0
 8009254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009256:	2b00      	cmp	r3, #0
 8009258:	d05a      	beq.n	8009310 <_dtoa_r+0xa18>
 800925a:	6869      	ldr	r1, [r5, #4]
 800925c:	4658      	mov	r0, fp
 800925e:	f000 fa0f 	bl	8009680 <_Balloc>
 8009262:	4606      	mov	r6, r0
 8009264:	b928      	cbnz	r0, 8009272 <_dtoa_r+0x97a>
 8009266:	4b84      	ldr	r3, [pc, #528]	@ (8009478 <_dtoa_r+0xb80>)
 8009268:	4602      	mov	r2, r0
 800926a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800926e:	f7ff bb5a 	b.w	8008926 <_dtoa_r+0x2e>
 8009272:	692a      	ldr	r2, [r5, #16]
 8009274:	3202      	adds	r2, #2
 8009276:	0092      	lsls	r2, r2, #2
 8009278:	f105 010c 	add.w	r1, r5, #12
 800927c:	300c      	adds	r0, #12
 800927e:	f7ff faa4 	bl	80087ca <memcpy>
 8009282:	2201      	movs	r2, #1
 8009284:	4631      	mov	r1, r6
 8009286:	4658      	mov	r0, fp
 8009288:	f000 fc08 	bl	8009a9c <__lshift>
 800928c:	f10a 0301 	add.w	r3, sl, #1
 8009290:	9307      	str	r3, [sp, #28]
 8009292:	9b00      	ldr	r3, [sp, #0]
 8009294:	4453      	add	r3, sl
 8009296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	f003 0301 	and.w	r3, r3, #1
 800929e:	462f      	mov	r7, r5
 80092a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80092a2:	4605      	mov	r5, r0
 80092a4:	9b07      	ldr	r3, [sp, #28]
 80092a6:	4621      	mov	r1, r4
 80092a8:	3b01      	subs	r3, #1
 80092aa:	4648      	mov	r0, r9
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	f7ff fa9a 	bl	80087e6 <quorem>
 80092b2:	4639      	mov	r1, r7
 80092b4:	9002      	str	r0, [sp, #8]
 80092b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80092ba:	4648      	mov	r0, r9
 80092bc:	f000 fc5a 	bl	8009b74 <__mcmp>
 80092c0:	462a      	mov	r2, r5
 80092c2:	9008      	str	r0, [sp, #32]
 80092c4:	4621      	mov	r1, r4
 80092c6:	4658      	mov	r0, fp
 80092c8:	f000 fc70 	bl	8009bac <__mdiff>
 80092cc:	68c2      	ldr	r2, [r0, #12]
 80092ce:	4606      	mov	r6, r0
 80092d0:	bb02      	cbnz	r2, 8009314 <_dtoa_r+0xa1c>
 80092d2:	4601      	mov	r1, r0
 80092d4:	4648      	mov	r0, r9
 80092d6:	f000 fc4d 	bl	8009b74 <__mcmp>
 80092da:	4602      	mov	r2, r0
 80092dc:	4631      	mov	r1, r6
 80092de:	4658      	mov	r0, fp
 80092e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80092e2:	f000 fa0d 	bl	8009700 <_Bfree>
 80092e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092ea:	9e07      	ldr	r6, [sp, #28]
 80092ec:	ea43 0102 	orr.w	r1, r3, r2
 80092f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092f2:	4319      	orrs	r1, r3
 80092f4:	d110      	bne.n	8009318 <_dtoa_r+0xa20>
 80092f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092fa:	d029      	beq.n	8009350 <_dtoa_r+0xa58>
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	dd02      	ble.n	8009308 <_dtoa_r+0xa10>
 8009302:	9b02      	ldr	r3, [sp, #8]
 8009304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009308:	9b00      	ldr	r3, [sp, #0]
 800930a:	f883 8000 	strb.w	r8, [r3]
 800930e:	e63f      	b.n	8008f90 <_dtoa_r+0x698>
 8009310:	4628      	mov	r0, r5
 8009312:	e7bb      	b.n	800928c <_dtoa_r+0x994>
 8009314:	2201      	movs	r2, #1
 8009316:	e7e1      	b.n	80092dc <_dtoa_r+0x9e4>
 8009318:	9b08      	ldr	r3, [sp, #32]
 800931a:	2b00      	cmp	r3, #0
 800931c:	db04      	blt.n	8009328 <_dtoa_r+0xa30>
 800931e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009320:	430b      	orrs	r3, r1
 8009322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009324:	430b      	orrs	r3, r1
 8009326:	d120      	bne.n	800936a <_dtoa_r+0xa72>
 8009328:	2a00      	cmp	r2, #0
 800932a:	dded      	ble.n	8009308 <_dtoa_r+0xa10>
 800932c:	4649      	mov	r1, r9
 800932e:	2201      	movs	r2, #1
 8009330:	4658      	mov	r0, fp
 8009332:	f000 fbb3 	bl	8009a9c <__lshift>
 8009336:	4621      	mov	r1, r4
 8009338:	4681      	mov	r9, r0
 800933a:	f000 fc1b 	bl	8009b74 <__mcmp>
 800933e:	2800      	cmp	r0, #0
 8009340:	dc03      	bgt.n	800934a <_dtoa_r+0xa52>
 8009342:	d1e1      	bne.n	8009308 <_dtoa_r+0xa10>
 8009344:	f018 0f01 	tst.w	r8, #1
 8009348:	d0de      	beq.n	8009308 <_dtoa_r+0xa10>
 800934a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800934e:	d1d8      	bne.n	8009302 <_dtoa_r+0xa0a>
 8009350:	9a00      	ldr	r2, [sp, #0]
 8009352:	2339      	movs	r3, #57	@ 0x39
 8009354:	7013      	strb	r3, [r2, #0]
 8009356:	4633      	mov	r3, r6
 8009358:	461e      	mov	r6, r3
 800935a:	3b01      	subs	r3, #1
 800935c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009360:	2a39      	cmp	r2, #57	@ 0x39
 8009362:	d052      	beq.n	800940a <_dtoa_r+0xb12>
 8009364:	3201      	adds	r2, #1
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	e612      	b.n	8008f90 <_dtoa_r+0x698>
 800936a:	2a00      	cmp	r2, #0
 800936c:	dd07      	ble.n	800937e <_dtoa_r+0xa86>
 800936e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009372:	d0ed      	beq.n	8009350 <_dtoa_r+0xa58>
 8009374:	9a00      	ldr	r2, [sp, #0]
 8009376:	f108 0301 	add.w	r3, r8, #1
 800937a:	7013      	strb	r3, [r2, #0]
 800937c:	e608      	b.n	8008f90 <_dtoa_r+0x698>
 800937e:	9b07      	ldr	r3, [sp, #28]
 8009380:	9a07      	ldr	r2, [sp, #28]
 8009382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	4293      	cmp	r3, r2
 800938a:	d028      	beq.n	80093de <_dtoa_r+0xae6>
 800938c:	4649      	mov	r1, r9
 800938e:	2300      	movs	r3, #0
 8009390:	220a      	movs	r2, #10
 8009392:	4658      	mov	r0, fp
 8009394:	f000 f9d6 	bl	8009744 <__multadd>
 8009398:	42af      	cmp	r7, r5
 800939a:	4681      	mov	r9, r0
 800939c:	f04f 0300 	mov.w	r3, #0
 80093a0:	f04f 020a 	mov.w	r2, #10
 80093a4:	4639      	mov	r1, r7
 80093a6:	4658      	mov	r0, fp
 80093a8:	d107      	bne.n	80093ba <_dtoa_r+0xac2>
 80093aa:	f000 f9cb 	bl	8009744 <__multadd>
 80093ae:	4607      	mov	r7, r0
 80093b0:	4605      	mov	r5, r0
 80093b2:	9b07      	ldr	r3, [sp, #28]
 80093b4:	3301      	adds	r3, #1
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	e774      	b.n	80092a4 <_dtoa_r+0x9ac>
 80093ba:	f000 f9c3 	bl	8009744 <__multadd>
 80093be:	4629      	mov	r1, r5
 80093c0:	4607      	mov	r7, r0
 80093c2:	2300      	movs	r3, #0
 80093c4:	220a      	movs	r2, #10
 80093c6:	4658      	mov	r0, fp
 80093c8:	f000 f9bc 	bl	8009744 <__multadd>
 80093cc:	4605      	mov	r5, r0
 80093ce:	e7f0      	b.n	80093b2 <_dtoa_r+0xaba>
 80093d0:	9b00      	ldr	r3, [sp, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bfcc      	ite	gt
 80093d6:	461e      	movgt	r6, r3
 80093d8:	2601      	movle	r6, #1
 80093da:	4456      	add	r6, sl
 80093dc:	2700      	movs	r7, #0
 80093de:	4649      	mov	r1, r9
 80093e0:	2201      	movs	r2, #1
 80093e2:	4658      	mov	r0, fp
 80093e4:	f000 fb5a 	bl	8009a9c <__lshift>
 80093e8:	4621      	mov	r1, r4
 80093ea:	4681      	mov	r9, r0
 80093ec:	f000 fbc2 	bl	8009b74 <__mcmp>
 80093f0:	2800      	cmp	r0, #0
 80093f2:	dcb0      	bgt.n	8009356 <_dtoa_r+0xa5e>
 80093f4:	d102      	bne.n	80093fc <_dtoa_r+0xb04>
 80093f6:	f018 0f01 	tst.w	r8, #1
 80093fa:	d1ac      	bne.n	8009356 <_dtoa_r+0xa5e>
 80093fc:	4633      	mov	r3, r6
 80093fe:	461e      	mov	r6, r3
 8009400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009404:	2a30      	cmp	r2, #48	@ 0x30
 8009406:	d0fa      	beq.n	80093fe <_dtoa_r+0xb06>
 8009408:	e5c2      	b.n	8008f90 <_dtoa_r+0x698>
 800940a:	459a      	cmp	sl, r3
 800940c:	d1a4      	bne.n	8009358 <_dtoa_r+0xa60>
 800940e:	9b04      	ldr	r3, [sp, #16]
 8009410:	3301      	adds	r3, #1
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	2331      	movs	r3, #49	@ 0x31
 8009416:	f88a 3000 	strb.w	r3, [sl]
 800941a:	e5b9      	b.n	8008f90 <_dtoa_r+0x698>
 800941c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800941e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800947c <_dtoa_r+0xb84>
 8009422:	b11b      	cbz	r3, 800942c <_dtoa_r+0xb34>
 8009424:	f10a 0308 	add.w	r3, sl, #8
 8009428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	4650      	mov	r0, sl
 800942e:	b019      	add	sp, #100	@ 0x64
 8009430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009436:	2b01      	cmp	r3, #1
 8009438:	f77f ae37 	ble.w	80090aa <_dtoa_r+0x7b2>
 800943c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800943e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009440:	2001      	movs	r0, #1
 8009442:	e655      	b.n	80090f0 <_dtoa_r+0x7f8>
 8009444:	9b00      	ldr	r3, [sp, #0]
 8009446:	2b00      	cmp	r3, #0
 8009448:	f77f aed6 	ble.w	80091f8 <_dtoa_r+0x900>
 800944c:	4656      	mov	r6, sl
 800944e:	4621      	mov	r1, r4
 8009450:	4648      	mov	r0, r9
 8009452:	f7ff f9c8 	bl	80087e6 <quorem>
 8009456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800945a:	f806 8b01 	strb.w	r8, [r6], #1
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	eba6 020a 	sub.w	r2, r6, sl
 8009464:	4293      	cmp	r3, r2
 8009466:	ddb3      	ble.n	80093d0 <_dtoa_r+0xad8>
 8009468:	4649      	mov	r1, r9
 800946a:	2300      	movs	r3, #0
 800946c:	220a      	movs	r2, #10
 800946e:	4658      	mov	r0, fp
 8009470:	f000 f968 	bl	8009744 <__multadd>
 8009474:	4681      	mov	r9, r0
 8009476:	e7ea      	b.n	800944e <_dtoa_r+0xb56>
 8009478:	0800aaf0 	.word	0x0800aaf0
 800947c:	0800aa74 	.word	0x0800aa74

08009480 <_free_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4605      	mov	r5, r0
 8009484:	2900      	cmp	r1, #0
 8009486:	d041      	beq.n	800950c <_free_r+0x8c>
 8009488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800948c:	1f0c      	subs	r4, r1, #4
 800948e:	2b00      	cmp	r3, #0
 8009490:	bfb8      	it	lt
 8009492:	18e4      	addlt	r4, r4, r3
 8009494:	f000 f8e8 	bl	8009668 <__malloc_lock>
 8009498:	4a1d      	ldr	r2, [pc, #116]	@ (8009510 <_free_r+0x90>)
 800949a:	6813      	ldr	r3, [r2, #0]
 800949c:	b933      	cbnz	r3, 80094ac <_free_r+0x2c>
 800949e:	6063      	str	r3, [r4, #4]
 80094a0:	6014      	str	r4, [r2, #0]
 80094a2:	4628      	mov	r0, r5
 80094a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094a8:	f000 b8e4 	b.w	8009674 <__malloc_unlock>
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d908      	bls.n	80094c2 <_free_r+0x42>
 80094b0:	6820      	ldr	r0, [r4, #0]
 80094b2:	1821      	adds	r1, r4, r0
 80094b4:	428b      	cmp	r3, r1
 80094b6:	bf01      	itttt	eq
 80094b8:	6819      	ldreq	r1, [r3, #0]
 80094ba:	685b      	ldreq	r3, [r3, #4]
 80094bc:	1809      	addeq	r1, r1, r0
 80094be:	6021      	streq	r1, [r4, #0]
 80094c0:	e7ed      	b.n	800949e <_free_r+0x1e>
 80094c2:	461a      	mov	r2, r3
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	b10b      	cbz	r3, 80094cc <_free_r+0x4c>
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	d9fa      	bls.n	80094c2 <_free_r+0x42>
 80094cc:	6811      	ldr	r1, [r2, #0]
 80094ce:	1850      	adds	r0, r2, r1
 80094d0:	42a0      	cmp	r0, r4
 80094d2:	d10b      	bne.n	80094ec <_free_r+0x6c>
 80094d4:	6820      	ldr	r0, [r4, #0]
 80094d6:	4401      	add	r1, r0
 80094d8:	1850      	adds	r0, r2, r1
 80094da:	4283      	cmp	r3, r0
 80094dc:	6011      	str	r1, [r2, #0]
 80094de:	d1e0      	bne.n	80094a2 <_free_r+0x22>
 80094e0:	6818      	ldr	r0, [r3, #0]
 80094e2:	685b      	ldr	r3, [r3, #4]
 80094e4:	6053      	str	r3, [r2, #4]
 80094e6:	4408      	add	r0, r1
 80094e8:	6010      	str	r0, [r2, #0]
 80094ea:	e7da      	b.n	80094a2 <_free_r+0x22>
 80094ec:	d902      	bls.n	80094f4 <_free_r+0x74>
 80094ee:	230c      	movs	r3, #12
 80094f0:	602b      	str	r3, [r5, #0]
 80094f2:	e7d6      	b.n	80094a2 <_free_r+0x22>
 80094f4:	6820      	ldr	r0, [r4, #0]
 80094f6:	1821      	adds	r1, r4, r0
 80094f8:	428b      	cmp	r3, r1
 80094fa:	bf04      	itt	eq
 80094fc:	6819      	ldreq	r1, [r3, #0]
 80094fe:	685b      	ldreq	r3, [r3, #4]
 8009500:	6063      	str	r3, [r4, #4]
 8009502:	bf04      	itt	eq
 8009504:	1809      	addeq	r1, r1, r0
 8009506:	6021      	streq	r1, [r4, #0]
 8009508:	6054      	str	r4, [r2, #4]
 800950a:	e7ca      	b.n	80094a2 <_free_r+0x22>
 800950c:	bd38      	pop	{r3, r4, r5, pc}
 800950e:	bf00      	nop
 8009510:	200004c8 	.word	0x200004c8

08009514 <malloc>:
 8009514:	4b02      	ldr	r3, [pc, #8]	@ (8009520 <malloc+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b825 	b.w	8009568 <_malloc_r>
 800951e:	bf00      	nop
 8009520:	20000038 	.word	0x20000038

08009524 <sbrk_aligned>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4e0f      	ldr	r6, [pc, #60]	@ (8009564 <sbrk_aligned+0x40>)
 8009528:	460c      	mov	r4, r1
 800952a:	6831      	ldr	r1, [r6, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	b911      	cbnz	r1, 8009536 <sbrk_aligned+0x12>
 8009530:	f000 fe9a 	bl	800a268 <_sbrk_r>
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f000 fe95 	bl	800a268 <_sbrk_r>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d103      	bne.n	800954a <sbrk_aligned+0x26>
 8009542:	f04f 34ff 	mov.w	r4, #4294967295
 8009546:	4620      	mov	r0, r4
 8009548:	bd70      	pop	{r4, r5, r6, pc}
 800954a:	1cc4      	adds	r4, r0, #3
 800954c:	f024 0403 	bic.w	r4, r4, #3
 8009550:	42a0      	cmp	r0, r4
 8009552:	d0f8      	beq.n	8009546 <sbrk_aligned+0x22>
 8009554:	1a21      	subs	r1, r4, r0
 8009556:	4628      	mov	r0, r5
 8009558:	f000 fe86 	bl	800a268 <_sbrk_r>
 800955c:	3001      	adds	r0, #1
 800955e:	d1f2      	bne.n	8009546 <sbrk_aligned+0x22>
 8009560:	e7ef      	b.n	8009542 <sbrk_aligned+0x1e>
 8009562:	bf00      	nop
 8009564:	200004c4 	.word	0x200004c4

08009568 <_malloc_r>:
 8009568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800956c:	1ccd      	adds	r5, r1, #3
 800956e:	f025 0503 	bic.w	r5, r5, #3
 8009572:	3508      	adds	r5, #8
 8009574:	2d0c      	cmp	r5, #12
 8009576:	bf38      	it	cc
 8009578:	250c      	movcc	r5, #12
 800957a:	2d00      	cmp	r5, #0
 800957c:	4606      	mov	r6, r0
 800957e:	db01      	blt.n	8009584 <_malloc_r+0x1c>
 8009580:	42a9      	cmp	r1, r5
 8009582:	d904      	bls.n	800958e <_malloc_r+0x26>
 8009584:	230c      	movs	r3, #12
 8009586:	6033      	str	r3, [r6, #0]
 8009588:	2000      	movs	r0, #0
 800958a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009664 <_malloc_r+0xfc>
 8009592:	f000 f869 	bl	8009668 <__malloc_lock>
 8009596:	f8d8 3000 	ldr.w	r3, [r8]
 800959a:	461c      	mov	r4, r3
 800959c:	bb44      	cbnz	r4, 80095f0 <_malloc_r+0x88>
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff ffbf 	bl	8009524 <sbrk_aligned>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	4604      	mov	r4, r0
 80095aa:	d158      	bne.n	800965e <_malloc_r+0xf6>
 80095ac:	f8d8 4000 	ldr.w	r4, [r8]
 80095b0:	4627      	mov	r7, r4
 80095b2:	2f00      	cmp	r7, #0
 80095b4:	d143      	bne.n	800963e <_malloc_r+0xd6>
 80095b6:	2c00      	cmp	r4, #0
 80095b8:	d04b      	beq.n	8009652 <_malloc_r+0xea>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4639      	mov	r1, r7
 80095be:	4630      	mov	r0, r6
 80095c0:	eb04 0903 	add.w	r9, r4, r3
 80095c4:	f000 fe50 	bl	800a268 <_sbrk_r>
 80095c8:	4581      	cmp	r9, r0
 80095ca:	d142      	bne.n	8009652 <_malloc_r+0xea>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	1a6d      	subs	r5, r5, r1
 80095d0:	4629      	mov	r1, r5
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffa6 	bl	8009524 <sbrk_aligned>
 80095d8:	3001      	adds	r0, #1
 80095da:	d03a      	beq.n	8009652 <_malloc_r+0xea>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	442b      	add	r3, r5
 80095e0:	6023      	str	r3, [r4, #0]
 80095e2:	f8d8 3000 	ldr.w	r3, [r8]
 80095e6:	685a      	ldr	r2, [r3, #4]
 80095e8:	bb62      	cbnz	r2, 8009644 <_malloc_r+0xdc>
 80095ea:	f8c8 7000 	str.w	r7, [r8]
 80095ee:	e00f      	b.n	8009610 <_malloc_r+0xa8>
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	1b52      	subs	r2, r2, r5
 80095f4:	d420      	bmi.n	8009638 <_malloc_r+0xd0>
 80095f6:	2a0b      	cmp	r2, #11
 80095f8:	d917      	bls.n	800962a <_malloc_r+0xc2>
 80095fa:	1961      	adds	r1, r4, r5
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	6025      	str	r5, [r4, #0]
 8009600:	bf18      	it	ne
 8009602:	6059      	strne	r1, [r3, #4]
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	bf08      	it	eq
 8009608:	f8c8 1000 	streq.w	r1, [r8]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4630      	mov	r0, r6
 8009612:	f000 f82f 	bl	8009674 <__malloc_unlock>
 8009616:	f104 000b 	add.w	r0, r4, #11
 800961a:	1d23      	adds	r3, r4, #4
 800961c:	f020 0007 	bic.w	r0, r0, #7
 8009620:	1ac2      	subs	r2, r0, r3
 8009622:	bf1c      	itt	ne
 8009624:	1a1b      	subne	r3, r3, r0
 8009626:	50a3      	strne	r3, [r4, r2]
 8009628:	e7af      	b.n	800958a <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	f8c8 2000 	streq.w	r2, [r8]
 8009634:	605a      	strne	r2, [r3, #4]
 8009636:	e7eb      	b.n	8009610 <_malloc_r+0xa8>
 8009638:	4623      	mov	r3, r4
 800963a:	6864      	ldr	r4, [r4, #4]
 800963c:	e7ae      	b.n	800959c <_malloc_r+0x34>
 800963e:	463c      	mov	r4, r7
 8009640:	687f      	ldr	r7, [r7, #4]
 8009642:	e7b6      	b.n	80095b2 <_malloc_r+0x4a>
 8009644:	461a      	mov	r2, r3
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	42a3      	cmp	r3, r4
 800964a:	d1fb      	bne.n	8009644 <_malloc_r+0xdc>
 800964c:	2300      	movs	r3, #0
 800964e:	6053      	str	r3, [r2, #4]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa8>
 8009652:	230c      	movs	r3, #12
 8009654:	6033      	str	r3, [r6, #0]
 8009656:	4630      	mov	r0, r6
 8009658:	f000 f80c 	bl	8009674 <__malloc_unlock>
 800965c:	e794      	b.n	8009588 <_malloc_r+0x20>
 800965e:	6005      	str	r5, [r0, #0]
 8009660:	e7d6      	b.n	8009610 <_malloc_r+0xa8>
 8009662:	bf00      	nop
 8009664:	200004c8 	.word	0x200004c8

08009668 <__malloc_lock>:
 8009668:	4801      	ldr	r0, [pc, #4]	@ (8009670 <__malloc_lock+0x8>)
 800966a:	f7ff b8ac 	b.w	80087c6 <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	200004c0 	.word	0x200004c0

08009674 <__malloc_unlock>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__malloc_unlock+0x8>)
 8009676:	f7ff b8a7 	b.w	80087c8 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	200004c0 	.word	0x200004c0

08009680 <_Balloc>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	69c6      	ldr	r6, [r0, #28]
 8009684:	4604      	mov	r4, r0
 8009686:	460d      	mov	r5, r1
 8009688:	b976      	cbnz	r6, 80096a8 <_Balloc+0x28>
 800968a:	2010      	movs	r0, #16
 800968c:	f7ff ff42 	bl	8009514 <malloc>
 8009690:	4602      	mov	r2, r0
 8009692:	61e0      	str	r0, [r4, #28]
 8009694:	b920      	cbnz	r0, 80096a0 <_Balloc+0x20>
 8009696:	4b18      	ldr	r3, [pc, #96]	@ (80096f8 <_Balloc+0x78>)
 8009698:	4818      	ldr	r0, [pc, #96]	@ (80096fc <_Balloc+0x7c>)
 800969a:	216b      	movs	r1, #107	@ 0x6b
 800969c:	f000 fdf4 	bl	800a288 <__assert_func>
 80096a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096a4:	6006      	str	r6, [r0, #0]
 80096a6:	60c6      	str	r6, [r0, #12]
 80096a8:	69e6      	ldr	r6, [r4, #28]
 80096aa:	68f3      	ldr	r3, [r6, #12]
 80096ac:	b183      	cbz	r3, 80096d0 <_Balloc+0x50>
 80096ae:	69e3      	ldr	r3, [r4, #28]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80096b6:	b9b8      	cbnz	r0, 80096e8 <_Balloc+0x68>
 80096b8:	2101      	movs	r1, #1
 80096ba:	fa01 f605 	lsl.w	r6, r1, r5
 80096be:	1d72      	adds	r2, r6, #5
 80096c0:	0092      	lsls	r2, r2, #2
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fdfe 	bl	800a2c4 <_calloc_r>
 80096c8:	b160      	cbz	r0, 80096e4 <_Balloc+0x64>
 80096ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80096ce:	e00e      	b.n	80096ee <_Balloc+0x6e>
 80096d0:	2221      	movs	r2, #33	@ 0x21
 80096d2:	2104      	movs	r1, #4
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 fdf5 	bl	800a2c4 <_calloc_r>
 80096da:	69e3      	ldr	r3, [r4, #28]
 80096dc:	60f0      	str	r0, [r6, #12]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e4      	bne.n	80096ae <_Balloc+0x2e>
 80096e4:	2000      	movs	r0, #0
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	6802      	ldr	r2, [r0, #0]
 80096ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80096ee:	2300      	movs	r3, #0
 80096f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096f4:	e7f7      	b.n	80096e6 <_Balloc+0x66>
 80096f6:	bf00      	nop
 80096f8:	0800aa81 	.word	0x0800aa81
 80096fc:	0800ab01 	.word	0x0800ab01

08009700 <_Bfree>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	69c6      	ldr	r6, [r0, #28]
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b976      	cbnz	r6, 8009728 <_Bfree+0x28>
 800970a:	2010      	movs	r0, #16
 800970c:	f7ff ff02 	bl	8009514 <malloc>
 8009710:	4602      	mov	r2, r0
 8009712:	61e8      	str	r0, [r5, #28]
 8009714:	b920      	cbnz	r0, 8009720 <_Bfree+0x20>
 8009716:	4b09      	ldr	r3, [pc, #36]	@ (800973c <_Bfree+0x3c>)
 8009718:	4809      	ldr	r0, [pc, #36]	@ (8009740 <_Bfree+0x40>)
 800971a:	218f      	movs	r1, #143	@ 0x8f
 800971c:	f000 fdb4 	bl	800a288 <__assert_func>
 8009720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009724:	6006      	str	r6, [r0, #0]
 8009726:	60c6      	str	r6, [r0, #12]
 8009728:	b13c      	cbz	r4, 800973a <_Bfree+0x3a>
 800972a:	69eb      	ldr	r3, [r5, #28]
 800972c:	6862      	ldr	r2, [r4, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009734:	6021      	str	r1, [r4, #0]
 8009736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800973a:	bd70      	pop	{r4, r5, r6, pc}
 800973c:	0800aa81 	.word	0x0800aa81
 8009740:	0800ab01 	.word	0x0800ab01

08009744 <__multadd>:
 8009744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009748:	690d      	ldr	r5, [r1, #16]
 800974a:	4607      	mov	r7, r0
 800974c:	460c      	mov	r4, r1
 800974e:	461e      	mov	r6, r3
 8009750:	f101 0c14 	add.w	ip, r1, #20
 8009754:	2000      	movs	r0, #0
 8009756:	f8dc 3000 	ldr.w	r3, [ip]
 800975a:	b299      	uxth	r1, r3
 800975c:	fb02 6101 	mla	r1, r2, r1, r6
 8009760:	0c1e      	lsrs	r6, r3, #16
 8009762:	0c0b      	lsrs	r3, r1, #16
 8009764:	fb02 3306 	mla	r3, r2, r6, r3
 8009768:	b289      	uxth	r1, r1
 800976a:	3001      	adds	r0, #1
 800976c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009770:	4285      	cmp	r5, r0
 8009772:	f84c 1b04 	str.w	r1, [ip], #4
 8009776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800977a:	dcec      	bgt.n	8009756 <__multadd+0x12>
 800977c:	b30e      	cbz	r6, 80097c2 <__multadd+0x7e>
 800977e:	68a3      	ldr	r3, [r4, #8]
 8009780:	42ab      	cmp	r3, r5
 8009782:	dc19      	bgt.n	80097b8 <__multadd+0x74>
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4638      	mov	r0, r7
 8009788:	3101      	adds	r1, #1
 800978a:	f7ff ff79 	bl	8009680 <_Balloc>
 800978e:	4680      	mov	r8, r0
 8009790:	b928      	cbnz	r0, 800979e <__multadd+0x5a>
 8009792:	4602      	mov	r2, r0
 8009794:	4b0c      	ldr	r3, [pc, #48]	@ (80097c8 <__multadd+0x84>)
 8009796:	480d      	ldr	r0, [pc, #52]	@ (80097cc <__multadd+0x88>)
 8009798:	21ba      	movs	r1, #186	@ 0xba
 800979a:	f000 fd75 	bl	800a288 <__assert_func>
 800979e:	6922      	ldr	r2, [r4, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	f104 010c 	add.w	r1, r4, #12
 80097a6:	0092      	lsls	r2, r2, #2
 80097a8:	300c      	adds	r0, #12
 80097aa:	f7ff f80e 	bl	80087ca <memcpy>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4638      	mov	r0, r7
 80097b2:	f7ff ffa5 	bl	8009700 <_Bfree>
 80097b6:	4644      	mov	r4, r8
 80097b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80097bc:	3501      	adds	r5, #1
 80097be:	615e      	str	r6, [r3, #20]
 80097c0:	6125      	str	r5, [r4, #16]
 80097c2:	4620      	mov	r0, r4
 80097c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097c8:	0800aaf0 	.word	0x0800aaf0
 80097cc:	0800ab01 	.word	0x0800ab01

080097d0 <__hi0bits>:
 80097d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097d4:	4603      	mov	r3, r0
 80097d6:	bf36      	itet	cc
 80097d8:	0403      	lslcc	r3, r0, #16
 80097da:	2000      	movcs	r0, #0
 80097dc:	2010      	movcc	r0, #16
 80097de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097e2:	bf3c      	itt	cc
 80097e4:	021b      	lslcc	r3, r3, #8
 80097e6:	3008      	addcc	r0, #8
 80097e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097ec:	bf3c      	itt	cc
 80097ee:	011b      	lslcc	r3, r3, #4
 80097f0:	3004      	addcc	r0, #4
 80097f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097f6:	bf3c      	itt	cc
 80097f8:	009b      	lslcc	r3, r3, #2
 80097fa:	3002      	addcc	r0, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	db05      	blt.n	800980c <__hi0bits+0x3c>
 8009800:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009804:	f100 0001 	add.w	r0, r0, #1
 8009808:	bf08      	it	eq
 800980a:	2020      	moveq	r0, #32
 800980c:	4770      	bx	lr

0800980e <__lo0bits>:
 800980e:	6803      	ldr	r3, [r0, #0]
 8009810:	4602      	mov	r2, r0
 8009812:	f013 0007 	ands.w	r0, r3, #7
 8009816:	d00b      	beq.n	8009830 <__lo0bits+0x22>
 8009818:	07d9      	lsls	r1, r3, #31
 800981a:	d421      	bmi.n	8009860 <__lo0bits+0x52>
 800981c:	0798      	lsls	r0, r3, #30
 800981e:	bf49      	itett	mi
 8009820:	085b      	lsrmi	r3, r3, #1
 8009822:	089b      	lsrpl	r3, r3, #2
 8009824:	2001      	movmi	r0, #1
 8009826:	6013      	strmi	r3, [r2, #0]
 8009828:	bf5c      	itt	pl
 800982a:	6013      	strpl	r3, [r2, #0]
 800982c:	2002      	movpl	r0, #2
 800982e:	4770      	bx	lr
 8009830:	b299      	uxth	r1, r3
 8009832:	b909      	cbnz	r1, 8009838 <__lo0bits+0x2a>
 8009834:	0c1b      	lsrs	r3, r3, #16
 8009836:	2010      	movs	r0, #16
 8009838:	b2d9      	uxtb	r1, r3
 800983a:	b909      	cbnz	r1, 8009840 <__lo0bits+0x32>
 800983c:	3008      	adds	r0, #8
 800983e:	0a1b      	lsrs	r3, r3, #8
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	bf04      	itt	eq
 8009844:	091b      	lsreq	r3, r3, #4
 8009846:	3004      	addeq	r0, #4
 8009848:	0799      	lsls	r1, r3, #30
 800984a:	bf04      	itt	eq
 800984c:	089b      	lsreq	r3, r3, #2
 800984e:	3002      	addeq	r0, #2
 8009850:	07d9      	lsls	r1, r3, #31
 8009852:	d403      	bmi.n	800985c <__lo0bits+0x4e>
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	f100 0001 	add.w	r0, r0, #1
 800985a:	d003      	beq.n	8009864 <__lo0bits+0x56>
 800985c:	6013      	str	r3, [r2, #0]
 800985e:	4770      	bx	lr
 8009860:	2000      	movs	r0, #0
 8009862:	4770      	bx	lr
 8009864:	2020      	movs	r0, #32
 8009866:	4770      	bx	lr

08009868 <__i2b>:
 8009868:	b510      	push	{r4, lr}
 800986a:	460c      	mov	r4, r1
 800986c:	2101      	movs	r1, #1
 800986e:	f7ff ff07 	bl	8009680 <_Balloc>
 8009872:	4602      	mov	r2, r0
 8009874:	b928      	cbnz	r0, 8009882 <__i2b+0x1a>
 8009876:	4b05      	ldr	r3, [pc, #20]	@ (800988c <__i2b+0x24>)
 8009878:	4805      	ldr	r0, [pc, #20]	@ (8009890 <__i2b+0x28>)
 800987a:	f240 1145 	movw	r1, #325	@ 0x145
 800987e:	f000 fd03 	bl	800a288 <__assert_func>
 8009882:	2301      	movs	r3, #1
 8009884:	6144      	str	r4, [r0, #20]
 8009886:	6103      	str	r3, [r0, #16]
 8009888:	bd10      	pop	{r4, pc}
 800988a:	bf00      	nop
 800988c:	0800aaf0 	.word	0x0800aaf0
 8009890:	0800ab01 	.word	0x0800ab01

08009894 <__multiply>:
 8009894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009898:	4614      	mov	r4, r2
 800989a:	690a      	ldr	r2, [r1, #16]
 800989c:	6923      	ldr	r3, [r4, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	bfa8      	it	ge
 80098a2:	4623      	movge	r3, r4
 80098a4:	460f      	mov	r7, r1
 80098a6:	bfa4      	itt	ge
 80098a8:	460c      	movge	r4, r1
 80098aa:	461f      	movge	r7, r3
 80098ac:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80098b0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80098b4:	68a3      	ldr	r3, [r4, #8]
 80098b6:	6861      	ldr	r1, [r4, #4]
 80098b8:	eb0a 0609 	add.w	r6, sl, r9
 80098bc:	42b3      	cmp	r3, r6
 80098be:	b085      	sub	sp, #20
 80098c0:	bfb8      	it	lt
 80098c2:	3101      	addlt	r1, #1
 80098c4:	f7ff fedc 	bl	8009680 <_Balloc>
 80098c8:	b930      	cbnz	r0, 80098d8 <__multiply+0x44>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b44      	ldr	r3, [pc, #272]	@ (80099e0 <__multiply+0x14c>)
 80098ce:	4845      	ldr	r0, [pc, #276]	@ (80099e4 <__multiply+0x150>)
 80098d0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098d4:	f000 fcd8 	bl	800a288 <__assert_func>
 80098d8:	f100 0514 	add.w	r5, r0, #20
 80098dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098e0:	462b      	mov	r3, r5
 80098e2:	2200      	movs	r2, #0
 80098e4:	4543      	cmp	r3, r8
 80098e6:	d321      	bcc.n	800992c <__multiply+0x98>
 80098e8:	f107 0114 	add.w	r1, r7, #20
 80098ec:	f104 0214 	add.w	r2, r4, #20
 80098f0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098f4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098f8:	9302      	str	r3, [sp, #8]
 80098fa:	1b13      	subs	r3, r2, r4
 80098fc:	3b15      	subs	r3, #21
 80098fe:	f023 0303 	bic.w	r3, r3, #3
 8009902:	3304      	adds	r3, #4
 8009904:	f104 0715 	add.w	r7, r4, #21
 8009908:	42ba      	cmp	r2, r7
 800990a:	bf38      	it	cc
 800990c:	2304      	movcc	r3, #4
 800990e:	9301      	str	r3, [sp, #4]
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	9103      	str	r1, [sp, #12]
 8009914:	428b      	cmp	r3, r1
 8009916:	d80c      	bhi.n	8009932 <__multiply+0x9e>
 8009918:	2e00      	cmp	r6, #0
 800991a:	dd03      	ble.n	8009924 <__multiply+0x90>
 800991c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009920:	2b00      	cmp	r3, #0
 8009922:	d05b      	beq.n	80099dc <__multiply+0x148>
 8009924:	6106      	str	r6, [r0, #16]
 8009926:	b005      	add	sp, #20
 8009928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992c:	f843 2b04 	str.w	r2, [r3], #4
 8009930:	e7d8      	b.n	80098e4 <__multiply+0x50>
 8009932:	f8b1 a000 	ldrh.w	sl, [r1]
 8009936:	f1ba 0f00 	cmp.w	sl, #0
 800993a:	d024      	beq.n	8009986 <__multiply+0xf2>
 800993c:	f104 0e14 	add.w	lr, r4, #20
 8009940:	46a9      	mov	r9, r5
 8009942:	f04f 0c00 	mov.w	ip, #0
 8009946:	f85e 7b04 	ldr.w	r7, [lr], #4
 800994a:	f8d9 3000 	ldr.w	r3, [r9]
 800994e:	fa1f fb87 	uxth.w	fp, r7
 8009952:	b29b      	uxth	r3, r3
 8009954:	fb0a 330b 	mla	r3, sl, fp, r3
 8009958:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800995c:	f8d9 7000 	ldr.w	r7, [r9]
 8009960:	4463      	add	r3, ip
 8009962:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009966:	fb0a c70b 	mla	r7, sl, fp, ip
 800996a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800996e:	b29b      	uxth	r3, r3
 8009970:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009974:	4572      	cmp	r2, lr
 8009976:	f849 3b04 	str.w	r3, [r9], #4
 800997a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800997e:	d8e2      	bhi.n	8009946 <__multiply+0xb2>
 8009980:	9b01      	ldr	r3, [sp, #4]
 8009982:	f845 c003 	str.w	ip, [r5, r3]
 8009986:	9b03      	ldr	r3, [sp, #12]
 8009988:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800998c:	3104      	adds	r1, #4
 800998e:	f1b9 0f00 	cmp.w	r9, #0
 8009992:	d021      	beq.n	80099d8 <__multiply+0x144>
 8009994:	682b      	ldr	r3, [r5, #0]
 8009996:	f104 0c14 	add.w	ip, r4, #20
 800999a:	46ae      	mov	lr, r5
 800999c:	f04f 0a00 	mov.w	sl, #0
 80099a0:	f8bc b000 	ldrh.w	fp, [ip]
 80099a4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80099a8:	fb09 770b 	mla	r7, r9, fp, r7
 80099ac:	4457      	add	r7, sl
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80099b4:	f84e 3b04 	str.w	r3, [lr], #4
 80099b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099c0:	f8be 3000 	ldrh.w	r3, [lr]
 80099c4:	fb09 330a 	mla	r3, r9, sl, r3
 80099c8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099cc:	4562      	cmp	r2, ip
 80099ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099d2:	d8e5      	bhi.n	80099a0 <__multiply+0x10c>
 80099d4:	9f01      	ldr	r7, [sp, #4]
 80099d6:	51eb      	str	r3, [r5, r7]
 80099d8:	3504      	adds	r5, #4
 80099da:	e799      	b.n	8009910 <__multiply+0x7c>
 80099dc:	3e01      	subs	r6, #1
 80099de:	e79b      	b.n	8009918 <__multiply+0x84>
 80099e0:	0800aaf0 	.word	0x0800aaf0
 80099e4:	0800ab01 	.word	0x0800ab01

080099e8 <__pow5mult>:
 80099e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099ec:	4615      	mov	r5, r2
 80099ee:	f012 0203 	ands.w	r2, r2, #3
 80099f2:	4607      	mov	r7, r0
 80099f4:	460e      	mov	r6, r1
 80099f6:	d007      	beq.n	8009a08 <__pow5mult+0x20>
 80099f8:	4c25      	ldr	r4, [pc, #148]	@ (8009a90 <__pow5mult+0xa8>)
 80099fa:	3a01      	subs	r2, #1
 80099fc:	2300      	movs	r3, #0
 80099fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a02:	f7ff fe9f 	bl	8009744 <__multadd>
 8009a06:	4606      	mov	r6, r0
 8009a08:	10ad      	asrs	r5, r5, #2
 8009a0a:	d03d      	beq.n	8009a88 <__pow5mult+0xa0>
 8009a0c:	69fc      	ldr	r4, [r7, #28]
 8009a0e:	b97c      	cbnz	r4, 8009a30 <__pow5mult+0x48>
 8009a10:	2010      	movs	r0, #16
 8009a12:	f7ff fd7f 	bl	8009514 <malloc>
 8009a16:	4602      	mov	r2, r0
 8009a18:	61f8      	str	r0, [r7, #28]
 8009a1a:	b928      	cbnz	r0, 8009a28 <__pow5mult+0x40>
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009a94 <__pow5mult+0xac>)
 8009a1e:	481e      	ldr	r0, [pc, #120]	@ (8009a98 <__pow5mult+0xb0>)
 8009a20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a24:	f000 fc30 	bl	800a288 <__assert_func>
 8009a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a2c:	6004      	str	r4, [r0, #0]
 8009a2e:	60c4      	str	r4, [r0, #12]
 8009a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a38:	b94c      	cbnz	r4, 8009a4e <__pow5mult+0x66>
 8009a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f7ff ff12 	bl	8009868 <__i2b>
 8009a44:	2300      	movs	r3, #0
 8009a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	6003      	str	r3, [r0, #0]
 8009a4e:	f04f 0900 	mov.w	r9, #0
 8009a52:	07eb      	lsls	r3, r5, #31
 8009a54:	d50a      	bpl.n	8009a6c <__pow5mult+0x84>
 8009a56:	4631      	mov	r1, r6
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f7ff ff1a 	bl	8009894 <__multiply>
 8009a60:	4631      	mov	r1, r6
 8009a62:	4680      	mov	r8, r0
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7ff fe4b 	bl	8009700 <_Bfree>
 8009a6a:	4646      	mov	r6, r8
 8009a6c:	106d      	asrs	r5, r5, #1
 8009a6e:	d00b      	beq.n	8009a88 <__pow5mult+0xa0>
 8009a70:	6820      	ldr	r0, [r4, #0]
 8009a72:	b938      	cbnz	r0, 8009a84 <__pow5mult+0x9c>
 8009a74:	4622      	mov	r2, r4
 8009a76:	4621      	mov	r1, r4
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff ff0b 	bl	8009894 <__multiply>
 8009a7e:	6020      	str	r0, [r4, #0]
 8009a80:	f8c0 9000 	str.w	r9, [r0]
 8009a84:	4604      	mov	r4, r0
 8009a86:	e7e4      	b.n	8009a52 <__pow5mult+0x6a>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a8e:	bf00      	nop
 8009a90:	0800ab5c 	.word	0x0800ab5c
 8009a94:	0800aa81 	.word	0x0800aa81
 8009a98:	0800ab01 	.word	0x0800ab01

08009a9c <__lshift>:
 8009a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa0:	460c      	mov	r4, r1
 8009aa2:	6849      	ldr	r1, [r1, #4]
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	4607      	mov	r7, r0
 8009aae:	4691      	mov	r9, r2
 8009ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab4:	f108 0601 	add.w	r6, r8, #1
 8009ab8:	42b3      	cmp	r3, r6
 8009aba:	db0b      	blt.n	8009ad4 <__lshift+0x38>
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7ff fddf 	bl	8009680 <_Balloc>
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	b948      	cbnz	r0, 8009ada <__lshift+0x3e>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	4b28      	ldr	r3, [pc, #160]	@ (8009b6c <__lshift+0xd0>)
 8009aca:	4829      	ldr	r0, [pc, #164]	@ (8009b70 <__lshift+0xd4>)
 8009acc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ad0:	f000 fbda 	bl	800a288 <__assert_func>
 8009ad4:	3101      	adds	r1, #1
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	e7ee      	b.n	8009ab8 <__lshift+0x1c>
 8009ada:	2300      	movs	r3, #0
 8009adc:	f100 0114 	add.w	r1, r0, #20
 8009ae0:	f100 0210 	add.w	r2, r0, #16
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	4553      	cmp	r3, sl
 8009ae8:	db33      	blt.n	8009b52 <__lshift+0xb6>
 8009aea:	6920      	ldr	r0, [r4, #16]
 8009aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009af0:	f104 0314 	add.w	r3, r4, #20
 8009af4:	f019 091f 	ands.w	r9, r9, #31
 8009af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b00:	d02b      	beq.n	8009b5a <__lshift+0xbe>
 8009b02:	f1c9 0e20 	rsb	lr, r9, #32
 8009b06:	468a      	mov	sl, r1
 8009b08:	2200      	movs	r2, #0
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8009b10:	4310      	orrs	r0, r2
 8009b12:	f84a 0b04 	str.w	r0, [sl], #4
 8009b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b1a:	459c      	cmp	ip, r3
 8009b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b20:	d8f3      	bhi.n	8009b0a <__lshift+0x6e>
 8009b22:	ebac 0304 	sub.w	r3, ip, r4
 8009b26:	3b15      	subs	r3, #21
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	3304      	adds	r3, #4
 8009b2e:	f104 0015 	add.w	r0, r4, #21
 8009b32:	4584      	cmp	ip, r0
 8009b34:	bf38      	it	cc
 8009b36:	2304      	movcc	r3, #4
 8009b38:	50ca      	str	r2, [r1, r3]
 8009b3a:	b10a      	cbz	r2, 8009b40 <__lshift+0xa4>
 8009b3c:	f108 0602 	add.w	r6, r8, #2
 8009b40:	3e01      	subs	r6, #1
 8009b42:	4638      	mov	r0, r7
 8009b44:	612e      	str	r6, [r5, #16]
 8009b46:	4621      	mov	r1, r4
 8009b48:	f7ff fdda 	bl	8009700 <_Bfree>
 8009b4c:	4628      	mov	r0, r5
 8009b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b56:	3301      	adds	r3, #1
 8009b58:	e7c5      	b.n	8009ae6 <__lshift+0x4a>
 8009b5a:	3904      	subs	r1, #4
 8009b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b64:	459c      	cmp	ip, r3
 8009b66:	d8f9      	bhi.n	8009b5c <__lshift+0xc0>
 8009b68:	e7ea      	b.n	8009b40 <__lshift+0xa4>
 8009b6a:	bf00      	nop
 8009b6c:	0800aaf0 	.word	0x0800aaf0
 8009b70:	0800ab01 	.word	0x0800ab01

08009b74 <__mcmp>:
 8009b74:	690a      	ldr	r2, [r1, #16]
 8009b76:	4603      	mov	r3, r0
 8009b78:	6900      	ldr	r0, [r0, #16]
 8009b7a:	1a80      	subs	r0, r0, r2
 8009b7c:	b530      	push	{r4, r5, lr}
 8009b7e:	d10e      	bne.n	8009b9e <__mcmp+0x2a>
 8009b80:	3314      	adds	r3, #20
 8009b82:	3114      	adds	r1, #20
 8009b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b94:	4295      	cmp	r5, r2
 8009b96:	d003      	beq.n	8009ba0 <__mcmp+0x2c>
 8009b98:	d205      	bcs.n	8009ba6 <__mcmp+0x32>
 8009b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d3f3      	bcc.n	8009b8c <__mcmp+0x18>
 8009ba4:	e7fb      	b.n	8009b9e <__mcmp+0x2a>
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	e7f9      	b.n	8009b9e <__mcmp+0x2a>
	...

08009bac <__mdiff>:
 8009bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bb0:	4689      	mov	r9, r1
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4648      	mov	r0, r9
 8009bb8:	4614      	mov	r4, r2
 8009bba:	f7ff ffdb 	bl	8009b74 <__mcmp>
 8009bbe:	1e05      	subs	r5, r0, #0
 8009bc0:	d112      	bne.n	8009be8 <__mdiff+0x3c>
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7ff fd5b 	bl	8009680 <_Balloc>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	b928      	cbnz	r0, 8009bda <__mdiff+0x2e>
 8009bce:	4b3f      	ldr	r3, [pc, #252]	@ (8009ccc <__mdiff+0x120>)
 8009bd0:	f240 2137 	movw	r1, #567	@ 0x237
 8009bd4:	483e      	ldr	r0, [pc, #248]	@ (8009cd0 <__mdiff+0x124>)
 8009bd6:	f000 fb57 	bl	800a288 <__assert_func>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009be0:	4610      	mov	r0, r2
 8009be2:	b003      	add	sp, #12
 8009be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be8:	bfbc      	itt	lt
 8009bea:	464b      	movlt	r3, r9
 8009bec:	46a1      	movlt	r9, r4
 8009bee:	4630      	mov	r0, r6
 8009bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bf4:	bfba      	itte	lt
 8009bf6:	461c      	movlt	r4, r3
 8009bf8:	2501      	movlt	r5, #1
 8009bfa:	2500      	movge	r5, #0
 8009bfc:	f7ff fd40 	bl	8009680 <_Balloc>
 8009c00:	4602      	mov	r2, r0
 8009c02:	b918      	cbnz	r0, 8009c0c <__mdiff+0x60>
 8009c04:	4b31      	ldr	r3, [pc, #196]	@ (8009ccc <__mdiff+0x120>)
 8009c06:	f240 2145 	movw	r1, #581	@ 0x245
 8009c0a:	e7e3      	b.n	8009bd4 <__mdiff+0x28>
 8009c0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009c10:	6926      	ldr	r6, [r4, #16]
 8009c12:	60c5      	str	r5, [r0, #12]
 8009c14:	f109 0310 	add.w	r3, r9, #16
 8009c18:	f109 0514 	add.w	r5, r9, #20
 8009c1c:	f104 0e14 	add.w	lr, r4, #20
 8009c20:	f100 0b14 	add.w	fp, r0, #20
 8009c24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	46d9      	mov	r9, fp
 8009c30:	f04f 0c00 	mov.w	ip, #0
 8009c34:	9b01      	ldr	r3, [sp, #4]
 8009c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c3e:	9301      	str	r3, [sp, #4]
 8009c40:	fa1f f38a 	uxth.w	r3, sl
 8009c44:	4619      	mov	r1, r3
 8009c46:	b283      	uxth	r3, r0
 8009c48:	1acb      	subs	r3, r1, r3
 8009c4a:	0c00      	lsrs	r0, r0, #16
 8009c4c:	4463      	add	r3, ip
 8009c4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c5c:	4576      	cmp	r6, lr
 8009c5e:	f849 3b04 	str.w	r3, [r9], #4
 8009c62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c66:	d8e5      	bhi.n	8009c34 <__mdiff+0x88>
 8009c68:	1b33      	subs	r3, r6, r4
 8009c6a:	3b15      	subs	r3, #21
 8009c6c:	f023 0303 	bic.w	r3, r3, #3
 8009c70:	3415      	adds	r4, #21
 8009c72:	3304      	adds	r3, #4
 8009c74:	42a6      	cmp	r6, r4
 8009c76:	bf38      	it	cc
 8009c78:	2304      	movcc	r3, #4
 8009c7a:	441d      	add	r5, r3
 8009c7c:	445b      	add	r3, fp
 8009c7e:	461e      	mov	r6, r3
 8009c80:	462c      	mov	r4, r5
 8009c82:	4544      	cmp	r4, r8
 8009c84:	d30e      	bcc.n	8009ca4 <__mdiff+0xf8>
 8009c86:	f108 0103 	add.w	r1, r8, #3
 8009c8a:	1b49      	subs	r1, r1, r5
 8009c8c:	f021 0103 	bic.w	r1, r1, #3
 8009c90:	3d03      	subs	r5, #3
 8009c92:	45a8      	cmp	r8, r5
 8009c94:	bf38      	it	cc
 8009c96:	2100      	movcc	r1, #0
 8009c98:	440b      	add	r3, r1
 8009c9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c9e:	b191      	cbz	r1, 8009cc6 <__mdiff+0x11a>
 8009ca0:	6117      	str	r7, [r2, #16]
 8009ca2:	e79d      	b.n	8009be0 <__mdiff+0x34>
 8009ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ca8:	46e6      	mov	lr, ip
 8009caa:	0c08      	lsrs	r0, r1, #16
 8009cac:	fa1c fc81 	uxtah	ip, ip, r1
 8009cb0:	4471      	add	r1, lr
 8009cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009cb6:	b289      	uxth	r1, r1
 8009cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009cbc:	f846 1b04 	str.w	r1, [r6], #4
 8009cc0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009cc4:	e7dd      	b.n	8009c82 <__mdiff+0xd6>
 8009cc6:	3f01      	subs	r7, #1
 8009cc8:	e7e7      	b.n	8009c9a <__mdiff+0xee>
 8009cca:	bf00      	nop
 8009ccc:	0800aaf0 	.word	0x0800aaf0
 8009cd0:	0800ab01 	.word	0x0800ab01

08009cd4 <__d2b>:
 8009cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cd8:	460f      	mov	r7, r1
 8009cda:	2101      	movs	r1, #1
 8009cdc:	ec59 8b10 	vmov	r8, r9, d0
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	f7ff fccd 	bl	8009680 <_Balloc>
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	b930      	cbnz	r0, 8009cf8 <__d2b+0x24>
 8009cea:	4602      	mov	r2, r0
 8009cec:	4b23      	ldr	r3, [pc, #140]	@ (8009d7c <__d2b+0xa8>)
 8009cee:	4824      	ldr	r0, [pc, #144]	@ (8009d80 <__d2b+0xac>)
 8009cf0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009cf4:	f000 fac8 	bl	800a288 <__assert_func>
 8009cf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009d00:	b10d      	cbz	r5, 8009d06 <__d2b+0x32>
 8009d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d06:	9301      	str	r3, [sp, #4]
 8009d08:	f1b8 0300 	subs.w	r3, r8, #0
 8009d0c:	d023      	beq.n	8009d56 <__d2b+0x82>
 8009d0e:	4668      	mov	r0, sp
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	f7ff fd7c 	bl	800980e <__lo0bits>
 8009d16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009d1a:	b1d0      	cbz	r0, 8009d52 <__d2b+0x7e>
 8009d1c:	f1c0 0320 	rsb	r3, r0, #32
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	430b      	orrs	r3, r1
 8009d26:	40c2      	lsrs	r2, r0
 8009d28:	6163      	str	r3, [r4, #20]
 8009d2a:	9201      	str	r2, [sp, #4]
 8009d2c:	9b01      	ldr	r3, [sp, #4]
 8009d2e:	61a3      	str	r3, [r4, #24]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	bf0c      	ite	eq
 8009d34:	2201      	moveq	r2, #1
 8009d36:	2202      	movne	r2, #2
 8009d38:	6122      	str	r2, [r4, #16]
 8009d3a:	b1a5      	cbz	r5, 8009d66 <__d2b+0x92>
 8009d3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009d40:	4405      	add	r5, r0
 8009d42:	603d      	str	r5, [r7, #0]
 8009d44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009d48:	6030      	str	r0, [r6, #0]
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	b003      	add	sp, #12
 8009d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d52:	6161      	str	r1, [r4, #20]
 8009d54:	e7ea      	b.n	8009d2c <__d2b+0x58>
 8009d56:	a801      	add	r0, sp, #4
 8009d58:	f7ff fd59 	bl	800980e <__lo0bits>
 8009d5c:	9b01      	ldr	r3, [sp, #4]
 8009d5e:	6163      	str	r3, [r4, #20]
 8009d60:	3020      	adds	r0, #32
 8009d62:	2201      	movs	r2, #1
 8009d64:	e7e8      	b.n	8009d38 <__d2b+0x64>
 8009d66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009d6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009d6e:	6038      	str	r0, [r7, #0]
 8009d70:	6918      	ldr	r0, [r3, #16]
 8009d72:	f7ff fd2d 	bl	80097d0 <__hi0bits>
 8009d76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009d7a:	e7e5      	b.n	8009d48 <__d2b+0x74>
 8009d7c:	0800aaf0 	.word	0x0800aaf0
 8009d80:	0800ab01 	.word	0x0800ab01

08009d84 <__sfputc_r>:
 8009d84:	6893      	ldr	r3, [r2, #8]
 8009d86:	3b01      	subs	r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	b410      	push	{r4}
 8009d8c:	6093      	str	r3, [r2, #8]
 8009d8e:	da08      	bge.n	8009da2 <__sfputc_r+0x1e>
 8009d90:	6994      	ldr	r4, [r2, #24]
 8009d92:	42a3      	cmp	r3, r4
 8009d94:	db01      	blt.n	8009d9a <__sfputc_r+0x16>
 8009d96:	290a      	cmp	r1, #10
 8009d98:	d103      	bne.n	8009da2 <__sfputc_r+0x1e>
 8009d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d9e:	f7fe bc00 	b.w	80085a2 <__swbuf_r>
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	1c58      	adds	r0, r3, #1
 8009da6:	6010      	str	r0, [r2, #0]
 8009da8:	7019      	strb	r1, [r3, #0]
 8009daa:	4608      	mov	r0, r1
 8009dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <__sfputs_r>:
 8009db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db4:	4606      	mov	r6, r0
 8009db6:	460f      	mov	r7, r1
 8009db8:	4614      	mov	r4, r2
 8009dba:	18d5      	adds	r5, r2, r3
 8009dbc:	42ac      	cmp	r4, r5
 8009dbe:	d101      	bne.n	8009dc4 <__sfputs_r+0x12>
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	e007      	b.n	8009dd4 <__sfputs_r+0x22>
 8009dc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc8:	463a      	mov	r2, r7
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7ff ffda 	bl	8009d84 <__sfputc_r>
 8009dd0:	1c43      	adds	r3, r0, #1
 8009dd2:	d1f3      	bne.n	8009dbc <__sfputs_r+0xa>
 8009dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dd8 <_vfiprintf_r>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	460d      	mov	r5, r1
 8009dde:	b09d      	sub	sp, #116	@ 0x74
 8009de0:	4614      	mov	r4, r2
 8009de2:	4698      	mov	r8, r3
 8009de4:	4606      	mov	r6, r0
 8009de6:	b118      	cbz	r0, 8009df0 <_vfiprintf_r+0x18>
 8009de8:	6a03      	ldr	r3, [r0, #32]
 8009dea:	b90b      	cbnz	r3, 8009df0 <_vfiprintf_r+0x18>
 8009dec:	f7fe faf0 	bl	80083d0 <__sinit>
 8009df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009df2:	07d9      	lsls	r1, r3, #31
 8009df4:	d405      	bmi.n	8009e02 <_vfiprintf_r+0x2a>
 8009df6:	89ab      	ldrh	r3, [r5, #12]
 8009df8:	059a      	lsls	r2, r3, #22
 8009dfa:	d402      	bmi.n	8009e02 <_vfiprintf_r+0x2a>
 8009dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009dfe:	f7fe fce2 	bl	80087c6 <__retarget_lock_acquire_recursive>
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	071b      	lsls	r3, r3, #28
 8009e06:	d501      	bpl.n	8009e0c <_vfiprintf_r+0x34>
 8009e08:	692b      	ldr	r3, [r5, #16]
 8009e0a:	b99b      	cbnz	r3, 8009e34 <_vfiprintf_r+0x5c>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	4630      	mov	r0, r6
 8009e10:	f7fe fc06 	bl	8008620 <__swsetup_r>
 8009e14:	b170      	cbz	r0, 8009e34 <_vfiprintf_r+0x5c>
 8009e16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e18:	07dc      	lsls	r4, r3, #31
 8009e1a:	d504      	bpl.n	8009e26 <_vfiprintf_r+0x4e>
 8009e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e20:	b01d      	add	sp, #116	@ 0x74
 8009e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	89ab      	ldrh	r3, [r5, #12]
 8009e28:	0598      	lsls	r0, r3, #22
 8009e2a:	d4f7      	bmi.n	8009e1c <_vfiprintf_r+0x44>
 8009e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e2e:	f7fe fccb 	bl	80087c8 <__retarget_lock_release_recursive>
 8009e32:	e7f3      	b.n	8009e1c <_vfiprintf_r+0x44>
 8009e34:	2300      	movs	r3, #0
 8009e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e38:	2320      	movs	r3, #32
 8009e3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e42:	2330      	movs	r3, #48	@ 0x30
 8009e44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ff4 <_vfiprintf_r+0x21c>
 8009e48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e4c:	f04f 0901 	mov.w	r9, #1
 8009e50:	4623      	mov	r3, r4
 8009e52:	469a      	mov	sl, r3
 8009e54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e58:	b10a      	cbz	r2, 8009e5e <_vfiprintf_r+0x86>
 8009e5a:	2a25      	cmp	r2, #37	@ 0x25
 8009e5c:	d1f9      	bne.n	8009e52 <_vfiprintf_r+0x7a>
 8009e5e:	ebba 0b04 	subs.w	fp, sl, r4
 8009e62:	d00b      	beq.n	8009e7c <_vfiprintf_r+0xa4>
 8009e64:	465b      	mov	r3, fp
 8009e66:	4622      	mov	r2, r4
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ffa1 	bl	8009db2 <__sfputs_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	f000 80a7 	beq.w	8009fc4 <_vfiprintf_r+0x1ec>
 8009e76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e78:	445a      	add	r2, fp
 8009e7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	f000 809f 	beq.w	8009fc4 <_vfiprintf_r+0x1ec>
 8009e86:	2300      	movs	r3, #0
 8009e88:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e90:	f10a 0a01 	add.w	sl, sl, #1
 8009e94:	9304      	str	r3, [sp, #16]
 8009e96:	9307      	str	r3, [sp, #28]
 8009e98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e9e:	4654      	mov	r4, sl
 8009ea0:	2205      	movs	r2, #5
 8009ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea6:	4853      	ldr	r0, [pc, #332]	@ (8009ff4 <_vfiprintf_r+0x21c>)
 8009ea8:	f7f6 f96a 	bl	8000180 <memchr>
 8009eac:	9a04      	ldr	r2, [sp, #16]
 8009eae:	b9d8      	cbnz	r0, 8009ee8 <_vfiprintf_r+0x110>
 8009eb0:	06d1      	lsls	r1, r2, #27
 8009eb2:	bf44      	itt	mi
 8009eb4:	2320      	movmi	r3, #32
 8009eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eba:	0713      	lsls	r3, r2, #28
 8009ebc:	bf44      	itt	mi
 8009ebe:	232b      	movmi	r3, #43	@ 0x2b
 8009ec0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009eca:	d015      	beq.n	8009ef8 <_vfiprintf_r+0x120>
 8009ecc:	9a07      	ldr	r2, [sp, #28]
 8009ece:	4654      	mov	r4, sl
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	f04f 0c0a 	mov.w	ip, #10
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009edc:	3b30      	subs	r3, #48	@ 0x30
 8009ede:	2b09      	cmp	r3, #9
 8009ee0:	d94b      	bls.n	8009f7a <_vfiprintf_r+0x1a2>
 8009ee2:	b1b0      	cbz	r0, 8009f12 <_vfiprintf_r+0x13a>
 8009ee4:	9207      	str	r2, [sp, #28]
 8009ee6:	e014      	b.n	8009f12 <_vfiprintf_r+0x13a>
 8009ee8:	eba0 0308 	sub.w	r3, r0, r8
 8009eec:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	46a2      	mov	sl, r4
 8009ef6:	e7d2      	b.n	8009e9e <_vfiprintf_r+0xc6>
 8009ef8:	9b03      	ldr	r3, [sp, #12]
 8009efa:	1d19      	adds	r1, r3, #4
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	9103      	str	r1, [sp, #12]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	bfbb      	ittet	lt
 8009f04:	425b      	neglt	r3, r3
 8009f06:	f042 0202 	orrlt.w	r2, r2, #2
 8009f0a:	9307      	strge	r3, [sp, #28]
 8009f0c:	9307      	strlt	r3, [sp, #28]
 8009f0e:	bfb8      	it	lt
 8009f10:	9204      	strlt	r2, [sp, #16]
 8009f12:	7823      	ldrb	r3, [r4, #0]
 8009f14:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f16:	d10a      	bne.n	8009f2e <_vfiprintf_r+0x156>
 8009f18:	7863      	ldrb	r3, [r4, #1]
 8009f1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f1c:	d132      	bne.n	8009f84 <_vfiprintf_r+0x1ac>
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	1d1a      	adds	r2, r3, #4
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	9203      	str	r2, [sp, #12]
 8009f26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f2a:	3402      	adds	r4, #2
 8009f2c:	9305      	str	r3, [sp, #20]
 8009f2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a004 <_vfiprintf_r+0x22c>
 8009f32:	7821      	ldrb	r1, [r4, #0]
 8009f34:	2203      	movs	r2, #3
 8009f36:	4650      	mov	r0, sl
 8009f38:	f7f6 f922 	bl	8000180 <memchr>
 8009f3c:	b138      	cbz	r0, 8009f4e <_vfiprintf_r+0x176>
 8009f3e:	9b04      	ldr	r3, [sp, #16]
 8009f40:	eba0 000a 	sub.w	r0, r0, sl
 8009f44:	2240      	movs	r2, #64	@ 0x40
 8009f46:	4082      	lsls	r2, r0
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	3401      	adds	r4, #1
 8009f4c:	9304      	str	r3, [sp, #16]
 8009f4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f52:	4829      	ldr	r0, [pc, #164]	@ (8009ff8 <_vfiprintf_r+0x220>)
 8009f54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f58:	2206      	movs	r2, #6
 8009f5a:	f7f6 f911 	bl	8000180 <memchr>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d03f      	beq.n	8009fe2 <_vfiprintf_r+0x20a>
 8009f62:	4b26      	ldr	r3, [pc, #152]	@ (8009ffc <_vfiprintf_r+0x224>)
 8009f64:	bb1b      	cbnz	r3, 8009fae <_vfiprintf_r+0x1d6>
 8009f66:	9b03      	ldr	r3, [sp, #12]
 8009f68:	3307      	adds	r3, #7
 8009f6a:	f023 0307 	bic.w	r3, r3, #7
 8009f6e:	3308      	adds	r3, #8
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f74:	443b      	add	r3, r7
 8009f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f78:	e76a      	b.n	8009e50 <_vfiprintf_r+0x78>
 8009f7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f7e:	460c      	mov	r4, r1
 8009f80:	2001      	movs	r0, #1
 8009f82:	e7a8      	b.n	8009ed6 <_vfiprintf_r+0xfe>
 8009f84:	2300      	movs	r3, #0
 8009f86:	3401      	adds	r4, #1
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f04f 0c0a 	mov.w	ip, #10
 8009f90:	4620      	mov	r0, r4
 8009f92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f96:	3a30      	subs	r2, #48	@ 0x30
 8009f98:	2a09      	cmp	r2, #9
 8009f9a:	d903      	bls.n	8009fa4 <_vfiprintf_r+0x1cc>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d0c6      	beq.n	8009f2e <_vfiprintf_r+0x156>
 8009fa0:	9105      	str	r1, [sp, #20]
 8009fa2:	e7c4      	b.n	8009f2e <_vfiprintf_r+0x156>
 8009fa4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa8:	4604      	mov	r4, r0
 8009faa:	2301      	movs	r3, #1
 8009fac:	e7f0      	b.n	8009f90 <_vfiprintf_r+0x1b8>
 8009fae:	ab03      	add	r3, sp, #12
 8009fb0:	9300      	str	r3, [sp, #0]
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	4b12      	ldr	r3, [pc, #72]	@ (800a000 <_vfiprintf_r+0x228>)
 8009fb6:	a904      	add	r1, sp, #16
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f7fd fdc5 	bl	8007b48 <_printf_float>
 8009fbe:	4607      	mov	r7, r0
 8009fc0:	1c78      	adds	r0, r7, #1
 8009fc2:	d1d6      	bne.n	8009f72 <_vfiprintf_r+0x19a>
 8009fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fc6:	07d9      	lsls	r1, r3, #31
 8009fc8:	d405      	bmi.n	8009fd6 <_vfiprintf_r+0x1fe>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	059a      	lsls	r2, r3, #22
 8009fce:	d402      	bmi.n	8009fd6 <_vfiprintf_r+0x1fe>
 8009fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fd2:	f7fe fbf9 	bl	80087c8 <__retarget_lock_release_recursive>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	065b      	lsls	r3, r3, #25
 8009fda:	f53f af1f 	bmi.w	8009e1c <_vfiprintf_r+0x44>
 8009fde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fe0:	e71e      	b.n	8009e20 <_vfiprintf_r+0x48>
 8009fe2:	ab03      	add	r3, sp, #12
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	4b05      	ldr	r3, [pc, #20]	@ (800a000 <_vfiprintf_r+0x228>)
 8009fea:	a904      	add	r1, sp, #16
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7fe f843 	bl	8008078 <_printf_i>
 8009ff2:	e7e4      	b.n	8009fbe <_vfiprintf_r+0x1e6>
 8009ff4:	0800ac58 	.word	0x0800ac58
 8009ff8:	0800ac62 	.word	0x0800ac62
 8009ffc:	08007b49 	.word	0x08007b49
 800a000:	08009db3 	.word	0x08009db3
 800a004:	0800ac5e 	.word	0x0800ac5e

0800a008 <__sflush_r>:
 800a008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a010:	0716      	lsls	r6, r2, #28
 800a012:	4605      	mov	r5, r0
 800a014:	460c      	mov	r4, r1
 800a016:	d454      	bmi.n	800a0c2 <__sflush_r+0xba>
 800a018:	684b      	ldr	r3, [r1, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	dc02      	bgt.n	800a024 <__sflush_r+0x1c>
 800a01e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	dd48      	ble.n	800a0b6 <__sflush_r+0xae>
 800a024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a026:	2e00      	cmp	r6, #0
 800a028:	d045      	beq.n	800a0b6 <__sflush_r+0xae>
 800a02a:	2300      	movs	r3, #0
 800a02c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a030:	682f      	ldr	r7, [r5, #0]
 800a032:	6a21      	ldr	r1, [r4, #32]
 800a034:	602b      	str	r3, [r5, #0]
 800a036:	d030      	beq.n	800a09a <__sflush_r+0x92>
 800a038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	0759      	lsls	r1, r3, #29
 800a03e:	d505      	bpl.n	800a04c <__sflush_r+0x44>
 800a040:	6863      	ldr	r3, [r4, #4]
 800a042:	1ad2      	subs	r2, r2, r3
 800a044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a046:	b10b      	cbz	r3, 800a04c <__sflush_r+0x44>
 800a048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a04a:	1ad2      	subs	r2, r2, r3
 800a04c:	2300      	movs	r3, #0
 800a04e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a050:	6a21      	ldr	r1, [r4, #32]
 800a052:	4628      	mov	r0, r5
 800a054:	47b0      	blx	r6
 800a056:	1c43      	adds	r3, r0, #1
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	d106      	bne.n	800a06a <__sflush_r+0x62>
 800a05c:	6829      	ldr	r1, [r5, #0]
 800a05e:	291d      	cmp	r1, #29
 800a060:	d82b      	bhi.n	800a0ba <__sflush_r+0xb2>
 800a062:	4a2a      	ldr	r2, [pc, #168]	@ (800a10c <__sflush_r+0x104>)
 800a064:	410a      	asrs	r2, r1
 800a066:	07d6      	lsls	r6, r2, #31
 800a068:	d427      	bmi.n	800a0ba <__sflush_r+0xb2>
 800a06a:	2200      	movs	r2, #0
 800a06c:	6062      	str	r2, [r4, #4]
 800a06e:	04d9      	lsls	r1, r3, #19
 800a070:	6922      	ldr	r2, [r4, #16]
 800a072:	6022      	str	r2, [r4, #0]
 800a074:	d504      	bpl.n	800a080 <__sflush_r+0x78>
 800a076:	1c42      	adds	r2, r0, #1
 800a078:	d101      	bne.n	800a07e <__sflush_r+0x76>
 800a07a:	682b      	ldr	r3, [r5, #0]
 800a07c:	b903      	cbnz	r3, 800a080 <__sflush_r+0x78>
 800a07e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a082:	602f      	str	r7, [r5, #0]
 800a084:	b1b9      	cbz	r1, 800a0b6 <__sflush_r+0xae>
 800a086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a08a:	4299      	cmp	r1, r3
 800a08c:	d002      	beq.n	800a094 <__sflush_r+0x8c>
 800a08e:	4628      	mov	r0, r5
 800a090:	f7ff f9f6 	bl	8009480 <_free_r>
 800a094:	2300      	movs	r3, #0
 800a096:	6363      	str	r3, [r4, #52]	@ 0x34
 800a098:	e00d      	b.n	800a0b6 <__sflush_r+0xae>
 800a09a:	2301      	movs	r3, #1
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b0      	blx	r6
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	1c50      	adds	r0, r2, #1
 800a0a4:	d1c9      	bne.n	800a03a <__sflush_r+0x32>
 800a0a6:	682b      	ldr	r3, [r5, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0c6      	beq.n	800a03a <__sflush_r+0x32>
 800a0ac:	2b1d      	cmp	r3, #29
 800a0ae:	d001      	beq.n	800a0b4 <__sflush_r+0xac>
 800a0b0:	2b16      	cmp	r3, #22
 800a0b2:	d11e      	bne.n	800a0f2 <__sflush_r+0xea>
 800a0b4:	602f      	str	r7, [r5, #0]
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e022      	b.n	800a100 <__sflush_r+0xf8>
 800a0ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0be:	b21b      	sxth	r3, r3
 800a0c0:	e01b      	b.n	800a0fa <__sflush_r+0xf2>
 800a0c2:	690f      	ldr	r7, [r1, #16]
 800a0c4:	2f00      	cmp	r7, #0
 800a0c6:	d0f6      	beq.n	800a0b6 <__sflush_r+0xae>
 800a0c8:	0793      	lsls	r3, r2, #30
 800a0ca:	680e      	ldr	r6, [r1, #0]
 800a0cc:	bf08      	it	eq
 800a0ce:	694b      	ldreq	r3, [r1, #20]
 800a0d0:	600f      	str	r7, [r1, #0]
 800a0d2:	bf18      	it	ne
 800a0d4:	2300      	movne	r3, #0
 800a0d6:	eba6 0807 	sub.w	r8, r6, r7
 800a0da:	608b      	str	r3, [r1, #8]
 800a0dc:	f1b8 0f00 	cmp.w	r8, #0
 800a0e0:	dde9      	ble.n	800a0b6 <__sflush_r+0xae>
 800a0e2:	6a21      	ldr	r1, [r4, #32]
 800a0e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a0e6:	4643      	mov	r3, r8
 800a0e8:	463a      	mov	r2, r7
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	47b0      	blx	r6
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	dc08      	bgt.n	800a104 <__sflush_r+0xfc>
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0fa:	81a3      	strh	r3, [r4, #12]
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a104:	4407      	add	r7, r0
 800a106:	eba8 0800 	sub.w	r8, r8, r0
 800a10a:	e7e7      	b.n	800a0dc <__sflush_r+0xd4>
 800a10c:	dfbffffe 	.word	0xdfbffffe

0800a110 <_fflush_r>:
 800a110:	b538      	push	{r3, r4, r5, lr}
 800a112:	690b      	ldr	r3, [r1, #16]
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	b913      	cbnz	r3, 800a120 <_fflush_r+0x10>
 800a11a:	2500      	movs	r5, #0
 800a11c:	4628      	mov	r0, r5
 800a11e:	bd38      	pop	{r3, r4, r5, pc}
 800a120:	b118      	cbz	r0, 800a12a <_fflush_r+0x1a>
 800a122:	6a03      	ldr	r3, [r0, #32]
 800a124:	b90b      	cbnz	r3, 800a12a <_fflush_r+0x1a>
 800a126:	f7fe f953 	bl	80083d0 <__sinit>
 800a12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d0f3      	beq.n	800a11a <_fflush_r+0xa>
 800a132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a134:	07d0      	lsls	r0, r2, #31
 800a136:	d404      	bmi.n	800a142 <_fflush_r+0x32>
 800a138:	0599      	lsls	r1, r3, #22
 800a13a:	d402      	bmi.n	800a142 <_fflush_r+0x32>
 800a13c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a13e:	f7fe fb42 	bl	80087c6 <__retarget_lock_acquire_recursive>
 800a142:	4628      	mov	r0, r5
 800a144:	4621      	mov	r1, r4
 800a146:	f7ff ff5f 	bl	800a008 <__sflush_r>
 800a14a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a14c:	07da      	lsls	r2, r3, #31
 800a14e:	4605      	mov	r5, r0
 800a150:	d4e4      	bmi.n	800a11c <_fflush_r+0xc>
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	059b      	lsls	r3, r3, #22
 800a156:	d4e1      	bmi.n	800a11c <_fflush_r+0xc>
 800a158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a15a:	f7fe fb35 	bl	80087c8 <__retarget_lock_release_recursive>
 800a15e:	e7dd      	b.n	800a11c <_fflush_r+0xc>

0800a160 <__swhatbuf_r>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	460c      	mov	r4, r1
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	2900      	cmp	r1, #0
 800a16a:	b096      	sub	sp, #88	@ 0x58
 800a16c:	4615      	mov	r5, r2
 800a16e:	461e      	mov	r6, r3
 800a170:	da0d      	bge.n	800a18e <__swhatbuf_r+0x2e>
 800a172:	89a3      	ldrh	r3, [r4, #12]
 800a174:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a178:	f04f 0100 	mov.w	r1, #0
 800a17c:	bf14      	ite	ne
 800a17e:	2340      	movne	r3, #64	@ 0x40
 800a180:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a184:	2000      	movs	r0, #0
 800a186:	6031      	str	r1, [r6, #0]
 800a188:	602b      	str	r3, [r5, #0]
 800a18a:	b016      	add	sp, #88	@ 0x58
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	466a      	mov	r2, sp
 800a190:	f000 f848 	bl	800a224 <_fstat_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	dbec      	blt.n	800a172 <__swhatbuf_r+0x12>
 800a198:	9901      	ldr	r1, [sp, #4]
 800a19a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a19e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a1a2:	4259      	negs	r1, r3
 800a1a4:	4159      	adcs	r1, r3
 800a1a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1aa:	e7eb      	b.n	800a184 <__swhatbuf_r+0x24>

0800a1ac <__smakebuf_r>:
 800a1ac:	898b      	ldrh	r3, [r1, #12]
 800a1ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1b0:	079d      	lsls	r5, r3, #30
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	460c      	mov	r4, r1
 800a1b6:	d507      	bpl.n	800a1c8 <__smakebuf_r+0x1c>
 800a1b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a1bc:	6023      	str	r3, [r4, #0]
 800a1be:	6123      	str	r3, [r4, #16]
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	6163      	str	r3, [r4, #20]
 800a1c4:	b003      	add	sp, #12
 800a1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1c8:	ab01      	add	r3, sp, #4
 800a1ca:	466a      	mov	r2, sp
 800a1cc:	f7ff ffc8 	bl	800a160 <__swhatbuf_r>
 800a1d0:	9f00      	ldr	r7, [sp, #0]
 800a1d2:	4605      	mov	r5, r0
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f7ff f9c6 	bl	8009568 <_malloc_r>
 800a1dc:	b948      	cbnz	r0, 800a1f2 <__smakebuf_r+0x46>
 800a1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1e2:	059a      	lsls	r2, r3, #22
 800a1e4:	d4ee      	bmi.n	800a1c4 <__smakebuf_r+0x18>
 800a1e6:	f023 0303 	bic.w	r3, r3, #3
 800a1ea:	f043 0302 	orr.w	r3, r3, #2
 800a1ee:	81a3      	strh	r3, [r4, #12]
 800a1f0:	e7e2      	b.n	800a1b8 <__smakebuf_r+0xc>
 800a1f2:	89a3      	ldrh	r3, [r4, #12]
 800a1f4:	6020      	str	r0, [r4, #0]
 800a1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1fa:	81a3      	strh	r3, [r4, #12]
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a202:	b15b      	cbz	r3, 800a21c <__smakebuf_r+0x70>
 800a204:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a208:	4630      	mov	r0, r6
 800a20a:	f000 f81d 	bl	800a248 <_isatty_r>
 800a20e:	b128      	cbz	r0, 800a21c <__smakebuf_r+0x70>
 800a210:	89a3      	ldrh	r3, [r4, #12]
 800a212:	f023 0303 	bic.w	r3, r3, #3
 800a216:	f043 0301 	orr.w	r3, r3, #1
 800a21a:	81a3      	strh	r3, [r4, #12]
 800a21c:	89a3      	ldrh	r3, [r4, #12]
 800a21e:	431d      	orrs	r5, r3
 800a220:	81a5      	strh	r5, [r4, #12]
 800a222:	e7cf      	b.n	800a1c4 <__smakebuf_r+0x18>

0800a224 <_fstat_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d07      	ldr	r5, [pc, #28]	@ (800a244 <_fstat_r+0x20>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	4611      	mov	r1, r2
 800a230:	602b      	str	r3, [r5, #0]
 800a232:	f7f7 f9fd 	bl	8001630 <_fstat>
 800a236:	1c43      	adds	r3, r0, #1
 800a238:	d102      	bne.n	800a240 <_fstat_r+0x1c>
 800a23a:	682b      	ldr	r3, [r5, #0]
 800a23c:	b103      	cbz	r3, 800a240 <_fstat_r+0x1c>
 800a23e:	6023      	str	r3, [r4, #0]
 800a240:	bd38      	pop	{r3, r4, r5, pc}
 800a242:	bf00      	nop
 800a244:	200004bc 	.word	0x200004bc

0800a248 <_isatty_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4d06      	ldr	r5, [pc, #24]	@ (800a264 <_isatty_r+0x1c>)
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	4608      	mov	r0, r1
 800a252:	602b      	str	r3, [r5, #0]
 800a254:	f7f7 f9fc 	bl	8001650 <_isatty>
 800a258:	1c43      	adds	r3, r0, #1
 800a25a:	d102      	bne.n	800a262 <_isatty_r+0x1a>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	b103      	cbz	r3, 800a262 <_isatty_r+0x1a>
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	bd38      	pop	{r3, r4, r5, pc}
 800a264:	200004bc 	.word	0x200004bc

0800a268 <_sbrk_r>:
 800a268:	b538      	push	{r3, r4, r5, lr}
 800a26a:	4d06      	ldr	r5, [pc, #24]	@ (800a284 <_sbrk_r+0x1c>)
 800a26c:	2300      	movs	r3, #0
 800a26e:	4604      	mov	r4, r0
 800a270:	4608      	mov	r0, r1
 800a272:	602b      	str	r3, [r5, #0]
 800a274:	f7f7 fa04 	bl	8001680 <_sbrk>
 800a278:	1c43      	adds	r3, r0, #1
 800a27a:	d102      	bne.n	800a282 <_sbrk_r+0x1a>
 800a27c:	682b      	ldr	r3, [r5, #0]
 800a27e:	b103      	cbz	r3, 800a282 <_sbrk_r+0x1a>
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	bd38      	pop	{r3, r4, r5, pc}
 800a284:	200004bc 	.word	0x200004bc

0800a288 <__assert_func>:
 800a288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a28a:	4614      	mov	r4, r2
 800a28c:	461a      	mov	r2, r3
 800a28e:	4b09      	ldr	r3, [pc, #36]	@ (800a2b4 <__assert_func+0x2c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4605      	mov	r5, r0
 800a294:	68d8      	ldr	r0, [r3, #12]
 800a296:	b954      	cbnz	r4, 800a2ae <__assert_func+0x26>
 800a298:	4b07      	ldr	r3, [pc, #28]	@ (800a2b8 <__assert_func+0x30>)
 800a29a:	461c      	mov	r4, r3
 800a29c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2a0:	9100      	str	r1, [sp, #0]
 800a2a2:	462b      	mov	r3, r5
 800a2a4:	4905      	ldr	r1, [pc, #20]	@ (800a2bc <__assert_func+0x34>)
 800a2a6:	f000 f841 	bl	800a32c <fiprintf>
 800a2aa:	f000 f851 	bl	800a350 <abort>
 800a2ae:	4b04      	ldr	r3, [pc, #16]	@ (800a2c0 <__assert_func+0x38>)
 800a2b0:	e7f4      	b.n	800a29c <__assert_func+0x14>
 800a2b2:	bf00      	nop
 800a2b4:	20000038 	.word	0x20000038
 800a2b8:	0800acae 	.word	0x0800acae
 800a2bc:	0800ac80 	.word	0x0800ac80
 800a2c0:	0800ac73 	.word	0x0800ac73

0800a2c4 <_calloc_r>:
 800a2c4:	b570      	push	{r4, r5, r6, lr}
 800a2c6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2ca:	b93c      	cbnz	r4, 800a2dc <_calloc_r+0x18>
 800a2cc:	4629      	mov	r1, r5
 800a2ce:	f7ff f94b 	bl	8009568 <_malloc_r>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	b928      	cbnz	r0, 800a2e2 <_calloc_r+0x1e>
 800a2d6:	2600      	movs	r6, #0
 800a2d8:	4630      	mov	r0, r6
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	220c      	movs	r2, #12
 800a2de:	6002      	str	r2, [r0, #0]
 800a2e0:	e7f9      	b.n	800a2d6 <_calloc_r+0x12>
 800a2e2:	462a      	mov	r2, r5
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	f7fe f9f1 	bl	80086cc <memset>
 800a2ea:	e7f5      	b.n	800a2d8 <_calloc_r+0x14>

0800a2ec <__ascii_mbtowc>:
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	b901      	cbnz	r1, 800a2f2 <__ascii_mbtowc+0x6>
 800a2f0:	a901      	add	r1, sp, #4
 800a2f2:	b142      	cbz	r2, 800a306 <__ascii_mbtowc+0x1a>
 800a2f4:	b14b      	cbz	r3, 800a30a <__ascii_mbtowc+0x1e>
 800a2f6:	7813      	ldrb	r3, [r2, #0]
 800a2f8:	600b      	str	r3, [r1, #0]
 800a2fa:	7812      	ldrb	r2, [r2, #0]
 800a2fc:	1e10      	subs	r0, r2, #0
 800a2fe:	bf18      	it	ne
 800a300:	2001      	movne	r0, #1
 800a302:	b002      	add	sp, #8
 800a304:	4770      	bx	lr
 800a306:	4610      	mov	r0, r2
 800a308:	e7fb      	b.n	800a302 <__ascii_mbtowc+0x16>
 800a30a:	f06f 0001 	mvn.w	r0, #1
 800a30e:	e7f8      	b.n	800a302 <__ascii_mbtowc+0x16>

0800a310 <__ascii_wctomb>:
 800a310:	4603      	mov	r3, r0
 800a312:	4608      	mov	r0, r1
 800a314:	b141      	cbz	r1, 800a328 <__ascii_wctomb+0x18>
 800a316:	2aff      	cmp	r2, #255	@ 0xff
 800a318:	d904      	bls.n	800a324 <__ascii_wctomb+0x14>
 800a31a:	228a      	movs	r2, #138	@ 0x8a
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f04f 30ff 	mov.w	r0, #4294967295
 800a322:	4770      	bx	lr
 800a324:	700a      	strb	r2, [r1, #0]
 800a326:	2001      	movs	r0, #1
 800a328:	4770      	bx	lr
	...

0800a32c <fiprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b503      	push	{r0, r1, lr}
 800a330:	4601      	mov	r1, r0
 800a332:	ab03      	add	r3, sp, #12
 800a334:	4805      	ldr	r0, [pc, #20]	@ (800a34c <fiprintf+0x20>)
 800a336:	f853 2b04 	ldr.w	r2, [r3], #4
 800a33a:	6800      	ldr	r0, [r0, #0]
 800a33c:	9301      	str	r3, [sp, #4]
 800a33e:	f7ff fd4b 	bl	8009dd8 <_vfiprintf_r>
 800a342:	b002      	add	sp, #8
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	20000038 	.word	0x20000038

0800a350 <abort>:
 800a350:	b508      	push	{r3, lr}
 800a352:	2006      	movs	r0, #6
 800a354:	f000 f82c 	bl	800a3b0 <raise>
 800a358:	2001      	movs	r0, #1
 800a35a:	f7f7 f935 	bl	80015c8 <_exit>

0800a35e <_raise_r>:
 800a35e:	291f      	cmp	r1, #31
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4605      	mov	r5, r0
 800a364:	460c      	mov	r4, r1
 800a366:	d904      	bls.n	800a372 <_raise_r+0x14>
 800a368:	2316      	movs	r3, #22
 800a36a:	6003      	str	r3, [r0, #0]
 800a36c:	f04f 30ff 	mov.w	r0, #4294967295
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a374:	b112      	cbz	r2, 800a37c <_raise_r+0x1e>
 800a376:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a37a:	b94b      	cbnz	r3, 800a390 <_raise_r+0x32>
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f831 	bl	800a3e4 <_getpid_r>
 800a382:	4622      	mov	r2, r4
 800a384:	4601      	mov	r1, r0
 800a386:	4628      	mov	r0, r5
 800a388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a38c:	f000 b818 	b.w	800a3c0 <_kill_r>
 800a390:	2b01      	cmp	r3, #1
 800a392:	d00a      	beq.n	800a3aa <_raise_r+0x4c>
 800a394:	1c59      	adds	r1, r3, #1
 800a396:	d103      	bne.n	800a3a0 <_raise_r+0x42>
 800a398:	2316      	movs	r3, #22
 800a39a:	6003      	str	r3, [r0, #0]
 800a39c:	2001      	movs	r0, #1
 800a39e:	e7e7      	b.n	800a370 <_raise_r+0x12>
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4798      	blx	r3
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	e7e0      	b.n	800a370 <_raise_r+0x12>
	...

0800a3b0 <raise>:
 800a3b0:	4b02      	ldr	r3, [pc, #8]	@ (800a3bc <raise+0xc>)
 800a3b2:	4601      	mov	r1, r0
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	f7ff bfd2 	b.w	800a35e <_raise_r>
 800a3ba:	bf00      	nop
 800a3bc:	20000038 	.word	0x20000038

0800a3c0 <_kill_r>:
 800a3c0:	b538      	push	{r3, r4, r5, lr}
 800a3c2:	4d07      	ldr	r5, [pc, #28]	@ (800a3e0 <_kill_r+0x20>)
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	4604      	mov	r4, r0
 800a3c8:	4608      	mov	r0, r1
 800a3ca:	4611      	mov	r1, r2
 800a3cc:	602b      	str	r3, [r5, #0]
 800a3ce:	f7f7 f8eb 	bl	80015a8 <_kill>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	d102      	bne.n	800a3dc <_kill_r+0x1c>
 800a3d6:	682b      	ldr	r3, [r5, #0]
 800a3d8:	b103      	cbz	r3, 800a3dc <_kill_r+0x1c>
 800a3da:	6023      	str	r3, [r4, #0]
 800a3dc:	bd38      	pop	{r3, r4, r5, pc}
 800a3de:	bf00      	nop
 800a3e0:	200004bc 	.word	0x200004bc

0800a3e4 <_getpid_r>:
 800a3e4:	f7f7 b8d8 	b.w	8001598 <_getpid>

0800a3e8 <_init>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	bf00      	nop
 800a3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ee:	bc08      	pop	{r3}
 800a3f0:	469e      	mov	lr, r3
 800a3f2:	4770      	bx	lr

0800a3f4 <_fini>:
 800a3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f6:	bf00      	nop
 800a3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3fa:	bc08      	pop	{r3}
 800a3fc:	469e      	mov	lr, r3
 800a3fe:	4770      	bx	lr
